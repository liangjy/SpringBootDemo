<?xml version="1.0" encoding="UTF-8"?>
<xml-body>

<sqlTemplate id="Common_04_city_area_mkt_NameAndId" description="取全部营服的id和名称进行缓存">
	<![CDATA[
SELECT d.*,c.CITY_DISPLAY_ORDER FROM (SELECT a.*,b.DIS_ORDER FROM (select DISTINCT city_name,DISTRICT_ID
       ,DISTRICT_NAME
       ,MKTCEN_ID,MKTCEN_NAME,GIS_DATA_BAIDU,
       BAIDU_MAX_LONGITUDE as max_lng,
       BAIDU_MIN_LONGITUDE as min_lng,
       BAIDU_MAXLATITUDE as max_lat,
       BAIDU_MINLATITUDE as min_lat
from noce.dim_mktcenter_gis_data
where day = (select max(day) from noce.dim_mktcenter_gis_data)
and DISTRICT_NAME is not null
and TRIM(DISTRICT_NAME)<> ''
#{CITY}
AND BAIDU_MAX_LONGITUDE IS NOT NULL) a
LEFT JOIN (SELECT * FROM dim_district_gis_data WHERE DAY = (SELECT MAX(DAY) FROM dim_district_gis_data)) b
ON a.DISTRICT_ID= b.DISTRICT_ID) d LEFT JOIN dim_tele_city c ON
d.city_name=c.CITY_NAME
ORDER BY c.CITY_DISPLAY_ORDER,d.DIS_ORDER,d.DISTRICT_ID
	]]>
</sqlTemplate>	
<sqlTemplate id="Common_04_city_area_mkt_relation" description="取全部营服的轮廓id进行缓存">
	<![CDATA[
SELECT a.*,b.DIS_ORDER FROM (select DISTINCT city_name,DISTRICT_ID
       ,DISTRICT_NAME
       ,MKTCEN_ID,MKTCEN_NAME,GIS_DATA_BAIDU
       ,BAIDU_MAX_LONGITUDE as max_lng,
BAIDU_MIN_LONGITUDE as min_lng,
BAIDU_MAXLATITUDE as max_lat,
BAIDU_MINLATITUDE as min_lat
from noce.dim_mktcenter_gis_data
where day = (select max(day) from noce.dim_mktcenter_gis_data) 
and DISTRICT_NAME is not null 
and TRIM(DISTRICT_NAME)<> '') a 
LEFT JOIN (SELECT * FROM dim_district_gis_data WHERE DAY = (SELECT MAX(DAY) FROM dim_district_gis_data)) b
ON a.DISTRICT_ID= b.DISTRICT_ID
ORDER BY DIS_ORDER
	]]>
</sqlTemplate>	
<sqlTemplate id="Common_05_districtJson" description="查询区县轮廓" DB="mysql">
		<![CDATA[
SELECT a.* FROM (SELECT
	CITY_NAME,
	DISTRICT_ID,
	DISTRICT_NAME,
	GIS_DATA_BAIDU,
	BAIDU_MAX_LONGITUDE,
	BAIDU_MIN_LONGITUDE,
	BAIDU_MAXLATITUDE,
	BAIDU_MINLATITUDE,
DIS_ORDER
FROM
	dim_district_gis_merge
WHERE
	DAY = (SELECT	MAX(DAY) FROM dim_district_gis_merge)
	and CITY_NAME IS NOT NULL
AND GIS_DATA_BAIDU IS NOT NULL) a LEFT JOIN dim_tele_city b
ON a.CITY_NAME = b.CITY_NAME
ORDER BY b.CITY_DISPLAY_ORDER,a.DIS_ORDER
]]>
</sqlTemplate>

<sqlTemplate id="ItermExpo2017Term_12_user_star"
		description="不同区域全部手机终端星级用户分布">
	<![CDATA[
	select AREA_ID
	,sum(star_level_1+star_level_2+star_level_3) as Usernum_under_3star 	--  1-3星级
	,sum(star_level_4+star_level_5) as Usernum_4_5star 			-- 4-5星级
	,sum(star_level_6+star_level_7) as Usernum_6_7star 			-- 6-7星级
	,sum(user_counts-(star_level_1+star_level_2+star_level_3+star_level_4+star_level_5+star_level_6+star_level_7)) as Usernum_simple 			-- 普通用户数
from noce.FRT_2G3G_TERM_TYPE_H
where hour=(select max(hour) from noce.FRT_2G3G_TERM_TYPE_H where AREA_ID in (71,72,73,5,1,20,41,42,43) and TERM_TYPE is not NULL)
	and AREA_ID in (71,72,73,5,1,20,41,42,43)
	and TERM_TYPE is not NULl
group by AREA_ID
	
			    ]]>
</sqlTemplate>	
<sqlTemplate id="ItermExpo2017Term_13_user_school"
		description="不同区域全部手机终端校园用户分布">
	<![CDATA[
	select AREA_ID
	,sum(school_num) as school_num 	-- 校园用户
	,sum(user_counts-school_num) as Usernum_simple 			-- 普通用户
from noce.FRT_2G3G_TERM_TYPE_H
where hour=(select max(hour) from noce.FRT_2G3G_TERM_TYPE_H where AREA_ID in (71,72,73,5,1,20,41,42,43) and TERM_TYPE is not NULL)
	and AREA_ID in (71,72,73,5,1,20,41,42,43)
	and TERM_TYPE is not NULl
group by AREA_ID
			    ]]>
</sqlTemplate>		
		
<sqlTemplate id="ItermExpo2017Term_03_2_h"
		description="取展馆、酒店和机场 当天每小时用户数">
		<![CDATA[
	select area,time_stamp,sum(count) as c
from areastat
where counterName='area-stat-1hour'
    and time_stamp >= (select SUBSTR(max(time_stamp),1,8) from areastat where counterName='area-stat-1hour')
    and LOWER(area) in ('1hourphoneexpo','1hourphoneexpohotel','1hourphoneexpoairport','1hourSouthTrain','1hourGsta','1hourSportCenter','1hourArea_id33')
    and type = 'userstat'
group by area,time_stamp
order by area,time_stamp
			    ]]>
</sqlTemplate>
<sqlTemplate id="ItermExpo2017Term_03_1_min"
		description="取展馆、酒店和机场 当天每5分钟用户数">
		<![CDATA[
select area,time_stamp,sum(count) as c
from areastat
where counterName='area-stat-5min'
    and time_stamp >= (select LEFT(max(time_stamp),8)*10000 from areastat WHERE counterName = 'area-stat-5min')
    and LOWER(area) in (#{AREA})
    and type = 'userstat'
group by area,time_stamp
order by area,time_stamp
			    ]]>
</sqlTemplate>
<sqlTemplate id="ItermExpo2017Term_03_1_min_v2" description="取展馆、酒店和机场 当天每5分钟用户数">
<![CDATA[
select area_id area,time_stamp,sum(count) as c
from FLM_USR_FLOW_CNT
where counter_name='area_user_5m'
and time_stamp >= (select LEFT(max(time_stamp),8)*10000 from FLM_USR_FLOW_CNT WHERE counter_name='area_user_5m')
#{area}
group by time_stamp
order by time_stamp
]]>
</sqlTemplate>
<sqlTemplate id="ItermExpo2017Term_01_10_top10BOX"
		description="取top10应用的年龄段拆分的数据">
		<![CDATA[
	select domain,sum(count) as c,
sum(case stat when '<20' THEN count else 0 END) stat_under_20,
sum(case stat when '20-30' THEN count else 0 END) stat_20_30,
sum(case stat when '30-40' THEN count else 0 END) stat_30_40,
sum(case stat when '40-50' THEN count else 0 END) stat_40_50,
sum(case stat when '>50' THEN count else 0 END) stat_over_50
from areastat
where time_stamp=(select max(time_stamp ) from areastat where counterName='area-domain-1hour')
    and LOWER(area) ='#{area_id}'
    and domain in (
               select domain from(
                  select domain,sum(count) as c
                  from areastat
                  where time_stamp=(select max(time_stamp ) from areastat where counterName='area-domain-1hour')
                      and LOWER(area) ='#{area_id}'
                      and trim(domain)<> ''
                  group by domain
                  order by c DESC
                  limit 10
               ) t
        )
    and countername='area-domain-1hour'
    and type='age' 
group by domain
order by domain
			    ]]>
</sqlTemplate>
<sqlTemplate id="ItermExpo2017Term_01_10_top10"
		description="取最新一小时的top10应用">
		<![CDATA[	
		select domain,sum(count) as c
		from areastat
		where time_stamp=
           (SELECT MAX(time_stamp) FROM (select * from areastat
              where counterName='area-domain-1hour' AND EXISTS
(SELECT * FROM areastat WHERE domain = 'SSL' OR domain = '未知协议' OR domain = '其它'
OR domain = '其他' OR domain = '')
 		    ) a)
  and LOWER(area) ='#{area_id}' 
 AND domain not in('SSL','未知协议','其它','其他')
 		    and trim(domain)<> ''
		group by domain
		order by c DESC
		limit 10
			    ]]>
</sqlTemplate>

<sqlTemplate id="ItermExpo2017Term_01_10_top10_v2" description="取最新一小时的top10应用">
<![CDATA[
select domain,sum(count) as c
from FLM_USR_FLOW_CNT
where time_stamp=
(SELECT MAX(time_stamp) FROM (select * from FLM_USR_FLOW_CNT
where counter_name='area_domain_1h' AND EXISTS
(SELECT * FROM FLM_USR_FLOW_CNT WHERE domain = 'SSL' OR domain = '未知协议' OR domain = '其它'
OR domain = '其他' OR domain = '')
) a)
#{area_id}
AND domain not in('SSL','未知协议','其它','其他')
and trim(domain)<> ''
group by domain
order by c DESC
limit 10
]]>
</sqlTemplate>
		
<sqlTemplate id="ItermExpo2017Term_01_02_female"
		description="top3女性">
		<![CDATA[
select AREA_ID,TERM_TYPE,user_counts,Usernum_under_20,Usernum_20_30,Usernum_30_40,Usernum_40_50,Usernum_over_50,user_counts_male,user_counts_female
from
(
	select AREA_ID,@pre_id,TERM_TYPE,user_counts,Usernum_under_20,Usernum_20_30
		,Usernum_30_40,Usernum_40_50,Usernum_over_50,user_counts_male,user_counts_female
		,@k:=(case when @pre_id like a.AREA_ID then @k+1 else 1 end) as rank
	    ,@pre_id:=a.AREA_ID as pre_id   
	from
	(select AREA_ID 		-- 区域ID
		,TERM_TYPE 		-- 终端型号
		,sum(user_counts) as user_counts 				-- 总用户数
		,sum(Usernum_under_20) as Usernum_under_20 		-- 20岁以下用户数
		,sum(Usernum_20_30) as Usernum_20_30 			-- 20-30岁用户数
		,sum(Usernum_30_40) as Usernum_30_40 			-- 30-40岁用户数
		,sum(Usernum_40_50) as Usernum_40_50 			-- 40-50岁用户数
		,sum(Usernum_over_50) as Usernum_over_50 		-- 50岁以上用户数
		,sum(user_counts_male) as user_counts_male 		-- 男性用户数
		,sum(user_counts_female) as user_counts_female 	-- 女性用户数
	from noce.FRT_2G3G_TERM_TYPE_H
	where hour=(select max(hour) from noce.FRT_2G3G_TERM_TYPE_H where AREA_ID in (71,72,73,5,1,20,41,42,43) and TERM_TYPE is not NULL)
		and AREA_ID in (71,72,73,5,1,20,41,42,43,33)
		and TERM_TYPE is not NULL
	group by AREA_ID, TERM_TYPE
	order by AREA_ID asc, user_counts_female desc) a,
	(select @k:=0,@pre_id:='a') tmp
) ranked
where rank <= 3
order by AREA_ID asc, user_counts_female desc
			    ]]>
</sqlTemplate>
<sqlTemplate id="ItermExpo2017Term_01_01_male"
		description="top3男性">
		<![CDATA[
select AREA_ID,TERM_TYPE,user_counts,Usernum_under_20,Usernum_20_30,Usernum_30_40,Usernum_40_50,Usernum_over_50,user_counts_male,user_counts_female
from
(
	select AREA_ID,@pre_id,TERM_TYPE,user_counts,Usernum_under_20,Usernum_20_30
		,Usernum_30_40,Usernum_40_50,Usernum_over_50,user_counts_male,user_counts_female
		,@k:=(case when @pre_id like a.AREA_ID then @k+1 else 1 end) as rank
	    ,@pre_id:=a.AREA_ID as pre_id   
	from
	(select AREA_ID 		-- 区域ID
		,TERM_TYPE 		-- 终端型号
		,sum(user_counts) as user_counts 				-- 总用户数
		,sum(Usernum_under_20) as Usernum_under_20 		-- 20岁以下用户数
		,sum(Usernum_20_30) as Usernum_20_30 			-- 20-30岁用户数
		,sum(Usernum_30_40) as Usernum_30_40 			-- 30-40岁用户数
		,sum(Usernum_40_50) as Usernum_40_50 			-- 40-50岁用户数
		,sum(Usernum_over_50) as Usernum_over_50 		-- 50岁以上用户数
		,sum(user_counts_male) as user_counts_male 		-- 男性用户数
		,sum(user_counts_female) as user_counts_female 	-- 女性用户数
	from noce.FRT_2G3G_TERM_TYPE_H
	where hour=(select max(hour) from noce.FRT_2G3G_TERM_TYPE_H where AREA_ID in (71,72,73,5,1,20,41,42,43) and TERM_TYPE is not NULL)
		and AREA_ID in (71,72,73,5,1,20,41,42,43,33)
		and TERM_TYPE is not NULL
	group by AREA_ID, TERM_TYPE
	order by AREA_ID asc, user_counts_male desc) a,
	(select @k:=0,@pre_id:='a') tmp
) ranked
where rank <= 3
order by AREA_ID asc, user_counts_male desc
			    ]]>
</sqlTemplate>
<sqlTemplate id="ItermExpo2017Term_06_download_speed"
		description="不同区域用户下载速率情况">
		<![CDATA[
select area_id,speed
from noce.dim_download_speed
where 
-- hour=(select max(hour) from noce.dim_download_speed) and 
area_id in (#{AREA_ID_LIST})
			    ]]>
</sqlTemplate>

<sqlTemplate id="ItermExpo2017Term_06_download_speed_v2"
         description="不同区域用户下载速率情况">
<![CDATA[
select area_id,speed
from noce.dim_download_speed
where 1=1
-- hour=(select max(hour) from noce.dim_download_speed) and
#{AREA_ID}
        ]]>
</sqlTemplate>

<sqlTemplate id="ItermExpo2017Term_05_user_perception"
		description="不同区域用户体验情况">
		<![CDATA[
select area_id 	
	,webpage_open_delay 	-- 首页时延
from noce.dim_webpage_open_delay
where area_id in (#{AREA_ID_LIST})
			    ]]>
</sqlTemplate>

<sqlTemplate id="ItermExpo2017Term_05_user_perception_v2"
         description="不同区域用户体验情况">
<![CDATA[
select area_id
,webpage_open_delay 	-- 首页时延
from noce.dim_webpage_open_delay
where 1=1 #{AREA_ID}
        ]]>
</sqlTemplate>

<sqlTemplate id="ItermExpo2017Term_04_user_gender_age"
		description="不同区域全部手机终端的年龄和性别分布">
		<![CDATA[
select AREA_ID
	,sum(Usernum_under_20) as Usernum_under_20 	-- 20岁以下用户数
	,sum(Usernum_20_30) as Usernum_20_30 			-- 20-30岁用户数
	,sum(Usernum_30_40) as Usernum_30_40 			-- 30-40岁用户数
	,sum(Usernum_40_50) as Usernum_40_50 			-- 40-50岁用户数
	,sum(Usernum_over_50) as Usernum_over_50 		-- 50岁以上用户数
	,sum(user_counts_male) as user_counts_male 		-- 男性用户数
	,sum(user_counts_female) as user_counts_female 	-- 女性用户数
	,sum(user_counts) as user_counts 				-- 总用户数
from noce.FRT_2G3G_TERM_TYPE_H
where hour=(select max(hour) from noce.FRT_2G3G_TERM_TYPE_H where AREA_ID in (71,72,73,5,1,20,41,42,43,33) and TERM_TYPE is not NULL)
	and AREA_ID in (71,72,73,5,1,20,41,42,43,33)
group by AREA_ID
			    ]]>
</sqlTemplate>
<sqlTemplate id="ItermExpo2017Term_03_fac_period_loyal"
		description="不分区域手机厂家的忠诚度和平均换机周期">
		<![CDATA[
		select Mb_Brand 		-- 终端厂家
		,case sum(Term_Change_Times_Total) when 0 then 0 else round(sum(Term_Change_Times_Same_Brand)*100/sum(Term_Change_Times_Total), 2) end as term_loyalty 	-- 品牌忠诚度
		,case ROUND(sum(Total_Term_num)/30) when 0 then 0 else round(sum(Total_Duration)/(sum(Total_Term_num)*30), 0) end as term_change_period 		-- 品牌平均换机周期(天)
	from noce.FRT_MOBILE_BRAND_ANALYSIS_M
	where month=(select max(month) from noce.FRT_MOBILE_BRAND_ANALYSIS_M)
	and mb_brand <> '其他' and mb_brand <> '??'
	group by Mb_Brand
	order by term_change_period
	limit 10
			    ]]>
</sqlTemplate>

<sqlTemplate id="ItermExpo2018Term_03_fac_period_loyal"
		description="不分区域手机厂家的忠诚度和平均换机周期">
		<![CDATA[
		select Mb_Brand 		-- 终端厂家
		,case sum(Term_Change_Times_Total) when 0 then 0 else round(sum(Term_Change_Times_Same_Brand)*100/sum(Term_Change_Times_Total), 2) end as term_loyalty 	-- 品牌忠诚度
		,case ROUND(sum(Total_Term_num)/30) when 0 then 0 else round(sum(Total_Duration)/(sum(Total_Term_num)*30), 0) end as term_change_period 		-- 品牌平均换机周期(天)
	from noce.FRT_MOBILE_BRAND_ANALYSIS_M
	where month=(select max(month) from noce.FRT_MOBILE_BRAND_ANALYSIS_M)
	and mb_brand <> '其他' and mb_brand <> '??'
	group by Mb_Brand
	order by term_change_period
	limit 20
			    ]]>
</sqlTemplate>

<sqlTemplate id="ItermExpo2017Term_03_fac_period_loyal_2"
         description="不分区域手机厂家的忠诚度和平均换机周期">
<![CDATA[
select factory_old as Mb_Brand,round((sum(unchnage_cnt)/sum(change_cnt))*100,2) as term_loyalty
from (
select factory_old,factory_new, case when factory_old=factory_new then change_cnt else 0 end as unchnage_cnt, change_cnt
from FRT_MOBILE_IN_OUT_CNT_M
where month= (select max(month) from FRT_MOBILE_IN_OUT_CNT_M)
and factory_old <> '其他'
) a
group by factory_old
order by term_loyalty desc
limit 20
        ]]>
</sqlTemplate>
<sqlTemplate id="ItempExpo2017Term_02_topfactory"
		description="所选区域的top10手机厂家">
		<![CDATA[
select AREA_ID,FACTORY,user_counts
from
(
	select AREA_ID,@pre_id,FACTORY,user_counts
		,@k:=(case when @pre_id like a.AREA_ID then @k+1 else 1 end) as rank
	    ,@pre_id:=a.AREA_ID as pre_id   
	from
	(select AREA_ID 		-- 区域ID
		,FACTORY 		-- 终端厂家
		,sum(user_counts) as user_counts 		-- 总用户数
	from noce.FRT_2G3G_TERM_TYPE_H
	where 
 hour=(select max(hour) from noce.FRT_2G3G_TERM_TYPE_H)
 -- hour=2017071012ItermExpo2017Term_05_user_perception
		and AREA_ID in (#{AREA_ID_LIST})
		and FACTORY is not NULl
		and FACTORY != '未知厂商'
	group by AREA_ID, FACTORY
	order by AREA_ID, user_counts desc) a,
	(select @k:=0,@pre_id:='a') tmp
) ranked
where rank <= 10
order by AREA_ID asc, user_counts desc
			    ]]>
</sqlTemplate>


<sqlTemplate id="ItempExpo2017Term_02_topfactory_v2" description="所选区域的top10手机厂家">
<![CDATA[
select AREA_ID,FACTORY,user_counts
from
(
select AREA_ID,@pre_id,FACTORY,user_counts
,@k:=(case when @pre_id like a.AREA_ID then @k+1 else 1 end) as rank
,@pre_id:=a.AREA_ID as pre_id
from
(select AREA_ID 		-- 区域ID
,FACTORY 		-- 终端厂家
,sum(user_counts) as user_counts 		-- 总用户数
from noce.FRT_2G3G_TERM_TYPE_H
where
hour=(select max(hour) from noce.FRT_2G3G_TERM_TYPE_H)
-- hour=2017071012ItermExpo2017Term_05_user_perception
#{AREA_ID}
and FACTORY is not NULl
and FACTORY != '未知厂商'
group by AREA_ID, FACTORY
order by AREA_ID, user_counts desc) a,
(select @k:=0,@pre_id:='a') tmp
) ranked
where rank <= 10
order by AREA_ID asc, user_counts desc
]]>
</sqlTemplate>

<sqlTemplate id="ItempExpo2017Term_01_topterm"
		description="所选区域的top10手机型号以及下钻的年龄性别分布">
		<![CDATA[
select AREA_ID,TERM_TYPE,user_counts,Usernum_under_20,Usernum_20_30,Usernum_30_40,Usernum_40_50,Usernum_over_50,user_counts_male,user_counts_female
from
(
	select AREA_ID,@pre_id,TERM_TYPE,user_counts,Usernum_under_20,Usernum_20_30
		,Usernum_30_40,Usernum_40_50,Usernum_over_50,user_counts_male,user_counts_female
		,@k:=(case when @pre_id like a.AREA_ID then @k+1 else 1 end) as rank
	    ,@pre_id:=a.AREA_ID as pre_id   
	from
	(select AREA_ID 		-- 区域ID
		,TERM_TYPE 		-- 终端型号
		,sum(user_counts) as user_counts 				-- 总用户数
		,sum(Usernum_under_20) as Usernum_under_20 		-- 20岁以下用户数
		,sum(Usernum_20_30) as Usernum_20_30 			-- 20-30岁用户数
		,sum(Usernum_30_40) as Usernum_30_40 			-- 30-40岁用户数
		,sum(Usernum_40_50) as Usernum_40_50 			-- 40-50岁用户数
		,sum(Usernum_over_50) as Usernum_over_50 		-- 50岁以上用户数
		,sum(user_counts_male) as user_counts_male 		-- 男性用户数
		,sum(user_counts_female) as user_counts_female 	-- 女性用户数
	from noce.FRT_2G3G_TERM_TYPE_H
	where hour=(select max(hour) from noce.FRT_2G3G_TERM_TYPE_H)
		and AREA_ID in (#{AREA_ID_LIST})
		and TERM_TYPE is not NULL
	group by AREA_ID, TERM_TYPE
	order by AREA_ID asc, user_counts desc) a,
	(select @k:=0,@pre_id:='a') tmpW
) ranked
where rank <= 10
order by AREA_ID asc, user_counts desc
			    ]]>
</sqlTemplate>

<sqlTemplate id="ItempExpo2017Term_01_topterm_v2"
             description="所选区域的top10手机型号以及下钻的年龄性别分布">
    <![CDATA[
select AREA_ID,TERM_TYPE,user_counts,Usernum_under_20,Usernum_20_30,Usernum_30_40,Usernum_40_50,Usernum_over_50,user_counts_male,user_counts_female
from
(
select AREA_ID,@pre_id,TERM_TYPE,user_counts,Usernum_under_20,Usernum_20_30
    ,Usernum_30_40,Usernum_40_50,Usernum_over_50,user_counts_male,user_counts_female
    ,@k:=(case when @pre_id like a.AREA_ID then @k+1 else 1 end) as rank
    ,@pre_id:=a.AREA_ID as pre_id
from
(select AREA_ID 		-- 区域ID
    ,TERM_TYPE 		-- 终端型号
    ,sum(user_counts) as user_counts 				-- 总用户数
    ,sum(Usernum_under_20) as Usernum_under_20 		-- 20岁以下用户数
    ,sum(Usernum_20_30) as Usernum_20_30 			-- 20-30岁用户数
    ,sum(Usernum_30_40) as Usernum_30_40 			-- 30-40岁用户数
    ,sum(Usernum_40_50) as Usernum_40_50 			-- 40-50岁用户数
    ,sum(Usernum_over_50) as Usernum_over_50 		-- 50岁以上用户数
    ,sum(user_counts_male) as user_counts_male 		-- 男性用户数
    ,sum(user_counts_female) as user_counts_female 	-- 女性用户数
from noce.FRT_2G3G_TERM_TYPE_H
where hour=(select max(hour) from noce.FRT_2G3G_TERM_TYPE_H)
    #{AREA_ID}
    and TERM_TYPE is not NULL
group by AREA_ID, TERM_TYPE
order by AREA_ID asc, user_counts desc) a,
(select @k:=0,@pre_id:='a') tmpW
) ranked
where rank <= 10
order by AREA_ID asc, user_counts desc
            ]]>
</sqlTemplate>

<sqlTemplate id="operateRecord01"
		description="统计指定时间范围内的应用访问情况">
		<![CDATA[
SELECT #{GROUPBYFIELD}
      ,sum(case when oper_type='OPEN' then 1 else 0 end ) as open_count -- '打开次数'
      ,sum(case when (oper_type='SEARCH' OR oper_type='SQL') then 1 else 0 end ) as search_count -- '查询次数'
      ,sum(case when oper_type='DOWNLOAD' then 1 else 0 end ) as download_count -- '下载次数'
      ,count(distinct user_name) as user_count
FROM 
(
select case when recent.code is null then b.app_name else recent.name end as app_name -- '应用名称'
     --  ,sum(case when b.oper_type='OPEN' then 1 else 0 end ) as open_count -- '打开次数'
     -- ,sum(case when b.oper_type='SEARCH' then 1 else 0 end ) as search_count -- '查询次数'
     -- ,sum(case when b.oper_type='DOWNLOAD' then 1 else 0 end ) as downloda_count -- '下载次数'
     ,b.oper_type -- 操作类型
     ,b.oper_time -- 操作时间
      ,a.user_name -- 用户名称
      ,SUBSTR(branch.name,1,6) as branch -- 分公司名称
from T_LOGIN_INFO a  -- 用户登录表

join T_OPER_INFO b  -- 主表，用户操作登记表
on b.login_info_id=a.id 

join dm_user c  -- 用户表，根据用户表关联出用户ID（user_id)，以实现剔除开发人员
on a.USER_NAME = c.`NAME`

left join (
select * from (
select permission_id,code,name,CREATE_TIME,@j:=@j+1 as j 
       ,@k:=(case when @pre_code like func.code then @k+1 else 1 end) as rank
       ,@pre_code:=func.code as pre_code
       , @pre_code
FROM
(select permission_id,code,name,CREATE_TIME from dm_permission_func order by code asc, CREATE_TIME desc) func,
(select @j:=0,@k:=0,@pre_code:='a') tmp
ORDER BY code asc, CREATE_TIME desc
) ranked
where rank=1 
) recent
on b.app_name=recent.code
join dm_user_group_rel
on c.user_id=dm_user_group_rel.USER_ID

join (
  select * from dm_usergroup where description='分域专用组'
) branch
ON dm_user_group_rel.GROUP_ID=branch.group_id

where b.oper_time>='#{STARTTIME}' and b.oper_time<='#{ENDTIME} 23:59:59' 
  #{USERCOND}
 and b.app_name!='null' and b.app_name is not null 
     and c.user_id not in (
       select distinct aa.USER_ID from dm_user_group_rel aa
         join dm_usergroup bb on aa.GROUP_ID=bb.GROUP_ID
         join dm_user cc on aa.USER_ID=cc.USER_ID
         where  bb.name in ('普通用户2', '系统管理员2')
       )
-- order by user_name,oper_time
) detail
#{BRANCHCOND}
GROUP BY #{GROUPBYFIELD}
ORDER BY open_count DESC

			    ]]>
	</sqlTemplate>
<sqlTemplate id="OpersComp_03_of_Area"
		description="取某高铁或高速线路在某市的经纬度定位数据范围">
		<![CDATA[
		select city_name,
		gridid,
		maxlongitude,
		minlongitude,
		maxlatitude,
		minlatitude,
		round(CTCoverageAvg,2) CTCoverageAvg,
		round(CMCoverageAvg,2) CMCoverageAvg,
		round(CUCoverageAvg,2) CUCoverageAvg
		from noce.FRT_AGPS_GRID_AREA_D 
		where day=#{DAY}
		 and CITY_NAME like '#{CITY}%' and belongingObjectID=#{OBJECTID} and belongingObjectType=#{OBJECTTYPE}
		    ]]>
	</sqlTemplate>
<sqlTemplate id="OpersComp_03_00_range_of_line"
		description="取某高铁或高速线路在某市的经纬度定位数据范围">
		<![CDATA[
		select city_name,max(pointLongitude) as max_lon, min(pointLongitude) as min_lon, max(pointLatitude) as max_lat, min(pointLatitude) as min_lat 
       , avg(pointLongitude) as cen_lon
       , avg(pointLatitude)  as cen_lat
from noce.FRT_AGPS_MR_LINE_D
where day=#{DAY}
      and belongingObjectType = #{BELONGINGOBJECTTYPE}
      and belongingObjectID = #{BELONGINGOBJECTID}
      and pointLongitude between  109.75 and 117.334 
      and pointLatitude between  20.2 and 25.51
group by city_name
		    ]]>
	</sqlTemplate>
<sqlTemplate id="OpersComp_03_01_range_of_line"	description="取某高铁或高速线路在某市的经纬度定位数据范围" db="mysql">
		<![CDATA[
		select city_name,MAXLONGITUDE as max_lon, MINLONGITUDE as min_lon, MAXLATITUDE as max_lat, MINLATITUDE as min_lat 
       , (MAXLONGITUDE+MINLONGITUDE)/2 as cen_lon
       , (MAXLATITUDE+MINLATITUDE)/2  as cen_lat
from noce.FRT_AGPS_LINE_D
where day=#{DAY}
      and OBJECTTYPE = #{BELONGINGOBJECTTYPE}
      and OBJECTID = #{BELONGINGOBJECTID}
		   ]]>
</sqlTemplate>
<sqlTemplate id="OpersComp_03_03_sectors_of_college"
		description="取某高校的小区数据">
		<![CDATA[
			 select ENB_ID, ENB_DESC, cell_id, cell_name
       ,celllongitude
       ,celllatitude
       ,AZIMUTHALANGLE
from noce.DIM_AGPS_COLLEGE_CELL
where collegeID = #{COLLEGEID}
		    ]]>
	</sqlTemplate>
	<sqlTemplate id="OpersComp_03_02_sectors_of_road"
		description="取某高速线路的小区数据，">
		<![CDATA[
			select ENB_ID, ENB_DESC, cell_id, cell_name
       ,celllongitude
       ,celllatitude
       ,AZIMUTHALANGLE
from noce.DIM_AGPS_ROAD_CELL
where roadID = #{ROADID}
		    ]]>
	</sqlTemplate>
	<sqlTemplate id="OpersComp_03_01_sectors_of_rail"
		description="取某高铁线路的小区数据">
		<![CDATA[
			 select eNodeBID, eNodeBName, cellID, cellName
       ,celllongitude
       ,celllatitude
       ,ANT_azimuth as AZIMUTHALANGLE
from noce.DIM_AGPS_RAILWAY_CELL
where railwayID = #{RAILWAYID}
		    ]]>
	</sqlTemplate>
<sqlTemplate id="OpersComp_03_04_search" description="查询指定小区或楼群的汇总信息" DB="mysql">
		<![CDATA[
select objectID
       ,objectType
       ,round(CTCoverageAvg,2) as CTCoverageAvg
       ,round(CMCoverageAvg,2) as CMCoverageAvg
       ,round(CUCoverageAvg,2) as CUCoverageAvg
       ,round(CTCoverageBadPercent*100,2) as CTCoverageBadPercent
       ,round(CMCoverageBadPercent*100,2) as CMCoverageBadPercent
       ,round(CUCoverageBadPercent*100,2) as CUCoverageBadPercent
       ,maxLongitude
       ,minLongitude
       ,maxLatitude
       ,minLatitude
from noce.FRT_AGPS_AREA_D
where day = #{DAY}
      and city_name  like '#{CITY}%'
      and objectType = #{OBJECTTYPE}
      and objectID = #{OBJECTID}
]]>
</sqlTemplate>
<sqlTemplate id="OpersComp_03_dots_of_line"
		description="取某高铁或高速线路的打点数据">
		<![CDATA[
			  select city_name,pointLongitude, pointLatitude, CTCoverage, CMCoverage, CUCoverage
				from noce.FRT_AGPS_MR_LINE_D
				where day=#{DAY}
				      and belongingObjectType = #{BELONGINGOBJECTTYPE}
				      and belongingObjectID = #{belongingObjectID}
		    ]]>
	</sqlTemplate>
    <sqlTemplate id="OpersComp_01_avail_dates"
		description="取可选日期">
		<![CDATA[
			   select validDay from noce.DIM_AGPS_VALID_DAY order by validDay desc
		    ]]>
	</sqlTemplate>
	<!-- 小区模糊匹配 -->

	<sqlTemplate id="SrvPrdMdl4G_02_01_sector_search"
		description="小区按名称模糊匹配">
		<![CDATA[
					  select base_statn_id*256+cell_id as id
		       ,cell_name as name
		       ,LONGITUDE_BAIDU
		       ,LATITUDE_BAIDU
		from noce.dim_sector
		where day = #{DAY} 
		      and city_name  like '#{CITY}%'
		      and nettype = '4G'
		      and cell_name like '%#{CELLNAME}%'
		      and LONGITUDE_BAIDU between  109.75 and 117.334 
		      and LATITUDE_BAIDU between  20.2 and 25.51       
		limit 10
		    ]]>
	</sqlTemplate>
	<sqlTemplate id="SrvPrdMdl4G_02_02_buildinggroup_search"
		description="楼群按名称模糊匹配">
		<![CDATA[
			 select buildinggroup_id as id
			       ,buildinggroup_name as name
			       ,baidu_max_longitude
			       ,baidu_min_longitude
			       ,baidu_maxlatitude
			       ,baidu_minlatitude
			       ,gis_data_baidu
			from noce.DIM_BUILDINGGROUP_GIS_DATA
			where day = (select max(day) from noce.DIM_BUILDINGGROUP_GIS_DATA) 
			      and city_name  like '#{CITY}%'
			      and buildinggroup_name like '%#{BGNAME}%'
			      and baidu_max_longitude is not null
			limit 10
		    ]]>
	</sqlTemplate>
		<sqlTemplate id="SrvPrdMdl4G_02_03_road_search"
		description="高速按名称模糊匹配">
		<![CDATA[
			select roadID as id
			       ,roadName as name
			       ,max(celllongitude) as baidu_max_longitude
			       ,min(celllongitude) as baidu_min_longitude
			       ,max(celllatitude) as baidu_maxlatitude
			       ,min(celllatitude) as baidu_minlatitude
			from noce.DIM_AGPS_ROAD_CELL
			where REGION_DESC  like '#{CITY}%'
			      and roadName like '%#{ROADNAME}%'
			group by roadID,roadName
			limit 10
		    ]]>
	</sqlTemplate>
	<sqlTemplate id="SrvPrdMdl4G_02_04_rail_search"
		description="高铁按名称模糊匹配">
		<![CDATA[
			select railwayID as id
		       ,cellGroupName as name-- 高铁名称
		       ,max(celllongitude) as baidu_max_longitude
		       ,min(celllongitude) as baidu_min_longitude
		       ,max(celllatitude) as baidu_maxlatitude
		       ,min(celllatitude) as baidu_minlatitude
		from noce.DIM_AGPS_RAILWAY_CELL
		where city  like '#{CITY}%'
		      and cellGroupName like '%#{RAILNAME}%'
		group by railwayID,cellGroupName
		limit 10
		    ]]>
	</sqlTemplate>
		<sqlTemplate id="SrvPrdMdl4G_02_05_college_search"
		description="高校按名称模糊匹配">
		<![CDATA[
			select collegeID as id
			       ,collegeName as name -- 高铁名称
			       ,max(celllongitude) as baidu_max_longitude
			       ,min(celllongitude) as baidu_min_longitude
			       ,max(celllatitude) as baidu_maxlatitude
			       ,min(celllatitude) as baidu_minlatitude
			from noce.DIM_AGPS_COLLEGE_CELL
			where REGION_DESC  like '#{CITY}%'
			      and collegeName like '%#{COLLEGENAME}%'
			group by collegeID,collegeName
			limit 10
		    ]]>
	</sqlTemplate>
	
	<sqlTemplate id="SrvPrdMdl4G_05_01_rect_area"
		description="矩形区域（虚线矩形框）">
		<![CDATA[
			select longitude_min,latitude_min,longitude_mid,latitude_mid,longitude_max,latitude_max,tempid,grid_num,hgrid_num,round(nvl(hgrid_score,0),2) hgrid_score,round(nvl(grid_score_avg,0),2) grid_score_avg
			from noce.#{TABLENAME} 
			where city='#{CITYNAME}'
			#{COUNTRY}
			and day=#{DAY}
		    ]]>
	</sqlTemplate>
	<!--  楼群感知评估DPI -->

	<sqlTemplate id="BuildingAssessLineGraph_SelectSql"
		description="取折线图的数据">
		<![CDATA[
			    select #{HOUR2DAY} #{TIME},  --   #{TIME}取值为"hour"（此时#{HOUR2DAY}为空串) 或"day"（此时#{HOUR2DAY}为"floor(hour/100)"；
					max(user_num)  '小时峰值用户数（人）',
					round(sum(size_all_TOT)/1024/1024,2) '流量（MB）',
					case sum(WEBPAGE_FIRST_ALL)  when 0 then 0 else round((1-sum(WEBPAGE_FIRST_PKG_DELAY_BAD)/sum(WEBPAGE_FIRST_ALL))*100,2) end '首包时延优良率（%）',
					case sum(WEBPAGE_OPEN_ALL)  when 0 then 0 else round((1- sum(WEBPAGE_OPEN_DELAY_BAD) / sum(WEBPAGE_OPEN_ALL))*100,2) end '首页时延优良率（%）',
					case sum(VIDIO_ALL)  when 0 then 0 else round((1- sum(VIDIO_DOWNLOAD_RATE_BAD) / sum(VIDIO_ALL))*100,2) end '视频下载优良率（%）',
					case sum(WEBPAGE_FIRST_ALL)  when 0 then 0 else round(sum(WEBPAGE_FIRST_PKG_DELAY_TOT)/sum(WEBPAGE_FIRST_ALL),2) end '首包时延均值（ms）',
					case sum(WEBPAGE_OPEN_ALL)  when 0 then 0 else round(sum(WEBPAGE_OPEN_DELAY_TOT) / sum(WEBPAGE_OPEN_ALL),2) end '首页时延均值（ms）',
					case sum(VIDIO_ALL)  when 0 then 0 else round(sum(VIDIO_DOWNLOAD_RATE_TOT) / sum(VIDIO_ALL),2) end '视频下载速率均值（kbps）'
					from noce.FRT_BLDG_4GFLOW_H
					where hour between #{HOUR_START} and #{HOUR_END}
					  and buildinggroup_id='#{BUILDINGGROUP_ID}'
					group by #{TIME}
					order by #{TIME}
		    ]]>
	</sqlTemplate>

	<sqlTemplate id="BuildingAssessIndexLineGraph_SelectSql"
		description="取某个指标折线图的数据">
		<![CDATA[
			    select #{HOUR2DAY} #{TIME},  --  #{TIME}取值为"hour"（此时#{HOUR2DAY}为空串) 或"day"（此时#{HOUR2DAY}为"floor(hour/100)"；
					#{filterField}
					from noce.FRT_BLDG_4GFLOW_H
					where hour between #{HOUR_START} and #{HOUR_END}
					  and buildinggroup_id='#{BUILDINGGROUP_ID}'
					group by #{TIME}
					order by #{TIME}
		    ]]>
	</sqlTemplate>

	<sqlTemplate id="BuildingAssessLineGraph_FilterSql"
		description="获取指标筛选的SQL">
		<![CDATA[
				select 
					#{HOUR2DAY} #{TIME},
					#{filterField}
					from NOCE.FRT_BLDG_4GFLOW_H  
					where hour between #{startTime} and #{endTime} and buildinggroup_id='#{buildinggroup_id}'  
					group by #{TIME}
					having #{filterWhereField} between #{filterWhereFieldMin} and #{filterWhereFieldMax} 
				    order by #{TIME} 
		    ]]>
	</sqlTemplate>

	<sqlTemplate id="BuildingAssessLineGraph_ExportExcelSql"
		description="导出exc的数据">
		<![CDATA[
				select
					build.buildinggroup_id '楼宇ID',
					build.buildinggroup_name '楼宇名称',
					build.district_name '区县分公司',
					build.buildinggrou_area '楼宇面积',
					#{HOUR2DAY} #{TIME} '时间',
					max(flow.user_num)  '小时峰值用户数（人）',
					round(sum(size_all_TOT)/1024/1024,2) '流量（MB）',
					case sum(WEBPAGE_FIRST_ALL)  when 0 then 0 else round((1-sum(WEBPAGE_FIRST_PKG_DELAY_BAD)/sum(WEBPAGE_FIRST_ALL))*100,2) end '首包时延优良率（%）',
					case sum(WEBPAGE_OPEN_ALL)  when 0 then 0 else round((1- sum(WEBPAGE_OPEN_DELAY_BAD) / sum(WEBPAGE_OPEN_ALL))*100,2) end '首页时延优良率（%）',
					case sum(VIDIO_ALL)  when 0 then 0 else round((1- sum(VIDIO_DOWNLOAD_RATE_BAD) / sum(VIDIO_ALL))*100,2) end '视频下载优良率（%）',
					case sum(WEBPAGE_FIRST_ALL)  when 0 then 0 else round(sum(WEBPAGE_FIRST_PKG_DELAY_TOT)/sum(WEBPAGE_FIRST_ALL),2) end '首包时延均值（ms）',
					case sum(WEBPAGE_OPEN_ALL)  when 0 then 0 else round(sum(WEBPAGE_OPEN_DELAY_TOT) / sum(WEBPAGE_OPEN_ALL),2) end '首页时延均值（ms）',
					case sum(VIDIO_ALL)  when 0 then 0 else round(sum(VIDIO_DOWNLOAD_RATE_TOT) / sum(VIDIO_ALL),2) end '视频下载速率均值（kbps）'
				from (select * from NOCE.FRT_BLDG_4GFLOW_H  where hour between #{startTime} and #{endTime} and buildinggroup_id='#{buildinggroup_id}') flow join (select * from NOCE.DIM_BUILDINGGROUP_FRONT where buildinggrou_area>0) build  
				on flow.buildinggroup_id = build.buildinggroup_id 
				group by #{HOUR2DAY} #{TIME} ,flow.user_num,build.buildinggroup_id, build.buildinggroup_name, build.buildinggrou_area, build.district_name 
				order by #{HOUR2DAY} #{TIME} asc
			]]>
	</sqlTemplate>

	<sqlTemplate id="BuildingAssessLineGraph_HourOrDayDataSql"
		description="展示楼群某个小时/天内的统计数据">
		<![CDATA[
			select hour,tf.base_statn_id,BASE_STATN_NAME,tf.cell_id,cell_name,tf.latn_id,building_city
			       ,round(sum(size_all_tot)/1024/1024,2) size_all_tot_BG
			       ,count( distinct msisdn) user_num
			       ,case(sum(WEBPAGE_FIRST_ALL)) when 0 then NULL else round((1-sum(WEBPAGE_FIRST_PKG_DELAY_BAD)/sum(WEBPAGE_FIRST_ALL))*100,2) end WEBPAGE_FIRST_NOT_BAD_RATIO
			       ,case(sum(WEBPAGE_OPEN_ALL)) when 0 then NULL else round((1-sum(WEBPAGE_OPEN_DELAY_BAD)/sum(WEBPAGE_OPEN_ALL))*100,2) end WEBPAGE_OPEN_NOT_BAD_RATIO
			       ,case(sum(VIDIO_ALL)) when 0 then NULL else round((1-sum(VIDIO_DOWNLOAD_RATE_BAD)/sum(VIDIO_ALL))*100,2) end VIDIO_DOWNLOAD_NOT_BAD_RATIO
			       ,case(sum(WEBPAGE_FIRST_ALL)) when 0 then NULL else round(sum(WEBPAGE_FIRST_PKG_DELAY_TOT)/sum(WEBPAGE_FIRST_ALL),2) end WEBPAGE_FIRST_MEAN_ms
			       ,case(sum(WEBPAGE_OPEN_ALL)) when 0 then NULL else round(sum(WEBPAGE_OPEN_DELAY_TOT)/sum(WEBPAGE_OPEN_ALL),2) end WEBPAGE_OPEN_MEAN_ms
			       ,case(sum(VIDIO_ALL)) when 0 then NULL else round(sum(VIDIO_DOWNLOAD_RATE_TOT)/sum(VIDIO_ALL),2) end VIDIO_DOWNLOAD_MEAN_kbps
			from noce.AGG_BLDG_USER_LIST tf
			join
			(select * from noce.dim_sector where day=#{DAY} ) ts
			on tf.latn_id = ts.city_id and tf.base_statn_id=ts.BASE_STATN_ID and tf.cell_id=ts.cell_id
			where hour #{HOUR_CONDITION} and buildinggroup_id='#{BUILDINGGROUP_ID}' --  #{HOUR_CONDITION}按天时取值为"between XXXXXXXXXX and XXXXXXXX",按小时则为"=XXXXXXXX"
			group by hour,building_city,BASE_STATN_NAME,cell_name,tf.latn_id,tf.base_statn_id,tf.cell_id
			order by size_all_tot_BG desc
		]]>
	</sqlTemplate>

	<sqlTemplate id="BuildingAssessLineGraph_CellDetailedSql"
		description="获取某个小区的清单数据">
		<![CDATA[
			select MSISDN   --  MDN    
			         ,ts_start --  开始时间（'YYYY-MM-DD hh:mm:ss.mmm'）
						,SERVER_IP   --  目的IP
						,uri   --  URI
						,ltescrsrp_avg   --  RSRP
						,webpage_first_pkg_delay   --  首包时延(ms)
						,webpage_open_delay   --  首页时段(ms)
						,vidio_download_rate  --  视频下载速率(kbps) 
						,spgw_name   --  SPGW名称
						,data_source   --  数据源表
			from noce.AGG_EVT_LTE_DPI_NEW
			where hour=#{HOUR} and latn_id=#{LATN_ID} and base_statn_id=#{BASE_STATN_ID} and cell_id=#{CELL_ID}
			order by nvl(webpage_first_pkg_delay,0) desc limit #{pageSize} offset #{pageIndex}
		]]>
	</sqlTemplate>

	<sqlTemplate id="BuildingAssessLineGraph_Busyness_Sql"
		description="获取某个小区的繁忙度">
		<![CDATA[
			select 
				user_num  --  用户数，即繁忙度
			from  noce.FRT_DPI_CELL_USER_H
			where hour=#{HOUR} and base_statn_id=#{BASE_STATN_ID} and cell_id=#{CELL_ID} and sts_time=#{STS_TIME}
			order by sts_time
		]]>
	</sqlTemplate>

	<sqlTemplate id="BuildingAssessLineGraph_KPI_Sql"
		description="获取某个小区的KPI指标">
		<![CDATA[
			select round(RRCCONN*100,2) --  RRC连接成功率(%)
			       ,round(ERABJL*100,2)   --  ERAB建立成功率(%)
			       ,round(ERABDX*100,2)   --  ERAB掉线率(%)
			       ,round(UPDLAVDELAY,2)   --  用户面下行平均时延(ms/包)
			from noce.AGG_WL4GKPI_D
			where day=#{DAY} and hour=#{HOUR} and latn_id=#{LATN_ID} and base_statn_id=#{BASE_STATN_ID} and cell_id=#{CELL_ID} and start_time <=#{STS_TIME} and end_time>=#{STS_TIME}
		]]>
	</sqlTemplate>
	

	<!--  KQI时延分析 -->
	<!--  SP以及核心网维度开始-->
	
	<sqlTemplate id="kqiAna_getFirstViewData" description="kqi时延分析_总表">
	<![CDATA[
	select round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 --  Tcp第二次握手时延（CN/CP侧原因），时延均值
      ,round(sum(TCP_SynAck_DL_TOT)/(sum(TCP_SynAck_DL_TOT)+sum(TCP_Ack_DL_TOT)+sum(WIRELESS_DT2_TOT)+sum(HTTP_DELAY_TOT))*100,2) k1_r --  Tcp第二次握手时延（CN/CP侧原因），时延占比均值
      ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) k2  --  第三次握手时延（无线/终端侧原因），时延均值
      ,round(sum(TCP_Ack_DL_TOT)/(sum(TCP_SynAck_DL_TOT)+sum(TCP_Ack_DL_TOT)+sum(WIRELESS_DT2_TOT)+sum(HTTP_DELAY_TOT))*100,2) k2_r --  第三次握手时延（无线/终端侧原因），时延占比均值
      ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) k3  --  第三次ACK与HTTP GET的时延（无线/终端侧原因），时延均值
      ,round(sum(WIRELESS_DT2_TOT)/(sum(TCP_SynAck_DL_TOT)+sum(TCP_Ack_DL_TOT)+sum(WIRELESS_DT2_TOT)+sum(HTTP_DELAY_TOT))*100,2) k3_r --  第三次ACK与HTTP GET的时延（无线/终端侧原因），时延占比均值
      ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 --  首GET响应时延（CN/CP侧原因），时延均值
      ,round(sum(HTTP_DELAY_TOT)/(sum(TCP_SynAck_DL_TOT)+sum(TCP_Ack_DL_TOT)+sum(WIRELESS_DT2_TOT)+sum(HTTP_DELAY_TOT))*100,2) k4_r --  首GET响应时延（CN/CP侧原因），时延占比均值
      ,round(sum(FIN_DELAY_TOT)/sum(TEST_NUM_ALL),2) k5  --  200ok到FIN时延，时延均值
           
from noce.FRT_DPI_DELAY_SP_H
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LETLTE
      and KQI_TYPE='FIRST_PKG_DELAY'
	
	
	  ]]>
	</sqlTemplate>

	<sqlTemplate id="kqiAna_getSpViewData" description="kqi时延分析_按SP统计">
	<![CDATA[
	select DomainName  --  域名，即SP
      ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 --  Tcp第二次握手时延（CN/CP侧原因），时延均值
      ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 --  首GET响应时延（CN/CP侧原因），时延均值
      ,sum(TEST_NUM_ALL) TEST_NUM_ALL --  测试次数            
from noce.FRT_DPI_DELAY_SP_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network=#{NETWORK}  --  1:eHRPD 4:LTE
      and KQI_TYPE='FIRST_PKG_DELAY'
group by DomainName
order by DomainName

	]]>
	</sqlTemplate>

	<sqlTemplate id="kqiAna_getSpViewData_bad" description="kqi时延分析_按SP统计_质差记录数占比">
	<![CDATA[
	
	select DomainName  --  域名，即SP
      ,round(100*sum(BD_TCP_SYNACK_DL_TOT)/sum(TEST_NUM_ALL),2) k1_BAD_RATIO  --  Tcp第二次握手时延（CN/CP侧原因），质差记录占比
      ,round(100*sum(BD_HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2) k4_BAD_RATIO     --  首GET响应时延（CN/CP侧原因），质差记录占比         
from noce.FRT_DPI_DELAY_SP_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network=#{NETWORK}  --   1:eHRPD 4:LTE
      and KQI_TYPE='FIRST_PKG_DELAY'
group by DomainName
order by DomainName
	]]>
	</sqlTemplate>

	<sqlTemplate id="kqiAna_getHxwViewData" description="kqi时延分析_按核心网统计">
	<![CDATA[
	select SPGW_NAME  --  SPGW名称，即核心网
      ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 --  Tcp第二次握手时延（CN/CP侧原因），时延均值
      ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 --  首GET响应时延（CN/CP侧原因），时延均值
      ,sum(TEST_NUM_ALL) TEST_NUM_ALL --  测试次数            
from noce.FRT_DPI_DELAY_SPGW_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LTE
      and KQI_TYPE='FIRST_PKG_DELAY'
group by SPGW_NAME
order by SPGW_NAME
	
	]]>
	</sqlTemplate>


	<sqlTemplate id="kqiAna_getHxwViewData_bad" description="kqi时延分析_按核心网统计_质差记录数占比">
	<![CDATA[
	select SPGW_NAME  --  SPGW名称，即核心网
      ,round(100*sum(BD_TCP_SYNACK_DL_TOT)/sum(TEST_NUM_ALL),2) k1_BAD_RATIO  --  Tcp第二次握手时延（CN/CP侧原因），质差记录占比
      ,round(100*sum(BD_HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2) k4_BAD_RATIO     --  首GET响应时延（CN/CP侧原因），质差记录占比         
from noce.FRT_DPI_DELAY_SPGW_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LTE
      and KQI_TYPE='FIRST_PKG_DELAY'
group by SPGW_NAME
order by SPGW_NAME
	]]>
	</sqlTemplate>

	<sqlTemplate id="kqiAna_getSpIp" description="按SP+IP段统计">
	<![CDATA[
	select DomainName  --  域名，即SP
      ,regexp_replace(SERVER_IP,'.\\d+$','.*') IP_C  --  C段IP地址
      ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 --  Tcp第二次握手时延（CN/CP侧原因），时延均值
      ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 --  首GET响应时延（CN/CP侧原因），时延均值
      ,sum(TEST_NUM_ALL) TEST_NUM_ALL --  测试次数            
from noce.FRT_DPI_DELAY_SP_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LTE
      and KQI_TYPE='FIRST_PKG_DELAY'
group by DomainName,IP_C
order by DomainName,IP_C
	]]>
	</sqlTemplate>
	<sqlTemplate id="kqiAna_getSpIp_bad" description="按SP+IP段统计 bad">
	<![CDATA[
	select DomainName  --  域名，即SP
      ,regexp_replace(SERVER_IP,'.\\d+$','.*') IP_C  --  C段IP地址
      ,round(100*sum(BD_TCP_SYNACK_DL_TOT)/sum(TEST_NUM_ALL),2) k1_BAD_RATIO  --  Tcp第二次握手时延（CN/CP侧原因），质差记录占比
      ,round(100*sum(BD_HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2) k4_BAD_RATIO     --  首GET响应时延（CN/CP侧原因），质差记录占比        
from noce.FRT_DPI_DELAY_SP_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LTE
      and KQI_TYPE='FIRST_PKG_DELAY'
group by DomainName,IP_C
order by DomainName,IP_C
	]]>
	</sqlTemplate>

	<sqlTemplate id="kqiAna_getHxwBk" description="按核心网+板卡统计">
	<![CDATA[
	select SPGW_NAME  --  SPGW名称，即核心网
      ,SGW_IP 	 --  核心网板卡IP，即板卡N的标识
      ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 --  Tcp第二次握手时延（CN/CP侧原因），时延均值
      ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 --  首GET响应时延（CN/CP侧原因），时延均值
      ,sum(TEST_NUM_ALL) TEST_NUM_ALL --  测试次数            
from noce.FRT_DPI_DELAY_SPGW_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LTE
      and KQI_TYPE='FIRST_PKG_DELAY'
group by SPGW_NAME,SGW_IP
order by SPGW_NAME,SGW_IP
	]]>
	</sqlTemplate>

	<sqlTemplate id="kqiAna_getHxwBk_bad" description="按核心网+板卡统计 bad">
	<![CDATA[
	select SPGW_NAME  --  SPGW名称，即核心网
      ,SGW_IP      --  核心网板卡IP，即板卡N的标识
      ,round(100*sum(BD_TCP_SYNACK_DL_TOT)/sum(TEST_NUM_ALL),2) k1_BAD_RATIO  --  Tcp第二次握手时延（CN/CP侧原因），质差记录占比
      ,round(100*sum(BD_HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2) k4_BAD_RATIO     --  首GET响应时延（CN/CP侧原因），质差记录占比     
from noce.FRT_DPI_DELAY_SPGW_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LTE
      and KQI_TYPE='FIRST_PKG_DELAY'
group by SPGW_NAME,SGW_IP
order by SPGW_NAME,SGW_IP
	]]>
	</sqlTemplate>



	<!--  KQI时延分析 趋势图和分布图 -->

	<sqlTemplate id="kqiAna_getFirstTrendGraph" description="kqi时延分析_总表时延趋势图">
	<![CDATA[
	
	select #{TIME}
      ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 --  Tcp第二次握手时延（CN/CP侧原因），时延均值
      ,round(sum(TCP_SynAck_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k1_r --  Tcp第二次握手时延（CN/CP侧原因），时延占比均值
      ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) k2  --  第三次握手时延（无线/终端侧原因），时延均值
      ,round(sum(TCP_Ack_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k2_r --  第三次握手时延（无线/终端侧原因），时延占比均值
      ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) k3  --  第三次ACK与HTTP GET的时延（无线/终端侧原因），时延均值
      ,round(sum(WIRELESS_DT2_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k3_r --  第三次ACK与HTTP GET的时延（无线/终端侧原因），时延占比均值
      ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 --  首GET响应时延（CN/CP侧原因），时延均值
      ,round(sum(HTTP_DELAY_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k4_r --  首GET响应时延（CN/CP侧原因），时延占比均值
            
from noce.FRT_DPI_DELAY_SP_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LETLTE
      and KQI_TYPE='FIRST_PKG_DELAY'
group by #{TIME}
order by #{TIME}
	
	
	]]>
	</sqlTemplate>


	<sqlTemplate id="kqiAna_getFirstDistributeGraph"
		description="kqi时延分析_总表时延分布图">
	<![CDATA[
	select KQI_VALUE
       ,round(test_num*100/test_num_all,2)  ratio --  分布率
from 
(
  select KQI_VALUE
         , sum(STAT_NUM) test_num --  测试次数
  from noce.FRT_DPI_STAT_SP_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LETLTE
        and KQI_TYPE='#{KQI_TYPE}'  --  #{KQI_TYPE}分别为： TCP_SYNACK_DL 、 TCP_ACK_DL 、 WIRELESS_DT2 、 HTTP_DELAY 
        and KQI_VALUE<=4000
  group by KQI_VALUE
) a
join
(
  select sum(STAT_NUM) test_num_all
  from noce.FRT_DPI_STAT_SP_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LETLTE
        and KQI_TYPE='#{KQI_TYPE}'  --  #{KQI_TYPE}分别为： TCP_SYNACK_DL 、 TCP_ACK_DL 、 WIRELESS_DT2 、 HTTP_DELAY 
) b
order by KQI_VALUE
	
	]]>

	</sqlTemplate>


	<sqlTemplate id="kqiAna_getSpTrendGraph" description="kqi时延分析_按SP时延趋势图">
	<![CDATA[
	
	select DomainName
      ,#{TIME}
      ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 --  Tcp第二次握手时延（CN/CP侧原因），时延均值
      ,round(sum(TCP_SynAck_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k1_r --  Tcp第二次握手时延（CN/CP侧原因），时延占比均值
      ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) k2  --  第三次握手时延（无线/终端侧原因），时延均值
      ,round(sum(TCP_Ack_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k2_r --  第三次握手时延（无线/终端侧原因），时延占比均值
      ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) k3  --  第三次ACK与HTTP GET的时延（无线/终端侧原因），时延均值
      ,round(sum(WIRELESS_DT2_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k3_r --  第三次ACK与HTTP GET的时延（无线/终端侧原因），时延占比均值
      ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 --  首GET响应时延（CN/CP侧原因），时延均值
      ,round(sum(HTTP_DELAY_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k4_r --  首GET响应时延（CN/CP侧原因），时延占比均值
            
from noce.FRT_DPI_DELAY_SP_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LETLTE
      and KQI_TYPE='FIRST_PKG_DELAY'
group by DomainName,#{TIME}
order by DomainName,#{TIME}
	
	]]>
	</sqlTemplate>


	<sqlTemplate id="kqiAna_getSpDistributeGraph" description="kqi时延分析_按SP时延分布图">
	<![CDATA[
	
	select KQI_VALUE
       ,round(test_num*100/test_num_all,2)  ratio --  分布率
from 
(
  select KQI_VALUE
         , sum(STAT_NUM) test_num --  测试次数
  from noce.FRT_DPI_STAT_SP_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LETLTE
        and KQI_TYPE='#{KQI_TYPE}'  --  #{KQI_TYPE}分别为： TCP_SYNACK_DL 、 TCP_ACK_DL 、 WIRELESS_DT2 、 HTTP_DELAY 
        and KQI_VALUE<=4000
        and DomainName='#{DOMAINNAME}'  --  #{DOMAINNAME}分别为： 微博, 凤凰, 淘宝, 人民, Apple, 搜狐, 爱奇, 新浪, 网易, 百度, 腾讯, 优酷, 土豆
  group by KQI_VALUE
) a
join
(
  select sum(STAT_NUM) test_num_all
  from noce.FRT_DPI_STAT_SP_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LETLTE
        and KQI_TYPE='#{KQI_TYPE}'  --  #{KQI_TYPE}分别为： TCP_SYNACK_DL 、 TCP_ACK_DL 、 WIRELESS_DT2 、 HTTP_DELAY 
        and DomainName='#{DOMAINNAME}'  --  #{DOMAINNAME}分别为： 微博, 凤凰, 淘宝, 人民, Apple, 搜狐, 爱奇, 新浪, 网易, 百度, 腾讯, 优酷, 土豆
) b
order by KQI_VALUE
	
	]]>
	</sqlTemplate>


	<sqlTemplate id="kqiAna_getSpIpTrendGraph" description="kqi时延分析_按SP+IP段时延趋势图">
	<![CDATA[
	
	select DomainName
      ,regexp_replace(SERVER_IP,'.\\d+$','.*') IP_C  --  C段IP地址
      ,#{TIME}
      ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 --  Tcp第二次握手时延（CN/CP侧原因），时延均值
      ,round(sum(TCP_SynAck_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k1_r --  Tcp第二次握手时延（CN/CP侧原因），时延占比均值
      ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) k2  --  第三次握手时延（无线/终端侧原因），时延均值
      ,round(sum(TCP_Ack_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k2_r --  第三次握手时延（无线/终端侧原因），时延占比均值
      ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) k3  --  第三次ACK与HTTP GET的时延（无线/终端侧原因），时延均值
      ,round(sum(WIRELESS_DT2_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k3_r --  第三次ACK与HTTP GET的时延（无线/终端侧原因），时延占比均值
      ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 --  首GET响应时延（CN/CP侧原因），时延均值
      ,round(sum(HTTP_DELAY_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k4_r --  首GET响应时延（CN/CP侧原因），时延占比均值
            
from noce.FRT_DPI_DELAY_SP_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LETLTE
      and KQI_TYPE='FIRST_PKG_DELAY'
      and DomainName='#{DOMAINNAME}'
group by DomainName,IP_C,#{TIME}
order by DomainName,IP_C,#{TIME}
	
	]]>
	</sqlTemplate>


	<sqlTemplate id="kqiAna_getSpIpDistributeGraph"
		description="kqi时延分析_按SP+IP段时延分布图">
	<![CDATA[
	select KQI_VALUE
       ,round(test_num*100/test_num_all,2)  ratio --  分布率
from 
(
  select KQI_VALUE
         , sum(STAT_NUM) test_num --  测试次数
  from noce.FRT_DPI_STAT_SP_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --   1:eHRPD 4:LETLTE
        and KQI_TYPE='#{KQI_TYPE}'  --   #{KQI_TYPE}分别为： TCP_SYNACK_DL 、 TCP_ACK_DL 、 WIRELESS_DT2 、 HTTP_DELAY 
        and KQI_VALUE<=4000
        and DomainName='#{DOMAINNAME}'  --  #{DOMAINNAME}分别为： 微博, 凤凰, 淘宝, 人民, Apple, 搜狐, 爱奇, 新浪, 网易, 百度, 腾讯, 优酷, 土豆
        and regexp_replace(SERVER_IP,'.\\d+$','.*')='#{IP_C}'
  group by KQI_VALUE
) a
join
(
  select sum(STAT_NUM) test_num_all
  from noce.FRT_DPI_STAT_SP_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LETLTE
        and KQI_TYPE='#{KQI_TYPE}'  --  #{KQI_TYPE}分别为： TCP_SYNACK_DL 、 TCP_ACK_DL 、 WIRELESS_DT2 、 HTTP_DELAY 
        and DomainName='#{DOMAINNAME}'  --  #{DOMAINNAME}分别为： 微博, 凤凰, 淘宝, 人民, Apple, 搜狐, 爱奇, 新浪, 网易, 百度, 腾讯, 优酷, 土豆
        and regexp_replace(SERVER_IP,'.\\d+$','.*')='#{IP_C}'
) b
order by KQI_VALUE
	
	]]>
	</sqlTemplate>


	<sqlTemplate id="kqiAna_getHxwTrendGraph" description="kqi时延分析_按核心网时延趋势图">
	<![CDATA[
	
	select SPGW_NAME
      ,#{TIME}
      ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 --  Tcp第二次握手时延（CN/CP侧原因），时延均值
      ,round(sum(TCP_SynAck_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k1_r --  Tcp第二次握手时延（CN/CP侧原因），时延占比均值
      ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) k2  --  第三次握手时延（无线/终端侧原因），时延均值
      ,round(sum(TCP_Ack_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k2_r --  第三次握手时延（无线/终端侧原因），时延占比均值
      ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) k3  --  第三次ACK与HTTP GET的时延（无线/终端侧原因），时延均值
      ,round(sum(WIRELESS_DT2_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k3_r --  第三次ACK与HTTP GET的时延（无线/终端侧原因），时延占比均值
      ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 --  首GET响应时延（CN/CP侧原因），时延均值
      ,round(sum(HTTP_DELAY_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k4_r --  首GET响应时延（CN/CP侧原因），时延占比均值
            
from noce.FRT_DPI_DELAY_SPGW_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LETLTE
      and KQI_TYPE='FIRST_PKG_DELAY'
group by SPGW_NAME,#{TIME}
order by SPGW_NAME,#{TIME}
	
	]]>
	</sqlTemplate>


	<sqlTemplate id="kqiAna_getHxwDistributeGraph" description="kqi时延分析_按核心网时延分布图">
	<![CDATA[
	
	select KQI_VALUE
       ,round(test_num*100/test_num_all,2)  ratio -- 分布率
from 
(
  select KQI_VALUE
         , sum(STAT_NUM) test_num -- 测试次数
  from noce.FRT_DPI_STAT_SPGW_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LETLTE
        and KQI_TYPE='#{KQI_TYPE}'  --  #{KQI_TYPE}分别为： TCP_SYNACK_DL 、 TCP_ACK_DL 、 WIRELESS_DT2 、 HTTP_DELAY 
        and KQI_VALUE<=4000
        and SPGW_NAME='#{SPGW_NAME}'  
  group by KQI_VALUE
) a
join
(
  select sum(STAT_NUM) test_num_all
  from noce.FRT_DPI_STAT_SPGW_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LETLTE
        and KQI_TYPE='#{KQI_TYPE}'  --  #{KQI_TYPE}分别为： TCP_SYNACK_DL 、 TCP_ACK_DL 、 WIRELESS_DT2 、 HTTP_DELAY 
        and SPGW_NAME='#{SPGW_NAME}'  
) b
order by KQI_VALUE
	
	]]>
	</sqlTemplate>


	<sqlTemplate id="kqiAna_getHxwBkTrendGraph" description="kqi时延分析_按核心网+板卡时延趋势图">
	<![CDATA[
	select SPGW_NAME
      ,SGW_IP
      ,#{TIME}
      ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 -- Tcp第二次握手时延（CN/CP侧原因），时延均值
      ,round(sum(TCP_SynAck_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k1_r -- Tcp第二次握手时延（CN/CP侧原因），时延占比均值
      ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) k2  -- 第三次握手时延（无线/终端侧原因），时延均值
      ,round(sum(TCP_Ack_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k2_r -- 第三次握手时延（无线/终端侧原因），时延占比均值
      ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) k3  -- 第三次ACK与HTTP GET的时延（无线/终端侧原因），时延均值
      ,round(sum(WIRELESS_DT2_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k3_r -- 第三次ACK与HTTP GET的时延（无线/终端侧原因），时延占比均值
      ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 -- 首GET响应时延（CN/CP侧原因），时延均值
      ,round(sum(HTTP_DELAY_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k4_r -- 首GET响应时延（CN/CP侧原因），时延占比均值
            
from noce.FRT_DPI_DELAY_SPGW_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LETLTE
      and KQI_TYPE='FIRST_PKG_DELAY'
group by SPGW_NAME,SGW_IP,#{TIME}
order by SPGW_NAME,SGW_IP,#{TIME}
	
	
	]]>
	</sqlTemplate>


	<sqlTemplate id="kqiAna_getHxwBkDistributeGraph"
		description="kqi时延分析_按核心网+板卡时延分布图">
	<![CDATA[
	
	select KQI_VALUE
       ,round(test_num*100/test_num_all,2)  ratio -- 分布率
from 
(
  select KQI_VALUE
         , sum(STAT_NUM) test_num -- 测试次数
  from noce.FRT_DPI_STAT_SPGW_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LETLTE
        and KQI_TYPE='#{KQI_TYPE}'  --  #{KQI_TYPE}分别为： TCP_SYNACK_DL 、 TCP_ACK_DL 、 WIRELESS_DT2 、 HTTP_DELAY 
        and KQI_VALUE<=4000
        and SPGW_NAME='#{SPGW_NAME}'
        and SGW_IP='#{SGW_IP}'  
  group by KQI_VALUE
) a
join
(
  select sum(STAT_NUM) test_num_all
  from noce.FRT_DPI_STAT_SPGW_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LETLTE
        and KQI_TYPE='#{KQI_TYPE}'  --  #{KQI_TYPE}分别为： TCP_SYNACK_DL 、 TCP_ACK_DL 、 WIRELESS_DT2 、 HTTP_DELAY 
        and SPGW_NAME='#{SPGW_NAME}'  
        and SGW_IP='#{SGW_IP}'  
) b
order by KQI_VALUE
	
	]]>
	</sqlTemplate>



  <!--  SP以及核心网的导出-->
	<sqlTemplate id="kqiAna_main_export" description="">
	<![CDATA[
	with t2 as (
      with t1 as
      (
            select cast(#{TIME} as string) time
                  ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2) k1 -- Tcp第二次握手时延（CN/CP侧原因），时延均值
                  ,round(sum(TCP_SynAck_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k1_r -- Tcp第二次握手时延（CN/CP侧原因），时延占比均值
                  ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) k2  -- 第三次握手时延（无线/终端侧原因），时延均值
                  ,round(sum(TCP_Ack_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k2_r -- 第三次握手时延（无线/终端侧原因），时延占比均值
                  ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) k3  -- 第三次ACK与HTTP GET的时延（无线/终端侧原因），时延均值
                  ,round(sum(WIRELESS_DT2_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k3_r -- 第三次ACK与HTTP GET的时延（无线/终端侧原因），时延占比均值
                  ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2) k4 -- 首GET响应时延（CN/CP侧原因），时延均值
                  ,round(sum(HTTP_DELAY_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k4_r -- 首GET响应时延（CN/CP侧原因），时延占比均值
                  ,round(sum(FIN_DELAY_TOT)/sum(TEST_NUM_ALL),2) k5  -- 200ok到FIN时延，时延均值
                  ,round(sum(TCP_SynAck_DL_TOT+TCP_Ack_DL_TOT+WIRELESS_DT2_TOT+HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2) k6 -- 首包总时延
                  ,round(sum(TCP_SynAck_DL_TOT+TCP_Ack_DL_TOT+WIRELESS_DT2_TOT+HTTP_DELAY_TOT+FIN_DELAY_TOT)/sum(TEST_NUM_ALL),2) k7 -- 首页总时延                 
            from noce.FRT_DPI_DELAY_SP_H 
            where hour between #{START_HOUR} and #{END_HOUR}
                  and network=#{NETWORK}  --  1:eHRPD 4:LETLTE
                  and KQI_TYPE='FIRST_PKG_DELAY'
            group by time
            union
            select '汇总' time
                  ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2) k1 -- Tcp第二次握手时延（CN/CP侧原因），时延均值
                  ,round(sum(TCP_SynAck_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k1_r -- Tcp第二次握手时延（CN/CP侧原因），时延占比均值
                  ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) k2  -- 第三次握手时延（无线/终端侧原因），时延均值
                  ,round(sum(TCP_Ack_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k2_r -- 第三次握手时延（无线/终端侧原因），时延占比均值
                  ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) k3  -- 第三次ACK与HTTP GET的时延（无线/终端侧原因），时延均值
                  ,round(sum(WIRELESS_DT2_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k3_r -- 第三次ACK与HTTP GET的时延（无线/终端侧原因），时延占比均值
                  ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2) k4 -- 首GET响应时延（CN/CP侧原因），时延均值
                  ,round(sum(HTTP_DELAY_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) k4_r -- 首GET响应时延（CN/CP侧原因），时延占比均值
                  ,round(sum(FIN_DELAY_TOT)/sum(TEST_NUM_ALL),2) k5  -- 200ok到FIN时延，时延均值
                  ,round(sum(TCP_SynAck_DL_TOT+TCP_Ack_DL_TOT+WIRELESS_DT2_TOT+HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2) k6 -- 首包总时延
                  ,round(sum(TCP_SynAck_DL_TOT+TCP_Ack_DL_TOT+WIRELESS_DT2_TOT+HTTP_DELAY_TOT+FIN_DELAY_TOT)/sum(TEST_NUM_ALL),2) k7 -- 首页总时延                 
            from noce.FRT_DPI_DELAY_SP_H 
            where hour between #{START_HOUR} and #{END_HOUR}
                  and network=#{NETWORK}  --  1:eHRPD 4:LETLTE
                  and KQI_TYPE='FIRST_PKG_DELAY'
            )
      select
            time
            ,'时延均值' type
            ,k1 TCP第二次握手时延
            ,k2 第三次握手时延
            ,k3 第三次ACK与HTTPGET的时延
            ,k4 首GET响应时延
            ,k5 200ok到FIN时延
            ,k6 首包总时延
            ,k7 首页总时延
      from t1
      union
      select 
            time
            ,'时延占比' type
            ,k1_r TCP第二次握手时延
            ,k2_r 第三次握手时延
            ,k3_r 第三次ACK与HTTPGET的时延
            ,k4_r 首GET响应时延
            ,0.0 200ok到FIN时延
            ,0.0 首包总时延
            ,0.0 首页总时延
      from t1
      )
select * from t2
order by time,type desc
	
	
	]]>
	</sqlTemplate>
	
	
	<sqlTemplate id="kqiAna_sp_export" description="">
	<![CDATA[
	
	select c.DomainName
      ,c.time
      ,c.k1
      ,c.BAD_RATIO
from 
(
      select DomainName
            ,cast(#{TIME} as string) time
            ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 -- Tcp第二次握手时延（CN/CP侧原因），时延均值
            ,round(100*sum(BD_TCP_SYNACK_DL_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)                
      from noce.FRT_DPI_DELAY_SP_H 
      where hour between #{START_HOUR} and #{END_HOUR}
            and network=#{NETWORK}  --  1:eHRPD 4:LTE
            and KQI_TYPE='FIRST_PKG_DELAY'
      group by DomainName, time
      union
      select DomainName
            ,'汇总' time
            ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 -- Tcp第二次握手时延（CN/CP侧原因），时延均值
            ,round(100*sum(BD_TCP_SYNACK_DL_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)                 
            from noce.FRT_DPI_DELAY_SP_H 
      where hour between #{START_HOUR} and #{END_HOUR}
            and network=#{NETWORK}  --  1:eHRPD 4:LTE
            and KQI_TYPE='FIRST_PKG_DELAY'
      group by DomainName
      ) c
order by DomainName, time
	
	
	]]>
	</sqlTemplate>


	<sqlTemplate id="kqiAna_sp_attach_export" description="">
	<![CDATA[
	
	select c.DomainName
      ,c.IP_C
      ,c.time
      ,c.k1
      ,c.BAD_RATIO
from
(      
      select DomainName
            ,regexp_replace(SERVER_IP,'.\\d+$','.*') IP_C  -- C段IP地址
            ,cast(#{TIME} as string) time
            ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 -- Tcp第二次握手时延（CN/CP侧原因），时延均值 
            ,round(100*sum(BD_TCP_SYNACK_DL_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)          
      from noce.FRT_DPI_DELAY_SP_H 
      where DomainName='#{DOMAINNAME}' -- DomainName
            and hour between #{START_HOUR} and #{END_HOUR}
            and network=#{NETWORK}  --  1:eHRPD 4:LTE
            and KQI_TYPE='FIRST_PKG_DELAY'
      group by DomainName, IP_C, time
      union
      select DomainName
            ,regexp_replace(SERVER_IP,'.\\d+$','.*') IP_C  -- C段IP地址
            ,'汇总' time
            ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 -- Tcp第二次握手时延（CN/CP侧原因），时延均值 
            ,round(100*sum(BD_TCP_SYNACK_DL_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)          
      from noce.FRT_DPI_DELAY_SP_H 
      where DomainName='#{DOMAINNAME}' -- DomainName
            and hour between #{START_HOUR} and #{END_HOUR}
            and network=#{NETWORK}  --  1:eHRPD 4:LTE
            and KQI_TYPE='FIRST_PKG_DELAY'
      group by DomainName, IP_C
) c
order by DomainName, IP_C, time
	
	
	]]>
	</sqlTemplate>


	<sqlTemplate id="kqiAna_hxw_export" description="">
	<![CDATA[
	
	select c.SPGW_NAME
      ,c.time
      ,c.k1
      ,c.BAD_RATIO
from
(
      select SPGW_NAME
            ,cast(#{TIME} as string) time
            ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 -- Tcp第二次握手时延（CN/CP侧原因），时延均值  
            ,round(100*sum(BD_TCP_SYNACK_DL_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)                         
      from noce.FRT_DPI_DELAY_SPGW_H
      where hour between #{START_HOUR} and #{END_HOUR}
            and network=#{NETWORK}  --  1:eHRPD 4:LTE
            and KQI_TYPE='FIRST_PKG_DELAY'
      group by SPGW_NAME,time
      union
      select SPGW_NAME
            ,'汇总' time
            ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 -- Tcp第二次握手时延（CN/CP侧原因），时延均值 
            ,round(100*sum(BD_TCP_SYNACK_DL_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)                     
      from noce.FRT_DPI_DELAY_SPGW_H
      where hour between #{START_HOUR} and #{END_HOUR}
            and network=#{NETWORK}  --  1:eHRPD 4:LTE
            and KQI_TYPE='FIRST_PKG_DELAY'
      group by SPGW_NAME
) c
order by SPGW_NAME,time
	
	
	]]>
	</sqlTemplate>


	<sqlTemplate id="kqiAna_hxw_attach_export" description="">
	<![CDATA[
	
	select c.SPGW_NAME
      ,c.SGW_IP
      ,c.time
      ,c.k1
      ,c.BAD_RATIO
from
(
      select SPGW_NAME
            ,SGW_IP
            ,cast(#{TIME} as string) time
            ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 -- Tcp第二次握手时延（CN/CP侧原因），时延均值
            ,round(100*sum(BD_TCP_SYNACK_DL_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)
      from noce.FRT_DPI_DELAY_SPGW_H 
      where SPGW_NAME='#{SPGW_NAME}'  -- SPGW_NAME
            and hour between #{START_HOUR} and #{END_HOUR}
            and network=#{NETWORK}  --  1:eHRPD 4:LTE
            and KQI_TYPE='FIRST_PKG_DELAY'
      group by SPGW_NAME,SGW_IP,time
      union
      select SPGW_NAME
            ,SGW_IP
            ,'汇总' time
            ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 -- Tcp第二次握手时延（CN/CP侧原因），时延均值
            ,round(100*sum(BD_TCP_SYNACK_DL_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)
      from noce.FRT_DPI_DELAY_SPGW_H 
      where SPGW_NAME='#{SPGW_NAME}'  -- SPGW_NAME
            and hour between #{START_HOUR} and #{END_HOUR}
            and network=#{NETWORK}  --  1:eHRPD 4:LTE
            and KQI_TYPE='FIRST_PKG_DELAY'
      group by SPGW_NAME,SGW_IP
) c
order by SPGW_NAME,SGW_IP,time
	
	
	
	]]>
	</sqlTemplate>



	<sqlTemplate id="kqiAna_spip_th_export" description="">
	<![CDATA[
	select DomainName  -- 域名，即SP
      ,regexp_replace(SERVER_IP,'.\\d+$','.*') IP_C  -- C段IP地址
      ,round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL),2)  k1 -- Tcp第二次握手时延（CN/CP侧原因），时延均值
      ,sum(TEST_NUM_ALL) TEST_NUM_ALL -- 测试次数 
      ,round(100*sum(BD_TCP_SYNACK_DL_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)            
from noce.FRT_DPI_DELAY_SP_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network=#{NETWORK}  --  1:eHRPD 4:LTE
      and KQI_TYPE='FIRST_PKG_DELAY'
      and DomainName='#{DOMAINNAME}'
group by DomainName,IP_C
order by DomainName,IP_C
	
	
	]]>
	</sqlTemplate>


	<sqlTemplate id="kqiAna_sp_attach_k4_export" description="">
	<![CDATA[
	
	select c.DomainName
      ,c.IP_C
      ,c.time
      ,c.k4
      ,c.BAD_RATIO
from
(      
      select DomainName
            ,regexp_replace(SERVER_IP,'.\\d+$','.*') IP_C  -- C段IP地址
            ,cast(#{TIME} as string) time
            ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 -- 首GET响应时延（CN/CP侧原因），时延均值     
            ,round(100*sum(BD_HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)          
      from noce.FRT_DPI_DELAY_SP_H 
      where DomainName='#{DOMAINNAME}' -- DomainName
            and hour between #{START_HOUR} and #{END_HOUR}
            and network=#{NETWORK}  --  1:eHRPD 4:LTE
            and KQI_TYPE='FIRST_PKG_DELAY'
      group by DomainName, IP_C, time
      union
      select DomainName
            ,regexp_replace(SERVER_IP,'.\\d+$','.*') IP_C  -- C段IP地址
            ,'汇总' time
            ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 -- 首GET响应时延（CN/CP侧原因），时延均值     
            ,round(100*sum(BD_HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)         
      from noce.FRT_DPI_DELAY_SP_H 
      where DomainName='#{DOMAINNAME}' -- DomainName
            and hour between #{START_HOUR} and #{END_HOUR}
            and network=#{NETWORK}  --  1:eHRPD 4:LTE
            and KQI_TYPE='FIRST_PKG_DELAY'
      group by DomainName, IP_C
) c
order by DomainName, IP_C, time
	
	
	]]>
	</sqlTemplate>




	<sqlTemplate id="kqiAna_spip_th_k4_export" description="">
	<![CDATA[
	
	
	select DomainName  -- 域名，即SP
      ,regexp_replace(SERVER_IP,'.\\d+$','.*') IP_C  -- C段IP地址
      ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 -- 首GET响应时延（CN/CP侧原因），时延均值     
      ,sum(TEST_NUM_ALL) TEST_NUM_ALL -- 测试次数 
      ,round(100*sum(BD_HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)            
from noce.FRT_DPI_DELAY_SP_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network=#{NETWORK}  --  1:eHRPD 4:LTE
      and KQI_TYPE='FIRST_PKG_DELAY'
      and DomainName='#{DOMAINNAME}'
group by DomainName,IP_C
order by DomainName,IP_C
	
		]]>
	</sqlTemplate>

	<sqlTemplate id="kqiAna_hxw_attach_k4_export" description="">
	<![CDATA[
	
	select c.SPGW_NAME
      ,c.SGW_IP
      ,c.time
      ,c.k4
      ,c.BAD_RATIO
from
(
      select SPGW_NAME
            ,SGW_IP
            ,cast(#{TIME} as string) time
            ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 -- 首GET响应时延（CN/CP侧原因），时延均值
            ,round(100*sum(BD_HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)
      from noce.FRT_DPI_DELAY_SPGW_H 
      where SPGW_NAME='#{SPGW_NAME}'  -- SPGW_NAME
            and hour between #{START_HOUR} and #{END_HOUR}
            and network=#{NETWORK}  --  1:eHRPD 4:LTE
            and KQI_TYPE='FIRST_PKG_DELAY'
      group by SPGW_NAME,SGW_IP,time
      union
      select SPGW_NAME
            ,SGW_IP
            ,'汇总' time
            ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 -- 首GET响应时延（CN/CP侧原因），时延均值
            ,round(100*sum(BD_HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)
      from noce.FRT_DPI_DELAY_SPGW_H 
      where SPGW_NAME='#{SPGW_NAME}'  -- SPGW_NAME
            and hour between #{START_HOUR} and #{END_HOUR}
            and network=#{NETWORK}  --  1:eHRPD 4:LTE
            and KQI_TYPE='FIRST_PKG_DELAY'
      group by SPGW_NAME,SGW_IP
) c
order by SPGW_NAME,SGW_IP,time
	
	]]>
	</sqlTemplate>


	<sqlTemplate id="kqiAna_sp_k4_export" description="">
	<![CDATA[
	
	select c.DomainName
      ,c.time
      ,c.k4
      ,c.BAD_RATIO
from 
(
      select DomainName
            ,cast(#{TIME} as string) time
            ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 -- 首GET响应时延（CN/CP侧原因），时延均值 
            ,round(100*sum(BD_HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)                
      from noce.FRT_DPI_DELAY_SP_H 
      where hour between #{START_HOUR} and #{END_HOUR}
            and network=#{NETWORK}  --  1:eHRPD 4:LTE
            and KQI_TYPE='FIRST_PKG_DELAY'
      group by DomainName, time
      union
      select DomainName
            ,'汇总' time
            ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 -- 首GET响应时延（CN/CP侧原因），时延均值 
            ,round(100*sum(BD_HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)             
            from noce.FRT_DPI_DELAY_SP_H 
      where hour between #{START_HOUR} and #{END_HOUR}
            and network=#{NETWORK}  --  1:eHRPD 4:LTE
            and KQI_TYPE='FIRST_PKG_DELAY'
      group by DomainName
      ) c
order by DomainName, time
	
	]]>
	</sqlTemplate>

	<sqlTemplate id="kqiAna_hxw_k4_export" description="">
	<![CDATA[
	
	select c.SPGW_NAME
      ,c.time
      ,c.k4
      ,c.BAD_RATIO
from
(
      select SPGW_NAME
            ,cast(#{TIME} as string) time
            ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 -- 首GET响应时延（CN/CP侧原因），时延均值
            ,round(100*sum(BD_HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)                         
      from noce.FRT_DPI_DELAY_SPGW_H
      where hour between #{START_HOUR} and #{END_HOUR}
            and network=#{NETWORK}  --  1:eHRPD 4:LTE
            and KQI_TYPE='FIRST_PKG_DELAY'
      group by SPGW_NAME,time
      union
      select SPGW_NAME
            ,'汇总' time
            ,round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  k4 -- 首GET响应时延（CN/CP侧原因），时延均值
            ,round(100*sum(BD_HTTP_DELAY_TOT)/sum(TEST_NUM_ALL),2)  BAD_RATIO    -- 质差记录数占比(%)                   
      from noce.FRT_DPI_DELAY_SPGW_H
      where hour between #{START_HOUR} and #{END_HOUR}
            and network=#{NETWORK}  --  1:eHRPD 4:LTE
            and KQI_TYPE='FIRST_PKG_DELAY'
      group by SPGW_NAME
) c
order by SPGW_NAME,time
	
	]]>
	</sqlTemplate>

   <!--  SP以及核心网维度结束-->
           


	<sqlTemplate id="kqiAna_yf_menu_ds" description="">
<![CDATA[
select  city_id,city_name from noce.dim_tele_city where city_id<>'1000' order by city_display_order
]]>
	</sqlTemplate>


	<sqlTemplate id="kqiAna_yf_menu_yf" description="">
<![CDATA[
select distinct 
       latn_id  -- 地市ID
       ,marketbase -- 营服中心名称
from noce.FRT_DPI_DELAY_MB_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network=#{NETWORK}  --  1:eHRPD 4:LET
]]>
	</sqlTemplate>


	<sqlTemplate id="kqiAna_yf_menu_jzAndxq" description="">
<![CDATA[
select distinct 
       latn_id  -- 地市ID
       ,marketbase -- 营服中心名称
       ,eNodeB_ID -- 基站ID
       ,eNodeBName -- 基站名称
       ,CELL_ID  -- 小区ID
       ,CELL_NAME  -- 小区名称
from noce.FRT_DPI_DELAY_MB_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network=#{NETWORK}  --  1:eHRPD 4:LET
      and latn_id=#{LATN_ID}
      and marketbase='#{MARKETBASE}'
]]>
	</sqlTemplate>
	
	
	<sqlTemplate id="buildingassessAll" description="全部楼群">
		<![CDATA[
		 	 select a.buildinggroup_id,
					b.buildinggroup_name,
					a.building_city,
					b.buildinggrou_area,
					round(sum(a.size_all_TOT)/(1024*1024),2) all_flow, -- #'总流量（MB）'
					round(sum(a.size_all_TOT)/(1024*1024*#{TIME_DELTA}),2) day_flow,	-- #{TIME_DELTA}=n '日均流量（MB）'
					round(sum(a.size_all_TOT)/(1024*1024*#{TIME_DELTA}*b.buildinggrou_area)*10000,2) day_flow_density,	-- #{TIME_DELTA}=n '日均流量密度（MB/hm^2）'
					round(max(a.size_all_TOT)/(1024*1024),2) hour_flow,  -- #'小时峰值流量（MB）'
					round(max(a.size_all_TOT)/(1024*1024*b.buildinggrou_area)*10000,2) hour_flow_density,  -- #'小时峰值流量密度（MB/hm^2）'
					max(a.user_num) user_num,  -- #'小时峰值用户数（人）'
					round(max(a.user_num)/b.buildinggrou_area*10000,2) user_num_density,  -- #'小时峰值用户密度（人/hm^2）'
					case sum(WEBPAGE_FIRST_ALL)  when 0 then 0 else round((1-sum(WEBPAGE_FIRST_PKG_DELAY_BAD)/sum(WEBPAGE_FIRST_ALL))*100,2) end sbsyylv,  -- #'首包时延优良率（%）'
					case sum(WEBPAGE_OPEN_ALL)  when 0 then 0 else round((1- sum(WEBPAGE_OPEN_DELAY_BAD) / sum(WEBPAGE_OPEN_ALL))*100,2) end sysyylv,  -- #'首页时延优良率（%）'
					case sum(VIDIO_ALL)  when 0 then 0 else round((1- sum(VIDIO_DOWNLOAD_RATE_BAD) / sum(VIDIO_ALL))*100,2) end spxzylv,  -- #'视频下载优良率（%）'
					case sum(WEBPAGE_FIRST_ALL)  when 0 then 0 else round(sum(WEBPAGE_FIRST_PKG_DELAY_TOT)/sum(WEBPAGE_FIRST_ALL),2) end sbsypjz,  -- #'首包时延均值（ms）'
					case sum(WEBPAGE_OPEN_ALL)  when 0 then 0 else round(sum(WEBPAGE_OPEN_DELAY_TOT) / sum(WEBPAGE_OPEN_ALL),2) end sysypjz,  -- #'首页时延均值（ms）'
					case sum(VIDIO_ALL)  when 0 then 0 else round(sum(VIDIO_DOWNLOAD_RATE_TOT) / sum(VIDIO_ALL),2) end spxzpjz,  -- #'视频下载速率均值（kbps）'
					b.concerned
				from 
				(
					select * from noce.FRT_BLDG_4GFLOW_H
					where hour between #{START_HOUR} and #{END_HOUR} 
						and building_city like '#{CITY}%'
					) a
				join
				(
					select * from NOCE.DIM_BUILDINGGROUP_GIS_DATA 
					where buildinggrou_area>0
						and day=#{GIS_DAY}
						#{SEARCH_CONDITION}
					) b
				on a.buildinggroup_id=b.buildinggroup_id
				group by a.buildinggroup_id, b.buildinggroup_name, b.buildinggrou_area, a.building_city,b.concerned
				order by #{ORDER_BY} 
		]]>
	</sqlTemplate>
	<sqlTemplate id="buildingassessEmphases2016" description="2016年重点楼群">
		<![CDATA[
		 select a.buildinggroup_id,
			b.buildinggroup_name,
			a.building_city,
			b.buildinggrou_area,
			round(sum(a.size_all_TOT)/(1024*1024),2) all_flow, -- #'总流量（MB）'
			round(sum(a.size_all_TOT)/(1024*1024*#{TIME_DELTA}),2) day_flow,	-- #{TIME_DELTA}=n '日均流量（MB）'
			round(sum(a.size_all_TOT)/(1024*1024*#{TIME_DELTA}*b.buildinggrou_area)*10000,2) day_flow_density,	-- #{TIME_DELTA}=n '日均流量密度（MB/hm^2）'
			round(max(a.size_all_TOT)/(1024*1024),2) hour_flow,  -- #'小时峰值流量（MB）'
			round(max(a.size_all_TOT)/(1024*1024*b.buildinggrou_area)*10000,2) hour_flow_density,  -- #'小时峰值流量密度（MB/hm^2）'
			max(a.user_num) user_num,  -- #'小时峰值用户数（人）'
			round(max(a.user_num)/b.buildinggrou_area*10000,2) user_num_density,  -- #'小时峰值用户密度（人/hm^2）'
			case sum(WEBPAGE_FIRST_ALL)  when 0 then 0 else round((1-sum(WEBPAGE_FIRST_PKG_DELAY_BAD)/sum(WEBPAGE_FIRST_ALL))*100,2) end sbsyylv,  -- #'首包时延优良率（%）'
			case sum(WEBPAGE_OPEN_ALL)  when 0 then 0 else round((1- sum(WEBPAGE_OPEN_DELAY_BAD) / sum(WEBPAGE_OPEN_ALL))*100,2) end sysyylv,  -- #'首页时延优良率（%）'
			case sum(VIDIO_ALL)  when 0 then 0 else round((1- sum(VIDIO_DOWNLOAD_RATE_BAD) / sum(VIDIO_ALL))*100,2) end spxzylv,  -- #'视频下载优良率（%）'
			case sum(WEBPAGE_FIRST_ALL)  when 0 then 0 else round(sum(WEBPAGE_FIRST_PKG_DELAY_TOT)/sum(WEBPAGE_FIRST_ALL),2) end sbsypjz,  -- #'首包时延均值（ms）'
			case sum(WEBPAGE_OPEN_ALL)  when 0 then 0 else round(sum(WEBPAGE_OPEN_DELAY_TOT) / sum(WEBPAGE_OPEN_ALL),2) end sysypjz,  -- #'首页时延均值（ms）'
			case sum(VIDIO_ALL)  when 0 then 0 else round(sum(VIDIO_DOWNLOAD_RATE_TOT) / sum(VIDIO_ALL),2) end spxzpjz  -- #'视频下载速率均值（kbps）'
		from 
		(
			select * from noce.FRT_BLDG_4GFLOW_H
			where hour between #{START_HOUR} and #{END_HOUR} 
				and building_city like '#{CITY}%'
			) a
		join
		(
			select * from NOCE.DIM_BUILDINGGROUP_GIS_DATA 
			where buildinggrou_area>0
				and day=#{GIS_DAY}
				and concerned=1
				#{SEARCH_CONDITION}
			) b
		on a.buildinggroup_id=b.buildinggroup_id
		group by a.buildinggroup_id, b.buildinggroup_name, b.buildinggrou_area, a.building_city
		order by #{ORDER_BY} 
		]]>
	</sqlTemplate>
	
	<sqlTemplate id="buildingassessTop10" description="TOP10楼群">
		<![CDATA[
		 select * from
				(
					select a.buildinggroup_id,
						b.buildinggroup_name,
						a.building_city,
						b.buildinggrou_area,
						round(sum(a.size_all_TOT)/(1024*1024),2) '总流量（MB）',
						round(sum(a.size_all_TOT)/(1024*1024*#{TIME_DELTA}),2) '日均流量（MB）',	-- #{TIME_DELTA}=1
						round(sum(a.size_all_TOT)/(1024*1024*#{TIME_DELTA}*b.buildinggrou_area)*10000,2) '日均流量密度（MB/hm^2）',	-- #{TIME_DELTA}=1
						round(max(a.size_all_TOT)/(1024*1024),2) '小时峰值流量（MB）',
						round(max(a.size_all_TOT)/(1024*1024*b.buildinggrou_area)*10000,2) '小时峰值流量密度（MB/hm^2）',
						max(a.user_num) '小时峰值用户数（人）',
						round(max(a.user_num)/b.buildinggrou_area*10000,2) '小时峰值用户密度（人/hm^2）',
						case sum(WEBPAGE_FIRST_ALL)  when 0 then 0 else round((1-sum(WEBPAGE_FIRST_PKG_DELAY_BAD)/sum(WEBPAGE_FIRST_ALL))*100,2) end '首包时延优良率（%）',
						case sum(WEBPAGE_OPEN_ALL)  when 0 then 0 else round((1- sum(WEBPAGE_OPEN_DELAY_BAD) / sum(WEBPAGE_OPEN_ALL))*100,2) end '首页时延优良率（%）',
						case sum(VIDIO_ALL)  when 0 then 0 else round((1- sum(VIDIO_DOWNLOAD_RATE_BAD) / sum(VIDIO_ALL))*100,2) end '视频下载优良率（%）',
						case sum(WEBPAGE_FIRST_ALL)  when 0 then 0 else round(sum(WEBPAGE_FIRST_PKG_DELAY_TOT)/sum(WEBPAGE_FIRST_ALL),2) end '首包时延均值（ms）',
						case sum(WEBPAGE_OPEN_ALL)  when 0 then 0 else round(sum(WEBPAGE_OPEN_DELAY_TOT) / sum(WEBPAGE_OPEN_ALL),2) end '首页时延均值（ms）',
						case sum(VIDIO_ALL)  when 0 then 0 else round(sum(VIDIO_DOWNLOAD_RATE_TOT) / sum(VIDIO_ALL),2) end '视频下载速率均值（kbps）',
						b.concerned
				from (
					select * from noce.FRT_BLDG_4GFLOW_H
					where hour between #{START_HOUR} and #{END_HOUR} 
						and building_city like '#{CITY}%'
					) a
				join
				(
					select * from NOCE.DIM_BUILDINGGROUP_GIS_DATA 
					where buildinggrou_area>0
						and day=#{GIS_DAY}
						and city_name like '#{CITY}%'
				) b
				on a.buildinggroup_id=b.buildinggroup_id
				group by a.buildinggroup_id, b.buildinggroup_name, b.buildinggrou_area, a.building_city, b.concerned
			) c
			join
			(
				select a.buildinggroup_id,
					a.query_item,
					b.compare_item,
					round(((a.query_item-b.compare_item)/b.compare_item)*100,2) rate
				from
				(
					select buildinggroup_id,
						#{QUERY_FORMULA} query_item
					from noce.FRT_BLDG_4GFLOW_H
					where hour between #{START_HOUR} and #{END_HOUR} 
						and building_city like '#{CITY}%'
					group by buildinggroup_id
					) a
				join
				(
					select t3.buildinggroup_id,
						t3.compare_item,
						t3.flow_density,
						t4.total_flow_density
					from
					(
						select 'total' id,
							t1.buildinggroup_id,
							#{QUERY_FORMULA} compare_item,
							round(#{FILTER}/#{TIME_DELTA},2) flow_density -- '上期日均流量密度（MB/hm^2）'	-- #{TIME_DELTA}=1
						from
						(
							select * from noce.FRT_BLDG_4GFLOW_H
							where hour between #{START_HOUR_COMPARE} and #{END_HOUR_COOMPARE} 
								and building_city like '#{CITY}%'
							) t1
						join
						(
							select * from NOCE.DIM_BUILDINGGROUP_GIS_DATA 
							where buildinggrou_area>0
								and day=#{GIS_DAY}
								and city_name like '#{CITY}%'
						) t2
						on t1.buildinggroup_id=t2.buildinggroup_id
						group by id, t1.buildinggroup_id, t2.buildinggrou_area
						) t3
					join
					(
						select 'total' id,
							round(#{FILTER}/#{TIME_DELTA},2) total_flow_density -- '上期总日均流量密度（MB/hm^2）'	-- #{TIME_DELTA}=1
						from
						(
							select * from noce.FRT_BLDG_4GFLOW_H
							where hour between #{START_HOUR_COMPARE} and #{END_HOUR_COOMPARE} 
								and building_city like '#{CITY}%'
							) t1
						join
						(
							select * from NOCE.DIM_BUILDINGGROUP_GIS_DATA 
							where buildinggrou_area>0
								and day=#{GIS_DAY}
								and city_name like '#{CITY}%'
						) t2
						on t1.buildinggroup_id=t2.buildinggroup_id
						) t4
					on t3.id=t4.id
					) b
				on a.buildinggroup_id=b.buildinggroup_id
				where flow_density >= total_flow_density
				) d
			on c.buildinggroup_id=d.buildinggroup_id
			order by d.rate #{ORDER_BY}, d.buildinggroup_id
			limit 10
		]]>
	</sqlTemplate>
	<sqlTemplate id="buildingassessTop10_userNum" description="用户TOP10楼群">
		<![CDATA[
		select * from
			(
				select a.buildinggroup_id,
					b.buildinggroup_name,
					a.building_city,
					b.buildinggrou_area,
					round(sum(a.size_all_TOT)/(1024*1024),2) '总流量（MB）',
					round(sum(a.size_all_TOT)/(1024*1024*#{TIME_DELTA}),2) '日均流量（MB）',	-- #{TIME_DELTA}=1
					round(sum(a.size_all_TOT)/(1024*1024*#{TIME_DELTA}*b.buildinggrou_area)*10000,2) '日均流量密度（MB/hm^2）',	-- #{TIME_DELTA}=1
					round(max(a.size_all_TOT)/(1024*1024),2) '小时峰值流量（MB）',
					round(max(a.size_all_TOT)/(1024*1024*b.buildinggrou_area)*10000,2) '小时峰值流量密度（MB/hm^2）',
					max(a.user_num) '小时峰值用户数（人）',
					round(max(a.user_num)/b.buildinggrou_area*10000,2) '小时峰值用户密度（人/hm^2）',
					case sum(WEBPAGE_FIRST_ALL)  when 0 then 0 else round((1-sum(WEBPAGE_FIRST_PKG_DELAY_BAD)/sum(WEBPAGE_FIRST_ALL))*100,2) end '首包时延优良率（%）',
					case sum(WEBPAGE_OPEN_ALL)  when 0 then 0 else round((1- sum(WEBPAGE_OPEN_DELAY_BAD) / sum(WEBPAGE_OPEN_ALL))*100,2) end '首页时延优良率（%）',
					case sum(VIDIO_ALL)  when 0 then 0 else round((1- sum(VIDIO_DOWNLOAD_RATE_BAD) / sum(VIDIO_ALL))*100,2) end '视频下载优良率（%）',
					case sum(WEBPAGE_FIRST_ALL)  when 0 then 0 else round(sum(WEBPAGE_FIRST_PKG_DELAY_TOT)/sum(WEBPAGE_FIRST_ALL),2) end '首包时延均值（ms）',
					case sum(WEBPAGE_OPEN_ALL)  when 0 then 0 else round(sum(WEBPAGE_OPEN_DELAY_TOT) / sum(WEBPAGE_OPEN_ALL),2) end '首页时延均值（ms）',
					case sum(VIDIO_ALL)  when 0 then 0 else round(sum(VIDIO_DOWNLOAD_RATE_TOT) / sum(VIDIO_ALL),2) end '视频下载速率均值（kbps）',
					b.concerned
				from (
					select * from noce.FRT_BLDG_4GFLOW_H
					where hour between #{START_HOUR} and #{END_HOUR} 
						and building_city like '#{CITY}%'
					) a
				join
				(
					select * from NOCE.DIM_BUILDINGGROUP_GIS_DATA 
					where buildinggrou_area>0
						and day=#{GIS_DAY}
						and city_name like '#{CITY}%'
				) b
				on a.buildinggroup_id=b.buildinggroup_id
				group by a.buildinggroup_id, b.buildinggroup_name, b.buildinggrou_area, a.building_city, b.concerned
			) c
			join
			(
				select a.buildinggroup_id,
					a.query_item,
					b.compare_item,
					round(((a.query_item-b.compare_item)/b.compare_item)*100,2) rate
				from
				(
					select buildinggroup_id,
						max(user_num) query_item
					from noce.FRT_BLDG_4GFLOW_H
					where hour between #{START_HOUR} and #{END_HOUR} 
						and building_city like '#{CITY}%'
					group by buildinggroup_id
					) a
				join
				(
					select buildinggroup_id,
						compare_item,
						flow_density,
						total_flow_density
					from 
					(
						select 'total' id,
							*
						from
						(
							select t1.buildinggroup_id,
								t2.buildinggrou_area,
								max(user_num) compare_item,
								round(max(user_num)/t2.buildinggrou_area*10000,2) flow_density -- '上期小时峰值用户密度'
							from
							(
								select * from noce.FRT_BLDG_4GFLOW_H
								where hour between #{START_HOUR_COMPARE} and #{END_HOUR_COOMPARE} 
									and building_city like '#{CITY}%'
								) t1
							join
							(
								select * from NOCE.DIM_BUILDINGGROUP_GIS_DATA 
								where buildinggrou_area>0
									and day=#{GIS_DAY}
									and city_name like '#{CITY}%'
								) t2
							on t1.buildinggroup_id=t2.buildinggroup_id
							group by t1.buildinggroup_id, t2.buildinggrou_area
							) t
						) t3
					join
					(
						select 'total' id,
							round(sum(compare_item)/sum(buildinggrou_area)*10000, 2) total_flow_density -- '上期总小时峰值用户密度'	
						from
						(
							select t1.buildinggroup_id,
								t2.buildinggrou_area,
								max(user_num) compare_item
							from
							(
								select * from noce.FRT_BLDG_4GFLOW_H
								where hour between #{START_HOUR_COMPARE} and #{END_HOUR_COOMPARE} 
									and building_city like '#{CITY}%'
								) t1
							join
							(
								select * from NOCE.DIM_BUILDINGGROUP_GIS_DATA 
								where buildinggrou_area>0
									and day=#{GIS_DAY}
									and city_name like '#{CITY}%'
								) t2
							on t1.buildinggroup_id=t2.buildinggroup_id
							group by t1.buildinggroup_id, t2.buildinggrou_area
							) t
						) t4
					on t3.id=t4.id
					) b
				on a.buildinggroup_id=b.buildinggroup_id
				where flow_density >= total_flow_density
				) d
			on c.buildinggroup_id=d.buildinggroup_id
			order by d.rate #{ORDER_BY}, d.buildinggroup_id
			limit 10
		]]>
	</sqlTemplate>
	
	<sqlTemplate id="buildingassessFollow" description="关注的楼群">
		<![CDATA[
		 select a.buildinggroup_id,
				b.buildinggroup_name,
				b.concerned,
				a.building_city,
				b.buildinggrou_area,
				case sum(WEBPAGE_FIRST_ALL)  when 0 then 0 else round((1-sum(WEBPAGE_FIRST_PKG_DELAY_BAD)/sum(WEBPAGE_FIRST_ALL))*100,2) end '首包时延优良率（%）',
				case sum(WEBPAGE_OPEN_ALL)  when 0 then 0 else round((1- sum(WEBPAGE_OPEN_DELAY_BAD) / sum(WEBPAGE_OPEN_ALL))*100,2) end '首页时延优良率（%）',
				case sum(VIDIO_ALL)  when 0 then 0 else round((1- sum(VIDIO_DOWNLOAD_RATE_BAD) / sum(VIDIO_ALL))*100,2) end '视频下载优良率（%）',
				case sum(WEBPAGE_FIRST_ALL)  when 0 then 0 else round(sum(WEBPAGE_FIRST_PKG_DELAY_TOT)/sum(WEBPAGE_FIRST_ALL),2) end '首包时延均值（ms）',
				case sum(WEBPAGE_OPEN_ALL)  when 0 then 0 else round(sum(WEBPAGE_OPEN_DELAY_TOT) / sum(WEBPAGE_OPEN_ALL),2) end '首页时延均值（ms）',
				case sum(VIDIO_ALL)  when 0 then 0 else round(sum(VIDIO_DOWNLOAD_RATE_TOT) / sum(VIDIO_ALL),2) end '视频下载速率均值（kbps）',
				max(a.user_num) '小时峰值用户数（人）',
				round(max(a.user_num)/b.buildinggrou_area*10000,2) '小时峰值用户密度（人/hm^2）',
				round(sum(a.size_all_TOT)/(1024*1024),2) '总流量（MB）',
				round(sum(a.size_all_TOT)/(1024*1024*#{TIME_DELTA}),2) '日均流量（MB）',	-- #{TIME_DELTA}=n
				round(sum(a.size_all_TOT)/(1024*1024*#{TIME_DELTA}*b.buildinggrou_area)*10000,2) '日均流量密度（MB/hm^2）',	-- #{TIME_DELTA}=n
				round(max(a.size_all_TOT)/(1024*1024),2) '小时峰值流量（MB）',
				round(max(a.size_all_TOT)/(1024*1024*b.buildinggrou_area)*10000,2) '小时峰值流量密度（MB/hm^2）'
			from (
				select * from noce.FRT_BLDG_4GFLOW_H
				where hour between #{START_HOUR} and #{END_HOUR} 
					and buildinggroup_id='#{BUILDINGGROUP_ID}'
				) a
			join
				(
				select * from NOCE.DIM_BUILDINGGROUP_GIS_DATA 
				where buildinggrou_area>0
					and buildinggroup_id='#{BUILDINGGROUP_ID}'
				) b
			on a.buildinggroup_id=b.buildinggroup_id
			group by a.buildinggroup_id, b.buildinggroup_name, b.buildinggrou_area, a.building_city, b.concerned
			order by a.buildinggroup_id, b.buildinggroup_name
		]]>
	</sqlTemplate>

<sqlTemplate id="kqiAna_ipran_province" description="IPRAN维度省层级时延分析表">
	<![CDATA[
		select city_name,mean_ms,bad_record_rate,bad_rate,test_num
			from noce.dim_tele_city d  -- 取维表进行左关联，保证所有地市均不缺失
			left outer join
			(
				select latn_id 		-- 地市ID
					,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
				    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
				    ,sum(TEST_NUM_ALL) test_num 	-- 测试记录数
				from noce.FRT_DPI_DELAY_IPRAN_H 
				where hour between #{START_HOUR} and #{END_HOUR} 
				    and network=#{NETWORK}  --  1:eHRPD 4:LET
				group by latn_id
				) a
			on d.city_id=a.latn_id
			left outer join
			(
				select latn_id
				    ,round(sum(case when bd_r>#{BD_R_VALUE} then 1 else 0 end)/count(latn_id)*100,2) bad_rate 	-- 质差设备占比
				from (
					select latn_id
					    ,service_d1
						,service_d2
					    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) bd_r 	-- 下级设备质差记录占比（%）
					from noce.FRT_DPI_DELAY_IPRAN_H 
					where hour between #{START_HOUR} and #{END_HOUR} 
					    and network=#{NETWORK}  --  1:eHRPD 4:LET
					group by latn_id, service_d1, service_d2) t
				group by latn_id
				) b
			on d.city_id=b.latn_id
			where city_id<>'1000'
			order by city_display_order
	]]>
</sqlTemplate>	

<sqlTemplate id="kqiAna_ipran_province_export" description="IPRAN维度省层级时延分析总导出表">
	<![CDATA[
	select city_name --  地市（分公司）
      ,time --  时间，按天则为天，按小时则为小时
      ,mean_ms -- 第三次握手时延均值（ms）
      ,bad_record_rate -- 质差记录占比（%）
	from 
	(
		select cast(#{TIME} as string) time,city_name,city_display_order
		    ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
		    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
		from noce.FRT_DPI_DELAY_IPRAN_H A
		join noce.dim_tele_city B  --  关联维表，取分公司名称
		on A.latn_id=B.city_id
		where hour between #{START_HOUR} and #{END_HOUR}
		    and network=#{NETWORK}  --  1:eHRPD 4:LET
		group by time,city_name,city_display_order
		union
		select '汇总' as time,city_name,city_display_order
		    ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
		    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
		from noce.FRT_DPI_DELAY_IPRAN_H A
		join noce.dim_tele_city B  --  关联维表，取分公司名称
		on A.latn_id=B.city_id
		where hour between #{START_HOUR} and #{END_HOUR}
		    and network=#{NETWORK}  --  1:eHRPD 4:LET
		group by city_name,city_display_order
		) t
	order by city_display_order, time
	]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_ipran_city" description="IPRAN维度地市层级时延分析表">
	<![CDATA[
		select a.service_d, mean_ms, bad_record_rate, bad_rate, test_num
			from 
			(
				select case when concat(service_d1, ':', service_d2) is NULL then 'virtual_1:virtual_2' else concat(service_d1, ':', service_d2) end service_d
					,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
				    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
				    ,sum(TEST_NUM_ALL) test_num 	-- 测试记录数
				from noce.FRT_DPI_DELAY_IPRAN_H 
				where hour between #{START_HOUR} and #{END_HOUR}
				    and network=#{NETWORK}  --  1:eHRPD 4:LET
				    and latn_id='#{LATN_ID}'
				group by service_d
				) a
			join
			(
				select service_d
				    ,round(sum(case when bd_r>#{BD_R_VALUE} then 1 else 0 end)/count(service_d)*100,2) bad_rate 	-- 质差设备占比
				from (
					select case when concat(service_d1, ':', service_d2) is NULL then 'virtual_1:virtual_2' else concat(service_d1, ':', service_d2) end service_d
						,service_b1
						,service_b2
					    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) bd_r 	-- 下级设备质差记录占比（%）
					from noce.FRT_DPI_DELAY_IPRAN_H 
					where hour between #{START_HOUR} and #{END_HOUR}
					    and network=#{NETWORK}  --  1:eHRPD 4:LET
					    and latn_id='#{LATN_ID}'
					group by service_d, service_b1, service_b2) t
				group by service_d
				) b
			on a.service_d=b.service_d
			order by a.service_d
	]]>
</sqlTemplate>	

<sqlTemplate id="kqiAna_ipran_city_export" description="IPRAN维度地市层级时延分析总导出表">
	<![CDATA[
		select service_d, time, mean_ms, bad_record_rate
		from
		(
			select cast(#{TIME} as string) time
				,case when concat(service_d1, ':', service_d2) is NULL then 'virtual_1:virtual_2' else concat(service_d1, ':', service_d2) end service_d
				,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
			    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			group by time, service_d
			union
			select '汇总' time
				,case when concat(service_d1, ':', service_d2) is NULL then 'virtual_1:virtual_2' else concat(service_d1, ':', service_d2) end service_d
				,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
			    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			group by service_d
			) t
		order by service_d, time
	]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_ipran_d" description="IPRAN维度D设备层级时延分析表">
	<![CDATA[
		select a.service_b, mean_ms, bad_record_rate, bad_rate, test_num
			from
			(
				select concat(service_b1, ':', service_b2) service_b
					,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
				    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
				    ,sum(TEST_NUM_ALL) test_num 	-- 测试记录数
				from noce.FRT_DPI_DELAY_IPRAN_H 
				where hour between #{START_HOUR} and #{END_HOUR}
				    and network=#{NETWORK}  --  1:eHRPD 4:LET
				    and latn_id='#{LATN_ID}'
				    #{SERVICE_D_FILTER}
				group by service_b
				) a
			join
			(
				select service_b
				    ,round(sum(case when bd_r>#{BD_R_VALUE} then 1 else 0 end)/count(service_b)*100,2) bad_rate 	-- 质差设备占比
				from (
					select concat(service_b1, ':', service_b2) service_b
						,service_a
					    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) bd_r 	-- 下级设备质差记录占比（%）
					from noce.FRT_DPI_DELAY_IPRAN_H 
					where hour between #{START_HOUR} and #{END_HOUR}
					    and network=#{NETWORK}  --  1:eHRPD 4:LET
					    and latn_id='#{LATN_ID}'
					    #{SERVICE_D_FILTER}
					group by service_b, service_a) t
				group by service_b
				) b
			on a.service_b=b.service_b
			order by a.service_b
	]]>
</sqlTemplate>	

<sqlTemplate id="kqiAna_ipran_d_export" description="IPRAN维度D设备层级时延分析总导出表">
	<![CDATA[
		select service_b, time, mean_ms, bad_record_rate
		from
		(
			select cast(#{TIME} as string) time
				,concat(service_b1, ':', service_b2) service_b
				,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
			    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			    #{SERVICE_D_FILTER}
			group by time, service_b
			union
			select '汇总' time
				,concat(service_b1, ':', service_b2) service_b
				,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
			    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			    #{SERVICE_D_FILTER}
			group by service_b
			) t
		order by service_b, time
	]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_ipran_b" description="IPRAN维度B设备层级时延分析表">
	<![CDATA[
		select a.service_a, mean_ms, bad_record_rate, bad_rate, test_num
			from
			(
				select service_a
					,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
				    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
				    ,sum(TEST_NUM_ALL) test_num 	-- 测试记录数
				from noce.FRT_DPI_DELAY_IPRAN_H 
				where hour between #{START_HOUR} and #{END_HOUR}
				    and network=#{NETWORK}  --  1:eHRPD 4:LET
				    and latn_id='#{LATN_ID}'
				    #{SERVICE_D_FILTER}
				    #{SERVICE_B_FILTER}
				group by service_a
				) a
			join
			(
				select service_a
				    ,round(sum(case when bd_r>#{BD_R_VALUE} then 1 else 0 end)/count(service_a)*100,2) bad_rate 	-- 质差设备占比
				from (
					select service_a
						,enodeb_id
					    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) bd_r 	-- 下级设备质差记录占比（%）
					from noce.FRT_DPI_DELAY_IPRAN_H 
					where hour between #{START_HOUR} and #{END_HOUR}
					    and network=#{NETWORK}  --  1:eHRPD 4:LET
					    and latn_id='#{LATN_ID}'
					    #{SERVICE_D_FILTER}
				    	#{SERVICE_B_FILTER}
					group by service_a, enodeb_id) t
				group by service_a
				) b
			on a.service_a=b.service_a
			order by a.service_a
	]]>
</sqlTemplate>	

<sqlTemplate id="kqiAna_ipran_b_export" description="IPRAN维度B设备层级时延分析总导出表">
	<![CDATA[
		select service_a, time, mean_ms, bad_record_rate
		from
		(
			select cast(#{TIME} as string) time
				,service_a
				,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
			    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			    #{SERVICE_D_FILTER}
			    #{SERVICE_B_FILTER}
			group by time, service_a
			union
			select '汇总' time
				,service_a
				,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
			    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			    #{SERVICE_D_FILTER}
			    #{SERVICE_B_FILTER}
			group by service_a
			) t
		order by service_a, time
	]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_ipran_a" description="IPRAN维度A设备层级时延分析表">
	<![CDATA[
		select a.enodebname, mean_ms, bad_record_rate, bad_rate, test_num,a.enodeb_id
			from
			(
				select enodeb_id
					,enodebname
					,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
				    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
				    ,sum(TEST_NUM_ALL) test_num 	-- 测试记录数
				from noce.FRT_DPI_DELAY_IPRAN_H 
				where hour between #{START_HOUR} and #{END_HOUR}
				    and network=#{NETWORK}  --  1:eHRPD 4:LET
				    and latn_id='#{LATN_ID}'
				    #{SERVICE_D_FILTER}
				    #{SERVICE_B_FILTER}
					and service_a='#{SERVICE_A}'
				group by enodeb_id, enodebname
				) a
			join
			(
				select enodeb_id
					,enodebname
				    ,round(sum(case when bd_r>#{BD_R_VALUE} then 1 else 0 end)/count(enodeb_id)*100,2) bad_rate 	-- 质差设备占比
				from (
					select enodeb_id
						,enodebname
						,cell_id
					    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) bd_r 	-- 下级设备质差记录占比（%）
					from noce.FRT_DPI_DELAY_IPRAN_H 
					where hour between #{START_HOUR} and #{END_HOUR}
					    and network=#{NETWORK}  --  1:eHRPD 4:LET
					    and latn_id='#{LATN_ID}'
					    #{SERVICE_D_FILTER}
				    	#{SERVICE_B_FILTER}
						and service_a='#{SERVICE_A}'
					group by enodeb_id, enodebname, cell_id) t
				group by enodeb_id, enodebname
				) b
			on a.enodeb_id=b.enodeb_id and a.enodebname=b.enodebname
			order by a.enodeb_id
	]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_ipran_a_export" description="IPRAN维度A设备层级时延分析总导出表">
	<![CDATA[
		select enodeb_id, enodebname, time, mean_ms, bad_record_rate
		from
		(
			select cast(#{TIME} as string) time
				,enodeb_id
				,enodebname
				,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
			    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			    #{SERVICE_D_FILTER}
			    #{SERVICE_B_FILTER}
				and service_a='#{SERVICE_A}'
			group by time, enodeb_id, enodebname
			union
			select '汇总' time
				,enodeb_id
				,enodebname
				,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
			    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			    #{SERVICE_D_FILTER}
			    #{SERVICE_B_FILTER}
				and service_a='#{SERVICE_A}'
			group by enodeb_id, enodebname
			) t
		order by enodeb_id, enodebname, time
	]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_ipran_station" description="IPRAN维度基站层级时延分析表">
	<![CDATA[
		select cell_id
			,cell_name
			,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
			,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			,sum(TEST_NUM_ALL) test_num 	-- 测试记录数
		from noce.FRT_DPI_DELAY_IPRAN_H 
		where hour between #{START_HOUR} and #{END_HOUR}
			and network=#{NETWORK}  --  1:eHRPD 4:LET
			and latn_id='#{LATN_ID}'
			#{SERVICE_D_FILTER}
			#{SERVICE_B_FILTER}
			and service_a='#{SERVICE_A}'
			and enodeb_id=#{ENODEB_ID}
		group by cell_id, cell_name
		order by cell_id
	]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_ipran_station_export" description="IPRAN维度基站层级时延分析总导出表">
	<![CDATA[
		select cell_id, cell_name, time, mean_ms, bad_record_rate
		from
		(
			select cast(#{TIME} as string) time
				,cell_id
				,cell_name
				,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
			    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			    #{SERVICE_D_FILTER}
			    #{SERVICE_B_FILTER}
				and service_a='#{SERVICE_A}'
				and enodeb_id=#{ENODEB_ID}
			group by time, cell_id, cell_name
			union
			select '汇总' time
				,cell_id
				,cell_name
				,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
			    ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			    #{SERVICE_D_FILTER}
			    #{SERVICE_B_FILTER}
				and service_a='#{SERVICE_A}'
				and enodeb_id=#{ENODEB_ID}
			group by cell_id, cell_name
			) t
		order by cell_id, cell_name, time
	]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_ipran_timeDiagram" description="IPRAN维度各层级下的时间趋势图">
	<![CDATA[
		select #{TIME}
		      ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
		      ,round(sum(TCP_Ack_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 第三次握手时延占比均值（%）
		from noce.FRT_DPI_DELAY_IPRAN_H 
		where hour between #{START_HOUR} and #{END_HOUR}
		    and network=#{NETWORK}  --  1:eHRPD 4:LET
		    #{LATN_ID_FILTER}
			#{SERVICE_D_FILTER}
			#{SERVICE_B_FILTER}	
			#{SERVICE_A_FILTER}
			#{ENODEB_ID_FILTER}
			#{CELL_ID_FILTER}
		group by #{TIME}
		order by #{TIME}
	]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_ipran_delayDiagram" description="IPRAN维度各层级下的时延分布图">
	<![CDATA[
		select KQI_VALUE
		    ,round(test_num*100/test_num_all,2)  ratio -- 分布率
		from 
		(
		  select KQI_VALUE
		        ,sum(STAT_NUM) test_num -- 测试次数
		  from noce.FRT_DPI_STAT_IPRAN_H 
		  where hour between #{START_HOUR} and #{END_HOUR}
		        and network=#{NETWORK}  --  1:eHRPD 4:LET
		        and KQI_TYPE='#{KQI_TYPE}'  -- KQI_TYPE分别为： TCP_ACK_DL 、 WIRELESS_DT2
		        and KQI_VALUE<=4000
		        #{LATN_ID_FILTER}
				#{SERVICE_D_FILTER}
				#{SERVICE_B_FILTER}
				#{SERVICE_A_FILTER}
				#{ENODEB_ID_FILTER}
				#{CELL_ID_FILTER}
		  group by KQI_VALUE
		) a
		join
		(
		  select sum(STAT_NUM) test_num_all
		  from noce.FRT_DPI_STAT_IPRAN_H 
		  where hour between #{START_HOUR} and #{END_HOUR}
		        and network=#{NETWORK}  --  1:eHRPD 4:LET
		        and KQI_TYPE='#{KQI_TYPE}'  -- KQI_TYPE分别为： TCP_ACK_DL 、 WIRELESS_DT2
		        #{LATN_ID_FILTER}
				#{SERVICE_D_FILTER}
				#{SERVICE_B_FILTER}
				#{SERVICE_A_FILTER}
				#{ENODEB_ID_FILTER}
				#{CELL_ID_FILTER}
		) b
		order by KQI_VALUE
	]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_ipran_province_ack" description="IPRAN维度ACK与HTTP省层级时延分析表">
	<![CDATA[
		select city_name,mean_ms,bad_record_rate,bad_rate,test_num
			from noce.dim_tele_city d  -- 取维表进行左关联，保证所有地市均不缺失
			left outer join
			(
				select latn_id 		-- 地市ID
					,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
				    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
				    ,sum(TEST_NUM_ALL) test_num 	-- 测试记录数
				from noce.FRT_DPI_DELAY_IPRAN_H 
				where hour between #{START_HOUR} and #{END_HOUR} 
				    and network=#{NETWORK}  --  1:eHRPD 4:LET
				group by latn_id
				) a
			on d.city_id=a.latn_id
			left outer join
			(
				select latn_id
				    ,round(sum(case when bd_r>#{BD_R_VALUE} then 1 else 0 end)/count(latn_id)*100,2) bad_rate 	-- 质差设备占比
				from (
					select latn_id
					    ,service_d1
						,service_d2
					    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) bd_r 	-- 下级设备质差记录占比（%）
					from noce.FRT_DPI_DELAY_IPRAN_H 
					where hour between #{START_HOUR} and #{END_HOUR} 
					    and network=#{NETWORK}  --  1:eHRPD 4:LET
					group by latn_id, service_d1, service_d2) t
				group by latn_id
				) b
			on d.city_id=b.latn_id
			where city_id<>'1000'
			order by city_display_order
	]]>
</sqlTemplate>	

<sqlTemplate id="kqiAna_ipran_province_ack_export" description="IPRAN维度ACK与HTTP省层级时延分析总导出表">
	<![CDATA[
	select city_name --  地市（分公司）
      ,time --  时间，按天则为天，按小时则为小时
      ,mean_ms -- 第三次ACK与HTTP GET的时延均值（ms）
      ,bad_record_rate -- 质差记录占比（%）
	from 
	(
		select cast(#{TIME} as string) time,city_name,city_display_order
		    ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
		    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
		from noce.FRT_DPI_DELAY_IPRAN_H A
		join noce.dim_tele_city B  --  关联维表，取分公司名称
		on A.latn_id=B.city_id
		where hour between #{START_HOUR} and #{END_HOUR}
		    and network=#{NETWORK}  --  1:eHRPD 4:LET
		group by time,city_name,city_display_order
		union
		select '汇总' as time,city_name,city_display_order
		    ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
		    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
		from noce.FRT_DPI_DELAY_IPRAN_H A
		join noce.dim_tele_city B  --  关联维表，取分公司名称
		on A.latn_id=B.city_id
		where hour between #{START_HOUR} and #{END_HOUR}
		    and network=#{NETWORK}  --  1:eHRPD 4:LET
		group by city_name,city_display_order
		) t
	order by city_display_order, time
	]]>
</sqlTemplate>	

<sqlTemplate id="kqiAna_ipran_city_ack" description="IPRAN维度ACK与HTTP地市层级时延分析表">
	<![CDATA[
		select a.service_d, mean_ms, bad_record_rate, bad_rate, test_num
			from 
			(
				select case when concat(service_d1, ':', service_d2) is NULL then 'virtual_1:virtual_2' else concat(service_d1, ':', service_d2) end service_d
					,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
				    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
				    ,sum(TEST_NUM_ALL) test_num 	-- 测试记录数
				from noce.FRT_DPI_DELAY_IPRAN_H 
				where hour between #{START_HOUR} and #{END_HOUR}
				    and network=#{NETWORK}  --  1:eHRPD 4:LET
				    and latn_id='#{LATN_ID}'
				group by service_d
				) a
			join
			(
				select service_d
				    ,round(sum(case when bd_r>#{BD_R_VALUE} then 1 else 0 end)/count(service_d)*100,2) bad_rate 	-- 质差设备占比
				from (
					select case when concat(service_d1, ':', service_d2) is NULL then 'virtual_1:virtual_2' else concat(service_d1, ':', service_d2) end service_d
						,service_b1
						,service_b2
					    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) bd_r 	-- 下级设备质差记录占比（%）
					from noce.FRT_DPI_DELAY_IPRAN_H 
					where hour between #{START_HOUR} and #{END_HOUR}
					    and network=#{NETWORK}  --  1:eHRPD 4:LET
					    and latn_id='#{LATN_ID}'
					group by service_d, service_b1, service_b2) t
				group by service_d
				) b
			on a.service_d=b.service_d
			order by a.service_d
	]]>
</sqlTemplate>	

<sqlTemplate id="kqiAna_ipran_city_ack_export" description="IPRAN维度ACK与HTTP地市层级时延分析总导出表">
	<![CDATA[
		select service_d, time, mean_ms, bad_record_rate
		from
		(
			select cast(#{TIME} as string) time
				,case when concat(service_d1, ':', service_d2) is NULL then 'virtual_1:virtual_2' else concat(service_d1, ':', service_d2) end service_d
				,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
			    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			group by time, service_d
			union
			select '汇总' time
				,case when concat(service_d1, ':', service_d2) is NULL then 'virtual_1:virtual_2' else concat(service_d1, ':', service_d2) end service_d
				,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
			    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			group by service_d
			) t
		order by service_d, time
	]]>
</sqlTemplate>	

<sqlTemplate id="kqiAna_ipran_ack_d" description="IPRAN维度ACK与HTTP的D设备层级时延分析表">
	<![CDATA[
		select a.service_b, mean_ms, bad_record_rate, bad_rate, test_num
			from
			(
				select concat(service_b1, ':', service_b2) service_b
					,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
				    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
				    ,sum(TEST_NUM_ALL) test_num 	-- 测试记录数
				from noce.FRT_DPI_DELAY_IPRAN_H 
				where hour between #{START_HOUR} and #{END_HOUR}
				    and network=#{NETWORK}  --  1:eHRPD 4:LET
				    and latn_id='#{LATN_ID}'
				    #{SERVICE_D_FILTER}
				group by service_b
				) a
			join
			(
				select service_b
				    ,round(sum(case when bd_r>#{BD_R_VALUE} then 1 else 0 end)/count(service_b)*100,2) bad_rate 	-- 质差设备占比
				from (
					select concat(service_b1, ':', service_b2) service_b
						,service_a
					    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) bd_r 	-- 下级设备质差记录占比（%）
					from noce.FRT_DPI_DELAY_IPRAN_H 
					where hour between #{START_HOUR} and #{END_HOUR}
					    and network=#{NETWORK}  --  1:eHRPD 4:LET
					    and latn_id='#{LATN_ID}'
					    #{SERVICE_D_FILTER}
					group by service_b, service_a) t
				group by service_b
				) b
			on a.service_b=b.service_b
			order by a.service_b
	]]>
</sqlTemplate>	

<sqlTemplate id="kqiAna_ipran_ack_d_export" description="IPRAN维度ACK与HTTP的D设备层级时延分析总导出表">
	<![CDATA[
		select service_b, time, mean_ms, bad_record_rate
		from
		(
			select cast(#{TIME} as string) time
				,concat(service_b1, ':', service_b2) service_b
				,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
			    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			    #{SERVICE_D_FILTER}
			group by time, service_b
			union
			select '汇总' time
				,concat(service_b1, ':', service_b2) service_b
				,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
			    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			    #{SERVICE_D_FILTER}
			group by service_b
			) t
		order by service_b, time
	]]>
</sqlTemplate>	

<sqlTemplate id="kqiAna_ipran_ack_b" description="IPRAN维度ACK与HTTP的B设备层级时延分析表">
	<![CDATA[
		select a.service_a, mean_ms, bad_record_rate, bad_rate, test_num
			from
			(
				select service_a
					,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
				    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
				    ,sum(TEST_NUM_ALL) test_num 	-- 测试记录数
				from noce.FRT_DPI_DELAY_IPRAN_H 
				where hour between #{START_HOUR} and #{END_HOUR}
				    and network=#{NETWORK}  --  1:eHRPD 4:LET
				    and latn_id='#{LATN_ID}'
				    #{SERVICE_D_FILTER}
				    #{SERVICE_B_FILTER}
				group by service_a
				) a
			join
			(
				select service_a
				    ,round(sum(case when bd_r>#{BD_R_VALUE} then 1 else 0 end)/count(service_a)*100,2) bad_rate 	-- 质差设备占比
				from (
					select service_a
						,enodeb_id
					    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) bd_r 	-- 下级设备质差记录占比（%）
					from noce.FRT_DPI_DELAY_IPRAN_H 
					where hour between #{START_HOUR} and #{END_HOUR}
					    and network=#{NETWORK}  --  1:eHRPD 4:LET
					    and latn_id='#{LATN_ID}'
					    #{SERVICE_D_FILTER}
				    	#{SERVICE_B_FILTER}
					group by service_a, enodeb_id) t
				group by service_a
				) b
			on a.service_a=b.service_a
			order by a.service_a
	]]>
</sqlTemplate>	

<sqlTemplate id="kqiAna_ipran_ack_b_export" description="IPRAN维度ACK与HTTP的B设备层级时延分析总导出表">
	<![CDATA[
		select service_a, time, mean_ms, bad_record_rate
		from
		(
			select cast(#{TIME} as string) time
				,service_a
				,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
			    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			    #{SERVICE_D_FILTER}
			    #{SERVICE_B_FILTER}
			group by time, service_a
			union
			select '汇总' time
				,service_a
				,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
			    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			    #{SERVICE_D_FILTER}
			    #{SERVICE_B_FILTER}
			group by service_a
			) t
		order by service_a, time
	]]>
</sqlTemplate>	

<sqlTemplate id="kqiAna_ipran_ack_a" description="IPRAN维度ACK与HTTP的A设备层级时延分析表">
	<![CDATA[
		select a.enodebname, mean_ms, bad_record_rate, bad_rate, test_num,a.enodeb_id
			from
			(
				select enodeb_id
					,enodebname
					,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
				    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
				    ,sum(TEST_NUM_ALL) test_num 	-- 测试记录数
				from noce.FRT_DPI_DELAY_IPRAN_H 
				where hour between #{START_HOUR} and #{END_HOUR}
				    and network=#{NETWORK}  --  1:eHRPD 4:LET
				    and latn_id='#{LATN_ID}'
				    #{SERVICE_D_FILTER}
				    #{SERVICE_B_FILTER}
					and service_a='#{SERVICE_A}'
				group by enodeb_id, enodebname
				) a
			join
			(
				select enodeb_id
					,enodebname
				    ,round(sum(case when bd_r>#{BD_R_VALUE} then 1 else 0 end)/count(enodeb_id)*100,2) bad_rate 	-- 质差设备占比
				from (
					select enodeb_id
						,enodebname
						,cell_id
					    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) bd_r 	-- 下级设备质差记录占比（%）
					from noce.FRT_DPI_DELAY_IPRAN_H 
					where hour between #{START_HOUR} and #{END_HOUR}
					    and network=#{NETWORK}  --  1:eHRPD 4:LET
					    and latn_id='#{LATN_ID}'
					    #{SERVICE_D_FILTER}
				    	#{SERVICE_B_FILTER}
						and service_a='#{SERVICE_A}'
					group by enodeb_id, enodebname, cell_id) t
				group by enodeb_id, enodebname
				) b
			on a.enodeb_id=b.enodeb_id and a.enodebname=b.enodebname
			order by a.enodeb_id
	]]>
</sqlTemplate>	

<sqlTemplate id="kqiAna_ipran_ack_a_export" description="IPRAN维度ACK与HTTP的A设备层级时延分析总导出表">
	<![CDATA[
		select enodeb_id, enodebname, time, mean_ms, bad_record_rate
		from
		(
			select cast(#{TIME} as string) time
				,enodeb_id
				,enodebname
				,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
			    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			    #{SERVICE_D_FILTER}
			    #{SERVICE_B_FILTER}
				and service_a='#{SERVICE_A}'
			group by time, enodeb_id, enodebname
			union
			select '汇总' time
				,enodeb_id
				,enodebname
				,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
			    ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			from noce.FRT_DPI_DELAY_IPRAN_H 
			where hour between #{START_HOUR} and #{END_HOUR}
			    and network=#{NETWORK}  --  1:eHRPD 4:LET
			    and latn_id='#{LATN_ID}'
			    #{SERVICE_D_FILTER}
			    #{SERVICE_B_FILTER}
				and service_a='#{SERVICE_A}'
			group by enodeb_id, enodebname
			) t
		order by enodeb_id, enodebname, time
	]]>
</sqlTemplate>	

<sqlTemplate id="kqiAna_ipran_ack_station" description="IPRAN维度ACK与HTTP的基站层级时延分析表">
	<![CDATA[
		select cell_id
			,cell_name
			,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
			,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			,sum(TEST_NUM_ALL) test_num 	-- 测试记录数
		from noce.FRT_DPI_DELAY_IPRAN_H 
		where hour between #{START_HOUR} and #{END_HOUR}
			and network=#{NETWORK}  --  1:eHRPD 4:LET
			and latn_id='#{LATN_ID}'
			#{SERVICE_D_FILTER}
			#{SERVICE_B_FILTER}
			and service_a='#{SERVICE_A}'
			and enodeb_id=#{ENODEB_ID}
		group by cell_id, cell_name
		order by cell_id
	]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_ipran_ack_station_export" description="IPRAN维度ACK与HTTP的基站层级时延分析总导出表">
	<![CDATA[
		select cell_id
			,cell_name
			,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
			,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 质差记录占比（%）
			,sum(TEST_NUM_ALL) test_num 	-- 测试记录数
		from noce.FRT_DPI_DELAY_IPRAN_H 
		where hour between #{START_HOUR} and #{END_HOUR}
			and network=#{NETWORK}  --  1:eHRPD 4:LET
			and latn_id='#{LATN_ID}'
			#{SERVICE_D_FILTER}
			#{SERVICE_B_FILTER}
			and service_a='#{SERVICE_A}'
			and enodeb_id=#{ENODEB_ID}
		group by cell_id, cell_name
		order by cell_id
	]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_ipran_ack_timeDiagram" description="IPRAN维度ACK与HTTP各层级下的时间趋势图">
	<![CDATA[
		select #{TIME}
		      ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
		      ,round(sum(WIRELESS_DT2_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 第三次ACK与HTTP GET的时延占比均值（%）
		from noce.FRT_DPI_DELAY_IPRAN_H 
		where hour between #{START_HOUR} and #{END_HOUR}
		    and network=#{NETWORK}  --  1:eHRPD 4:LET
		    #{LATN_ID_FILTER}
			#{SERVICE_D_FILTER}
			#{SERVICE_B_FILTER}	
			#{SERVICE_A_FILTER}
			#{ENODEB_ID_FILTER}
			#{CELL_ID_FILTER}
		group by #{TIME}
		order by #{TIME}
	]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_ipran_ack_delayDiagram" description="IPRAN维度ACK与HTTP各层级下的时延分布图">
	<![CDATA[
		select KQI_VALUE,
		round(test_num*100/test_num_all,2)  ratio -- 分布率
		from 
		(
		  select KQI_VALUE
		        ,sum(STAT_NUM) test_num -- 测试次数
		  from noce.FRT_DPI_STAT_IPRAN_H 
		  where hour between #{START_HOUR} and #{END_HOUR}
		        and network=#{NETWORK}  --  1:eHRPD 4:LET
		        and KQI_TYPE='#{KQI_TYPE}'  -- KQI_TYPE分别为： TCP_ACK_DL 、 WIRELESS_DT2
		        and KQI_VALUE<=4000
		        #{LATN_ID_FILTER}
				#{SERVICE_D_FILTER}
				#{SERVICE_B_FILTER}
				#{SERVICE_A_FILTER}
				#{ENODEB_ID_FILTER}
				#{CELL_ID_FILTER}
		  group by KQI_VALUE
		) a
		join
		(
		  select sum(STAT_NUM) test_num_all
		  from noce.FRT_DPI_STAT_IPRAN_H 
		  where hour between #{START_HOUR} and #{END_HOUR}
		        and network=#{NETWORK}  --  1:eHRPD 4:LET
		        and KQI_TYPE='#{KQI_TYPE}'  -- KQI_TYPE分别为： TCP_ACK_DL 、 WIRELESS_DT2
		        #{LATN_ID_FILTER}
				#{SERVICE_D_FILTER}
				#{SERVICE_B_FILTER}
				#{SERVICE_A_FILTER}
				#{ENODEB_ID_FILTER}
				#{CELL_ID_FILTER}
		) b
		order by KQI_VALUE
	]]>
</sqlTemplate>
	
<sqlTemplate id="kqiAna_yf_province" description="">
<![CDATA[
select city_name,mean_ms,bad_record_rate,bad_rate,test_num
from noce.dim_tele_city d  -- 取维表进行左关联，保证所有地市均不缺失
left outer join
( --  计算除质差营服中心占比外的其他指标
  select latn_id
        ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次握手时延均值（ms）
        ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
        ,sum(TEST_NUM_ALL)  as test_num-- 测试记录数
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
  group by latn_id
) a
on cast(d.city_id as int)=a.latn_id
left outer join
( -- 计算质差营服中心占比
  select latn_id  
         -- 质差营服中心占比，#{THRESHOLD}变量暂取值为0.2，下同
         ,round(sum(case when bd_r>#{THRESHOLD} then 1 else 0 end)/count(latn_id)*100,2) bad_rate
  from 
  ( -- 计算各营服中心的质差记录占比      
    select latn_id
          ,marketbase --  营服中心
          ,sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL) bd_r-- 质差记录占比（%）
    from noce.FRT_DPI_DELAY_MB_H 
    where hour between #{START_HOUR} and #{END_HOUR}
          and network=#{NETWORK}  --  1:eHRPD 4:LET
    group by latn_id,marketbase
    ) t
  group by latn_id
)b
on cast(d.city_id as int)=b.latn_id
where city_id<>'1000'
order by city_display_order
]]>
</sqlTemplate>


<sqlTemplate id="kqiAna_yf_city" description="">
<![CDATA[
select a.marketbase,mean_ms,bad_record_rate,bad_rate,test_num
from 
( --  计算除质差营服中心占比外的其他指标
  select marketbase
        ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次握手时延均值（ms）
        ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
        ,sum(TEST_NUM_ALL)  as test_num-- 测试记录数
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase is not null -- 滤除营服中心名称为空的记录
  group by marketbase
) a
join
( -- 计算质差基站占比
  select marketbase
         ,round(sum(case when bd_r>#{THRESHOLD} then 1 else 0 end)/count(marketbase)*100,2) bad_rate-- 质差营服中心占比
  from 
  ( -- 计算各基站的质差记录占比      
    select marketbase --  营服中心
          ,eNodeBName --  基站名称
          ,sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL) bd_r-- 质差记录占比（%）
    from noce.FRT_DPI_DELAY_MB_H 
    where hour between #{START_HOUR} and #{END_HOUR}
          and network=#{NETWORK}  --  1:eHRPD 4:LET
          and latn_id=#{LATN_ID}
          and marketbase is not null -- 滤除营服中心名称为空的记录
    group by marketbase,eNodeBName
    ) t
  group by marketbase
)b
on a.marketbase=b.marketbase
order by marketbase

]]>
</sqlTemplate>
<sqlTemplate id="kqiAna_yf_yf" description="">
<![CDATA[
select a.eNodeBName,mean_ms,bad_record_rate,bad_rate,test_num
from 
( --  计算除质差小区占比外的其他指标
  select eNodeBName
        ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次握手时延均值（ms）
        ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
        ,sum(TEST_NUM_ALL)  as test_num-- 测试记录数
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase='#{MARKETBASE}' 
  group by eNodeBName
) a
join
( -- 计算质差小区占比
  select eNodeBName
         ,round(sum(case when bd_r>#{THRESHOLD} then 1 else 0 end)/count(eNodeBName)*100,2) bad_rate-- 质差营服中心占比
  from 
  ( -- 计算各小区的质差记录占比      
    select eNodeBName --  基站名称
          ,cell_id --  小区名称
          ,sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL) bd_r-- 质差记录占比（%）
    from noce.FRT_DPI_DELAY_MB_H 
    where hour between #{START_HOUR} and #{END_HOUR}
          and network=#{NETWORK}  --  1:eHRPD 4:LET
          and latn_id=#{LATN_ID}
          and marketbase='#{MARKETBASE}' 
    group by eNodeBName,cell_id
    ) t
  group by eNodeBName
)b
on a.eNodeBName=b.eNodeBName
order by eNodeBName

]]>
</sqlTemplate>
<sqlTemplate id="kqiAna_yf_jz" description="基站和小区">
<![CDATA[
  select cell_name
        ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次握手时延均值（ms）
        ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
        ,sum(TEST_NUM_ALL)  as test_num-- 测试记录数
        ,cell_id
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase='#{MARKETBASE}' 
        and eNodeBName='#{ENODEBNAME}'
  group by cell_name,cell_id
  order by cell_name
]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_yf_province_2" description="第三次ACK与HTTP GET 省统计表">
<![CDATA[

	select city_name,mean_ms,bad_record_rate,bad_rate,test_num
from noce.dim_tele_city d  -- 取维表进行左关联，保证所有地市均不缺失
left outer join
( --  计算除质差营服中心占比外的其他指标
  select latn_id
        ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次ACK与HTTP GET的时延均值（ms）
        ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
        ,sum(TEST_NUM_ALL)  as test_num-- 测试记录数
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
  group by latn_id
) a
on cast(d.city_id as int)=a.latn_id
left outer join
( -- 计算质差营服中心占比
  select latn_id  
         -- 质差营服中心占比，#{THRESHOLD}变量暂取值为0.2，下同
         ,round(sum(case when bd_r>#{THRESHOLD} then 1 else 0 end)/count(latn_id)*100,2) bad_rate
  from 
  ( -- 计算各营服中心的质差记录占比      
    select latn_id
          ,marketbase --  营服中心
          ,sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL) bd_r-- 质差记录占比（%）
    from noce.FRT_DPI_DELAY_MB_H 
    where hour between #{START_HOUR} and #{END_HOUR}
          and network=#{NETWORK}  --  1:eHRPD 4:LET
    group by latn_id,marketbase
    ) t
  group by latn_id
)b
on cast(d.city_id as int)=b.latn_id
where city_id<>'1000'
order by city_display_order
	

]]>
</sqlTemplate>
<sqlTemplate id="kqiAna_yf_city_2" description="第三次ACK与HTTP GET 地市统计表">
<![CDATA[

	select a.marketbase,mean_ms,bad_record_rate,bad_rate,test_num
from 
( --  计算除质差营服中心占比外的其他指标
  select marketbase
        ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次ACK与HTTP GET的时延均值（ms）
        ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
        ,sum(TEST_NUM_ALL)  as test_num-- 测试记录数
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase is not null -- 滤除营服中心名称为空的记录
  group by marketbase
) a
join
( -- 计算质差基站占比
  select marketbase
         ,round(sum(case when bd_r>#{THRESHOLD} then 1 else 0 end)/count(marketbase)*100,2) bad_rate-- 质差营服中心占比
  from 
  ( -- 计算各基站的质差记录占比      
    select marketbase --  营服中心
          ,eNodeBName --  基站名称
          ,sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL) bd_r-- 质差记录占比（%）
    from noce.FRT_DPI_DELAY_MB_H 
    where hour between #{START_HOUR} and #{END_HOUR}
          and network=#{NETWORK}  --  1:eHRPD 4:LET
          and latn_id=#{LATN_ID}
          and marketbase is not null -- 滤除营服中心名称为空的记录
    group by marketbase,eNodeBName
    ) t
  group by marketbase
)b
on a.marketbase=b.marketbase
order by marketbase
	

]]>
</sqlTemplate>
<sqlTemplate id="kqiAna_yf_yf_2" description="第三次ACK与HTTP GET 营服统计表">
<![CDATA[

	select a.eNodeBName,mean_ms,bad_record_rate,bad_rate,test_num
from 
( --  计算除质差小区占比外的其他指标
  select eNodeBName
        ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次ACK与HTTP GET的时延均值（ms）
        ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
        ,sum(TEST_NUM_ALL)  as test_num-- 测试记录数
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase='#{MARKETBASE}' 
  group by eNodeBName
) a
join
( -- 计算质差小区占比
  select eNodeBName
         ,round(sum(case when bd_r>#{THRESHOLD} then 1 else 0 end)/count(eNodeBName)*100,2) bad_rate-- 质差营服中心占比
  from 
  ( -- 计算各小区的质差记录占比      
    select eNodeBName --  基站名称
          ,cell_name --  小区名称
          ,sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL) bd_r-- 质差记录占比（%）
    from noce.FRT_DPI_DELAY_MB_H 
    where hour between #{START_HOUR} and #{END_HOUR}
          and network=#{NETWORK}  --  1:eHRPD 4:LET
          and latn_id=#{LATN_ID}
          and marketbase='#{MARKETBASE}' 
    group by eNodeBName,cell_name
    ) t
  group by eNodeBName
)b
on a.eNodeBName=b.eNodeBName
order by eNodeBName
	

]]>
</sqlTemplate>
<sqlTemplate id="kqiAna_yf_jz_2" description="第三次ACK与HTTP GET 基站和小区统计表">
<![CDATA[

	  select cell_name
        ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次ACK与HTTP GET的时延均值（ms）
        ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
        ,sum(TEST_NUM_ALL)  as test_num-- 测试记录数
        ,cell_id
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase='#{MARKETBASE}' 
        and eNodeBName='#{ENODEBNAME}'
  group by cell_name,cell_id
  order by cell_name
	

]]>
</sqlTemplate>










	
<sqlTemplate id="kqiAna_yf_export_province" description="">
<![CDATA[
select city_name --  地市（分公司）
      ,time --  时间，按天则为天，按小时则为小时
      ,mean_ms -- 第三次握手时延均值（ms）
      ,bad_record_rate -- 质差记录占比（%）
from
( -- 计算各分公司的指标
  select cast(#{TIME} as string) as time,city_name,city_display_order --  按天则#{TIME}为floor(hour/100)；按小时则为hour
        ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次握手时延均值（ms）
        ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
  from noce.FRT_DPI_DELAY_MB_H A
  join noce.dim_tele_city B  --  关联维表，取分公司名称
  on A.latn_id=cast(B.city_id as int)
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
  group by time,city_name,city_display_order
  union all -- 计算汇总的指标
  select '汇总' as time,city_name,city_display_order
        ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次握手时延均值（ms）
        ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
  from noce.FRT_DPI_DELAY_MB_H A
  join noce.dim_tele_city B  --  关联维表，取分公司名称
  on A.latn_id=cast(B.city_id as int)
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
  group by city_name,city_display_order
  ) t
order by city_display_order,time
]]>
</sqlTemplate>


<sqlTemplate id="kqiAna_yf_export_city" description="">
<![CDATA[
select marketbase --  地市（分公司）
      ,time --  时间，按天则为天，按小时则为小时
      ,mean_ms -- 第三次握手时延均值（ms）
      ,bad_record_rate -- 质差记录占比（%）
from
( -- 计算各营服中心的指标
  select cast(#{TIME} as string) as time,marketbase --  按天则#{TIME}为floor(hour/100)；按小时则为hour
        ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次握手时延均值（ms）
        ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase is not null -- 滤除营服中心名称为空的记录
        and trim(marketbase)<>''
  group by time,marketbase
  union all -- 计算汇总的指标
  select '汇总' as time,marketbase
        ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次握手时延均值（ms）
        ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase is not null -- 滤除营服中心名称为空的记录
        and trim(marketbase)<>''
  group by marketbase
  ) t
order by marketbase,time

]]>
</sqlTemplate>


<sqlTemplate id="kqiAna_yf_export_markbase" description="">
<![CDATA[
select eNodeBName --  地市（分公司）
      ,time --  时间，按天则为天，按小时则为小时
      ,mean_ms -- 第三次握手时延均值（ms）
      ,bad_record_rate -- 质差记录占比（%）
from
( -- 计算各基站的指标
  select cast(#{TIME} as string) as time,eNodeBName  --  按天则#{TIME}为floor(hour/100)；按小时则为hour
        ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次握手时延均值（ms）
        ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase='#{MARKETBASE}'
  group by time,eNodeBName
  union all -- 计算汇总的指标
  select '汇总' as time,eNodeBName
        ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次握手时延均值（ms）
        ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase='#{MARKETBASE}'
  group by eNodeBName
  ) t
order by eNodeBName,time

]]>
</sqlTemplate>
<sqlTemplate id="kqiAna_yf_export_jz" description="">
<![CDATA[
select cell_name --  地市（分公司）
      ,time --  时间，按天则为天，按小时则为小时
      ,mean_ms -- 第三次握手时延均值（ms）
      ,bad_record_rate -- 质差记录占比（%）
from
( -- 计算各基站的指标
  select cast(#{TIME} as string) as time,cell_name  --  按天则#{TIME}为floor(hour/100)；按小时则为hour
        ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次握手时延均值（ms）
        ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase='#{MARKETBASE}'
        and eNodeBName='#{ENODEBNAME}'
  group by time,cell_name
  union all -- 计算汇总的指标
  select '汇总' as time,cell_name
        ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次握手时延均值（ms）
        ,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase='#{MARKETBASE}'
        and eNodeBName='#{ENODEBNAME}'
  group by cell_name
  ) t
order by cell_name,time

]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_yf_export_province_2" description="第三次ACK与HTTP GET的省导出">
<![CDATA[

	select city_name --  地市（分公司）
      ,time --  时间，按天则为天，按小时则为小时
      ,mean_ms -- 第三次ACK与HTTP GET的时延均值（ms）
      ,bad_record_rate -- 质差记录占比（%）
from
( -- 计算各分公司的指标
  select cast(#{TIME} as string) as time,city_name,city_display_order --  按天则#{TIME}为floor(hour/100)；按小时则为hour
        ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次ACK与HTTP GET的时延均值（ms）
        ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
  from noce.FRT_DPI_DELAY_MB_H A
  join noce.dim_tele_city B  --  关联维表，取分公司名称
  on A.latn_id=cast(B.city_id as int)
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
  group by time,city_name,city_display_order
  union all -- 计算汇总的指标
  select '汇总' as time,city_name,city_display_order
        ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次ACK与HTTP GET的时延均值（ms）
        ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
  from noce.FRT_DPI_DELAY_MB_H A
  join noce.dim_tele_city B  --  关联维表，取分公司名称
  on A.latn_id=cast(B.city_id as int)
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
  group by city_name,city_display_order
  ) t
order by city_display_order,time
	

]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_yf_export_city_2" description="第三次ACK与HTTP GET的地市导出">
<![CDATA[

	select marketbase --  地市（分公司）
      ,time --  时间，按天则为天，按小时则为小时
      ,mean_ms -- 第三次ACK与HTTP GET的时延均值（ms）
      ,bad_record_rate -- 质差记录占比（%）
from
( -- 计算各营服中心的指标
  select cast(#{TIME} as string) as time,marketbase --  按天则#{TIME}为floor(hour/100)；按小时则为hour
        ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次ACK与HTTP GET的时延均值（ms）
        ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase is not null -- 滤除营服中心名称为空的记录
        and trim(marketbase)<>''
  group by time,marketbase
  union all -- 计算汇总的指标
  select '汇总' as time,marketbase
        ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次ACK与HTTP GET的时延均值（ms）
        ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase is not null -- 滤除营服中心名称为空的记录
        and trim(marketbase)<>''
  group by marketbase
  ) t
order by marketbase,time
	

]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_yf_export_markbase_2" description="第三次ACK与HTTP GET的营服导出">
<![CDATA[

	select eNodeBName --  地市（分公司）
      ,time --  时间，按天则为天，按小时则为小时
      ,mean_ms -- 第三次ACK与HTTP GET的时延均值（ms）
      ,bad_record_rate -- 质差记录占比（%）
from
( -- 计算各基站的指标
  select cast(#{TIME} as string) as time,eNodeBName  --  按天则#{TIME}为floor(hour/100)；按小时则为hour
        ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次ACK与HTTP GET的时延均值（ms）
        ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase='#{MARKETBASE}'
  group by time,eNodeBName
  union all -- 计算汇总的指标
  select '汇总' as time,eNodeBName
        ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次ACK与HTTP GET的时延均值（ms）
        ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase='#{MARKETBASE}'
  group by eNodeBName
  ) t
order by eNodeBName,time
	

]]>
</sqlTemplate>

<sqlTemplate id="kqiAna_yf_export_jz_2" description="第三次ACK与HTTP GET的基站导出">
<![CDATA[

	select cell_name --  地市（分公司）
      ,time --  时间，按天则为天，按小时则为小时
      ,mean_ms -- 第三次ACK与HTTP GET的时延均值（ms）
      ,bad_record_rate -- 质差记录占比（%）
from
( -- 计算各基站的指标
  select cast(#{TIME} as string) as time,cell_name  --  按天则#{TIME}为floor(hour/100)；按小时则为hour
        ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次ACK与HTTP GET的时延均值（ms）
        ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase='#{MARKETBASE}'
        and eNodeBName='#{ENODEBNAME}'
  group by time,cell_name
  union all -- 计算汇总的指标
  select '汇总' as time,cell_name
        ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次ACK与HTTP GET的时延均值（ms）
        ,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 质差记录占比（%）
  from noce.FRT_DPI_DELAY_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network=#{NETWORK}  --  1:eHRPD 4:LET
        and latn_id=#{LATN_ID}
        and marketbase='#{MARKETBASE}'
        and eNodeBName='#{ENODEBNAME}'
  group by cell_name
  ) t
order by cell_name,time
	

]]>
</sqlTemplate>











<sqlTemplate id="kqiAna_yf_trade" description="">
<![CDATA[
select  #{TIME}  --  时间粒度：小时则取值为hour，天则取值为floor(hour/100)
      ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次握手时延均值（ms）
      ,round(sum(TCP_Ack_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 第三次握手时延占比均值（%）
from noce.FRT_DPI_DELAY_MB_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LET
      and latn_id=#{LATN_ID} --  地市限制条件，如： 200
      #{MARKETBASE_FILTER}  --  营服中心条件，如 ：and marketbase='棠下'（注：当查看的是营服中心及更细粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
      #{ENODEBNAME_FILTER} --  基站条件，如 ：and eNodeBName='FT华景正门基站LTE-RRU01'（注：当查看的是基站及更细粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
      #{CELL_ID_FILTER} --  小区条件，如 ：and cell_id=98（注：当查看的是小区粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
group by  #{TIME}
order by  #{TIME}

]]>
</sqlTemplate>


<sqlTemplate id="kqiAna_yf_distrib" description="">
<![CDATA[

select KQI_VALUE
       ,round(test_num*100/test_num_all,2)  ratio -- 分布率
from 
(
  select KQI_VALUE
         , sum(STAT_NUM) test_num -- 测试次数
  from noce.FRT_DPI_STAT_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LET
        and KQI_TYPE='TCP_ACK_DL'  -- KQI_TYPE分别为： TCP_ACK_DL 、 WIRELESS_DT2
        and KQI_VALUE<=4000
        and latn_id=#{LATN_ID} --  地市限制条件，如： 200
        #{MARKETBASE_FILTER}  --  营服中心条件，如 ：and marketbase='棠下'（注：当查看的是营服中心及更细粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
        #{ENODEBNAME_FILTER} --  基站条件，如 ：and eNodeBName='FT华景正门基站LTE-RRU01'（注：当查看的是基站及更细粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
        #{CELL_ID_FILTER} --  小区条件，如 ：and cell_id=98（注：当查看的是小区粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
  group by KQI_VALUE
) a
join
(
  select sum(STAT_NUM) test_num_all
  from noce.FRT_DPI_STAT_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LET
        and KQI_TYPE='TCP_ACK_DL'  -- KQI_TYPE分别为： TCP_ACK_DL 、 WIRELESS_DT2
        and latn_id=#{LATN_ID} --  地市限制条件，如： 200
        #{MARKETBASE_FILTER}  --  营服中心条件，如 ：and marketbase='棠下'（注：当查看的是营服中心及更细粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
        #{ENODEBNAME_FILTER} --  基站条件，如 ：and eNodeBName='FT华景正门基站LTE-RRU01'（注：当查看的是基站及更细粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
        #{CELL_ID_FILTER} --  小区条件，如 ：and cell_id=98（注：当查看的是小区粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
) b
order by KQI_VALUE

]]>
</sqlTemplate>


<sqlTemplate id="kqiAna_yf_trade_2" description="第三次ACK与HTTP GET的趋势图">

<![CDATA[

	select  #{TIME}  --  时间粒度：小时则取值为hour，天则取值为floor(hour/100)
      ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) as mean_ms-- 第三次ACK与HTTP GET的时延均值（ms）
      ,round(sum(WIRELESS_DT2_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) as bad_record_rate-- 第三次握手时延占比均值（%）
from noce.FRT_DPI_DELAY_MB_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LET
      and latn_id=#{LATN_ID} --  地市限制条件，如： 200
      #{MARKETBASE_FILTER}  --  营服中心条件，如 ：and marketbase='棠下'（注：当查看的是营服中心及更细粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
      #{ENODEBNAME_FILTER} --  基站条件，如 ：and eNodeBName='FT华景正门基站LTE-RRU01'（注：当查看的是基站及更细粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
      #{CELL_ID_FILTER} --  小区条件，如 ：and cell_id=98（注：当查看的是小区粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
group by  #{TIME}
order by  #{TIME}
	

]]>
</sqlTemplate>


<sqlTemplate id="kqiAna_yf_distrib_2" description="第三次ACK与HTTP GET的分布图">

<![CDATA[

	select KQI_VALUE
       ,round(test_num*100/test_num_all,2)  ratio -- 分布率
from 
(
  select KQI_VALUE
         , sum(STAT_NUM) test_num -- 测试次数
  from noce.FRT_DPI_STAT_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LET
        and KQI_TYPE='WIRELESS_DT2'  -- KQI_TYPE分别为： TCP_ACK_DL 、 WIRELESS_DT2
        and KQI_VALUE<=4000
        and latn_id=#{LATN_ID} --  地市限制条件，如： 200
        #{MARKETBASE_FILTER}  --  营服中心条件，如 ：and marketbase='棠下'（注：当查看的是营服中心及更细粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
        #{ENODEBNAME_FILTER} --  基站条件，如 ：and eNodeBName='FT华景正门基站LTE-RRU01'（注：当查看的是基站及更细粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
        #{CELL_ID_FILTER} --  小区条件，如 ：and cell_id=98（注：当查看的是小区粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
  group by KQI_VALUE
) a
join
(
  select sum(STAT_NUM) test_num_all
  from noce.FRT_DPI_STAT_MB_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LET
        and KQI_TYPE='WIRELESS_DT2'  -- KQI_TYPE分别为： TCP_ACK_DL 、 WIRELESS_DT2
        and latn_id=#{LATN_ID} --  地市限制条件，如： 200
        #{MARKETBASE_FILTER}  --  营服中心条件，如 ：and marketbase='棠下'（注：当查看的是营服中心及更细粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
        #{ENODEBNAME_FILTER} --  基站条件，如 ：and eNodeBName='FT华景正门基站LTE-RRU01'（注：当查看的是基站及更细粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
        #{CELL_ID_FILTER} --  小区条件，如 ：and cell_id=98（注：当查看的是小区粒度的数据时，才需设置此条件；其他情况下均置为空串即可。)
) b
order by KQI_VALUE
		

]]>
</sqlTemplate>






<sqlTemplate id="FormQuery_sql" description="详细表单查询">
<![CDATA[

select URI --  URL
      ,UE_IP --  源IP
      ,SERVER_IP --  目的IP
      ,CELL_ID --  接入小区ID
      ,CONCAT(SERVICE_B1,":",SERVICE_B2) --  接入的IPRAN的B设备ID
      ,CONCAT(SERVICE_D1,":",SERVICE_D2) --  接入的IPRAN的D设备ID
      ,BELONG_CITY --  接入的地市
      ,SPGW_NAME --  接入的UGW设备
      ,SGW_IP --  接入的UGW板卡
      ,TCP_SynAck_DL --  1：Tcp第二次握手时延
      ,TCP_Ack_DL --  2：第三次握手时延
      ,WIRELESS_DT2 --  3：第三次ACK与HTTP GET的时延
      ,HTTP_DELAY --  4：首GET响应时延
      ,FIN_DELAY --  5：200 ok到FIN时延
      ,TCP_DELAY+WIRELESS_DT2+HTTP_DELAY --  6：首包总时延
      ,TCP_DELAY+WIRELESS_DT2+HTTP_DELAY+FIN_DELAY --  7：首页总时延
from noce.AGG_EVT_LTE_DPI F
join (select * from noce.DIM_IPRAN_DATA where day=#{DAY}) D  
on F.BASE_STATN_ID=D.eNodeB_ID
where HOUR=#{HOUR}
and #{CODENAME}='#{CODEVALUE}' -- 注意：MDN时电话号码前要带上86前缀
order by EVT_DATETIME desc


]]>

</sqlTemplate>






<sqlTemplate id="buildinggroupDsp_center" description="棂群显示组件：查询出所给定楼群的中心点">
<![CDATA[
select (baidu_maxlatitude+baidu_minlatitude)/2 as lat
      ,(baidu_max_longitude+baidu_min_longitude)/2 as lon
from noce.dim_buildinggroup_gis_data
where buildinggroup_id='#{BUILDINGGROUP_ID}'
]]>
</sqlTemplate>

<sqlTemplate id="buildinggroupDsp_all" description="棂群显示组件：查询出所给定楼群及其周边楼群的所有信息">
<![CDATA[
select a.buildinggroup_id,
	b.buildinggroup_name,
	a.building_city,
	b.buildinggrou_area,
	gis_data_baidu,baidu_max_longitude,baidu_min_longitude,baidu_maxlatitude,baidu_minlatitude,addr_name,
	case sum(WEBPAGE_FIRST_ALL)  when 0 then 0 else round((1-sum(WEBPAGE_FIRST_PKG_DELAY_BAD)/sum(WEBPAGE_FIRST_ALL))*100,2) end '首包时延优良率（%）',
	case sum(WEBPAGE_OPEN_ALL)  when 0 then 0 else round((1- sum(WEBPAGE_OPEN_DELAY_BAD) / sum(WEBPAGE_OPEN_ALL))*100,2) end '首页时延优良率（%）',
	case sum(VIDIO_ALL)  when 0 then 0 else round((1- sum(VIDIO_DOWNLOAD_RATE_BAD) / sum(VIDIO_ALL))*100,2) end '视频下载优良率（%）',
	case sum(WEBPAGE_FIRST_ALL)  when 0 then 0 else round(sum(WEBPAGE_FIRST_PKG_DELAY_TOT)/sum(WEBPAGE_FIRST_ALL),2) end '首包时延均值（ms）',
	case sum(WEBPAGE_OPEN_ALL)  when 0 then 0 else round(sum(WEBPAGE_OPEN_DELAY_TOT) / sum(WEBPAGE_OPEN_ALL),2) end '首页时延均值（ms）',
	case sum(VIDIO_ALL)  when 0 then 0 else round(sum(VIDIO_DOWNLOAD_RATE_TOT) / sum(VIDIO_ALL),2) end '视频下载速率均值（kbps）',
	max(a.user_num) '小时峰值用户数（人）',
	round(max(a.user_num)/b.buildinggrou_area*10000,2) '小时峰值用户密度（人/hm^2）',
	round(sum(a.size_all_TOT)/(1024*1024),2) '总流量（MB）',
	round(sum(a.size_all_TOT)/(1024*1024*#{TIME_DELTA}),2) '日均流量（MB）',	-- #{TIME_DELTA}=n，即开始小时到结束小时所涉及的天数
	round(sum(a.size_all_TOT)/(1024*1024*#{TIME_DELTA}*b.buildinggrou_area)*10000,2) '日均流量密度（MB/hm^2）',	-- #{TIME_DELTA}=n
	round(max(a.size_all_TOT)/(1024*1024),2) '小时峰值流量（MB）',
	round(max(a.size_all_TOT)/(1024*1024*b.buildinggrou_area)*10000,2) '小时峰值流量密度（MB/hm^2）'
from (
	select * from noce.FRT_BLDG_4GFLOW_H
	where hour between #{START_HOUR} and #{END_HOUR} -- 开始小时和结束小时 
	) a
join
	(
	select * from NOCE.DIM_BUILDINGGROUP_GIS_DATA 
	where buildinggrou_area>0
              and abs((baidu_maxlatitude+baidu_minlatitude)/2-#{LAT})<0.004903522 --  #{LAT}是指定楼群对应的中心点纬度
              and abs((baidu_max_longitude+baidu_min_longitude)/2-#{LON})<0.015360585 --  #{LON}是指定楼群对应的中心点经度
	) b
on a.buildinggroup_id=b.buildinggroup_id
group by a.buildinggroup_id, b.buildinggroup_name, b.buildinggrou_area, a.building_city,gis_data_baidu,baidu_max_longitude,baidu_min_longitude,baidu_maxlatitude,baidu_minlatitude,addr_name
order by a.buildinggroup_id, b.buildinggroup_name
]]>
</sqlTemplate>

<sqlTemplate id="CloudMap_02_district_center" description="查询某一天的区县列表">
<![CDATA[
select city
      ,district
      ,max(baidu_lon_max) as max_long
      ,max(baidu_lat_max) as max_lat
      ,min(baidu_lon_min) as min_long
      ,min(baidu_lat_min) as min_lat
      ,(max(baidu_lon_max)+min(baidu_lon_min))/2 as cen_long
      ,(max(baidu_lat_max)+min(baidu_lat_min))/2 as cen_lat
from noce.AGG_MKBASE_RSRP_CLOUD
where day=#{MAXDAY} and district is not null
group by city,district order by city;
]]>
</sqlTemplate>

<sqlTemplate id="CloudMap_01_marketbase_center" description="查询某一天的营服中心列表">
<![CDATA[
select city
      ,district
      ,marketbase
      ,max(baidu_lon_max) as max_long
      ,max(baidu_lat_max) as max_lat
      ,min(baidu_lon_min) as min_long
      ,min(baidu_lat_min) as min_lat
      ,(max(baidu_lon_max)+min(baidu_lon_min))/2 as cen_long
      ,(max(baidu_lat_max)+min(baidu_lat_min))/2 as cen_lat
from noce.AGG_MKBASE_RSRP_CLOUD
where day=#{MAXDAY} and district is not null
group by city,district,marketbase order by city;
]]>
</sqlTemplate>
<sqlTemplate id="CloudMap_03_data" description="查询数据">
<![CDATA[
select city
      ,district
      ,marketbase
      ,RSRP
      ,baidu_info
from noce.AGG_MKBASE_RSRP_CLOUD
where day=#{MAXDAY} --  AGG_MKBASE_RSRP_CLOUD表的最新成功调度日期，从dim_time_range表取
  #{CITYFILTER}   --  地市条件，如： and city='foshan'，如没选择，则为空串，下同。
  #{DISTRICTFILTER} --  区县条件，如：district='FS禅城'，如没选择，则为空串，下同。
  #{MARKETBASEFILTER} --  营服中心条件，如：marketbase='城区'，如没选择，则为空串，下同。
  #{LATITUDEFILTER} --  纬度条件，取值：and abs((baidu_lat_max+baidu_lat_min)/2-#{CENTERLATITUDE})<0.026980946， 其中#{CENTERLATITUDE}为中心点纬度，如果营服中心条件为空，则需添加本条件，否则本条件为空串。
  #{LONGITUDE1FILTER} --  经度条件，取值：and abs((baidu_lon_max+baidu_lon_min)/2-#{CENTERLONGITUDE})<0.029421133， 其中#{CENTERLONGITUDE}为中心点经度，如果营服中心条件为空，则需添加本条件，否则本条件为空串。
]]>
</sqlTemplate>

<sqlTemplate id="getRSRPMapDataSqlByMaxAndMin" description="查询数据">
<![CDATA[
select city
      ,district
      ,marketbase
      ,RSRP
      ,longitude1
      ,latitude1
      ,longitude2
      ,latitude2
      ,longitude3
      ,latitude3
      ,longitude4
      ,latitude4
from noce.ETL_MKBASE_RSRP_CLOUD
where day=#{MAXDAY}
  #{CITYFILTER}   --  地市条件，如： and city='foshan'，如没选择，则为空串，下同。
  #{DISTRICTFILTER} --  区县条件，如：district='FS禅城'，如没选择，则为空串，下同。
  #{MARKETBASEFILTER}--  营服中心条件，如：marketbase='城区'，如没选择，则为空串，下同。
  #{LONGITUDE1FILTER} --  经度条件，取值：and longitude1<#{maxLng} and longitude1>#{minLng}， 其中#{maxLngMinLng}为页面最大最小经度，如果营服中心条件为空并且地图级别小于500X500(暂定)，则需添加本条件，否则本条件为空串。
  #{LATITUDEFILTER}-- --  纬度条件，取值：and latitude1<#{maxLat} and latitude1>#{minLat}， 其中#{maxLatMinLat}为页面最大最小纬度，如果营服中心条件为空并且地图级别小于500X500(暂定)，则需添加本条件，否则本条件为空串。

]]>
</sqlTemplate>

<sqlTemplate id="getMaxTimeByTableNameSql" description="查询数据">
<![CDATA[
select data_value from noce.dim_time_range where table_name='#{tableName}' and data_type='MAX'
]]>
</sqlTemplate>

	<sqlTemplate id="kqiana_zxyh_tcp_synack_dl" description="质差用户维度TCP第三次握手时延均值统计表_质差用户维度数据列表">
		<![CDATA[
		with t1 as (
			select mdn	-- 手机号码
				,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms	-- 第三次握手时延均值（ms）
				,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate	-- 质差记录占比（%）
				,count(distinct cell_id)	cell_num	-- 活动小区数
				,sum(TEST_NUM_ALL) test_num 	-- 总记录数
			from noce.FRT_DPI_DELAY_BADUSER_H
			where hour between #{START_HOUR} and #{END_HOUR}	-- #{START_HOUR}	#{END_HOUR}
				and network=#{NETWORK}	-- #{NETWORK} 1:eHRPD 4:LET
			group by mdn)
		select * from t1
		where test_num>=(#{TEST_BASE}*#{DELTA}/24) 	-- filter base_num
			and cell_num>=#{CELL_NUM} 	-- filter cell_num
		order by bad_record_rate desc
		limit #{TOPN} 
		]]>
	</sqlTemplate>



	<sqlTemplate id="kqiAna_ipran_menu_ds" description="IPRAN维度菜单">
<![CDATA[
	select city_id
	,city_name
	from noce.dim_tele_city
	where city_id <> '1000'
	order by city_display_order
]]>	
	</sqlTemplate>	
	
	
	<sqlTemplate id="kqiAna_ipran_menu_D" description="">
<![CDATA[	
	select distinct latn_id
	,case when concat(service_d1, ':', service_d2) is NULL then 'virtual_1:virtual_2' else concat(service_d1, ':', service_d2) end service_d
	from noce.FRT_DPI_DELAY_IPRAN_H
	where hour between #{START_HOUR} and #{END_HOUR}
		and network=#{NETWORK}
	order by latn_id, service_d

]]>	
	</sqlTemplate>
	
		<sqlTemplate id="kqiAna_ipran_menu_B" description="">
	
<![CDATA[	
	select distinct concat(service_b1, ':', service_b2) service_b
	from noce.FRT_DPI_DELAY_IPRAN_H
	where hour between #{START_HOUR} and #{END_HOUR}
		and network=#{NETWORK}
		and latn_id='#{LATN_ID}'
		#{SERVICE_D_FILTER}
	order by service_b
	
	
	
]]>	
	
	</sqlTemplate>
	
		<sqlTemplate id="kqiAna_ipran_menu_a" description="">
	
<![CDATA[

	select distinct service_a
	from noce.FRT_DPI_DELAY_IPRAN_H
	where hour between #{START_HOUR}  and #{END_HOUR}
		and network=#{NETWORK}
		and latn_id='#{LATN_ID}'
		#{SERVICE_D_FILTER}
		#{SERVICE_B_FILTER}
	order by service_a
		
	
	
]]>	
	
	</sqlTemplate>
	
		<sqlTemplate id="kqiAna_ipran_menu_jz" description="">
	
<![CDATA[	

	select distinct enodeb_id
	,enodebname
	from noce.FRT_DPI_DELAY_IPRAN_H
	where hour between #{START_HOUR} and #{END_HOUR}
		and network=#{NETWORK}
		and latn_id='#{LATN_ID}'
		#{SERVICE_D_FILTER}
		#{SERVICE_B_FILTER}
		and service_a='#{SERVICE_A}'
	order by enodeb_id
	
	
	
]]>	
	
	</sqlTemplate>
	
	 <sqlTemplate id="kqiAna_ipran_menu_xq" description="">
	
<![CDATA[	

	select distinct cell_id
	,cell_name
	from noce.FRT_DPI_DELAY_IPRAN_H
	where hour between #{START_HOUR} and #{END_HOUR}
		and network=#{NETWORK}
		and latn_id='#{LATN_ID}'
		#{SERVICE_D_FILTER}
		#{SERVICE_B_FILTER}
		and service_a='#{SERVICE_A}'
		and enodeb_id=#{ENODEB_ID}
	order by cell_id
]]>	
	</sqlTemplate>


	<sqlTemplate id="kqiana_zxyh_tcp_synack_dl_time_trendChart" description="质差用户维度TCP第三次握手时延均值统计表_时间趋势图">
		<![CDATA[
			select #{TIME}
			      ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
			      ,round(sum(TCP_Ack_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 第三次握手时延占比均值（%）
			from noce.FRT_DPI_DELAY_BADUSER_H
			where hour between #{START_HOUR} and #{END_HOUR}
			      and network=#{NETWORK}  --  1:eHRPD 4:LET
			      and mdn='#{MDN}'
			group by #{TIME}
			order by #{TIME}
		]]>
	</sqlTemplate>
	
	<sqlTemplate id="kqiana_zxyh_tcp_synack_dl_exportexcelsql" description="质差用户维度TCP第三次握手时延均值统计表_汇总导出">
		<![CDATA[
			  select mdn  "手机号码"
					,time "时间"
					,mean_ms "第三次握手时延均值（ms）"
					,bad_record_rate "质差记录占比（%）"
				from (
					select cast(#{TIME} as string) time
						,mdn	-- 手机号码
						,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms	-- 第三次握手时延均值（ms）
						,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate	-- 质差记录占比（%）
					from noce.FRT_DPI_DELAY_BADUSER_H
					where hour between #{START_HOUR} and #{END_HOUR}	-- #{START_HOUR}	#{END_HOUR}
						and network=#{NETWORK}	-- #{NETWORK} 1:eHRPD 4:LET
						and mdn in #{MDN_LIST}
					group by time,mdn
					union
					select '汇总' time
						,mdn	-- 手机号码
						,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms	-- 第三次握手时延均值（ms）
						,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate	-- 质差记录占比（%）
					from noce.FRT_DPI_DELAY_BADUSER_H
					where hour between #{START_HOUR} and #{END_HOUR}	-- #{START_HOUR}	#{END_HOUR}
						and network=#{NETWORK}	-- #{NETWORK} 1:eHRPD 4:LET
						and mdn in #{MDN_LIST}
					group by mdn
					) t
				order by mdn, time
		]]>
	</sqlTemplate>
	
	<sqlTemplate id="kqiana_zxyh_tcp_synack_dl_timeDelay_trendChart" description="质差用户维度TCP第三次握手时延均值统计表_时延分布图">
		<![CDATA[
			select KQI_VALUE
			      ,round(test_num*100/test_num_all,2) ratio -- 分布率
			from 
			(
			  select KQI_VALUE
			        ,sum(STAT_NUM) test_num -- 测试次数
			  from noce.FRT_DPI_STAT_BADUSER_H 
			  where hour between #{START_HOUR} and #{END_HOUR}
			        and network=#{NETWORK}  --  1:eHRPD 4:LET
			        and KQI_TYPE='TCP_Ack_DL'  -- KQI_TYPE分别为： TCP_Ack_DL 、 WIRELESS_DT2
			        and mdn='#{MDN}'
			        and KQI_VALUE<=4000
			  group by KQI_VALUE
			) a
			join
			(
			  select sum(STAT_NUM) test_num_all
			  from noce.FRT_DPI_STAT_BADUSER_H 
			  where hour between #{START_HOUR} and #{END_HOUR}	
			        and network=#{NETWORK}  --  1:eHRPD 4:LET
			        and KQI_TYPE='TCP_Ack_DL'  -- KQI_TYPE分别为： TCP_Ack_DL 、 WIRELESS_DT2
			        and mdn='#{MDN}'
			) b
			order by KQI_VALUE
		]]>
	</sqlTemplate>
	
	<sqlTemplate id="kqiana_zxyh_wireless_dt2" description="第三次ACK与HTTP GET的时延均值统计表_质差用户维度">
		<![CDATA[
			with t1 as (
				select mdn	-- 手机号码
					,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms	-- 第三次ACK与HTTP GET的时延均值（ms）
					,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate	-- 质差记录占比（%）
					,count(distinct cell_id)	cell_num	-- 活动小区数
					,sum(TEST_NUM_ALL) test_num 	-- 总记录数
				from noce.FRT_DPI_DELAY_BADUSER_H
				where hour between #{START_HOUR} and #{END_HOUR}	-- #{START_HOUR}	#{END_HOUR}
					and network=#{NETWORK}	-- #{NETWORK} 1:eHRPD 4:LET
				group by mdn)
			select * from t1
			where test_num>=(#{TEST_BASE}*#{DELTA}/24) 	-- filter base_num
				and cell_num>=#{CELL_NUM} 	-- filter cell_num
			order by bad_record_rate desc
			limit #{TOPN} 
		]]>
	</sqlTemplate>
	
	<sqlTemplate id="kqiana_zxyh_wireless_dt2_time_trendChart" description="第三次ACK与HTTP GET的时延均值统计表_时间趋势图">
		<![CDATA[
			select #{TIME}
			      ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
			      ,round(sum(WIRELESS_DT2_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 第三次ACK与HTTP GET的时延占比均值（%）
			from noce.FRT_DPI_DELAY_BADUSER_H
			where hour between #{START_HOUR} and #{END_HOUR}
			      and network=#{NETWORK}  --  1:eHRPD 4:LET
			      and mdn='#{MDN}'
			group by #{TIME}
			order by #{TIME}
		]]>
	</sqlTemplate>
	
	<sqlTemplate id="kqiana_zxyh_wireless_dt2_exportexcelsql" description="第三次ACK与HTTP GET的时延均值统计表_汇总导出">
		<![CDATA[
			select mdn  "手机号码"
				,time "时间"
				,mean_ms "第三次握手时延均值（ms）"
				,bad_record_rate "质差记录占比（%）"
			from (
				select cast(#{TIME} as string) time
					,mdn	-- 手机号码
					,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms	-- 第三次握手时延均值（ms）
					,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate	-- 质差记录占比（%）
				from noce.FRT_DPI_DELAY_BADUSER_H
				where hour between #{START_HOUR} and #{END_HOUR}	-- #{START_HOUR}	#{END_HOUR}
					and network=#{NETWORK}	-- #{NETWORK} 1:eHRPD 4:LET
					and mdn in #{MDN_LIST}
				group by time,mdn
				union
				select '汇总' time
					,mdn	-- 手机号码
					,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms	-- 第三次握手时延均值（ms）
					,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate	-- 质差记录占比（%）
				from noce.FRT_DPI_DELAY_BADUSER_H
				where hour between #{START_HOUR} and #{END_HOUR}	-- #{START_HOUR}	#{END_HOUR}
					and network=#{NETWORK}	-- #{NETWORK} 1:eHRPD 4:LET
					and mdn in #{MDN_LIST}
				group by mdn
				) t
			order by mdn, time
		]]>
	</sqlTemplate>
	
	<sqlTemplate id="kqiana_zxyh_wireless_dt2_timeDelay_trendChart" description="第三次ACK与HTTP GET的时延均值统计表_时延分布图">
		<![CDATA[
			select KQI_VALUE
			      ,round(test_num*100/test_num_all,2) ratio -- 分布率
			from 
			(
			  select KQI_VALUE
			        ,sum(STAT_NUM) test_num -- 测试次数
			  from noce.FRT_DPI_STAT_BADUSER_H 
			  where hour between #{START_HOUR} and #{END_HOUR}
			        and network=#{NETWORK}  --  1:eHRPD 4:LET
			        and KQI_TYPE='WIRELESS_DT2'  -- KQI_TYPE分别为： TCP_Ack_DL 、 WIRELESS_DT2
			        and mdn='#{MDN}'
			        and KQI_VALUE<=4000
			  group by KQI_VALUE
			) a
			join
			(
			  select sum(STAT_NUM) test_num_all
			  from noce.FRT_DPI_STAT_BADUSER_H 
			  where hour between #{START_HOUR} and #{END_HOUR}	
			        and network=#{NETWORK}  --  1:eHRPD 4:LET
			        and KQI_TYPE='WIRELESS_DT2'  -- KQI_TYPE分别为： TCP_Ack_DL 、 WIRELESS_DT2
			        and mdn='#{MDN}'
			) b
			order by KQI_VALUE
		]]>
	</sqlTemplate>
		
	<sqlTemplate id="kqiana_zd_tcp_synack_dl" description="TCP第三次握手时延均值统计表_终端维度">
		<![CDATA[
			select a.term_type, mean_ms, bad_record_rate, user_num, test_num
				from
				(
					select term_type	-- 终端型号
						,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms	-- 第三次握手时延均值（ms）
						,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate	-- 质差记录占比（%）
						,sum(TEST_NUM_ALL) test_num 	-- 总记录数
					from noce.FRT_DPI_DELAY_TRMNL_H
					where hour between #{START_HOUR} and #{END_HOUR}	-- #{START_HOUR}	#{END_HOUR}
						and network=#{NETWORK}	-- #{NETWORK} 1:eHRPD 4:LET
					group by term_type
					) a
				join
				(
					select term_type
						,count(mdn) user_num
					from (
						select distinct term_type
							,mdn
						from noce.FRT_DPI_DELAY_TRMNL_H
						where hour between #{START_HOUR} and #{END_HOUR}	-- #{START_HOUR}	#{END_HOUR}
							and network=#{NETWORK}	-- #{NETWORK} 1:eHRPD 4:LET
							and BD_TCP_Ack_DL_TOT > 0
						) t
					group by term_type
					order by term_type
					) b
				on a.term_type=b.term_type
				where test_num>=(#{TEST_BASE}*#{DELTA}/24) 	-- filter base_num	#{TEST_BASE} #{DELTA}
					and user_num>=#{BAD_USER_NUM} 	-- filter user_num 	#{BAD_USER_NUM}
				order by bad_record_rate desc
				limit #{TOPN}
		]]>
	</sqlTemplate>
	
	<sqlTemplate id="kqiana_zd_tcp_synack_dl_time_trendChart" description="TCP第三次握手时延均值统计表_时间趋势图">
		<![CDATA[
			select #{TIME}
			      ,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次握手时延均值（ms）
			      ,round(sum(TCP_Ack_DL_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 第三次握手时延占比均值（%）
			from noce.FRT_DPI_DELAY_TRMNL_H
			where hour between #{START_HOUR} and #{END_HOUR}
			      and network=#{NETWORK}  --  1:eHRPD 4:LET
			      and term_type='#{TERM_TYPE}'
			group by #{TIME}
			order by #{TIME}
		]]>
	</sqlTemplate>
	
	<sqlTemplate id="kqiana_zd_tcp_synack_dl_exportexcelsql" description="TCP第三次握手时延均值统计表_汇总导出">
		<![CDATA[
			select term_type "终端型号"
				,time "时间"
				,mean_ms "第三次握手时延均值（ms）"
				,bad_record_rate "质差记录占比（%）"
			from (
				select cast(#{TIME} as string) time
					,term_type	-- 终端型号
					,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms	-- 第三次握手时延均值（ms）
					,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate	-- 质差记录占比（%）
				from noce.FRT_DPI_DELAY_TRMNL_H
				where hour between #{START_HOUR} and #{END_HOUR}	-- #{START_HOUR}	#{END_HOUR}
					and network=#{NETWORK}	-- #{NETWORK} 1:eHRPD 4:LET
					and term_type in #{TERM_TYPE_LIST}
				group by time,term_type
				union
				select '汇总' time
					,term_type	-- 终端型号
					,round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL),2) mean_ms	-- 第三次握手时延均值（ms）
					,round(sum(BD_TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate	-- 质差记录占比（%）
				from noce.FRT_DPI_DELAY_TRMNL_H
				where hour between #{START_HOUR} and #{END_HOUR}	-- #{START_HOUR}	#{END_HOUR}
					and network=#{NETWORK}	-- #{NETWORK} 1:eHRPD 4:LET
					and term_type in #{TERM_TYPE_LIST}
				group by term_type
				) t
			order by term_type, time
		]]>
	</sqlTemplate>
	
	<sqlTemplate id="kqiana_zd_tcp_synack_dl_timeDelay_trendChart" description="TCP第三次握手时延均值统计表_时延分布图">
		<![CDATA[
			select KQI_VALUE
			      ,round(test_num*100/test_num_all,2) ratio -- 分布率
			from 
			(
			  select KQI_VALUE
			        ,sum(STAT_NUM) test_num -- 测试次数
			  from noce.FRT_DPI_STAT_TRMNL_H 
			  where hour between #{START_HOUR} and #{END_HOUR}
			        and network=#{NETWORK}  --  1:eHRPD 4:LET
			        and KQI_TYPE='TCP_Ack_DL'  -- KQI_TYPE分别为： TCP_ACK_DL 、 WIRELESS_DT2
			        and KQI_VALUE<=4000
			        and term_type='#{TERM_TYPE}'
			  group by KQI_VALUE
			) a
			join
			(
			  select sum(STAT_NUM) test_num_all
			  from noce.FRT_DPI_STAT_TRMNL_H 
			  where hour between #{START_HOUR} and #{END_HOUR}
			        and network=#{NETWORK}  --  1:eHRPD 4:LET
			        and KQI_TYPE='TCP_Ack_DL'  -- KQI_TYPE分别为： TCP_ACK_DL 、 WIRELESS_DT2
			        and term_type='#{TERM_TYPE}'
			) b
			order by KQI_VALUE
		]]>
	</sqlTemplate>
		
	<sqlTemplate id="kqiana_zd_wireless_dt2" description="第三次ACK与HTTP GET的时延均值统计表_终端维度">
		<![CDATA[
			select a.term_type, mean_ms, bad_record_rate, user_num, test_num
			from
			(
				select term_type	-- 终端型号
					,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms	-- 第三次握手时延均值（ms）
					,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate	-- 质差记录占比（%）
					,sum(TEST_NUM_ALL) test_num 	-- 总记录数
				from noce.FRT_DPI_DELAY_TRMNL_H
				where hour between #{START_HOUR} and #{END_HOUR}	-- #{START_HOUR}	#{END_HOUR}
					and network=#{NETWORK}	-- #{NETWORK} 1:eHRPD 4:LET
				group by term_type
				) a
			join
			(
				select term_type
					,count(mdn) user_num
				from (
					select distinct term_type
						,mdn
					from noce.FRT_DPI_DELAY_TRMNL_H
					where hour between #{START_HOUR} and #{END_HOUR}	-- #{START_HOUR}	#{END_HOUR}
						and network=#{NETWORK}	-- #{NETWORK} 1:eHRPD 4:LET
						and BD_TCP_Ack_DL_TOT > 0
					) t
				group by term_type
				order by term_type
				) b
			on a.term_type=b.term_type
			where test_num>=(#{TEST_BASE}*#{DELTA}/24) 	-- filter base_num	#{TEST_BASE} #{DELTA}
				and user_num>=#{BAD_USER_NUM} 	-- filter user_num 	#{BAD_USER_NUM}
			order by bad_record_rate desc
			limit #{TOPN} 
		]]>
	</sqlTemplate>
	
	<sqlTemplate id="kqiana_zd_wireless_dt2_time_trendChart" description="第三次ACK与HTTP GET的时延均值统计表_时间趋势图">
		<![CDATA[
			select #{TIME}
			      ,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
			      ,round(sum(WIRELESS_DT2_RATIO_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate 	-- 第三次ACK与HTTP GET的时延占比均值（%）
			from noce.FRT_DPI_DELAY_TRMNL_H
			where hour between #{START_HOUR} and #{END_HOUR}
			      and network=#{NETWORK}  --  1:eHRPD 4:LET
			      and term_type='#{TERM_TYPE}'
			group by #{TIME}
			order by #{TIME}
		]]>
	</sqlTemplate>
	
	<sqlTemplate id="kqiana_zd_wireless_dt2_exportexcelsql" description="第三次ACK与HTTP GET的时延均值统计表_汇总导出">
		<![CDATA[
			select term_type "终端型号"
				,time "时间"
				,mean_ms "第三次握手时延均值（ms）"
				,bad_record_rate "质差记录占比（%）"
			from (
				select cast(#{TIME} as string) time
					,term_type	-- 终端型号
					,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms	-- 第三次握手时延均值（ms）
					,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate	-- 质差记录占比（%）
				from noce.FRT_DPI_DELAY_TRMNL_H
				where hour between #{START_HOUR} and #{END_HOUR}	-- #{START_HOUR}	#{END_HOUR}
					and network=#{NETWORK}	-- #{NETWORK} 1:eHRPD 4:LET
					and term_type in #{TERM_TYPE_LIST}
				group by time,term_type
				union
				select '汇总' time
					,term_type	-- 终端型号
					,round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL),2) mean_ms	-- 第三次握手时延均值（ms）
					,round(sum(BD_WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL)*100,2) bad_record_rate	-- 质差记录占比（%）
				from noce.FRT_DPI_DELAY_TRMNL_H
				where hour between #{START_HOUR} and #{END_HOUR}	-- #{START_HOUR}	#{END_HOUR}
					and network=#{NETWORK}	-- #{NETWORK} 1:eHRPD 4:LET
					and term_type in #{TERM_TYPE_LIST}
				group by term_type
				) t
			order by term_type, time
		]]>
	</sqlTemplate>
	
	<sqlTemplate id="kqiana_zd_wireless_dt2_timeDelay_trendChart" description="第三次ACK与HTTP GET的时延均值统计表_时延分布图">
		<![CDATA[
			select KQI_VALUE
			      ,round(test_num*100/test_num_all,2) ratio -- 分布率
			from 
			(
			  select KQI_VALUE
			        ,sum(STAT_NUM) test_num -- 测试次数
			  from noce.FRT_DPI_STAT_TRMNL_H 
			  where hour between #{START_HOUR} and #{END_HOUR}
			        and network=#{NETWORK}  --  1:eHRPD 4:LET
			        and KQI_TYPE='WIRELESS_DT2'  -- KQI_TYPE分别为： TCP_ACK_DL 、 WIRELESS_DT2
			        and KQI_VALUE<=4000
			        and term_type='#{TERM_TYPE}'
			  group by KQI_VALUE
			) a
			join
			(
			  select sum(STAT_NUM) test_num_all
			  from noce.FRT_DPI_STAT_TRMNL_H 
			  where hour between #{START_HOUR} and #{END_HOUR}
			        and network=#{NETWORK}  --  1:eHRPD 4:LET
			        and KQI_TYPE='WIRELESS_DT2'  -- KQI_TYPE分别为： TCP_ACK_DL 、 WIRELESS_DT2
			        and term_type='#{TERM_TYPE}'
			) b
			order by KQI_VALUE
		]]>
	</sqlTemplate>
	<!-- TCP第三次握手时延均值统计表   小区分析 -->
	<sqlTemplate id="kqiana_zd_tcp_synack_dl_community_analysis" description="TCP第三次握手时延均值统计表_小区分析表">
		<![CDATA[
			select hour
				,CEll_ID 	-- 小区ID
				,CEll_NAME 	-- 小区名称
				,case when TEST_NUM_ALL=0 then 0 else round(TCP_Ack_DL_TOT/TEST_NUM_ALL,2) end mean_ms 	-- 第三次握手时延均值（ms）
				,round(RRCCONN, 2) RRCCONN	-- RC建立成功率（CDR）
				,round(RRCDX, 2) RRCDX 		-- RRC异常释放率（CDR）
				,round(AVG_USER_NUM, 2) AVG_USER_NUM 	-- 平均忙度（DPI）
				,round(AVG_RSRP, 2) AVG_RSRP 	-- 均RSRP（MR）
				,round(AVG_SINR, 2) AVG_SINR	-- 平均上行SINR（MR）
			from noce.FRT_DPI_CELL_INFO_H
			where hour between #{START_HOUR} and #{END_HOUR}
				and network=#{NETWORK}
				and eNodeB_ID=#{ENODEB_ID}
				and CEll_ID=#{CELL_ID}
			order by hour
		]]>
	</sqlTemplate>
	
	<!-- 第三次ACK与HTTP GET的时延均值统计表   小区分析 -->
	<sqlTemplate id="kqiana_zd_wireless_dt2_community_analysis" description="第三次ACK与HTTP GET的时延均值统计表_小区分析表">
		<![CDATA[
			select hour
				,CEll_ID 	-- 小区ID
				,CEll_NAME 	-- 小区名称
				,case when TEST_NUM_ALL=0 then 0 else round(WIRELESS_DT2_TOT/TEST_NUM_ALL,2) end mean_ms 	-- 第三次ACK与HTTP GET的时延均值（ms）
				,round(RRCCONN, 2) RRCCONN	-- RC建立成功率（CDR）
				,round(RRCDX, 2) RRCDX 		-- RRC异常释放率（CDR）
				,round(AVG_USER_NUM, 2) AVG_USER_NUM 	-- 平均忙度（DPI）
				,round(AVG_RSRP, 2) AVG_RSRP 	-- 均RSRP（MR）
				,round(AVG_SINR, 2) AVG_SINR 	-- 平均上行SINR（MR）
			from noce.FRT_DPI_CELL_INFO_H
			where hour between #{START_HOUR} and #{END_HOUR}
				and network=#{NETWORK}
				and eNodeB_ID=#{ENODEB_ID}
				and CEll_ID=#{CELL_ID}
			order by hour
		]]>
	</sqlTemplate>
	
	<sqlTemplate id="kqiana_community_analysis_busy_lineGraph" description="忙度点线图">
		<![CDATA[
			select STS_TIME-floor(STS_TIME/100)*100 min 	-- 时间(分钟)
				,USER_NUM 	-- 用户数
			from noce.FRT_DPI_CELL_USER_H
			where hour=#{HOUR}
				and floor(STS_TIME/100)=hour
				and BASE_STATN_ID=#{ENODEB_ID}
				and CELL_ID=#{CELL_ID}
			order by min
		]]>
	</sqlTemplate>
	
	
	
	
		<!--   dsn 分析 -->
	<sqlTemplate id="dnsAna_trade" description="1">
<![CDATA[	
select #{TIME}
      , nvl(round(sum(DNS_DELAY_TOT)/sum(TEST_NUM_ALL),2),0)  DNS_DELAY_MEAN -- 时延均值,ms
from noce.FRT_DPI_DELAY_DNS_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LTE
group by #{TIME}
order by #{TIME}


]]>	
</sqlTemplate>
<sqlTemplate id="dnsAna_dist" description="2">
<![CDATA[	
select KQI_VALUE
       , nvl(round(test_num*100/test_num_all,2),0)  ratio -- 分布率
from 
(
  select KQI_VALUE
         , sum(STAT_NUM) test_num -- 测试次数
  from noce.FRT_DPI_STAT_DNS_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LTE
        and KQI_VALUE<=4000
  group by KQI_VALUE
) a
join
(
  select sum(STAT_NUM) test_num_all
  from noce.FRT_DPI_STAT_DNS_H 
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LTE
) b
order by KQI_VALUE


]]>	
</sqlTemplate>

<sqlTemplate id="dnsAna_spAndIp" description="3">
<![CDATA[	
select #{DIMENTION}  --  统计维度，基于SP域名维度时，取值为"DomainName"；基于DNS服务器IP维度时，取值为"DNS_SERVER_IP"
      ,round(sum(DNS_DELAY_TOT)/sum(TEST_NUM_ALL),2)  DNS_DELAY_MEAN -- 时延均值,ms
from noce.FRT_DPI_DELAY_DNS_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LTE
      and #{DIMENTION} is not null 
group by #{DIMENTION}
order by #{DIMENTION}
]]>	
</sqlTemplate>

<sqlTemplate id="dnsAna_spAndIp_trade" description="3.1">
<![CDATA[
select #{TIME}
      , nvl(round(sum(DNS_DELAY_TOT)/sum(TEST_NUM_ALL),2),0)  DNS_DELAY_MEAN -- 时延均值,ms
from noce.FRT_DPI_DELAY_DNS_H 
where hour between #{START_HOUR} and #{END_HOUR}
      and network= #{NETWORK}  --  1:eHRPD 4:LTE
      and #{DIMENTION}= '#{DOMAINNAME}'
group by #{TIME}
order by #{TIME}


]]>	
</sqlTemplate>

<sqlTemplate id="dnsAna_spAndIp_dist" description="3.2">
<![CDATA[	
select KQI_VALUE
       , nvl(round(test_num*100/test_num_all,2),0)  ratio -- 分布率
from 
(
  select KQI_VALUE
         , sum(STAT_NUM) test_num -- 测试次数
  from #{TB_NAME}
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LTE
        and KQI_VALUE<=4000
      and #{DIMENTION}= '#{DOMAINNAME}'
  group by KQI_VALUE
) a
join
(
  select sum(STAT_NUM) test_num_all
  from  #{TB_NAME}
  where hour between #{START_HOUR} and #{END_HOUR}
        and network= #{NETWORK}  --  1:eHRPD 4:LTE
      and #{DIMENTION}= '#{DOMAINNAME}'
) b
order by KQI_VALUE

]]>	
</sqlTemplate>
	<!--   dsn 分析 end-->

<sqlTemplate id="singlePerception_profile" description="业务概况的通话时长和短信数量">
<![CDATA[	
select nvl(round(sum(CALLER_DURATION)/60,0),0),	-- 主叫时长，分钟
	nvl(round(sum(CALLED_DURATION)/60,0),0),	-- 被叫时长，分钟
	nvl(round(sum(CALLER_DURATION+CALLED_DURATION)/60,0),0),	-- 总通话时长，分钟
	nvl(sum(SEND_NUM),0),	-- 短信发送条数
	nvl(sum(RECEIVE_NUM),0),	-- 短信接收条数
	nvl(sum(SEND_NUM+RECEIVE_NUM),0)	-- 短信总条数
from noce.AGG_USER_CALL_SMS_D 	
	where day between #{STARTDATE} and #{ENDDATE}
	and User_Number='#{MDN}'
]]>	
</sqlTemplate>	

<sqlTemplate id="singlePerception_flow" description="业务概况的流量数量">
<![CDATA[	
select nvl(sum(FLOW_ALL),0),	-- 总流量，单位字节，前端呈现时，不足1M的，转换为K作单位；不足1G的，转换为M；1G及以上的，转换为G。
	nvl(sum(case FLOW_TYPE when '4G' then FLOW_ALL else 0 end),0),	-- 4G流量
	nvl(sum(case when FLOW_TYPE <>'4G' then FLOW_ALL else 0 end),0)	-- 3G流量
from noce.AGG_USER_FLOW_D 
	where day between #{STARTDATE} and #{ENDDATE}
	and MSISDN='#{MDN}'
]]>	
</sqlTemplate>

<sqlTemplate id="singlePerception_situation" description="TOP10小区">
<![CDATA[	
select cell_name,	-- 小区名称
	nvl(round(sum(stay_duration)/60,2),0) as dur 	-- 停留时长
from( 
	select * from  noce.AGG_USER_4G_STAY_D 
	where day between #{STARTDATE} and #{ENDDATE}
 	and MSISDN='#{MDN}') F join ( 
 	select * from noce.dim_sector where day=#{ENDDATE} and NETTYPE='4G'	-- 停留时间只计算4G的基站
 	) d on F.enodeid = d.BASE_STATN_ID and F.cellid=d.cell_id 
 	group by cell_name order by dur desc limit 10
]]>	
</sqlTemplate>

<sqlTemplate id="singlePerception_application" description="TOP10应用">
<![CDATA[	
select service_name,
	nvl(round(sum(flow)/1024/1024,2),0) as serv_flow 	-- 流量，单位M
from noce.AGG_LTE_DPI_SERVICE_TOP10 
where hour between #{STARTDATE} and #{ENDDATE}
	and MSISDN='#{MDN}' and service_name<>'未名业务' 
	and service_name is not null and service_name <>'' 	-- 不关注'未名业务'和service_name为空滤除之
 group by service_name order by serv_flow desc limit 10
]]>	
</sqlTemplate>

<sqlTemplate id="singlePerception_network" description="网络覆盖">
<![CDATA[	
select nvl(sum(level_115_num),0),	-- 无覆盖记录数
	nvl(sum(level_115_110_num),0),	-- 弱覆盖记录数
	nvl(sum(level_110_105_num),0),	-- 较差记录数
	nvl(sum(level_105_95_num),0),	-- 一般盖记录数
	nvl(sum(level_95_85_num),0),	-- 良好记录数
	nvl(sum(level_85_num),0) 	-- 优秀记录数
from noce.AGG_USER_4G_COVER_D 
where day between #{STARTDATE} and #{ENDDATE}
	and MSISDN='#{MDN}'
]]>	
</sqlTemplate>

<sqlTemplate id="singlePerception_kqiIndex_app" description="上网业务KQI-APP">
<![CDATA[	
select case sum(WEBPAGE_FIRST_ALL) when 0 then 0 else nvl(round(100-sum(WEBPAGE_FIRST_PKG_DELAY_BAD)/sum(WEBPAGE_FIRST_ALL)*100,2),0) end as WEBPAGE_FIRST_NOTBAD_R,	-- 首包优良率（%）
	case sum(WEBPAGE_OPEN_ALL) when 0 then 0 else nvl(round(100-sum(WEBPAGE_OPEN_DELAY_BAD)/sum(WEBPAGE_OPEN_ALL)*100,2),0) end as WEBPAGE_OPEN_NOTBAD_R,	-- 首页优良率（%）
	case sum(VIDIO_ALL) when 0 then 0 else nvl(round(100-sum(VIDIO_DOWNLOAD_RATE_BAD)/sum(VIDIO_ALL)*100,2),0) end as VIDIO_DOWNLOAD_NOTBAD_R,	-- 视频下载优良率（%）
	case sum(WEBPAGE_FIRST_ALL) when 0 then 0 else nvl(round(sum(WEBPAGE_FIRST_PKG_DELAY_TOT)/sum(WEBPAGE_FIRST_ALL),2),0) end as WEBPAGE_FIRST_M,	-- 首包时延均值（ms）
	case sum(WEBPAGE_OPEN_ALL) when 0 then 0 else nvl(round(sum(WEBPAGE_OPEN_DELAY_TOT)/sum(WEBPAGE_OPEN_ALL),2),0) end as WEBPAGE_OPEN__M,	-- 首页时延均值（ms）
	case sum(VIDIO_ALL) when 0 then 0 else nvl(round(sum(VIDIO_DOWNLOAD_RATE_TOT)/sum(VIDIO_ALL),2),0) end as VIDIO_DOWNLOAD_M 	-- 视频下载均值（kbps）
from noce.AGG_USER_JTAPP_KQI_D
where day between #{STARTDATE} and #{ENDDATE} and mdn='#{MDN}'
]]>	
</sqlTemplate>

<sqlTemplate id="singlePerception_kqiIndex_dpi" description="上网业务KQI-DPI">
<![CDATA[	
select case sum(WEBPAGE_FIRST_ALL) when 0 then 0 else nvl(round(100-sum(WEBPAGE_FIRST_PKG_DELAY_BAD)/sum(WEBPAGE_FIRST_ALL)*100,2),0) end as WEBPAGE_FIRST_NOTBAD_R,	-- 首包优良率（%）
	case sum(WEBPAGE_OPEN_ALL) when 0 then 0 else nvl(round(100-sum(WEBPAGE_OPEN_DELAY_BAD)/sum(WEBPAGE_OPEN_ALL)*100,2),0) end as WEBPAGE_OPEN_NOTBAD_R,	-- 首页优良率（%）
	case sum(VIDIO_ALL) when 0 then 0 else nvl(round(100-sum(VIDIO_DOWNLOAD_RATE_BAD)/sum(VIDIO_ALL)*100,2),0) end as VIDIO_DOWNLOAD_NOTBAD_R,	-- 视频下载优良率（%）
	case sum(WEBPAGE_FIRST_ALL) when 0 then 0 else nvl(round(sum(WEBPAGE_FIRST_PKG_DELAY_TOT)/sum(WEBPAGE_FIRST_ALL),2),0) end as WEBPAGE_FIRST_M,	-- 首包时延均值（ms）
	case sum(WEBPAGE_OPEN_ALL) when 0 then 0 else nvl(round(sum(WEBPAGE_OPEN_DELAY_TOT)/sum(WEBPAGE_OPEN_ALL),2),0) end as WEBPAGE_OPEN__M,	-- 首页时延均值（ms）
	case sum(VIDIO_ALL) when 0 then 0 else nvl(round(sum(VIDIO_DOWNLOAD_RATE_TOT)/sum(VIDIO_ALL),2),0) end as VIDIO_DOWNLOAD_M 	-- 视频下载均值（kbps）
from noce.AGG_USER_DPI_KQI_D
where day between #{STARTDATE} and #{ENDDATE} and mdn='#{MDN}'
]]>	
</sqlTemplate>

<sqlTemplate id="singlePerception_termtype" description="IMSI和终端型号">
<![CDATA[	
select IMSI,TERM_TYPE from noce.AGG_ZDZCXT_TERMTYPE where mdn ='#{MDN}' and day=#{ENDDATE}
]]>	
</sqlTemplate>

<sqlTemplate id="singlePerception_cei" description="感知评分、排序及雷达图数据">
<![CDATA[	
select nvl(round(avg(CEI_MDN),0),0) as avg_cei_mdn --  感知评分均值
       ,nvl(round(avg(Cei_Level),2),0) as avg_cei_level -- 打败全网%用户
       ,nvl(round(avg(wls_tot),2),0)  as wirelessCover -- 无线覆盖
       ,nvl(round(avg(net_tot),2),0) as networkAccessAndKeep -- 网络接入及保持
       ,nvl(round(avg(srv_tot),2),0) as serviceExp-- 业务体验
from noce.FRT_CEI_MDN_D f
where day between #{DATE_BEGIN} and #{DATE_END}
      and MSISDN='#{MSISDN}'
      ]]>	
</sqlTemplate>

<sqlTemplate id="CustomExperience_province_radar" description="取全省的雷达图指标">
	<![CDATA[	
	select round(avg(Wls_Tot),2) as avg_Wls_Tot -- 无线覆盖质量均值
      ,round(avg(Net_Tot),2) as avg_Net_Tot -- 网络接入性和保持性质量均值
      ,round(avg(srv_Tot),2) as avg_srv_Tot -- 业务体验质量均值
	from noce.FRT_CEI_CELL_D a
	join (select * from noce.dim_sector where day=#{CUR_DATE} and nettype='4G') b
	on a.base_statn_id=b.base_statn_id and a.cell_id=b.cell_id
	where a.day between #{DATE_BEGIN}01 and #{DATE_END}40
	]]>	
</sqlTemplate>

<sqlTemplate id="CustomExperience_city_radar" description="取各地市的雷达图指标">
	<![CDATA[	
	select city_name
      ,round(avg(Wls_Tot),2) as avg_Wls_Tot -- 无线覆盖质量均值
      ,round(avg(Net_Tot),2) as avg_Net_Tot -- 网络接入性和保持性质量均值
      ,round(avg(srv_Tot),2) as avg_srv_Tot -- 业务体验质量均值
	from noce.FRT_CEI_CELL_D a
	join (select * from noce.dim_sector where day=#{CUR_DATE} and nettype='4G') b
	on a.base_statn_id=b.base_statn_id and a.cell_id=b.cell_id
	where a.day between #{DATE_BEGIN}01 and #{DATE_END}40
	group by city_name
	]]>	
</sqlTemplate>

<sqlTemplate id="CustomExperience_Province_3GflowRatioOf4GUser" description="取全省的4G用户3G流量占比，环比增长；4G用户4G时长占比，环比增长">
	<![CDATA[	
	select round(AA.Ratio_3G_Flow,2) as R_3G_Flow   -- 4G用户3G流量占比
       ,round(AA.Ratio_3G_Flow-BB.Ratio_3G_Flow,2) as Dif_3G_Flow -- 环比增长
       ,round(AA.Ratio_4G_Dur,2) as R_4G_Dur   -- 4G用户4G时长占比
       ,round(AA.Ratio_4G_Dur-BB.Ratio_4G_Dur,2) as Dif_3G_Flow -- 环比增长
	from
	  (select 
	        sum(case when a.FLOW_TYPE ='eHRPD' then a.FLOW_ALL else 0 end)*100/sum(case when a.FLOW_TYPE <>'3G' then a.FLOW_ALL else 0 end) as Ratio_3G_Flow -- 4G用户3G流量占比
	       ,sum(case when FLOW_TYPE = '4G' then DURATION else 0 end)*100/sum(case when FLOW_TYPE <> '3G' then DURATION else 0 end) Ratio_4G_Dur --  4G用户4G时长占比
	  from NOCE.FRT_3G4GFLOW_HOME_M a,NOCE.DIM_TELE_CITY b 
	  where cast(a.HOME_LATN_ID as string)=b.CITY_ID 
	        and a.month=#{MONTH} ) AA
	join  
	  (select 
	        sum(case when a.FLOW_TYPE ='eHRPD' then a.FLOW_ALL else 0 end)*100/sum(case when a.FLOW_TYPE <>'3G' then a.FLOW_ALL else 0 end) as Ratio_3G_Flow -- 4G用户3G流量占比
	       ,sum(case when FLOW_TYPE = '4G' then DURATION else 0 end)*100/sum(case when FLOW_TYPE <> '3G' then DURATION else 0 end) Ratio_4G_Dur --  4G用户4G时长占比
	  from NOCE.FRT_3G4GFLOW_HOME_M a,NOCE.DIM_TELE_CITY b 
	  where cast(a.HOME_LATN_ID as string)=b.CITY_ID 
	        and a.month=#{LASTMONTH} ) BB
	]]>	
</sqlTemplate>

<sqlTemplate id="CustomExperience_city_3GflowRatioOf4GUser" description="取各地市的4G用户3G流量占比，环比增长；4G用户4G时长占比，环比增长">
	<![CDATA[	
	select AA.city_name 
       ,round(AA.Ratio_3G_Flow,2) as R_3G_Flow   -- 4G用户3G流量占比
       ,round(AA.Ratio_3G_Flow-BB.Ratio_3G_Flow,2) as Dif_3G_Flow -- 环比增长
       ,round(AA.Ratio_4G_Dur,2) as R_4G_Dur   -- 4G用户4G时长占比
       ,round(AA.Ratio_4G_Dur-BB.Ratio_4G_Dur,2) as Dif_4G_Dur -- 环比增长
	from
	  (select b.CITY_NAME
	        ,sum(case when a.FLOW_TYPE ='eHRPD' then a.FLOW_ALL else 0 end)*100/sum(case when a.FLOW_TYPE <>'3G' then a.FLOW_ALL else 0 end) as Ratio_3G_Flow -- 4G用户3G流量占比
	        ,sum(case when FLOW_TYPE = '4G' then DURATION else 0 end)*100/sum(case when FLOW_TYPE <> '3G' then DURATION else 0 end) Ratio_4G_Dur --  4G用户4G时长占比
	  from NOCE.FRT_3G4GFLOW_HOME_M a,NOCE.DIM_TELE_CITY b 
	  where cast(a.HOME_LATN_ID as string)=b.CITY_ID 
	        and a.month=#{MONTH} 
	  group by b.CITY_NAME ) AA
	join  
	  (select b.CITY_NAME
	        ,sum(case when a.FLOW_TYPE ='eHRPD' then a.FLOW_ALL else 0 end)*100/sum(case when a.FLOW_TYPE <>'3G' then a.FLOW_ALL else 0 end) as Ratio_3G_Flow -- 4G用户3G流量占比
	        ,sum(case when FLOW_TYPE = '4G' then DURATION else 0 end)*100/sum(case when FLOW_TYPE <> '3G' then DURATION else 0 end) Ratio_4G_Dur --  4G用户4G时长占比
	  from NOCE.FRT_3G4GFLOW_HOME_M a,NOCE.DIM_TELE_CITY b 
	  where cast(a.HOME_LATN_ID as string)=b.CITY_ID 
	        and a.month=#{LASTMONTH} 
	  group by b.CITY_NAME) BB
	on AA.city_name=BB.city_name
	]]>	
</sqlTemplate>

<sqlTemplate id="CustomExperience_KQI_Ratio" description="取全省以及各地市的KQI优良率指标">
	<![CDATA[	
	select b.city_name
      ,round((1-WEBPAGE_FIRST_PKG_DELAY_BAD/WEBPAGE_ALL)*100,2) as WEBPAGE_FIRST_PKG_DELAY_NOTBAD_RATIO -- 首包时延优良率
      ,round((1-WEBPAGE_OPEN_DELAY_BAD/WEBPAGE_OPEN_ALL)*100,2) as WEBPAGE_OPEN_DELAY_NOTBAD_RATIO -- 首页时延优良率
      ,round(VIDIO_DOWNLOAD_RATE_GOOD_RATIO_AVG*100,2) VIDIO_DOWNLOAD_RATE_GOOD_RATIO-- 视频下载优良率
	from noce.FRT_DPI_CE_CITY_M a
	join noce.dim_tele_city b
	on a.LATN_ID=cast(b.city_id as integer)
	where month=#{MONTH}
	]]>	
</sqlTemplate>

<sqlTemplate id="CustomExperience_KQI_Mean_Province" description="取全省的KQI均值指标">
	<![CDATA[	
	select case sum(case when KQI_TYPE='WEBPAGE_FIRST_PKG_DELAY' and KQI_VALUE>=0 then STAT_NUM else 0 end)
	     when 0 then -1
	     else round(sum(case when KQI_TYPE='WEBPAGE_FIRST_PKG_DELAY' and KQI_VALUE>=0 then STAT_NUM*KQI_VALUE else 0 end)
        	/sum(case when KQI_TYPE='WEBPAGE_FIRST_PKG_DELAY' and KQI_VALUE>=0 then STAT_NUM else 0 end)) end WEBPAGE_FIRST_PKG_DELAY_MEAN -- 首包时延均值 ms
        , case sum(case when KQI_TYPE='WEBPAGE_OPEN_DELAY' and KQI_VALUE>=0 then STAT_NUM else 0 end)
	     when 0 then -1
       else round(sum(case when KQI_TYPE='WEBPAGE_OPEN_DELAY' and KQI_VALUE>=0 then STAT_NUM*KQI_VALUE else 0 end) 
        	/sum(case when KQI_TYPE='WEBPAGE_OPEN_DELAY' and KQI_VALUE>=0 then STAT_NUM else 0 end)) end WEBPAGE_OPEN_DELAY_MEAN -- 首页时延均值 ms
        , case sum(case when KQI_TYPE='VIDIO_DOWNLOAD_RATE' and KQI_VALUE>=0 then STAT_NUM else 0 end)
	     when 0 then -1
       else round(sum(case when KQI_TYPE='VIDIO_DOWNLOAD_RATE' and KQI_VALUE>=0 then STAT_NUM*KQI_VALUE else 0 end)
        	/sum(case when KQI_TYPE='VIDIO_DOWNLOAD_RATE' and KQI_VALUE>=0 then STAT_NUM else 0 end)) end WEBPAGE_OPEN_DELAY_MEAN -- 视频下载速率均值 kbps
from NOCE.FRT_DPI_KQI_STAT_D t1 
join NOCE.DIM_TELE_CITY t2 
on t1.LATN_ID=cast(t2.CITY_ID  as integer)
where t1.day between #{MONTH}00 and #{MONTH}40
      and t1.network=4  
      and t2.city_name not in ('广东','未知')
	]]>	
</sqlTemplate>

<sqlTemplate id="CustomExperience_KQI_Mean_City" description="取各地市的KQI均值指标">
	<![CDATA[	
	select t2.city_name
        , case sum(case when KQI_TYPE='WEBPAGE_FIRST_PKG_DELAY' and KQI_VALUE>=0 then STAT_NUM else 0 end)
	     when 0 then -1
	     else round(sum(case when KQI_TYPE='WEBPAGE_FIRST_PKG_DELAY' and KQI_VALUE>=0 then STAT_NUM*KQI_VALUE else 0 end)
        	/sum(case when KQI_TYPE='WEBPAGE_FIRST_PKG_DELAY' and KQI_VALUE>=0 then STAT_NUM else 0 end)) end WEBPAGE_FIRST_PKG_DELAY_MEAN -- 首包时延均值 ms
        , case sum(case when KQI_TYPE='WEBPAGE_OPEN_DELAY' and KQI_VALUE>=0 then STAT_NUM else 0 end)
	     when 0 then -1
       else round(sum(case when KQI_TYPE='WEBPAGE_OPEN_DELAY' and KQI_VALUE>=0 then STAT_NUM*KQI_VALUE else 0 end) 
        	/sum(case when KQI_TYPE='WEBPAGE_OPEN_DELAY' and KQI_VALUE>=0 then STAT_NUM else 0 end)) end WEBPAGE_OPEN_DELAY_MEAN -- 首页时延均值 ms
        , case sum(case when KQI_TYPE='VIDIO_DOWNLOAD_RATE' and KQI_VALUE>=0 then STAT_NUM else 0 end)
	     when 0 then -1
       else round(sum(case when KQI_TYPE='VIDIO_DOWNLOAD_RATE' and KQI_VALUE>=0 then STAT_NUM*KQI_VALUE else 0 end)
        	/sum(case when KQI_TYPE='VIDIO_DOWNLOAD_RATE' and KQI_VALUE>=0 then STAT_NUM else 0 end)) end WEBPAGE_OPEN_DELAY_MEAN -- 视频下载速率均值 kbps
from NOCE.FRT_DPI_KQI_STAT_D t1 
join NOCE.DIM_TELE_CITY t2 
on t1.LATN_ID=cast(t2.CITY_ID  as integer)
where t1.day between #{MONTH}00 and #{MONTH}40
      and t1.network=4  
      and t2.city_name not in ('广东','未知')
group by t2.city_name
	]]>	
</sqlTemplate>

<sqlTemplate id="CustomExperience_province_cei" description="取全省各地市的CEI指标">
<![CDATA[
select city_name
      ,round(avg(cei_cell)) as avg_cie_cell -- CEI指标均值
from noce.FRT_CEI_CELL_D a
join (select * from noce.dim_sector where day=#{DATE_END} and nettype='4G') b
on a.base_statn_id=b.base_statn_id and a.cell_id=b.cell_id
where a.day between #{DATE_BEGIN} and #{DATE_END}  and city_name is not null
group by city_name;
]]>	
</sqlTemplate>

<sqlTemplate id="CustomExperience_province_flow" description="取全省各地市的流量指标">
<![CDATA[
select city_name
      ,round(sum(flow_all)/1024) as sum_flow_all -- 总流量,GB
from noce.FRT_3G4GFLOW_SECTOR_M a
join (select * from noce.dim_sector where day=#{DATE_END} and nettype='4G') b
on a.base_statn_id=b.base_statn_id and a.SECTOR_ID=b.cell_id
where a.month=#{MONTH}
      and a.nettype='4G'
group by city_name;
]]>	
</sqlTemplate>

<sqlTemplate id="CustomExperience_province_usernum" description="取全省各地市的用户数指标">
<![CDATA[
select city_name
      ,round(max(DPI_USERS)/10000,2) as max_dpi_users -- 用户数,万人
from noce.FRT_LTE_DPI_USERS_D a
join noce.dim_tele_city b
on a.LATN_ID=cast(b.city_id as integer)
where a.day between #{DATE_BEGIN} and #{DATE_END}
group by city_name;
]]>	
</sqlTemplate>

<sqlTemplate id="CustomExperience_city_cei" description="取某地市各区县的CEI指标">
<![CDATA[
select city_name,area_name
      ,round(avg(cei_cell)) as avg_cie_cell -- CEI指标均值
from noce.FRT_CEI_CELL_D a
join (select * from noce.dim_sector where day=#{DATE_END} and nettype='4G' and city_name='#{city_name}') b 
on a.base_statn_id=b.base_statn_id and a.cell_id=b.cell_id
where a.day between #{DATE_BEGIN} and #{DATE_END}
group by city_name,area_name;
]]>	
</sqlTemplate>

<sqlTemplate id="CustomExperience_city_flow" description="取某地市各区县的流量指标">
<![CDATA[
select city_name,area_name
      ,round(sum(flow_all)/1024/1024,2) as sum_flow_all -- 总流量,GB
from noce.FRT_3G4GFLOW_SECTOR_M a
join (select * from noce.dim_sector where day=#{DATE_END} and nettype='4G' and city_name='#{city_name}') b 
on a.base_statn_id=b.base_statn_id and a.SECTOR_ID=b.cell_id
where a.month=#{MONTH}
      and a.nettype='4G'
group by city_name,area_name;
]]>	
</sqlTemplate>

<sqlTemplate id="singlePerception_customerService_BDKQILOC" description="首包、首页、视频下载质差点">
<![CDATA[	
select day
	,a.ENODEID 	-- 基站ID
	,a.CELLID 		-- 小区ID
	,b.BASE_STATN_NAME 	-- 基站名称
	,b.cell_name 	-- 小区名称
	,b.SECTOR_ADDR 	-- 扇区地址
	,a.KQI_TYPE 	-- KQI类型
	,round(a.BAD_RATE*100,2) BAD_RATE  		-- 质差率
	,b.longitude_baidu 	-- 百度经度
	,b.latitude_baidu 	-- 百度纬度
from
(
	with t as (
		select *
			from noce.AGG_USER_KQI_TOPCELL_D
		where day between #{START_DAY} and #{END_DAY}
			and MDN="#{MDN}"
	)
	select day,kqi_type
		,ENODEID_TOP1 as ENODEID
		,CELLID_TOP1 as CELLID
		,BAD_RATE_TOP1 as BAD_RATE
	from t
	union all
	select day,kqi_type
		,ENODEID_TOP2 as ENODEID
		,CELLID_TOP2 as CELLID
		,BAD_RATE_TOP2 as BAD_RATE
	from t
	union all
	select day,kqi_type
		,ENODEID_TOP3 as ENODEID
		,CELLID_TOP3 as CELLID
		,BAD_RATE_TOP3 as BAD_RATE
	from t
	union all
	select day,kqi_type
		,ENODEID_TOP4 as ENODEID
		,CELLID_TOP4 as CELLID
		,BAD_RATE_TOP4 as BAD_RATE
	from t
	union all
	select day,kqi_type
		,ENODEID_TOP5 as ENODEID
		,CELLID_TOP5 as CELLID
		,BAD_RATE_TOP5 as BAD_RATE
	from t
	union all
	select day,kqi_type
		,ENODEID_TOP6 as ENODEID
		,CELLID_TOP6 as CELLID
		,BAD_RATE_TOP6 as BAD_RATE
	from t
	union all
	select day,kqi_type
		,ENODEID_TOP7 as ENODEID
		,CELLID_TOP7 as CELLID
		,BAD_RATE_TOP7 as BAD_RATE
	from t
	union all
	select day,kqi_type
		,ENODEID_TOP8 as ENODEID
		,CELLID_TOP8 as CELLID
		,BAD_RATE_TOP8 as BAD_RATE
	from t
	union all
	select day,kqi_type
		,ENODEID_TOP9 as ENODEID
		,CELLID_TOP9 as CELLID
		,BAD_RATE_TOP9 as BAD_RATE
	from t
	union all
	select day,kqi_type
		,ENODEID_TOP10 as ENODEID
		,CELLID_TOP10 as CELLID
		,BAD_RATE_TOP10 as BAD_RATE
	from t
) a
join
(
	select BASE_STATN_ID
		,cell_id
		,BASE_STATN_NAME
		,cell_name
		,SECTOR_ADDR
		,longitude_baidu
		,latitude_baidu
	from noce.DIM_SECTOR
	where day=#{END_DAY}
	) b
on a.ENODEID=b.BASE_STATN_ID and a.CELLID=b.cell_id
order by ENODEID, CELLID, day
      ]]>	
</sqlTemplate>

<sqlTemplate id="singlePerception_customerService_weak" description="覆盖差的小区">
<![CDATA[	
select day
	,a.ENODEID 	-- 基站ID
	,a.CELLID 		-- 小区ID
	,b.BASE_STATN_NAME 	-- 基站名称
	,b.cell_name 	-- 小区名称
	,b.SECTOR_ADDR 	-- 扇区地址
	,a.BD_NUM 		-- LteScRSRP<=105记录数
	,b.longitude_baidu 	-- 百度经度
	,b.latitude_baidu 	-- 百度纬度
from
(
	with t as (
		select *
		from noce.AGG_USER_4G_COVER_D 
		where day between #{START_DAY} and #{END_DAY}  
			and MSISDN="#{MSISDN}"
	)
	select day
		,ENODEID_105_TOP1 as ENODEID
		,CELLID_105_TOP1 as CELLID
		,NUM_105_TOP1 as BD_NUM
	from t
	union all
	select day
		,ENODEID_105_TOP2 as ENODEID
		,CELLID_105_TOP2 as CELLID
		,NUM_105_TOP2 as BD_NUM
	from t
	union all
	select day
		,ENODEID_105_TOP3 as ENODEID
		,CELLID_105_TOP3 as CELLID
		,NUM_105_TOP3 as BD_NUM
	from t
	union all
	select day
		,ENODEID_105_TOP4 as ENODEID
		,CELLID_105_TOP4 as CELLID
		,NUM_105_TOP4 as BD_NUM
	from t
	union all
	select day
		,ENODEID_105_TOP5 as ENODEID
		,CELLID_105_TOP5 as CELLID
		,NUM_105_TOP5 as BD_NUM
	from t
	union all
	select day
		,ENODEID_105_TOP6 as ENODEID
		,CELLID_105_TOP6 as CELLID
		,NUM_105_TOP6 as BD_NUM
	from t
	union all
	select day
		,ENODEID_105_TOP7 as ENODEID
		,CELLID_105_TOP7 as CELLID
		,NUM_105_TOP7 as BD_NUM
	from t
	union all
	select day
		,ENODEID_105_TOP8 as ENODEID
		,CELLID_105_TOP8 as CELLID
		,NUM_105_TOP8 as BD_NUM
	from t
	union all
	select day
		,ENODEID_105_TOP9 as ENODEID
		,CELLID_105_TOP9 as CELLID
		,NUM_105_TOP9 as BD_NUM
	from t
	union all
	select day
		,ENODEID_105_TOP10 as ENODEID
		,CELLID_105_TOP10 as CELLID
		,NUM_105_TOP10 as BD_NUM
	from t
) a
join
(
	select BASE_STATN_ID
		,cell_id
		,BASE_STATN_NAME
		,cell_name
		,SECTOR_ADDR
		,longitude_baidu
		,latitude_baidu
	from noce.DIM_SECTOR
	where day=#{END_DAY} 
	) b
on a.ENODEID=b.BASE_STATN_ID and a.CELLID=b.cell_id
order by ENODEID, CELLID, day
      ]]>	
</sqlTemplate>

<sqlTemplate id="singlePerception_customerService_location" description="覆盖差的小区">
<![CDATA[	
select * 	-- 轨迹信息
from noce.AGG_3GUSER_LOCATION
where day between #{START_DAY} and #{END_DAY}
	and User_Number="#{USER_NUMBER}"
order by day
      ]]>	
</sqlTemplate>
<sqlTemplate id="singlePerception_customerService_QD" description="基站信息">
<![CDATA[	
select BASE_STATN_NAME 	-- 基站名称
	,SECTOR_NAME 		-- 扇区名称
	,SECTOR_ADDR 		-- 地址
from noce.DIM_SECTOR
where BASE_STATN_ID=#{BASE_STATN_ID} 
	and SECTOR_ID=#{SECTOR_ID} 
	and day=#{END_DAY}
      ]]>	
</sqlTemplate>


<sqlTemplate id="diffuseUser_getProvinceOutSql_Province" description="省内漫出_全省">
<![CDATA[
select b.city_name, count(distinct IMSI)
from noce.AGG_3GROAM_CITY_LIST a
join noce.DIM_TELE_CITY b on a.HOME_LATN_ID=cast( b.city_id as int) 
where DAY between #{DATE_BEGIN} and #{DATE_END} and HOME_PROVINCE='广东' and LATN_ID<>HOME_LATN_ID
group by b.city_name,city_display_order 
order by b.city_display_order,b.city_name
]]>

</sqlTemplate>

<sqlTemplate id="diffuseUser_getProvinceOutSql_City" description="省内漫出_地市">
<![CDATA[
select b.city_name, count(distinct IMSI)
from noce.AGG_3GROAM_CITY_LIST a
join noce.DIM_TELE_CITY b on a.LATN_ID=cast( b.city_id as int) 
where DAY between #{DATE_BEGIN} and #{DATE_END} and HOME_PROVINCE='广东' and HOME_LATN_ID=#{HOME_LATN_ID} and LATN_ID<>HOME_LATN_ID
group by b.city_name,city_display_order 
order by b.city_display_order,b.city_name
]]>
</sqlTemplate>

<sqlTemplate id="BGCEHomepage_01_good_ratio_and_flow_ratio" description="全省或某分公司楼群感知优良率">
<![CDATA[
select case when count(*)=0 then 0
	          else nvl(round((1-sum(case when ( (WPFPGR<0.7 and WPFPGR_total>10) or (WPOGR<0.7 and WPOGR_tatal>10) or (VDLGR<0.7 and VDLGR_tatal>10) ) then 1 else 0 end)/count(*))*100),0) 
	     end as Good_BG_Ratio --  优良楼群占比
	     ,case when sum(case when  concerned=1  then 1 else 0 end)=0 then 0 
	     	     else nvl(round((1-sum(case when ( ((WPFPGR<0.7 and WPFPGR_total>10) or (WPOGR<0.7 and WPOGR_tatal>10) or (VDLGR<0.7 and VDLGR_tatal>10)) and concerned=1 ) then 1 else 0 end)
	     	             /sum(case when  concerned=1  then 1 else 0 end)  )*100),0) 
	     	end as Good_BG_Ratio_i --  重点优良楼群占比
       ,case when sum(flow_tot)=0 then 0
	          else nvl(round((sum(case when (buildinggroup_id is not null and TRIM(buildinggroup_id) <> '' ) then flow_tot else 0 end)/sum(flow_tot))*100),0) 
	     end as Flow_Ratio --  楼群流量/所有流量
       ,case when sum(flow_tot)=0 then 0
	          else nvl(round((sum(case when (buildinggroup_id is not null and TRIM(buildinggroup_id) <> '' and concerned=1) then flow_tot else 0 end)/sum(flow_tot))*100),0) 
	     end as Flow_Ratio_i --  楼群流量/所有流量
from 
( -- 子查询，计算每个楼群的优良率
  select buildinggroup_id,concerned
         ,sum(size_all_TOT) as flow_tot -- 流量
         ,case when sum(WEBPAGE_FIRST_ALL)=0 then 1 else 1-sum(WEBPAGE_FIRST_PKG_DELAY_BAD)/sum(WEBPAGE_FIRST_ALL) end as WPFPGR -- 首包时延优良率
         ,sum(WEBPAGE_FIRST_ALL) as WPFPGR_total -- 首包时延优良率总测试次数
         ,case when sum(WEBPAGE_OPEN_ALL)=0 then 1 else 1-sum(WEBPAGE_OPEN_DELAY_BAD)/sum(WEBPAGE_OPEN_ALL) end as WPOGR -- 首页时延优良率
         ,sum(WEBPAGE_OPEN_ALL) as WPOGR_tatal -- 首页时延优良率总测试次数
         ,case when sum(VIDIO_ALL)=0 then 1 else 1-sum(VIDIO_DOWNLOAD_RATE_BAD)/sum(VIDIO_ALL) end as VDLGR -- 视频下载优良率
         ,sum(VIDIO_ALL) as VDLGR_tatal -- 视频下载优良率总测试次数
  from noce.FRT_BLDG_4GFLOW_H
  where hour between #{STARTHOUR} and #{ENDHOUR}
      #{CITY_CONDICTION}
  group by buildinggroup_id,concerned
) a;
]]>
</sqlTemplate>

<sqlTemplate id="BGCEHomepage_02_usernum_ratio" description="全省或某分公司楼群用户占比">
<![CDATA[
select round(un_bg/un*100) as user_ratio_bg  -- 楼群用户占比
       ,round(un_bg_i/un*100) as user_ratio_bg_i  -- 重点楼群用户占比
from 
(  select count(distinct MSISDN) as un_bg
  from noce.AGG_BLDG_USER_LIST
  where hour between #{STARTHOUR} and #{ENDHOUR}
      #{CITY_CONDICTION}
      and  buildinggroup_id is not null and TRIM(buildinggroup_id) <> ''
) a
join 
(  select count(distinct MSISDN) as un_bg_i
  from noce.AGG_BLDG_USER_LIST
  where hour between #{STARTHOUR} and #{ENDHOUR}
      #{CITY_CONDICTION}
      and concerned =1
) b
join
(  select count(distinct MSISDN) as un
  from noce.AGG_BLDG_USER_LIST
  where hour between #{STARTHOUR} and #{ENDHOUR}
      #{CITY_CONDICTION}
) c
]]>
</sqlTemplate>

<sqlTemplate id="BGCEHomepage_03_good_ratio_city" description="全省各分公司楼群感知优良率">
<![CDATA[
select city_name
       ,case when count(*)=0 then 0
	          else nvl(round((1-sum(case when ((WPFPGR<0.7 and WPFPGR_total>10) or (WPOGR<0.7 and WPOGR_tatal>10) or (VDLGR<0.7 and VDLGR_tatal>10)) then 1 else 0 end)/count(*))*100),0) 
	     end as Good_BG_Ratio --  优良楼群占比
	     ,case when sum(case when  concerned=1  then 1 else 0 end)=0 then 0 
	     	     else nvl(round((1-sum(case when ( ((WPFPGR<0.7 and WPFPGR_total>10) or (WPOGR<0.7 and WPOGR_tatal>10) or (VDLGR<0.7 and VDLGR_tatal>10)) and concerned=1 ) then 1 else 0 end)
	     	             /sum(case when  concerned=1  then 1 else 0 end)  )*100),0) 
	     	end as Good_BG_Ratio_i --  重点优良楼群占比
	     ,count(*) as BG_TotalNum --  所有楼群个数
	     ,sum(case when ((WPFPGR<0.7 and WPFPGR_total>10) or (WPOGR<0.7 and WPOGR_tatal>10) or (VDLGR<0.7 and VDLGR_tatal>10)) then 1 else 0 end) as BG_BadNum --  质差楼群个数
	     ,sum(case when  concerned=1  then 1 else 0 end) as BG_ConcernedNum--  重点楼群个数
	     ,sum(case when ( ((WPFPGR<0.7 and WPFPGR_total>10) or (WPOGR<0.7 and WPOGR_tatal>10) or (VDLGR<0.7 and VDLGR_tatal>10)) and concerned=1 ) then 1 else 0 end) as BG_ConcernedBadNum--  质差重点楼群个数
from 
( -- 子查询，计算每个楼群的优良率
  select substring(trim(building_city),1,6) as city_name
         ,buildinggroup_id
         ,concerned
         ,case when sum(WEBPAGE_FIRST_ALL)=0 then 1 else 1-sum(WEBPAGE_FIRST_PKG_DELAY_BAD)/sum(WEBPAGE_FIRST_ALL) end as WPFPGR -- 首包时延优良率
         ,sum(WEBPAGE_FIRST_ALL) as WPFPGR_total -- 首包时延优良率总测试次数
         ,case when sum(WEBPAGE_OPEN_ALL)=0 then 1 else 1-sum(WEBPAGE_OPEN_DELAY_BAD)/sum(WEBPAGE_OPEN_ALL) end as WPOGR -- 首页时延优良率
         ,sum(WEBPAGE_OPEN_ALL) as WPOGR_tatal -- 首页时延优良率总测试次数
         ,case when sum(VIDIO_ALL)=0 then 1 else 1-sum(VIDIO_DOWNLOAD_RATE_BAD)/sum(VIDIO_ALL) end as VDLGR -- 视频下载优良率
         ,sum(VIDIO_ALL) as VDLGR_tatal -- 视频下载优良率总测试次数
  from noce.FRT_BLDG_4GFLOW_H
  where hour between #{STARTHOUR} and #{ENDHOUR}
  group by city_name,buildinggroup_id,concerned
) a
where city_name<>''
group by city_name;
]]>
</sqlTemplate>

<sqlTemplate id="BGCEHomepage_04_good_ratio_district" description="某市各区县楼群感知优良率">
<![CDATA[
select district_name
       ,case when count(*)=0 then 0
	          else nvl(round((1-sum(case when ((WPFPGR<0.7 and WPFPGR_total>10) or (WPOGR<0.7 and WPOGR_tatal>10) or (VDLGR<0.7 and VDLGR_tatal>10)) then 1 else 0 end)/count(*))*100),0) 
	     end as Good_BG_Ratio --  优良楼群占比
	     ,case when sum(case when  concerned=1  then 1 else 0 end)=0 then 0 
	     	     else nvl(round((1-sum(case when ( ((WPFPGR<0.7 and WPFPGR_total>10) or (WPOGR<0.7 and WPOGR_tatal>10) or (VDLGR<0.7 and VDLGR_tatal>10)) and concerned=1 ) then 1 else 0 end)
	     	             /sum(case when  concerned=1  then 1 else 0 end)  )*100),0) 
	     	end as Good_BG_Ratio_i --  重点优良楼群占比
	     ,count(*) as BG_TotalNum --  所有楼群个数
	     ,sum(case when ((WPFPGR<0.7 and WPFPGR_total>10) or (WPOGR<0.7 and WPOGR_tatal>10) or (VDLGR<0.7 and VDLGR_tatal>10)) then 1 else 0 end) as BG_BadNum --  质差楼群个数
	     ,sum(case when  concerned=1  then 1 else 0 end) as BG_ConcernedNum--  重点楼群个数
	     ,sum(case when ( ((WPFPGR<0.7 and WPFPGR_total>10) or (WPOGR<0.7 and WPOGR_tatal>10) or (VDLGR<0.7 and VDLGR_tatal>10)) and concerned=1 ) then 1 else 0 end) as BG_ConcernedBadNum--  质差重点楼群个数
from 
( -- 子查询，计算每个楼群的优良率
  select district_name
         ,buildinggroup_id
         ,concerned
         ,case when sum(WEBPAGE_FIRST_ALL)=0 then 1 else 1-sum(WEBPAGE_FIRST_PKG_DELAY_BAD)/sum(WEBPAGE_FIRST_ALL) end as WPFPGR -- 首包时延优良率
         ,sum(WEBPAGE_FIRST_ALL) as WPFPGR_total -- 首包时延优良率总测试次数
         ,case when sum(WEBPAGE_OPEN_ALL)=0 then 1 else 1-sum(WEBPAGE_OPEN_DELAY_BAD)/sum(WEBPAGE_OPEN_ALL) end as WPOGR -- 首页时延优良率
         ,sum(WEBPAGE_OPEN_ALL) as WPOGR_tatal -- 首页时延优良率总测试次数
         ,case when sum(VIDIO_ALL)=0 then 1 else 1-sum(VIDIO_DOWNLOAD_RATE_BAD)/sum(VIDIO_ALL) end as VDLGR -- 视频下载优良率
         ,sum(VIDIO_ALL) as VDLGR_tatal -- 视频下载优良率总测试次数
  from noce.FRT_BLDG_4GFLOW_H
  where hour between #{STARTHOUR} and #{ENDHOUR}
      and building_city like '#{CITYNAME}%' 
  group by district_name,buildinggroup_id,concerned
) a
where district_name is not null
group by district_name;
]]>
</sqlTemplate>

<sqlTemplate id="BGCEHomepage_05_bad_top20" description="全省或某分公司楼群感知综合优良率最差的20个楼群">
<![CDATA[
select buildinggroup_id,buildinggroup_name
       ,round( (
       ((case when sum(WEBPAGE_FIRST_ALL)=0 then 1 else 1-sum(WEBPAGE_FIRST_PKG_DELAY_BAD)/sum(WEBPAGE_FIRST_ALL) end ) * 0.3 -- 首包时延优良率
       	+
        (case when sum(WEBPAGE_OPEN_ALL)=0 then 1 else 1-sum(WEBPAGE_OPEN_DELAY_BAD)/sum(WEBPAGE_OPEN_ALL) end ) * 0.7 -- 首页时延优良率
        ) * 0.6
        +
        (case when sum(VIDIO_ALL)=0 then 1 else 1-sum(VIDIO_DOWNLOAD_RATE_BAD)/sum(VIDIO_ALL) end ) *0.4  -- 首页时延优良率
               )* 100 )
        as total_CE -- 综合优良率
from noce.FRT_BLDG_4GFLOW_H
where hour between #{STARTHOUR} and #{ENDHOUR}
    #{CITY_CONDICTION}
group by buildinggroup_id,buildinggroup_name
having sum(WEBPAGE_FIRST_ALL)+sum(WEBPAGE_OPEN_ALL)+sum(VIDIO_ALL)>10
order by total_CE limit 20
]]>
</sqlTemplate>


<sqlTemplate id="GoOutWays_01_province" description="全省出行方式统计">
<![CDATA[
select sum(nvl(air_num,0)) as un_air --  飞机出行人数
      ,sum(nvl(Train_Num,0)) as un_train --  火车出行人数
      ,sum(nvl(Bus_Num,0)) as un_bus --  汽车出行人数
      ,sum(nvl(IN_PROVINCE_NUM,0)+nvl(OUT_PROVINCE_NUM,0)-nvl(air_num,0)-nvl(Train_Num,0)-nvl(Bus_Num,0)) as un_other --  自驾出行人数
from noce.FRT_TRAFFIC_NUM
where day between #{STARTDAY} and #{ENDDAY}
]]>
</sqlTemplate>

<sqlTemplate id="GoOutWays_02_city" description="各地市省出行方式统计">
<![CDATA[
select city_name,city_display_order
      ,sum(nvl(air_num,0)) as un_air --  飞机出行人数
      ,sum(nvl(Train_Num,0)) as un_train --  火车出行人数
      ,sum(nvl(Bus_Num,0)) as un_bus --  汽车出行人数
      ,sum(nvl(IN_PROVINCE_NUM,0)+nvl(OUT_PROVINCE_NUM,0)-nvl(air_num,0)-nvl(Train_Num,0)-nvl(Bus_Num,0)) as un_other --  自驾出行人数
from noce.FRT_TRAFFIC_NUM a
join noce.dim_tele_city b
on a.HOME_LATN_ID = cast(b.city_id as integer)
where day between #{STARTDAY} and #{ENDDAY}
group by city_name,city_display_order
order by city_display_order
]]>
</sqlTemplate>
<sqlTemplate id="hotPointProvincesNew_01_province_flow" description="全省流量趋势图统计">
<![CDATA[
select hour,flow as Gbyte from noce.FRT_DPI_FLOW_H where hour between #{STARTHOUR} and #{ENDHOUR} order by hour,Gbyte
]]>
</sqlTemplate>
<sqlTemplate id="hotPointProvincesNew_02_area_flow" description="地区流量数趋势图统计">
<![CDATA[
SELECT HOUR ,ROUND(SUM(TRAFFIC_UL+TRAFFIC_DL)/1024,2) as Gbyte 
FROM NOCE.AGG_TRAFFIC_EXFO_H 
WHERE hour between #{STARTHOUR} and #{ENDHOUR}
      #{AREACONDICTION}
GROUP BY HOUR ORDER BY HOUR
]]>
</sqlTemplate>
<sqlTemplate id="hotPointProvincesNew_03_province_service" description="全省应用TOP10统计">
<![CDATA[
SELECT service_name, user_num as usenums 
FROM  noce.FRT_DPI_SERVICE_H 
WHERE HOUR = #{MAXHOUR} and service_name is not null and service_name <>'' and service_name not in ('ICMP','未名业务') 
ORDER BY usenums DESC limit 10
]]>
</sqlTemplate>
<sqlTemplate id="hotPointProvincesNew_04_area_service" description="地区应用TOP10统计">
<![CDATA[
SELECT service_name,COUNT(DISTINCT MSISDN) AS usenums 
FROM NOCE.AGG_LTE_DPI_EXFO_INFO 
WHERE HOUR = #{MAXHOUR} and service_name is not null and service_name <>''
      and service_name not in ('ICMP','未名业务') 
      #{AREACONDICTION}
GROUP BY service_name ORDER BY usenums DESC limit 10
]]>
</sqlTemplate>
<sqlTemplate id="hotPointProvincesNew_05_province_factory" description="全省终端厂家TOP10统计">
<![CDATA[
SELECT FACTORY,user_num AS usenums 
FROM NOCE.FRT_DPI_FACTORY_H 
WHERE HOUR = #{MAXHOUR} and FACTORY is not null and FACTORY !='未知厂商' and FACTORY <>''
ORDER BY usenums DESC limit 10
]]>
</sqlTemplate>
<sqlTemplate id="hotPointProvincesNew_06_area_factory" description="地区终端厂家TOP10统计">
<![CDATA[
SELECT FACTORY,COUNT(DISTINCT User_Number) AS usenums 
FROM NOCE.AGG_2G3G_EXFO_INFO 
WHERE HOUR = #{MAXHOUR} 
      and FACTORY is not null and FACTORY <>''
      #{AREACONDICTION}
      and 4G_USER_FLAG=1 
GROUP BY FACTORY 
ORDER BY usenums DESC limit 10
]]>
</sqlTemplate>
<sqlTemplate id="hotPointProvincesNew_07_province_term" description="全省终端型号TOP10统计">
<![CDATA[
SELECT term_type as term_short_name,user_num AS usenums 
FROM NOCE.FRT_DPI_TERM_TYPE_H 
WHERE HOUR = #{MAXHOUR} and term_type is not null ORDER BY usenums DESC limit 10
]]>
</sqlTemplate>
<sqlTemplate id="hotPointProvincesNew_08_area_term" description="地区终端型号TOP10统计">
<![CDATA[
SELECT d.term_short_name,COUNT(DISTINCT User_Number) AS usenums 
FROM NOCE.AGG_2G3G_EXFO_INFO t1,NOCE.dim_market_term d
WHERE HOUR = #{MAXHOUR} 
      and t1.TERM_TYPE=d.TERM_TYPE 
      #{AREACONDICTION}
      and 4G_USER_FLAG=1 
GROUP BY d.term_short_name 
ORDER BY usenums DESC limit 10
]]>
</sqlTemplate>
<sqlTemplate id="hotPointProvincesNew_09_province_heatmap_5m" description="全省及广州热力图，每5分钟的最新数据">
<![CDATA[
select sts_time,lng,lat,sum(STAY_USERNUM+IN_USERNUM) as count 
from 
 (
 select distinct #{LON_LAT_SELECTS}, city_id,base_statn_id,bsc_id 
 FROM noce.dim_sector WHERE nettype='3G' AND day= #{DIM_SECTOR_DAY}  #{CITY_CONDICTION}
 ) t2,
noce.FRT_3GBTS_USERNUM_5M t1 
where t1.latn_id = CAST(t2.city_id as STRING) and
t1.bsc_id = CAST(t2.bsc_id as STRING) and t1.base_statn_id = CAST(t2.base_statn_id as STRING)
and t1.sts_time= #{STS_TIME}
group by sts_time,lng, lat
]]>
</sqlTemplate>
<sqlTemplate id="hotPointProvincesNew_10_province_heatmap_hour" description="全省及广州热力图,每小时的最近12小时数据">
<![CDATA[
select hour,lng,lat,sum(usernum) as count 
 from 
 (
 select distinct #{LON_LAT_SELECTS}, city_id,base_statn_id,bsc_id 
 FROM noce.dim_sector WHERE nettype='3G' AND day= #{DIM_SECTOR_DAY} #{CITY_CONDICTION}
 ) t2,
 noce.FRT_3GBTS_USERNUM_H t1 
 where t1.latn_id = t2.city_id and
 t1.bsc_id = t2.bsc_id 
and t1.base_statn_id  = t2.base_statn_id
 and t1.hour=#{ENDHOUR}
 group by hour, lng, lat
 order by hour
]]>
</sqlTemplate>
<sqlTemplate id="hotPointProvincesNew_11_area_heatmap_5m" description="地区热力图，每5分钟的最新数据">
<![CDATA[
select lng,lat,sum(STAY_USERNUM+IN_USERNUM) as count 
 from 
 (
select distinct sector_longitude as lng,sector_latitude as lat,bts_id,bsc_id 
 FROM noce.dim_2G3G_EXPO_SECTOR where #{AREACONDICTION}
 ) t2,
 noce.FRT_3GBTS_USERNUM_5M t1 
 where 
 t1.bsc_id = t2.bsc_id and t1.base_statn_id  = t2.bts_id
 and t1.sts_time= #{STS_TIME}
 group by lng, lat
]]>
</sqlTemplate>
<sqlTemplate id="hotPointProvincesNew_12_area_heatmap_hour" description="地区热力图，每小时的最近12小时数据">
<![CDATA[
select hour,lng,lat,sum(usernum) as count from (
select distinct sector_longitude as lng,sector_latitude as lat,bts_id,bsc_id FROM noce.dim_2G3G_EXPO_SECTOR t2 where #{AREACONDICTION}
) t2,noce.FRT_3GBTS_USERNUM_H t1 
where CAST(t1.bsc_id AS STRING) = t2.bsc_id 
and CAST(t1.base_statn_id AS STRING) = t2.bts_id 
and t1.hour=#{ENDHOUR} 
group by hour,lng,lat
order by hour
]]>
</sqlTemplate>
<sqlTemplate id="hotPointProvincesNew_13_province_user_num" description="全省用户数趋势图统计">
<![CDATA[
select hour as time,user_tot as count from noce.FRT_DPI_USER_H where hour between #{STARTHOUR} and #{ENDHOUR} order by time
]]>
</sqlTemplate>
<sqlTemplate id="hotPointProvincesNew_14_area_user_num" description="地区用户数趋势图统计,每天0点起，每10分钟出个点">
<![CDATA[
select case  when time_point<1000 then concat('0',cast(time_point as string)) else cast(time_point as string) end 
       ,COUNT(DISTINCT User_Number) user_num
FROM
NOCE.AGG_3G_BSSAP_5M tm, noce.dim_time_points tp
WHERE
STS_TIME > #{CURRENTDAY}0000
#{AREACONDICTION}
and STS_TIME-#{CURRENTDAY}0000 between (time_point - 100) and time_point
and time_point<=#{CURRENTTIMEPOINT}
GROUP BY time_point
ORDER BY time_point
]]>
</sqlTemplate>

<sqlTemplate id="singlePerception_hbase" description="用户画像改用hbase查询">
<![CDATA[
select sum(CALLER_DURATION) CALLER_DURATION,-- 主叫时长，分钟
sum(CALLED_DURATION) CALLED_DURATION, -- 被叫时长，分钟
sum(CALLER_DURATION+CALLED_DURATION) CALL, -- 总通话时长，分钟
sum(SEND_NUM) SEND_NUM, -- 短信发送条数
sum(RECEIVE_NUM) RECEIVE_NUM, -- 短信接收条数
sum(SEND_NUM+RECEIVE_NUM) SENDANDRECEIVE, -- 短信总条数
sum(FLOW_ALL) AS FLOW_ALL,-- 总流量，单位字节，前端呈现时，不足1M的，转换为K作单位；不足1G的，转换为M；1G及以上的，转换为G。
sum(FLOW_ALL_4G) AS FLOW_ALL_4G,	-- 4G流量
sum(FLOW_ALL_3G) AS FLOW_ALL_3G, -- 3G流量 
group_concat(concat_ws('@_@',cell_name,stay_duration),'#_#') cell, -- 小区
group_concat(concat_ws('@_@',service_name,flow),'#_#') service, -- 应用
nvl(sum(cast(level_115_num as bigint)),0) acover,-- 无覆盖记录数
nvl(sum(level_115_110_num),0) bcover,-- 弱覆盖记录数
nvl(sum(level_110_105_num),0) ccover,-- 较差记录数
nvl(sum(level_105_95_num),0) dcover,-- 一般盖记录数
nvl(sum(level_95_85_num),0) ecover,-- 良好记录数
nvl(sum(level_85_num),0) fcover, -- 优秀记录数
case sum(webpage_first_notbad_r_kqi) when 0 then 0 else nvl(round(100-sum(webpage_first_pkg_delay_bad_kqi)/sum(webpage_first_notbad_r_kqi)*100,2),0) end as WEBPAGE_FIRST_NOTBAD_R_kqi,	-- 首包优良率（%）
case sum(webpage_open_notbad_r_kqi) when 0 then 0 else nvl(round(100-sum(webpage_open_delay_bad_kqi)/sum(webpage_open_notbad_r_kqi)*100,2),0) end as WEBPAGE_OPEN_NOTBAD_R_kqi,	-- 首页优良率（%）
case sum(vidio_download_notbad_r_kqi) when 0 then 0 else nvl(round(100-sum(vidio_download_rate_bad_kqi)/sum(vidio_download_notbad_r_kqi)*100,2),0) end as VIDIO_DOWNLOAD_NOTBAD_R_kqi,	-- 视频下载优良率（%）
case sum(webpage_first_m_kqi) when 0 then 0 else nvl(round(sum(webpage_first_pkg_delay_tot_kqi)/sum(webpage_first_m_kqi),2),0) end as WEBPAGE_FIRST_M_kqi,	-- 首包时延均值（ms）
case sum(webpage_open__m_kqi) when 0 then 0 else nvl(round(sum(webpage_open_delay_tot_kqi)/sum(webpage_open__m_kqi),2),0) end as WEBPAGE_OPEN__M_kqi,	-- 首页时延均值（ms）
case sum(vidio_download_m_kqi) when 0 then 0 else nvl(round(sum(vidio_download_rate_tot_kqi)/sum(vidio_download_m_kqi),2),0) end as VIDIO_DOWNLOAD_M_kqi,	-- 视频下载均值（kbps）
case sum(webpage_first_notbad_r_app) when 0 then 0 else nvl(round(100-sum(webpage_first_pkg_delay_bad_app)/sum(webpage_first_notbad_r_app)*100,2),0) end as WEBPAGE_FIRST_NOTBAD_R_app,	-- 首包优良率（%）
case sum(webpage_open_notbad_r_app) when 0 then 0 else nvl(round(100-sum(webpage_open_delay_bad_app)/sum(webpage_open_notbad_r_app)*100,2),0) end as WEBPAGE_OPEN_NOTBAD_R_app,	-- 首页优良率（%）
case sum(vidio_download_notbad_r_app) when 0 then 0 else nvl(round(100-sum(vidio_download_rate_bad_app)/sum(vidio_download_notbad_r_app)*100,2),0) end as VIDIO_DOWNLOAD_NOTBAD_R_app,	-- 视频下载优良率（%）
case sum(webpage_first_m_app) when 0 then 0 else nvl(round(sum(webpage_first_pkg_delay_tot_app)/sum(webpage_first_m_app),2),0) end as WEBPAGE_FIRST_M_app,	-- 首包时延均值（ms）
case sum(webpage_open__m_app) when 0 then 0 else nvl(round(sum(webpage_open_delay_tot_app)/sum(webpage_open__m_app),2),0) end as WEBPAGE_OPEN__M_app,	-- 首页时延均值（ms）
case sum(vidio_download_m_app) when 0 then 0 else nvl(round(sum(vidio_download_rate_tot_app)/sum(vidio_download_m_app),2),0) end as VIDIO_DOWNLOAD_M_app,	-- 视频下载均值（kbps）
nvl(round(avg(CEI_MDN),2),0) CEI_MDN, -- 感知评分均值
nvl(round(avg(cast(cei_Level as double)),2),0) Cei_Level, -- 打败全网%用户 
nvl(round(avg(cast(wls_tot as double)),2),0) wls_tot, -- 无线覆盖
nvl(round(avg(cast(net_tot as double)),2),0) net_tot, -- 网络接入及保持
nvl(round(avg(cast(srv_tot as double)),2),0) srv_tot, -- 业务体验
group_concat(IMSI,'#_#') IMSI,-- 终端IMSI
group_concat(TERM_TYPE,'#_#') TERM_TYPE, -- 终端
group_concat(concat_ws('@_@',pos_day,POSITION),'#_#') POSITION, -- 位置情况
group_concat(concat_ws('@_@',nvl(day_bd,'null'),nvl(ENODEID_BD,'null'),nvl(CELLID_BD,'null'),nvl(BASE_STATN_NAME_BD,'null'),nvl(CELL_NAME_BD,'null'),nvl(SECTOR_ADDR_BD,'null'),nvl(BD_NUM,'null'),nvl(longitude_baidu_BD,'null'),nvl(latitude_baidu_BD,'null')),'#_#') badcell, -- 质差小区
group_concat(concat_ws('@_@',nvl(day_kqi,'null'),nvl(ENODEID_KQI,'null'),nvl(CELLID_KQI,'null'),nvl(BASE_STATN_NAME_KQI,'null'),nvl(CELL_NAME_KQI,'null'),nvl(SECTOR_ADDR_KQI,'null'),nvl(KQI_TYPE,'null'),nvl(BAD_RATE,'null'),nvl(longitude_baidu_KQI,'null'),nvl(latitude_baidu_KQI,'null')),'#_#') kqibad -- kqi质差点
from noce.DSI_PERSONAS where rowkey>='#{mdnStartDay}' and  rowkey<='#{mdnEndDay}'
]]>
</sqlTemplate>
<sqlTemplate id="singlePerception_searchNearBase" description="用户画像获取基站（仅取指定范围内数据">
<![CDATA[
SELECT * FROM dim_sector  WHERE  DAY = #{day} AND
LONGITUDE_BAIDU <#{LONGITUDE_BAIDU}+0.004903286
and LONGITUDE_BAIDU >#{LONGITUDE_BAIDU}-0.004903286
and LATITUDE_BAIDU< #{LATITUDE_BAIDU}+0.004496608
and LATITUDE_BAIDU>#{LATITUDE_BAIDU}-0.004496608
]]>
</sqlTemplate>
<sqlTemplate id="singlePerception_searchBaseStatus" description="用户画像查询基站当前状态">
	<![CDATA[
SELECT CELL_STATE,enodeb_id,cell_id FROM FRT_AGPS_PC_ENB_D WHERE enodeb_id = #{ENODEDID} and cell_id = #{CELLID} and day =#{DAY}
]]>
</sqlTemplate>
<sqlTemplate id="singlePerception_searchAreaBaseStatus" description="用户画像查询500米区域内基站当前状态">
	<![CDATA[
SELECT t2.base_statn_id,t1.enodeb_id,t1.CELL_STATE,t1.cell_id  FROM frt_agps_pc_enb_d t1,(SELECT base_statn_id,cell_id FROM dim_sector WHERE
SQRT(POWER(ABS(LONGITUDE_BAIDU - #{LONGITUDE_BAIDU})/0.008993649,2)+POWER(ABS(LATITUDE_BAIDU-#{LATITUDE_BAIDU})/0.011808044,2))<0.5
AND DAY = #{DAY})t2 WHERE t2.base_statn_id=t1.enodeb_id
]]>
</sqlTemplate>

<sqlTemplate id="singlePerception_searchAreaBaseStatus2" description="用户画像查询500米区域内基站当前状态">
	<![CDATA[
SELECT * FROM  frt_agps_pc_enb_d  WHERE
 DAY BETWEEN #{startDay}  AND #{endDay} #{LIMIT}
]]>
</sqlTemplate>
<sqlTemplate id="singlePerception_searchBaseAlarmData" description="用户画像查询基站告警数据">
	<![CDATA[
SELECT CELL_STATE FROM frt_bsn_alarm_his_d WHERE NETWORK='L' AND ISOFF='Y'  AND ISRECOVER!='Y' AND DAY = #{DAY} and base_statn_id = #{BASEID}
]]>
</sqlTemplate>
<sqlTemplate id="badCellAnalysis_01_treemenuyf" description="质差小区分析-树状列表-营服中心-Impala">
	<![CDATA[
				select distinct a.CITY_ID 	-- 地市ID
			,a.CITY_NAME 	-- 地市名称
			,MKT_CENTER_CODE 	-- 营服中心ID
			,MKT_CENTER_NAME 	-- 营服中心名称
			,CITY_DISPLAY_ORDER 	-- 地市显示顺序
		from 
		(	
			select * from noce.DIM_SECTOR
			where day=(select max(day) from noce.DIM_SECTOR)
				and NETTYPE="#{NETTYPE}"
				and CITY_ID is not NULL
				and MKT_CENTER_NAME <> ""
				and BASE_STATN_ID is not NULL
				and CELL_ID is not NULL
			) a
		join
		(
			select * from noce.DIM_TELE_CITY
			) b
		on cast(a.CITY_ID as string)=b.CITY_ID
		order by CITY_DISPLAY_ORDER, MKT_CENTER_NAME
	]]>
</sqlTemplate>

<sqlTemplate id="badCellAnalysis_m01_treemenuyf" description="质差小区分析-树状列表-营服中心-mysql">
	<![CDATA[
				select distinct a.CITY_ID 	-- 地市ID
			,a.CITY_NAME 	-- 地市名称
			,MKT_CENTER_CODE 	-- 营服中心ID
			,MKT_CENTER_NAME 	-- 营服中心名称
			,CITY_DISPLAY_ORDER 	-- 地市显示顺序
		from 
		(	
			select * from noce.DIM_SECTOR
			where day=(select max(day) from noce.DIM_SECTOR)
				and NETTYPE="#{NETTYPE}"
				and CITY_ID is not NULL
				#{CITYNAME}
				and MKT_CENTER_NAME <> ""
				and MKT_CENTER_NAME <> "null"
				and MKT_CENTER_NAME <> "0"
				and BASE_STATN_ID is not NULL
				and CELL_ID is not NULL
			) a
		join
		(
			select * from noce.DIM_TELE_CITY
			) b
		on cast(a.CITY_ID as char)=b.CITY_ID
		order by CITY_DISPLAY_ORDER, MKT_CENTER_NAME
	]]>
</sqlTemplate>


	
<sqlTemplate id="badCellAnalysis_04_treemenubs" description="质差小区分析-树状列表-基站">
	<![CDATA[
select distinct a.CITY_ID 	-- 地市ID
	,a.CITY_NAME 	-- 地市名称
	,MKT_CENTER_CODE 	-- 营服中心ID
	,MKT_CENTER_NAME 	-- 营服中心名称
	,CITY_DISPLAY_ORDER 	-- 地市显示顺序
	,BASE_STATN_ID		-- 基站ID
	,BASE_STATN_NAME 	-- 基站名称
	,concat(cast(BASE_STATN_ID as string), "(", nvl(BASE_STATN_NAME, "空"), ")")	 as eNodeB_INFO	-- 基站ID+名称
from 
(	
	select * from noce.DIM_SECTOR
	where day=(select max(day) from noce.DIM_SECTOR)
		and NETTYPE="#{NETTYPE}"
		and CITY_ID=#{CITY_ID}
		and MKT_CENTER_NAME="#{MKT_CENTER_NAME}"
		and BASE_STATN_ID is not NULL
		and CELL_ID is not NULL
	) a
join
(
	select * from noce.DIM_TELE_CITY
	) b
on cast(a.CITY_ID as string)=b.CITY_ID
order by CITY_DISPLAY_ORDER, MKT_CENTER_NAME, BASE_STATN_ID
	]]>
</sqlTemplate>

<sqlTemplate id="badCellAnalysis_m04_treemenubs" description="质差小区分析-树状列表-基站">
	<![CDATA[
		select distinct a.CITY_ID 	-- 地市ID
	,a.CITY_NAME 	-- 地市名称
	,MKT_CENTER_CODE 	-- 营服中心ID
	,MKT_CENTER_NAME 	-- 营服中心名称
	,CITY_DISPLAY_ORDER 	-- 地市显示顺序
	,BASE_STATN_ID		-- 基站ID
	,BASE_STATN_NAME 	-- 基站名称
	,concat(cast(BASE_STATN_ID as char), "(", IFNULL(BASE_STATN_NAME, "空"), ")")	 as eNodeB_INFO	-- 基站ID+名称
from 
(	
	select * from noce.DIM_SECTOR
	where day=(select max(day) from noce.DIM_SECTOR)
		and NETTYPE="#{NETTYPE}"
		and CITY_ID=#{CITY_ID}
		and MKT_CENTER_NAME="#{MKT_CENTER_NAME}"
		and BASE_STATN_ID is not NULL
		and CELL_ID is not NULL
	) a
join
(
	select * from noce.DIM_TELE_CITY
	) b
on cast(a.CITY_ID as char)=b.CITY_ID
order by CITY_DISPLAY_ORDER, MKT_CENTER_NAME, BASE_STATN_ID
	]]>
</sqlTemplate>




<sqlTemplate id="badCellAnalysis_05_treemenucell" description="质差小区分析-树状列表-小区">
	<![CDATA[
		select distinct a.CITY_ID 	-- 地市ID
	,a.CITY_NAME 	-- 地市名称
	,MKT_CENTER_CODE 	-- 营服中心ID
	,MKT_CENTER_NAME 	-- 营服中心名称
	,CITY_DISPLAY_ORDER 	-- 地市显示顺序
	,BASE_STATN_ID		-- 基站ID
	,BASE_STATN_NAME 	-- 基站名称
	,cell_id 			-- 小区ID
	,cell_name 			-- 小区名称
	,concat(cast(BASE_STATN_ID as string), "(", nvl(BASE_STATN_NAME, "空"), ")")	 as eNodeB_INFO	-- 基站ID+名称
	,concat(cast(cell_id as string), "(", nvl(cell_name, "空"), ")") as CELL_INFO				-- 小区ID+名称
from 
(	
	select * from noce.DIM_SECTOR
	where day=(select max(day) from noce.DIM_SECTOR)
		and NETTYPE="#{NETTYPE}"
		and CITY_ID=#{CITY_ID}
		and MKT_CENTER_NAME="#{MKT_CENTER_NAME}"
		and BASE_STATN_ID=#{BASE_STATN_ID}
		and CELL_ID is not NULL
	) a
join
(
	select * from noce.DIM_TELE_CITY
	) b
on cast(a.CITY_ID as string)=b.CITY_ID
order by CITY_DISPLAY_ORDER, MKT_CENTER_NAME, BASE_STATN_ID, cell_id
	]]>
</sqlTemplate>


<sqlTemplate id="badCellAnalysis_m05_treemenucell" description="质差小区分析-树状列表-小区">
	<![CDATA[
		select distinct a.CITY_ID 	-- 地市ID
	,a.CITY_NAME 	-- 地市名称
	,MKT_CENTER_CODE 	-- 营服中心ID
	,MKT_CENTER_NAME 	-- 营服中心名称
	,CITY_DISPLAY_ORDER 	-- 地市显示顺序
	,BASE_STATN_ID		-- 基站ID
	,BASE_STATN_NAME 	-- 基站名称
	,cell_id 			-- 小区ID
	,cell_name 			-- 小区名称
	,concat(cast(BASE_STATN_ID as char), "(", IFNULL(BASE_STATN_NAME, "空"), ")") as eNodeB_INFO	 -- 基站ID+名称
	,concat(cast(cell_id as char), "(", IFNULL(cell_name, "空"), ")") as CELL_INFO				-- 小区ID+名称
from 
(	
	select * from noce.DIM_SECTOR
	where day=(select max(day) from noce.DIM_SECTOR)
		and NETTYPE="#{NETTYPE}"
		and CITY_ID=#{CITY_ID}
		and MKT_CENTER_NAME="#{MKT_CENTER_NAME}"
		and BASE_STATN_ID=#{BASE_STATN_ID}
		and CELL_ID is not NULL
	) a
join
(
	select * from noce.DIM_TELE_CITY
	) b
on cast(a.CITY_ID as char)=b.CITY_ID
order by CITY_DISPLAY_ORDER, MKT_CENTER_NAME, BASE_STATN_ID, cell_id
	]]>
</sqlTemplate>



<sqlTemplate id="badCellAnalysis_06_treemenuquery" description="质差小区分析-树状列表-筛选">
	<![CDATA[
					select a.CITY_ID 	--地市ID
				,a.CITY_NAME 	--地市名称
				,CITY_DISPLAY_ORDER 	--地市显示顺序
				#{YF_RESULT}
				#{BS_RESULT}
				#{CELL_RESULT}
			from 
			(	
				select * from noce.DIM_SECTOR
				where day=(select max(day) from noce.DIM_SECTOR) 
					and NETTYPE="#{NETTYPE}"
					and (
						cast(CITY_ID as string) like "%#{QUERY_CONTENT}%" 
						or CITY_NAME like "%#{QUERY_CONTENT}%"
						#{YF_QUERY}
						#{BS_QUERY}
						#{CELL_QUERY}
					)
					and MKT_CENTER_NAME <> ""
					and MKT_CENTER_NAME is not NULL
				) a
			join
			(
				select * from noce.DIM_TELE_CITY
				) b
			on cast(a.CITY_ID as string)=b.CITY_ID
			order by CITY_DISPLAY_ORDER#{YF_ORDER}#{BS_ORDER}#{CELL_ORDER}
			limit 100
	]]>
</sqlTemplate>




<sqlTemplate id="badCellAnalysis_m06_treemenuquery" description="质差小区分析-树状列表-筛选">
	<![CDATA[
				select a.CITY_ID 	-- 地市ID
			,a.CITY_NAME 	-- 地市名称
			,CITY_DISPLAY_ORDER 	-- 地市显示顺序
			#{YF_RESULT}
			#{BS_RESULT}
			#{CELL_RESULT}
		from 
		(	
			select * from noce.DIM_SECTOR
			where day=(select max(day) from noce.DIM_SECTOR)
				and NETTYPE="#{NETTYPE}"
				and (
					cast(CITY_ID as char) like "%#{QUERY_CONTENT}%" 
					or CITY_NAME like "%#{QUERY_CONTENT}%"
					#{YF_QUERY}
					#{BS_QUERY}
					#{CELL_QUERY}
				)
				-- and MKT_CENTER_NAME <> ""
				-- and MKT_CENTER_NAME is not NULL
				-- and MKT_CENTER_CODE <> ""
				-- and MKT_CENTER_CODE is not NULL
			) a
		join
		(
			select * from noce.DIM_TELE_CITY
			) b
		on cast(a.CITY_ID as char)=b.CITY_ID
		order by CITY_DISPLAY_ORDER#{YF_ORDER}#{BS_ORDER}#{CELL_ORDER}
		limit 100

	]]>
</sqlTemplate>

<sqlTemplate id="badCellAnalysis_m05_cellquery" description="鼠标放到该表的eNodeB或者Cell上，显示该小区的基本信息">
<![CDATA[
SELECT
IS_INDOOR,  -- 室内外
BASE_STATN_ID, -- 基站编号
CELL_ID, -- 扇区编号
CELL_NAME, -- 扇区名称
BAND, -- 频段
ANT_AZIMUTH, -- 方位角
ANT_ENGINE_ANGLE, -- 机械下倾
ANT_ELECTRON_ANGLE, -- 电子下倾
HIGH, -- 天线挂高
LONGITUDE, -- 经度
LATITUDE, -- 纬度
ACCEPTSTATUS, -- 验收状态
SECTOR_ADDR, -- 站址地址
BS_VENDOR -- 厂家
FROM
dim_sector
WHERE
`DAY`=#{DAY}
AND CITY_ID=#{CITY_ID}
AND NETTYPE='4G'
AND BASE_STATN_ID=#{BASE_STATN_ID}
AND CELL_ID=#{CELL_ID}
]]>
</sqlTemplate>

<!--模板将被替换为badCellAnalysis_03_querythreshold-->
<sqlTemplate id="lowData" description="质差小区分析门限值">
	<![CDATA[
	select sum(TCP_SynAck_DL_LOW) as TCP_SynAck_DL_LOW 	-- Tcp第二次握手时延质差门限（ms）
	,sum(TCP_Ack_DL_LOW) as TCP_Ack_DL_LOW 			-- 第三次握手时延质差门限（ms）
	,sum(WIRELESS_DT2_LOW) as WIRELESS_DT2_LOW 		-- 第三次ACK与HTTP GET时延质差门限(ms)
	,sum(HTTP_DELAY_LOW) as HTTP_DELAY_LOW 			-- 首GET响应时延质差门限（ms）
	,sum(WEBPAGE_OPEN_DELAY_LOW) as WEBPAGE_OPEN_DELAY_LOW 		-- 200ok到FIN时延质差门限（ms）
from 
(
	select case KQI when 'WEBPAGE_TCP_SynAck_DL' then LOW else 0 end as TCP_SynAck_DL_LOW
		,case KQI when 'WEBPAGE_TCP_Ack_DL' then LOW else 0 end as TCP_Ack_DL_LOW
		,case KQI when 'WEBPAGE_WIRELESS_DT2' then LOW else 0 end as WIRELESS_DT2_LOW
		,case KQI when 'WEBPAGE_HTTP_DELAY' then LOW else 0 end as HTTP_DELAY_LOW
		,case KQI when 'WEBPAGE_OPEN_DELAY' then LOW else 0 end as WEBPAGE_OPEN_DELAY_LOW
	from noce.DIM_KQI_THRESHOLD_DPI
	where NETTYPE="#{NETTYPE}"
		and KQI_LEVEL_NAME="#{KQILEVEL}"

) t

	]]>
</sqlTemplate>

<sqlTemplate id="badCellAnalysis_02_queryresult" description="质差小区分析-查询结果">
	<![CDATA[
select
     LATN_ID
	,eNodeBName
	,eNodeB_ID
	,CELL_NAME
	,CELL_ID
	,sum(TEST_NUM_ALL) as TEST_NUM_ALL
	,case sum(WEBPAGE_OPEN_DELAY_ALL) when 0 then 0 else round(sum(GOOD_WEBPAGE_OPEN_DELAY)*100/sum(WEBPAGE_OPEN_DELAY_ALL), 2) end as GOOD_WEBPAGE_OPEN_DELAY_RATIO
	,case sum(VIDIO_DOWNLOAD_RATE_ALL) when 0 then 0 else round(sum(GOOD_VIDIO_DOWNLOAD_RATE)*100/sum(VIDIO_DOWNLOAD_RATE_ALL), 2) end as GOOD_VIDIO_DOWNLOAD_RATE_RATIO
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL), 2) end as TCP_SynAck_DL_MEAN
	,sum(BAD_TCP_SynAck_DL_TOT) as BAD_TCP_SynAck_DL_TOT
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(BAD_TCP_SynAck_DL_TOT)*100/sum(TEST_NUM_ALL), 2) end as BD_TCP_SynAck_DL_RATIO
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL), 2) end as TCP_Ack_DL_MEAN
	,sum(BD_TCP_Ack_DL_TOT) as BD_TCP_Ack_DL_TOT
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(BD_TCP_Ack_DL_TOT)*100/sum(TEST_NUM_ALL), 2) end as BD_TCP_Ack_DL_RATIO
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL), 2) end as WIRELESS_DT2_MEAN
	,sum(BD_WIRELESS_DT2_TOT) as BD_WIRELESS_DT2_TOT
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(BD_WIRELESS_DT2_TOT)*100/sum(TEST_NUM_ALL), 2) end as BD_WIRELESS_DT2_RATIO
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL), 2) end as HTTP_DELAY_MEAN
	,sum(BAD_HTTP_DELAY_TOT) as BAD_HTTP_DELAY_TOT
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(BAD_HTTP_DELAY_TOT)*100/sum(TEST_NUM_ALL), 2) end as BAD_HTTP_DELAY_RATIO
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(FIN_DELAY_TOT)/sum(TEST_NUM_ALL), 2) end as FIN_DELAY_MEAN
	,sum(BAD_FIN_DELAY_TOT) as BAD_FIN_DELAY_TOT
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(BAD_FIN_DELAY_TOT)*100/sum(TEST_NUM_ALL), 2) end as BAD_FIN_DELAY_RATIO
from noce.FRT_DPI_DELAY_MB_D
where day between #{START_DAY} and #{END_DAY}
	and network=#{NETWORK}
	#{LATNID_QUERY}
	#{MARKETBASE_QUERY}
	#{ENODEBID_QUERY}
	#{CELLID_QUERY}
group by LATN_ID,eNodeB_ID,eNodeBName,CELL_ID,CELL_NAME
	]]>
</sqlTemplate>

<sqlTemplate id="badCellAnalysis_m02_queryresult" description="质差小区分析-查询结果-mysql查询">
	<![CDATA[
select
     LATN_ID
	,eNodeBName
	,eNodeB_ID
	,CELL_ID
	,CELL_NAME
	,WEBPAGE_OPEN_DELAY_GOOD_RATIO
	,VIDIO_DOWNLOAD_RATE_GOOD_RATIO
	,TEST_NUM_ALL
	,TCP_Ack_DL_MEAN
	,TCP_Ack_DL_LOW
	,BD_TCP_Ack_DL_TOT
	,BD_TCP_Ack_DL_RATIO
	,WIRELESS_DT2_MEAN
	,WIRELESS_DT2_LOW
	,BD_WIRELESS_DT2_TOT
	,BD_WIRELESS_DT2_RATIO
from 
(
	select id, a.LATN_ID, eNodeB_ID, eNodeBName, CELL_ID, CELL_NAME, WEBPAGE_OPEN_DELAY_GOOD_RATIO
		,VIDIO_DOWNLOAD_RATE_GOOD_RATIO, TEST_NUM_ALL, TCP_Ack_DL_MEAN, BD_TCP_Ack_DL_TOT, BD_TCP_Ack_DL_RATIO
		,WIRELESS_DT2_MEAN, BD_WIRELESS_DT2_TOT, BD_WIRELESS_DT2_RATIO
	from
	(
		select 'id' id
			,LATN_ID
			,eNodeB_ID
			,eNodeBName
			,CELL_ID
			,CELL_NAME
			,sum(TEST_NUM_ALL) as TEST_NUM_ALL
			,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL), 2) end as TCP_Ack_DL_MEAN
			,sum(BD_TCP_Ack_DL_TOT) as BD_TCP_Ack_DL_TOT
			,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(BD_TCP_Ack_DL_TOT)*100/sum(TEST_NUM_ALL), 2) end as BD_TCP_Ack_DL_RATIO
			,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL), 2) end as WIRELESS_DT2_MEAN
			,sum(BD_WIRELESS_DT2_TOT) as BD_WIRELESS_DT2_TOT
			,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(BD_WIRELESS_DT2_TOT)*100/sum(TEST_NUM_ALL), 2) end as BD_WIRELESS_DT2_RATIO
		from noce.FRT_DPI_DELAY_MB_D
		where day between #{START_DAY} and #{END_DAY}
			and network=#{NETWORK}
			#{LATNID_QUERY} 
			#{MARKETBASE_QUERY}
			#{ENODEBID_QUERY}
			#{CELLID_QUERY}
		group by LATN_ID,eNodeB_ID,eNodeBName,CELL_ID,CELL_NAME
		) a
	left outer join

	(
		select LATN_ID
			,BASE_STATN_ID
			,SECTOR_ID
			,round(WEBPAGE_OPEN_DELAY_GOOD_RATIO*100, 2) as WEBPAGE_OPEN_DELAY_GOOD_RATIO
			,round(VIDIO_DOWNLOAD_RATE_GOOD_RATIO*100, 2) as VIDIO_DOWNLOAD_RATE_GOOD_RATIO
		from noce.FRT_DPI_CE_SECTOR_D
		where day between #{START_DAY} and #{END_DAY}
			#{LATNID_QUERY} 
			#{BASE_STATN_QUERY}
			#{SECTORID_QUERY}
		) b
	on a.LATN_ID=b.LATN_ID and a.eNodeB_ID=cast(b.BASE_STATN_ID as char) and a.CELL_ID=b.SECTOR_ID
	) t1
join
(
	select a.id
		,TCP_Ack_DL_LOW
		,WIRELESS_DT2_LOW
	from 
	(
		select 'id' id
			,LOW as TCP_Ack_DL_LOW
		from noce.DIM_KQI_THRESHOLD_DPI
		where NETTYPE="#{NETTYPE}"
			and KQI="WEBPAGE_TCP_Ack_DL"
			and KQI_LEVEL_NAME="#{KQILEVEL}"
		) a
	join
	(
		select 'id' id
			,LOW as WIRELESS_DT2_LOW
		from noce.DIM_KQI_THRESHOLD_DPI
		where NETTYPE="#{NETTYPE}"
			and KQI="WEBPAGE_WIRELESS_DT2"
			and KQI_LEVEL_NAME="#{KQILEVEL}"
		) b
		on a.id=b.id
	) t2
on t1.id=t2.id	
]]>
</sqlTemplate>



<!-- 由于速度过慢，此表将被替换成hbase中的badCellAnalysis_14_hbase_cellinfo -->
<sqlTemplate id="badCellAnalysis_03_cellinfo" description="质差小区分析-小区信息-Impala查询">
	<![CDATA[
			select LATN_ID 		-- 地市ID
	,eNodeB_INFO 	-- 基站ID＋名称
	,CELL_INFO 		-- 小区ID＋名称
	,a.day 			-- 时间段，以天为粒度
	,load_condition 	-- 负荷情况
	,airport_indicator 	-- 空口指标
	,cover_quality 		-- 覆盖质量
	,interfer_situation -- 干扰情况
	,emtperc_situation 	-- 空口感知情况
	,business 			-- 繁忙情况
	,top_user 			-- TOP用户
	,TEST_NUM_ALL 		-- 总记录数
	,GOOD_WEBPAGE_OPEN_DELAY_RATIO 	-- 首页时延优良率
	,GOOD_VIDIO_DOWNLOAD_RATE_RATIO -- 视频业务优良率
	,TCP_SynAck_DL_MEAN 	-- Tcp第二次握手时延均值（ms）
	,BAD_TCP_SynAck_DL_TOT 		-- Tcp第二次握手时延质差记录数
	,BD_TCP_SynAck_DL_RATIO 	-- Tcp第二次握手时延质差记录占比
	,TCP_Ack_DL_MEAN 	-- 第三次握手时延均值（ms）
	,BD_TCP_Ack_DL_TOT 	-- 第三次握手时延质差记录数
	,BD_TCP_Ack_DL_RATIO 	-- 第三次握手时延质差记录占比
	,WIRELESS_DT2_MEAN 		-- 第三次ACK与HTTP GET时延均值(ms)
	,BD_WIRELESS_DT2_TOT 	-- 第三次ACK与HTTP GET时延质差记录数
	,BD_WIRELESS_DT2_RATIO 	-- 第三次ACK与HTTP GET的质差记录占比
	,HTTP_DELAY_MEAN 		-- 首GET响应时延均值（ms）
	,BAD_HTTP_DELAY_TOT 	-- 首GET响应时延质差记录数
	,BAD_HTTP_DELAY_RATIO 	-- 首GET响应时延质差记录占比
	,FIN_DELAY_MEAN 		-- 200ok到FIN时延均值（ms）
	,BAD_FIN_DELAY_TOT 		-- 200ok到FIN时延质差记录数
	,BAD_FIN_DELAY_RATIO 	-- 200ok到FIN时延质差记录占比
	
from
(
select LATN_ID 	
	,eNodeB_ID
	,CELL_ID 
	,concat(eNodeB_ID, "(", nvl(eNodeBName, "空"), ")") as eNodeB_INFO	
	,concat(cast(CELL_ID as string), "(", nvl(CELL_NAME, "空"), ")") as CELL_INFO	
	,day 	
	,case sum(WEBPAGE_OPEN_DELAY_ALL) when 0 then 0 else round(sum(GOOD_WEBPAGE_OPEN_DELAY)*100/sum(WEBPAGE_OPEN_DELAY_ALL), 2) end as GOOD_WEBPAGE_OPEN_DELAY_RATIO 
	,case sum(VIDIO_DOWNLOAD_RATE_ALL) when 0 then 0 else round(sum(GOOD_VIDIO_DOWNLOAD_RATE)*100/sum(VIDIO_DOWNLOAD_RATE_ALL), 2) end as GOOD_VIDIO_DOWNLOAD_RATE_RATIO 	
	,sum(TEST_NUM_ALL) as TEST_NUM_ALL 	
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(TCP_SynAck_DL_TOT)/sum(TEST_NUM_ALL), 2) end as TCP_SynAck_DL_MEAN
	,sum(BAD_TCP_SynAck_DL_TOT) as BAD_TCP_SynAck_DL_TOT
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(BAD_TCP_SynAck_DL_TOT)*100/sum(TEST_NUM_ALL), 2) end as BD_TCP_SynAck_DL_RATIO
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL), 2) end as TCP_Ack_DL_MEAN
	,sum(BD_TCP_Ack_DL_TOT) as BD_TCP_Ack_DL_TOT
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(BD_TCP_Ack_DL_TOT)*100/sum(TEST_NUM_ALL), 2) end as BD_TCP_Ack_DL_RATIO
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL), 2) end as WIRELESS_DT2_MEAN
	,sum(BD_WIRELESS_DT2_TOT) as BD_WIRELESS_DT2_TOT
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(BD_WIRELESS_DT2_TOT)*100/sum(TEST_NUM_ALL), 2) end as BD_WIRELESS_DT2_RATIO
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(HTTP_DELAY_TOT)/sum(TEST_NUM_ALL), 2) end as HTTP_DELAY_MEAN
	,sum(BAD_HTTP_DELAY_TOT) as BAD_HTTP_DELAY_TOT
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(BAD_HTTP_DELAY_TOT)*100/sum(TEST_NUM_ALL), 2) end as BAD_HTTP_DELAY_RATIO
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(FIN_DELAY_TOT)/sum(TEST_NUM_ALL), 2) end as FIN_DELAY_MEAN
	,sum(BAD_FIN_DELAY_TOT) as BAD_FIN_DELAY_TOT
	,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(BAD_FIN_DELAY_TOT)*100/sum(TEST_NUM_ALL), 2) end as BAD_FIN_DELAY_RATIO			
from noce.FRT_DPI_DELAY_MB_D
where day between #{START_DAY} and #{END_DAY}
	and network=#{NETWORK}
	and eNodeB_ID="#{ENODEBID}"
	and CELL_ID=#{CELLID}
group by day,LATN_ID,eNodeB_ID,eNodeBName,CELL_ID,CELL_NAME
) a
left outer join
(
select day bday
	,enodebid	
	,cellid
	,load_condition 	
	,airport_indicator 	
	,cover_quality 		
	,interfer_situation 
	,emtperc_situation 	
	,business 			
	,top_user 			
from noce.FRT_WIRELESS_KPI_STAT_D
where day between #{START_DAY} and #{END_DAY}
	and enodebid="#{ENODEBID}"
	and cellid="#{CELLID}"
) b
on a.eNodeB_ID=b.enodebid 
	and cast(a.CELL_ID as string)=b.cellid 
	and a.day=b.bday

	]]>
</sqlTemplate>

<!-- 替换原impala中badCellAnalysis_03_cellinfo模板的新模板 -->
<sqlTemplate id="badCellAnalysis_14_hbase_cellinfo" description="质差小区分析-小区信息-Hbase查询" DB="hbase">
	getByKeys
	NOCE:DSI_WIRELESS_KPI_STAT_D_M#{MONTH}
	#{KEYLIST}
	i:a2,i:b1,i:b2,i:b3,i:b4,i:b5
</sqlTemplate>


<sqlTemplate id="badCellAnalysis_m03_cellinfo" description="质差小区分析-小区信息-mysql查询">
	<![CDATA[
			select LATN_ID
			,eNodeB_INFO
			,CELL_INFO
			,a.day
			,TEST_NUM_ALL
			,TCP_Ack_DL_MEAN
			,WIRELESS_DT2_MEAN
			,load_condition
			,airport_indicator
			,cover_quality
			,interfer_situation
			,emtperc_situation
			,business
			,top_user
		from
		(
		select LATN_ID 	-- 地市ID
			,eNodeB_ID
			,CELL_ID 
			,concat(eNodeB_ID, "(", IFNULL(eNodeBName, "空"), ")") as eNodeB_INFO	-- 基站ID＋名称
			,concat(cast(CELL_ID as char), "(", IFNULL(CELL_NAME, "空"), ")") as CELL_INFO	-- 小区ID＋名称
			,sum(TEST_NUM_ALL) as TEST_NUM_ALL 	-- 总记录数
			,day 	-- 时间段，以天为粒度
			,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(TCP_Ack_DL_TOT)/sum(TEST_NUM_ALL), 2) end as TCP_Ack_DL_MEAN 	-- 第三次握手时延均值（ms）
			,case sum(TEST_NUM_ALL) when 0 then 0 else round(sum(WIRELESS_DT2_TOT)/sum(TEST_NUM_ALL), 2) end as WIRELESS_DT2_MEAN 	-- 第三次ACK与HTTP GET时延均值(ms)
		from noce.FRT_DPI_DELAY_MB_D
		where day between #{START_DAY} and #{END_DAY}
			and network=#{NETWORK}
			and eNodeB_ID="#{ENODEBID}"
			and CELL_ID=#{CELLID}
		group by day,LATN_ID,eNodeB_ID,eNodeBName,CELL_ID,CELL_NAME
		) a
		join
		(
		select day bday
			,enodebid	-- 基站ID
			,cellid
			,load_condition 	-- 负荷情况
			,airport_indicator 	-- 空口指标
			,cover_quality 		-- 覆盖质量
			,interfer_situation -- 干扰情况
			,emtperc_situation 	-- 空口感知情况
			,business 			-- 繁忙情况
			,top_user 			-- TOP用户
		from noce.FRT_WIRELESS_KPI_STAT_D
		where day between #{START_DAY} and #{END_DAY}
			and enodebid="#{ENODEBID}"
			and cellid="#{CELLID}"
		) b
		on a.eNodeB_ID=b.enodebid 
			and cast(a.CELL_ID as char)=b.cellid 
			and a.day=b.bday

	]]>
</sqlTemplate>

<sqlTemplate id="ThreeNetworkContrast_01_data" description="三网对比">
	<![CDATA[
		select
		nettype,
		#{LONGITUDEBAIDUCONDITION},
		#{LATITUDEBAIDUCONDITION},
		round(avg(lte_rsrp),2) lte_rsrp
		from noce.AGG_APP_RSRP_D d 
		where #{CITYID}
		#{MAXLNG}
		#{MINLNG}
		#{MAXLAT}
		#{MINLAT}
		and day between #{STARTDAY} and #{ENDDAY}
		and longitude_baidu is not null
		and latitude_baidu is not null
		and lte_rsrp is not null
		group by nettype,longitude_baidu ,latitude_baidu
	]]>
</sqlTemplate>
<sqlTemplate id="ThreeNetworkContrast_02_data" description="三网对比">
	<![CDATA[
		select
		nettype,
		#{LONGITUDEBAIDUCONDITION},
		#{LATITUDEBAIDUCONDITION},
		round(avg(lte_rsrp),2) lte_rsrp
		from noce.AGG_APP_RSRP_D d 
		where #{CITYID}
		and day between #{STARTDAY} and #{ENDDAY}
		and longitude_baidu is not null
		and latitude_baidu is not null
		and lte_rsrp is not null
		group by nettype,longitude_baidu ,latitude_baidu
	]]>
</sqlTemplate>

<!-- 此模板将被替换为Hbase中的badCellAnalysis_15_hbase_sheet -->
<sqlTemplate id="badCellAnalysis_07_celldetailinfo" description="tab1_负荷情况">
	<![CDATA[

select round(DW_PRB_USERATE*100, 2) as AVG_DW_PRB_USERATE 	-- "1.1 下行PRB平均利用率(%)"
	,DW_PRB_USERATE_STAT 	-- 下行PRB平均利用率指标状态，1为正常
	,round(UP_PRB_USERATE*100, 2) as AVG_UP_PRB_USERATE 	-- "[1.06]上行PRB资源利用率（业务信息）"
	,UP_PRB_USERATE_STAT	  -- 上行PRB资源利用率指标状态
	,round(PDCCH_OCPRATE*100, 2) as AVG_PDCCH_OCPRATE 	-- "1.11 PDCCH信道占用率(%)"
	,PDCCH_OCPRATE_STAT 	-- PDCCH信道占用率指标状态
	,round(PRACh_OCPRATE*100, 2) as AVG_PRACh_OCPRATE 	-- "1.12 PRACH信道占用率(%)"
	,PRACh_OCPRATE_STAT 	-- PRACH信道占用率指标状态
	,Counter0003 	-- 最大RRC连接用户数
	,Counter0003_STAT	-- 最大RRC连接用户数指标状态
	,floor(Counter0053) as Counter0053 	-- 平均RRC连接用户数
	,floor(Counter0077) as Counter0077	-- 平均激活用户数
	,Counter0013 	-- 最大激活用户数
	,round(PAG_OCPRATE*100, 2) as AVG_PAG_OCPRATE 	-- "1.14  寻呼信道占用率(%)"********************
	,REPORT_CQI0 as TOT_REPORT_CQI0 	-- "[2.80]CQI0上报次数"
	,REPORT_CQI1 as TOT_REPORT_CQI1	-- "[2.81]CQI1上报次数"
	,REPORT_CQI2 as TOT_REPORT_CQI2	-- "[2.82]CQI2上报次数"
	,REPORT_CQI3 as TOT_REPORT_CQI3	-- "[2.83]CQI3上报次数"
	,REPORT_CQI4 as TOT_REPORT_CQI4	-- "[2.84]CQI4上报次数"
	,REPORT_CQI5 as TOT_REPORT_CQI5	-- "[2.85]CQI5上报次数"
	,REPORT_CQI6 as TOT_REPORT_CQI6	-- "[2.86]CQI6上报次数"
	,REPORT_CQI7 as TOT_REPORT_CQI7	-- "[2.87]CQI7上报次数"
	,REPORT_CQI8 as TOT_REPORT_CQI8	-- "[2.88]CQI8上报次数"
	,REPORT_CQI9 as TOT_REPORT_CQI9	-- "[2.89]CQI9上报次数"
	,REPORT_CQI10 as TOT_REPORT_CQI10	-- "[2.90]CQI10上报次数"
	,REPORT_CQI11 as TOT_REPORT_CQI11	-- "[2.91]CQI11上报次数"
	,REPORT_CQI12 as TOT_REPORT_CQI12	-- "[2.92]CQI12上报次数"
	,REPORT_CQI13 as TOT_REPORT_CQI13	-- "[2.93]CQI13上报次数"
	,REPORT_CQI14 as TOT_REPORT_CQI14	-- "[2.94]CQI14上报次数"
	,REPORT_CQI15 as TOT_REPORT_CQI15	-- "[2.95]CQI15上报次数"
	,case (REPORT_CQI0+REPORT_CQI1+REPORT_CQI2+REPORT_CQI3+REPORT_CQI4+REPORT_CQI5
			+REPORT_CQI6+REPORT_CQI7+REPORT_CQI8+REPORT_CQI9+REPORT_CQI10+REPORT_CQI11
			+REPORT_CQI12+REPORT_CQI13+REPORT_CQI14+REPORT_CQI15) when 0 then 0 else 
	round((REPORT_CQI0*0+REPORT_CQI1*1+REPORT_CQI2*2+REPORT_CQI3*3+REPORT_CQI4*4
		+REPORT_CQI5*5+REPORT_CQI6*6+REPORT_CQI7*7+REPORT_CQI8*8+REPORT_CQI9*9+REPORT_CQI10*10
		+REPORT_CQI11*11+REPORT_CQI12*12+REPORT_CQI13*13+REPORT_CQI14*14+REPORT_CQI15*15)
		/(REPORT_CQI0+REPORT_CQI1+REPORT_CQI2+REPORT_CQI3+REPORT_CQI4+REPORT_CQI5
			+REPORT_CQI6+REPORT_CQI7+REPORT_CQI8+REPORT_CQI9+REPORT_CQI10+REPORT_CQI11
			+REPORT_CQI12+REPORT_CQI13+REPORT_CQI14+REPORT_CQI15), 2) end as TOT_REPORT_CQI 	-- "[2.99]平均CQI"
	,REPORT_CQI_AVG_STAT 	-- 平均CQI指标状态
	,round(CQI_LEVEL1_RATE*100, 2) as CQI_LEVEL1_RATE 	-- CQI0~6占比
	,round(CQI_LEVEL2_RATE*100, 2) as CQI_LEVEL2_RATE 	-- CQI0~4占比
	,round(AVG_RSRP, 2) as TOT_AVG_RSRP	-- "平均RSRP（取MRO表中MR_LteScRSRP字段，单位：dBm）"
	,AVG_RSRP_STAT 	-- 平均RSRP指标状态
	,round(RSRP_LEVEL1_RATE*100, 2) as RSRP_LEVEL1_RATE	-- RSRP(-∞，-115)占比
	,round(RSRP_LEVEL2_RATE*100, 2) as RSRP_LEVEL2_RATE	-- RSRP[-115，-105)占比
	,round(RSRP_LEVEL3_RATE*100, 2) as RSRP_LEVEL3_RATE	-- RSRP[-105，-95)占比
	,round(RSRP_LEVEL4_RATE*100, 2) as RSRP_LEVEL4_RATE	-- RSRP[-95，-85)占比
	,round(RSRP_LEVEL5_RATE*100, 2) as RSRP_LEVEL5_RATE	-- RSRP[-85，+∞)占比
	,round(RSSI_AVG, 2) as TOT_AVG_RSSI	-- "[8.1]RSSI平均值(dBm)"
	,RSSI_AVG_STAT	-- RSSI平均值指标状态
	,round(Counter0270, 2) as Counter0270 		-- 平均每PRB干扰噪声平均值
	,Counter0270_STAT 	-- 平均每PRB干扰噪声平均值指标状态
	,round(Counter0271, 2) as Counter0271 		-- 信道干扰噪声
	,round((PDCH_DWFLOW+PDCH_UPFLOW), 2) as TOT_PDCH_FLOW	-- "[5.2]PDCP层总流量(MB)"
	,round(PDCH_DWFLOW, 2) as TOT_PDCH_DWFLOW	-- "5.3 PDCP层下行流量(MB)"
	,round(PDCH_UPFLOW, 2) as TOT_PDCH_UPFLOW	-- "5.1 PDCP层上行流量(MB)"
	,round(USEREX_UPAVGRATE, 2) as AVG_USEREX_UPAVGRATE	-- "[5.13]用户体验上行平均速率(Mbps)"
	,round(USEREX_DWAVGRATE, 2) as AVG_USEREX_DWAVGRATE	-- "[5.14]用户体验下行平均速率(Mbps)"
	,USEREX_DWAVGRATE_STAT 	-- 用户体验下行平均速率指标状态
	,round(USER_AVGDELAY, 2) as AVG_USER_AVGDELAY	-- "[6.7]用户面下行平均时延(ms)"
	,USER_AVGDELAY_STAT 	-- 用户面下行平均时延指标状态
	,round(AIDW_PACKLOSS_RATE, 2) as AVG_AIDW_PACKLOSS_RATE	-- "6.4 空口下行用户面丢包率(%)"*************
from noce.FRT_WIRELESS_KPI_STAT_D
where day=#{START_HOUR}
	and ENODEBID="#{ENODEBID}"
	and CELLID="#{CELLID}"
		]]>
</sqlTemplate>

<!-- 此模板将被替换为Hbase中的badCellAnalysis_16_hbase_loadimg -->
<sqlTemplate id="badCellAnalysis_08_loadimg" description="tab1_具体折线图">
	<![CDATA[
select a.ENODEBID, a.hour, WEBPAGE_OPEN_DELAY_ALL, BAD_WEBPAGE_OPEN_DELAY_RATIO, VIDIO_DOWNLOAD_RATE_ALL
	,BAD_VIDIO_DOWNLOAD_RATE_RATIO,DW_PRB_USERATE, UP_PRB_USERATE, PDCCH_OCPRATE, PRACh_OCPRATE
	,PAG_OCPRATE, RRCCON_SUCCRATE, RRCCON_SUCCRATE_V, RRCCON_FAIL_UENOR, RRCCON_FAIL_CELLRJ
	,RRCCON_FAIL_OTH, RRCCON_RBRATE, Counter0003, Counter0053, Counter0077, Counter0013
	,UE_DROP_RATE, UE_NRLS_RATE, UE_ANRLS_RATE, ERAB_REQ, ERAB_SUCC, ERAB_SUCC_RATE, ERAB_FAIL_UENOR
	,ERAB_FAIL_CORE, ERAB_FAIL_TL, ERAB_FAIL_WL, ERAB_FAIL_WRLACK, ERAB_FAIL_SMFAIL, ERAB_FAIL_OTH
	,ERAB_NRLS, ERAB_ANRLS, ERAB_DROP_RATE, ERAB_ANRLS_CORE, ERAB_ANRLS_TL, ERAB_ANRLS_NETCONG, ERAB_ANRLS_WL
	,ERAB_ANRLS_SWFAIL, Counter0110, Counter0111,SWCHX2_SUCC_RATE,Counter0108,Counter0109,SWCHS1_SUCC_RATE,Counter0156
	,Counter0157,SWCHSF_SUCC_RATE,Counter0159,Counter0160,SWCHAF_SUCC_RATE,Counter0151,Counter0193,Counter0154  		
	,Counter0196,SWCHENIN_SUCC_RATE,SWCHENMU_SUCC_RATE,ESTS1_SUCC_RATE, ESTS1_ATT, ESTS1_SUCC, RSSI_AVG, Counter0270, Counter0271
	,TOT_PDCH_FLOW, PDCH_DWFLOW, PDCH_UPFLOW, USEREX_UPAVGRATE, USEREX_DWAVGRATE, USER_AVGDELAY, AIDW_PACKLOSS_RATE
from
(
	select ENODEBID
		,hour-floor(hour/100)*100 as hour
		,round(DW_PRB_USERATE*100, 2) as DW_PRB_USERATE  -- "1.1 下行PRB平均利用率(%)"
		,round(UP_PRB_USERATE*100, 2) as UP_PRB_USERATE  -- "[1.06]上行PRB资源利用率（业务信息）"
		,round(PDCCH_OCPRATE*100, 2) as PDCCH_OCPRATE  -- "1.11 PDCCH信道占用率(%)"
		,round(PRACh_OCPRATE*100, 2) as PRACh_OCPRATE  -- "1.12 PRACH信道占用率(%)"
		,round(PAG_OCPRATE*100, 2) as PAG_OCPRATE  -- "1.14  寻呼信道占用率(%)"
		,round(RRCCON_SUCCRATE*100, 2) as RRCCON_SUCCRATE	-- "[2.6] RRC连接建立成功率(%)"
		,round(RRCCON_SUCCRATE_V*100, 2) as RRCCON_SUCCRATE_V	-- "[2.6-V] RRC连接建立成功率(%)"	
		,RRCCON_FAIL_UENOR	-- "[2.61]RRC连接建立失败次数（UE无应答）"
		,RRCCON_FAIL_CELLRJ	-- "[2.62]RRC连接建立失败次数（小区Reject）"
		,RRCCON_FAIL_OTH	-- "[2.63]RRC连接建立失败次数（其它原因）"
		,round(RRCCON_RBRATE*100, 2) as RRCCON_RBRATE	-- "2.36 RRC连接重建比例(%)"
		,Counter0003 	-- 最大RRC连接用户数
		,floor(Counter0053) as Counter0053 	-- 平均RRC连接用户数
		,floor(Counter0077) as Counter0077 	-- 平均激活用户数
		,Counter0013 	-- 最大激活用户数
		,round(UE_DROP_RATE*100, 2) as UE_DROP_RATE	-- "3.3 UE上下文掉线率(%)"
		,UE_NRLS_RATE	-- "3.2 UE上下文正常释放次数"
		,UE_ANRLS_RATE	-- "3.1 UE上下文异常释放次数"
		,ERAB_REQ	-- "[2.17]E-RAB建立请求次数"
		,ERAB_SUCC	-- "[2.18]E-RAB建立成功次数"
		,round(ERAB_SUCC_RATE*100, 2) as ERAB_SUCC_RATE	-- "[2.19] E-RAB建立成功率(%)"
		,ERAB_FAIL_UENOR	-- "[2.31]E-RAB建立失败次数（UE无响应）"
		,ERAB_FAIL_CORE	-- "[2.32]E-RAB建立失败次数（核心网问题）"
		,ERAB_FAIL_TL	-- "[2.33]E-RAB建立失败次数（传输层问题）"
		,ERAB_FAIL_WL	-- "[2.34]E-RAB建立失败次数（无线层问题）"
		,ERAB_FAIL_WRLACK	-- "[2.35]E-RAB建立失败次数（无线资源不足）"
		,ERAB_FAIL_SMFAIL	-- "[2.36]E-RAB建立失败次数（安全模式配置失败）"
		,ERAB_FAIL_OTH	-- "[2.37]E-RAB建立失败次数（其它原因）"
		,ERAB_NRLS	-- "3.5 E-RAB正常释放次数"
		,ERAB_ANRLS	-- "3.4 E-RAB异常释放次数"
		,round(ERAB_DROP_RATE*100, 2) as ERAB_DROP_RATE	-- "3.6 E-RAB掉线率(%)"
		,ERAB_ANRLS_CORE	-- "[3.41]E-RAB异常释放次数（核心网问题）"
		,ERAB_ANRLS_TL	-- "[3.42]E-RAB异常释放次数（传输层问题）"
		,ERAB_ANRLS_NETCONG	-- "[3.43]E-RAB异常释放次数（网络拥塞）"
		,ERAB_ANRLS_WL	-- "[3.44]E-RAB异常释放次数（无线层问题）"
		,ERAB_ANRLS_SWFAIL	-- "[3.45]E-RAB异常释放次数（切换失败）"
		,Counter0110 		-- X2接口切换请求次数
		,Counter0111 		-- X2接口切换成功次数
		,round(SWCHX2_SUCC_RATE*100, 2) as SWCHX2_SUCC_RATE 	-- X2接口切换成功率(%)
		,Counter0108 		-- S1接口切换请求次数
		,Counter0109 		-- S1接口切换成功次数
		,round(SWCHS1_SUCC_RATE*100, 2) as SWCHS1_SUCC_RATE 	-- S1接口切换成功率(%)
		,Counter0156 		-- 同频切换请求次数
		,Counter0157 		-- 同频切换成功次数
		,round(SWCHSF_SUCC_RATE*100, 2) as SWCHSF_SUCC_RATE 	-- 同频切换成功率(%)
		,Counter0159 		-- 异频切换请求次数
		,Counter0160 		-- 异频切换成功次数
		,round(SWCHAF_SUCC_RATE*100, 2) as SWCHAF_SUCC_RATE 	-- 异频切换成功率(%)
		,Counter0151 		-- eNodeB内切换成功率分子
		,Counter0193 		-- eNodeB内切换成功率分母
		,Counter0154  		-- eNodeB间切换成功率分子
		,Counter0196 		-- eNodeB间切换成功率分母
		,round(SWCHENIN_SUCC_RATE*100, 2) as SWCHENIN_SUCC_RATE -- eNodeB内切换成功率(%)
		,round(SWCHENMU_SUCC_RATE*100, 2) as SWCHENMU_SUCC_RATE -- eNodeB间切换成功率(%)
		,round(RSSI_AVG, 2) as RSSI_AVG	-- "[8.1]RSSI平均值(dBm)"
		,round(Counter0270, 2) as Counter0270 		-- 平均每PRB干扰噪声平均值
		,round(Counter0271, 2) as Counter0271 		-- 信道干扰噪声
		,round(PDCH_DWFLOW+PDCH_UPFLOW, 2) as TOT_PDCH_FLOW	-- "[5.2]PDCP层总流量(MB)"
		,round(PDCH_DWFLOW, 2) as PDCH_DWFLOW	-- "5.3 PDCP层下行流量(MB)"
		,round(PDCH_UPFLOW, 2) as PDCH_UPFLOW 	-- "5.1 PDCP层上行流量(MB)"
		,round(USEREX_UPAVGRATE, 2) as USEREX_UPAVGRATE	-- "[5.13]用户体验上行平均速率(Mbps)"
		,round(USEREX_DWAVGRATE, 2) as USEREX_DWAVGRATE	-- "[5.14]用户体验下行平均速率(Mbps)"
		,round(USER_AVGDELAY, 2) as USER_AVGDELAY	-- "[6.7]用户面下行平均时延(ms)"
		,round(AIDW_PACKLOSS_RATE, 2) as AIDW_PACKLOSS_RATE	-- "6.4 空口下行用户面丢包率(%)"*************
	from noce.AGG_WIRELESS_KPI_CELL_H
	where hour between #{START_HOUR} and #{END_HOUR}
		and ENODEBID="#{ENODEBID}"
		and CELLID="#{CELLID}"
) a
left outer join
(
	select ENODEBID
		,hour-floor(hour/100)*100 as bhour
		,round(ESTS1_SUCC_RATE*100, 2) as ESTS1_SUCC_RATE	-- "[2.16]S1接口建立成功率(%)"
		,ESTS1_ATT	-- "[2.14]S1接口建立尝试次数"
		,ESTS1_SUCC	-- "[2.15]S1接口建立成功次数"
	from noce.AGG_WIRELESS_KPI_ENOBE_H
	where hour between #{START_HOUR} and #{END_HOUR}
		and ENODEBID="#{ENODEBID}"
	) b
on a.ENODEBID=b.ENODEBID and a.hour=b.bhour 
left outer join
(
	select eNodeB_ID
		,hour-floor(hour/100)*100 as chour
		,WEBPAGE_OPEN_DELAY_ALL 	-- 首页测试总次数
		,case WEBPAGE_OPEN_DELAY_ALL when 0 then 0 else round(GOOD_WEBPAGE_OPEN_DELAY*100/WEBPAGE_OPEN_DELAY_ALL, 2) end as BAD_WEBPAGE_OPEN_DELAY_RATIO 	-- 首页时延质差优良率
		,VIDIO_DOWNLOAD_RATE_ALL 	-- 视频下载总次数
		,case VIDIO_DOWNLOAD_RATE_ALL when 0 then 0 else round(GOOD_VIDIO_DOWNLOAD_RATE*100/VIDIO_DOWNLOAD_RATE_ALL, 2) end as BAD_VIDIO_DOWNLOAD_RATE_RATIO 	-- 视频下载速率质差优良率
	from noce.FRT_DPI_DELAY_MB_H
	where hour between #{START_HOUR} and #{END_HOUR}
		and eNodeB_ID='#{ENODEBID}'
		and CELL_ID=#{CELLID}
) c
on a.ENODEBID=c.eNodeB_ID and a.hour=c.chour
order by hour
	]]>
</sqlTemplate>

<!-- 替换原Impala中badCellAnalysis_08_loadimg模板的新模板 -->
<sqlTemplate id="badCellAnalysis_16_hbase_loadimg" description="tab1_具体折线图--Hbase查询" DB="hbase">
	getByKeys
	NOCE:DSI_WIRELESS_KPI_CELL_H_M#{MONTH}
	#{KEYLIST}
	i:a2,i:a3,i:a4,i:a6,i:a8,i:a9,i:a10,i:a12,i:b3,i:b4,i:b5
</sqlTemplate>


 <!-- 此模板将被替换为Hbase中的badCellAnalysis_15_hbase_sheet --> 
<sqlTemplate id="badCellAnalysis_09_kongkouinfo" description="tab2_空口指标">
	<![CDATA[
select round(RRCCON_SUCCRATE*100, 2) as AVG_RRCCON_SUCCRATE	-- "[2.6] RRC连接建立成功率(%)"
	,RRCCON_SUCCRATE_STAT 		-- RRC连接建立成功率指标状态
	,round(RRCCON_SUCCRATE_V*100, 2) as AVG_RRCCON_SUCCRATE_V	-- "[2.6-V] RRC连接建立成功率(%)"	
	,RRCCON_FAIL_UENOR as TOT_RRCCON_FAIL_UENOR	-- "[2.61]RRC连接建立失败次数（UE无应答）"
	,RRCCON_FAIL_CELLRJ as TOT_RRCCON_FAIL_CELLRJ	-- "[2.62]RRC连接建立失败次数（小区Reject）"
	,RRCCON_FAIL_OTH as TOT_RRCCON_FAIL_OTH	-- "[2.63]RRC连接建立失败次数（其它原因）"
	,round(RRCCON_RBRATE*100, 2) as AVG_RRCCON_RBRATE	-- "2.36 RRC连接重建比例(%)"
	,RRCCON_RBRATE_STAT 	-- RRC连接重建比例指标状态
	,round(UE_DROP_RATE*100, 2) as AVG_UE_DROP_RATE	-- "3.3 UE上下文掉线率(%)"
	,UE_DROP_RATE_STAT 	-- UE上下文掉线率指标状态
	,UE_NRLS_RATE as TOT_UE_NRLS_RATE	-- "3.2 UE上下文正常释放次数"
	,UE_ANRLS_RATE as TOT_UE_ANRLS_RATE	-- "3.1 UE上下文异常释放次数"
	,ERAB_REQ as TOT_ERAB_REQ	-- "[2.17]E-RAB建立请求次数"
	,ERAB_SUCC as TOT_ERAB_SUCC	-- "[2.18]E-RAB建立成功次数"
	,round(ERAB_SUCC_RATE*100, 2) as AVG_ERAB_SUCC_RATE	-- "[2.19] E-RAB建立成功率(%)"
	,ERAB_SUCC_RATE_STAT	-- E-RAB建立成功率指标状态
	,ERAB_FAIL_UENOR as TOT_ERAB_FAIL_UENOR	-- "[2.31]E-RAB建立失败次数（UE无响应）"
	,ERAB_FAIL_CORE as TOT_ERAB_FAIL_CORE	-- "[2.32]E-RAB建立失败次数（核心网问题）"
	,ERAB_FAIL_TL as TOT_ERAB_FAIL_TL	-- "[2.33]E-RAB建立失败次数（传输层问题）"
	,ERAB_FAIL_WL as TOT_ERAB_FAIL_WL	-- "[2.34]E-RAB建立失败次数（无线层问题）"
	,ERAB_FAIL_WRLACK as TOT_ERAB_FAIL_WRLACK	-- "[2.35]E-RAB建立失败次数（无线资源不足）"
	,ERAB_FAIL_SMFAIL as TOT_ERAB_FAIL_SMFAIL	-- "[2.36]E-RAB建立失败次数（安全模式配置失败）"
	,ERAB_FAIL_OTH as TOT_ERAB_FAIL_OTH	-- "[2.37]E-RAB建立失败次数（其它原因）"
	,ERAB_NRLS as TOT_ERAB_NRLS	-- "3.5 E-RAB正常释放次数"
	,ERAB_ANRLS as TOT_ERAB_ANRLS	-- "3.4 E-RAB异常释放次数"
	,round(ERAB_DROP_RATE*100, 2) as AVG_ERAB_DROP_RATE	-- "3.6 E-RAB掉线率(%)"
	,ERAB_DROP_RATE_STAT 	-- E-RAB掉线率指标状态
	,ERAB_ANRLS_CORE as TOT_ERAB_ANRLS_CORE	-- "[3.41]E-RAB异常释放次数（核心网问题）"
	,ERAB_ANRLS_TL as TOT_ERAB_ANRLS_TL	-- "[3.42]E-RAB异常释放次数（传输层问题）"
	,ERAB_ANRLS_NETCONG as TOT_ERAB_ANRLS_NETCONG	-- "[3.43]E-RAB异常释放次数（网络拥塞）"
	,ERAB_ANRLS_WL as TOT_ERAB_ANRLS_WL	-- "[3.44]E-RAB异常释放次数（无线层问题）"
	,ERAB_ANRLS_SWFAIL as TOT_ERAB_ANRLS_SWFAIL	-- "[3.45]E-RAB异常释放次数（切换失败）"
	,round(ESTS1_SUCC_RATE*100, 2) as AVG_ESTS1_SUCC_RATE	-- "[2.16]S1接口建立成功率(%)"
	,ESTS1_ATT as TOT_ESTS1_ATT	-- "[2.14]S1接口建立尝试次数"
	,ESTS1_SUCC as TOT_ESTS1_SUCC	-- "[2.15]S1接口建立成功次数"
	,Counter0110 		-- X2接口切换请求次数
	,Counter0111 		-- X2接口切换成功次数
	,round(SWCHX2_SUCC_RATE*100, 2) as SWCHX2_SUCC_RATE 	-- X2接口切换成功率(%)
	,SWCHX2_SUCC_RATE_STAT 		-- X2接口切换成功率指标状态
	,Counter0108 		-- S1接口切换请求次数
	,Counter0109 		-- S1接口切换成功次数
	,round(SWCHS1_SUCC_RATE*100, 2) as SWCHS1_SUCC_RATE 	-- S1接口切换成功率(%)
	,SWCHS1_SUCC_RATE_STAT 		-- S1接口切换成功率指标状态
	,Counter0156 		-- 同频切换请求次数
	,Counter0157 		-- 同频切换成功次数
	,round(SWCHSF_SUCC_RATE*100, 2) as SWCHSF_SUCC_RATE 	-- 同频切换成功率(%)
	,SWCHSF_SUCC_RATE_STAT 		-- 同频切换成功率指标状态
	,Counter0159 		-- 异频切换请求次数
	,Counter0160 		-- 异频切换成功次数
	,round(SWCHAF_SUCC_RATE*100, 2) as SWCHAF_SUCC_RATE 	-- 异频切换成功率(%)
	,SWCHAF_SUCC_RATE_STAT 		-- 异频切换成功率指标状态
	,Counter0151 		-- eNodeB内切换成功率分子
	,Counter0193 		-- eNodeB内切换成功率分母
	,Counter0154  		-- eNodeB间切换成功率分子
	,Counter0196 		-- eNodeB间切换成功率分母
	,round(SWCHENIN_SUCC_RATE*100, 2) as SWCHENIN_SUCC_RATE -- eNodeB内切换成功率(%)
	,round(SWCHENMU_SUCC_RATE*100, 2) as SWCHENMU_SUCC_RATE -- eNodeB间切换成功率(%)
from noce.FRT_WIRELESS_KPI_STAT_D
where day=#{START_HOUR}
	and ENODEBID="#{ENODEBID}"
	and CELLID="#{CELLID}"

		
	]]>
</sqlTemplate>

<!-- 替换原impala中badCellAnalysis_07_celldetailinfo和badCellAnalysis_09_kongkouinfo模板的新模板 -->
<sqlTemplate id="badCellAnalysis_15_hbase_sheet" description="tab1_负荷情况$tab2_空口指标---Hbase查询" DB="hbase">
	getByKeys
	NOCE:DSI_WIRELESS_KPI_STAT_D_M#{MONTH}
	#{KEYLIST}
	i:a3,i:a4,i:a5,i:a6,i:a7,i:a8,i:a9,i:a10,i:a11,i:a12,i:a13,i:a14,i:a16
	rowkey 1
</sqlTemplate>


<sqlTemplate id="badCellAnalysis_h11_celldetailinfo_BUSINESS_img" description="tab6_繁忙度-小区繁忙度查询(图表)">
	<![CDATA[
getByKeyScope
NOCE:DSI_MRO_DPI_USER_H
#{STARTROW}
#{ENDROW}
i:DPI_USER_NUM
	]]>
</sqlTemplate>


<sqlTemplate id="badCellAnalysis_h08_celldetailinfo_COVERDIS_img" description="覆盖距离-柱状图-小区平均覆盖距离查询结果（图表2）">
	<![CDATA[
getByKeyScope
NOCE:DSI_MRO_DIST_D
#{STARTROW}
#{ENDROW}
i:MR_DISTANCE,i:ACCESS_NUMS,i:AVG_LteScRSRP
rowkey 0
	]]>
</sqlTemplate>

<sqlTemplate id="badCellAnalysis_13_coverdistancetable" description="表格-平均接入距离">
	<![CDATA[
	select round(sum(MR_DISTANCE*ACCESS_NUMS)/sum(ACCESS_NUMS), 2) as AVG_DISTANCE 	-- 平均接入距离
		,1000 as AVG_DISTANCE_LOW 	-- 大于门限值则为红色异常
	from noce.FRT_MRO_CELL_DISTANCE_D 
	where day=#{DAY} 
		and ENODEID=#{ENODEBID} 
		and CELLID=#{CELLID}
		and MR_DISTANCE is not NULL
	]]>
</sqlTemplate>



<sqlTemplate id="badCellAnalysis_h12_celldetailinfo_USER" description="tab7_TOP用户">
	<![CDATA[
getByKeyScope
NOCE:DSI_DPI_CELL_USER_D
#{STARTROW}
#{ENDROW}
i:TEST_NUM_ALL,i:TEST_NUM_BAD,i:TCP_Ack_DL_TOT,i:WIRELESS_DT2_TOT,i:LteScRSRP_AVG_TOT,i:TEST_NUM_RSRP,i:duration_TOT
rowkey 0


	]]>
</sqlTemplate>


<sqlTemplate id="CloudMap_04_base_station" description="查询数据">
<![CDATA[
select distinct city_name,area_name,mkt_center_name,base_statn_id,base_statn_name,bs_vendor,longitude_baidu,latitude_baidu,longitude,latitude,cell_id,cell_name,is_indoor
from noce.dim_sector
where day = #{MAXDAY}
  and nettype='4G'
  and city_name = '#{CITYNAME}'
  and abs(latitude_baidu-#{LATITUDCENTER})<0.026980946/4
  and abs(longitude_baidu-#{LONGITUDCENTER})<0.029421133/4
]]>
</sqlTemplate>

<sqlTemplate id="CloudMap_05_sector" description="查询数据">
<![CDATA[
select distinct city_name,area_name,mkt_center_name,base_statn_id,base_statn_name,bs_vendor,longitude_baidu,latitude_baidu,sector_id,sector_name,sector_addr,ant_azimuth,longitude,latitude,cell_id,cell_name,is_indoor,
band,ANT_ELECTRON_ANGLE,ANT_ENGINE_ANGLE,high,ACCEPTSTATUS  
from noce.dim_sector
where day = #{MAXDAY}
  and nettype='4G'
  and city_name = '#{CITYNAME}'
  and abs(latitude_baidu-#{LATITUDCENTER})<0.026980946/4
  and abs(longitude_baidu-#{LONGITUDCENTER})<0.029421133/4
]]>
</sqlTemplate>

<sqlTemplate id="front_perf_test_01" description="查询数据">
<![CDATA[
select distinct city_name,area_name,mkt_center_name,base_statn_id,base_statn_name,bs_vendor,longitude_baidu,latitude_baidu 
from noce.dim_sector
where day = 20170301
  and nettype='4G'
--  and city_name='广州'
  and abs(latitude_baidu-23.140692)<0.026980946/#{N_factor}
  and abs(longitude_baidu-113.364361)<0.029421133/#{N_factor}
]]>
</sqlTemplate>	

<sqlTemplate id="front_perf_test_02" description="查询数据">
<![CDATA[
select distinct city_name,area_name,mkt_center_name,base_statn_id,base_statn_name,bs_vendor,longitude_baidu,latitude_baidu,sector_id,sector_name,sector_addr,ant_azimuth
from noce.dim_sector
where day = 20170301
  and nettype='4G'
--  and city_name='广州'
  and abs(latitude_baidu-23.140692)<0.026980946/#{N_factor}
  and abs(longitude_baidu-113.364361)<0.029421133/#{N_factor}

]]>
</sqlTemplate>	

<sqlTemplate id="CustExpVsl_01_city_area_mkt_relation" description="取各地市、区县和营服中心数据">
<![CDATA[
select DISTINCT city_id,city_name
       ,area_id,area_name
       ,mkt_center_code,mkt_center_name
from noce.dim_sector
where day = (select max(day) from noce.dim_sector) and area_name is not null and TRIM(area_name)<> ''
]]>
</sqlTemplate>	

<sqlTemplate id="CustExpVsl_02_mkt_info" description="取某个营服中心的地理信息">
<![CDATA[
select mktcen_name
       ,GIS_DATA_BAIDU
       ,round((BAIDU_MAX_LONGITUDE+BAIDU_MIN_LONGITUDE)/2,6) as lng_cnt -- 经度中心
       ,round((BAIDU_MAXLATITUDE+BAIDU_MINLATITUDE)/2,6) as lat_cnt -- 纬度中心
from NOCE.DIM_MKTCENTER_GIS_DATA
where day= (select max(day) from NOCE.DIM_MKTCENTER_GIS_DATA)
   and city_name like '#{CITYNAME}%'
]]>
</sqlTemplate>	

<sqlTemplate id="CustExpVsl_03_district_info" description="取某个区县的地理信息">
<![CDATA[
select DISTRICT_NAME
       ,GIS_DATA_BAIDU
       ,round((BAIDU_MAX_LONGITUDE+BAIDU_MIN_LONGITUDE)/2,6) as lng_cnt -- 经度中心
       ,round((BAIDU_MAXLATITUDE+BAIDU_MINLATITUDE)/2,6) as lat_cnt -- 纬度中心
from NOCE.dim_district_gis_data
where day= (select max(day) from NOCE.dim_district_gis_data)
   and city_name like '%#{CITYNAME}%'
   and DISTRICT_NAME like '%#{DSTNAME}%'
]]>
</sqlTemplate>	

<sqlTemplate id="CustExpVsl_04_district_mkt_info" description="取某个区县下属所有营服的地理信息">
<![CDATA[
select mktcen_name,
       GIS_DATA_BAIDU
       ,round((BAIDU_MAX_LONGITUDE+BAIDU_MIN_LONGITUDE)/2,6) as lng_cnt -- 经度中心
       ,round((BAIDU_MAXLATITUDE+BAIDU_MINLATITUDE)/2,6) as lat_cnt -- 纬度中心
from NOCE.DIM_MKTCENTER_GIS_DATA
where day= (select max(day) from NOCE.DIM_MKTCENTER_GIS_DATA)
   and city_name like '%#{CITYNAME}%'
   and mktcen_name in 
   (select distinct concat(mkt_center_name,'营销服务中心')
from noce.dim_sector
where day = (select max(day) from noce.dim_sector)
   and city_name like  '%#{CITYNAME}%'
   and area_name like '%#{DSTNAME}%')
]]>
</sqlTemplate>	

<sqlTemplate id="CustExpVsl_05_city_district_info" description="取某个地市下属所有区县的地理信息">
<![CDATA[
select DISTRICT_NAME
       ,GIS_DATA_BAIDU
       ,round((BAIDU_MAX_LONGITUDE+BAIDU_MIN_LONGITUDE)/2,6) as lng_cnt -- 经度中心
       ,round((BAIDU_MAXLATITUDE+BAIDU_MINLATITUDE)/2,6) as lat_cnt -- 纬度中心
from NOCE.dim_district_gis_data
where day= (select max(day) from NOCE.dim_district_gis_data)
   and city_name like '%#{CITYNAME}%'
]]>
</sqlTemplate>

<sqlTemplate id="CustExpVsl_06_mkt_grid_info" description="取某个营服下属所有网格的地理信息">
<![CDATA[
select grid -- 网格ID
       ,gr_name -- 网格名称
       ,mktcen_name -- 营服中心
       ,district_name -- 区县
       ,gis_data_baidu
from noce.dim_grid_data
where day = (select max(day) from noce.dim_grid_data) 
  and city_name = '#{CITYNAME}'
  and district_name = '#{DISTRICTNAME}'
  and mktcen_name = '#{MKTCENNAME}'
]]>
</sqlTemplate>

<sqlTemplate id="CustExpVsl_07_sqr_grid_info" description="取中心点一定范围内所有网格的地理信息">
<![CDATA[
select grid -- 网格ID
       ,gr_name -- 网格名称
       ,mktcen_name -- 营服中心
       ,district_name -- 区县
       ,gis_data_baidu
from noce.dim_grid_data
where day = (select max(day) from noce.dim_grid_data) 
  and abs((BAIDU_MAXLATITUDE + BAIDU_MINLATITUDE)/2-#{LAT})<0.008993649 * #{DIST_KM_H}
  and abs((BAIDU_MAX_LONGITUDE+BAIDU_MIN_LONGITUDE)/2-#{LNG})<0.011808044 * #{DIST_KM_V}
]]>
</sqlTemplate>

<sqlTemplate id="CustExpVsl_08_dist_mkt_info" description="取某个营服的基站和扇区数据（取2G和4G）">
<![CDATA[
select distinct sector.city_name,sector.area_name,sector.mkt_center_name,sector.base_statn_id,
sector.base_statn_name,sector.bs_vendor,sector.longitude_baidu,sector.latitude_baidu,
sector.sector_id,sector.sector_name,sector.sector_addr,sector.ant_azimuth,sector.longitude,
sector.latitude,sector.cell_id,sector.cell_name,sector.is_indoor,sector.band,
sector.ANT_ELECTRON_ANGLE,sector.ANT_ENGINE_ANGLE,sector.high,sector.ACCEPTSTATUS,
sector.nettype,sector.BSC_ID,sector.TOTAL_DECLINATION_ANGLE,sector.day,alarm.OUTOFSRV
from noce.dim_sector sector left join ( select DISTINCT base_statn_id,bsc_id,alarm_scope,cell_id,OUTOFSRV from noce.frt_bsn_alarm  where OUTOFSRV = 1) alarm
#{2GJOIN}
where day = #{TIME}
  and sector.nettype='#{NETTYPE}'
  and sector.city_name = '#{CITYNAME}'
  and sector.area_name = '#{DISTRICTNAME}'
  and sector.mkt_center_name = '#{MKTCENNAME}'
  and sector.system_type_or_standard in('#{STANDARD}')
  and sector.system_type_or_standard != 'TDD'
]]>
</sqlTemplate>

<sqlTemplate id="CustExpVsl_09_sqr_mkt_info" description="取得当前中心点指定范围内的基站和扇区数据（取2G和4G）">
<![CDATA[
select distinct sector.city_name,sector.area_name,sector.mkt_center_name,sector.base_statn_id,
sector.base_statn_name,sector.bs_vendor,sector.longitude_baidu,sector.latitude_baidu,
sector.sector_id,sector.sector_name,sector.sector_addr,sector.ant_azimuth,sector.longitude,
sector.latitude,sector.cell_id,sector.cell_name,sector.is_indoor,sector.band,
sector.ANT_ELECTRON_ANGLE,sector.ANT_ENGINE_ANGLE,sector.high,sector.ACCEPTSTATUS,
sector.nettype,sector.BSC_ID,sector.TOTAL_DECLINATION_ANGLE,sector.day,alarm.OUTOFSRV
from noce.dim_sector sector left join ( select DISTINCT base_statn_id,bsc_id,alarm_scope,cell_id,OUTOFSRV from noce.frt_bsn_alarm  where OUTOFSRV = 1) alarm
#{2GJOIN}
where day = #{TIME}
  and sector.nettype='#{NETTYPE}'
  and abs(sector.latitude_baidu-#{LATITUDCENTER})<0.008993649 * #{DIST_KM_H}
  and abs(sector.longitude_baidu-#{LONGITUDCENTER})<0.011808044 * #{DIST_KM_V}
  and sector.system_type_or_standard in('#{STANDARD}')
  and sector.system_type_or_standard != 'TDD'

]]>
</sqlTemplate>

<sqlTemplate id="CustExpVsl_09_01_sqr_mkt_info" description="取得当前中心点指定范围内的y高价值基站数据（只取4G）">
<![CDATA[
select CITY_NAME,AREA_NAME,MKT_CENTER_NAME,BASE_STATN_NAME,bs_vendor,latitude_baidu,longitude_baidu,BASE_STATN_ID
			,DURATION,FLOW_UL,FLOW_DL,round(FLOW_ALL/1024,2) as fa ,round(2G_TRAFFIC,2) as TRAFFIC_2G,BSC_ID
from noce.FRT_HIGH_VALUE_BS_M
where month = #{MONTH}
	and nettype='#{NETTYPE}'
	and abs(latitude_baidu-#{LATITUDCENTER})<0.008993649 * #{DIST_KM_H}
  	and abs(longitude_baidu-#{LONGITUDCENTER})<0.011808044 * #{DIST_KM_V}
]]>
</sqlTemplate>

<sqlTemplate id="CustExpVsl_09_02_sqr_mkt_info" description="取得当前中心点指定范围内的y高价值基站数据（只取4G）">
<![CDATA[
select CITY_NAME,AREA_NAME,MKT_CENTER_NAME,BASE_STATN_NAME,bs_vendor,latitude_baidu,longitude_baidu,BASE_STATN_ID
			,DURATION,FLOW_UL,FLOW_DL,round(FLOW_ALL/1024,2) as fa ,round(2G_TRAFFIC,2) as TRAFFIC_2G,BSC_ID
from noce.FRT_HIGH_VALUE_BS_M
where month = #{MONTH}
	and nettype='#{NETTYPE}'
	and city_name = '#{CITYNAME}'
  	and area_name = '#{DISTRICTNAME}'
	and mkt_center_name = '#{MKTCENNAME}'
]]>
</sqlTemplate>

<sqlTemplate id="CustExpVsl_09_02_FlowOfBSN" description="4G基站，显示基站/扇区信息时，增加显示其日流量数据">
<![CDATA[
getByKeys
NOCE:DSI_WIRELESS_KPI_STAT_D
#{KEY}
i:a59,i:a60
]]>
</sqlTemplate>

<sqlTemplate id="CustExpVsl_09_03_2GTrafficOfBSN" description="取得某个基站某一天的话务量" DB="hbase">
<![CDATA[
getByKeys
NOCE:DSI_2GKPI_STAT_D
#{KEY}
i:a11
]]>
</sqlTemplate>

<sqlTemplate id="CustExpVsl_10_sector_search" description="模糊搜索扇区（取2G和4G）">
<![CDATA[
select distinct city_name,area_name,mkt_center_name,base_statn_id,base_statn_name,bs_vendor,longitude_baidu,latitude_baidu,sector_id,sector_name,sector_addr,ant_azimuth,longitude,latitude,cell_id,cell_name,
is_indoor,band,ANT_ELECTRON_ANGLE,ANT_ENGINE_ANGLE,high,ACCEPTSTATUS,nettype,BSC_ID,TOTAL_DECLINATION_ANGLE
from noce.dim_sector
where day = (select max(day) from noce.dim_sector) 
  and nettype='#{NETTYPE}'
  and city_name = '#{CITYNAME}'
  and system_type_or_standard in('#{STANDARD}')
  and system_type_or_standard != 'TDD'
  and ( concat(base_statn_id,cell_id) like '%#{MATCHSTRING}%'  
        or 
        cell_name like '%#{MATCHSTRING}%'  ) limit 10
]]>
</sqlTemplate>

<sqlTemplate id="CustExpVsl_11_export_data" description="导出2G或4G指标值">
<![CDATA[SELECT GRID_NUM , LONGITUDE_MIN,LATITUDE_MIN,LONGITUDE_MID,LATITUDE_MID,LONGITUDE_MAX,LATITUDE_MAX,
		ROUND(CAST(MR_RSRP_TOT AS DECIMAL)/MR_RSRP_COUNTS,1) AS MR_RSRP,
		ROUND(CAST(MR_RIP_CON_TOT AS DECIMAL)/MR_RIP_CON_COUNTS,1) AS MR_RIP_CON,
		(WEBPAGE_OPEN_DELAY_COUNTS-WEBPAGE_OPEN_DELAY_BAD_COUNTS)/WEBPAGE_OPEN_DELAY_COUNTS AS WEBPAGE_OPEN_DELAY,
		ROUND(CAST(WEBPAGE_OPEN_DELAY_TOT AS DECIMAL)/WEBPAGE_OPEN_DELAY_COUNTS,1) AS WEBPAGE_OPEN_DELAY_AVG,
		(VIDIO_DOWNLOAD_RATE_COUNTS-VIDIO_DOWNLOAD_RATE_BAD_COUNTS)/VIDIO_DOWNLOAD_RATE_COUNTS AS VIDIO_DOWNLOAD_RATE,
		ROUND(CAST(VIDIO_DOWNLOAD_RATE_TOT AS DECIMAL)/VIDIO_DOWNLOAD_RATE_COUNTS,1) AS VIDIO_DOWNLOAD_RATE_AVG,
    USER_COUNT,USER_COUNT_1M_MAX,
		ROUND(CAST(2G_COVERAGE_ECIO_TOT AS DECIMAL)/2G_COVERAGE_ECIO_COUNTS,1) AS 2G_COVERAGE_ECIO,
		ROUND(CAST(2G_DISTURB_RSSI_TOT AS DECIMAL)/2G_DISTURB_RSSI_COUNTS,1) AS 2G_DISTURB_RSSI,
		2G_VOICE_DROP_FAIL_COUNTS/2G_VOICE_DROP_COUNTS AS 2G_VOICE_DROP_FAIL,
		2G_VOICE_SETUP_FAIL_COUNTS/2G_VOICE_DROP_COUNTS AS 2G_VOICE_SETUP_FAIL,
		2G_USERS,2G_MAX_1MIN
FROM NOCE.FRT_GRID_KQI_100_D
WHERE DAY=#{DAY}
	  AND CITY = '#{CITY}'
  	  AND COUNTRY = '#{COUNTRY}'
	  AND MKTCENTER = '#{MKTCENTER}' 
	  ]]>
</sqlTemplate>

<sqlTemplate id="CustExpVsl_12_store" description="取厅店数据">
<![CDATA[
SELECT CITY,STORE_ID,STORE_CODE,STORE_NAME,CRM_CODE,STORE_STAT,DISTRICT,
	   ADDRESS,MARKETBASE,NET_SUBTYPE,
	   BAIDU_LATITUDE,BAIDU_LONGITUDE,
       CHANNEL_SUBTYPE,STORE_AGENCY
FROM NOCE.DIM_STORE_GPS
WHERE CITY='#{CITY}'
	  AND ABS(BAIDU_LATITUDE-#{LATITUDCENTER})<0.008993649 * #{DIST_KM_H}
  	  AND ABS(BAIDU_LONGITUDE-#{LONGITUDCENTER})<0.011808044 * #{DIST_KM_V}

]]>
</sqlTemplate>

<sqlTemplate id="CustExpVsl_12_grsource" description="取干扰源数据">
<![CDATA[
SELECT * FROM NOCE.DIM_INTERFERENCE_SOURCE_INFO
WHERE ABS(BAIDU_LATITUDE-#{LATITUDCENTER})<0.008993649 * #{DIST_KM_H}
        AND ABS(BAIDU_LONGITUDE-#{LONGITUDCENTER})<0.011808044 * #{DIST_KM_V}

]]>
</sqlTemplate>

<sqlTemplate id="MobilePerceptionVsl_01_bar_chart" description="根据选择地域显示指标汇总图和指标列表" DB="hbase">
<![CDATA[
getByKeyScope
NOCE:DSI_WIRELESS_MULTI
#{KEYPREFIX}
#{KEYPREFIX}~
#{COLUMNLIST}
]]>
</sqlTemplate>

<sqlTemplate id="MobilePerceptionVsl_02_line_chart" description="根据选择地域显示历史时间渐变图" DB="hbase">
<![CDATA[
getByKeys
NOCE:DSI_WIRELESS_MULTI
#{KEY_LIST}
#{COLUMNLIST}
]]>
</sqlTemplate>

<sqlTemplate id="MobilePerceptionVsl_03_detail_table_export_4g" description="导出4G指标数据" DB="hbase">
<![CDATA[
select key
	,case when (MR_RSRP_COUNTS is NULL or MR_RSRP_COUNTS = 0) then 0 else round(nvl(MR_RSRP_115_COUNTS, 0)*100/MR_RSRP_COUNTS, 2) end as network_cover_4g
	,case when (MR_RSRP_COUNTS is NULL or MR_RSRP_COUNTS = 0) then 0 else round(nvl(MR_RSRP_TOT, 0)*100/MR_RSRP_COUNTS, 2) end as network_cover_mean_4g
	,MR_RSRP_115_COUNTS as network_numerator_4g
	,MR_RSRP_COUNTS as network_denominator_4g
	,case when (MR_RIP_CON_COUNTS is NULL or MR_RIP_CON_COUNTS = 0) then 0 else round(nvl(MR_RIP_CON_110_COUNTS, 0)*100/MR_RIP_CON_COUNTS, 2) end as upload_inter_4g
	,case when (MR_RIP_CON_COUNTS is NULL or MR_RIP_CON_COUNTS = 0) then 0 else round(nvl(MR_RIP_CON_TOT, 0)*100/MR_RIP_CON_COUNTS, 2) end as upload_inter_mean_4g
	,MR_RIP_CON_110_COUNTS as upload_inter_numerator_4g
	,MR_RIP_CON_COUNTS as upload_inter_denominator_4g
	,case when (WEBPAGE_OPEN_DELAY_COUNTS is NULL or WEBPAGE_OPEN_DELAY_COUNTS = 0) then 0 else round((1-nvl(WEBPAGE_OPEN_DELAY_BAD_COUNTS, 0)/WEBPAGE_OPEN_DELAY_COUNTS)*100, 2) end as web_delay_4g
	,case when (WEBPAGE_OPEN_DELAY_COUNTS is NULL or WEBPAGE_OPEN_DELAY_COUNTS = 0) then 0 else round(nvl(WEBPAGE_OPEN_DELAY_TOT, 0)*100/WEBPAGE_OPEN_DELAY_COUNTS, 2) end as web_delay_mean_4g
	,(WEBPAGE_OPEN_DELAY_COUNTS-WEBPAGE_OPEN_DELAY_BAD_COUNTS) as web_delay_numerator_4g
	,WEBPAGE_OPEN_DELAY_COUNTS as web_delay_denominator_4g
	,case when (VIDIO_DOWNLOAD_RATE_COUNTS is NULl or VIDIO_DOWNLOAD_RATE_COUNTS = 0) then 0 else round((1-nvl(VIDIO_DOWNLOAD_RATE_BAD_COUNTS, 0)/VIDIO_DOWNLOAD_RATE_COUNTS)*100, 2) end as video_speed_4g
	,case when (VIDIO_DOWNLOAD_RATE_COUNTS is NULL or VIDIO_DOWNLOAD_RATE_COUNTS = 0) then 0 else round(nvl(VIDIO_DOWNLOAD_RATE_TOT, 0)*100/VIDIO_DOWNLOAD_RATE_COUNTS, 2) end as video_speed_mean_4g
	,(VIDIO_DOWNLOAD_RATE_COUNTS-VIDIO_DOWNLOAD_RATE_BAD_COUNTS) as video_speed_numerator_4g
	,VIDIO_DOWNLOAD_RATE_COUNTS as video_speed_denominator_4g
	,4g_USER_COUNTS as user_counts_4g
	,USER_COUNT_1M_MAX
	,round(4G_DATA_FLOW/10240000,2) as DATA_FLOW_4G --流量，单位：万GB
from noce.DSI_WIRELESS_MULTI
where key like '#{START_TIME}_#{TIME_DELTA}_#{AREA_TYPE}_#{CITY}_#{CLICK_AREA}_%'
order by key
]]>
</sqlTemplate>

<sqlTemplate id="MobilePerceptionVsl_04_detail_table_export_2g" description="导出2G指标数据" DB="hbase">
<![CDATA[
select key
	,case when (2G_COVERAGE_ECIO_COUNTS is NULL or 2G_COVERAGE_ECIO_COUNTS = 0) then 0 else round(nvl(2G_COVERAGE_ECIO_12_COUNTS, 0)*100/2G_COVERAGE_ECIO_COUNTS, 2) end as network_cover_2g
	,case when (2G_COVERAGE_ECIO_COUNTS is NULL or 2G_COVERAGE_ECIO_COUNTS = 0) then 0 else round(nvl(2G_COVERAGE_ECIO_TOT, 0)*100/2G_COVERAGE_ECIO_COUNTS, 2) end as network_cover_mean_2g
	,2G_COVERAGE_ECIO_12_COUNTS as network_cover_numerator_2g
	,2G_COVERAGE_ECIO_COUNTS as network_cover_denominator_2g
	,case when (2G_DISTURB_RSSI_COUNTS is NULL or 2G_DISTURB_RSSI_COUNTS = 0) then 0 else round(nvl(2G_DISTURB_RSSI_93_COUNTS, 0)*100/2G_DISTURB_RSSI_COUNTS, 2) end as upload_inter_2g
	,case when (2G_DISTURB_RSSI_COUNTS is NULL or 2G_DISTURB_RSSI_COUNTS = 0) then 0 else round(nvl(2G_DISTURB_RSSI_TOT, 0)*100/2G_DISTURB_RSSI_COUNTS, 2) end as upload_inter_mean_2g
	,2G_DISTURB_RSSI_93_COUNTS as upload_inter_numerator_2g
	,2G_DISTURB_RSSI_COUNTS as upload_inter_denominator_2g
	,case when (2G_VOICE_DROP_COUNTS is NULL or 2G_VOICE_DROP_COUNTS = 0) then 0 else round(nvl(2G_VOICE_DROP_FAIL_COUNTS, 0)*100/2G_VOICE_DROP_COUNTS, 2) end as voice_drop_2g
	,case when (2G_VOICE_DROP_COUNTS is NULL or 2G_VOICE_DROP_COUNTS = 0) then 0 else round((1-nvl(2G_VOICE_SETUP_FAIL_COUNTS, 0)/2G_VOICE_DROP_COUNTS)*100, 2) end as voice_setup_2g
	,2g_user_counts as user_counts_2g
	,user_counts_MAX_1MIN
	,round(2G_TRAFFIC/10000,2) as TRAFFIC_2G --话务量，单位：万ERL
from noce.DSI_WIRELESS_MULTI
where key like '#{START_TIME}_#{TIME_DELTA}_#{AREA_TYPE}_#{CITY}_#{CLICK_AREA}_%'
order by key
]]>
</sqlTemplate>

<sqlTemplate id="SrvPrdMdl4G_district_info" description="取某个地市下属所有区县的地理信息">
<![CDATA[
select DISTRICT_NAME
       ,round((BAIDU_MAX_LONGITUDE+BAIDU_MIN_LONGITUDE)/2,6) as lng_cnt -- 经度中心
       ,round((BAIDU_MAXLATITUDE+BAIDU_MINLATITUDE)/2,6) as lat_cnt -- 纬度中心
from NOCE.dim_district_gis_data
where day= (select max(day) from NOCE.dim_district_gis_data)
   and city_name like '%#{CITYNAME}%'
]]>
</sqlTemplate>


<sqlTemplate id="SrvPrdMdl4G_01_VIP_grip_and_cell_new_count_cities" description="取全省或某地市的高分栅格数和新增扇区数">
<![CDATA[
select * from
(
select count(*) as vip_grip_cnt -- 高分栅格数
from  noce.FRT_GRID_VALUE_100_D
where day=#{DAY}
      #{AREACOND}
      and #{EVLOPTION} >= #{THRESHOLD}
      and city is not null and trim(city)<>''
      and country is not null and trim(country)<>''
) a
join
(
select count(distinct (enodeb_id*100+cell_id)) as cell_new_cnt -- 新增扇区数
from  noce.FRT_CELL_NEW_D
where day=#{DAY}
      #{AREACOND}
      and district is not null and trim(district)<>''
      and is_new=1
) b
]]>
</sqlTemplate>

<sqlTemplate id="SrvPrdMdl4G_02_VIP_grip_and_cell_new_count_cities" description="取各地市的高分栅格数和新增基站数">
<![CDATA[
select a.city_name,b.cnt as vip_grid_count, c.cnt as cell_new_count 
from
(select city_name,city_display_order from noce.dim_tele_city where city_display_order between 1 and 21) a
left outer join
(
select city, count(*) as cnt
from  noce.FRT_GRID_VALUE_100_D
where day=#{DAY}
      and #{EVLOPTION} =#{THRESHOLD}
      and city is not null and trim(city)<>''
      and country is not null and trim(country)<>''
group by city
) b
on a.city_name = b.city
left outer join
(
select city_name, count(distinct (enodeb_id*100+cell_id)) as cnt
from  noce.FRT_CELL_NEW_D
where day=#{DAY}
      and city_name is not null and trim(city_name)<>''
      and is_new=1
group by city_name
) c
on a.city_name = c.city_name
order by nvl(b.cnt,0) desc
]]>
</sqlTemplate>

<sqlTemplate id="SrvPrdMdl4G_03_VIP_grip_and_cell_new_count_districts" description="取某地市各区县的高分栅格数和新增基站数">
<![CDATA[
select a.district_name,a.gis_data_baidu,b.cnt as vip_grid_count, c.cnt as cell_new_count
from 
(select district_name,gis_data_baidu from noce.dim_district_gis_data where city_name  = '#{CITY}' ) a
left outer join 
(
select country, count(*) as cnt
from  noce.FRT_GRID_VALUE_100_D
where day=#{DAY}
      and city = '#{CITY}'
      and country is not null and trim(country)<>''
      and #{EVLOPTION} =#{THRESHOLD}
group by country
) b
on a.district_name = b.country
left outer join
(
select district, count(distinct (enodeb_id*100+cell_id)) as cnt
from  noce.FRT_CELL_NEW_D
where day=#{DAY}
      and city =  '#{CITY}'
      and district is not null and trim(district)<>''
      and is_new=1
group by district
) c
on a.district_name = c.district
order by nvl(b.cnt,0) desc
]]>
</sqlTemplate>


<sqlTemplate id="SrvPrdMdl4G_04_VIP_grip_top20" description="取全省或某地市或某区县的高分栅格前20名">
<![CDATA[
select grid_num -- 栅格号
      ,city,country,grid     -- 网络
      ,longitude_min,latitude_min,longitude_mid,latitude_mid,longitude_max,latitude_max
      ,round(LTE_INVEST_SCORE,2) LTE_INVEST_SCORE
      ,round(LTE_800M_CULTIVATE_SCORE,2) LTE_800M_CULTIVATE_SCORE,
      round(nvl(MR_RSRP_SCORE,0),2) MR_RSRP_SCORE,
	round(nvl(IMPT_CDMA_BTS_SCORE,0),2) IMPT_CDMA_BTS_SCORE,
	round(nvl(RRC_REQUEST_SCORE,0),2) RRC_REQUEST_SCORE,
	round(nvl(L_C_SWITCH_COUNT_SCORE,0),2) L_C_SWITCH_COUNT_SCORE,
	round(nvl(L_C_SWITCH_FLOW_SCORE,0),2) L_C_SWITCH_FLOW_SCORE,
	round(nvl(VOICE_TRAFFIC_2G_SCORE,0),2) VOICE_TRAFFIC_2G_SCORE,
	round(nvl(WEBPAGE_OPEN_DELAY_SCORE,0),2) WEBPAGE_OPEN_DELAY_SCORE,
	round(nvl(FLOW_3G_SCORE,0),2) FLOW_3G_SCORE,
	round(nvl(FLOW_4G_SCORE,0),2) FLOW_4G_SCORE,
	round(nvl(HIGH_DUE_USER_4G_SCORE,0),2) HIGH_DUE_USER_4G_SCORE,
	round(nvl(HIGH_FLOW_USER_4G_SCORE,0),2) HIGH_FLOW_USER_4G_SCORE,
	round(nvl(TERMINAL_VOLTE_RATE_SCORE,0),2) TERMINAL_VOLTE_RATE_SCORE,
	round(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0),2) LOAD_BAD_QUALITY_BTS_SCORE
from  noce.#{TABLENAME}
where day=#{DAY}
      #{AREACOND}
      #{DISTCOND}
order by #{EVLOPTION} desc limit 20
]]>
</sqlTemplate>
<sqlTemplate id="SrvPrdMdl4G_06_VIP_grip_map" description="取全省或某地市或某区县的栅格地图（每个级别取前20名，最多100条记录）">
<![CDATA[
select grid_num -- 栅格号
      ,city,country,grid     -- 网格
      ,1 as level
      ,longitude_min,latitude_min,longitude_mid,latitude_mid,longitude_max,latitude_max
      ,round(LTE_INVEST_SCORE,2) LTE_INVEST_SCORE,nvl(LTE_INVEST_RECOMMEND,0) LTE_INVEST_RECOMMEND
      ,round(LTE_800M_CULTIVATE_SCORE,2) LTE_800M_CULTIVATE_SCORE,nvl(LTE_800M_RECOMMEND,0) LTE_800M_RECOMMEND
       ,round(((nvl(MR_RSRP_SCORE,0) * #{C010101} 
       + nvl(DT_RSRP_SCORE,0) * #{C010102} )* #{C0101} 
       + nvl(impt_cdma_bts_score,0) * #{C0102} 
       + nvl(COMP_USER_SCORE,0) * #{C0103} 
       + nvl(rrc_request_score,0) * #{C0104} 
       + (nvl(L_C_SWITCH_COUNT_SCORE,0) * #{C010501} +  nvl(L_C_SWITCH_DURATION_SCORE,0) * #{C010502} +  nvl(L_C_SWITCH_FLOW_SCORE,0) * #{C010503} ) * #{C0105}
       ) ,2)  as network_cover -- 网络覆盖
      ,round(nvl(MR_RSRP_SCORE,0) * #{C010101} + nvl(DT_RSRP_SCORE,0) * #{C010102},2)  as rsrp_4g_cover -- 4G RSRP覆盖
      ,round(nvl(IMPT_CDMA_BTS_SCORE,0),2) IMPT_CDMA_BTS_SCORE -- 重要C网基站分布
      ,round(nvl(COMP_USER_SCORE,0),2) COMP_USER_SCORE -- 投诉用户
      ,round(nvl(RRC_REQUEST_SCORE,0),2) RRC_REQUEST_SCORE -- 4G连接信令密度分布
      ,round(nvl(L_C_SWITCH_COUNT_SCORE,0) * #{C010501} +  nvl(L_C_SWITCH_DURATION_SCORE,0) * #{C010502} +  nvl(L_C_SWITCH_FLOW_SCORE,0) * #{C010503},2) as down_4Gto3G -- 4G下切3G

      ,round(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0) * #{C0501} ,2)  as aload -- 负荷
      ,round(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0),2) LOAD_BAD_QUALITY_BTS_SCORE -- 负荷质差基站
      
      ,round(((nvl(FLOW_3G_SCORE,0) * #{C020103} + nvl(FLOW_4G_SCORE,0) * #{C020104}) * #{C0201} 
       + (nvl(VOICE_TRAFFIC_2G_SCORE,0) * #{C020101} + nvl(SMS_COUNT_2G_SCORE,0) * #{C020102}) * #{C0202} 
       ) ,2) as srv_value -- 业务价值
      ,round(nvl(FLOW_3G_SCORE,0) * #{C020103} + nvl(FLOW_4G_SCORE,0) * #{C020104},2) as srv_34G -- 3G/4G业务量分布
      ,round(nvl(VOICE_TRAFFIC_2G_SCORE,0) * #{C020101} + nvl(SMS_COUNT_2G_SCORE,0) * #{C020102},2) as srv_2G-- 2G业务量分布
      
      ,round(((nvl(HIGH_DUE_USER_3G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_3G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_3G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_3G_SCORE,0) * #{C030104}) * #{C0301}
        + (nvl(HIGH_DUE_USER_4G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_4G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_4G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_4G_SCORE,0) * #{C030104}) * #{C0303}
       ) ,2) as user_value -- 用户价值
      ,round(nvl(HIGH_DUE_USER_3G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_3G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_3G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_3G_SCORE,0) * #{C030104},2) as user_value_3G -- 3G用户价值
      ,round(nvl(HIGH_DUE_USER_4G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_4G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_4G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_4G_SCORE,0) * #{C030104},2) as user_value_4G -- 4G用户价值

      ,round((nvl(WEBPAGE_FIRST_PKG_DELAY_SCORE,0) * #{C040101} + nvl(WEBPAGE_OPEN_DELAY_SCORE,0) * #{C040102} + nvl(VIDIO_DOWNLOAD_RATE_SCORE,0) * #{C040103} + nvl(APP_DOWNLOAD_RATE_SCORE,0) * #{C040104}
        ) * #{C0401},2) as user_percp-- 用户感知
      ,round(nvl(WEBPAGE_FIRST_PKG_DELAY_SCORE,0) * #{C040101} + nvl(WEBPAGE_OPEN_DELAY_SCORE,0) * #{C040102} + nvl(VIDIO_DOWNLOAD_RATE_SCORE,0) * #{C040103} + nvl(APP_DOWNLOAD_RATE_SCORE,0) * #{C040104},2) as user_percp_4g -- 4G用户感知
      
      ,round(( nvl(TERMINAL_VOLTE_RATE_SCORE,0) * #{C0304} + nvl(TERMINAL_LTE_NO_4G_SCORE,0) * #{C0302} ),2) as terminal -- 终端
      ,round(nvl(TERMINAL_VOLTE_RATE_SCORE,0),2) TERMINAL_VOLTE_RATE_SCORE-- VoLTE终端渗透率
      ,round(nvl(TERMINAL_LTE_NO_4G_SCORE,0),2) TERMINAL_LTE_NO_4G_SCORE -- 价值终端
from  noce.FRT_GRID_VALUE_100_D
where day=#{DAY}
      and city = '#{CITY}'
      #{DISTCOND}
      and #{EVLOPTION}>80
order by #{EVLOPTION} desc limit 300
union all
select grid_num -- 栅格号
      ,city,country,grid     -- 网格
      ,2 as level
      ,longitude_min,latitude_min,longitude_mid,latitude_mid,longitude_max,latitude_max
      ,round(LTE_INVEST_SCORE,2) LTE_INVEST_SCORE,nvl(LTE_INVEST_RECOMMEND,0) LTE_INVEST_RECOMMEND
      ,round(LTE_800M_CULTIVATE_SCORE,2) LTE_800M_CULTIVATE_SCORE,nvl(LTE_800M_RECOMMEND,0) LTE_800M_RECOMMEND
       ,round(((nvl(MR_RSRP_SCORE,0) * #{C010101} 
       + nvl(DT_RSRP_SCORE,0) * #{C010102} )* #{C0101} 
       + nvl(impt_cdma_bts_score,0) * #{C0102} 
       + nvl(COMP_USER_SCORE,0) * #{C0103} 
       + nvl(rrc_request_score,0) * #{C0104} 
       + (nvl(L_C_SWITCH_COUNT_SCORE,0) * #{C010501} +  nvl(L_C_SWITCH_DURATION_SCORE,0) * #{C010502} +  nvl(L_C_SWITCH_FLOW_SCORE,0) * #{C010503} ) * #{C0105}
       ) ,2)  as network_cover -- 网络覆盖
      ,round(nvl(MR_RSRP_SCORE,0) * #{C010101} + nvl(DT_RSRP_SCORE,0) * #{C010102},2)  as rsrp_4g_cover -- 4G RSRP覆盖
      ,round(nvl(IMPT_CDMA_BTS_SCORE,0),2) IMPT_CDMA_BTS_SCORE -- 重要C网基站分布
      ,round(nvl(COMP_USER_SCORE,0),2) COMP_USER_SCORE -- 投诉用户
      ,round(nvl(RRC_REQUEST_SCORE,0),2) RRC_REQUEST_SCORE -- 4G连接信令密度分布
      ,round(nvl(L_C_SWITCH_COUNT_SCORE,0) * #{C010501} +  nvl(L_C_SWITCH_DURATION_SCORE,0) * #{C010502} +  nvl(L_C_SWITCH_FLOW_SCORE,0) * #{C010503},2) as down_4Gto3G -- 4G下切3G

      ,round(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0) * #{C0501} ,2)  as aload -- 负荷
      ,round(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0),2) LOAD_BAD_QUALITY_BTS_SCORE -- 负荷质差基站
      
      ,round(((nvl(FLOW_3G_SCORE,0) * #{C020103} + nvl(FLOW_4G_SCORE,0) * #{C020104}) * #{C0201} 
       + (nvl(VOICE_TRAFFIC_2G_SCORE,0) * #{C020101} + nvl(SMS_COUNT_2G_SCORE,0) * #{C020102}) * #{C0202} 
       ) ,2) as srv_value -- 业务价值
      ,round(nvl(FLOW_3G_SCORE,0) * #{C020103} + nvl(FLOW_4G_SCORE,0) * #{C020104},2) as srv_34G -- 3G/4G业务量分布
      ,round(nvl(VOICE_TRAFFIC_2G_SCORE,0) * #{C020101} + nvl(SMS_COUNT_2G_SCORE,0) * #{C020102},2) as srv_2G-- 2G业务量分布
      
      ,round(((nvl(HIGH_DUE_USER_3G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_3G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_3G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_3G_SCORE,0) * #{C030104}) * #{C0301}
        + (nvl(HIGH_DUE_USER_4G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_4G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_4G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_4G_SCORE,0) * #{C030104}) * #{C0303}
       ) ,2) as user_value -- 用户价值
      ,round(nvl(HIGH_DUE_USER_3G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_3G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_3G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_3G_SCORE,0) * #{C030104},2) as user_value_3G -- 3G用户价值
      ,round(nvl(HIGH_DUE_USER_4G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_4G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_4G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_4G_SCORE,0) * #{C030104},2) as user_value_4G -- 4G用户价值

      ,round((nvl(WEBPAGE_FIRST_PKG_DELAY_SCORE,0) * #{C040101} + nvl(WEBPAGE_OPEN_DELAY_SCORE,0) * #{C040102} + nvl(VIDIO_DOWNLOAD_RATE_SCORE,0) * #{C040103} + nvl(APP_DOWNLOAD_RATE_SCORE,0) * #{C040104}
        ) * #{C0401},2) as user_percp-- 用户感知
      ,round(nvl(WEBPAGE_FIRST_PKG_DELAY_SCORE,0) * #{C040101} + nvl(WEBPAGE_OPEN_DELAY_SCORE,0) * #{C040102} + nvl(VIDIO_DOWNLOAD_RATE_SCORE,0) * #{C040103} + nvl(APP_DOWNLOAD_RATE_SCORE,0) * #{C040104},2) as user_percp_4g -- 4G用户感知
      
      ,round(( nvl(TERMINAL_VOLTE_RATE_SCORE,0) * #{C0304} + nvl(TERMINAL_LTE_NO_4G_SCORE,0) * #{C0302} ),2) as terminal -- 终端
      ,round(nvl(TERMINAL_VOLTE_RATE_SCORE,0),2) TERMINAL_VOLTE_RATE_SCORE-- VoLTE终端渗透率
      ,round(nvl(TERMINAL_LTE_NO_4G_SCORE,0),2) TERMINAL_LTE_NO_4G_SCORE -- 价值终端
from  noce.FRT_GRID_VALUE_100_D
where day=#{DAY}
      and city = '#{CITY}'
      #{DISTCOND}
      and #{EVLOPTION}<=80 and #{EVLOPTION}>60
order by #{EVLOPTION} desc limit 300
union all
select grid_num -- 栅格号
      ,city,country,grid     -- 网格
      ,3 as level
      ,longitude_min,latitude_min,longitude_mid,latitude_mid,longitude_max,latitude_max
      ,round(LTE_INVEST_SCORE,2) LTE_INVEST_SCORE,nvl(LTE_INVEST_RECOMMEND,0) LTE_INVEST_RECOMMEND
      ,round(LTE_800M_CULTIVATE_SCORE,2) LTE_800M_CULTIVATE_SCORE,nvl(LTE_800M_RECOMMEND,0) LTE_800M_RECOMMEND
       ,round(((nvl(MR_RSRP_SCORE,0) * #{C010101} 
       + nvl(DT_RSRP_SCORE,0) * #{C010102} )* #{C0101} 
       + nvl(impt_cdma_bts_score,0) * #{C0102} 
       + nvl(COMP_USER_SCORE,0) * #{C0103} 
       + nvl(rrc_request_score,0) * #{C0104} 
       + (nvl(L_C_SWITCH_COUNT_SCORE,0) * #{C010501} +  nvl(L_C_SWITCH_DURATION_SCORE,0) * #{C010502} +  nvl(L_C_SWITCH_FLOW_SCORE,0) * #{C010503} ) * #{C0105}
       ) ,2)  as network_cover -- 网络覆盖
      ,round(nvl(MR_RSRP_SCORE,0) * #{C010101} + nvl(DT_RSRP_SCORE,0) * #{C010102},2)  as rsrp_4g_cover -- 4G RSRP覆盖
      ,round(nvl(IMPT_CDMA_BTS_SCORE,0),2) IMPT_CDMA_BTS_SCORE -- 重要C网基站分布
      ,round(nvl(COMP_USER_SCORE,0),2) COMP_USER_SCORE -- 投诉用户
      ,round(nvl(RRC_REQUEST_SCORE,0),2) RRC_REQUEST_SCORE -- 4G连接信令密度分布
      ,round(nvl(L_C_SWITCH_COUNT_SCORE,0) * #{C010501} +  nvl(L_C_SWITCH_DURATION_SCORE,0) * #{C010502} +  nvl(L_C_SWITCH_FLOW_SCORE,0) * #{C010503},2) as down_4Gto3G -- 4G下切3G

      ,round(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0) * #{C0501} ,2)  as aload -- 负荷
      ,round(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0),2) LOAD_BAD_QUALITY_BTS_SCORE -- 负荷质差基站
      
      ,round(((nvl(FLOW_3G_SCORE,0) * #{C020103} + nvl(FLOW_4G_SCORE,0) * #{C020104}) * #{C0201} 
       + (nvl(VOICE_TRAFFIC_2G_SCORE,0) * #{C020101} + nvl(SMS_COUNT_2G_SCORE,0) * #{C020102}) * #{C0202} 
       ) ,2) as srv_value -- 业务价值
      ,round(nvl(FLOW_3G_SCORE,0) * #{C020103} + nvl(FLOW_4G_SCORE,0) * #{C020104},2) as srv_34G -- 3G/4G业务量分布
      ,round(nvl(VOICE_TRAFFIC_2G_SCORE,0) * #{C020101} + nvl(SMS_COUNT_2G_SCORE,0) * #{C020102},2) as srv_2G-- 2G业务量分布
      
      ,round(((nvl(HIGH_DUE_USER_3G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_3G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_3G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_3G_SCORE,0) * #{C030104}) * #{C0301}
        + (nvl(HIGH_DUE_USER_4G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_4G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_4G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_4G_SCORE,0) * #{C030104}) * #{C0303}
       ) ,2) as user_value -- 用户价值
      ,round(nvl(HIGH_DUE_USER_3G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_3G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_3G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_3G_SCORE,0) * #{C030104},2) as user_value_3G -- 3G用户价值
      ,round(nvl(HIGH_DUE_USER_4G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_4G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_4G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_4G_SCORE,0) * #{C030104},2) as user_value_4G -- 4G用户价值

      ,round((nvl(WEBPAGE_FIRST_PKG_DELAY_SCORE,0) * #{C040101} + nvl(WEBPAGE_OPEN_DELAY_SCORE,0) * #{C040102} + nvl(VIDIO_DOWNLOAD_RATE_SCORE,0) * #{C040103} + nvl(APP_DOWNLOAD_RATE_SCORE,0) * #{C040104}
        ) * #{C0401},2) as user_percp-- 用户感知
      ,round(nvl(WEBPAGE_FIRST_PKG_DELAY_SCORE,0) * #{C040101} + nvl(WEBPAGE_OPEN_DELAY_SCORE,0) * #{C040102} + nvl(VIDIO_DOWNLOAD_RATE_SCORE,0) * #{C040103} + nvl(APP_DOWNLOAD_RATE_SCORE,0) * #{C040104},2) as user_percp_4g -- 4G用户感知
      
      ,round(( nvl(TERMINAL_VOLTE_RATE_SCORE,0) * #{C0304} + nvl(TERMINAL_LTE_NO_4G_SCORE,0) * #{C0302} ),2) as terminal -- 终端
      ,round(nvl(TERMINAL_VOLTE_RATE_SCORE,0),2) TERMINAL_VOLTE_RATE_SCORE-- VoLTE终端渗透率
      ,round(nvl(TERMINAL_LTE_NO_4G_SCORE,0),2) TERMINAL_LTE_NO_4G_SCORE -- 价值终端
from  noce.FRT_GRID_VALUE_100_D
where day=#{DAY}
      and city = '#{CITY}'
      #{DISTCOND}
      and #{EVLOPTION}<=60 and #{EVLOPTION}>40
order by #{EVLOPTION} desc limit 300
union all
select grid_num -- 栅格号
      ,city,country,grid     -- 网格
      ,4 as level
      ,longitude_min,latitude_min,longitude_mid,latitude_mid,longitude_max,latitude_max
      ,round(LTE_INVEST_SCORE,2) LTE_INVEST_SCORE,nvl(LTE_INVEST_RECOMMEND,0) LTE_INVEST_RECOMMEND
      ,round(LTE_800M_CULTIVATE_SCORE,2) LTE_800M_CULTIVATE_SCORE,nvl(LTE_800M_RECOMMEND,0) LTE_800M_RECOMMEND
       ,round(((nvl(MR_RSRP_SCORE,0) * #{C010101} 
       + nvl(DT_RSRP_SCORE,0) * #{C010102} )* #{C0101} 
       + nvl(impt_cdma_bts_score,0) * #{C0102} 
       + nvl(COMP_USER_SCORE,0) * #{C0103} 
       + nvl(rrc_request_score,0) * #{C0104} 
       + (nvl(L_C_SWITCH_COUNT_SCORE,0) * #{C010501} +  nvl(L_C_SWITCH_DURATION_SCORE,0) * #{C010502} +  nvl(L_C_SWITCH_FLOW_SCORE,0) * #{C010503} ) * #{C0105}
       ) ,2)  as network_cover -- 网络覆盖
      ,round(nvl(MR_RSRP_SCORE,0) * #{C010101} + nvl(DT_RSRP_SCORE,0) * #{C010102},2)  as rsrp_4g_cover -- 4G RSRP覆盖
      ,round(nvl(IMPT_CDMA_BTS_SCORE,0),2) IMPT_CDMA_BTS_SCORE -- 重要C网基站分布
      ,round(nvl(COMP_USER_SCORE,0),2) COMP_USER_SCORE -- 投诉用户
      ,round(nvl(RRC_REQUEST_SCORE,0),2) RRC_REQUEST_SCORE -- 4G连接信令密度分布
      ,round(nvl(L_C_SWITCH_COUNT_SCORE,0) * #{C010501} +  nvl(L_C_SWITCH_DURATION_SCORE,0) * #{C010502} +  nvl(L_C_SWITCH_FLOW_SCORE,0) * #{C010503},2) as down_4Gto3G -- 4G下切3G

      ,round(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0) * #{C0501} ,2)  as aload -- 负荷
      ,round(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0),2) LOAD_BAD_QUALITY_BTS_SCORE -- 负荷质差基站
      
      ,round(((nvl(FLOW_3G_SCORE,0) * #{C020103} + nvl(FLOW_4G_SCORE,0) * #{C020104}) * #{C0201} 
       + (nvl(VOICE_TRAFFIC_2G_SCORE,0) * #{C020101} + nvl(SMS_COUNT_2G_SCORE,0) * #{C020102}) * #{C0202} 
       ) ,2) as srv_value -- 业务价值
      ,round(nvl(FLOW_3G_SCORE,0) * #{C020103} + nvl(FLOW_4G_SCORE,0) * #{C020104},2) as srv_34G -- 3G/4G业务量分布
      ,round(nvl(VOICE_TRAFFIC_2G_SCORE,0) * #{C020101} + nvl(SMS_COUNT_2G_SCORE,0) * #{C020102},2) as srv_2G-- 2G业务量分布
      
      ,round(((nvl(HIGH_DUE_USER_3G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_3G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_3G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_3G_SCORE,0) * #{C030104}) * #{C0301}
        + (nvl(HIGH_DUE_USER_4G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_4G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_4G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_4G_SCORE,0) * #{C030104}) * #{C0303}
       ) ,2) as user_value -- 用户价值
      ,round(nvl(HIGH_DUE_USER_3G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_3G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_3G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_3G_SCORE,0) * #{C030104},2) as user_value_3G -- 3G用户价值
      ,round(nvl(HIGH_DUE_USER_4G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_4G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_4G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_4G_SCORE,0) * #{C030104},2) as user_value_4G -- 4G用户价值

      ,round((nvl(WEBPAGE_FIRST_PKG_DELAY_SCORE,0) * #{C040101} + nvl(WEBPAGE_OPEN_DELAY_SCORE,0) * #{C040102} + nvl(VIDIO_DOWNLOAD_RATE_SCORE,0) * #{C040103} + nvl(APP_DOWNLOAD_RATE_SCORE,0) * #{C040104}
        ) * #{C0401},2) as user_percp-- 用户感知
      ,round(nvl(WEBPAGE_FIRST_PKG_DELAY_SCORE,0) * #{C040101} + nvl(WEBPAGE_OPEN_DELAY_SCORE,0) * #{C040102} + nvl(VIDIO_DOWNLOAD_RATE_SCORE,0) * #{C040103} + nvl(APP_DOWNLOAD_RATE_SCORE,0) * #{C040104},2) as user_percp_4g -- 4G用户感知
      
      ,round(( nvl(TERMINAL_VOLTE_RATE_SCORE,0) * #{C0304} + nvl(TERMINAL_LTE_NO_4G_SCORE,0) * #{C0302} ),2) as terminal -- 终端
      ,round(nvl(TERMINAL_VOLTE_RATE_SCORE,0),2) TERMINAL_VOLTE_RATE_SCORE-- VoLTE终端渗透率
      ,round(nvl(TERMINAL_LTE_NO_4G_SCORE,0),2) TERMINAL_LTE_NO_4G_SCORE -- 价值终端
from  noce.FRT_GRID_VALUE_100_D
where day=#{DAY}
      and city = '#{CITY}'
      #{DISTCOND}
      and #{EVLOPTION}<=40 and #{EVLOPTION}>20
order by #{EVLOPTION} desc limit 300
union all
select grid_num -- 栅格号
      ,city,country,grid     -- 网格
      ,5 as level
      ,longitude_min,latitude_min,longitude_mid,latitude_mid,longitude_max,latitude_max
      ,round(LTE_INVEST_SCORE,2) LTE_INVEST_SCORE,nvl(LTE_INVEST_RECOMMEND,0) LTE_INVEST_RECOMMEND
      ,round(LTE_800M_CULTIVATE_SCORE,2) LTE_800M_CULTIVATE_SCORE,nvl(LTE_800M_RECOMMEND,0) LTE_800M_RECOMMEND
       ,round(((nvl(MR_RSRP_SCORE,0) * #{C010101} 
       + nvl(DT_RSRP_SCORE,0) * #{C010102} )* #{C0101} 
       + nvl(impt_cdma_bts_score,0) * #{C0102} 
       + nvl(COMP_USER_SCORE,0) * #{C0103} 
       + nvl(rrc_request_score,0) * #{C0104} 
       + (nvl(L_C_SWITCH_COUNT_SCORE,0) * #{C010501} +  nvl(L_C_SWITCH_DURATION_SCORE,0) * #{C010502} +  nvl(L_C_SWITCH_FLOW_SCORE,0) * #{C010503} ) * #{C0105}
       ) ,2)  as network_cover -- 网络覆盖
      ,round(nvl(MR_RSRP_SCORE,0) * #{C010101} + nvl(DT_RSRP_SCORE,0) * #{C010102},2)  as rsrp_4g_cover -- 4G RSRP覆盖
      ,round(nvl(IMPT_CDMA_BTS_SCORE,0),2) IMPT_CDMA_BTS_SCORE -- 重要C网基站分布
      ,round(nvl(COMP_USER_SCORE,0),2) COMP_USER_SCORE -- 投诉用户
      ,round(nvl(RRC_REQUEST_SCORE,0),2) RRC_REQUEST_SCORE -- 4G连接信令密度分布
      ,round(nvl(L_C_SWITCH_COUNT_SCORE,0) * #{C010501} +  nvl(L_C_SWITCH_DURATION_SCORE,0) * #{C010502} +  nvl(L_C_SWITCH_FLOW_SCORE,0) * #{C010503},2) as down_4Gto3G -- 4G下切3G

      ,round(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0) * #{C0501} ,2)  as aload -- 负荷
      ,round(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0),2) LOAD_BAD_QUALITY_BTS_SCORE -- 负荷质差基站
      
      ,round(((nvl(FLOW_3G_SCORE,0) * #{C020103} + nvl(FLOW_4G_SCORE,0) * #{C020104}) * #{C0201} 
       + (nvl(VOICE_TRAFFIC_2G_SCORE,0) * #{C020101} + nvl(SMS_COUNT_2G_SCORE,0) * #{C020102}) * #{C0202} 
       ) ,2) as srv_value -- 业务价值
      ,round(nvl(FLOW_3G_SCORE,0) * #{C020103} + nvl(FLOW_4G_SCORE,0) * #{C020104},2) as srv_34G -- 3G/4G业务量分布
      ,round(nvl(VOICE_TRAFFIC_2G_SCORE,0) * #{C020101} + nvl(SMS_COUNT_2G_SCORE,0) * #{C020102},2) as srv_2G-- 2G业务量分布
      
      ,round(((nvl(HIGH_DUE_USER_3G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_3G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_3G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_3G_SCORE,0) * #{C030104}) * #{C0301}
        + (nvl(HIGH_DUE_USER_4G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_4G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_4G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_4G_SCORE,0) * #{C030104}) * #{C0303}
       ) ,2) as user_value -- 用户价值
      ,round(nvl(HIGH_DUE_USER_3G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_3G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_3G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_3G_SCORE,0) * #{C030104},2) as user_value_3G -- 3G用户价值
      ,round(nvl(HIGH_DUE_USER_4G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_4G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_4G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_4G_SCORE,0) * #{C030104},2) as user_value_4G -- 4G用户价值

      ,round((nvl(WEBPAGE_FIRST_PKG_DELAY_SCORE,0) * #{C040101} + nvl(WEBPAGE_OPEN_DELAY_SCORE,0) * #{C040102} + nvl(VIDIO_DOWNLOAD_RATE_SCORE,0) * #{C040103} + nvl(APP_DOWNLOAD_RATE_SCORE,0) * #{C040104}
        ) * #{C0401},2) as user_percp-- 用户感知
      ,round(nvl(WEBPAGE_FIRST_PKG_DELAY_SCORE,0) * #{C040101} + nvl(WEBPAGE_OPEN_DELAY_SCORE,0) * #{C040102} + nvl(VIDIO_DOWNLOAD_RATE_SCORE,0) * #{C040103} + nvl(APP_DOWNLOAD_RATE_SCORE,0) * #{C040104},2) as user_percp_4g -- 4G用户感知
      
      ,round(( nvl(TERMINAL_VOLTE_RATE_SCORE,0) * #{C0304} + nvl(TERMINAL_LTE_NO_4G_SCORE,0) * #{C0302} ),2) as terminal -- 终端
      ,round(nvl(TERMINAL_VOLTE_RATE_SCORE,0),2) TERMINAL_VOLTE_RATE_SCORE-- VoLTE终端渗透率
      ,round(nvl(TERMINAL_LTE_NO_4G_SCORE,0),2) TERMINAL_LTE_NO_4G_SCORE -- 价值终端
from  noce.FRT_GRID_VALUE_100_D
where day=#{DAY}
      and city = '#{CITY}'
      #{DISTCOND}
      and #{EVLOPTION}<=20
order by #{EVLOPTION} desc limit 300

]]>
</sqlTemplate>
<sqlTemplate id="SrvPrdMdl4G_07_grip_by_num" description="取指定编号的栅格">
<![CDATA[
select grid_num -- 栅格号
      ,city,country,grid     -- 网络
      ,longitude_min,latitude_min,longitude_mid,latitude_mid,longitude_max,latitude_max
from  noce.FRT_GRID_VALUE_100_D
where day=#{DAY}
      and grid_num = #{GRIDNUM}
]]>
</sqlTemplate>

<sqlTemplate id="SrvPrdMdl4G_05_cell_new_history" description="取全省或某地市新增基站数历史数据">
<![CDATA[
select day,count(distinct (enodeb_id*100+cell_id)) as cnt
from noce.FRT_CELL_NEW_D
where day between #{DAYSTART} and #{DAY}
      #{AREACOND}
      and city_name is not null and trim(city_name)<>''
      and is_new=1
group by day
order by day
]]>
</sqlTemplate>
<sqlTemplate id="SrvPrdMdl4G_08_grip_history" description="取指定编号的栅格的历史数据">
<![CDATA[
select day,grid_num -- 栅格号
      ,city,country,grid     -- 网络
      ,round(LTE_INVEST_SCORE,2) LTE_INVEST_SCORE
      ,round(LTE_800M_CULTIVATE_SCORE,2) LTE_800M_CULTIVATE_SCORE,
    round(nvl(MR_RSRP_SCORE,0),2) MR_RSRP_SCORE,
	round(nvl(IMPT_CDMA_BTS_SCORE,0),2) IMPT_CDMA_BTS_SCORE,
	round(nvl(RRC_REQUEST_SCORE,0),2) RRC_REQUEST_SCORE,
	round(nvl(L_C_SWITCH_COUNT_SCORE,0),2) L_C_SWITCH_COUNT_SCORE,
	round(nvl(L_C_SWITCH_FLOW_SCORE,0),2) L_C_SWITCH_FLOW_SCORE,
	round(nvl(VOICE_TRAFFIC_2G_SCORE,0),2) VOICE_TRAFFIC_2G_SCORE,
	round(nvl(WEBPAGE_OPEN_DELAY_SCORE,0),2) WEBPAGE_OPEN_DELAY_SCORE,
	round(nvl(FLOW_3G_SCORE,0),2) FLOW_3G_SCORE,
	round(nvl(FLOW_4G_SCORE,0),2) FLOW_4G_SCORE,
	round(nvl(HIGH_DUE_USER_4G_SCORE,0),2) HIGH_DUE_USER_4G_SCORE,
	round(nvl(HIGH_FLOW_USER_4G_SCORE,0),2) HIGH_FLOW_USER_4G_SCORE,
	round(nvl(TERMINAL_VOLTE_RATE_SCORE,0),2) TERMINAL_VOLTE_RATE_SCORE,
	round(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0),2) LOAD_BAD_QUALITY_BTS_SCORE
from  noce.#{TABLENAME}
where day between #{DAYSTART} and #{DAY}
      and grid_num = #{GRIDNUM}
	  order by day
]]>
</sqlTemplate>
<sqlTemplate id="SrvPrdMdl4G_09_DIM_PRDT_SCORE_WEIGHT" description="取权重维表的所有数据">
<![CDATA[
select day,tempid,preid,id,name,weight from noce.DIM_PRDT_SCORE_WEIGHT
order by day,tempid,preid,id

]]>
</sqlTemplate>
<sqlTemplate id="SrvPrdMdl4G_10_sqr_mkt_info" description="取得当前中心点指定范围内的基站和扇区数据">
<![CDATA[
select enodeb_id,
cell_id,
city_name,
cell_name,
is_indoor,
ant_azimuth,
baidu_longitude,
baidu_latitude,
project_stat,
factory,
district,
marketbase,
band,
high,
ant_engine_angle,
ant_electron_angle,
ant_declination_angle
from noce.FRT_CELL_NEW_D
where day = #{DAY} 
  and abs(baidu_latitude-#{LATITUDCENTER})<0.008993649 * #{DIST_KM_H}
  and abs(baidu_longitude-#{LONGITUDCENTER})<0.009807044 * #{DIST_KM_V}
  and ant_azimuth is not null
  and is_new=0
order by is_indoor,band
]]>
</sqlTemplate>
<sqlTemplate id="SrvPrdMdl4G_10_sqr_newCell_info" description="地市或者区县新增扇区呈现">
<![CDATA[
select enodeb_id,
cell_id,
city_name,
cell_name,
is_indoor,
ant_azimuth,
baidu_longitude,
baidu_latitude,
project_stat,
factory,
district,
marketbase,
band,
high,
ant_engine_angle,
ant_electron_angle,
ant_declination_angle
from noce.#{TABLENAME}
where day= #{STARTDAY}
and city='#{CITY}'
#{DISTCOND}
#{CELLNAME}
and baidu_longitude is not null
and baidu_latitude is not null
and ant_azimuth is not null
and is_new=1
order by is_indoor,band
]]>
</sqlTemplate>

<sqlTemplate id="SrvPrdMdl4G_11_tile_info" description="查询可视范围内的栅格数据">
<![CDATA[
select grid_num,
longitude_min,
latitude_min,
longitude_mid,
latitude_mid,
longitude_max,
latitude_max,
round(LTE_INVEST_SCORE,2) LTE_INVEST_SCORE,
nvl(LTE_INVEST_HSCORE,0) LTE_INVEST_HSCORE,
round(LTE_800M_CULTIVATE_SCORE,2) LTE_800M_CULTIVATE_SCORE,
nvl(LTE_800M_HSCORE,0) LTE_800M_HSCORE,
round(nvl(MR_RSRP_SCORE,0),2) MR_RSRP_SCORE,
round(nvl(IMPT_CDMA_BTS_SCORE,0),2) IMPT_CDMA_BTS_SCORE,
round(nvl(RRC_REQUEST_SCORE,0),2) RRC_REQUEST_SCORE,
round(nvl(L_C_SWITCH_COUNT_SCORE,0),2) L_C_SWITCH_COUNT_SCORE,
round(nvl(L_C_SWITCH_FLOW_SCORE,0),2) L_C_SWITCH_FLOW_SCORE,
round(nvl(VOICE_TRAFFIC_2G_SCORE,0),2) VOICE_TRAFFIC_2G_SCORE,
round(nvl(WEBPAGE_OPEN_DELAY_SCORE,0),2) WEBPAGE_OPEN_DELAY_SCORE,
round(nvl(FLOW_3G_SCORE,0),2) FLOW_3G_SCORE,
round(nvl(FLOW_4G_SCORE,0),2) FLOW_4G_SCORE,
round(nvl(HIGH_DUE_USER_4G_SCORE,0),2) HIGH_DUE_USER_4G_SCORE,
round(nvl(HIGH_FLOW_USER_4G_SCORE,0),2) HIGH_FLOW_USER_4G_SCORE,
round(nvl(TERMINAL_VOLTE_RATE_SCORE,0),2) TERMINAL_VOLTE_RATE_SCORE,
round(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0),2) LOAD_BAD_QUALITY_BTS_SCORE
from noce.#{TABLENAME}
where day=#{DAY}
      and city = '#{CITY}'
	  #{DISTCOND}
and longitude_mid>=#{MINLNG} and longitude_mid<=#{MAXLNG} 
and latitude_mid>=#{MINLAT}  and latitude_mid<=#{MAXLAT} 
#{BSNRECOMCOND}
]]>
</sqlTemplate>

<sqlTemplate id="SrvPrdMdl4G_12_gridScore_info" description="查询某个栅格的评分">
<![CDATA[
select grid_num -- 栅格号
      ,city,country,grid     -- 网格
      ,longitude_min,latitude_min,longitude_mid,latitude_mid,longitude_max,latitude_max
      ,round(LTE_INVEST_SCORE,2) LTE_INVEST_SCORE,nvl(LTE_INVEST_RECOMMEND,0) LTE_INVEST_RECOMMEND
      ,round(LTE_800M_CULTIVATE_SCORE,2) LTE_800M_CULTIVATE_SCORE,nvl(LTE_800M_RECOMMEND,0) LTE_800M_RECOMMEND
       ,round(((nvl(MR_RSRP_SCORE,0) * #{C010101} 
       + nvl(DT_RSRP_SCORE,0) * #{C010102} )* #{C0101} 
       + nvl(impt_cdma_bts_score,0) * #{C0102} 
       + nvl(COMP_USER_SCORE,0) * #{C0103} 
       + nvl(rrc_request_score,0) * #{C0104} 
       + (nvl(L_C_SWITCH_COUNT_SCORE,0) * #{C010501} +  nvl(L_C_SWITCH_DURATION_SCORE,0) * #{C010502} +  nvl(L_C_SWITCH_FLOW_SCORE,0) * #{C010503} ) * #{C0105}
       )/#{C01},2)  as network_cover -- 网络覆盖
      ,round(nvl(MR_RSRP_SCORE,0) * #{C010101} + nvl(DT_RSRP_SCORE,0) * #{C010102},2)  as rsrp_4g_cover -- 4G RSRP覆盖
      ,round(nvl(IMPT_CDMA_BTS_SCORE,0),2) IMPT_CDMA_BTS_SCORE -- 重要C网基站分布
      ,round(nvl(COMP_USER_SCORE,0),2) COMP_USER_SCORE -- 投诉用户
      ,round(nvl(RRC_REQUEST_SCORE,0),2) RRC_REQUEST_SCORE -- 4G连接信令密度分布
      ,round(nvl(L_C_SWITCH_COUNT_SCORE,0) * #{C010501} +  nvl(L_C_SWITCH_DURATION_SCORE,0) * #{C010502} +  nvl(L_C_SWITCH_FLOW_SCORE,0) * #{C010503},2) as down_4Gto3G -- 4G下切3G

      ,round(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0) * #{C0501}/#{C05} ,2)  as aload -- 负荷
      ,round(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0),2) LOAD_BAD_QUALITY_BTS_SCORE -- 负荷质差基站
      
      ,round(((nvl(FLOW_3G_SCORE,0) * #{C020103} + nvl(FLOW_4G_SCORE,0) * #{C020104}) * #{C0201} 
       + (nvl(VOICE_TRAFFIC_2G_SCORE,0) * #{C020101} + nvl(SMS_COUNT_2G_SCORE,0) * #{C020102}) * #{C0202} 
       ) /#{C02},2) as srv_value -- 业务价值
      ,round(nvl(FLOW_3G_SCORE,0) * #{C020103} + nvl(FLOW_4G_SCORE,0) * #{C020104},2) as srv_34G -- 3G/4G业务量分布
      ,round(nvl(VOICE_TRAFFIC_2G_SCORE,0) * #{C020101} + nvl(SMS_COUNT_2G_SCORE,0) * #{C020102},2) as srv_2G-- 2G业务量分布
      
      ,round(((nvl(HIGH_DUE_USER_3G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_3G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_3G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_3G_SCORE,0) * #{C030104}) * #{C0301}
        + (nvl(HIGH_DUE_USER_4G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_4G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_4G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_4G_SCORE,0) * #{C030104}) * #{C0303}
       )/#{C03} ,2) as user_value -- 用户价值
      ,round(nvl(HIGH_DUE_USER_3G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_3G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_3G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_3G_SCORE,0) * #{C030104},2) as user_value_3G -- 3G用户价值
      ,round(nvl(HIGH_DUE_USER_4G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_4G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_4G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_4G_SCORE,0) * #{C030104},2) as user_value_4G -- 4G用户价值

      ,round((nvl(WEBPAGE_FIRST_PKG_DELAY_SCORE,0) * #{C040101} + nvl(WEBPAGE_OPEN_DELAY_SCORE,0) * #{C040102} + nvl(VIDIO_DOWNLOAD_RATE_SCORE,0) * #{C040103} + nvl(APP_DOWNLOAD_RATE_SCORE,0) * #{C040104}
        ) * #{C0401}/#{C04},2) as user_percp-- 用户感知
      ,round(nvl(WEBPAGE_FIRST_PKG_DELAY_SCORE,0) * #{C040101} + nvl(WEBPAGE_OPEN_DELAY_SCORE,0) * #{C040102} + nvl(VIDIO_DOWNLOAD_RATE_SCORE,0) * #{C040103} + nvl(APP_DOWNLOAD_RATE_SCORE,0) * #{C040104},2) as user_percp_4g -- 4G用户感知
      
      ,round(( nvl(TERMINAL_VOLTE_RATE_SCORE,0) * #{C0304} + nvl(TERMINAL_LTE_NO_4G_SCORE,0) * #{C0302} )/#{C06},2) as terminal -- 终端
      ,round(nvl(TERMINAL_VOLTE_RATE_SCORE,0),2) TERMINAL_VOLTE_RATE_SCORE-- VoLTE终端渗透率
      ,round(nvl(TERMINAL_LTE_NO_4G_SCORE,0),2) TERMINAL_LTE_NO_4G_SCORE, -- 价值终端
      round(nvl(MR_RSRP_SCORE,0),2) MR_RSRP_SCORE,
round(nvl(IMPT_CDMA_BTS_SCORE,0),2) IMPT_CDMA_BTS_SCORE,
round(nvl(RRC_REQUEST_SCORE,0),2) RRC_REQUEST_SCORE,
round(nvl(L_C_SWITCH_COUNT_SCORE,0),2) L_C_SWITCH_COUNT_SCORE,
round(nvl(L_C_SWITCH_FLOW_SCORE,0),2) L_C_SWITCH_FLOW_SCORE,
round(nvl(VOICE_TRAFFIC_2G_SCORE,0),2) VOICE_TRAFFIC_2G_SCORE,
round(nvl(WEBPAGE_OPEN_DELAY_SCORE,0),2) WEBPAGE_OPEN_DELAY_SCORE,
round(nvl(FLOW_3G_SCORE,0),2) FLOW_3G_SCORE,
round(nvl(FLOW_4G_SCORE,0),2) FLOW_4G_SCORE,
round(nvl(HIGH_DUE_USER_4G_SCORE,0),2) HIGH_DUE_USER_4G_SCORE,
round(nvl(HIGH_FLOW_USER_4G_SCORE,0),2) HIGH_FLOW_USER_4G_SCORE,
round(nvl(TERMINAL_VOLTE_RATE_SCORE,0),2) TERMINAL_VOLTE_RATE_SCORE,
round(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0),2) LOAD_BAD_QUALITY_BTS_SCORE
from  noce.#{TABLENAME}
where day=#{DAY}
      and city = '#{CITY}'
      #{DISTCOND}
      and grid_num=#{GRIDNUM}
]]>
</sqlTemplate>
<sqlTemplate id="SrvPrdMdl4G_13_gridScore_area" description="查询范围内栅格的评分">
<![CDATA[
select city
      ,round(avg(LTE_INVEST_SCORE),2) LTE_INVEST_SCORE
      ,round(avg(LTE_800M_CULTIVATE_SCORE),2) LTE_800M_CULTIVATE_SCORE
       ,round(avg(((nvl(MR_RSRP_SCORE,0) * #{C010101} 
       + nvl(DT_RSRP_SCORE,0) * #{C010102} )* #{C0101} 
       + nvl(impt_cdma_bts_score,0) * #{C0102} 
       + nvl(COMP_USER_SCORE,0) * #{C0103} 
       + nvl(rrc_request_score,0) * #{C0104} 
       + (nvl(L_C_SWITCH_COUNT_SCORE,0) * #{C010501} +  nvl(L_C_SWITCH_DURATION_SCORE,0) * #{C010502} +  nvl(L_C_SWITCH_FLOW_SCORE,0) * #{C010503} ) * #{C0105}
       ) )/#{C01},2)  as network_cover -- 网络覆盖
      ,round(avg(nvl(MR_RSRP_SCORE,0) * #{C010101} + nvl(DT_RSRP_SCORE,0) * #{C010102}),2)  as rsrp_4g_cover -- 4G RSRP覆盖
      ,round(avg(nvl(IMPT_CDMA_BTS_SCORE,0)),2) IMPT_CDMA_BTS_SCORE -- 重要C网基站分布
      ,round(avg(nvl(COMP_USER_SCORE,0)),2) COMP_USER_SCORE -- 投诉用户
      ,round(avg(nvl(RRC_REQUEST_SCORE,0)),2) RRC_REQUEST_SCORE -- 4G连接信令密度分布
      ,round(avg(nvl(L_C_SWITCH_COUNT_SCORE,0) * #{C010501} +  nvl(L_C_SWITCH_DURATION_SCORE,0) * #{C010502} +  nvl(L_C_SWITCH_FLOW_SCORE,0) * #{C010503}),2) as down_4Gto3G -- 4G下切3G

      ,round(avg(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0) * #{C0501} )/#{C05},2)  as aload -- 负荷
      ,round(avg(nvl(LOAD_BAD_QUALITY_BTS_SCORE,0)),2) LOAD_BAD_QUALITY_BTS_SCORE -- 负荷质差基站
      
      ,round(avg(((nvl(FLOW_3G_SCORE,0) * #{C020103} + nvl(FLOW_4G_SCORE,0) * #{C020104}) * #{C0201} 
       + (nvl(VOICE_TRAFFIC_2G_SCORE,0) * #{C020101} + nvl(SMS_COUNT_2G_SCORE,0) * #{C020102}) * #{C0202} 
       ) )/#{C02},2) as srv_value -- 业务价值
      ,round(avg(nvl(FLOW_3G_SCORE,0) * #{C020103} + nvl(FLOW_4G_SCORE,0) * #{C020104}),2) as srv_34G -- 3G/4G业务量分布
      ,round(avg(nvl(VOICE_TRAFFIC_2G_SCORE,0) * #{C020101} + nvl(SMS_COUNT_2G_SCORE,0) * #{C020102}),2) as srv_2G-- 2G业务量分布
      
      ,round(avg(((nvl(HIGH_DUE_USER_3G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_3G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_3G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_3G_SCORE,0) * #{C030104}) * #{C0301}
        + (nvl(HIGH_DUE_USER_4G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_4G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_4G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_4G_SCORE,0) * #{C030104}) * #{C0303}
       ))/#{C03} ,2) as user_value -- 用户价值
      ,round(avg(nvl(HIGH_DUE_USER_3G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_3G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_3G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_3G_SCORE,0) * #{C030104}),2) as user_value_3G -- 3G用户价值
      ,round(avg(nvl(HIGH_DUE_USER_4G_SCORE,0) * #{C030101} + nvl(HIGH_DUE_TIME_4G_SCORE,0) * #{C030102} + nvl(HIGH_FLOW_USER_4G_SCORE,0) * #{C030103} + nvl(HIGH_FLOW_TIME_4G_SCORE,0) * #{C030104}),2) as user_value_4G -- 4G用户价值

      ,round(avg((nvl(WEBPAGE_FIRST_PKG_DELAY_SCORE,0) * #{C040101} + nvl(WEBPAGE_OPEN_DELAY_SCORE,0) * #{C040102} + nvl(VIDIO_DOWNLOAD_RATE_SCORE,0) * #{C040103} + nvl(APP_DOWNLOAD_RATE_SCORE,0) * #{C040104}
        ) * #{C0401})/#{C04},2) as user_percp-- 用户感知
      ,round(avg(nvl(WEBPAGE_FIRST_PKG_DELAY_SCORE,0) * #{C040101} + nvl(WEBPAGE_OPEN_DELAY_SCORE,0) * #{C040102} + nvl(VIDIO_DOWNLOAD_RATE_SCORE,0) * #{C040103} + nvl(APP_DOWNLOAD_RATE_SCORE,0) * #{C040104}),2) as user_percp_4g -- 4G用户感知
      
      ,round(avg(( nvl(TERMINAL_VOLTE_RATE_SCORE,0) * #{C0304} + nvl(TERMINAL_LTE_NO_4G_SCORE,0) * #{C0302} ))/#{C06},2) as terminal -- 终端
      ,round(avg(nvl(TERMINAL_VOLTE_RATE_SCORE,0)),2) TERMINAL_VOLTE_RATE_SCORE-- VoLTE终端渗透率
      ,round(avg(nvl(TERMINAL_LTE_NO_4G_SCORE,0)),2) TERMINAL_LTE_NO_4G_SCORE -- 价值终端
from  noce.#{TABLENAME}
where day=#{DAY}
      and city = '#{CITY}'
      #{DISTCOND}
	and longitude_mid>=#{MINLNG} and longitude_mid<=#{MAXLNG} 
	and latitude_mid>=#{MINLAT}  and latitude_mid<=#{MAXLAT} 
	group by city
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp_04_province_piechart" description="取全省饼图数据（覆盖最好/最差占比情况）" DB="mysql">
<![CDATA[
select objectType,sum(CT_COV_Good_Count) as ct_good , sum(CM_COV_Good_Count) as cm_good, sum(CU_COV_Good_Count) as cu_good -- 最好的数量
      ,sum(CT_COV_BAD_Count) as ct_bad, sum(CM_COV_BAD_Count) as cm_bad, sum(CU_COV_BAD_Count) as cu_bad -- 最差的数量
from noce.FRT_AGPS_ALL_INFO_D
where day=#{DAY}
group by objectType
order by objectType
]]>
</sqlTemplate>
<sqlTemplate id="OpersComp_05_cities_barchart" description="取各地市柱图数据（覆盖最好/最差占比情况）" DB="mysql">
<![CDATA[
select CITY_DISPLAY_ORDER,a.city_name,objectType,sum(CT_COV_Good_Count) as ct_good , sum(CM_COV_Good_Count) as cm_good, sum(CU_COV_Good_Count) as cu_good -- 最好的数量
      ,sum(CT_COV_BAD_Count) as ct_bad, sum(CM_COV_BAD_Count) as cm_bad, sum(CU_COV_BAD_Count) as cu_bad -- 最差的数量
from noce.FRT_AGPS_ALL_INFO_D a
join noce.dim_tele_city b
on a.city_name = b.CITY_NAME
where day=#{DAY}
group by CITY_DISPLAY_ORDER,a.city_name,objectType
order by CITY_DISPLAY_ORDER,objectType
]]>
</sqlTemplate>
<sqlTemplate id="OpersComp_06_cities_linechart" description="取各地市折线图数据（历史覆盖最好/最差占比情况）" DB="mysql">
<![CDATA[
select CITY_DISPLAY_ORDER,a.city_name,objectType,day,sum(CT_COV_Good_Count) as ct_good , sum(CM_COV_Good_Count) as cm_good, sum(CU_COV_Good_Count) as cu_good -- 最好的数量
      ,sum(CT_COV_BAD_Count) as ct_bad, sum(CM_COV_BAD_Count) as cm_bad, sum(CU_COV_BAD_Count) as cu_bad -- 最差的数量
from noce.FRT_AGPS_ALL_INFO_D a
join noce.dim_tele_city b
on a.city_name = b.CITY_NAME
where day between #{STARTDAY} and #{DAY}
group by CITY_DISPLAY_ORDER,a.city_name,objectType,day
union all
select 0 as CITY_DISPLAY_ORDER,'全省' as city_name,objectType,day,sum(CT_COV_Good_Count) as ct_good , sum(CM_COV_Good_Count) as cm_good, sum(CU_COV_Good_Count) as cu_good -- 最好的数量
      ,sum(CT_COV_BAD_Count) as ct_bad, sum(CM_COV_BAD_Count) as cm_bad, sum(CU_COV_BAD_Count) as cu_bad -- 最差的数量
from noce.FRT_AGPS_ALL_INFO_D 
where day between #{STARTDAY} and #{DAY}
group by objectType,day
order by CITY_DISPLAY_ORDER,objectType,day
]]>
</sqlTemplate>
<sqlTemplate id="OpersComp_06_cities_cover_rate" description="取各地市覆盖对比数据" DB="mysql">
<![CDATA[
select b.CITY_NAME as city
      ,round(DX_COVER_RATE*100,2) as dxcr
      ,round(YD_COVER_RATE*100,2) as ydcr
      ,round(LT_COVER_RATE*100,2) as ltcr
      ,DX_YD_COMPARE
      ,DX_LT_COMPARE
 from frt_threenet_city_d a
join dim_tele_city b
on a.city = b.CITY_ID
where day=#{DAY}
ORDER BY CITY_DISPLAY_ORDER
]]>
</sqlTemplate>
<sqlTemplate id="OpersComp_06_cities_table_info" description="取各地市覆盖对比详单" DB="mysql">
<![CDATA[
select b.CITY_NAME as city
      ,round(DX_COVER_RATE*100,2) as dxcr
      ,round(YD_COVER_RATE*100,2) as ydcr
      ,round(LT_COVER_RATE*100,2) as ltcr
      ,DX_YD_COMPARE
      ,DX_LT_COMPARE
 from frt_threenet_city_d a
join dim_tele_city b
on a.city = b.CITY_ID
where day=#{DAY}
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp_03_051_search"  description="查询指定小区或楼群或高校的报表汇总信息-移动除外" DB="mysql">
<![CDATA[
select ObjectName
       ,objectID
       ,pointCount -- 总测试次数
	   ,round(CTCoverageAvg,2) as CTCoverageAvg
	   ,CTCoverageLevel -- 电信覆盖等级
       ,CTCoverageBadCount -- 电信质差次数
	   ,round(CTCoverageBadPercent*100,2) as CTCoverageBadPercent

	   ,round(CUCoverageAvg,2) as CUCoverageAvg
	   ,CUCoverageLevel -- 联通覆盖等级
       ,CUCoverageBadCount -- 联通质差次数
        ,round(CUCoverageBadPercent*100,2) as CUCoverageBadPercent
        
from noce.FRT_AGPS_AREA_D
where day = #{DAY}
      #{CITY}
      and objectType = #{OBJECTTYPE}
      #{OBJECTID}
      and (CTCoverageLevel=#{CoverageLevel} or CMCoverageLevel=#{CoverageLevel} or CUCoverageLevel=#{CoverageLevel})
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp_03_052_search"  description="查询指定小区或楼群或高校的报表汇总信息-包括移动" DB="mysql">
<![CDATA[
select ObjectName
       ,objectID
       ,pointCount -- 总测试次数
	   ,round(CTCoverageAvg,2) as CTCoverageAvg
	   ,CTCoverageLevel -- 电信覆盖等级
       ,CTCoverageBadCount -- 电信质差次数
	   ,round(CTCoverageBadPercent*100,2) as CTCoverageBadPercent
	   
       ,round(CMCoverageAvg,2) as CMCoverageAvg
	   ,CMCoverageLevel -- 移动覆盖等级
	   ,CMCoverageBadCount -- 移动质差次数
       ,round(CMCoverageBadPercent*100,2) as CMCoverageBadPercent
	   
	   ,round(CUCoverageAvg,2) as CUCoverageAvg
	   ,CUCoverageLevel -- 联通覆盖等级
       ,CUCoverageBadCount -- 联通质差次数
        ,round(CUCoverageBadPercent*100,2) as CUCoverageBadPercent
       
from noce.FRT_AGPS_AREA_D
where day = #{DAY}
      #{CITY}
      and objectType = #{OBJECTTYPE}
      #{OBJECTID}
      and (CTCoverageLevel=#{CoverageLevel} or CMCoverageLevel=#{CoverageLevel} or CUCoverageLevel=#{CoverageLevel})
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp_03_061_search" description="查询指定高铁或高速的报表汇总信息--移动除外" DB="mysql">
<![CDATA[
select ObjectName
       ,objectID
       ,pointCount -- 总测试次数
	   ,round(CTCoverageAvg,2) as CTCoverageAvg -- 电信平均值
	   ,CTCoverageLevel -- 电信覆盖等级
       ,CTCoverageBadCount -- 电信质差次数
	   ,round(CTCoverageBadPercent*100,2) as CTCoverageBadPercent -- 电信质差占比
	   
       ,round(CUCoverageAvg,2) as CUCoverageAvg  -- 联通平均值
	   ,CUCoverageLevel -- 联通覆盖等级
	   ,CUCoverageBadCount -- 联通质差次数 
       ,round(CUCoverageBadPercent*100,2) as CUCoverageBadPercent -- 联通质差占比
       
from noce.FRT_AGPS_LINE_D
where day = #{DAY}
	  #{CITY}
      and objectType = #{OBJECTTYPE}
      #{OBJECTID}
      and (CTCoverageLevel=#{CoverageLevel} or CMCoverageLevel=#{CoverageLevel} or CUCoverageLevel=#{CoverageLevel})
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp_03_062_search" description="查询指定高铁或高速的报表汇总信息--包括移动" DB="mysql">
<![CDATA[
select ObjectName
       ,objectID
       ,pointCount -- 总测试次数
	   ,round(CTCoverageAvg,2) as CTCoverageAvg -- 电信平均值
	   ,CTCoverageLevel -- 电信覆盖等级
       ,CTCoverageBadCount -- 电信质差次数
	   ,round(CTCoverageBadPercent*100,2) as CTCoverageBadPercent -- 电信质差占比
	   
       ,round(CMCoverageAvg,2) as CMCoverageAvg  -- 移动平均值
	   ,CMCoverageLevel -- 移动覆盖等级
       ,CMCoverageBadCount -- 移动质差次数
	   ,round(CMCoverageBadPercent*100,2) as CMCoverageBadPercent  -- 移动质差占比
       
       ,round(CUCoverageAvg,2) as CUCoverageAvg  -- 联通平均值
	   ,CUCoverageLevel -- 联通覆盖等级
	   ,CUCoverageBadCount -- 联通质差次数 
       ,round(CUCoverageBadPercent*100,2) as CUCoverageBadPercent -- 联通质差占比
      
from noce.FRT_AGPS_LINE_D
where day = #{DAY}
	  #{CITY}
      and objectType = #{OBJECTTYPE}
      #{OBJECTID}
      and (CTCoverageLevel=#{CoverageLevel} or CMCoverageLevel=#{CoverageLevel} or CUCoverageLevel=#{CoverageLevel})
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp_07_cellAndbuildingGroup_gridData" description="取小区或者楼群的栅格信息" DB="hbase">
<![CDATA[
getByKeyScope
NOCE:DSI_AGPS_GRID_AREA_D#{MONTH}
#{KEYPREFIX}
#{KEYPREFIX}~
#{COLUMNLIST}
]]>
</sqlTemplate>
<sqlTemplate id="OpersComp_07_cellAndbuildingGroup_gridData_Tscan" description="取小区或者楼群的栅格信息" DB="hbase">
<![CDATA[
getByKeyScope
NOCE:DSI_AGPS_GRID_AREA_D#{MONTH}
#{STARTROW}
#{ENDROW}
#{COLUMNLIST}
]]>
</sqlTemplate>
<sqlTemplate id="OpersComp_08_line_MRData" description="取高速和高铁mr数据信息" DB="hbase">
<![CDATA[
getByKeyScope
NOCE:DSI_AGPS_MR_LINE_D
#{KEYPREFIX}
#{KEYPREFIX}~
#{COLUMNLIST}
]]>
</sqlTemplate>
<sqlTemplate id="OpersComp_08_line_MRData_Tsan" description="取高速和高铁mr数据信息" DB="hbase">
<![CDATA[
getByKeyScope
NOCE:DSI_AGPS_MR_LINE_D
#{STARTROW}
#{ENDROW}
#{COLUMNLIST}
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp_07_cities_day_record" description="三网覆盖率对比小区天级别表--读取该城市下面所有记录" DB="hbase">
<![CDATA[
getByKeyScope
NOCE:DSI_THREENET_CELL_D_NEW
#{KEYPREFIX}
#{KEYPREFIX}~
#{COLUMNLIST}
]]>
</sqlTemplate>



<sqlTemplate id="OpersComp_08_city_1month" description="读取某城市下面最新30天的三网覆盖数据" DB="mysql">
<![CDATA[
SELECT
	DAY,
	round(DX_COVER_RATE * 100, 2) AS DX_COVER_RATE,
	round(YD_COVER_RATE * 100, 2) AS YD_COVER_RATE,
	round(LT_COVER_RATE * 100, 2) AS LT_COVER_RATE,
	DX_RSRP_COUNT,
	DX_RSRP_100_COUNT
FROM FRT_THREENET_CITY_D
where city=#{CITYID} 
and day between (SELECT CAST(DATE_FORMAT(date_add(#{DAYSTARTARA}, interval -1 month),'%Y%m%d') as signed))
          and #{DAY}
order by DAY
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp_09_prov_1month" description="读取全省最新30天的三网覆盖数据" DB="mysql">
<![CDATA[
SELECT
	DAY,
	round(sum(DX_RSRP_100_COUNT) / sum(DX_RSRP_COUNT) * 100,2) AS dx,
	round(sum(yd_RSRP_100_COUNT) / sum(yd_RSRP_COUNT) * 100,2) AS yd,
	round(sum(lt_RSRP_100_COUNT) / sum(lt_RSRP_COUNT) * 100,2) AS lt,
	sum(DX_RSRP_COUNT) DX_RSRP_COUNT,
	sum(DX_RSRP_100_COUNT) DX_RSRP_100_COUNT
FROM FRT_THREENET_CITY_D
WHERE
	city in (200, 660, 662, 663, 668, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 766, 768, 769) 
and DAY BETWEEN (SELECT	CAST(DATE_FORMAT(date_add(#{DAYSTARTARA}, INTERVAL - 1 MONTH),'%Y%m%d') AS signed))
AND #{DAY}
GROUP BY DAY
ORDER BY DAY
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp_10_maxday" description="读取表FRT_THREENET_CITY_D中的最大日期" DB="mysql">
<![CDATA[
select max(day) as maxday from FRT_THREENET_CITY_D
]]>
</sqlTemplate>

<sqlTemplate id="PerforMonitor__01_pageload" description="页面加载所需时间柱形图" DB="mysql">
<![CDATA[
select * from t_user_operate_pageload 
where DATE_FORMAT(OPERATE_TIME, '%Y-%m-%d %H:%i:%S')  BETWEEN #{STARTDATE} AND #{ENDDATE}
       #{USERNAMEAND}
ORDER BY OPERATE_TIME desc LIMIT 100
]]>
</sqlTemplate>
<sqlTemplate id="PerforMonitor__02_record" description="数据查询和处理的叠加柱形图" DB="mysql">
<![CDATA[
select * from t_user_operate_record
where DATE_FORMAT(OPERATE_TIME, '%Y-%m-%d %H:%i:%S')  BETWEEN #{STARTDATE} AND #{ENDDATE}
       #{USERNAMEAND}
ORDER BY OPERATE_TIME desc LIMIT 100
]]>
</sqlTemplate>

<sqlTemplate id="pageCarousel_01_url_rownum" description="天翼手机展页面轮播" DB="mysql">
<![CDATA[
select * from #{ITERMEXPO2017TABLE} 
where enabled=1
order by Display_order
]]>
</sqlTemplate>

<sqlTemplate id="MobileBrand_01_people_info_peopleDiv" description="TOP8终端品牌用户画像" DB="impala">
<![CDATA[
select * from noce.FRT_MOBILE_BRAND_ANALYSIS 
where month = #{MOUTH}
and mb_brand not in('其他','联想')
]]>
</sqlTemplate>

<sqlTemplate id="MobileBrand_02_brand_app" description="手机品牌各APP的业务流量" DB="impala">
<![CDATA[
select * from noce.AGG_MOBILE_BRAND_SERVICE a
where a.mb_brand=#{BRAND}
and a.month= #{MOUTH}
and a.latn_id=#{LATN_ID}
]]>
</sqlTemplate>

<sqlTemplate id="MobileBrand_03_Brand_replacement" description="品牌换机预测" DB="impala">
<![CDATA[
select * from noce.FRT_MOBILE_BRAND_FORECAST f
where  f.mdn=#{MDN}
and  f.month=#{MOUTH}
]]>
</sqlTemplate>

<sqlTemplate id="ITE2017P5BROADBAND_01_UserCntAndDuration" description="取周活跃用户数和上网时长" DB="mysql">
<![CDATA[
select users_cnt , duration from noce.FRT_PON_WK_D 
  where day=(select max(day) from noce.FRT_PON_WK_D)
]]>
</sqlTemplate>

<sqlTemplate id="ITE2017P5BROADBAND_02_Bandwidth" description="取户均带宽和百兆及以上用户" DB="mysql">
<![CDATA[
select BANDWIDTH_AVG , BANDWIDTH_100M_RATIO from noce.FRT_PON_CITY_WK_D 
  where day=(select max(day) from noce.FRT_PON_CITY_WK_D) and area_name = '全省'
]]>
</sqlTemplate>

<sqlTemplate id="ITE2017P5BROADBAND_03_DomainTop10" description="取访问量TOP10域名 " DB="mysql">
<![CDATA[
SELECT a.DNS_NAME,SUM(a.REQUEST_CNT) REQUEST_CNT FROM (select CASE WHEN DNS_NAME LIKE '%qq.com' THEN 'qq.com'
WHEN DNS_NAME LIKE '%sina.com%' THEN 'sina.com'
 ELSE DNS_NAME END DNS_NAME ,REQUEST_CNT from  noce.FRT_TOP_DNS where lower(DNS_NAME) not like '%google%'
AND LOWER(DNS_NAME) NOT in ('clock.redhat.com',
'clock.cuhk.edu.hk',
'www.w3.org',
'a.root-servers.net',
'5.5.5.223.in-addr.ar',
'2.1.168.192.in-addr.',
'ctc0',
'clock.cuhk.edu.hk.ho',
'teredo.ipv6.microsof')) a
GROUP BY a.DNS_NAME
ORDER BY REQUEST_CNT DESC
]]>
</sqlTemplate>

<sqlTemplate id="ITE2017P5BROADBAND_04_FlowInOut" description="取省际流入流出的数据 " DB="mysql">
<![CDATA[
SELECT ROUND(SUM(from_sub_network),2) as flow_in -- 省外流入流量，单位GB
     ,ROUND(SUM(to_sub_network),2) as flow_out -- 省外流出流量，单位GB
     ,t.outside_sub_network name 
FROM #{TABLENAME} t 
WHERE  (cross_id = '省外电信' || cross_id = '广东电信' || cross_id = '外网') and resource_id = '360' and status = '1' group by t.outside_sub_network
]]>
</sqlTemplate>

<sqlTemplate id="GzSpecialFstPage_01_SectorCountByArea" description="取某地市各区县的扇区数" DB="mysql">
<![CDATA[
select area_name,network, sum(case accept when '已验收' then cnt else 0 end) as total
       ,sum(case accept when '未验收' then cnt else 0 end) as total_unaccept
from 
(
select area_name, case nettype when '3G' then 'C网' else 'L网' end as network
       , case trim(acceptstatus) when '' then '未验收' when '通过' then '已验收' else '未验收' END as accept
       , count(*) as cnt
from noce.dim_sector
where day=(select max(day) from noce.dim_sector)
	and city_name='#{CITYNAME}'
  and trim(area_name) <> ''
group by area_name, network, accept
) tmp
group by area_name, network
order by area_name, network
]]>
</sqlTemplate>

<sqlTemplate id="GzSpecialFstPage_02_SectorCountByMktCenter" description="取某地市某区县下各营服中心的扇区数" DB="mysql">
<![CDATA[
select mkt_center_name,network,SUM(cnt) as total
       ,sum(case accept when '未验收' then cnt else 0 end) as total_unaccept
from 
(
select mkt_center_name, case nettype when '3G' then 'C网' else 'L网' end as network
       , case trim(acceptstatus) when '' then '未验收' when '通过' then '已验收' else '未验收' END as accept
       , count(*) as cnt
from noce.dim_sector
where day=(select max(day) from noce.dim_sector)
	and city_name='#{CITYNAME}'
  and area_name='#{AREANAME}'
group by mkt_center_name, network, accept
) tmp
group by mkt_center_name, network
order by mkt_center_name, network
]]>
</sqlTemplate>

<sqlTemplate id="GzSpecialFstPage_03_FlowAndErlByAreaOrMktCenter" description="取各区县或各营服的流量和话务量" DB="impala to hbase">
<![CDATA[
getByKeyScope
NOCE:DSI_WIRELESS_MULTI
#{DAY}_D_#{SUMLEVEL}_#{CITYNAME}_#{AREANAME}
#{DAY}_D_#{SUMLEVEL}_#{CITYNAME}_#{AREANAME}~
i:c1,i:e1
]]>
</sqlTemplate>

<sqlTemplate id="GzSpecialFstPage_04_FlowAndErlByHisOfArea" description="取某区县的流量和话务量一周历史数据" DB="impala to hbase">
<![CDATA[
getByKeys
NOCE:DSI_WIRELESS_MULTI
#{KEYLIST}
i:c1,i:e1
]]>
</sqlTemplate>

<sqlTemplate id="GzSpecialFstPage_05_AlarmByArea" description="取各区县的断站和退服基站/小区汇总数据" DB="mysql">
<![CDATA[
-- 4G 小区级退服
select area_name,alarm_scope,sum(cnt) as c from
(
-- 4G 小区级退服
select area_name,'4G' as nettype,'cell' as alarm_scope, count(distinct a.base_statn_id) as cnt from
(
	select * from noce.dim_sector where day=(select max(day) from noce.dim_sector) and city_name='#{CITYNAME}' and nettype='4G'
) a
JOIN
(
	select * from noce.frt_bsn_alarm
	where outofsrv=1 and region='#{CITYNAME}'
	and alarm_scope='cell'
	and network='L'
) b
on a.base_statn_id=b.netinfo and a.cell_id=b.cell_id
group by area_name,nettype,alarm_scope

union all
-- 4G 基站级退服
select area_name,'4G' as nettype,'base_station' as alarm_scope, count(distinct a.base_statn_id) as cnt from
(
	select distinct base_statn_id,area_name from noce.dim_sector where day=(select max(day) from noce.dim_sector) and city_name='#{CITYNAME}' and nettype='4G'
) a
JOIN
(
	select * from noce.frt_bsn_alarm
	where outofsrv=1 and region='#{CITYNAME}'
	and alarm_scope='base_station'
	and network='L'
) b
on a.base_statn_id=b.netinfo 
group by area_name,nettype,alarm_scope

union all
-- 2G 基站级告警
select area_name,'3G' as nettype,'base_station' as alarm_scope, count(distinct a.base_statn_id,a.bsc_id) as cnt from
(
	select distinct base_statn_id,bsc_id,area_name from noce.dim_sector where day=(select max(day) from noce.dim_sector) and city_name='#{CITYNAME}' and nettype='3G'
) a
JOIN
(
	select * from noce.frt_bsn_alarm
	where outofsrv=1 and region='#{CITYNAME}'
	and network='C'
) b
on a.base_statn_id=b.base_statn_id and a.bsc_id=b.bsc_id 
group by area_name,nettype,alarm_scope
) t
group by area_name,alarm_scope
ORDER BY area_name,alarm_scope
]]>
</sqlTemplate>


<!-- <sqlTemplate id="ITE2017P6NETWORK_01_basedata" description="取9个基本数据" DB="mysql">
<![CDATA[
select * from noce.dm_iterm2017networkbasedata

]]>
</sqlTemplate> -->

<sqlTemplate id="Common_02_ShowPartitions" description="取表格的分区数据" DB="impala">
<![CDATA[
show partitions noce.#{TABLENAME}
]]>
</sqlTemplate>


<sqlTemplate id="ITE2017P6NETWORK_02_OtherProvinceRoamInGz" description="省外漫入广州" DB="impala">
<![CDATA[
select home_province,sum(usernum) un from noce.FRT_3GROAMIN_USERNUM where day=#{DAY} and latn_id=200 and home_province<> 'null' and home_province<> '广东'
group by home_province
order by un desc
]]>
</sqlTemplate>


<sqlTemplate id="ITE2017P6NETWORK_03_ProvinceRoamInGz" description="省内漫入广州" DB="impala">
<![CDATA[
select city_name,un from 
(
	select home_latn_id,sum(usernum) un from noce.FRT_3GROAMIN_USERNUM where day=#{DAY} and latn_id=200 and home_province= '广东' and home_latn_id<>200
	group by home_latn_id
) a
join noce.dim_tele_city b
on a.home_latn_id=cast(b.city_id as integer)
order by un desc
]]>
</sqlTemplate>


<!-- <sqlTemplate id="ITE2017P6NETWORK_04_cloudmap" description="取云图数据" DB="impala">
<![CDATA[
select longitude_mid as longitude,latitude_mid as latitude
    , cast(mr_rsrp_tot as float)/mr_rsrp_counts as mr_rsrp
from noce.FRT_GRID_KQI_5000_D 
where day=#{DAY}
and mr_rsrp_counts is not null
and mr_rsrp_counts<>0
]]>
</sqlTemplate> -->



<sqlTemplate id="GzSpecialFstPage_06_AlarmByMktCenter" description="取某区县下各营服的断站或退服基站/小区汇总数据" DB="mysql">
<![CDATA[
select MKT_CENTER_NAME,alarm_scope,sum(cnt) as c from
(
select MKT_CENTER_NAME,'4G' as nettype,'cell' as alarm_scope, count(distinct a.base_statn_id) as cnt from
(
	select * from noce.dim_sector where day=(select max(day) from noce.dim_sector) and city_name='#{CITYNAME}' and nettype='4G' and area_name='#{AREANAME}'
) a
JOIN
(
	select * from noce.frt_bsn_alarm
	where outofsrv=1 and region='#{CITYNAME}'
	and alarm_scope='cell'
	and network='L'
) b
on a.base_statn_id=b.netinfo and a.cell_id=b.cell_id
group by MKT_CENTER_NAME,nettype,alarm_scope

union all
-- 4G 基站级退服
select MKT_CENTER_NAME,'4G' as nettype,'base_station' as alarm_scope, count(distinct a.base_statn_id) as cnt from
(
	select distinct base_statn_id,MKT_CENTER_NAME from noce.dim_sector where day=(select max(day) from noce.dim_sector) and city_name='#{CITYNAME}' and nettype='4G' and area_name='#{AREANAME}'
) a
JOIN
(
	select * from noce.frt_bsn_alarm
	where outofsrv=1 and region='#{CITYNAME}'
	and alarm_scope='base_station'
	and network='L'
) b
on a.base_statn_id=b.netinfo 
group by MKT_CENTER_NAME,nettype,alarm_scope

union all
-- 2G 基站级告警
select MKT_CENTER_NAME,'3G' as nettype,'base_station' as alarm_scope, count(distinct a.base_statn_id,a.bsc_id) as cnt from
(
	select distinct base_statn_id,bsc_id,MKT_CENTER_NAME from noce.dim_sector where day=(select max(day) from noce.dim_sector) and city_name='#{CITYNAME}' and nettype='3G' and area_name='#{AREANAME}'
) a
JOIN
(
	select * from noce.frt_bsn_alarm
	where outofsrv=1 and region='#{CITYNAME}'
	and network='C'
) b
on a.base_statn_id=b.base_statn_id and a.bsc_id=b.bsc_id 
group by MKT_CENTER_NAME,nettype,alarm_scope
) t 
group by MKT_CENTER_NAME,alarm_scope
ORDER BY MKT_CENTER_NAME,alarm_scope
]]>
</sqlTemplate>
<sqlTemplate id="ItempExpo2017Term_09_BTS_list" description="区域当前人数" DB="hbase">
<![CDATA[
getByKeys
NOCE:DSI_3GBTS_USERNUM_5M
#{KEYLIST}
#{COLUMNLIST}
]]>
</sqlTemplate>
<sqlTemplate id="ItempExpo2017Term_07_BTS_list" description="取某区域的基站" DB="mysql">
<![CDATA[
select distinct area_id
,latn_id
	,bsc_id 		-- bsc id
	,bts_id 		-- 基站id
	,sector_longitude 	-- 基站经度
	,sector_latitude 	-- 基站纬度
from noce.DIM_2G3G_EXPO_SECTOR
where AREA_ID in (71,72,73,5,1,20,41,42,43,33)
order by area_id
]]>
</sqlTemplate>
<sqlTemplate id="ItempExpo2017Term_08_max_time" description="取热力图最大时间" DB="mysql">
<![CDATA[
select data_value 		-- 最新时间
from noce.DIM_TIME_RANGE
where table_name='#{TABLE_NAME}'
	and DATA_TYPE='#{DATA_TYPE}'
	and FIELD_NAME='#{FIELD_NAME}'
]]>
</sqlTemplate>
<sqlTemplate id="ITE2017P3iFAMILY_01_UserITV" description="取ITV用户数" DB="mysql">
<![CDATA[
select AREA_NAME -- 地市
       ,TOTAL_NUM -- iTV总用户数 
       ,JH_NUM -- iTV活跃用户数
from  noce.frt_tb_stat_user_dev_d
where day=(select max(day) from noce.frt_tb_stat_user_dev_d)
]]>
</sqlTemplate>

<sqlTemplate id="ITE2017P3iFAMILY_02_User4K" description="取4K用户数" DB="mysql">
<![CDATA[
select area_name,USER_4K_NUM,VIEW_4K_DUR from 
(
select AREA_id,USER_4K_NUM -- 4K总用户数 
       ,VIEW_4K_DUR -- 4K观看时长
from  noce.frt_4k_data_d
where day=(select max(day) from noce.frt_4k_data_d)
) a
JOIN
(
select DISTINCT AREA_NAME,area_id -- 地市
from  noce.frt_tb_stat_user_dev_d
where day=(select max(day) from noce.frt_tb_stat_user_dev_d)
) b
on a.area_id = b.area_id
]]>
</sqlTemplate>

<sqlTemplate id="ITE2017P3iFAMILY_03_TOP10TV" description="取TV TOP10" DB="mysql">
<![CDATA[
SELECT hour,content_name,user_num,proportion,type
from noce.frt_vod_live_rank_h
where hour between
			(select cast(date_format(date_sub((select date_format(CONCAT(max(hour),'0000'),'%Y-%m-%d %H') from noce.frt_vod_live_rank_h),interval 9 hour),'%Y%m%d%H') as signed))
			and
			(select max(hour) from noce.frt_vod_live_rank_h)
       and type like 'TV%'
order by hour, user_num desc 
]]>
</sqlTemplate>

<sqlTemplate id="ITE2017P3iFAMILY_04_TOP10VOD" description="取VODTOP10" DB="mysql">
<![CDATA[
SELECT hour,content_name,user_num,proportion,type
from noce.frt_vod_live_rank_h 
where hour between
			(select cast(date_format(date_sub((select date_format(CONCAT(max(hour),'0000'),'%Y-%m-%d %H') from noce.frt_vod_live_rank_h),interval 9 hour),'%Y%m%d%H') as signed))
			and
			(select max(hour) from noce.frt_vod_live_rank_h)
       and type like 'VOD%'
       and content_name not RLIKE '.*[0-9]+s.*' -- 名称包含“数字+s”的，视为广告，过滤掉
       and content_name not like '%广告%'
order by hour, user_num desc 
]]>
</sqlTemplate>

<sqlTemplate id="ITE2017P3iFAMILY_05_UserHistory1Month" description="取全省和各地市最近一个月的用户数历史数据" DB="mysql">
<![CDATA[
select AREA_NAME -- 地市
       ,DAY
       ,TOTAL_NUM -- iTV总用户数 
       ,JH_NUM -- iTV活跃用户数
from  noce.frt_tb_stat_user_dev_d
where day between 
      ( SELECT CAST(DATE_FORMAT(date_add((select cast(max(day) as char) from noce.frt_tb_stat_user_dev_d), interval -1 month),'%Y%m%d') as signed) )
      and 
      (select max(day) from noce.frt_tb_stat_user_dev_d)
order by area_name,day
]]>
</sqlTemplate>
<sqlTemplate id="ITE2017P3iFAMILY_06_GuangDongITVHY" description="近8小时全省ITV活跃用户数" DB="mysql">
<![CDATA[
select hour,view_num from noce.frt_tb_stat_online_h order by hour desc limit 8
]]>
</sqlTemplate>

	<sqlTemplate id="ITE2017P3iFAMILY_01_duration" description="近8小时全省ITV活跃用户数" DB="mysql">
		<![CDATA[
		SELECT * FROM noce.frt_iptv_view_duration
		]]>
	</sqlTemplate>


<sqlTemplate id="get_coverCloudsTable_06_data" description="根据最大日期获取覆盖云图的数据" DB="hbase">
<![CDATA[
getByKeyScope
NOCE:DSI_3GBTS_USERNUM_5M
#{KEYPREFIX}
#{KEYPREFIX}~
#{COLUMNLIST}
]]>
</sqlTemplate>

<sqlTemplate id="get_coverCloudsTable_p6_data" description="获取500栅格聚合后的数据去渲染热力图" DB="mysql">
<![CDATA[
select LONGITUDE_MID, LATITUDE_MID, MR_RSRP_VALUE from dsi_grid_d_show
]]>
</sqlTemplate>

<sqlTemplate id="get_coverCloudsTable_p6_total_data" description="根据500栅格的数据计算省平均覆盖" DB="mysql">
<![CDATA[
select IFNULL(round(AVG(MR_RSRP_TOT/MR_RSRP_COUNTS),2),0)  as mrRsrpValue from dsi_grid_d
]]>
</sqlTemplate>

<sqlTemplate id="get_coverCloudsTable_05_max_day" description="获取覆盖云图最大日期" DB="hbase">
<![CDATA[
scan
NOCE:DSI_3GBTS_USERNUM_5M
backward
#{KEYSUBSTRINT}
limit 1
]]>
</sqlTemplate>

<sqlTemplate id="ITE2017P6NETWORK_07_getNamesOfBaseStation" description="取指定基站的名称" DB="mysql">
<![CDATA[
select distinct CONCAT(CITY_ID,BSC_ID,BASE_STATN_ID) as key_str,BASE_STATN_NAME,AREA_NAME from dim_sector
where day=(select max(day) from dim_sector)
and NETTYPE='3G'
and CONCAT(CITY_ID,BSC_ID,BASE_STATN_ID) in (#{KEYLIST})
]]>
</sqlTemplate>


<sqlTemplate id="ITE2017P5BROADBAND_05_UserCntAndDuration_DAY" description="取最新一天活跃用户数和上网时长" DB="mysql">
<![CDATA[
select users_cnt , duration from noce.FRT_PON_D
  where day=(select max(day) from noce.FRT_PON_D)
]]>
</sqlTemplate>

<sqlTemplate id="ItermExpo2017Term_14_RoamInExpoCN" description="取省外漫入场馆用户数" DB="mysql">
<![CDATA[
select home_province,sum(users_cnt) as un
from frt_2g3g_expo_roam_h
where hour>=( floor((select max(hour) from frt_2g3g_expo_roam_h) /100) * 100)
and area_id='71'
and home_province in ('上海', '云南', '内蒙古', '北京', '吉林', '四川', '天津', '宁夏', '安徽', '山东', '山西', '广西', '新疆', '江苏', '江西', '河北', '河南', '浙江', '海南', '湖北', '湖南', '甘肃', '福建', '西藏', '贵州', '辽宁', '重庆', '陕西', '青海', '黑龙江' )
GROUP BY home_province
order by un desc
]]>
</sqlTemplate>

<sqlTemplate id="ItermExpo2017Term_15_RoamInExpoGD" description="取省内漫入场馆用户数" DB="mysql">
<![CDATA[
select city_name,un from 
(
	select HOME_LATN_ID,sum(users_cnt) as un
from frt_2g3g_expo_roam_h
where hour>=( floor((select max(hour) from frt_2g3g_expo_roam_h) /100) * 100)
and area_id='71'
and home_province='广东'
GROUP BY HOME_LATN_ID
) a
join noce.dim_tele_city b
on a.home_latn_id=cast(b.city_id as integer)
order by un desc 
]]>
</sqlTemplate><sqlTemplate id="ItermExpo2017Term_14_RoamInExpoCN_TWO" description="取省外漫入场馆用户数" DB="mysql">
<![CDATA[
select home_province,sum(users_cnt) as un
from frt_2g3g_expo_roam_h
where hour=(select max(hour) from frt_2g3g_expo_roam_h)
and area_id='1'
and home_province in ('上海', '云南', '内蒙古', '北京', '吉林', '四川', '天津', '宁夏', '安徽', '山东', '山西', '广西', '新疆', '江苏', '江西', '河北', '河南', '浙江', '海南', '湖北', '湖南', '甘肃', '福建', '西藏', '贵州', '辽宁', '重庆', '陕西', '青海', '黑龙江' )
GROUP BY home_province
order by un desc
]]>
</sqlTemplate>
<sqlTemplate id="ItermExpo2017Term_14_RoamInExpoCN_Three" description="取省外漫入场馆用户数" DB="mysql">
<![CDATA[
select home_province,sum(users_cnt) as un
from frt_2g3g_expo_roam_h
where hour=(select max(hour) from frt_2g3g_expo_roam_h)
and area_id='20'
and home_province in ('上海', '云南', '内蒙古', '北京', '吉林', '四川', '天津', '宁夏', '安徽', '山东', '山西', '广西', '新疆', '江苏', '江西', '河北', '河南', '浙江', '海南', '湖北', '湖南', '甘肃', '福建', '西藏', '贵州', '辽宁', '重庆', '陕西', '青海', '黑龙江' )
GROUP BY home_province
order by un desc
]]>
</sqlTemplate>

<sqlTemplate id="ItermExpo2017Term_14_RoamInExpoCN_Five" description="省运会取省外漫入场馆用户数" DB="mysql">
<![CDATA[
select home_province,sum(users_cnt) as un
from frt_2g3g_expo_roam_h
where hour=(select max(hour) from frt_2g3g_expo_roam_h)
and area_id='33'
and home_province in ('上海', '云南', '内蒙古', '北京', '吉林', '四川', '天津', '宁夏', '安徽', '山东', '山西', '广西', '新疆', '江苏', '江西', '河北', '河南', '浙江', '海南', '湖北', '湖南', '甘肃', '福建', '西藏', '贵州', '辽宁', '重庆', '陕西', '青海', '黑龙江' )
GROUP BY home_province
order by un desc
]]>
</sqlTemplate>
<sqlTemplate id="ItermExpo2017Term_15_RoamInExpoGD_TWO" description="取省内漫入场馆用户数" DB="mysql">
<![CDATA[
select city_name,un from 
(
	select HOME_LATN_ID,sum(users_cnt) as un
from frt_2g3g_expo_roam_h
where hour=(select max(hour) from frt_2g3g_expo_roam_h)
and area_id='1'
and home_province='广东'
GROUP BY HOME_LATN_ID
) a
join noce.dim_tele_city b
on a.home_latn_id=cast(b.city_id as integer)
order by un desc 
]]>
</sqlTemplate>
<sqlTemplate id="ItermExpo2017Term_15_RoamInExpoGD_Three" description="取省内漫入场馆用户数" DB="mysql">
<![CDATA[
select city_name,un from 
(
	select HOME_LATN_ID,sum(users_cnt) as un
from frt_2g3g_expo_roam_h
where hour=(select max(hour) from frt_2g3g_expo_roam_h)
and area_id='20'
and home_province='广东'
GROUP BY HOME_LATN_ID
) a
join noce.dim_tele_city b
on a.home_latn_id=cast(b.city_id as integer)
order by un desc 
]]>
</sqlTemplate>
<sqlTemplate id="ItermExpo2017Term_15_RoamInExpoGD_Five" description="省运会取省内漫入场馆用户数" DB="mysql">
<![CDATA[
select city_name,un from
(
select HOME_LATN_ID,sum(users_cnt) as un
from frt_2g3g_expo_roam_h
where hour=(select max(hour) from frt_2g3g_expo_roam_h)
and area_id='33'
and home_province='广东'
GROUP BY HOME_LATN_ID
) a
join noce.dim_tele_city b
on a.home_latn_id=cast(b.city_id as integer)
order by un desc
]]>
</sqlTemplate>
<sqlTemplate id="ItermExpo2017Term_16_HallStatus" description="展馆保障状态" DB="mysql">
<![CDATA[
select BRANCH_AREA_ID,
	wireless_network_index 		-- 0、1、2分别对应红色、黄色、绿色
from noce.FRT_2G3G_LTE_EXPO_5M
where STIME = (select max(STIME) from noce.FRT_2G3G_LTE_EXPO_5M)
	and area_ID = 71
]]>
</sqlTemplate>

<sqlTemplate id="ITE2017P5BROADBAND_04_01_FlowInOutTableName" description="获取到当前数据库中的最新一天的流入流出数据的表名" DB="mysql">
<![CDATA[
select TABLE_NAME 
from INFORMATION_SCHEMA.TABLES  where TABLE_SCHEMA='monitoring'  and TABLE_NAME like 't_topn_%'
order by TABLE_NAME desc
limit 1
]]>
</sqlTemplate>

<sqlTemplate id="get_dsi_wireless_multi_max_day" description="获取广州专题首页最大日期" DB="hbase">
<![CDATA[
scan
NOCE:DSI_WIRELESS_MULTI
backward
#{KEYSUBSTRINT}
limit 1
]]>
</sqlTemplate>

<sqlTemplate id="OpersCompV2_01_city_area_mkt_relation" description="取各地市、区县和营服中心数据">
<![CDATA[
select DISTINCT DISTRICT_ID,city_name
       ,DISTRICT_NAME
       ,MKTCEN_ID,MKTCEN_NAME,GIS_DATA_BAIDU
       ,(BAIDU_MAX_LONGITUDE+BAIDU_MIN_LONGITUDE)/2 as cen_lng,
(BAIDU_MAXLATITUDE+BAIDU_MINLATITUDE)/2 as cen_lat
from noce.dim_mktcenter_gis_data
where day = (select max(day) from noce.dim_mktcenter_gis_data) and DISTRICT_NAME is not null and TRIM(DISTRICT_NAME)<> ''
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV2_02_city_area_mkt_relation" description="取各地市、区县和营服中心数据">
	<![CDATA[
select DISTINCT city_name
   ,DISTRICT_NAME
   ,MKTCEN_ID,MKTCEN_NAME,GIS_DATA_BAIDU
   ,(BAIDU_MAX_LONGITUDE+BAIDU_MIN_LONGITUDE)/2 as cen_lng,
(BAIDU_MAXLATITUDE+BAIDU_MINLATITUDE)/2 as cen_lat
from noce.dim_mktcenter_gis_data
where day = (select max(day) from noce.dim_mktcenter_gis_data) and DISTRICT_NAME is not null and TRIM(DISTRICT_NAME)<> ''
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV2_02_city_area_mkt_relation2" description="取各地市、区县数据">
	<![CDATA[
		SELECT
			DISTRICT_NAME,
			CITY_NAME,
			DISTRICT_ID
		FROM
			dim_mktcenter_gis_data
		where day = (select max(Day) from dim_mktcenter_gis_data)
		GROUP BY
		CITY_NAME,
		DISTRICT_NAME
	]]>
</sqlTemplate>
<sqlTemplate id="Basestation_01_city_area_by_cityDispaly" description="根据CITY_DISPLAY_ORDER取各地市">
	<![CDATA[
		SELECT
			CITY_NAME AS cityName
		FROM
			dim_tele_city
		ORDER BY
		CITY_DISPLAY_ORDER
	]]>
</sqlTemplate>
<sqlTemplate id="OpersComp_10_area_prov" description="读取全省各地市的汇总数据" DB="mysql">
<![CDATA[
select 
CITY,  -- 地市
object_id,
DX_YD_RSRP_AVG, -- 电信与移动RSRP均值的差值
DX_YD_RSRP_AVG_LEVEL ,-- 电信与移动RSRP均值的差值等级
DX_LT_RSRP_AVG, -- 电信与联通RSRP均值的差值
DX_LT_RSRP_AVG_LEVEL, -- 电信与联通RSRP均值的差值等级
DX_YD_RSRP_COV, -- 电信与移动覆盖率之差
DX_YD_RSRP_COV_LEVEL, -- 电信与移动覆盖率之差等级
DX_LT_RSRP_COV, -- 电信与联通的覆盖率之差
DX_LT_RSRP_COV_LEVEL, -- 电信与联通的覆盖率之差等级
DX_AREA_RSRP_AVG, -- 电信区域的RSRP平均值
DX_AREA_RSRP_AVG_LEVEL,
YD_AREA_RSRP_AVG, -- 移动区域的RSRP平均值
YD_AREA_RSRP_AVG_LEVEL,
LT_AREA_RSRP_AVG, -- 联通区域的RSRP平均值
LT_AREA_RSRP_AVG_LEVEL,
DX_AREA_RSRP_COV, -- 电信区域的RSRP覆盖率平均
DX_AREA_RSRP_COV_LEVEL,
YD_AREA_RSRP_COV, -- 移动区域的RSRP覆盖率平均
YD_AREA_RSRP_COV_LEVEL,
LT_AREA_RSRP_COV, -- 联通区域的RSRP覆盖率平均
LT_AREA_RSRP_COV_LEVEL,
b.gis_data_baidu
from noce.FRT_MRO_AREA_RSRP_M a,noce.DIM_CITY_GIS_DATA b
where month = #{MONTH} and OBJECT_TYPE=11 and a.city_id is not null
and a.city=b.city_name
]]>
</sqlTemplate>
<sqlTemplate id="OpersComp_11_area_city" description="读取某地市各区县的汇总数据" DB="mysql">
<![CDATA[
select 
country,
object_id,
object_name, -- 区县
DX_YD_RSRP_AVG, -- 电信与移动RSRP均值的差值
DX_YD_RSRP_AVG_LEVEL ,-- 电信与移动RSRP均值的差值等级
DX_LT_RSRP_AVG, -- 电信与联通RSRP均值的差值
DX_LT_RSRP_AVG_LEVEL, -- 电信与联通RSRP均值的差值等级
DX_YD_RSRP_COV, -- 电信与移动覆盖率之差
DX_YD_RSRP_COV_LEVEL, -- 电信与移动覆盖率之差等级
DX_LT_RSRP_COV, -- 电信与联通的覆盖率之差
DX_LT_RSRP_COV_LEVEL, -- 电信与联通的覆盖率之差等级
DX_AREA_RSRP_AVG, -- 电信区域的RSRP平均值
DX_AREA_RSRP_AVG_LEVEL,
YD_AREA_RSRP_AVG, -- 移动区域的RSRP平均值
YD_AREA_RSRP_AVG_LEVEL,
LT_AREA_RSRP_AVG, -- 联通区域的RSRP平均值
LT_AREA_RSRP_AVG_LEVEL,
DX_AREA_RSRP_COV, -- 电信区域的RSRP覆盖率平均
DX_AREA_RSRP_COV_LEVEL,
YD_AREA_RSRP_COV, -- 移动区域的RSRP覆盖率平均
YD_AREA_RSRP_COV_LEVEL,
LT_AREA_RSRP_COV, -- 联通区域的RSRP覆盖率平均
LT_AREA_RSRP_COV_LEVEL,
b.gis_data_baidu
from FRT_MRO_AREA_RSRP_M a,dim_district_gis_data b
where month = #{MONTH} and OBJECT_TYPE=12 and city='#{CITY}' and a.city_id is not null
AND a.city=b.city_name and a.country=b.DISTRICT_NAME
]]>
</sqlTemplate>
<sqlTemplate id="OpersComp_12_area_country" description="读取某地市某区县各营服中心的汇总数据" DB="mysql">
<![CDATA[
select 
country,
OBJECT_id,
OBJECT_NAME, -- 营服中心
MKTCEN_NAME,
DX_YD_RSRP_AVG, -- 电信与移动RSRP均值的差值
DX_YD_RSRP_AVG_LEVEL ,-- 电信与移动RSRP均值的差值等级
DX_LT_RSRP_AVG, -- 电信与联通RSRP均值的差值
DX_LT_RSRP_AVG_LEVEL, -- 电信与联通RSRP均值的差值等级
DX_YD_RSRP_COV, -- 电信与移动覆盖率之差
DX_YD_RSRP_COV_LEVEL, -- 电信与移动覆盖率之差等级
DX_LT_RSRP_COV, -- 电信与联通的覆盖率之差
DX_LT_RSRP_COV_LEVEL, -- 电信与联通的覆盖率之差等级
DX_AREA_RSRP_AVG, -- 电信区域的RSRP平均值
DX_AREA_RSRP_AVG_LEVEL,
YD_AREA_RSRP_AVG, -- 移动区域的RSRP平均值
YD_AREA_RSRP_AVG_LEVEL,
LT_AREA_RSRP_AVG, -- 联通区域的RSRP平均值
LT_AREA_RSRP_AVG_LEVEL,
DX_AREA_RSRP_COV, -- 电信区域的RSRP覆盖率平均
DX_AREA_RSRP_COV_LEVEL,
YD_AREA_RSRP_COV, -- 移动区域的RSRP覆盖率平均
YD_AREA_RSRP_COV_LEVEL,
LT_AREA_RSRP_COV, -- 联通区域的RSRP覆盖率平均
LT_AREA_RSRP_COV_LEVEL,
b.gis_data_baidu
from FRT_MRO_AREA_RSRP_M a,dim_mktcenter_gis_data b
where month = #{MONTH} and OBJECT_TYPE=13 and city='#{CITY}' and country='#{COUNTRY}' and a.city_id is not null
AND a.city=b.city_name and a.country=b.DISTRICT_NAME and a.object_name=b.MKTCEN_NAME
AND b.DAY = (SELECT MAX(day) FROM dim_mktcenter_gis_data)
]]>
</sqlTemplate>
<sqlTemplate id="OpersComp_13_area_mktcenter" description="读取某地市某区县某营服中心各栅格的数据" DB="hbase">
<![CDATA[
getByKeyScope
NOCE:DSI_AGPS_GRID_RSRP_M
#{STARTROW}
#{ENDROW}
#{COLUMNLIST}
]]>
</sqlTemplate>

<sqlTemplate id="OpersCompV2_02_01_sector_search" description="小区按名称模糊匹配">
<![CDATA[
select 
object_id as id,
object_name as name,
(LONGITUDE_MIN+LONGITUDE_MAX)/2 as LONGITUDE_BAIDU,
(LATITUDE_MIN+LATITUDE_MAX)/2 as LATITUDE_BAIDU
from FRT_MRO_AREA_RSRP_M
where object_type=1
AND city='#{CITY}'
AND object_name LIKE '%#{CELLNAME}%'
limit 10
    ]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV2_02_02_buildinggroup_search" description="楼群按名称模糊匹配">
<![CDATA[
	 select buildinggroup_id as id
	       ,buildinggroup_name as name
	       ,baidu_max_longitude
	       ,baidu_min_longitude
	       ,baidu_maxlatitude
	       ,baidu_minlatitude
	       ,gis_data_baidu
	from noce.DIM_BUILDINGGROUP_GIS_DATA
	where day = (select max(day) from noce.DIM_BUILDINGGROUP_GIS_DATA) 
	      and city_name  like '#{CITY}%'
	      and buildinggroup_name like '%#{BGNAME}%'
	      and baidu_max_longitude is not null
	limit 10
    ]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV2_02_03_road_search"	description="高速按名称模糊匹配">
<![CDATA[
		select road_id as id ,city_name,road_name as name,ST_AsGeoJSON(cent_geom) as cent_geom
			from dim_road_city
			where road_Name like '%#{ROADNAME}%'
and city_name='#{CITY}'
and road_type='highway'
			limit 10
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV2_02_04_rail_search"	description="高铁按名称模糊匹配">
<![CDATA[
	select road_id as id ,city_name,road_name as name,ST_AsGeoJSON(cent_geom) as cent_geom
			from dim_road_city
			where road_Name like '%#{RAILNAME}%'
and city_name='#{CITY}'
and road_type='highrail'
			limit 10
    ]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV2_02_05_college_search" description="高校按名称模糊匹配">
<![CDATA[
	select college_id as id
	       ,college_name as name 
	       ,baidu_maxlongitude as baidu_max_longitude
	       ,baidu_minlongitude as baidu_min_longitude
	       ,baidu_maxlatitude
	       ,baidu_minlatitude
	       ,gis_data_baidu
	from noce.dim_college_gis_data
	where city_name ='#{CITY}'
	      and college_name like '%#{COLLEGENAME}%'
	group by id,name
	limit 10
    ]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV2_02_06_subway_search" description="地铁按名称模糊匹配">
<![CDATA[
	SELECT
	station_id as id,
	station_name as name,
	max(baidu_longitude) baidu_max_longitude,
	min(baidu_longitude) baidu_min_longitude,
	max(baidu_latitude) baidu_maxlatitude,
	min(baidu_latitude) baidu_minlatitude
FROM
	DIM_METRO_CELL_DATA
WHERE
	city_name = '#{CITY}'
AND station_name LIKE '%#{SUBWAYNAME}%'
GROUP BY id,name
LIMIT 10
    ]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV2_03_04_search" description="查询指定小区或楼群的汇总信息" DB="mysql">
		<![CDATA[
select 
city,
object_id,
object_type,
object_name,
month,
DX_YD_RSRP_AVG, -- 电信与移动RSRP均值的差值
DX_YD_RSRP_AVG_LEVEL ,-- 电信与移动RSRP均值的差值等级
DX_LT_RSRP_AVG, -- 电信与联通RSRP均值的差值
DX_LT_RSRP_AVG_LEVEL, -- 电信与联通RSRP均值的差值等级
DX_YD_RSRP_COV, -- 电信与移动覆盖率之差
DX_YD_RSRP_COV_LEVEL, -- 电信与移动覆盖率之差等级
DX_LT_RSRP_COV, -- 电信与联通的覆盖率之差
DX_LT_RSRP_COV_LEVEL, -- 电信与联通的覆盖率之差等级
DX_AREA_RSRP_AVG, -- 电信区域的RSRP平均值
DX_AREA_RSRP_AVG_LEVEL,
YD_AREA_RSRP_AVG, -- 移动区域的RSRP平均值
YD_AREA_RSRP_AVG_LEVEL,
LT_AREA_RSRP_AVG, -- 联通区域的RSRP平均值
LT_AREA_RSRP_AVG_LEVEL,
DX_AREA_RSRP_COV, -- 电信区域的RSRP覆盖率平均
DX_AREA_RSRP_COV_LEVEL,
YD_AREA_RSRP_COV, -- 移动区域的RSRP覆盖率平均
YD_AREA_RSRP_COV_LEVEL,
LT_AREA_RSRP_COV, -- 联通区域的RSRP覆盖率平均
LT_AREA_RSRP_COV_LEVEL,
longitude_max,
longitude_min,
latitude_max,
latitude_min
from FRT_MRO_AREA_RSRP_M
where month = #{MONTH}
      and city = '#{CITY}'
      and object_Type = #{OBJECTTYPE}
      and object_ID = #{OBJECTID}
      and city_id is not null
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV2_03_05_search" description="查询指定地铁站点的汇总信息" DB="mysql">
		<![CDATA[
SELECT 
city,
object_id,
object_name,
station_name,
DX_YD_RSRP_AVG,
DX_YD_RSRP_AVG_LEVEL, -- 电信与移动RSRP均值的差值等级 
DX_LT_RSRP_AVG,
DX_LT_RSRP_AVG_LEVEL, -- 电信与联通RSRP均值的差值等级
DX_YD_RSRP_COV,
DX_YD_RSRP_COV_LEVEL, --  电信与移动覆盖率之差等级
DX_LT_RSRP_COV,
DX_LT_RSRP_COV_LEVEL, --  电信与联通的覆盖率之差等级
DX_AREA_RSRP_AVG,
DX_AREA_RSRP_AVG_LEVEL, -- 	电信区域的RSRP平均值等级
YD_AREA_RSRP_AVG,
YD_AREA_RSRP_AVG_LEVEL, -- 	移动区域的RSRP平均值等级
LT_AREA_RSRP_AVG,
LT_AREA_RSRP_AVG_LEVEL, -- 	联通区域的RSRP平均值等级
DX_AREA_RSRP_COV,
DX_AREA_RSRP_COV_LEVEL, -- 	电信区域的RSRP覆盖率平均等级
YD_AREA_RSRP_COV,
YD_AREA_RSRP_COV_LEVEL, -- 	移动区域的RSRP覆盖率平均等级
LT_AREA_RSRP_COV,
LT_AREA_RSRP_COV_LEVEL -- 	联通区域的RSRP覆盖率平均等级
FROM frt_agps_metro_rsrp_m 
where month = #{MONTH}
and city = '#{CITY}'
and object_Type = #{OBJECTTYPE}
and station_id = #{OBJECTID}
AND station_name='#{STATIONNAME}'
and city_id is not null
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV2_03_06_search" description="查询高价值区域" DB="mysql">
		<![CDATA[
SELECT 
city,
operator,
belong_area_type,
gis_data_baidu,
sector_count,
fcn_count,
rsrp_sum,
rsrq_sum,
rsrp_count,
rsrq_count,
agps_mr_sum,
pci_fcn_avg
FROM frt_agps_hot_area_m 
WHERE CITY='#{CITY}'
AND MONTH= #{MONTH}
AND gis_data_baidu is not null
AND gis_data_baidu <> ''
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV2_03_07_search" description="查询线段数据" DB="postgresql">
		<![CDATA[
SELECT 
city,
object_id,
object_name,
ST_AsGeoJSON(gis_line_gps) as gis_line_gps,
dx_yd_rsrp_avg,
dx_yd_rsrp_avg_level, -- 电信与移动rsrp均值的差值等级 
dx_lt_rsrp_avg,
dx_lt_rsrp_avg_level, -- 电信与联通rsrp均值的差值等级
dx_yd_rsrp_cov,
dx_yd_rsrp_cov_level, --  电信与移动覆盖率之差等级
dx_lt_rsrp_cov,
dx_lt_rsrp_cov_level, --  电信与联通的覆盖率之差等级
dx_area_rsrp_avg,
dx_area_rsrp_avg_level, -- 	电信区域的rsrp平均值等级
yd_area_rsrp_avg,
yd_area_rsrp_avg_level, -- 	移动区域的rsrp平均值等级
lt_area_rsrp_avg,
lt_area_rsrp_avg_level, -- 	联通区域的rsrp平均值等级
dx_area_rsrp_cov,
dx_area_rsrp_cov_level, -- 	电信区域的rsrp覆盖率平均等级
yd_area_rsrp_cov,
yd_area_rsrp_cov_level, -- 	移动区域的rsrp覆盖率平均等级
lt_area_rsrp_cov,
lt_area_rsrp_cov_level -- 	联通区域的rsrp覆盖率平均等级
FROM frt_agps_line_rsrp_m_#{MONTH} 
WHERE city='#{CITY}'
AND object_type=#{OBJECTTYPE}
AND object_id=#{OBJECTID}
AND line_level=#{LEVEL} 
]]>
</sqlTemplate>

<sqlTemplate id="OpersCompV2_03_07_Profilesearch" description="查询线段概况数据" DB="postgresql">
		<![CDATA[
SELECT 
t1.city,
t1.object_id,
t1.object_name,
ST_AsGeoJSON(t1.gis_line_gps) as gis_line_gps,
t1.dx_yd_rsrp_avg,
t1.dx_yd_rsrp_avg_level, -- 电信与移动rsrp均值的差值等级 
t1.dx_lt_rsrp_avg,
t1.dx_lt_rsrp_avg_level, -- 电信与联通rsrp均值的差值等级
t1.dx_yd_rsrp_cov,
t1.dx_yd_rsrp_cov_level, --  电信与移动覆盖率之差等级
t1.dx_lt_rsrp_cov,
t1.dx_lt_rsrp_cov_level, --  电信与联通的覆盖率之差等级
t1.dx_area_rsrp_avg,
t1.dx_area_rsrp_avg_level, -- 	电信区域的rsrp平均值等级
t1.yd_area_rsrp_avg,
t1.yd_area_rsrp_avg_level, -- 	移动区域的rsrp平均值等级
t1.lt_area_rsrp_avg,
t1.lt_area_rsrp_avg_level, -- 	联通区域的rsrp平均值等级
t1.dx_area_rsrp_cov,
t1.dx_area_rsrp_cov_level, -- 	电信区域的rsrp覆盖率平均等级
t1.yd_area_rsrp_cov,
t1.yd_area_rsrp_cov_level, -- 	移动区域的rsrp覆盖率平均等级
t1.lt_area_rsrp_cov,
t1.lt_area_rsrp_cov_level -- 	联通区域的rsrp覆盖率平均等级
FROM frt_agps_line_rsrp_m_#{MONTH} t1,
(SELECT ST_PolygonFromText('POLYGON((#{MINLNG} #{MINLAT},
                                                   #{MINLNG} #{MAXLAT},
                                                   #{MAXLNG} #{MAXLAT},
                                                   #{MAXLNG} #{MINLAT},
                                                   #{MINLNG} #{MINLAT}))',4326) AS geom) t2
WHERE ST_Intersects(t1.gis_line_gps,t2.geom)
#{CITY}
AND object_type=#{OBJECTTYPE}
AND line_level=#{LEVEL} 
]]>
</sqlTemplate>

<sqlTemplate id="OpersCompV2_03_08_search" description="查询地市的色块图表数据" DB="mysql">
		<![CDATA[
select
city,
country,
object_type,
object_id,
object_name,
DX_YD_AVG_LEVEL1_GRIDS,
DX_YD_AVG_LEVEL2_GRIDS,
DX_YD_AVG_LEVEL3_GRIDS,
DX_YD_AVG_LEVEL4_GRIDS,
DX_YD_AVG_LEVEL5_GRIDS,
DX_LT_AVG_LEVEL1_GRIDS,
DX_LT_AVG_LEVEL2_GRIDS,
DX_LT_AVG_LEVEL3_GRIDS,
DX_LT_AVG_LEVEL4_GRIDS,
DX_LT_AVG_LEVEL5_GRIDS,
DX_YD_COV_LEVEL1_GRIDS,
DX_YD_COV_LEVEL2_GRIDS,
DX_YD_COV_LEVEL3_GRIDS,
DX_YD_COV_LEVEL4_GRIDS,
DX_YD_COV_LEVEL5_GRIDS,
DX_LT_COV_LEVEL1_GRIDS,
DX_LT_COV_LEVEL2_GRIDS,
DX_LT_COV_LEVEL3_GRIDS,
DX_LT_COV_LEVEL4_GRIDS,
DX_LT_COV_LEVEL5_GRIDS,
DX_RSRP_AVG_LEVEL1_GRIDS,
DX_RSRP_AVG_LEVEL2_GRIDS,
DX_RSRP_AVG_LEVEL3_GRIDS,
DX_RSRP_AVG_LEVEL4_GRIDS,
DX_RSRP_AVG_LEVEL5_GRIDS,
DX_RSRP_COV_LEVEL1_GRIDS,
DX_RSRP_COV_LEVEL2_GRIDS,
DX_RSRP_COV_LEVEL3_GRIDS,
DX_RSRP_COV_LEVEL4_GRIDS,
DX_RSRP_COV_LEVEL5_GRIDS,
YD_RSRP_AVG_LEVEL1_GRIDS,
YD_RSRP_AVG_LEVEL2_GRIDS,
YD_RSRP_AVG_LEVEL3_GRIDS,
YD_RSRP_AVG_LEVEL4_GRIDS,
YD_RSRP_AVG_LEVEL5_GRIDS,
YD_RSRP_COV_LEVEL1_GRIDS,
YD_RSRP_COV_LEVEL2_GRIDS,
YD_RSRP_COV_LEVEL3_GRIDS,
YD_RSRP_COV_LEVEL4_GRIDS,
YD_RSRP_COV_LEVEL5_GRIDS,
LT_RSRP_AVG_LEVEL1_GRIDS,
LT_RSRP_AVG_LEVEL2_GRIDS,
LT_RSRP_AVG_LEVEL3_GRIDS,
LT_RSRP_AVG_LEVEL4_GRIDS,
LT_RSRP_AVG_LEVEL5_GRIDS,
LT_RSRP_COV_LEVEL1_GRIDS,
LT_RSRP_COV_LEVEL2_GRIDS,
LT_RSRP_COV_LEVEL3_GRIDS,
LT_RSRP_COV_LEVEL4_GRIDS,
LT_RSRP_COV_LEVEL5_GRIDS
from noce.FRT_MRO_AREA_RSRP_M
where month = #{MONTH}
      and city = '#{CITY}'
      and object_Type = #{OBJECTTYPE}
      and object_ID = #{OBJECTID}
      and city_id is not null
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV2_03_09_exportExcel" description="导出查询sql" DB="mysql">
		<![CDATA[
SELECT
city,
city_id,
country,
object_type,
object_id,
object_name,
longitude_min,
latitude_min,
longitude_mid,
latitude_mid,
longitude_max,
latitude_max,
dx_rsrp_count_sum,
dx_area_rsrp_num,
dx_area_rsrp_avg,
dx_area_rsrp_cov,
yd_rsrp_count_sum,
yd_area_rsrp_num,
yd_area_rsrp_avg,
yd_area_rsrp_cov,
lt_rsrp_count_sum,
lt_area_rsrp_num,
lt_area_rsrp_avg,
lt_area_rsrp_cov,
dx_yd_rsrp_avg,
dx_yd_rsrp_avg_level,
dx_lt_rsrp_avg,
dx_lt_rsrp_avg_level,
dx_yd_rsrp_cov,
dx_yd_rsrp_cov_level,
dx_lt_rsrp_cov,
dx_lt_rsrp_cov_level,
dx_yd_avg_level1_grids,
dx_yd_avg_level2_grids,
dx_yd_avg_level3_grids,
dx_yd_avg_level4_grids,
dx_yd_avg_level5_grids,
dx_lt_avg_level1_grids,
dx_lt_avg_level2_grids,
dx_lt_avg_level3_grids,
dx_lt_avg_level4_grids,
dx_lt_avg_level5_grids,
dx_yd_cov_level1_grids,
dx_yd_cov_level2_grids,
dx_yd_cov_level3_grids,
dx_yd_cov_level4_grids,
dx_yd_cov_level5_grids,
dx_lt_cov_level1_grids,
dx_lt_cov_level2_grids,
dx_lt_cov_level3_grids,
dx_lt_cov_level4_grids,
dx_lt_cov_level5_grids,
dx_rsrp_avg_level1_grids,
dx_rsrp_avg_level2_grids,
dx_rsrp_avg_level3_grids,
dx_rsrp_avg_level4_grids,
dx_rsrp_avg_level5_grids,
dx_rsrp_cov_level1_grids,
dx_rsrp_cov_level2_grids,
dx_rsrp_cov_level3_grids,
dx_rsrp_cov_level4_grids,
dx_rsrp_cov_level5_grids,
yd_rsrp_avg_level1_grids,
yd_rsrp_avg_level2_grids,
yd_rsrp_avg_level3_grids,
yd_rsrp_avg_level4_grids,
yd_rsrp_avg_level5_grids,
yd_rsrp_cov_level1_grids,
yd_rsrp_cov_level2_grids,
yd_rsrp_cov_level3_grids,
yd_rsrp_cov_level4_grids,
yd_rsrp_cov_level5_grids,
lt_rsrp_avg_level1_grids,
lt_rsrp_avg_level2_grids,
lt_rsrp_avg_level3_grids,
lt_rsrp_avg_level4_grids,
lt_rsrp_avg_level5_grids,
lt_rsrp_cov_level1_grids,
lt_rsrp_cov_level2_grids,
lt_rsrp_cov_level3_grids,
lt_rsrp_cov_level4_grids,
lt_rsrp_cov_level5_grids,
dx_area_rsrp_avg_level,
dx_area_rsrp_cov_level,
yd_area_rsrp_avg_level,
yd_area_rsrp_cov_level,
lt_area_rsrp_avg_level,
lt_area_rsrp_cov_level,
month,
type
FROM FRT_MRO_AREA_RSRP_M 
WHERE object_type=#{OBJECTTYPE}
AND month=#{MONTH}
]]>
</sqlTemplate>
<!-- 新的三网覆盖对比2.0需求sql模板 -->
<sqlTemplate id="OpersCompV4_01_city_area_mkt_relation" description="取各地市、区县和营服中心数据">
<![CDATA[
select DISTINCT DISTRICT_ID,city_name
       ,DISTRICT_NAME
       ,MKTCEN_ID,MKTCEN_NAME,GIS_DATA_BAIDU
       ,BAIDU_MAX_LONGITUDE as max_lng,
BAIDU_MIN_LONGITUDE as min_lng,
BAIDU_MAXLATITUDE as max_lat,
BAIDU_MINLATITUDE as min_lat
from noce.dim_mktcenter_gis_data
where day = (select max(day) from noce.dim_mktcenter_gis_data) and DISTRICT_NAME is not null and TRIM(DISTRICT_NAME)<> ''
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_10_area_prov" description="读取全省各地市的汇总数据" DB="mysql">
<![CDATA[
select 
CITY,  -- 地市
object_id,
DX_YD_RSRP_AVG, -- 电信与移动RSRP均值的差值
DX_YD_RSRP_AVG_LEVEL ,-- 电信与移动RSRP均值的差值等级
DX_LT_RSRP_AVG, -- 电信与联通RSRP均值的差值
DX_LT_RSRP_AVG_LEVEL, -- 电信与联通RSRP均值的差值等级
DX_YD_RSRP_COV, -- 电信与移动覆盖率之差
DX_YD_RSRP_COV_LEVEL, -- 电信与移动覆盖率之差等级
DX_LT_RSRP_COV, -- 电信与联通的覆盖率之差
DX_LT_RSRP_COV_LEVEL, -- 电信与联通的覆盖率之差等级
DX_AREA_RSRP_AVG, -- 电信区域的RSRP平均值
DX_AREA_RSRP_AVG_LEVEL,
YD_AREA_RSRP_AVG, -- 移动区域的RSRP平均值
YD_AREA_RSRP_AVG_LEVEL,
LT_AREA_RSRP_AVG, -- 联通区域的RSRP平均值
LT_AREA_RSRP_AVG_LEVEL,
DX_AREA_RSRP_COV, -- 电信区域的RSRP覆盖率平均
DX_AREA_RSRP_COV_LEVEL,
YD_AREA_RSRP_COV, -- 移动区域的RSRP覆盖率平均
YD_AREA_RSRP_COV_LEVEL,
LT_AREA_RSRP_COV, -- 联通区域的RSRP覆盖率平均
LT_AREA_RSRP_COV_LEVEL,
b.gis_data_baidu
from noce.FRT_MRO_AREA_RSRP_M a,noce.DIM_CITY_GIS_DATA b
where month = #{MONTH} and OBJECT_TYPE=11 and a.city_id is not null
and a.city=b.city_name
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_11_area_city" description="读取某地市各区县的汇总数据" DB="mysql">
<![CDATA[
select 
country,
object_id,
object_name, -- 区县
DX_YD_RSRP_AVG, -- 电信与移动RSRP均值的差值
DX_YD_RSRP_AVG_LEVEL ,-- 电信与移动RSRP均值的差值等级
DX_LT_RSRP_AVG, -- 电信与联通RSRP均值的差值
DX_LT_RSRP_AVG_LEVEL, -- 电信与联通RSRP均值的差值等级
DX_YD_RSRP_COV, -- 电信与移动覆盖率之差
DX_YD_RSRP_COV_LEVEL, -- 电信与移动覆盖率之差等级
DX_LT_RSRP_COV, -- 电信与联通的覆盖率之差
DX_LT_RSRP_COV_LEVEL, -- 电信与联通的覆盖率之差等级
DX_AREA_RSRP_AVG, -- 电信区域的RSRP平均值
DX_AREA_RSRP_AVG_LEVEL,
YD_AREA_RSRP_AVG, -- 移动区域的RSRP平均值
YD_AREA_RSRP_AVG_LEVEL,
LT_AREA_RSRP_AVG, -- 联通区域的RSRP平均值
LT_AREA_RSRP_AVG_LEVEL,
DX_AREA_RSRP_COV, -- 电信区域的RSRP覆盖率平均
DX_AREA_RSRP_COV_LEVEL,
YD_AREA_RSRP_COV, -- 移动区域的RSRP覆盖率平均
YD_AREA_RSRP_COV_LEVEL,
LT_AREA_RSRP_COV, -- 联通区域的RSRP覆盖率平均
LT_AREA_RSRP_COV_LEVEL,
b.gis_data_baidu
from FRT_MRO_AREA_RSRP_M a,dim_district_gis_data b
where month = #{MONTH} and OBJECT_TYPE=12 and city='#{CITY}' and a.city_id is not null
AND a.city=b.city_name and a.country=b.DISTRICT_NAME
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_12_area_country" description="读取某地市某区县各营服中心的汇总数据" DB="mysql">
<![CDATA[
select 
country,
OBJECT_id,
OBJECT_NAME, -- 营服中心
MKTCEN_NAME,
DX_YD_RSRP_AVG, -- 电信与移动RSRP均值的差值
DX_YD_RSRP_AVG_LEVEL ,-- 电信与移动RSRP均值的差值等级
DX_LT_RSRP_AVG, -- 电信与联通RSRP均值的差值
DX_LT_RSRP_AVG_LEVEL, -- 电信与联通RSRP均值的差值等级
DX_YD_RSRP_COV, -- 电信与移动覆盖率之差
DX_YD_RSRP_COV_LEVEL, -- 电信与移动覆盖率之差等级
DX_LT_RSRP_COV, -- 电信与联通的覆盖率之差
DX_LT_RSRP_COV_LEVEL, -- 电信与联通的覆盖率之差等级
DX_AREA_RSRP_AVG, -- 电信区域的RSRP平均值
DX_AREA_RSRP_AVG_LEVEL,
YD_AREA_RSRP_AVG, -- 移动区域的RSRP平均值
YD_AREA_RSRP_AVG_LEVEL,
LT_AREA_RSRP_AVG, -- 联通区域的RSRP平均值
LT_AREA_RSRP_AVG_LEVEL,
DX_AREA_RSRP_COV, -- 电信区域的RSRP覆盖率平均
DX_AREA_RSRP_COV_LEVEL,
YD_AREA_RSRP_COV, -- 移动区域的RSRP覆盖率平均
YD_AREA_RSRP_COV_LEVEL,
LT_AREA_RSRP_COV, -- 联通区域的RSRP覆盖率平均
LT_AREA_RSRP_COV_LEVEL,
b.gis_data_baidu
from FRT_MRO_AREA_RSRP_M a,dim_mktcenter_gis_data b
where month = #{MONTH} and OBJECT_TYPE=13 and city='#{CITY}' and country='#{COUNTRY}' and a.city_id is not null
AND a.city=b.city_name and a.country=b.DISTRICT_NAME and a.object_name=b.MKTCEN_NAME
AND b.DAY = (SELECT MAX(day) FROM dim_mktcenter_gis_data)
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_13_area_mktcenter" description="读取某地市某区县某营服中心各栅格的数据" DB="hbase">
<![CDATA[
getByKeyScope
NOCE:DSI_AGPS_GRID_RSRP_M
#{STARTROW}
#{ENDROW}
#{COLUMNLIST}
rowkey 1
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_mktcenter_grid" description="取营服栅格的数据">
        <![CDATA[
getByKeys
NOCE:DSI_AGPS_GRID_MKT_M
#{KEYLIST}
#{COLUMNLIST}
rowkey 1
]]>
</sqlTemplate>
    <sqlTemplate id="OpersCompV4_13_area_mktcenter_byKey" description="读取某营服中心视野内栅格的数据" DB="hbase">
<![CDATA[
getGridsByContour
NOCE:DSI_AGPS_GRID_RSRP_M
#{GRIDKEYPREFIX}
#{GRIDLEVEL}
#{MAX_MIN_LNG_LAT}
#{COLUMNLIST}
rowkey 1
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_mktcenter_gridPicData" description="读取某营服中心栅格的图片数据" DB="mysql">
<![CDATA[
SELECT
	MKTCEN_ID,
	MKTCEN_NAME,
	DISTRICT_NAME,
	DISTRICT_ID,
	CITY_NAME,
	GRIP_PIC_DATA,
	OPERATOR_ID,
	FACT_ID,
	BAIDU_MAX_LONGITUDE AS max_lng,
	BAIDU_MAXLATITUDE AS max_lat,
	BAIDU_MIN_LONGITUDE AS min_lng,
	BAIDU_MINLATITUDE AS min_lat
FROM
	frt_mktcenter_threenet_girdpicdata
WHERE
	MKTCEN_ID = #{MKTCENID}
AND MONTH = #{MONTH}
]]>
</sqlTemplate>

<sqlTemplate id="OpersCompV4_02_01_sector_search" description="小区按名称模糊匹配">
<![CDATA[
select 
object_id as id,
object_name as name,
(LONGITUDE_MIN+LONGITUDE_MAX)/2 as LONGITUDE_BAIDU,
(LATITUDE_MIN+LATITUDE_MAX)/2 as LATITUDE_BAIDU
from FRT_MRO_AREA_RSRP_M
where object_type=1
and month = #{DAY}
AND city='#{CITY}'
AND object_name LIKE '%#{CELLNAME}%'
ORDER BY dx_area_rsrp_num DESC
limit 10
    ]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_02_01_mainSector_search" description="主小区按名称模糊匹配">
<![CDATA[
select 
object_id as id,
object_name as name,
LONGITUDE_MID as LONGITUDE_BAIDU,
LATITUDE_MID as LATITUDE_BAIDU
from FRT_MRO_AREA_RSRP_M
where object_type=8
and month = #{DAY}
AND city='#{CITY}'
AND object_name LIKE '%#{CELLNAME}%'
ORDER BY dx_area_rsrp_num DESC
limit 10
    ]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_02_02_buildinggroup_search" description="楼群按名称模糊匹配">
<![CDATA[
	 select buildinggroup_id as id
	       ,buildinggroup_name as name
	       ,baidu_max_longitude
	       ,baidu_min_longitude
	       ,baidu_maxlatitude
	       ,baidu_minlatitude
	       ,gis_data_baidu
	from noce.DIM_BUILDINGGROUP_GIS_DATA
	where day = (select max(day) from noce.DIM_BUILDINGGROUP_GIS_DATA) 
	      and city_name  like '#{CITY}%'
	      and buildinggroup_name like '%#{BGNAME}%'
	      and baidu_max_longitude is not null
	limit 10
    ]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_02_03_road_search"	description="高速按名称模糊匹配">
<![CDATA[
SELECT
	road_id AS ID,
	city_name,
	road_name AS NAME,
	st_xmax (geom) max_lng,
	st_xmin (geom) min_lng,
	st_ymax (geom) max_lat,
	st_ymin (geom) min_lat
FROM dim_road_city
where road_Name like '%#{ROADNAME}%'
AND city_name='#{CITY}'
AND road_type = 'highway'
LIMIT 10
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_02_04_rail_search"	description="高铁按名称模糊匹配">
<![CDATA[
SELECT
	road_id AS ID,
	city_name,
	road_name AS NAME,
	st_xmax (geom) max_lng,
	st_xmin (geom) min_lng,
	st_ymax (geom) max_lat,
	st_ymin (geom) min_lat
FROM dim_road_city
where road_Name like '%#{RAILNAME}%'
AND city_name='#{CITY}'
AND road_type = 'highrail'
LIMIT 10
    ]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_02_05_college_search" description="高校按名称模糊匹配">
<![CDATA[
	select college_id as id
	       ,college_name as name 
	       ,baidu_maxlongitude as baidu_max_longitude
	       ,baidu_minlongitude as baidu_min_longitude
	       ,baidu_maxlatitude
	       ,baidu_minlatitude
	       ,gis_data_baidu
	from noce.dim_college_gis_data
	where city_name ='#{CITY}'
	      and college_name like '%#{COLLEGENAME}%'
	group by id,name
	limit 10
    ]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_02_05_highArea_search" description="高价值按名称模糊匹配">
<![CDATA[
	SELECT
	hot_area_id AS id,
	hot_area_name AS NAME,
	longitude_max AS baidu_max_longitude,
	longitude_min AS baidu_min_longitude,
	latitude_max AS baidu_maxlatitude,
	latitude_min AS baidu_minlatitude,
gis_data as gis_data_baidu
FROM	noce.frt_agps_opt_hot_area_m
WHERE
	city = '#{CITY}'
AND month = #{MONTH}
AND hot_area_name LIKE '%#{HOTAREANAME}%'
AND hot_type = '业务热点'
GROUP BY id,NAME
ORDER BY grid_count DESC
LIMIT 10
    ]]>
</sqlTemplate>

<sqlTemplate id="OpersCompV4_02_05_highDensity_search" description="高密度住宅区按名称模糊匹配">
<![CDATA[
	select grid as id
	       ,gr_name as name 
	       ,baidu_max_longitude
	       ,baidu_min_longitude
	       ,baidu_maxlatitude
	       ,baidu_minlatitude
	       ,gis_data_baidu
	from noce.dim_grid_data
	where city_name ='#{CITY}分公司'
	      and gr_name like '%#{HIGHDENSITY}%'
AND baidu_max_longitude IS NOT NULL
and belong_area2 in ('城中村','城市住宅')
AND DAY = (SELECT MAX(DAY) FROM noce.dim_grid_data)
	group by id,name
	limit 10
    ]]>
</sqlTemplate>

<sqlTemplate id="OpersCompV4_02_05_highFlow_search" description="高密度住宅区按名称模糊匹配">
<![CDATA[
	select grid as id
	       ,gr_name as name 
	       ,baidu_max_longitude
	       ,baidu_min_longitude
	       ,baidu_maxlatitude
	       ,baidu_minlatitude
	       ,gis_data_baidu
	from noce.dim_grid_data
	where city_name ='#{CITY}分公司'
	      and gr_name like '%#{HIGHFLOW}%'
AND baidu_max_longitude IS NOT NULL
and belong_area2 in ('商务楼宇','临街商铺','行业客户','专业市场')
AND DAY = (SELECT MAX(DAY) FROM noce.dim_grid_data)
	group by id,name
	limit 10
    ]]>
</sqlTemplate>

<sqlTemplate id="OpersCompV4_02_06_subway_search" description="地铁按站点名称模糊匹配">
<![CDATA[
	SELECT
	station_id as id,
	station_name as name,
	LINE_ID,
	LINE_NAME,
	max(baidu_longitude) baidu_max_longitude,
	min(baidu_longitude) baidu_min_longitude,
	max(baidu_latitude) baidu_maxlatitude,
	min(baidu_latitude) baidu_minlatitude
FROM
	dim_metro_station
WHERE
	city_name = '#{CITY}'
AND station_name LIKE '%#{SUBWAYNAME}%'
GROUP BY id,name
LIMIT 10
    ]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_02_06_subway_LineSearch" description="地铁按线路模糊匹配">
<![CDATA[
	SELECT
	line_id as id,
	line_name as name,
	max(baidu_longitude) baidu_max_longitude,
	min(baidu_longitude) baidu_min_longitude,
	max(baidu_latitude) baidu_maxlatitude,
	min(baidu_latitude) baidu_minlatitude
FROM
	dim_metro_station
WHERE
	city_name = '#{CITY}'
AND line_name LIKE '%#{LINENAME}%'
GROUP BY id,name
LIMIT 10
    ]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_03_04_search" description="查询指定小区或楼群的汇总信息" DB="mysql">
		<![CDATA[
select 
city,
object_id,
object_type,
object_name,
month,
DX_YD_RSRP_AVG, -- 电信与移动RSRP均值的差值
DX_YD_RSRP_AVG_LEVEL ,-- 电信与移动RSRP均值的差值等级
DX_LT_RSRP_AVG, -- 电信与联通RSRP均值的差值
DX_LT_RSRP_AVG_LEVEL, -- 电信与联通RSRP均值的差值等级
DX_YD_RSRP_COV, -- 电信与移动覆盖率之差
DX_YD_RSRP_COV_LEVEL, -- 电信与移动覆盖率之差等级
DX_LT_RSRP_COV, -- 电信与联通的覆盖率之差
DX_LT_RSRP_COV_LEVEL, -- 电信与联通的覆盖率之差等级
DX_AREA_RSRP_AVG, -- 电信区域的RSRP平均值
DX_AREA_RSRP_AVG_LEVEL,
YD_AREA_RSRP_AVG, -- 移动区域的RSRP平均值
YD_AREA_RSRP_AVG_LEVEL,
LT_AREA_RSRP_AVG, -- 联通区域的RSRP平均值
LT_AREA_RSRP_AVG_LEVEL,
DX_AREA_RSRP_COV, -- 电信区域的RSRP覆盖率平均
DX_AREA_RSRP_COV_LEVEL,
YD_AREA_RSRP_COV, -- 移动区域的RSRP覆盖率平均
YD_AREA_RSRP_COV_LEVEL,
LT_AREA_RSRP_COV, -- 联通区域的RSRP覆盖率平均
LT_AREA_RSRP_COV_LEVEL,
longitude_max,
longitude_min,
latitude_max,
latitude_min,
longitude_mid,
latitude_mid
from FRT_MRO_AREA_RSRP_M
where month = #{MONTH}
      and city = '#{CITY}'
      and object_Type = #{OBJECTTYPE}
      and object_ID = #{OBJECTID}
      and city_id is not null
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_03_05_search" description="查询指定地铁站点的汇总信息" DB="mysql">
		<![CDATA[
SELECT a.*,b.baidu_longitude,b.baidu_latitude,b.geog from (SELECT 
city,
object_id,
object_name,
STATION_ID,
station_name,
DX_YD_RSRP_AVG,
DX_YD_RSRP_AVG_LEVEL, -- 电信与移动RSRP均值的差值等级 
DX_LT_RSRP_AVG,
DX_LT_RSRP_AVG_LEVEL, -- 电信与联通RSRP均值的差值等级
DX_YD_RSRP_COV,
DX_YD_RSRP_COV_LEVEL, --  电信与移动覆盖率之差等级
DX_LT_RSRP_COV,
DX_LT_RSRP_COV_LEVEL, --  电信与联通的覆盖率之差等级
DX_AREA_RSRP_AVG,
DX_AREA_RSRP_AVG_LEVEL, -- 	电信区域的RSRP平均值等级
YD_AREA_RSRP_AVG,
YD_AREA_RSRP_AVG_LEVEL, -- 	移动区域的RSRP平均值等级
LT_AREA_RSRP_AVG,
LT_AREA_RSRP_AVG_LEVEL, -- 	联通区域的RSRP平均值等级
DX_AREA_RSRP_COV,
DX_AREA_RSRP_COV_LEVEL, -- 	电信区域的RSRP覆盖率平均等级
YD_AREA_RSRP_COV,
YD_AREA_RSRP_COV_LEVEL, -- 	移动区域的RSRP覆盖率平均等级
LT_AREA_RSRP_COV,
LT_AREA_RSRP_COV_LEVEL -- 	联通区域的RSRP覆盖率平均等级
FROM frt_agps_metro_rsrp_m 
where month = #{MONTH}
and city = '#{CITY}'
and object_Type = #{OBJECTTYPE}
and station_id = #{OBJECTID}
and city_id is not null) a 
LEFT JOIN 
(SELECT STATION_ID,baidu_longitude,baidu_latitude,geog FROM dim_metro_station) b 
ON a.STATION_ID = b.STATION_ID

]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_03_05_search_line" description="查询指定地铁线的汇总信息" DB="mysql">
		<![CDATA[
SELECT a.*,b.baidu_longitude,b.baidu_latitude,b.geog from 
(SELECT 
city,
object_id,
object_name,
STATION_ID,
station_name,
DX_YD_RSRP_AVG,
DX_YD_RSRP_AVG_LEVEL, -- 电信与移动RSRP均值的差值等级 
DX_LT_RSRP_AVG,
DX_LT_RSRP_AVG_LEVEL, -- 电信与联通RSRP均值的差值等级
DX_YD_RSRP_COV,
DX_YD_RSRP_COV_LEVEL, --  电信与移动覆盖率之差等级
DX_LT_RSRP_COV,
DX_LT_RSRP_COV_LEVEL, --  电信与联通的覆盖率之差等级
DX_AREA_RSRP_AVG,
DX_AREA_RSRP_AVG_LEVEL, -- 	电信区域的RSRP平均值等级
YD_AREA_RSRP_AVG,
YD_AREA_RSRP_AVG_LEVEL, -- 	移动区域的RSRP平均值等级
LT_AREA_RSRP_AVG,
LT_AREA_RSRP_AVG_LEVEL, -- 	联通区域的RSRP平均值等级
DX_AREA_RSRP_COV,
DX_AREA_RSRP_COV_LEVEL, -- 	电信区域的RSRP覆盖率平均等级
YD_AREA_RSRP_COV,
YD_AREA_RSRP_COV_LEVEL, -- 	移动区域的RSRP覆盖率平均等级
LT_AREA_RSRP_COV,
LT_AREA_RSRP_COV_LEVEL -- 	联通区域的RSRP覆盖率平均等级
FROM frt_agps_metro_rsrp_m 
where month = #{MONTH}
and city = '#{CITY}'
and object_Type = #{OBJECTTYPE}
and object_id = #{OBJECTID}
and city_id is not null) a 
LEFT JOIN 
(SELECT STATION_ID,baidu_longitude,baidu_latitude,geog FROM dim_metro_station) b 
ON a.STATION_ID = b.STATION_ID
]]>
</sqlTemplate>


<sqlTemplate id="OpersCompV4_03_06_search" description="查询高价值区域" DB="mysql">
		<![CDATA[
SELECT 
city,
operator,
belong_area_type,
gis_data_baidu,
sector_count,
fcn_count,
rsrp_sum,
rsrq_sum,
rsrp_count,
rsrq_count,
agps_mr_sum,
pci_fcn_avg
FROM frt_agps_hot_area_m 
WHERE CITY='#{CITY}'
AND MONTH= #{MONTH}
AND gis_data_baidu is not null
AND gis_data_baidu <> ''
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_03_07_search" description="查询线段数据" DB="postgresql">
		<![CDATA[
SELECT 
city,
object_id,
object_name,
ST_AsGeoJSON(gis_line_gps) as gis_line_gps,
dx_yd_rsrp_avg,
dx_yd_rsrp_avg_level, -- 电信与移动rsrp均值的差值等级 
dx_lt_rsrp_avg,
dx_lt_rsrp_avg_level, -- 电信与联通rsrp均值的差值等级
dx_yd_rsrp_cov,
dx_yd_rsrp_cov_level, --  电信与移动覆盖率之差等级
dx_lt_rsrp_cov,
dx_lt_rsrp_cov_level, --  电信与联通的覆盖率之差等级
dx_area_rsrp_avg,
dx_area_rsrp_avg_level, -- 	电信区域的rsrp平均值等级
yd_area_rsrp_avg,
yd_area_rsrp_avg_level, -- 	移动区域的rsrp平均值等级
lt_area_rsrp_avg,
lt_area_rsrp_avg_level, -- 	联通区域的rsrp平均值等级
dx_area_rsrp_cov,
dx_area_rsrp_cov_level, -- 	电信区域的rsrp覆盖率平均等级
yd_area_rsrp_cov,
yd_area_rsrp_cov_level, -- 	移动区域的rsrp覆盖率平均等级
lt_area_rsrp_cov,
lt_area_rsrp_cov_level, -- 	联通区域的rsrp覆盖率平均等级
sector_set
FROM frt_agps_line_rsrp_m_#{MONTH} 
WHERE city='#{CITY}'
AND object_type=#{OBJECTTYPE}
AND object_id=#{OBJECTID}
AND line_level=#{LEVEL} 
]]>
</sqlTemplate>

<sqlTemplate id="OpersCompV4_03_07_Profilesearch" description="查询线段概况数据" DB="postgresql">
		<![CDATA[
SELECT 
t1.city,
t1.object_id,
t1.object_name,
ST_AsGeoJSON(t1.gis_line_gps) as gis_line_gps,
t1.dx_yd_rsrp_avg,
t1.dx_yd_rsrp_avg_level, -- 电信与移动rsrp均值的差值等级 
t1.dx_lt_rsrp_avg,
t1.dx_lt_rsrp_avg_level, -- 电信与联通rsrp均值的差值等级
t1.dx_yd_rsrp_cov,
t1.dx_yd_rsrp_cov_level, --  电信与移动覆盖率之差等级
t1.dx_lt_rsrp_cov,
t1.dx_lt_rsrp_cov_level, --  电信与联通的覆盖率之差等级
t1.dx_area_rsrp_avg,
t1.dx_area_rsrp_avg_level, -- 	电信区域的rsrp平均值等级
t1.yd_area_rsrp_avg,
t1.yd_area_rsrp_avg_level, -- 	移动区域的rsrp平均值等级
t1.lt_area_rsrp_avg,
t1.lt_area_rsrp_avg_level, -- 	联通区域的rsrp平均值等级
t1.dx_area_rsrp_cov,
t1.dx_area_rsrp_cov_level, -- 	电信区域的rsrp覆盖率平均等级
t1.yd_area_rsrp_cov,
t1.yd_area_rsrp_cov_level, -- 	移动区域的rsrp覆盖率平均等级
t1.lt_area_rsrp_cov,
t1.lt_area_rsrp_cov_level -- 	联通区域的rsrp覆盖率平均等级
FROM frt_agps_line_rsrp_m_#{MONTH} t1,
(SELECT ST_PolygonFromText('POLYGON((#{MINLNG} #{MINLAT},
                                                   #{MINLNG} #{MAXLAT},
                                                   #{MAXLNG} #{MAXLAT},
                                                   #{MAXLNG} #{MINLAT},
                                                   #{MINLNG} #{MINLAT}))',4326) AS geom) t2
WHERE ST_Intersects(t1.gis_line_gps,t2.geom)
#{CITY}
AND object_type=#{OBJECTTYPE}
AND line_level=#{LEVEL} 
]]>
</sqlTemplate>

<sqlTemplate id="OpersCompV4_03_08_search" description="查询地市的色块图表数据" DB="mysql">
		<![CDATA[
select
city,
country,
object_type,
object_id,
object_name,
DX_YD_AVG_LEVEL1_GRIDS,
DX_YD_AVG_LEVEL2_GRIDS,
DX_YD_AVG_LEVEL3_GRIDS,
DX_YD_AVG_LEVEL4_GRIDS,
DX_YD_AVG_LEVEL5_GRIDS,
DX_LT_AVG_LEVEL1_GRIDS,
DX_LT_AVG_LEVEL2_GRIDS,
DX_LT_AVG_LEVEL3_GRIDS,
DX_LT_AVG_LEVEL4_GRIDS,
DX_LT_AVG_LEVEL5_GRIDS,
DX_YD_COV_LEVEL1_GRIDS,
DX_YD_COV_LEVEL2_GRIDS,
DX_YD_COV_LEVEL3_GRIDS,
DX_YD_COV_LEVEL4_GRIDS,
DX_YD_COV_LEVEL5_GRIDS,
DX_LT_COV_LEVEL1_GRIDS,
DX_LT_COV_LEVEL2_GRIDS,
DX_LT_COV_LEVEL3_GRIDS,
DX_LT_COV_LEVEL4_GRIDS,
DX_LT_COV_LEVEL5_GRIDS,
DX_RSRP_AVG_LEVEL1_GRIDS,
DX_RSRP_AVG_LEVEL2_GRIDS,
DX_RSRP_AVG_LEVEL3_GRIDS,
DX_RSRP_AVG_LEVEL4_GRIDS,
DX_RSRP_AVG_LEVEL5_GRIDS,
DX_RSRP_COV_LEVEL1_GRIDS,
DX_RSRP_COV_LEVEL2_GRIDS,
DX_RSRP_COV_LEVEL3_GRIDS,
DX_RSRP_COV_LEVEL4_GRIDS,
DX_RSRP_COV_LEVEL5_GRIDS,
YD_RSRP_AVG_LEVEL1_GRIDS,
YD_RSRP_AVG_LEVEL2_GRIDS,
YD_RSRP_AVG_LEVEL3_GRIDS,
YD_RSRP_AVG_LEVEL4_GRIDS,
YD_RSRP_AVG_LEVEL5_GRIDS,
YD_RSRP_COV_LEVEL1_GRIDS,
YD_RSRP_COV_LEVEL2_GRIDS,
YD_RSRP_COV_LEVEL3_GRIDS,
YD_RSRP_COV_LEVEL4_GRIDS,
YD_RSRP_COV_LEVEL5_GRIDS,
LT_RSRP_AVG_LEVEL1_GRIDS,
LT_RSRP_AVG_LEVEL2_GRIDS,
LT_RSRP_AVG_LEVEL3_GRIDS,
LT_RSRP_AVG_LEVEL4_GRIDS,
LT_RSRP_AVG_LEVEL5_GRIDS,
LT_RSRP_COV_LEVEL1_GRIDS,
LT_RSRP_COV_LEVEL2_GRIDS,
LT_RSRP_COV_LEVEL3_GRIDS,
LT_RSRP_COV_LEVEL4_GRIDS,
LT_RSRP_COV_LEVEL5_GRIDS
from FRT_MRO_AREA_RSRP_M
where month = #{MONTH}
      and city = '#{CITY}'
      and object_Type = #{OBJECTTYPE}
      and object_ID = #{OBJECTID}
      and city_id is not null
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_03_09_search" description="查询全省的图表数据" DB="mysql">
		<![CDATA[
select
SUM(DX_YD_AVG_LEVEL1_GRIDS) AS DX_YD_AVG_LEVEL1_GRIDS,
SUM(DX_YD_AVG_LEVEL2_GRIDS) AS DX_YD_AVG_LEVEL2_GRIDS,
SUM(DX_YD_AVG_LEVEL3_GRIDS) AS DX_YD_AVG_LEVEL3_GRIDS,
SUM(DX_YD_AVG_LEVEL4_GRIDS) AS DX_YD_AVG_LEVEL4_GRIDS,
SUM(DX_YD_AVG_LEVEL5_GRIDS) AS DX_YD_AVG_LEVEL5_GRIDS,
SUM(DX_LT_AVG_LEVEL1_GRIDS) AS DX_LT_AVG_LEVEL1_GRIDS,
SUM(DX_LT_AVG_LEVEL2_GRIDS) AS DX_LT_AVG_LEVEL2_GRIDS,
SUM(DX_LT_AVG_LEVEL3_GRIDS) AS DX_LT_AVG_LEVEL3_GRIDS,
SUM(DX_LT_AVG_LEVEL4_GRIDS) AS DX_LT_AVG_LEVEL4_GRIDS,
SUM(DX_LT_AVG_LEVEL5_GRIDS) AS DX_LT_AVG_LEVEL5_GRIDS,
SUM(DX_YD_COV_LEVEL1_GRIDS) AS DX_YD_COV_LEVEL1_GRIDS,
SUM(DX_YD_COV_LEVEL2_GRIDS) AS DX_YD_COV_LEVEL2_GRIDS,
SUM(DX_YD_COV_LEVEL3_GRIDS) AS DX_YD_COV_LEVEL3_GRIDS,
SUM(DX_YD_COV_LEVEL4_GRIDS) AS DX_YD_COV_LEVEL4_GRIDS,
SUM(DX_YD_COV_LEVEL5_GRIDS) AS DX_YD_COV_LEVEL5_GRIDS,
SUM(DX_LT_COV_LEVEL1_GRIDS) AS DX_LT_COV_LEVEL1_GRIDS,
SUM(DX_LT_COV_LEVEL2_GRIDS) AS DX_LT_COV_LEVEL2_GRIDS,
SUM(DX_LT_COV_LEVEL3_GRIDS) AS DX_LT_COV_LEVEL3_GRIDS,
SUM(DX_LT_COV_LEVEL4_GRIDS) AS DX_LT_COV_LEVEL4_GRIDS,
SUM(DX_LT_COV_LEVEL5_GRIDS) AS DX_LT_COV_LEVEL5_GRIDS,
SUM(DX_RSRP_AVG_LEVEL1_GRIDS) AS DX_RSRP_AVG_LEVEL1_GRIDS,
SUM(DX_RSRP_AVG_LEVEL2_GRIDS) AS DX_RSRP_AVG_LEVEL2_GRIDS,
SUM(DX_RSRP_AVG_LEVEL3_GRIDS) AS DX_RSRP_AVG_LEVEL3_GRIDS,
SUM(DX_RSRP_AVG_LEVEL4_GRIDS) AS DX_RSRP_AVG_LEVEL4_GRIDS,
SUM(DX_RSRP_AVG_LEVEL5_GRIDS) AS DX_RSRP_AVG_LEVEL5_GRIDS,
SUM(DX_RSRP_COV_LEVEL1_GRIDS) AS DX_RSRP_COV_LEVEL1_GRIDS,
SUM(DX_RSRP_COV_LEVEL2_GRIDS) AS DX_RSRP_COV_LEVEL2_GRIDS,
SUM(DX_RSRP_COV_LEVEL3_GRIDS) AS DX_RSRP_COV_LEVEL3_GRIDS,
SUM(DX_RSRP_COV_LEVEL4_GRIDS) AS DX_RSRP_COV_LEVEL4_GRIDS,
SUM(DX_RSRP_COV_LEVEL5_GRIDS) AS DX_RSRP_COV_LEVEL5_GRIDS,
SUM(YD_RSRP_AVG_LEVEL1_GRIDS) AS YD_RSRP_AVG_LEVEL1_GRIDS,
SUM(YD_RSRP_AVG_LEVEL2_GRIDS) AS YD_RSRP_AVG_LEVEL2_GRIDS,
SUM(YD_RSRP_AVG_LEVEL3_GRIDS) AS YD_RSRP_AVG_LEVEL3_GRIDS,
SUM(YD_RSRP_AVG_LEVEL4_GRIDS) AS YD_RSRP_AVG_LEVEL4_GRIDS,
SUM(YD_RSRP_AVG_LEVEL5_GRIDS) AS YD_RSRP_AVG_LEVEL5_GRIDS,
SUM(YD_RSRP_COV_LEVEL1_GRIDS) AS YD_RSRP_COV_LEVEL1_GRIDS,
SUM(YD_RSRP_COV_LEVEL2_GRIDS) AS YD_RSRP_COV_LEVEL2_GRIDS,
SUM(YD_RSRP_COV_LEVEL3_GRIDS) AS YD_RSRP_COV_LEVEL3_GRIDS,
SUM(YD_RSRP_COV_LEVEL4_GRIDS) AS YD_RSRP_COV_LEVEL4_GRIDS,
SUM(YD_RSRP_COV_LEVEL5_GRIDS) AS YD_RSRP_COV_LEVEL5_GRIDS,
SUM(LT_RSRP_AVG_LEVEL1_GRIDS) AS LT_RSRP_AVG_LEVEL1_GRIDS,
SUM(LT_RSRP_AVG_LEVEL2_GRIDS) AS LT_RSRP_AVG_LEVEL2_GRIDS,
SUM(LT_RSRP_AVG_LEVEL3_GRIDS) AS LT_RSRP_AVG_LEVEL3_GRIDS,
SUM(LT_RSRP_AVG_LEVEL4_GRIDS) AS LT_RSRP_AVG_LEVEL4_GRIDS,
SUM(LT_RSRP_AVG_LEVEL5_GRIDS) AS LT_RSRP_AVG_LEVEL5_GRIDS,
SUM(LT_RSRP_COV_LEVEL1_GRIDS) AS LT_RSRP_COV_LEVEL1_GRIDS,
SUM(LT_RSRP_COV_LEVEL2_GRIDS) AS LT_RSRP_COV_LEVEL2_GRIDS,
SUM(LT_RSRP_COV_LEVEL3_GRIDS) AS LT_RSRP_COV_LEVEL3_GRIDS,
SUM(LT_RSRP_COV_LEVEL4_GRIDS) AS LT_RSRP_COV_LEVEL4_GRIDS,
SUM(LT_RSRP_COV_LEVEL5_GRIDS) AS LT_RSRP_COV_LEVEL5_GRIDS
from FRT_MRO_AREA_RSRP_M
where month = #{MONTH}
#{AREACON}
      and object_Type = #{OBJECTTYPE}
      and city_id is not null
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_03_09_exportExcel" description="导出查询sql" DB="mysql">
		<![CDATA[
SELECT
city,
city_id,
country,
object_type,
object_id,
object_name,
longitude_min,
latitude_min,
longitude_mid,
latitude_mid,
longitude_max,
latitude_max,
dx_rsrp_count_sum,
dx_area_rsrp_num,
dx_area_rsrp_avg,
dx_area_rsrp_cov,
yd_rsrp_count_sum,
yd_area_rsrp_num,
yd_area_rsrp_avg,
yd_area_rsrp_cov,
lt_rsrp_count_sum,
lt_area_rsrp_num,
lt_area_rsrp_avg,
lt_area_rsrp_cov,
dx_yd_rsrp_avg,
dx_yd_rsrp_avg_level,
dx_lt_rsrp_avg,
dx_lt_rsrp_avg_level,
dx_yd_rsrp_cov,
dx_yd_rsrp_cov_level,
dx_lt_rsrp_cov,
dx_lt_rsrp_cov_level,
dx_yd_avg_level1_grids,
dx_yd_avg_level2_grids,
dx_yd_avg_level3_grids,
dx_yd_avg_level4_grids,
dx_yd_avg_level5_grids,
dx_lt_avg_level1_grids,
dx_lt_avg_level2_grids,
dx_lt_avg_level3_grids,
dx_lt_avg_level4_grids,
dx_lt_avg_level5_grids,
dx_yd_cov_level1_grids,
dx_yd_cov_level2_grids,
dx_yd_cov_level3_grids,
dx_yd_cov_level4_grids,
dx_yd_cov_level5_grids,
dx_lt_cov_level1_grids,
dx_lt_cov_level2_grids,
dx_lt_cov_level3_grids,
dx_lt_cov_level4_grids,
dx_lt_cov_level5_grids,
dx_rsrp_avg_level1_grids,
dx_rsrp_avg_level2_grids,
dx_rsrp_avg_level3_grids,
dx_rsrp_avg_level4_grids,
dx_rsrp_avg_level5_grids,
dx_rsrp_cov_level1_grids,
dx_rsrp_cov_level2_grids,
dx_rsrp_cov_level3_grids,
dx_rsrp_cov_level4_grids,
dx_rsrp_cov_level5_grids,
yd_rsrp_avg_level1_grids,
yd_rsrp_avg_level2_grids,
yd_rsrp_avg_level3_grids,
yd_rsrp_avg_level4_grids,
yd_rsrp_avg_level5_grids,
yd_rsrp_cov_level1_grids,
yd_rsrp_cov_level2_grids,
yd_rsrp_cov_level3_grids,
yd_rsrp_cov_level4_grids,
yd_rsrp_cov_level5_grids,
lt_rsrp_avg_level1_grids,
lt_rsrp_avg_level2_grids,
lt_rsrp_avg_level3_grids,
lt_rsrp_avg_level4_grids,
lt_rsrp_avg_level5_grids,
lt_rsrp_cov_level1_grids,
lt_rsrp_cov_level2_grids,
lt_rsrp_cov_level3_grids,
lt_rsrp_cov_level4_grids,
lt_rsrp_cov_level5_grids,
dx_area_rsrp_avg_level,
dx_area_rsrp_cov_level,
yd_area_rsrp_avg_level,
yd_area_rsrp_cov_level,
lt_area_rsrp_avg_level,
lt_area_rsrp_cov_level,
month,
type
FROM FRT_MRO_AREA_RSRP_M 
WHERE object_type=#{OBJECTTYPE}
AND month=#{MONTH}
#{CITY}
]]>
</sqlTemplate>

<sqlTemplate id="OpersCompV4_03_09_exportExcel_highAndRailway" description="高速高铁导出查询sql" DB="postgre">
		<![CDATA[
SELECT
city,
city_id,
country,
object_type,
object_id,
object_name,
dx_rsrp_count_sum,
dx_area_rsrp_num,
dx_area_rsrp_avg,
dx_area_rsrp_cov,
yd_rsrp_count_sum,
yd_area_rsrp_num,
yd_area_rsrp_avg,
yd_area_rsrp_cov,
lt_rsrp_count_sum,
lt_area_rsrp_num,
lt_area_rsrp_avg,
lt_area_rsrp_cov,
dx_yd_rsrp_avg,
dx_yd_rsrp_avg_level,
dx_lt_rsrp_avg,
dx_lt_rsrp_avg_level,
dx_yd_rsrp_cov,
dx_yd_rsrp_cov_level,
dx_lt_rsrp_cov,
dx_lt_rsrp_cov_level,
dx_yd_avg_level1_grids,
dx_yd_avg_level2_grids,
dx_yd_avg_level3_grids,
dx_yd_avg_level4_grids,
dx_yd_avg_level5_grids,
dx_lt_avg_level1_grids,
dx_lt_avg_level2_grids,
dx_lt_avg_level3_grids,
dx_lt_avg_level4_grids,
dx_lt_avg_level5_grids,
dx_yd_cov_level1_grids,
dx_yd_cov_level2_grids,
dx_yd_cov_level3_grids,
dx_yd_cov_level4_grids,
dx_yd_cov_level5_grids,
dx_lt_cov_level1_grids,
dx_lt_cov_level2_grids,
dx_lt_cov_level3_grids,
dx_lt_cov_level4_grids,
dx_lt_cov_level5_grids,
dx_rsrp_avg_level1_grids,
dx_rsrp_avg_level2_grids,
dx_rsrp_avg_level3_grids,
dx_rsrp_avg_level4_grids,
dx_rsrp_avg_level5_grids,
dx_rsrp_cov_level1_grids,
dx_rsrp_cov_level2_grids,
dx_rsrp_cov_level3_grids,
dx_rsrp_cov_level4_grids,
dx_rsrp_cov_level5_grids,
yd_rsrp_avg_level1_grids,
yd_rsrp_avg_level2_grids,
yd_rsrp_avg_level3_grids,
yd_rsrp_avg_level4_grids,
yd_rsrp_avg_level5_grids,
yd_rsrp_cov_level1_grids,
yd_rsrp_cov_level2_grids,
yd_rsrp_cov_level3_grids,
yd_rsrp_cov_level4_grids,
yd_rsrp_cov_level5_grids,
lt_rsrp_avg_level1_grids,
lt_rsrp_avg_level2_grids,
lt_rsrp_avg_level3_grids,
lt_rsrp_avg_level4_grids,
lt_rsrp_avg_level5_grids,
lt_rsrp_cov_level1_grids,
lt_rsrp_cov_level2_grids,
lt_rsrp_cov_level3_grids,
lt_rsrp_cov_level4_grids,
lt_rsrp_cov_level5_grids,
dx_area_rsrp_avg_level,
dx_area_rsrp_cov_level,
yd_area_rsrp_avg_level,
yd_area_rsrp_cov_level,
lt_area_rsrp_avg_level,
lt_area_rsrp_cov_level,
month
FROM FRT_MRO_AREA_RSRP_M 
WHERE object_type=#{OBJECTTYPE}
AND month=#{MONTH}
#{CITY}
]]>
</sqlTemplate>

<sqlTemplate id="OpersCompV4_03_09_cityJson" description="查询地市轮廓" DB="mysql">
		<![CDATA[
select PROVINCE_NAME AS CITY_NAME,GIS_DATA_BAIDU  from dim_province_gis_merge where DAY=(SELECT max(day) from dim_province_gis_merge)
UNION
SELECT CITY_NAME,GIS_DATA_BAIDU from dim_city_gis_merge where DAY=(SELECT max(day) from dim_city_gis_merge)
]]>
</sqlTemplate>

<sqlTemplate id="OpersCompV4_03_09_districtJson" description="查询区县轮廓" DB="mysql">
		<![CDATA[
SELECT
	CITY_NAME,
	DISTRICT_ID,
	DISTRICT_NAME,
	GIS_DATA_BAIDU,
	BAIDU_MAX_LONGITUDE,
	BAIDU_MIN_LONGITUDE,
	BAIDU_MAXLATITUDE,
	BAIDU_MINLATITUDE
FROM
	dim_district_gis_data
WHERE
	DAY = (SELECT	MAX(DAY) FROM dim_district_gis_data)
]]>
</sqlTemplate>


<sqlTemplate id="Bank_Account_addressLikeLane" description="获取bank索引中的account类型中的文档中地址包含lane的文档信息" DB="elasticsearch">
<![CDATA[
ES_SEARCH
dbname:bank
tablename:account
CMD_JSON:
{
	'query' : {
		'bool' : {
			'must':[
				{'match':{'address': '#{ADDRESS}'}}
			]
		}
	}
}

]]>
</sqlTemplate>


<sqlTemplate id="operateRecord03" description="统计累计登陆用户数，累计登陆次数以及累计在线时长" DB="mysql">
<![CDATA[
select count(distinct user_name) as 'login_user_num',count(user_name) as 'login_count',
ceil(sum( case when online_time<0 then 0 else online_time end)/60) 
as 'login_time_count' from T_LOGIN_INFO

]]>
</sqlTemplate>

<!-- 三网覆盖对比领导视图的sql模板 -->

<sqlTemplate id="OpersComp3.0_01_aggrate" description="取某级别的汇总数据（包括左侧数据和分级覆盖率）" DB="mysql">
<![CDATA[

select
round((sum(dx_area_rsrp_cov_95_sum)/sum(dx_area_rsrp_num)*100) , 2) as DX_95
,round((sum(dx_area_rsrp_cov_100_sum)/sum(dx_area_rsrp_num)*100) , 2) as DX_100
,round((sum(dx_area_rsrp_cov_sum)/sum(dx_area_rsrp_num)*100) , 2) as dx_avg
,round((sum(dx_area_rsrp_cov_110_sum)/sum(dx_area_rsrp_num)*100) , 2) dx_110
,round((sum(dx_area_rsrp_cov_115_sum)/sum(dx_area_rsrp_num)*100) , 2) dx_115
,round((sum(yd_area_rsrp_cov_95_sum)/sum(yd_area_rsrp_num)*100) , 2) yd_95
,round((sum(yd_area_rsrp_cov_100_sum)/sum(yd_area_rsrp_num)*100) , 2) yd_100
,round((sum(yd_area_rsrp_cov_sum)/sum(yd_area_rsrp_num)*100) , 2) yd_avg
,round((sum(yd_area_rsrp_cov_110_sum)/sum(yd_area_rsrp_num)*100) , 2) yd_110
,round((sum(yd_area_rsrp_cov_115_sum)/sum(yd_area_rsrp_num)*100) , 2) yd_115
,round((sum(lt_area_rsrp_cov_95_sum)/sum(lt_area_rsrp_num)*100) , 2) lt_95
,round((sum(lt_area_rsrp_cov_100_sum)/sum(lt_area_rsrp_num)*100) , 2) lt_100
,round((sum(lt_area_rsrp_cov_sum)/sum(lt_area_rsrp_num)*100) , 2) lt_avg
,round((sum(lt_area_rsrp_cov_110_sum)/sum(lt_area_rsrp_num)*100) , 2) lt_110
,round((sum(lt_area_rsrp_cov_115_sum)/sum(lt_area_rsrp_num)*100) , 2) lt_115,
sum(RSRP_105_DISTANCE) as totalDistance,
sum(case when (ifnull(DX_AREA_RSRP_COV,0)>=ifnull(YD_AREA_RSRP_COV,0) and ifnull(DX_AREA_RSRP_COV,0)>=ifnull(LT_AREA_RSRP_COV,0)) then 1 else 0 end) as DX_PIROR_COUNT,
sum(case when (ifnull(YD_AREA_RSRP_COV,0)>ifnull(DX_AREA_RSRP_COV,0) and ifnull(YD_AREA_RSRP_COV,0)>=ifnull(LT_AREA_RSRP_COV,0)) then 1 else 0 end) as YD_PIROR_COUNT,
sum(case when (ifnull(LT_AREA_RSRP_COV,0)>ifnull(YD_AREA_RSRP_COV,0) and ifnull(LT_AREA_RSRP_COV,0)>ifnull(DX_AREA_RSRP_COV,0)) then 1 else 0 end) as LT_PIROR_COUNT,
sum(case when (ifnull(DX_AREA_RSRP_COV,0)>=ifnull(YD_AREA_RSRP_COV,0) and ifnull(DX_AREA_RSRP_COV,0)>=ifnull(LT_AREA_RSRP_COV,0)) then object_size else 0 end) as DX_PIROR_MEASURE,
sum(case when (ifnull(YD_AREA_RSRP_COV,0)>ifnull(DX_AREA_RSRP_COV,0) and ifnull(YD_AREA_RSRP_COV,0)>=ifnull(LT_AREA_RSRP_COV,0)) then object_size else 0 end) as YD_PIROR_MEASURE,
sum(case when (ifnull(LT_AREA_RSRP_COV,0)>ifnull(YD_AREA_RSRP_COV,0) and ifnull(LT_AREA_RSRP_COV,0)>ifnull(DX_AREA_RSRP_COV,0)) then object_size else 0 end) as LT_PIROR_MEASURE
from FRT_MRO_AREA_RSRP_M
where month=#{MONTH}
#{AREACOND}
and OBJECT_TYPE=#{OBJECTTYPE}
and object_name!=''
]]>
</sqlTemplate>


<sqlTemplate id="OpersComp3.0_02_aggrate" description="取小区某级别的汇总数据（包括左侧数据和分级覆盖率）" DB="mysql">
<![CDATA[
select city
,sum(dx_area_rsrp_cov_95_sum)/sum(dx_area_rsrp_num) dx_95
,sum(dx_area_rsrp_cov_100_sum)/sum(dx_area_rsrp_num) dx_100
,sum(dx_area_rsrp_cov_sum)/sum(dx_area_rsrp_num) dx_avg
,sum(dx_area_rsrp_cov_110_sum)/sum(dx_area_rsrp_num) dx_110
,sum(dx_area_rsrp_cov_115_sum)/sum(dx_area_rsrp_num) dx_115

,sum(yd_area_rsrp_cov_95_sum)/sum(yd_area_rsrp_num) yd_95
,sum(yd_area_rsrp_cov_100_sum)/sum(yd_area_rsrp_num) yd_100
,sum(yd_area_rsrp_cov_sum)/sum(yd_area_rsrp_num) yd_avg
,sum(yd_area_rsrp_cov_110_sum)/sum(yd_area_rsrp_num) yd_110
,sum(yd_area_rsrp_cov_115_sum)/sum(yd_area_rsrp_num) yd_115

,sum(lt_area_rsrp_cov_95_sum)/sum(lt_area_rsrp_num) lt_95
,sum(lt_area_rsrp_cov_100_sum)/sum(lt_area_rsrp_num) lt_100
,sum(lt_area_rsrp_cov_sum)/sum(lt_area_rsrp_num) lt_avg
,sum(lt_area_rsrp_cov_110_sum)/sum(lt_area_rsrp_num) lt_110
,sum(lt_area_rsrp_cov_115_sum)/sum(lt_area_rsrp_num) lt_115
from FRT_MRO_AREA_RSRP_M_201710  where object_type=16 #{AREACOND}
group by city
]]>
</sqlTemplate>


<sqlTemplate id="OpersComp3.0_03_aggrate" description="取小区某级别的汇总数据（包括左侧数据和分级覆盖率）" DB="mysql">
<![CDATA[
select 
sum(dx_area_rsrp_cov_95_sum)/sum(dx_area_rsrp_num) dx_95
,sum(dx_area_rsrp_cov_100_sum)/sum(dx_area_rsrp_num) dx_100
,sum(dx_area_rsrp_cov_sum)/sum(dx_area_rsrp_num) dx_avg
,sum(dx_area_rsrp_cov_110_sum)/sum(dx_area_rsrp_num) dx_110
,sum(dx_area_rsrp_cov_115_sum)/sum(dx_area_rsrp_num) dx_115

,sum(yd_area_rsrp_cov_95_sum)/sum(yd_area_rsrp_num) yd_95
,sum(yd_area_rsrp_cov_100_sum)/sum(yd_area_rsrp_num) yd_100
,sum(yd_area_rsrp_cov_sum)/sum(yd_area_rsrp_num) yd_avg
,sum(yd_area_rsrp_cov_110_sum)/sum(yd_area_rsrp_num) yd_110
,sum(yd_area_rsrp_cov_115_sum)/sum(yd_area_rsrp_num) yd_115

,sum(lt_area_rsrp_cov_95_sum)/sum(lt_area_rsrp_num) lt_95
,sum(lt_area_rsrp_cov_100_sum)/sum(lt_area_rsrp_num) lt_100
,sum(lt_area_rsrp_cov_sum)/sum(lt_area_rsrp_num) lt_avg
,sum(lt_area_rsrp_cov_110_sum)/sum(lt_area_rsrp_num) lt_110
,sum(lt_area_rsrp_cov_115_sum)/sum(lt_area_rsrp_num) lt_115
from FRT_MRO_AREA_RSRP_M_201710  where object_type=16

]]>
</sqlTemplate>


<sqlTemplate id="OpersComp3.0_02_trend" description="取趋势图数据" DB="mysql">
<![CDATA[
select month,round(sum(dx_area_rsrp_cov_sum)/sum(dx_area_rsrp_num)*100,2) as DX_AVG,
round(sum(yd_area_rsrp_cov_sum)/sum(yd_area_rsrp_num)*100,2) as YD_AVG,
round(sum(lt_area_rsrp_cov_sum)/sum(lt_area_rsrp_num)*100,2) as LT_AVG
from FRT_MRO_AREA_RSRP_M
where month between  (SELECT CAST(DATE_FORMAT(date_add(#{MONTH}01, interval -11 month),'%Y%m') as signed)) and #{MONTH}
and OBJECT_TYPE=#{OBJECTTYPE}
#{AREACOND}
and object_name!=''
group by month
order by month
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_03_colorblock" description="取地图色块数据,以及按区域排序数据" DB="mysql">
<![CDATA[
select #{GB},
round(ifnull(sum(dx_area_rsrp_cov_sum)/sum(dx_area_rsrp_num) , 0)*100,2) as DX_AVG,
round(ifnull(sum(yd_area_rsrp_cov_sum)/sum(yd_area_rsrp_num) , 0)*100,2) as YD_AVG,
round(ifnull(sum(lt_area_rsrp_cov_sum)/sum(lt_area_rsrp_num) , 0)*100,2) as LT_AVG,
case when (ifnull(sum(dx_area_rsrp_cov_sum)/sum(dx_area_rsrp_num),0)>=ifnull(sum(yd_area_rsrp_cov_sum)/sum(yd_area_rsrp_num),0) and ifnull(sum(dx_area_rsrp_cov_sum)/sum(dx_area_rsrp_num),0)>=ifnull(sum(lt_area_rsrp_cov_sum)/sum(lt_area_rsrp_num),0)) then 'DX' 
     when (ifnull(sum(dx_area_rsrp_cov_sum)/sum(dx_area_rsrp_num),0)<ifnull(sum(yd_area_rsrp_cov_sum)/sum(yd_area_rsrp_num),0) and ifnull(sum(yd_area_rsrp_cov_sum)/sum(yd_area_rsrp_num),0)>=ifnull(sum(lt_area_rsrp_cov_sum)/sum(lt_area_rsrp_num),0)) then 'YD' 
     else 'LT' end as three_net,
case when (ifnull(sum(dx_area_rsrp_cov_sum)/sum(dx_area_rsrp_num),0)>=ifnull(sum(yd_area_rsrp_cov_sum)/sum(yd_area_rsrp_num),0) ) then 'DX' else 'YD' end as DX_YD,
case when (ifnull(sum(dx_area_rsrp_cov_sum)/sum(dx_area_rsrp_num),0)>=ifnull(sum(lt_area_rsrp_cov_sum)/sum(lt_area_rsrp_num),0) ) then 'DX' else 'LT' end as DX_LT,
round(ifnull(sum(dx_area_rsrp_cov_sum)/sum(dx_area_rsrp_num),0)*100-ifnull(sum(yd_area_rsrp_cov_sum)/sum(yd_area_rsrp_num),0)*100,2) as DX_YD_AVG,
round(ifnull(sum(dx_area_rsrp_cov_sum)/sum(dx_area_rsrp_num),0)*100-ifnull(sum(lt_area_rsrp_cov_sum)/sum(lt_area_rsrp_num),0)*100,2) as DX_LT_AVG
from FRT_MRO_AREA_RSRP_M
where month = #{MONTH}
#{AREACOND}
and OBJECT_TYPE=#{OBJECTTYPE}
and object_name!=''
and #{GB} is not null
and trim(#{GB})<>''
group by #{GB}
order by DX_AVG

]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_04_cellbar" description="取小区柱图数据" DB="mysql">
<![CDATA[
select CITY,OBJECT_NAME,OBJECT_ID,LONGITUDE_MIN,
LATITUDE_MIN,
LONGITUDE_MID,
LATITUDE_MID,
LONGITUDE_MAX,
LATITUDE_MAX,
round(DX_AREA_RSRP_COV*100,2) as DX_COV,
round((DX_AREA_RSRP_COV-YD_AREA_RSRP_COV)*100,2) as DX_YD_COV,
round((DX_AREA_RSRP_COV-LT_AREA_RSRP_COV)*100,2) as DX_LT_COV,
IS_SORTABLE
from FRT_MRO_AREA_RSRP_M
where month = #{MONTH}
#{AREACOND}
and OBJECT_TYPE=#{OBJECTTYPE}
order by IS_SORTABLE desc,DX_AREA_RSRP_COV #{ASCDESC}
limit 20

]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_06_metrostation" description="取地铁站数据" DB="mysql">
<![CDATA[
select * from
(
select OBJECT_NAME,OBJECT_ID,LONGITUDE_MIN,
LATITUDE_MIN,
LONGITUDE_MID,
LATITUDE_MID,
LONGITUDE_MAX,
LATITUDE_MAX,
DX_AREA_RSRP_COV*100 as DX_AVG,
YD_AREA_RSRP_COV*100 as YD_AVG,
LT_AREA_RSRP_COV*100 as LT_AVG,dx_area_rsrp_avg, dx_yd_rsrp_avg_level , dx_lt_rsrp_avg_level,
case when (DX_AREA_RSRP_COV>=YD_AREA_RSRP_COV and DX_AREA_RSRP_COV>=LT_AREA_RSRP_COV) then 'DX' 
     when (DX_AREA_RSRP_COV<YD_AREA_RSRP_COV and YD_AREA_RSRP_COV>=LT_AREA_RSRP_COV) then 'YD' 
     else 'LT' end as three_net,
case when DX_AREA_RSRP_COV>=YD_AREA_RSRP_COV  then 'DX' else 'YD' end as DX_YD,
case when DX_AREA_RSRP_COV>=LT_AREA_RSRP_COV then 'DX' else 'LT' end as DX_LT,
DX_AREA_RSRP_COV*100-YD_AREA_RSRP_COV*100 as DX_YD_AVG,
DX_AREA_RSRP_COV*100-LT_AREA_RSRP_COV*100 as DX_LT_AVG 
from FRT_MRO_AREA_RSRP_M
where month = #{MONTH}
and city='#{CITY}'
and OBJECT_TYPE=7
) a
JOIN
(
select * from dim_metro_station where city_name='#{CITY}'
) b
on a.OBJECT_ID=B.line_id
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_06_02_search" description="根据地铁站的id取某个地铁站的数据" DB="mysql">
<![CDATA[
select * from
(
select OBJECT_NAME,OBJECT_ID,LONGITUDE_MIN,
LATITUDE_MIN,
LONGITUDE_MID,
LATITUDE_MID,
LONGITUDE_MAX,
LATITUDE_MAX,
DX_AREA_RSRP_COV*100 as DX_AVG,
YD_AREA_RSRP_COV*100 as YD_AVG,
LT_AREA_RSRP_COV*100 as LT_AVG,dx_area_rsrp_avg, dx_yd_rsrp_avg_level , dx_lt_rsrp_avg_level,
case when (DX_AREA_RSRP_COV>=YD_AREA_RSRP_COV and DX_AREA_RSRP_COV>=LT_AREA_RSRP_COV) then 'DX' 
     when (DX_AREA_RSRP_COV<YD_AREA_RSRP_COV and YD_AREA_RSRP_COV>=LT_AREA_RSRP_COV) then 'YD' 
     else 'LT' end as three_net,
case when DX_AREA_RSRP_COV>=YD_AREA_RSRP_COV  then 'DX' else 'YD' end as DX_YD,
case when DX_AREA_RSRP_COV>=LT_AREA_RSRP_COV then 'DX' else 'LT' end as DX_LT,
DX_AREA_RSRP_COV*100-YD_AREA_RSRP_COV*100 as DX_YD_AVG,
DX_AREA_RSRP_COV*100-LT_AREA_RSRP_COV*100 as DX_LT_AVG 
from FRT_MRO_AREA_RSRP_M
where month = #{MONTH}
and OBJECT_TYPE=7
) a
JOIN
(
select * from dim_metro_station where  STATION_ID = #{STATION_ID}
) b
on a.OBJECT_ID=B.line_id
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_07_road" description="取高速地图数据" DB="postgrepSQL">
<![CDATA[
select * from
(
select OBJECT_NAME,OBJECT_ID,city_id , dx_area_rsrp_avg, dx_yd_rsrp_avg_level , dx_lt_rsrp_avg_level,
round(cast(DX_AREA_RSRP_COV*100 as NUMERIC),2) as DX_AVG,
round(cast(YD_AREA_RSRP_COV*100 as NUMERIC),2) as YD_AVG,
round(cast(LT_AREA_RSRP_COV*100 as NUMERIC),2) as LT_AVG,
case when (DX_AREA_RSRP_COV>=YD_AREA_RSRP_COV and DX_AREA_RSRP_COV>=LT_AREA_RSRP_COV) then 'DX' 
     when (DX_AREA_RSRP_COV<YD_AREA_RSRP_COV and YD_AREA_RSRP_COV>=LT_AREA_RSRP_COV) then 'YD' 
     else 'LT' end as three_net,
case when DX_AREA_RSRP_COV>=YD_AREA_RSRP_COV  then 'DX' else 'YD' end as DX_YD,
case when DX_AREA_RSRP_COV>=LT_AREA_RSRP_COV then 'DX' else 'LT' end as DX_LT,
round(cast(DX_AREA_RSRP_COV*100-YD_AREA_RSRP_COV*100 as NUMERIC),2) as DX_YD_AVG,
round(cast(DX_AREA_RSRP_COV*100-LT_AREA_RSRP_COV*100 as NUMERIC),2) as DX_LT_AVG 
from FRT_MRO_AREA_RSRP_M
where month = #{MONTH} 
#{AREACOND}
and OBJECT_TYPE=6
) a
JOIN
(
select road_id,city_id , city_name , ST_AsGeoJSON(geom) as geom, cast(geom as box2d) as box2d from dim_road_city_level a,(SELECT ST_PolygonFromText('POLYGON((#{MINLNG} #{MINLAT},
                                                   #{MINLNG} #{MAXLAT},
                                                   #{MAXLNG} #{MAXLAT},
                                                   #{MAXLNG} #{MINLAT},
                                                   #{MINLNG} #{MINLAT}))',4326) AS geom_t) t where road_type='highway' and ST_Intersects(a.geom,t.geom_t) and level_type=#{LEVEL} #{AREACOND_2}
) b
on a.OBJECT_ID=B.road_id and a.city_id = b.city_id
]]>
</sqlTemplate>

<sqlTemplate id="OpersCompV3_cityRoad" description="取市政路地图数据" DB="postgrepSQL">
<![CDATA[
select * from
(
select OBJECT_NAME,OBJECT_ID,city_id , dx_area_rsrp_avg, dx_yd_rsrp_avg_level , dx_lt_rsrp_avg_level,
round(cast(DX_AREA_RSRP_COV*100 as NUMERIC),2) as DX_AVG,
round(cast(YD_AREA_RSRP_COV*100 as NUMERIC),2) as YD_AVG,
round(cast(LT_AREA_RSRP_COV*100 as NUMERIC),2) as LT_AVG,
case when (DX_AREA_RSRP_COV>=YD_AREA_RSRP_COV and DX_AREA_RSRP_COV>=LT_AREA_RSRP_COV) then 'DX'
when (DX_AREA_RSRP_COV<YD_AREA_RSRP_COV and YD_AREA_RSRP_COV>=LT_AREA_RSRP_COV) then 'YD'
else 'LT' end as three_net,
case when DX_AREA_RSRP_COV>=YD_AREA_RSRP_COV  then 'DX' else 'YD' end as DX_YD,
case when DX_AREA_RSRP_COV>=LT_AREA_RSRP_COV then 'DX' else 'LT' end as DX_LT,
round(cast(DX_AREA_RSRP_COV*100-YD_AREA_RSRP_COV*100 as NUMERIC),2) as DX_YD_AVG,
round(cast(DX_AREA_RSRP_COV*100-LT_AREA_RSRP_COV*100 as NUMERIC),2) as DX_LT_AVG
from FRT_MRO_AREA_RSRP_M
where month = #{MONTH}
#{AREACOND}
and OBJECT_TYPE=15
) a
JOIN
(
select road_id,city_id , city_name , ST_AsGeoJSON(geom) as geom, cast(geom as box2d) as box2d from dim_road_city_level a,(SELECT ST_PolygonFromText('POLYGON((#{MINLNG} #{MINLAT},
								   #{MINLNG} #{MAXLAT},
								   #{MAXLNG} #{MAXLAT},
								   #{MAXLNG} #{MINLAT},
								   #{MINLNG} #{MINLAT}))',4326) AS geom_t) t where road_type='cityway' and ST_Intersects(a.geom,t.geom_t) and level_type=#{LEVEL} #{AREACOND_2}
) b
on a.OBJECT_ID=B.road_id and a.city_id = b.city_id
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_08_rail" description="取高铁地图数据" DB="postgrepSQL">
<![CDATA[
select * from
(
select OBJECT_NAME,OBJECT_ID,city_id, dx_area_rsrp_avg, dx_yd_rsrp_avg_level , dx_lt_rsrp_avg_level,
round(cast(DX_AREA_RSRP_COV*100 as NUMERIC),2) as DX_AVG,
round(cast(YD_AREA_RSRP_COV*100 as NUMERIC),2) as YD_AVG,
round(cast(LT_AREA_RSRP_COV*100 as NUMERIC),2) as LT_AVG,
case when (DX_AREA_RSRP_COV>=YD_AREA_RSRP_COV and DX_AREA_RSRP_COV>=LT_AREA_RSRP_COV) then 'DX' 
     when (DX_AREA_RSRP_COV<YD_AREA_RSRP_COV and YD_AREA_RSRP_COV>=LT_AREA_RSRP_COV) then 'YD' 
     else 'LT' end as three_net,
case when DX_AREA_RSRP_COV>=YD_AREA_RSRP_COV  then 'DX' else 'YD' end as DX_YD,
case when DX_AREA_RSRP_COV>=LT_AREA_RSRP_COV then 'DX' else 'LT' end as DX_LT,
round(cast(DX_AREA_RSRP_COV*100-YD_AREA_RSRP_COV*100 as NUMERIC),2) as DX_YD_AVG,
round(cast(DX_AREA_RSRP_COV*100-LT_AREA_RSRP_COV*100 as NUMERIC),2) as DX_LT_AVG 
from FRT_MRO_AREA_RSRP_M
where month = #{MONTH} 
#{AREACOND} and 
OBJECT_TYPE=5
) a
JOIN
(
select city_id,road_id,city_name,ST_AsGeoJSON(geom) as geom, cast(geom as box2d) as box2d from dim_road_city  where road_type='highrail' 
) b
on a.OBJECT_ID=B.road_id and a.city_id=b.city_id
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_05_areaGrid" description="取栅格数据" DB="hbase">
<![CDATA[
getByKeyScope
NOCE:DSI_AGPS_GRID_RSRP_M
#{KEYPREFIX}
#{KEYPREFIX}~
i:a1,i:a2,i:a3,i:a4,i:a5,i:a6,i:a7,i:a8,i:a9,i:a10,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a17,i:a18,i:a19,i:a20,i:a21,i:a22,i:a23,i:a24,i:a25,i:a26,i:a27,i:a28,i:a29,i:a30,i:a31,i:a32,i:a33,i:a34,i:a35,i:a36,i:a37,i:a38,i:a39,i:a40,i:a41,i:a42,i:a43,i:a44,i:a45,i:a46,i:a47,i:a48,i:a49,i:a50,i:a51,i:a52,i:a53,i:a54,i:a55,i:a56,i:a57,i:a58,i:a59,i:a60,i:a61,i:a62,i:a63,i:a64,i:a65,i:a66,i:a67,i:a68
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_09_buildinggroup" description="取楼群轮廓数据" DB="mysql">
<![CDATA[
select buildinggroup_id as id
	       ,buildinggroup_name as name
	       ,baidu_max_longitude
	       ,baidu_min_longitude
	       ,baidu_maxlatitude
	       ,baidu_minlatitude
	       ,gis_data_baidu
	from noce.DIM_BUILDINGGROUP_GIS_DATA
	where day = (select max(day) from noce.DIM_BUILDINGGROUP_GIS_DATA) 
	      and city_name = '#{CITY}'
	      and buildinggroup_id = #{BGID}
	      and baidu_max_longitude is not null
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_10_college" description="取高校轮廓数据" DB="mysql">
<![CDATA[
select college_id as id
	       ,college_name as name 
	       ,baidu_maxlongitude as baidu_max_longitude
	       ,baidu_minlongitude as baidu_min_longitude
	       ,baidu_maxlatitude
	       ,baidu_minlatitude
	       ,gis_data_baidu
	from noce.dim_college_gis_data
	where city_name ='#{CITY}'
	      and college_id = #{COLLEGEID}
	group by id,name
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_10_higthvalue" description="取高价值轮廓数据" DB="mysql">
<![CDATA[
 select HOT_AREA_ID as id
	       ,HOT_AREA_NAME as name 
	       ,LONGITUDE_MAX as baidu_max_longitude
	       ,LONGITUDE_MIN as baidu_min_longitude
	       ,LATITUDE_MAX  as baidu_maxlatitude
	       ,LATITUDE_MIN  as baidu_minlatitude
	       ,GIS_DATA  AS gis_data_baidu
	from noce.frt_agps_opt_hot_area_m
	where CITY ='#{CITY}'
	      and HOT_AREA_ID = #{HIGTHVALUE}
	group by id,name
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_10_uptownAndBusiness" description="取商务区和住宅区轮廓数据" DB="mysql">
<![CDATA[
  SELECT grid AS id
  			,DAY
	       ,GR_NAME AS NAME
	       ,BAIDU_MAX_LONGITUDE AS baidu_max_longitude
	       ,BAIDU_MIN_LONGITUDE AS baidu_min_longitude
	       ,BAIDU_MAXLATITUDE  AS baidu_maxlatitude
	       ,BAIDU_MINLATITUDE  AS baidu_minlatitude
	       ,gis_data_baidu  AS gis_data_baidu
	FROM noce.dim_grid_data
	WHERE CITY_NAME ='#{CITY}'
	      AND GRID = #{HIGTHVALUE}
	GROUP BY id,NAME HAVING MAX(DAY) = DAY

]]>
</sqlTemplate>


<sqlTemplate id="OpersComp3.0_10_scenery" description="取美景数据" DB="mysql">
	<![CDATA[
SELECT scenery_id AS id
	       ,scenery_NAME AS NAME
	       ,BAIDU_MAX_LONGITUDE AS baidu_max_longitude
	       ,BAIDU_MIN_LONGITUDE AS baidu_min_longitude
	       ,BAIDU_MAX_LATITUDE  AS baidu_maxlatitude
	       ,BAIDU_MIN_LATITUDE  AS baidu_minlatitude
	       ,gis_data_baidu  AS gis_data_baidu
	FROM noce.dim_scenery_gis_data
	WHERE CITY_NAME ='#{CITY}'
	      AND scenery_id = #{HIGTHVALUE}
	GROUP BY id,NAME

]]>
	</sqlTemplate>

<sqlTemplate id="OpersComp3.0_10_province" description="取全省营服数据" DB="mysql">
	<![CDATA[
SELECT mktcen_id AS id
	   ,mktcen_NAME AS NAME
	   ,BAIDU_MAX_LONGITUDE AS baidu_max_longitude
	   ,BAIDU_MIN_LONGITUDE AS baidu_min_longitude
	   ,BAIDU_MAXLATITUDE  AS baidu_maxlatitude
	   ,BAIDU_MINLATITUDE  AS baidu_minlatitude
	   ,gis_data_baidu  AS gis_data_baidu
FROM noce.dim_mktcenter_gis_data
WHERE CITY_NAME ='#{CITY}'
	  AND mktcen_id = #{HIGTHVALUE}
GROUP BY id,NAME

]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_11_rfCity" description="取各地市的射频质量数据" DB="mysql">
<![CDATA[
select city
,MR_CQI_10_15_Ratio -- 下行质优覆盖率
,DW_GoodQ_Level -- 下行质优等级
,MR_CQI_0_6_Ratio	-- 下行干扰覆盖率
,DW_Itf_Level -- 下行干扰等级
,UP_GoodQ_Level	-- 上行质量评估等级
,UP_GoodQ_Area	-- 上行质量RIP占比区间
,UP_RIP_Ratio -- 上行质量RIP占比率
from FRT_MRO_AGPS_CITY_M a
join dim_tele_city b
on a.CITY_ID=b.CITY_ID
where month =#{MONTH}
ORDER BY b.CITY_DISPLAY_ORDER
]]>
</sqlTemplate>
<sqlTemplate id="OpersComp3.0_12_rfArea" description="取各区县的射频质量数据" DB="mysql">
<![CDATA[
select COUNTRY,city_id,country_id
,MR_CQI_10_15_Ratio -- 下行质优覆盖率
,DW_GoodQ_Level -- 下行质优等级
,MR_CQI_0_6_Ratio	-- 下行干扰覆盖率
,DW_Itf_Level -- 下行干扰等级
,UP_GoodQ_Level	-- 上行质量评估等级
,UP_GoodQ_Area	-- 上行质量RIP占比区间
,UP_RIP_Ratio -- 上行质量RIP占比率
from FRT_MRO_AGPS_AREA_M 
where month =#{MONTH}
and city='#{CITY}'
and country is not NULL
and trim(country) <> ''
]]>
</sqlTemplate>
<sqlTemplate id="OpersComp3.0_12_mktArea" description="取各营服中心的射频质量数据" DB="mysql">
<![CDATA[
select a.*,b.gis_data_baidu from (select city_id,city,country_id,country,MKTCENTER_ID,MKTCENTER
,MR_CQI_10_15_Ratio -- 下行质优覆盖率
,DW_GoodQ_Level -- 下行质优等级
,MR_CQI_0_6_Ratio	-- 下行干扰覆盖率
,DW_Itf_Level -- 下行干扰等级
,UP_GoodQ_Level	-- 上行质量评估等级
,UP_GoodQ_Area	-- 上行质量RIP占比区间
,UP_RIP_Ratio -- 上行质量RIP占比率
from frt_mro_agps_mktcenter_m
where month =#{MONTH}
and city='#{CITY}'
and country = '#{COUNTRY}'
and trim(MKTCENTER) <> '') a
JOIN (SELECT * FROM dim_mktcenter_gis_data WHERE DAY=(SELECT max(day) FROM dim_mktcenter_gis_data)) b
on a.MKTCENTER_ID = b.MKTCEN_ID
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_14_NetScale" description="取各地市或某地市下各区县的网络规模数据" DB="mysql">
<![CDATA[
select #{GB}
    ,operator -- 运营商
    ,count(*) as total_num -- 小区规模
    ,sum(is_new) as new_num -- 网络发展
from FRT_AGPS_SECTOR_FIND_M
where month =#{MONTH}
#{CITYCOND}
AND city is not null
AND city <> ''
group by #{GB},operator
order by operator,total_num desc
]]>
</sqlTemplate>
<sqlTemplate id="OpersComp3.0_15_NetScale_detail" description="取某区县的网络规模详细数据" DB="mysql">
<![CDATA[
select *
from FRT_AGPS_SECTOR_FIND_M
where month =#{MONTH}
and city='#{CITY}'
and country='#{COUNTRY}'
#{ISNEW}
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_16_NetHot" description="取各地市或某地市下各区县的网络规模数据" DB="mysql">
<![CDATA[
select hot_type
    ,#{GB}
    ,operator -- 运营商
    ,count(*) as hop_num -- 热点数量
from FRT_AGPS_OPT_HOT_AREA_M
where month =#{MONTH}
#{CITYCOND}
AND city is NOT NULL
group by hot_type,#{GB},operator
order by hot_type,operator,hop_num DESC
]]>
</sqlTemplate>
<sqlTemplate id="OpersComp3.0_17_NetHot_CountryDetail" description="取各某区县的热点GIS数据等详细" DB="mysql">
<![CDATA[
select 
    HOT_AREA_ID --	热点区域ID
    ,HOT_AREA_NAME --	热点区域ID
    ,CITY --	地市名称
    ,CITY_ID --	地市ID
    ,COUNTRY --	区县
    ,COUNTRY_ID --	区县ID
    ,MKTCENTER	-- 营服中心
    ,MKTCENTER_ID --	营服中心ID
    ,GRID --	网格
    ,LONGITUDE_MIN --	最小经度
    ,LATITUDE_MIN --	最小纬度
    ,LONGITUDE_MID --	中心经度
    ,LATITUDE_MID --	中心纬度
    ,LONGITUDE_MAX --	最大经度
    ,LATITUDE_MAX --	最大纬度
    ,BELONG_AREA_TYPE --	区域归属
    ,OPERATOR --	运营商
    ,HOT_TYPE --	热点区域类型
    ,GIS_DATA --	GPS经纬度集合
    ,GRID_COUNT --	栅格数据量
    ,FCN_COUNT --	频点总数
    ,PCI_COUNT --	PCI数量
    ,AGPS_MR_COUNT --	AGPS记录数均值
    ,RSRP_AVG --	RSRP均值
    ,RSRQ_AVG --	RSRQ均值
    ,BUSY_IND_AVG --	业务繁忙指数均值
    ,GRID_THICK_IND_AVG --	栅格密度均值
from FRT_AGPS_OPT_HOT_AREA_M
where month =#{MONTH}
and city='#{CITY}'
and country='#{COUNTRY}'
]]>
</sqlTemplate>
<sqlTemplate id="OpersComp3.0_18_NetHotGrid" description="取某区县的栅格数据" DB="hbase">
<![CDATA[
getByKeyScope
NOCE:DSI_AGPS_OPT_HOT_GRID_M
#{KEYLIST}
#{KEYLIST}~
#{CLOUMNSLIST}
rowkey 1
]]>
</sqlTemplate>


<sqlTemplate id="OpersComp3.0_19_NetScale" description="取频点数据" DB="mysql">
<![CDATA[
SELECT * from dim_operator_fcn
]]>
</sqlTemplate>


<sqlTemplate id="OpersComp3.0_04_02_cellbar" description="取地铁的top20站点数据" DB="mysql">
<![CDATA[
select a.*,b.BAIDU_LONGITUDE,b.BAIDU_LATITUDE,b.GEOG from (select OBJECT_ID,OBJECT_NAME,STATION_ID,STATION_NAME, city,
round(DX_AREA_RSRP_COV*100,2) as DX_COV,
round((DX_AREA_RSRP_COV-YD_AREA_RSRP_COV)*100,2) as DX_YD_COV,
round((DX_AREA_RSRP_COV-LT_AREA_RSRP_COV)*100,2) as DX_LT_COV
from frt_agps_metro_rsrp_m
where month = #{MONTH}
#{AREACOND}
and OBJECT_TYPE=#{OBJECTTYPE}
order by DX_AREA_RSRP_COV #{ASCDESC} 
limit 20) a
JOIN
(
select STATION_ID,BAIDU_LONGITUDE,BAIDU_LATITUDE,GEOG from dim_metro_station where  1=1  #{CITYNAME} 
) b
on a.STATION_ID=B.STATION_ID
ORDER BY a.DX_COV #{ASCDESC} 
]]>
</sqlTemplate>


<sqlTemplate id="OpersComp3.0_01_02_aggrate" description="取某级别的汇总数据（包括左侧数据和分级覆盖率）" DB="postgrepSQL">
<![CDATA[
 
select
round(cast((avg(dx_area_rsrp_cov_95)*100) as NUMERIC ) , 2) as DX_95
,round(cast((avg(dx_area_rsrp_cov_100)*100) as NUMERIC ) , 2) as DX_100
,round(cast((avg(dx_area_rsrp_cov)*100) as NUMERIC ), 2) as dx_avg
,round(cast((avg(dx_area_rsrp_cov_110)*100) as NUMERIC ) , 2) dx_110
,round(cast((avg(dx_area_rsrp_cov_115)*100) as NUMERIC ), 2) dx_115
,round(cast((avg(yd_area_rsrp_cov_95)*100) as NUMERIC ), 2) yd_95
,round(cast((avg(yd_area_rsrp_cov_100)*100) as NUMERIC ), 2) yd_100
,round(cast((avg(yd_area_rsrp_cov)*100) as NUMERIC ), 2) yd_avg
,round(cast((avg(yd_area_rsrp_cov_110)*100) as NUMERIC ), 2) yd_110
,round(cast((avg(yd_area_rsrp_cov_115)*100) as NUMERIC ), 2) yd_115
,round(cast((avg(lt_area_rsrp_cov_95)*100) as NUMERIC ), 2) lt_95
,round(cast((avg(lt_area_rsrp_cov_100)*100) as NUMERIC ), 2) lt_100
,round(cast((avg(lt_area_rsrp_cov)*100) as NUMERIC ), 2) lt_avg
,round(cast((avg(lt_area_rsrp_cov_110)*100) as NUMERIC ), 2) lt_110
,round(cast((avg(lt_area_rsrp_cov_115)*100) as NUMERIC ), 2) lt_115,
sum(RSRP_105_DISTANCE) as totalDistance,
sum(case when (COALESCE(DX_AREA_RSRP_COV,0)>=COALESCE(YD_AREA_RSRP_COV,0) and COALESCE(DX_AREA_RSRP_COV,0)>=COALESCE(LT_AREA_RSRP_COV,0)) then 1 else 0 end) as DX_PIROR_COUNT,
sum(case when (COALESCE(YD_AREA_RSRP_COV,0)>COALESCE(DX_AREA_RSRP_COV,0) and COALESCE(YD_AREA_RSRP_COV,0)>=COALESCE(LT_AREA_RSRP_COV,0)) then 1 else 0 end) as YD_PIROR_COUNT,
sum(case when (COALESCE(LT_AREA_RSRP_COV,0)>COALESCE(YD_AREA_RSRP_COV,0) and COALESCE(LT_AREA_RSRP_COV,0)>COALESCE(DX_AREA_RSRP_COV,0)) then 1 else 0 end) as LT_PIROR_COUNT,
sum(case when (COALESCE(DX_AREA_RSRP_COV,0)>=COALESCE(YD_AREA_RSRP_COV,0) and COALESCE(DX_AREA_RSRP_COV,0)>=COALESCE(LT_AREA_RSRP_COV,0)) then object_size else 0 end) as DX_PIROR_MEASURE,
sum(case when (COALESCE(YD_AREA_RSRP_COV,0)>COALESCE(DX_AREA_RSRP_COV,0) and COALESCE(YD_AREA_RSRP_COV,0)>=COALESCE(LT_AREA_RSRP_COV,0)) then object_size else 0 end) as YD_PIROR_MEASURE,
sum(case when (COALESCE(LT_AREA_RSRP_COV,0)>COALESCE(YD_AREA_RSRP_COV,0) and COALESCE(LT_AREA_RSRP_COV,0)>COALESCE(DX_AREA_RSRP_COV,0)) then object_size else 0 end) as LT_PIROR_MEASURE
from FRT_MRO_AREA_RSRP_M
where month=#{MONTH}
	#{AREACOND}
	and OBJECT_TYPE=#{OBJECTTYPE}


]]>
</sqlTemplate>



<sqlTemplate id="OpersComp3.0_02_02_trend" description="取趋势图数据" DB="postgrepSQL">
<![CDATA[
select month,round(cast(avg(dx_area_rsrp_cov)*100 as NUMERIC),2) as DX_AVG,
round(cast(avg(yd_area_rsrp_cov)*100 as NUMERIC),2) as YD_AVG,
round(cast(avg(lt_area_rsrp_cov)*100 as NUMERIC),2) as LT_AVG
from FRT_MRO_AREA_RSRP_M
where month between cast((select to_char(date '#{MONTH}01' - interval '11 month', 'YYYYMM')) as NUMERIC) and #{MONTH}
and OBJECT_TYPE=#{OBJECTTYPE}
#{AREACOND}
group by month
order by month

]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_04_03_cellbar" description="取小区柱图数据" DB="postgrepSQL">
<![CDATA[
select OBJECT_NAME,OBJECT_ID, city , RSRP_105_DISTANCE as RFG,
round(CAST(DX_AREA_RSRP_COV*100 as NUMERIC),2) as DX_COV, 
round(CAST((DX_AREA_RSRP_COV-YD_AREA_RSRP_COV)*100 as NUMERIC),2) as DX_YD_COV,
round(CAST((DX_AREA_RSRP_COV-LT_AREA_RSRP_COV)*100 as NUMERIC),2) as DX_LT_COV,
cast(gis_line_gps as box2d) as box2d
from FRT_MRO_AREA_RSRP_M
where month=#{MONTH}
#{AREACOND}
and OBJECT_TYPE=#{OBJECTTYPE}
order by DX_AREA_RSRP_COV #{ASCDESC}
limit 20

]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_03_02_colorblock" description="取广东省区块数据" DB="postgrepSQL">
<![CDATA[
select city_id,city_name,ST_AsGeoJSON(geom) as geom  from DIM_CITY
]]>
</sqlTemplate>


<sqlTemplate id="OpersCompV4_03_07_03_search" description="根据objectid来查询高铁线段数据" DB="postgresql">
		<![CDATA[
SELECT 
city,
object_id,
object_name, dx_area_rsrp_avg, dx_yd_rsrp_avg_level , dx_lt_rsrp_avg_level,
ST_AsGeoJSON(gis_line_gps) as geom,
	round(CAST(avg(DX_AREA_RSRP_COV)*100 as NUMERIC),2) as DX_AVG,
	round(CAST(avg(YD_AREA_RSRP_COV)*100 as NUMERIC),2) as YD_AVG,
	round(CAST(avg(LT_AREA_RSRP_COV)*100 as NUMERIC),2) as LT_AVG
FROM frt_agps_line_rsrp_m_#{MONTH}  
WHERE 
object_type=#{OBJECTTYPE}
AND object_id=#{OBJECTID}
AND line_level=#{LEVEL} 
#{AREACOND}
GROUP BY city , object_id , object_name ,geom , dx_area_rsrp_avg, dx_yd_rsrp_avg_level , dx_lt_rsrp_avg_level

]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_02_01_radioProv_search" description="全省射频质量图表数据" DB="mysql">
		<![CDATA[
SELECT
sum(dw_goodq_level_y_cnt) as dw_goodq_level_y_cnt,
sum(dw_goodq_level_l_cnt) as dw_goodq_level_l_cnt,
sum(dw_goodq_level_h_cnt) as dw_goodq_level_h_cnt,
sum(dw_goodq_level_z_cnt) as dw_goodq_level_z_cnt,
sum(dw_goodq_level_c_cnt) as dw_goodq_level_c_cnt,
sum(dw_itf_level_y_cnt) as dw_itf_level_y_cnt,
sum(dw_itf_level_l_cnt) as dw_itf_level_l_cnt,
sum(dw_itf_level_h_cnt) as dw_itf_level_h_cnt,
sum(dw_itf_level_z_cnt) as dw_itf_level_z_cnt,
sum(dw_itf_level_c_cnt) as dw_itf_level_c_cnt,
sum(up_goodq_level_y_cnt) as up_goodq_level_y_cnt,
sum(up_goodq_level_l_cnt) as up_goodq_level_l_cnt,
sum(up_goodq_level_h_cnt) as up_goodq_level_h_cnt,
sum(up_goodq_level_z_cnt) as up_goodq_level_z_cnt,
sum(up_goodq_level_c_cnt) as up_goodq_level_c_cnt
from FRT_MRO_AGPS_CITY_M
WHERE month=#{MONTH}
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_02_01_radioCity_search" description="根据地市，取该地市的射频质量图表数据" DB="mysql">
		<![CDATA[
SELECT
city_id,
city as object_name,
dw_goodq_level_y_cnt,
dw_goodq_level_l_cnt,
dw_goodq_level_h_cnt,
dw_goodq_level_z_cnt,
dw_goodq_level_c_cnt,
dw_itf_level_y_cnt,
dw_itf_level_l_cnt,
dw_itf_level_h_cnt,
dw_itf_level_z_cnt,
dw_itf_level_c_cnt,
up_goodq_level_y_cnt,
up_goodq_level_l_cnt,
up_goodq_level_h_cnt,
up_goodq_level_z_cnt,
up_goodq_level_c_cnt
from FRT_MRO_AGPS_CITY_M
WHERE month=#{MONTH}
AND city='#{CITY}'
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_02_01_radioCountry_search" description="根据地区县，取该区县的射频质量图表数据" DB="mysql">
		<![CDATA[
SELECT
country_id ,
country as object_name,
dw_goodq_level_y_cnt,
dw_goodq_level_l_cnt,
dw_goodq_level_h_cnt,
dw_goodq_level_z_cnt,
dw_goodq_level_c_cnt,
dw_itf_level_y_cnt,
dw_itf_level_l_cnt,
dw_itf_level_h_cnt,
dw_itf_level_z_cnt,
dw_itf_level_c_cnt,
up_goodq_level_y_cnt,
up_goodq_level_l_cnt,
up_goodq_level_h_cnt,
up_goodq_level_z_cnt,
up_goodq_level_c_cnt
from FRT_MRO_AGPS_AREA_M
WHERE month=#{MONTH}
AND city='#{CITY}'
and country = '#{COUNTRY}'
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_02_01_radioMkt_search" description="根据地市、区县、营服，取营服的射频质量图表数据" DB="mysql">
		<![CDATA[
SELECT
MKTCENTER_ID,
MKTCENTER as object_name,
dw_goodq_level_y_cnt,
dw_goodq_level_l_cnt,
dw_goodq_level_h_cnt,
dw_goodq_level_z_cnt,
dw_goodq_level_c_cnt,
dw_itf_level_y_cnt,
dw_itf_level_l_cnt,
dw_itf_level_h_cnt,
dw_itf_level_z_cnt,
dw_itf_level_c_cnt,
up_goodq_level_y_cnt,
up_goodq_level_l_cnt,
up_goodq_level_h_cnt,
up_goodq_level_z_cnt,
up_goodq_level_c_cnt
from frt_mro_agps_mktcenter_m
where month =#{MONTH}
and city='#{CITY}'
and country = '#{COUNTRY}'
AND MKTCENTER='#{MKTCENTER}'
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_02_01_area_mktcenter" description="读取某地市某区县某营服中心射频质量各栅格的数据" DB="hbase">
<![CDATA[
getByKeyScope
NOCE:DSI_MRO_AGPS_GRID_M
#{STARTROW}
#{ENDROW}
#{COLUMNLIST}
rowkey 1
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_02_01_area_mktcenter_byKey" description="读取某营服中心射频质量栅格数据" DB="hbase">
    <![CDATA[
getGridByKey
NOCE:DSI_MRO_AGPS_GRID_M
#{GRIDKEYPREFIX}
#{GRIDLEVEL}
#{MAXLNG_MAXLAT_MINLNG_MINLAT}
#{COLUMNLIST}
rowkey 1
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_02_01_cityExport" description="射频质量全省各地市数据导出" DB="mysql">
<![CDATA[
SELECT 
MONTH,
city,
#{DATASTR}
 FROM FRT_MRO_AGPS_CITY_M 
WHERE MONTH = #{MONTH}
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_02_01_countryExport" description="射频质量某地市各区县数据导出" DB="mysql">
<![CDATA[
SELECT 
month,
city,
country,
#{DATASTR}
 FROM FRT_MRO_AGPS_AREA_M
WHERE MONTH = #{MONTH}
and city='#{CITY}'
and country <> ''
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_02_01_mktExport" description="射频质量某区县个营服数据导出" DB="mysql">
<![CDATA[
SELECT 
month,
city,
country,
MKTCENTER,
#{DATASTR}
 FROM frt_mro_agps_mktcenter_m
WHERE MONTH = #{MONTH}
and city='#{CITY}'
AND country = '#{COUNTRY}'
AND mktcenter <> ''
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_03_01_cityExport" description="网络规模地市数据导出" DB="mysql">
<![CDATA[
SELECT a.month,a.city,a.operator ,a.fcn ,a.CELLCOUNT,b.PCICOUNT FROM (SELECT
	MONTH,
	city,
	operator,
	fcn,
	count(pci) CELLCOUNT
FROM FRT_AGPS_SECTOR_FIND_M
WHERE
	MONTH = #{MONTH}
AND city<>''
GROUP BY month,city,operator,fcn) a
join
(SELECT
	MONTH,
	city,
	operator,
	count(pci) as PCICOUNT
FROM FRT_AGPS_SECTOR_FIND_M
WHERE
	MONTH = #{MONTH}
AND city<>''
GROUP BY month,city,operator) b
on a.month=b.month AND a.city=b.city and a.operator=b.operator
]]>
</sqlTemplate>
<sqlTemplate id="OpersCompV4_03_01_countryExport" description="网络规模全部地市数据导出" DB="mysql">
<![CDATA[
SELECT a.month,a.city,a.country,a.operator ,a.fcn ,a.CELLCOUNT,b.PCICOUNT FROM (SELECT
	MONTH,
	city,
  country,
	operator,
	fcn,
	count(pci) CELLCOUNT
FROM FRT_AGPS_SECTOR_FIND_M
WHERE
	MONTH = #{MONTH}
AND city='#{CITY}'
AND country <> ''
GROUP BY month,city,country,operator,fcn) a
join
(SELECT
	MONTH,
	city,
country,
	operator,
	count(pci) as PCICOUNT
FROM FRT_AGPS_SECTOR_FIND_M
WHERE
	MONTH = #{MONTH}
AND city = '#{CITY}'
AND country <> ''
GROUP BY month,city,country,operator) b
on a.month=b.month AND a.city=b.city AND a.country=b.country and a.operator=b.operator

]]>
</sqlTemplate>

<sqlTemplate id="KQI_perce_01_trendwithday_week_month" description="粒度为天/周／月" DB="mysql">
<![CDATA[
select #{PERIOD_VARIABLE}
	,High_Type
	,round(CE_GOOD_RATIO*100, 2) as CE_GOOD_RATIO 	-- 感知优良率
	,round(WEBPAGE_GOOD_RATIO_AVG*100, 2) as WEBPAGE_GOOD_RATIO_AVG		-- 网页浏览优良率
	,round(Video_Good_Ratio_Avg*100, 2) as Video_Good_Ratio_Avg 	-- 视频优良率
	,round(Game_Good_Ratio_Avg*100, 2) as Game_Good_Ratio_Avg 	-- 游戏优良率
	,round(Im_Good_Ratio_Avg*100, 2) as Im_Good_Ratio_Avg 	-- 即时通信优良率
from noce.#{TABLE_NAME}
where #{PERIOD_VARIABLE} between #{START_TIME} and #{END_TIME}
	and LATN_ID=#{LATN_ID}
	and High_Type in (1, 2, 3, 4, 5)
order by #{PERIOD_VARIABLE}
]]>
</sqlTemplate>

<sqlTemplate id="KQI_perce_04_detailswithprovince_day_week_month" description="显示21地市感知指标粒度为天/周／月" DB="mysql">
<![CDATA[
select t2.city_name, t1.High_Type, cnt_all, Cell_CNT, CE_GOOD_RATIO, WEBPAGE_GOOD_RATIO_AVG, Video_Good_Ratio_Avg
,Game_Good_Ratio_Avg, Im_Good_Ratio_Avg, First_Screen_ALL, VIDIO_ALL
,Video_Halt_ALL, Game_ALL, Im_Send_ALL
from
(
select LATN_ID
    ,High_Type
    ,Cell_CNT
    ,round(CE_GOOD_RATIO*100, 2) as CE_GOOD_RATIO   -- 感知优良率
    ,round(WEBPAGE_GOOD_RATIO_AVG*100, 2) as WEBPAGE_GOOD_RATIO_AVG
    ,round(Video_Good_Ratio_Avg*100, 2) as Video_Good_Ratio_Avg
    ,round(Game_Good_Ratio_Avg*100, 2) as Game_Good_Ratio_Avg
    ,round(Im_Good_Ratio_Avg*100, 2) as Im_Good_Ratio_Avg
    ,First_Screen_ALL
    ,VIDIO_ALL
    ,Video_Halt_ALL
    ,Game_ALL
    ,Im_Send_ALL
from noce.#{TABLE_NAME}
where #{PERIOD_VARIABLE}=#{TIME}
    and LATN_ID is not NULL
    and High_Type in (1, 2, 3, 4, 5)
) t1
join
(
select city_name, city_id, city_display_order from noce.DIM_TELE_CITY
) t2
on t1.LATN_ID=cast(city_id as int)
left outer join
(
    select
    case when t4.city_id=1 then t3.city_id else 1000 end as city_id,
    t4.attribute as High_Type,
    sum(case when t4.attribute = 1 then t3.count_1
             when t4.attribute = 2 then t3.count_2
             when t4.attribute = 3 then t3.count_3
             when t4.attribute = 4 then t3.count_4
             when t4.attribute = 5 then t3.count_5
             else 0
        end)  as cnt_all
    from
    (
    select
        city_id,
        sum(case when attribute is not NULL then 1 else 0 end ) as count_1,
        sum(case when attribute is NULL     then 1 else 0 end ) as count_2,
        sum(1) as count_3,
        sum(case when attribute%64 != 0 then 1 else 0 end ) as count_4,
        sum(case when attribute%64 = 0 or attribute is NULL then 1 else 0 end ) as count_5
    from noce.dim_sector
    where day=#{MAX_DATE}
        and nettype='4G'
        and city_id is not NULL
    group by city_id
    ) t3
    join
    (   select 1 as attribute , 1 as city_id
        union all  select 2 as attribute , 1 as city_id
        union all  select 3 as attribute , 1 as city_id
        union all  select 4 as attribute , 1 as city_id
        union all  select 5 as attribute , 1 as city_id
        union all  select 1 as attribute , 2 as city_id
        union all  select 2 as attribute , 2 as city_id
        union all  select 3 as attribute , 2 as city_id
        union all  select 4 as attribute , 2 as city_id
        union all  select 5 as attribute , 2 as city_id
        ) t4
    GROUP BY
        case when t4.city_id=1 then t3.city_id else 1000 end,
        High_Type
    HAVING
        cnt_all>=0
) t5
on t1.LATN_ID=t5.city_id and t1.High_Type=t5.High_Type
order by t2.city_display_order, t1.High_Type
]]>
</sqlTemplate>

<sqlTemplate id="KQI_perce_07_detailswithcity_day_week_month" description="显示目标地市下面区县感知指标 粒度为天/周／月" DB="mysql">
<![CDATA[
select t1.AREA_NAME, t1.High_Type, cnt_all,Cell_CNT, CE_GOOD_RATIO, WEBPAGE_GOOD_RATIO_AVG, Video_Good_Ratio_Avg,
	Game_Good_Ratio_Avg, Im_Good_Ratio_Avg, First_Screen_ALL,VIDIO_ALL
	,Video_Halt_ALL,Game_ALL,Im_Send_ALL
from
(
	select AREA_NAME
		,high_type
		,cell_cnt
		,round(CE_GOOD_RATIO*100, 2) as CE_GOOD_RATIO
		,round(WEBPAGE_GOOD_RATIO_AVG*100, 2) as WEBPAGE_GOOD_RATIO_AVG
		,round(Video_Good_Ratio_Avg*100, 2) as Video_Good_Ratio_Avg
		,round(Game_Good_Ratio_Avg*100, 2) as Game_Good_Ratio_Avg
		,round(Im_Good_Ratio_Avg*100, 2) as Im_Good_Ratio_Avg
		,First_Screen_ALL
		,VIDIO_ALL
		,Video_Halt_ALL
		,Game_ALL
		,Im_Send_ALL
		,2 as display_order
	from noce.#{TABLE_NAME}
	where #{PERIOD_VARIABLE}=#{TIME}
		and LATN_ID=#{LATN_ID}
		and High_Type in (1, 2, 3, 4, 5)
) t1
left outer join
(
	select
	    case when t4.area=1 then t3.AREA_NAME else '全市' end as AREA_NAME,
	    t4.attribute as High_Type,
	    sum(case when t4.attribute = 1 then t3.count_1
	             when t4.attribute = 2 then t3.count_2
	             when t4.attribute = 3 then t3.count_3
	             when t4.attribute = 4 then t3.count_4
	             when t4.attribute = 5 then t3.count_5
	             else 0
	        end)  as cnt_all
	from
	(
	    select
	        case when AREA_NAME is NULL then '未知' when AREA_NAME = 'null' then '未知' else AREA_NAME end as AREA_NAME,
	        sum(case when attribute is not NULL then 1 else 0 end ) as count_1,
	        sum(case when attribute is NULL     then 1 else 0 end ) as count_2,
	        sum(1) as count_3,
	        sum(case when attribute%64 != 0 then 1 else 0 end ) as count_4,
	        sum(case when attribute%64 = 0 or attribute is NULL then 1 else 0 end ) as count_5
	    from noce.dim_sector
	    where day=#{MAX_DATE}
	        and nettype='4G'
	        and CITY_ID=#{LATN_ID}
	    group by AREA_NAME
	    ) t3
	join
	(   select 1 as attribute , 1 as area
	    union all  select 2 as attribute , 1 as area
	    union all  select 3 as attribute , 1 as area
	    union all  select 4 as attribute , 1 as area
	    union all  select 5 as attribute , 1 as area
	    union all  select 1 as attribute , 2 as area
	    union all  select 2 as attribute , 2 as area
	    union all  select 3 as attribute , 2 as area
	    union all  select 4 as attribute , 2 as area
	    union all  select 5 as attribute , 2 as area
	    ) t4
	GROUP BY
	    case when t4.area=1 then t3.AREA_NAME else '全市' end,
	    High_Type
	HAVING
	    cnt_all>=0
) t2
on t1.AREA_NAME=t2.AREA_NAME and t1.High_Type=t2.High_Type
order by t1.AREA_NAME="全市" desc, t1.AREA_NAME, t1.High_Type
]]>
</sqlTemplate>


<sqlTemplate id="KQI_perce_10_destribution" description="各项指标分布图" DB="impala to hive">
<![CDATA[
select * from
(
select KQI_TYPE
	,KQI_VALUE
	,sum(STAT_NUM) as STAT_NUM
from noce.FRT_DPI_KQI_STAT_D
where day between #{START_TIME} and #{END_TIME}
	and network=4
	and #{LATN_ID}
	and KQI_TYPE in ('WIRELESS_DT2','WEBPAGE_OPEN_DELAY','TCP_DELAY','WIRELESS_DT1','GAME_DELAY','DNS_DELAY','VIDIO_DOWNLOAD_RATE','HTTP_DELAY','FIN_DELAY','TCP_SYNACK_DL','TCP_ACK_DL')
	and KQI_VALUE<2001
group by KQI_TYPE, KQI_VALUE
union
select KQI_TYPE
	,KQI_VALUE
	,sum(STAT_NUM) as STAT_NUM
from noce.FRT_DPI_KQI_STAT_D
where day between #{START_TIME} and #{END_TIME}
	and network=4
	and #{LATN_ID}
	and KQI_TYPE='FIRST_SCREEN_DELAY'
	and KQI_VALUE<8001
group by KQI_TYPE, KQI_VALUE
) t
order by KQI_TYPE, KQI_VALUE
]]>
</sqlTemplate>


<sqlTemplate id="KQI_perce_11_summary" description=" 总次数，平均值等统计指标" DB="impala to hive">
<![CDATA[
select KQI_TYPE, round(multi_res/total_num) as avg_val, total_num
from
(
select KQI_TYPE
	,sum(KQI_VALUE*STAT_NUM) as multi_res
	,sum(STAT_NUM) as total_num
from noce.FRT_DPI_KQI_STAT_D
where day between #{START_TIME} and #{END_TIME}
	and network=4
	and #{LATN_ID}
	and KQI_TYPE in ('WIRELESS_DT2','WEBPAGE_OPEN_DELAY','TCP_DELAY','WIRELESS_DT1','GAME_DELAY','FIRST_SCREEN_DELAY','DNS_DELAY','VIDIO_DOWNLOAD_RATE','HTTP_DELAY','FIN_DELAY','TCP_SYNACK_DL','TCP_ACK_DL')
group by KQI_TYPE
) t
order by KQI_TYPE
]]>
</sqlTemplate>


<sqlTemplate id="OpersCompV4_03_07_02_search" description="根据objectid按级别来查询当前视图范围内的线段（高速）数据 V3版本的高速根据高速的ID查询可视范围的高速路段" DB="postgresql">
<![CDATA[
SELECT 
city,
object_id,
object_name, dx_area_rsrp_avg, dx_yd_rsrp_avg_level , dx_lt_rsrp_avg_level,
ST_AsGeoJSON(gis_line_gps) as geom,
        round(CAST(avg(DX_AREA_RSRP_COV)*100 as NUMERIC),2) as DX_AVG,
        round(CAST(avg(YD_AREA_RSRP_COV)*100 as NUMERIC),2) as YD_AVG,
        round(CAST(avg(LT_AREA_RSRP_COV)*100 as NUMERIC),2) as LT_AVG
FROM frt_agps_line_rsrp_m_#{MONTH} t1,
(SELECT ST_PolygonFromText('POLYGON((#{MINLNG} #{MINLAT},
                                                   #{MINLNG} #{MAXLAT},
                                                   #{MAXLNG} #{MAXLAT},
                                                   #{MAXLNG} #{MINLAT},
                                                   #{MINLNG} #{MINLAT}))',4326) AS geom_t2) t2
WHERE ST_Intersects(t1.gis_line_gps,t2.geom_t2)
#{AREACOND}
and 
object_type=#{OBJECTTYPE}
AND object_id=#{OBJECTID}
AND line_level=#{LEVEL} 
GROUP BY city , object_id , object_name ,geom ,dx_area_rsrp_avg , dx_yd_rsrp_avg_level , dx_lt_rsrp_avg_level
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp3.0_03_03_colorblock" description="取按区域排序数据, 仅适用于高速和高铁" DB="postgresql">
<![CDATA[
select #{GB},round(cast(avg(dx_area_rsrp_cov)*100 as NUMERIC),2) as DX_AVG,
round(cast(avg(yd_area_rsrp_cov)*100 as NUMERIC),2) as YD_AVG,
round(cast(avg(lt_area_rsrp_cov)*100 as NUMERIC),2) as LT_AVG,
sum(RSRP_105_DISTANCE) as RFG,
case when (avg(dx_area_rsrp_cov)>=avg(yd_area_rsrp_cov) and avg(dx_area_rsrp_cov)>=avg(lt_area_rsrp_cov)) then 'DX' 
     when (avg(dx_area_rsrp_cov)<avg(yd_area_rsrp_cov) and avg(yd_area_rsrp_cov)>=avg(lt_area_rsrp_cov)) then 'YD' 
     else 'LT' end as three_net,
case when (avg(dx_area_rsrp_cov)>=avg(yd_area_rsrp_cov) ) then 'DX' else 'YD' end as DX_YD,
case when (avg(dx_area_rsrp_cov)>=avg(lt_area_rsrp_cov) ) then 'DX' else 'LT' end as DX_LT,
round(cast((avg(dx_area_rsrp_cov)*100 -avg(yd_area_rsrp_cov)*100) as NUMERIC),2) as DX_YD_AVG,
round(cast((avg(dx_area_rsrp_cov)*100 -avg(lt_area_rsrp_cov)*100) as NUMERIC),2) as DX_LT_AVG
from FRT_MRO_AREA_RSRP_M
where month = #{MONTH}
#{AREACOND}
and OBJECT_TYPE=#{OBJECTTYPE}
and #{GB} is not null
and trim(#{GB})<>''
group by #{GB}
order by DX_AVG
]]>
</sqlTemplate>



<sqlTemplate id="KQI_perce_12_detailsofcell_day_week_month" description="显示目标地市下面全部小区感知指标（日）" DB="mysql">
<![CDATA[
select LATN_ID
	,AREA_NAME
	,BASE_STATN_ID
	,CELL_ID
	,CELL_NAME
	-- ,round(avg(CE_GOOD_RATIO)*100, 2) as CE_GOOD_RATIO
	,round(avg(WEBPAGE_GOOD_RATIO)*100, 2) as WEBPAGE_GOOD_RATIO
	,round(avg(Video_Good_Ratio)*100, 2) as Video_Good_Ratio
	,round(avg(Game_Good_Ratio)*100, 2) as Game_Good_Ratio
	,round(avg(Im_Good_Ratio)*100, 2) as Im_Good_Ratio
	-- ,round(avg(WEBPAGE_OPEN_DELAY_GOOD_RATIO)*100, 2) as WEBPAGE_OPEN_DELAY_GOOD_RATIO
	,round(avg(First_Screen_Good_Ratio)*100, 2) as First_Screen_Good_Ratio
	,round(avg(VIDIO_DOWNLOAD_RATE_GOOD_RATIO)*100, 2) as VIDIO_DOWNLOAD_RATE_GOOD_RATIO
	,round(avg(Video_Halt_Good_Ratio)*100, 2) as Video_Halt_Good_Ratio
	-- ,sum(WEBPAGE_OPEN_ALL) as WEBPAGE_OPEN_ALL
	,sum(First_Screen_ALL) as First_Screen_ALL
	,sum(VIDIO_ALL) as VIDIO_ALL
	,sum(Video_Halt_ALL) as Video_Halt_ALL
	,sum(Game_ALL) as Game_ALL
	,sum(Im_Send_ALL) as Im_Send_ALL
	,IF(substring(
	concat(case when H_RailWay_Type=1 then '|高铁' else '' end,  case when H_Road_Type=1 then '|高速' else '' end,  case when H_College_Type=1 then '|高校' else '' end,
		 case when H_Value_Type=1 then '|高流量商务区' else '' end,  case when L_Metro_Type=1 then '|地铁' else '' end,  case when H_Density_Type=1 then '|高密度住宅区' else '' end,
		 case when H_Scenery_Type=1 then '|美景' else '' end,  case when H_Food_Type=1 then '|美食' else '' end,  case when H_Field_Type=1 then '|体育场' else '' end -- ,
		 -- case when H_Market_Type=1 then '|市场' else '' end, case when H_Village_Type=1 then '|自然村' else '' end
		 ),2)="",'其他',substring(
	concat(case when H_RailWay_Type=1 then '|高铁' else '' end,  case when H_Road_Type=1 then '|高速' else '' end,  case when H_College_Type=1 then '|高校' else '' end,
		 case when H_Value_Type=1 then '|高流量商务区' else '' end,  case when L_Metro_Type=1 then '|地铁' else '' end,  case when H_Density_Type=1 then '|高密度住宅区' else '' end,
		 case when H_Scenery_Type=1 then '|美景' else '' end,  case when H_Food_Type=1 then '|美食' else '' end,  case when H_Field_Type=1 then '|体育场' else '' end -- ,
		 -- case when H_Market_Type=1 then '|市场' else '' end, case when H_Village_Type=1 then '|自然村' else '' end
		 ),2)
	) as high_type
from noce.#{TABLE_NAME}
where #{PERIOD_VARIABLE}=#{TIME}
	and LATN_ID=#{LATN_ID}
	-- and AREA_NAME is not NULL
	#{AREA_NAME}
group by LATN_ID, AREA_NAME, BASE_STATN_ID, CELL_ID, high_type
#{LIMIT}
]]>
</sqlTemplate>

<sqlTemplate id="APP_KQI_perce_01_trendwithday_week_month" description="粒度为天／周／月" DB="mysql">
<![CDATA[
select #{PERIOD_VARIABLE}
	,High_Type
	,round(CE_GOOD_RATIO*100, 2) as CE_GOOD_RATIO 	-- 感知优良率
	,round(WEBPAGE_GOOD_RATIO_AVG*100, 2) as WEBPAGE_GOOD_RATIO_AVG		-- 网页浏览优良率
	,round(Video_Good_Ratio_Avg*100, 2) as Video_Good_Ratio_Avg 	-- 视频优良率
	,round(Game_Good_Ratio_Avg*100, 2) as Game_Good_Ratio_Avg 	-- 游戏优良率
	,round(Im_Good_Ratio_Avg*100, 2) as Im_Good_Ratio_Avg 	-- 即时通信优良率
from noce.#{TABLE_NAME}
where #{PERIOD_VARIABLE} between #{START_TIME} and #{END_TIME}
	and LATN_ID=#{LATN_ID}
	and High_Type in (1, 2, 3, 4, 5)
order by #{PERIOD_VARIABLE}
]]>
</sqlTemplate>

<sqlTemplate id="APP_KQI_perce_04_detailswithprovince_day_week_month" description="显示21地市感知指标(天／周／月)" DB="mysql">
<![CDATA[
select t2.city_name, t1.High_Type, cnt_all, Cell_CNT, CE_GOOD_RATIO, WEBPAGE_GOOD_RATIO_AVG, Video_Good_Ratio_Avg, Game_Good_Ratio_Avg, Im_Good_Ratio_Avg, First_Screen_ALL, VIDIO_ALL, Video_Halt_ALL, Game_ALL, Im_ALL
from
(
select LATN_ID
	,High_Type
	,Cell_CNT
	,round(CE_GOOD_RATIO*100, 2) as CE_GOOD_RATIO 	-- 感知优良率
	,round(WEBPAGE_GOOD_RATIO_AVG*100, 2) as WEBPAGE_GOOD_RATIO_AVG
	,round(Video_Good_Ratio_Avg*100, 2) as Video_Good_Ratio_Avg
	,round(Game_Good_Ratio_Avg*100, 2) as Game_Good_Ratio_Avg
	,round(Im_Good_Ratio_Avg*100, 2) as Im_Good_Ratio_Avg
	,First_Screen_ALL
	,VIDIO_ALL
	,Video_Halt_ALL
	,Game_ALL
	,Im_ALL
from noce.#{TABLE_NAME}
where #{PERIOD_VARIABLE}=#{TIME}
	and LATN_ID is not NULL
	and High_Type in (1, 2, 3, 4, 5)
) t1
left outer join
(
select city_name, city_id, city_display_order from noce.DIM_TELE_CITY
) t2
on t1.LATN_ID=cast(city_id as signed)
left outer join
(
	select
    case when t4.city_id=1 then t3.city_id else 1000 end as city_id,
    t4.attribute as High_Type,
    sum(case when t4.attribute = 1 then t3.count_1
             when t4.attribute = 2 then t3.count_2
             when t4.attribute = 3 then t3.count_3
             when t4.attribute = 4 then t3.count_4
             when t4.attribute = 5 then t3.count_5
             else 0
        end)  as cnt_all
    from
    (
    select
        city_id,
        sum(case when attribute is not NULL then 1 else 0 end ) as count_1,
        sum(case when attribute is NULL     then 1 else 0 end ) as count_2,
        sum(1) as count_3,
        sum(case when attribute%64 != 0 then 1 else 0 end ) as count_4,
        sum(case when attribute%64 = 0 or attribute is NULL then 1 else 0 end ) as count_5
    from noce.dim_sector
    where day=#{MAX_DATE}
        and nettype='4G'
        and city_id is not NULL
    group by city_id
    ) t3
    join
    (   select 1 as attribute , 1 as city_id
        union all  select 2 as attribute , 1 as city_id
        union all  select 3 as attribute , 1 as city_id
        union all  select 4 as attribute , 1 as city_id
        union all  select 5 as attribute , 1 as city_id
        union all  select 1 as attribute , 2 as city_id
        union all  select 2 as attribute , 2 as city_id
        union all  select 3 as attribute , 2 as city_id
        union all  select 4 as attribute , 2 as city_id
        union all  select 5 as attribute , 2 as city_id
        ) t4
    GROUP BY
        case when t4.city_id=1 then t3.city_id else 1000 end,
        High_Type
    HAVING
        cnt_all>=0
) t5
on t1.LATN_ID=t5.city_id and t1.High_Type=t5.High_Type
order by t2.city_display_order, t1.High_Type
]]>
</sqlTemplate>

<sqlTemplate id="APP_KQI_perce_07_detailswithcity_day_week_month" description="显示目标地市下面区县感知指标(天/周/月)" DB="mysql">
<![CDATA[
select t1.AREA_NAME, t1.High_Type, cnt_all,Cell_CNT, CE_GOOD_RATIO, WEBPAGE_GOOD_RATIO_AVG, Video_Good_Ratio_Avg,
	Game_Good_Ratio_Avg, Im_Good_Ratio_Avg, First_Screen_ALL,VIDIO_ALL
	,Video_Halt_ALL,Game_ALL,IM_ALL
from
(
	select AREA_NAME
		,high_type
		,cell_cnt
		,round(CE_GOOD_RATIO*100, 2) as CE_GOOD_RATIO
		,round(WEBPAGE_GOOD_RATIO_AVG*100, 2) as WEBPAGE_GOOD_RATIO_AVG
		,round(Video_Good_Ratio_Avg*100, 2) as Video_Good_Ratio_Avg
		,round(Game_Good_Ratio_Avg*100, 2) as Game_Good_Ratio_Avg
		,round(Im_Good_Ratio_Avg*100, 2) as Im_Good_Ratio_Avg
		,First_Screen_ALL
		,VIDIO_ALL
		,Video_Halt_ALL
		,Game_ALL
		,IM_ALL
		,2 as display_order
	from noce.#{TABLE_NAME}
	where #{PERIOD_VARIABLE}=#{TIME}
		and LATN_ID=#{LATN_ID}
		and High_Type in (1, 2, 3, 4, 5)
) t1
left outer join
(
	select
	    case when t4.area=1 then t3.AREA_NAME else '全市' end as AREA_NAME,
	    t4.attribute as High_Type,
	    sum(case when t4.attribute = 1 then t3.count_1
	             when t4.attribute = 2 then t3.count_2
	             when t4.attribute = 3 then t3.count_3
	             when t4.attribute = 4 then t3.count_4
	             when t4.attribute = 5 then t3.count_5
	             else 0
	        end)  as cnt_all
	from
	(
	    select
	        case when AREA_NAME is NULL then '未知' when AREA_NAME = 'null' then '未知' else AREA_NAME end as AREA_NAME,
	        sum(case when attribute is not NULL then 1 else 0 end ) as count_1,
	        sum(case when attribute is NULL     then 1 else 0 end ) as count_2,
	        sum(1) as count_3,
	        sum(case when attribute%64 != 0 then 1 else 0 end ) as count_4,
	        sum(case when attribute%64 = 0 or attribute is NULL then 1 else 0 end ) as count_5
	    from noce.dim_sector
	    where day=#{MAX_DATE}
	        and nettype='4G'
	        and CITY_ID=#{LATN_ID}
	    group by AREA_NAME
	    ) t3
	join
	(   select 1 as attribute , 1 as area
	    union all  select 2 as attribute , 1 as area
	    union all  select 3 as attribute , 1 as area
	    union all  select 4 as attribute , 1 as area
	    union all  select 5 as attribute , 1 as area
	    union all  select 1 as attribute , 2 as area
	    union all  select 2 as attribute , 2 as area
	    union all  select 3 as attribute , 2 as area
	    union all  select 4 as attribute , 2 as area
	    union all  select 5 as attribute , 2 as area
	    ) t4
	GROUP BY
	    case when t4.area=1 then t3.AREA_NAME else '全市' end,
	    High_Type
	HAVING
	    cnt_all>=0
) t2
on t1.AREA_NAME=t2.AREA_NAME and t1.High_Type=t2.High_Type
order by t1.AREA_NAME="全市" desc, t1.AREA_NAME, t1.High_Type
]]>
</sqlTemplate>

<sqlTemplate id="APP_KQI_perce_12_detailsofcell_day_week_month" description="显示目标地市下面全部小区感知指标(天/周/月)" DB="mysql">
<![CDATA[
select LATN_ID
,AREA_NAME
,BASE_STATN_ID
,CELL_ID
,CELL_NAME
-- ,round(avg(CE_GOOD_RATIO)*100, 2) as CE_GOOD_RATIO
,round(avg(WEBPAGE_GOOD_RATIO)*100, 2) as WEBPAGE_GOOD_RATIO
,round(avg(Video_Good_Ratio)*100, 2) as Video_Good_Ratio
,round(avg(Game_Good_Ratio)*100, 2) as Game_Good_Ratio
,round(avg(Im_Good_Ratio)*100, 2) as Im_Good_Ratio
-- ,round(avg(WEBPAGE_OPEN_DELAY_GOOD_RATIO)*100, 2) as WEBPAGE_OPEN_DELAY_GOOD_RATIO
,round(avg(First_Screen_Good_Ratio)*100, 2) as First_Screen_Good_Ratio
,round(avg(VIDIO_DOWNLOAD_RATE_GOOD_RATIO)*100, 2) as VIDIO_DOWNLOAD_RATE_GOOD_RATIO
,round(avg(Video_Halt_Good_Ratio)*100, 2) as Video_Halt_Good_Ratio
-- ,sum(WEBPAGE_OPEN_ALL) as WEBPAGE_OPEN_ALL
,sum(First_Screen_ALL) as First_Screen_ALL
,sum(VIDIO_ALL) as VIDIO_ALL
,sum(Video_Halt_ALL) as Video_Halt_ALL
,sum(Game_ALL) as Game_ALL
,sum(Im_ALL) as Im_Send_ALL
,if(
substring(concat(case when H_RailWay_Type=1 then '|高铁' else '' end,  case when H_Road_Type=1 then '|高速' else '' end,  case when H_College_Type=1 then '|高校' else '' end,
 case when H_Value_Type=1 then '|高流量商务区' else '' end,  case when L_Metro_Type=1 then '|地铁' else '' end,  case when H_Density_Type=1 then '|高密度住宅区' else '' end,
 case when H_Scenery_Type=1 then '|美景' else '' end,  case when H_Food_Type=1 then '|美食' else '' end,  case when H_Field_Type=1 then '|体育场' else '' end -- ,
 ),2)="",'其他',
substring(concat(case when H_RailWay_Type=1 then '|高铁' else '' end,  case when H_Road_Type=1 then '|高速' else '' end,  case when H_College_Type=1 then '|高校' else '' end,
 case when H_Value_Type=1 then '|高流量商务区' else '' end,  case when L_Metro_Type=1 then '|地铁' else '' end,  case when H_Density_Type=1 then '|高密度住宅区' else '' end,
 case when H_Scenery_Type=1 then '|美景' else '' end,  case when H_Food_Type=1 then '|美食' else '' end,  case when H_Field_Type=1 then '|体育场' else '' end -- ,
 ),2)
) as high_type
from noce.#{TABLE_NAME}
where #{PERIOD_VARIABLE}=#{TIME}
and LATN_ID=#{LATN_ID}
-- and AREA_NAME is not NULL
#{AREA_NAME}
group by LATN_ID, AREA_NAME, BASE_STATN_ID, CELL_ID, high_type
#{LIMIT}
]]>
</sqlTemplate>

	<sqlTemplate id="BasestationAndSectorQuery_01_seoterTable" description="取对应选项的基站数据" DB="mysql">
		<![CDATA[
			SELECT
				CITY_NAME,
				BASE_STATN_ID,
				BASE_STATN_NAME,
				CELL_ID,
				CELL_NAME,
				CITY_ID,
				CITY_PYNAME,
				AREA_ID,
				AREA_NAME,
				MKT_CENTER_CODE,
				MKT_CENTER_NAME,
				BUNCH_ID,
				SECTOR_ID,
				SECTOR_NAME,
				SECTOR_ADDR,
				LONGITUDE,
				LATITUDE,
				ANT_AZIMUTH,
				NETTYPE,
				COR_CDMA_CELL_ID,
				COR_CDMA_CELL_NAME,
				BSC_ID,
				LONGITUDE_BAIDU,
				LATITUDE_BAIDU,
				SID,
				NID,
				BS_VENDOR,
				CI,
				IS_INDOOR,
				ACCEPTSTATUS,
				BAND,
				HIGH,
				ANT_ELECTRON_ANGLE,
				ANT_ENGINE_ANGLE,
				TOTAL_DECLINATION_ANGLE,
				SYSTEM_TYPE_OR_STANDARD,
				REGION,
				ATTRIBUTE
			FROM
				dim_sector
			WHERE
				DAY = #{DAY}
			AND NETTYPE='#{NETTYPE}'
			#{CITYNAME}
			#{DISTRICT}
			#{REGION}
			#{BAND}
			#{ISINDOOR}
			#{FACTORY}
			AND longitude_baidu IS NOT NULL
		]]>
	</sqlTemplate>
	<sqlTemplate id="BasestationAndSectorQuery_02_seoterTable" description="取对应选项的基站数据（导出）" DB="mysql">
		<![CDATA[
			SELECT
				CITY_NAME,
				BASE_STATN_ID,
				BASE_STATN_NAME,
				CELL_ID,
				CELL_NAME,
				CITY_ID,
				CITY_PYNAME,
				AREA_ID,
				AREA_NAME,
				MKT_CENTER_CODE,
				MKT_CENTER_NAME,
				BUNCH_ID,
				SECTOR_ID,
				SECTOR_NAME,
				SECTOR_ADDR,
				LONGITUDE,
				LATITUDE,
				ANT_AZIMUTH,
				NETTYPE,
				COR_CDMA_CELL_ID,
				COR_CDMA_CELL_NAME,
				BSC_ID,
				LONGITUDE_BAIDU,
				LATITUDE_BAIDU,
				SID,
				NID,
				BS_VENDOR,
				CI,
				IS_INDOOR,
				ACCEPTSTATUS,
				BAND,
				HIGH,
				ANT_ELECTRON_ANGLE,
				ANT_ENGINE_ANGLE,
				TOTAL_DECLINATION_ANGLE,
				SYSTEM_TYPE_OR_STANDARD,
				REGION,
				ATTRIBUTE
			FROM
				dim_sector
			WHERE
				DAY = #{DAY}
			AND longitude_baidu IS NOT NULL
			AND NETTYPE='#{NETTYPE}'
			#{REGION}
			#{BAND}
			#{ISINDOOR}
			#{FACTORY}
			#{CITYDISTRICT}
		]]>
	</sqlTemplate>

	<sqlTemplate id="BasestationAndSectorQuery_01_findCityByD" description="根据区县id拿城市">
		<![CDATA[
		 	SELECT
				CITY_NAME,DISTRICT_NAME
			FROM
				dim_district_gis_data
			#{DISTRICT}
		 ]]>
	</sqlTemplate>

	<sqlTemplate id="BasestationAndSectorQuery_02_maxDay" description="基站小区查询最大时间">
		<![CDATA[
		 	SELECT MAX(DAY) FROM dim_sector
		 ]]>
	</sqlTemplate>
	<sqlTemplate id="BasestationAndSectorQuery_01_searchtxtchange" description="搜索框模糊查询">
		<![CDATA[
		 	SELECT
				LONGITUDE_BAIDU,
				LATITUDE_BAIDU,
				BASE_STATN_NAME
			FROM
				dim_sector
			WHERE
				day=#{DAY}
				and BASE_STATN_NAME LIKE '%#{BASESTATNNAME}%'
				AND CITY_NAME = '#{CITYNAME}'
				AND LONGITUDE_BAIDU IS NOT NULL
    			AND LATITUDE_BAIDU IS NOT NULL
			GROUP BY
				LONGITUDE_BAIDU,
				LATITUDE_BAIDU
			LIMIT 10
		 ]]>
	</sqlTemplate>

<sqlTemplate id="SectorComponent_01_dist_mkt_info" description="取某个营服的基站和扇区数据（取2G和4G）">
<![CDATA[
select distinct sector.city_name,sector.area_name,sector.mkt_center_name,sector.base_statn_id,
sector.base_statn_name,sector.bs_vendor,sector.longitude_baidu,sector.latitude_baidu,
sector.sector_id,sector.sector_name,sector.sector_addr,sector.ant_azimuth,sector.longitude,
sector.latitude,sector.cell_id,sector.cell_name,sector.is_indoor,sector.band,
case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 5 end as band_order,
sector.ANT_ELECTRON_ANGLE,sector.ANT_ENGINE_ANGLE,sector.high,sector.ACCEPTSTATUS,
sector.nettype,sector.BSC_ID,sector.TOTAL_DECLINATION_ANGLE,sector.day,alarm.OUTOFSRV
from noce.dim_sector sector left join ( select DISTINCT base_statn_id,alarm_scope,cell_id,bsc_id,OUTOFSRV from noce.frt_bsn_alarm  where OUTOFSRV = 1) alarm
#{2GJOIN}
where day = #{TIME}
  and sector.nettype='#{NETTYPE}'
  and sector.city_name = '#{CITYNAME}'
  and sector.area_name = '#{DISTRICTNAME}'
  and sector.mkt_center_name = '#{MKTCENNAME}'
--  and sector.system_type_or_standard in('#{STANDARD}')
--  and sector.system_type_or_standard != 'TDD'
  #{REGON}
  #{INDOOR}
  #{FACTORY}
  #{BAND}
order by band_order
]]>
</sqlTemplate>

<sqlTemplate id="SectorComponent_02_sqr_mkt_info" description="取得当前中心点指定范围内的基站和扇区数据（取2G和4G）">
<![CDATA[
select distinct sector.city_name,sector.area_name,sector.mkt_center_name,sector.base_statn_id,
sector.base_statn_name,sector.bs_vendor,sector.longitude_baidu,sector.latitude_baidu,
sector.sector_id,sector.sector_name,sector.sector_addr,sector.ant_azimuth,sector.longitude,
sector.latitude,sector.cell_id,sector.cell_name,sector.is_indoor,sector.band,
case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 5 end as band_order,
sector.ANT_ELECTRON_ANGLE,sector.ANT_ENGINE_ANGLE,sector.high,sector.ACCEPTSTATUS,
sector.nettype,sector.BSC_ID,sector.TOTAL_DECLINATION_ANGLE,sector.day,alarm.OUTOFSRV
from noce.dim_sector sector left join ( select DISTINCT base_statn_id,alarm_scope,cell_id,bsc_id,OUTOFSRV from noce.frt_bsn_alarm  where OUTOFSRV = 1) alarm
#{2GJOIN}
where day = #{TIME}
  and sector.nettype='#{NETTYPE}'
  and abs(sector.latitude_baidu-#{LATITUDCENTER})<0.008993649 * #{DIST_KM_H}
  and abs(sector.longitude_baidu-#{LONGITUDCENTER})<0.011808044 * #{DIST_KM_V}
--  and sector.system_type_or_standard in('#{STANDARD}')
--  and sector.system_type_or_standard != 'TDD'
  #{CITY}
  #{DISTRICT}
  #{REGON}
  #{INDOOR}
  #{FACTORY}
  #{BAND}
order by band_order
]]>
</sqlTemplate>

<sqlTemplate id="OSMSectorComponent_01_dist_mkt_info" description="取某个营服的基站和扇区数据（取2G和4G）">
<![CDATA[
select distinct sector.city_name,sector.area_name,sector.mkt_center_name,sector.base_statn_id,
sector.base_statn_name,sector.bs_vendor,sector.longitude_baidu,sector.latitude_baidu,
sector.sector_id,sector.sector_name,sector.sector_addr,sector.ant_azimuth,sector.longitude,
sector.latitude,sector.cell_id,sector.cell_name,sector.is_indoor,sector.band,
case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 5 end as band_order,
sector.ANT_ELECTRON_ANGLE,sector.ANT_ENGINE_ANGLE,sector.high,sector.ACCEPTSTATUS,
sector.nettype,sector.BSC_ID,sector.TOTAL_DECLINATION_ANGLE,sector.day,alarm.OUTOFSRV
from noce.dim_sector sector left join ( select DISTINCT base_statn_id,alarm_scope,cell_id,bsc_id,OUTOFSRV from noce.frt_bsn_alarm  where OUTOFSRV = 1) alarm
#{2GJOIN}
where day = #{TIME}
  and sector.nettype='#{NETTYPE}'
  and sector.city_name = '#{CITYNAME}'
  and sector.area_name = '#{DISTRICTNAME}'
  and sector.mkt_center_name = '#{MKTCENNAME}'
--  and sector.system_type_or_standard in('#{STANDARD}')
--  and sector.system_type_or_standard != 'TDD'
  #{REGON}
  #{INDOOR}
  #{FACTORY}
  #{BAND}
order by band_order
]]>
</sqlTemplate>

<sqlTemplate id="OSMSectorComponent_02_sqr_mkt_info" description="取得当前中心点指定范围内的基站和扇区数据（取2G和4G）">
<![CDATA[
select distinct sector.city_name,sector.area_name,sector.mkt_center_name,sector.base_statn_id,
sector.base_statn_name,sector.bs_vendor,sector.longitude_baidu,sector.latitude_baidu,
sector.sector_id,sector.sector_name,sector.sector_addr,sector.ant_azimuth,sector.longitude,
sector.latitude,sector.cell_id,sector.cell_name,sector.is_indoor,sector.band,
case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 5 end as band_order,
sector.ANT_ELECTRON_ANGLE,sector.ANT_ENGINE_ANGLE,sector.high,sector.ACCEPTSTATUS,
sector.nettype,sector.BSC_ID,sector.TOTAL_DECLINATION_ANGLE,sector.day,alarm.OUTOFSRV
from noce.dim_sector sector left join ( select DISTINCT base_statn_id,alarm_scope,cell_id,bsc_id,OUTOFSRV from noce.frt_bsn_alarm  where OUTOFSRV = 1) alarm
#{2GJOIN}
where day = #{TIME}
  and sector.nettype='#{NETTYPE}'
  and abs(sector.latitude-#{LATITUDCENTER})<0.008993649 * #{DIST_KM_H}
  and abs(sector.longitude-#{LONGITUDCENTER})<0.011808044 * #{DIST_KM_V}
--  and sector.system_type_or_standard in('#{STANDARD}')
--  and sector.system_type_or_standard != 'TDD'
  #{CITY}
  #{DISTRICT}
  #{REGON}
  #{INDOOR}
  #{FACTORY}
  #{BAND}
order by band_order
]]>
</sqlTemplate>

<sqlTemplate id="OpersCompV4_01_gridSector" description="栅格对应的主服务小区">
<![CDATA[
select distinct city_name,area_name,mkt_center_name,base_statn_id,
base_statn_name,bs_vendor,longitude_baidu,latitude_baidu,
sector_id,sector_name,sector_addr,ant_azimuth,longitude,
latitude,cell_id,cell_name,is_indoor,band,
ANT_ELECTRON_ANGLE,ANT_ENGINE_ANGLE,high,ACCEPTSTATUS,
nettype,BSC_ID,TOTAL_DECLINATION_ANGLE,region,day
from noce.dim_sector
where day = (SELECT MAX(DAY) FROM dim_sector)
AND nettype='4G'
AND base_statn_id = #{TOP1BSTID}
AND cell_id = #{TOP1CELLID}
and longitude_baidu is not null
and latitude_baidu is not null
and longitude is not null
and latitude is not null
UNION ALL
select distinct city_name,area_name,mkt_center_name,base_statn_id,
base_statn_name,bs_vendor,longitude_baidu,latitude_baidu,
sector_id,sector_name,sector_addr,ant_azimuth,longitude,
latitude,cell_id,cell_name,is_indoor,band,
ANT_ELECTRON_ANGLE,ANT_ENGINE_ANGLE,high,ACCEPTSTATUS,
nettype,BSC_ID,TOTAL_DECLINATION_ANGLE,region,day
from noce.dim_sector
where day = (SELECT MAX(DAY) FROM dim_sector)
AND nettype='4G'
AND base_statn_id = #{TOP2BSTID}
AND cell_id = #{TOP2CELLID}
and longitude_baidu is not null
and latitude_baidu is not null
and longitude is not null
and latitude is not null
UNION ALL
select distinct city_name,area_name,mkt_center_name,base_statn_id,
base_statn_name,bs_vendor,longitude_baidu,latitude_baidu,
sector_id,sector_name,sector_addr,ant_azimuth,longitude,
latitude,cell_id,cell_name,is_indoor,band,
ANT_ELECTRON_ANGLE,ANT_ENGINE_ANGLE,high,ACCEPTSTATUS,
nettype,BSC_ID,TOTAL_DECLINATION_ANGLE,region,day
from noce.dim_sector
where day = (SELECT MAX(DAY) FROM dim_sector)
AND nettype='4G'
AND base_statn_id = #{TOP3BSTID}
AND cell_id = #{TOP3CELLID}
and longitude_baidu is not null
and latitude_baidu is not null
and longitude is not null
and latitude is not null
]]>
</sqlTemplate>
<sqlTemplate id="TerminalUserQuery_01_HOME_prov" description="归属地（非800、800、归属地三个表格）表格查询(全省)">
<![CDATA[
SELECT a.*,b.CITY_DISPLAY_ORDER from (SELECT
TIME,
cityname,
flow_800m_3g,
ROUND(flow_800m_3g_rate*100,2) flow_800m_3g_rate,
duration_800m_3g,
ROUND(duration_800m_3g_rate*100,2) duration_800m_3g_rate,
flow_800m_4g,
ROUND(flow_800m_4g_rate*100,2) flow_800m_4g_rate,
duration_800m_4g,
ROUND(duration_800m_4g_rate*100,2) duration_800m_4g_rate,
user_4g_800m,
user_800m_all,
flow_800m_all,
duration_800m_all,
flow_none_800m_3g,
ROUND(flow_none_800m_3g_rate*100,2) flow_none_800m_3g_rate,
duration_none_800m_3g,
ROUND(duration_none_800m_3g_rate*100,2) duration_none_800m_3g_rate,
flow_none_800m_4g,
ROUND(flow_none_800m_4g_rate*100,2) flow_none_800m_4g_rate,
duration_none_800m_4g,
ROUND(duration_none_800m_4g_rate*100,2) duration_none_800m_4g_rate,
user_4g_none_800m,
user_none_800m_all,
flow_none_800m_all,
duration_none_800m_all,
flow_3g,
ROUND(flow_3g_rate*100,2) flow_3g_rate,
duration_3g,
ROUND(duration_3g_rate*100,2) duration_3g_rate,
flow_4g,
ROUND(flow_4g_rate*100,2) flow_4g_rate,
duration_4g,
ROUND(duration_4g_rate*100,2) duration_4g_rate,
user_4g,
user_all,
flow_all,
duration_all
from FRT_3G4GFLOW_800M_HOME_W
where
day=#{DAY} ) a LEFT JOIN 
dim_tele_city b
ON a.cityname = b.city_name
UNION ALL 
SELECT a.*, CITY_DISPLAY_ORDER FROM (select
time,
'全省' AS cityname,
sum(flow_800m_3g),
round(avg(flow_800m_3g_rate)*100,2),
sum(duration_800m_3g),
round(avg(duration_800m_3g_rate)*100,2),
sum(flow_800m_4g),
round(avg(flow_800m_4g_rate)*100,2),
sum(duration_800m_4g),
round(avg(duration_800m_4g_rate)*100,2),
sum(user_4g_800m),
sum(user_800m_all),
sum(flow_800m_all),
sum(duration_800m_all),
sum(flow_none_800m_3g),
round(avg(flow_none_800m_3g_rate)*100,2),
sum(duration_none_800m_3g),
round(avg(duration_none_800m_3g_rate)*100,2),
sum(flow_none_800m_4g),
round(avg(flow_none_800m_4g_rate)*100,2),
sum(duration_none_800m_4g),
round(avg(duration_none_800m_4g_rate)*100,2),
sum(user_4g_none_800m),
sum(user_none_800m_all),
sum(flow_none_800m_all),
sum(duration_none_800m_all),
sum(flow_3g),
round(avg(flow_3g_rate)*100,2),
sum(duration_3g),
round(avg(duration_3g_rate)*100,2),
sum(flow_4g),
round(avg(flow_4g_rate)*100,2),
sum(duration_4g),
round(avg(duration_4g_rate)*100,2),
sum(user_4g),
sum(user_all),
sum(flow_all),
sum(duration_all)
from FRT_3G4GFLOW_800M_HOME_W
where
day=#{DAY}
group by time) a
JOIN (select '全省' AS city_name,22 AS CITY_DISPLAY_ORDER FROM dim_tele_city WHERE CITY_NAME = '广东') b
ON a.cityname = b.city_name
ORDER BY CITY_DISPLAY_ORDER
]]>
</sqlTemplate>
<sqlTemplate id="TerminalUserQuery_02_HOME_city" description="归属地表格（非800、800、归属地三个表格）查询(某个地市)">
<![CDATA[
SELECT
TIME,
cityname,
flow_800m_3g,
ROUND(flow_800m_3g_rate*100,2) flow_800m_3g_rate,
duration_800m_3g,
ROUND(duration_800m_3g_rate*100,2) duration_800m_3g_rate,
flow_800m_4g,
ROUND(flow_800m_4g_rate*100,2) flow_800m_4g_rate,
duration_800m_4g,
ROUND(duration_800m_4g_rate*100,2) duration_800m_4g_rate,
user_4g_800m,
user_800m_all,
flow_800m_all,
duration_800m_all,
flow_none_800m_3g,
ROUND(flow_none_800m_3g_rate*100,2) flow_none_800m_3g_rate,
duration_none_800m_3g,
ROUND(duration_none_800m_3g_rate*100,2) duration_none_800m_3g_rate,
flow_none_800m_4g,
ROUND(flow_none_800m_4g_rate*100,2) flow_none_800m_4g_rate,
duration_none_800m_4g,
ROUND(duration_none_800m_4g_rate*100,2) duration_none_800m_4g_rate,
user_4g_none_800m,
user_none_800m_all,
flow_none_800m_all,
duration_none_800m_all,
flow_3g,
ROUND(flow_3g_rate*100,2) flow_3g_rate,
duration_3g,
ROUND(duration_3g_rate*100,2) duration_3g_rate,
flow_4g,
ROUND(flow_4g_rate*100,2) flow_4g_rate,
duration_4g,
ROUND(duration_4g_rate*100,2) duration_4g_rate,
user_4g,
user_all,
flow_all,
duration_all
from FRT_3G4GFLOW_800M_HOME_W
where
day=#{DAY}
AND cityname='#{CITY}'
]]>
</sqlTemplate>
<sqlTemplate id="TerminalUserQuery_03_VISIT_prov" description="访问地（非800、800、访问地三个表格）表格查询(全省)">
<![CDATA[
SELECT a.*,b.CITY_DISPLAY_ORDER from (SELECT
TIME,
cityname,
flow_800m_3g,
ROUND(flow_800m_3g_rate*100,2) flow_800m_3g_rate,
duration_800m_3g,
ROUND(duration_800m_3g_rate*100,2) duration_800m_3g_rate,
flow_800m_4g,
ROUND(flow_800m_4g_rate*100,2) flow_800m_4g_rate,
duration_800m_4g,
ROUND(duration_800m_4g_rate*100,2) duration_800m_4g_rate,
user_4g_800m,
user_800m_all,
flow_800m_all,
duration_800m_all,
flow_none_800m_3g,
ROUND(flow_none_800m_3g_rate*100,2) flow_none_800m_3g_rate,
duration_none_800m_3g,
ROUND(duration_none_800m_3g_rate*100,2) duration_none_800m_3g_rate,
flow_none_800m_4g,
ROUND(flow_none_800m_4g_rate*100,2) flow_none_800m_4g_rate,
duration_none_800m_4g,
ROUND(duration_none_800m_4g_rate*100,2) duration_none_800m_4g_rate,
user_4g_none_800m,
user_none_800m_all,
flow_none_800m_all,
duration_none_800m_all,
flow_3g,
ROUND(flow_3g_rate*100,2) flow_3g_rate,
duration_3g,
ROUND(duration_3g_rate*100,2) duration_3g_rate,
flow_4g,
ROUND(flow_4g_rate*100,2) flow_4g_rate,
duration_4g,
ROUND(duration_4g_rate*100,2) duration_4g_rate,
user_4g,
user_all,
flow_all,
duration_all
from FRT_3G4GFLOW_800M_CITY_W
where
day=#{DAY} ) a LEFT JOIN 
dim_tele_city b
ON a.cityname = b.city_name
UNION ALL 
SELECT a.*, CITY_DISPLAY_ORDER FROM (select
time,
'全省' AS cityname,
sum(flow_800m_3g),
round(avg(flow_800m_3g_rate)*100,2),
sum(duration_800m_3g),
round(avg(duration_800m_3g_rate)*100,2),
sum(flow_800m_4g),
round(avg(flow_800m_4g_rate)*100,2),
sum(duration_800m_4g),
round(avg(duration_800m_4g_rate)*100,2),
sum(user_4g_800m),
sum(user_800m_all),
sum(flow_800m_all),
sum(duration_800m_all),
sum(flow_none_800m_3g),
round(avg(flow_none_800m_3g_rate)*100,2),
sum(duration_none_800m_3g),
round(avg(duration_none_800m_3g_rate)*100,2),
sum(flow_none_800m_4g),
round(avg(flow_none_800m_4g_rate)*100,2),
sum(duration_none_800m_4g),
round(avg(duration_none_800m_4g_rate)*100,2),
sum(user_4g_none_800m),
sum(user_none_800m_all),
sum(flow_none_800m_all),
sum(duration_none_800m_all),
sum(flow_3g),
round(avg(flow_3g_rate)*100,2),
sum(duration_3g),
round(avg(duration_3g_rate)*100,2),
sum(flow_4g),
round(avg(flow_4g_rate)*100,2),
sum(duration_4g),
round(avg(duration_4g_rate)*100,2),
sum(user_4g),
sum(user_all),
sum(flow_all),
sum(duration_all)
from FRT_3G4GFLOW_800M_CITY_W
where
day=#{DAY}
group by time) a
JOIN (select '全省' AS city_name,22 AS CITY_DISPLAY_ORDER FROM dim_tele_city WHERE CITY_NAME = '广东') b
ON a.cityname = b.city_name
ORDER BY CITY_DISPLAY_ORDER
]]>
</sqlTemplate>
<sqlTemplate id="TerminalUserQuery_04_VISIT_city" description="访问地表格（非800、800、访问地三个表格）查询(某个地市)">
<![CDATA[
SELECT
TIME,
cityname,
flow_800m_3g,
ROUND(flow_800m_3g_rate*100,2) flow_800m_3g_rate,
duration_800m_3g,
ROUND(duration_800m_3g_rate*100,2) duration_800m_3g_rate,
flow_800m_4g,
ROUND(flow_800m_4g_rate*100,2) flow_800m_4g_rate,
duration_800m_4g,
ROUND(duration_800m_4g_rate*100,2) duration_800m_4g_rate,
user_4g_800m,
user_800m_all,
flow_800m_all,
duration_800m_all,
flow_none_800m_3g,
ROUND(flow_none_800m_3g_rate*100,2) flow_none_800m_3g_rate,
duration_none_800m_3g,
ROUND(duration_none_800m_3g_rate*100,2) duration_none_800m_3g_rate,
flow_none_800m_4g,
ROUND(flow_none_800m_4g_rate*100,2) flow_none_800m_4g_rate,
duration_none_800m_4g,
ROUND(duration_none_800m_4g_rate*100,2) duration_none_800m_4g_rate,
user_4g_none_800m,
user_none_800m_all,
flow_none_800m_all,
duration_none_800m_all,
flow_3g,
ROUND(flow_3g_rate*100,2) flow_3g_rate,
duration_3g,
ROUND(duration_3g_rate*100,2) duration_3g_rate,
flow_4g,
ROUND(flow_4g_rate*100,2) flow_4g_rate,
duration_4g,
ROUND(duration_4g_rate*100,2) duration_4g_rate,
user_4g,
user_all,
flow_all,
duration_all
from FRT_3G4GFLOW_800M_CITY_W
where
day=#{DAY}
AND cityname='#{CITY}'
]]>
</sqlTemplate>
 <sqlTemplate id="TerminalUserQuery_05_maxDay" description="查询页面的默认时间">
  <![CDATA[
 SELECT MAX(DAY) FROM frt_3g4gflow_800m_home_w
 ]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTest_08_polygonGis" description="取某区县或者某营服弱区轮廓数据(包含提示信息)">
<![CDATA[
SELECT 
object_id,
city_id,
country_id,
mktcenter_id,
PC_OrderNo_TOT,
LONGITUDE_MID_BaiDu,
latitude_mid_baidu,
LTE_TO_3G_TOT,
User_4G_AVG,
round(flow_4g_tot,2) flow_4g_tot,
round(CE_GOOD_RATIO_AVG*100,2) CE_GOOD_RATIO_AVG,
CASE do_type
 WHEN 1 THEN '工程'
 WHEN 2 THEN '维护'
 WHEN 3 THEN '优化'
 WHEN 4 THEN '规划'
ELSE '未知' END AS do_type,
SECTOR_SET,
enodeb_id,
CELL_ID,
enodebname,
gis_data,
POOR_GRID_AREA,
dx_rsrp_sum/dx_rsrp_count as dx_rsrp,
dx_rsrp_105_count/dx_rsrp_count as dx_cover,
yd_rsrp_sum/yd_rsrp_count as yd_rsrp,
yd_rsrp_105_count/yd_rsrp_count as yd_cover,
lt_rsrp_sum/lt_rsrp_count as lt_rsrp,
lt_rsrp_105_count/lt_rsrp_count as lt_cover,
month_relate
FROM FRT_AGPS_POOR_COVERAGE_D
WHERE DAY = #{DAY}
AND TYPE = 0
AND city='#{CITY}'
AND country = '#{COUNTRY}'
#{MKTCENTER}
AND gis_data is not null
order by PC_OrderNo_TOT desc
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_15_mainSectorList" description="取top扇区数据（栅格top3或者弱区top5）">
<![CDATA[
select distinct city_name,area_name,mkt_center_name,base_statn_id,
base_statn_name,bs_vendor,longitude_baidu,latitude_baidu,
sector_id,sector_name,sector_addr,ant_azimuth,longitude,
latitude,cell_id,cell_name,is_indoor,band,
ANT_ELECTRON_ANGLE,ANT_ENGINE_ANGLE,high,ACCEPTSTATUS,
nettype,BSC_ID,TOTAL_DECLINATION_ANGLE,region,day
from noce.dim_sector
where day = #{DAY}
AND nettype='4G'
AND base_statn_id*1000000+cell_id in (#{BSTIDANDCELLID})
-- AND cell_id = 21
and longitude_baidu is not null
and latitude_baidu is not null
and longitude is not null
and latitude is not null order by field(base_statn_id*1000000+cell_id,#{BSTIDANDCELLID})
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_09_areaTable" description="取区域明细数据（区县或者营服）">
<![CDATA[
SELECT 
g.object_id,
g.city,
g.country,
g.mktcenter,
g.address,
g.enodeb_id,
g.CELL_ID,
g.CELL_NAME,
g.CELL_STATE,
g.TOP5_SECTOR_SET,
g.SECTOR_SET,
g.ALARM_NUMS,
g.ALARM_CELLS,
g.NR_ALARM_CELLS,
CASE g.do_type
 WHEN 1 THEN '工程'
 WHEN 2 THEN '维护'
 WHEN 3 THEN '优化'
 WHEN 4 THEN '规划'
ELSE '未知' END AS do_type,
case   
 when f.order_id is null then ''  
 else '是' END  ord,
g.lte_to_3g_tot,
g.lte_to_3g_orderno,
round(g.flow_4g_tot,2) flow_4g_tot,
g.flow_4g_orderno,
g.user_4g_avg,
g.user_4g_orderno,
round(g.CE_GOOD_RATIO_AVG*100,2) CE_GOOD_RATIO_AVG,
g.ce_good_ratio_orderno,
g.ALL_GRID_NUMS,
g.POOR_GRID_NUMS_OrderNo,
g.POOR_GRID_AREA,
g.ALL_GRID_AREA,
g.LONGITUDE_MID_BaiDu,
g.LATITUDE_MID_BaiDu,
g.BELONG_AREA_ID,
g.GIS_DATA,
round(g.pc_orderno_tot,2) pc_orderno_tot,
g.day,
f.order_id
from (
SELECT 
*
FROM FRT_AGPS_POOR_COVERAGE_D
WHERE DAY = #{DAY}
AND TYPE = 0
AND city='#{CITY}'
AND country = '#{COUNTRY}'
#{MKTCENTER}
#{DO_TYPE}
AND grid_type = 20
AND gis_data is not null
) as g LEFT JOIN ALT_AGPS_POOR_COVERAGE_D as f ON (g.day=f.day and g.OBJECT_ID =f.object_id and  g.grid_type=f.grid_type)
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_09_02_areaTable" description="取区域明细数据（区县或者营服）">
	<![CDATA[
SELECT
g.object_id,
g.city,
g.country,
g.mktcenter,
g.address,
g.enodeb_id,
g.CELL_ID,
g.CELL_NAME,
g.CELL_STATE,
g.TOP5_SECTOR_SET,
g.SECTOR_SET,
g.ALARM_NUMS,
g.ALARM_CELLS,
g.NR_ALARM_CELLS,
CASE g.do_type
WHEN 1 THEN '工程'
WHEN 2 THEN '维护'
WHEN 3 THEN '优化'
WHEN 4 THEN '规划'
ELSE '未知' END AS do_type,
case
when f.order_id is null then ''
else '是' END  ord,
g.lte_to_3g_tot,
g.lte_to_3g_orderno,
round(g.flow_4g_tot,2) flow_4g_tot,
g.flow_4g_orderno,
g.user_4g_avg,
g.user_4g_orderno,
round(g.CE_GOOD_RATIO_AVG*100,2) CE_GOOD_RATIO_AVG,
g.ce_good_ratio_orderno,
g.ALL_GRID_NUMS,
g.POOR_GRID_NUMS_OrderNo,
g.POOR_GRID_AREA,
g.ALL_GRID_AREA,
g.LONGITUDE_MID_BaiDu,
g.LATITUDE_MID_BaiDu,
g.BELONG_AREA_ID,
g.GIS_DATA,
round(g.pc_orderno_tot,2) pc_orderno_tot,
g.day,
f.order_id
from (
SELECT
*
FROM FRT_AGPS_POOR_COVERAGE_D
WHERE DAY = #{DAY}
AND TYPE = 0
AND city='#{CITY}'
#{COUNTRY}
#{MKTCENTER}
#{DO_TYPE}
AND grid_type = 20
AND gis_data is not null
) as g LEFT JOIN ALT_AGPS_POOR_COVERAGE_D as f ON (g.day=f.day and g.OBJECT_ID =f.object_id and  g.grid_type=f.grid_type)
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_09_03_areaTableExport" description="取区域明细数据（区县或者营服）,导出">
<![CDATA[
SELECT
g.object_id,
g.city,
g.country,
g.mktcenter,
g.address,
g.enodeb_id,
g.CELL_ID,
g.CELL_NAME,
g.CELL_STATE,
g.TOP5_SECTOR_SET,
g.SECTOR_SET,
g.ALARM_NUMS,
g.ALARM_CELLS,
g.NR_ALARM_CELLS,
CASE g.do_type
WHEN 1 THEN '工程'
WHEN 2 THEN '维护'
WHEN 3 THEN '优化'
WHEN 4 THEN '规划'
ELSE '未知' END AS do_type,
case
when f.order_id is null then ''
else '是' END  ord,
g.lte_to_3g_tot,
g.lte_to_3g_orderno,
round(g.flow_4g_tot,2) flow_4g_tot,
g.flow_4g_orderno,
g.user_4g_avg,
g.user_4g_orderno,
round(g.CE_GOOD_RATIO_AVG*100,2) CE_GOOD_RATIO_AVG,
g.ce_good_ratio_orderno,
g.ALL_GRID_NUMS,
g.POOR_GRID_NUMS_OrderNo,
g.POOR_GRID_AREA,
g.ALL_GRID_AREA,
g.BELONG_AREA_ID,
round(g.pc_orderno_tot,2) pc_orderno_tot,
g.day,
f.order_id
from (
SELECT
*
FROM FRT_AGPS_POOR_COVERAGE_D
WHERE DAY = #{DAY}
AND TYPE = 0
AND city='#{CITY}'
#{COUNTRY}
#{MKTCENTER}
#{DO_TYPE}
AND grid_type = 20
AND gis_data is not null
) as g LEFT JOIN ALT_AGPS_POOR_COVERAGE_D as f ON (g.day=f.day and g.OBJECT_ID =f.object_id and  g.grid_type=f.grid_type)
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_09_jizhanTable" description="取基站Table（区县或者营服）">
<![CDATA[
SELECT 
g.ENODEB_NAME,
g.city,
g.country,
g.mktcenter,
g.ENODEB_ID,
g.CELL_ID,
g.CELL_NAME,
CASE g.BELONG_AREA_ID
 WHEN 1 THEN '市区'
 WHEN 2 THEN '县城'
 WHEN 3 THEN '乡镇'
 WHEN 4 THEN '农村'
ELSE '未知' END AS BELONG_AREA_ID,
g.ALARM_LEVEL,
g.ALARM_NUMS,
g.CELL_STATE,
g.POOR_COVERAGE_COUNT,
g.NB_POOR_COVERAGE_COUNT,
g.LTE_TO_3G_TOT,
g.Flow_4G_TOT,
g.User_4G_AVG,
g.CE_GOOD_RATIO_AVG,
g.GRID_NUMS,
g.POOR_COVERAGE_SET ,
g.NB_POOR_COVERAGE_SET, 
concat(g.ENODEB_ID,',',g.CELL_ID)as sector_set,
g.longitude_min_baidu,
g.latitude_min_baidu,
g.longitude_mid_baidu,
g.latitude_mid_baidu,
g.longitude_max_baidu,
g.latitude_max_baidu,
g.day

FROM FRT_AGPS_PC_ENB_D as g
WHERE DAY = #{DAY}
AND city='#{CITY}'
AND country = '#{COUNTRY}'
#{MKTCENTER}


]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_09_jizhanTable_dc" description="取基站Table（区县或者营服）">
<![CDATA[
SELECT 
g.ENODEB_NAME,
g.city,
g.country,
g.mktcenter,
g.ENODEB_ID,
g.CELL_ID,
g.CELL_NAME,
CASE g.BELONG_AREA_ID
 WHEN 1 THEN '市区'
 WHEN 2 THEN '县城'
 WHEN 3 THEN '乡镇'
 WHEN 4 THEN '农村'
ELSE '未知' END AS BELONG_AREA_ID,
g.ALARM_LEVEL,
g.ALARM_NUMS,
g.CELL_STATE,
g.POOR_COVERAGE_COUNT,
g.NB_POOR_COVERAGE_COUNT,
g.LTE_TO_3G_TOT,
g.Flow_4G_TOT,
g.User_4G_AVG,
g.CE_GOOD_RATIO_AVG,
g.GRID_NUMS,
g.POOR_COVERAGE_SET ,
g.NB_POOR_COVERAGE_SET, 
concat(g.ENODEB_ID,',',g.CELL_ID)as sector_set

FROM FRT_AGPS_PC_ENB_D as g
WHERE DAY = #{DAY}
AND city='#{CITY}'
AND country = '#{COUNTRY}'
#{MKTCENTER}


]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_16_bstSearchByID" description="根据基站名称模糊搜索">
<![CDATA[
SELECT
BASE_STATN_ID,
BASE_STATN_NAME,
CELL_ID,
CELL_NAME,
LONGITUDE_BAIDU,
LATITUDE_BAIDU
FROM
	dim_sector
WHERE	DAY = #{DAY}
AND BASE_STATN_id =#{BSTID}
AND LONGITUDE_BAIDU IS NOT NULL
AND LATITUDE_BAIDU IS NOT NULL
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_17_cellPositioning" description="根据基站id和小区id进行定位">
<![CDATA[
SELECT
BASE_STATN_ID,
BASE_STATN_NAME,
CELL_ID,
CELL_NAME,
city_name,
ant_azimuth,
band_mapping,
LONGITUDE_BAIDU,
LATITUDE_BAIDU
FROM
	dim_sector
WHERE	DAY = #{DAY}
AND BASE_STATN_id = #{BSTID}
AND CELL_ID = #{CELLID}
AND LONGITUDE_BAIDU IS NOT NULL
AND LATITUDE_BAIDU IS NOT NULL
#{CITY}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_18_cellPositioning" description="根据基站id和小区id进行定位">
	<![CDATA[
SELECT
BASE_STATN_ID,
BASE_STATN_NAME,
CELL_ID,
CELL_NAME,
LONGITUDE_BAIDU,
LATITUDE_BAIDU
FROM
dim_sector
WHERE	DAY = #{DAY}
AND BASE_STATN_id = #{BSTID}
AND CELL_ID = #{CELLID}
AND CITY_NAME=#{CITYNAME}
AND LONGITUDE_BAIDU IS NOT NULL
AND LATITUDE_BAIDU IS NOT NULL
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTest_18_allConcernArea" description="查询关注区域列表">
<![CDATA[
SELECT
id,
area_name,
area_type,
creator,
create_time,
city,
handle_description,
'<img src="../js/IntelligentRoadTest/images/lineClick.png"/>' as sevenrsrp,
round(rsrp,2) rsrp,
round(cover*100,2) cover,
recent_base_statn_id,
recent_cell_id,
recent_cell_name,
gis_data_baidu,
max_longitude_baidu,
max_latitude_baidu,
min_longitude_baidu,
min_latitude_baidu,
'<img class="concernPadding" src="../js/IntelligentRoadTest/images/edit.png"/>' AS concernEdit,
'<img class="concernPadding" src="../js/IntelligentRoadTest/images/delete.png"/>' AS concernEditDelete
FROM dm_user_concern_area
where 1=1
#{CITY}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_18_allConcernArea_02" description="查询关注区域列表V2">
    <![CDATA[
SELECT
id,
area_name,
area_type,
creator,
create_time,
city,
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
handle_description,
round(rsrp,2) rsrp,
CONCAT(round(cover*100,2),'%') cover,
recent_base_statn_id,
recent_cell_id,
recent_cell_name,
gis_data_baidu,
max_longitude_baidu,
max_latitude_baidu,
min_longitude_baidu,
min_latitude_baidu
FROM dm_user_concern_area
where 1=1
#{CITY}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_18_allConcernArea_export_02" description="查询关注区域列表导出V2">
<![CDATA[
SELECT
id,
area_name,
area_type,
creator,
create_time,
city,
handle_description,
round(rsrp,2) rsrp,
CONCAT(round(cover*100,2),'%') cover,
recent_base_statn_id,
recent_cell_id,
recent_cell_name
FROM dm_user_concern_area
WHERE CITY='#{CITY}'
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_19_searchConcernArea" description="关注区域列表模糊搜索">
<![CDATA[
SELECT
id,
area_name,
area_type,
creator,
create_time,
city,
handle_description,
'<img src="../js/IntelligentRoadTest/images/lineClick.png"/>' as sevenrsrp,
round(rsrp,2) rsrp,
round(cover*100,2) cover,
recent_base_statn_id,
recent_cell_id,
recent_cell_name,
gis_data_baidu,
max_longitude_baidu,
max_latitude_baidu,
min_longitude_baidu,
min_latitude_baidu,
'<img class="concernPadding" src="../js/IntelligentRoadTest/images/edit.png"/>' AS concernEdit,
'<img class="concernPadding" src="../js/IntelligentRoadTest/images/delete.png"/>' AS concernEditDelete
FROM dm_user_concern_area
where area_name like '%#{NAME}%'
#{CITY}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_19_ConcernAreaRecentCell" description="匹配关注区域最近的小区">
<![CDATA[
select BASE_STATN_ID,CELL_ID,CELL_NAME,abs(LONGITUDE_BAIDU-#{MIDLNG})+abs(LATITUDE_BAIDU-#{MIDLAT}) as dis
from dim_sector
where day =(select max(day) from dim_sector)
and CITY_ID=#{CITYID}
and LONGITUDE_BAIDU is not null
and LATITUDE_BAIDU is not null
AND NETTYPE = '4G'
order by dis
limit 1
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_19_ConcernAreaRecentCell" description="匹配关注区域最近的小区">
	<![CDATA[
select BASE_STATN_ID,CELL_ID,CELL_NAME,abs(LONGITUDE_BAIDU-#{MIDLNG})+abs(LATITUDE_BAIDU-#{MIDLAT}) as dis
from dim_sector
where day =(select max(day) from dim_sector)
and LONGITUDE_BAIDU is not null
and LATITUDE_BAIDU is not null
AND NETTYPE = '4G'
order by dis
limit 5
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTest_10_polygonTable" description="取单个弱区明细数据">
<![CDATA[
SELECT 
day,
object_id,
enodebname,
address,
enodeb_id,
alarm_nums,
alarm_cells,
nr_alarm_cells,
CASE do_type
 WHEN 1 THEN '工程'
 WHEN 2 THEN '维护'
 WHEN 3 THEN '优化'
 WHEN 4 THEN '规划'
ELSE '未知' END AS do_type,
city,
city_id,
country,
country_id,
mktcenter,
mktcenter_id,
lte_to_3g_tot,
lte_to_3g_orderno,
round(flow_4g_tot,2) flow_4g_tot,
flow_4g_orderno,
round(CE_GOOD_RATIO_AVG*100,2) CE_GOOD_RATIO_AVG,
ce_good_ratio_orderno,
user_4g_avg,
user_4g_orderno,
pc_orderno_tot,
longitude_min_baidu,
latitude_min_baidu,
longitude_mid_baidu,
latitude_mid_baidu,
longitude_max_baidu,
latitude_max_baidu,
belong_area_id,
sector_set,
gis_data
FROM FRT_AGPS_POOR_COVERAGE_D
WHERE DAY = #{DAY}
AND TYPE = 0
AND city='#{CITY}'
AND country = '#{COUNTRY}'
and object_id = #{OBJECTID}
AND grid_type = 20
AND gis_data is not null
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_11_alarmTable" description="取单个扇区告警表格数据">
<![CDATA[
SELECT 
day,-- 日期
base_statn_id, -- 基站ID
CELL_ID, -- 小区ID
FACTORY, -- 厂家
ALARM_TIME, -- 告警时间
CLEAR_TIME, -- 告警恢复时间
ALARM_LEVEL, -- 告警级别
ISRECOVER, -- 是否恢复
OUTOFSRV, -- 是否断站退服
PROB_CAUSE, -- 告警内容 
ALARM_SCOPE -- 告警范围
FROM FRT_BSN_ALARM_HIS_D 
WHERE DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
AND base_statn_id = #{BSTID}
#{CELLID}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_13_KPITable" description="取单个扇区KPI表格数据">
<![CDATA[
SELECT 
day,
enodebid,
CELLID, -- 小区ID
cell_name,
round(ERAB_SUCC_RATE*100,2) ERAB_SUCC_RATE, -- E-RAB建立成功率(%)
round(ERAB_DROP_RATE*100,2) ERAB_DROP_RATE, -- E-RAB掉线率(%)
round(RRCCON_SUCCRATE*100,2) RRCCON_SUCCRATE, -- RRC连接建立成功率(%)
round(SWCHSF_SUCC_RATE*100,2) SWCHSF_SUCC_RATE, -- 同频切换成功率(%)
round(SWCHAF_SUCC_RATE*100,2) SWCHAF_SUCC_RATE, -- 异频切换成功率(%)
round(UP_PRB_USERATE*100,2) UP_PRB_USERATE, -- 上行PRB资源利用率（业务信息）
round(DW_PRB_USERATE*100,2) DW_PRB_USERATE, -- 下行PRB平均利用率(%)
Counter0003, -- 最大RRC连接用户数
round((PDCH_DWFLOW+PDCH_UPFLOW),2) as PDCH_FLOW -- PDCP层流量(MB)
FROM FRT_WIRELESS_KPI_STAT_D
WHERE DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
AND ENODEBID = #{BSTID}
#{CELLID}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_12_polygonAlarmTable" description="取弱区主服务小区（top5）告警表格数据">
<![CDATA[
SELECT 
day,-- 日期
base_statn_id, -- 基站ID
CELL_ID, -- 小区ID
FACTORY, -- 厂家
RECTIME, -- 接收告警时间
ALARM_TIME, -- 告警时间
CLEAR_TIME, -- 告警恢复时间
ALARM_LEVEL, -- 告警级别
ISRECOVER, -- 是否恢复
OUTOFSRV, -- 是否断站退服
PROB_CAUSE, -- 告警内容 
ALARM_SCOPE -- 告警范围
FROM FRT_BSN_ALARM_HIS_D 
WHERE DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
AND base_statn_id*1000000+cell_id in (#{BSTIDANDCELLID})
AND ALARM_SCOPE = 'CELL'
AND OUTOFSRV = 1
UNION ALL
SELECT 
day,-- 日期
base_statn_id, -- 基站ID
CELL_ID, -- 小区ID
FACTORY, -- 厂家
RECTIME, -- 接收告警时间
ALARM_TIME, -- 告警时间
CLEAR_TIME, -- 告警恢复时间
ALARM_LEVEL, -- 告警级别
ISRECOVER, -- 是否恢复
OUTOFSRV, -- 是否断站退服
PROB_CAUSE, -- 告警内容 
ALARM_SCOPE -- 告警范围
FROM FRT_BSN_ALARM_HIS_D 
WHERE DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
AND base_statn_id in (#{BSTID})
AND ALARM_SCOPE = 'BASE_STATION'
AND OUTOFSRV = 1
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_14_polygonKPITable" description="取弱区主服务小区（top5）KPI表格数据">
<![CDATA[
SELECT 
DAY,
enodebid,
CELLID, -- 小区ID
cell_name,
round(ERAB_SUCC_RATE*100,2) ERAB_SUCC_RATE, -- E-RAB建立成功率(%)
round(ERAB_DROP_RATE*100,2) ERAB_DROP_RATE, -- E-RAB掉线率(%)
round(RRCCON_SUCCRATE*100,2) RRCCON_SUCCRATE, -- RRC连接建立成功率(%)
round(SWCHSF_SUCC_RATE*100,2) SWCHSF_SUCC_RATE, -- 同频切换成功率(%)
round(SWCHAF_SUCC_RATE*100,2) SWCHAF_SUCC_RATE, -- 异频切换成功率(%)
round(UP_PRB_USERATE*100,2) UP_PRB_USERATE, -- 上行PRB资源利用率（业务信息）
round(DW_PRB_USERATE*100,2) DW_PRB_USERATE, -- 下行PRB平均利用率(%)
Counter0003, -- 最大RRC连接用户数
round((PDCH_DWFLOW+PDCH_UPFLOW),2) as PDCH_FLOW -- PDCP层流量(MB)
FROM FRT_WIRELESS_KPI_STAT_D
WHERE DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
AND ENODEBID*1000000+cellid in (#{BSTIDANDCELLID})
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTest_18_dtTableList" description="路测列表表格">
<![CDATA[
SELECT
	id,
	dt_name,
	date_format(dt_time, '%Y-%m-%d') dt_time,
	date_format(create_time, '%Y-%m-%d') create_time,
	creator,
	city,
	'描点' AS circle,
	'栅格' AS grid,
	'下载' AS fileupload,
CASE WHEN creator ='#{USERNAME}'
THEN '<img class="concernPadding" src="../js/IntelligentRoadTest/images/delete.png"/>'
else '' END isCanDelete,
center_longitude_baidu,
center_latgitude_baidu
FROM
	user_dt_list
WHERE 1=1
and is_read = 0
#{CITY}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_18_dtTableList_export" description="路测列表表格导出">
<![CDATA[
SELECT
id,
dt_name,
date_format(dt_time, '%Y-%m-%d') dt_time,
date_format(create_time, '%Y-%m-%d') create_time,
creator,
city
FROM
user_dt_list
WHERE 1=1
and is_read = 0
#{CITY}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_18_dtTableListSearch" description="路测列表模糊查询">
<![CDATA[
SELECT
	id,
	dt_name,
	date_format(dt_time, '%Y-%m-%d') dt_time,
	date_format(create_time, '%Y-%m-%d') create_time,
	creator,
	city,
	'描点' AS circle,
	'栅格' AS grid,
	'下载' AS fileupload,
CASE WHEN creator ='#{USERNAME}'
THEN '<img class="concernPadding" src="../js/IntelligentRoadTest/images/delete.png"/>'
else '' END isCanDelete,
center_longitude_baidu,
center_latgitude_baidu
FROM
	user_dt_list
WHERE 1=1
and is_read = 0
#{CITY}
 and dt_name like '%#{NAME}%'
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_19_dtDetailCircle" description="路测描点数据">
<![CDATA[
SELECT
	longitude_baidu,
	latitude_baidu,
	round(avg(main_rsrp),2) main_rsrp,
	GROUP_CONCAT(main_enodedid_cellid) sector,
	remark
FROM
	user_dt_detail
WHERE	dt_id = #{DTID}
GROUP BY longitude_baidu,latitude_baidu
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_19_dmPointDetailCircle" description="路测描点数据">
	<![CDATA[
SELECT
lng_baidu AS longitude_baidu ,
lat_baidu AS  latitude_baidu,
ROUND(AVG(VALUE),2) VALUE,
remark
FROM
dm_custom_area_detail
WHERE	custom_area_id = #{DMID}
GROUP BY lng_baidu,lat_baidu
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_20_dtDetailGrid" description="路测栅格数据">
<![CDATA[
SELECT
	grid_num,
	avg(longitude_baidu) longitude_baidu,
	avg(latitude_baidu) latitude_baidu,
	round(avg(main_rsrp),2) main_rsrp,
	GROUP_CONCAT(main_enodedid_cellid) sector
FROM
	user_dt_detail
WHERE	dt_id = #{DTID}
GROUP BY grid_num
]]>
</sqlTemplate>


<sqlTemplate id="SectorExpandRecommend_sqr_mkt_info" description="根据查询条件获取到满足扩容条件的基站和扇区数据（取2G和4G）">
<![CDATA[
SELECT distinct sector.city_name,sector.area_name,sector.mkt_center_name,sector.base_statn_id,
sector.base_statn_name,sector.bs_vendor,sector.longitude_baidu,sector.latitude_baidu,
sector.sector_id,sector.sector_name,sector.sector_addr,sector.ant_azimuth,sector.longitude,
sector.latitude,sector.cell_id,sector.cell_name,sector.is_indoor,sector.band,
sector.ANT_ELECTRON_ANGLE,sector.ANT_ENGINE_ANGLE,sector.high,sector.ACCEPTSTATUS,
sector.nettype,sector.BSC_ID,sector.TOTAL_DECLINATION_ANGLE,sector.day, b.total_days
FROM (select * from FRT_CELL_EXT_W where day = #{TIME} and total_days >= 6) as b, (select * from noce.dim_sector as sector 
where day = (select max(day) from noce.dim_sector) 
and nettype = '#{NETTYPE}'
	#{CITY}
	#{DISTRICT}
	#{REGON}
	#{INDOOR}
	#{FACTORY}
	#{BAND}
 ) as sector 
WHERE 
   sector.base_statn_id = b.ENODEBID
  and sector.cell_id = b.cellid
  ORDER BY b.total_days desc
  #{LIMIT_TYPE}
]]>
</sqlTemplate>

<sqlTemplate id="SectorExpandRecommend_seoterTable" description="取对应选项的扩容小区基站数据(用于表格显示)">
<![CDATA[
select * from (
SELECT    
				a.CITY_NAME,
				a.BASE_STATN_ID,
				a.BASE_STATN_NAME,
				a.CELL_ID,
				a.CELL_NAME,
				b.band_width,
				b.total_days,
				case 
				when
					 c.ENODEBID != ''  
				then 
					'<input type="checkBox" checked ="checked"  onclick="addData(this)" />'
				else 
					'<input type="checkBox" onclick="addData(this)" />' 
				end  checkbox
			FROM
				 (select * from FRT_CELL_EXT_W  where total_days >= 6
			AND 
				day =#{DAY} #{CITY}  #{LIKECONDITION} )as b
      JOIN (select * from dim_sector where day = (select max(day) from noce.dim_sector) and NETTYPE = #{NETTYPE}
      and longitude_baidu is not null
		and latitude_baidu is not null
      ) as a
ON  a.BASE_STATN_ID = b.ENODEBID and a.CELL_ID = b.cellid
LEFT JOIN (select * from sectorexpandrecommend_order_info  where username = '#{USERNAME}')as c
		on
			a.BASE_STATN_ID = c.ENODEBID and a.CELL_ID = c.CELLID 
		where 
		   1=1
		   	#{CITYNAME}
			#{DISTRICT}
			#{REGION}
			#{BAND}
			#{ISINDOOR}
			#{FACTORY}
			#{LIMIT_TYPE}
		)  as temp
]]>
</sqlTemplate>

<sqlTemplate id="SectorExpandRecommend_seoterTable_withoutInput" description="取对应选项的扩容小区基站数据(用于表格导出)">
<![CDATA[
select * from (
SELECT    
				b.DAY,
				a.CITY_NAME,
				a.BASE_STATN_ID,
				a.BASE_STATN_NAME,
				a.CELL_ID,
				a.CELL_NAME,
				b.band_width,
				b.total_days,
				b.DW_PRB_USERATE_MAX ,
				b.DW_PRB_USERATE_AVG ,
				b.UP_PRB_USERATE_MAX ,
				b.UP_PRB_USERATE_AVG ,
				b.PDCH_DWFLOW_MAX ,
				b.PDCH_DWFLOW_AVG ,
				b.PDCH_UPFLOW_MAX ,
				b.PDCH_UPFLOW_AVG ,
				b.USEREX_UPAVGRATE_MAX ,
				b.USEREX_UPAVGRATE_AVG ,
				b.USEREX_DWAVGRATE_MAX ,
				b.USEREX_DWAVGRATE_AVG ,
				b.RRC_USERS_MAX ,
				b.RRC_USERS_AVG ,
				b.MANUFACTURER ,
				b.DW_PRB_USERATE_MAX_U ,
				b.DW_PRB_USERATE_AVG_U ,
				b.UP_PRB_USERATE_MAX_U ,
				b.UP_PRB_USERATE_AVG_U ,
				b.PDCH_DWFLOW_MAX_U ,
				b.PDCH_DWFLOW_AVG_U ,
				b.PDCH_UPFLOW_MAX_U ,
				b.PDCH_UPFLOW_AVG_U ,
				b.USEREX_UPAVGRATE_MAX_U ,
				b.USEREX_UPAVGRATE_AVG_U ,
				b.USEREX_DWAVGRATE_MAX_U ,
				b.USEREX_DWAVGRATE_AVG_U ,
				b.RRC_USERS_MAX_U ,
				b.RRC_USERS_AVG_U ,
				b.Ce_Good_Ratio ,
				b.User_SC_Cnt
			FROM
				 (select * from FRT_CELL_EXT_W  where total_days >= 6
			AND 
				day =#{DAY} #{CITY} #{LIKECONDITION} )as b
      JOIN (select * from dim_sector where day = (select max(day) from dim_sector) and NETTYPE = '4G'
      and longitude_baidu is not null
	  and latitude_baidu is not null
      ) as a
ON  a.BASE_STATN_ID = b.ENODEBID and a.CELL_ID = b.cellid
		where 
		   1=1
		   	#{CITYNAME}
			#{DISTRICT}
			#{REGION}
			#{BAND}
			#{ISINDOOR}
			#{FACTORY}
			#{LIMIT_TYPE}
		)  as temp
]]>
</sqlTemplate>

<sqlTemplate id="SectorExpandRecommend_getCellCount" description="根据查询条件获取到符合条件的所有基站小区的个数">
<![CDATA[
SELECT  COUNT(*)  as cellcount
from 
	(select * FROM
				 (select enodebid , cellid  , total_days from FRT_CELL_EXT_W  where total_days >= 6
			AND 
				day =#{DAY}  #{LIKECONDITION}  )as b 
      JOIN (select * from dim_sector as a where a.day = (select max(day) from dim_sector) and a.NETTYPE = '4G' 
      		#{CITYNAME}
			#{DISTRICT}
			#{REGION}
			#{BAND}
			#{ISINDOOR}
			#{FACTORY}
			and longitude_baidu is not null
			and latitude_baidu is not null
			) as sector
ON  sector.BASE_STATN_ID = b.ENODEBID and sector.CELL_ID = b.cellid
			order by b.total_days desc
			#{LIMIT_TYPE}
			)as temp
			
]]>
</sqlTemplate>
<sqlTemplate id="GETMaxDay" description="从某个数据库表中获取到最大的日期">
<![CDATA[
SELECT MAX(#{COLUMNAME}) from #{TABLE_NAME}
#{CONDITION}
limit 1
]]>
</sqlTemplate>

<sqlTemplate id="SectorExpandRecommend_show_detail_data_by_id" description="根据基站id和小区ID来获取该基站小区的一个月内的扩容标志情况">
<![CDATA[
select 
	a.enodebid,
	a.cellid,
	a.city,
	a.enodebname,
	a.cell_name,
	a.band_width,
	a.DW_PRB_USERATE,
	a.UP_PRB_USERATE,
	a.PDCH_DWFLOW,
	a.PDCH_UPFLOW,
	a.USEREX_UPAVGRATE,
	a.Ext_status,
	a.Max_hour,
	a.USEREX_DWAVGRATE,
	a.RRC_Users,
	a.DW_PRB_USERATE_U,
	a.UP_PRB_USERATE_U,
	a.PDCH_DWFLOW_U,
	a.PDCH_UPFLOW_U,
	a.USEREX_UPAVGRATE_U,
	a.USEREX_DWAVGRATE_U,
	a.RRC_USERS_U,
	a.MAX_HOUR_U,
	a.CE_GOOD_RATIO,
	a.USER_SC_CNT,
	a. DAY,
	c.enodeb_id1,
	c.enodeb_id2,
	c.enodeb_id3,
	c.enodeb_id4,
	c.enodeb_id5,
	c.enodeb_id6,
	c.enodeb_id7,
	c.enodeb_id8,
	c.enodeb_id9,
	c.enodeb_id10,
	c.cell_id1,
	c.cell_id2,
	c.cell_id3,
	c.cell_id4,
	c.cell_id5,
	c.cell_id6,
	c.cell_id7,
	c.cell_id8,
	c.cell_id9,
	c.cell_id10
	from 
		FRT_CELL_EXT_D as a  
	LEFT JOIN  
		FRT_CELL_EXT_NEAR_1K_D as c
	ON
	a.ENODEBID = c.ENODEBID and a.cellid = c.cellid and a.day = c.day
	
	, FRT_CELL_EXT_W as b 
	where a.ENODEBID = #{ENODEBID} 
	and  a.CELLID = #{CELLID}
	and a.ENODEBID = b.ENODEBID
	and a.CELLID = b.CELLID
	and a.day BETWEEN #{STARTDAY} 
	and #{ENDDAY} 
	group by a.day
	ORDER BY a.DAY asc
]]>
</sqlTemplate>

<sqlTemplate id="SectorExpandRecommend_aggrate" description="根据所给字段和日期来汇总扩容小区的个数数据">
<![CDATA[

select temp.* , c.totalCounts  from
(SELECT
	s.#{DATANAME} AS xdata,
	SUM(
		CASE
		WHEN s.total_days = 0 THEN
			1
		ELSE
			0
		END
	) AS first_data,
	SUM(
		CASE
		WHEN s.total_days < 6
		AND S.total_days > 0 THEN
			1
		ELSE
			0
		END
	) AS second_data,
	SUM(
		CASE
		WHEN s.total_days >= 6 THEN
			1
		ELSE
			0
		END
	) AS last_data

from
				(SELECT
					*
				FROM
					FRT_CELL_EXT_W
				WHERE
					1 = 1
				AND DAY = #{TIME}
				#{CITY} -- and city = '广州'
				and #{DATANAME} is not NULL
				and #{DATANAME} <> ''
) as s
GROUP BY s.#{DATANAME} ) as temp
LEFT JOIN
(SELECT
				a.#{DIMDATANAME} as xdata , count(a.#{DIMDATANAME}) as totalCounts
				FROM
					( select * from noce.dim_sector
						WHERE
					 DAY = (
						SELECT
							max(DAY)
						FROM
							noce.dim_sector
					)
						#{CITYNAME} -- and city_name = '广州'
						AND nettype = '4G'
						AND longitude_baidu IS NOT NULL
						AND latitude_baidu IS NOT NULL
						AND city_name is not NULL
						AND city_name <> ''
						AND band is not null
					)AS a
				LEFT JOIN dim_tele_city AS b ON a.city_name = b.CITY_NAME
group by xdata
order by b.CITY_DISPLAY_ORDER ) as c
on temp.xdata = c.xdata
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTest_07_maxDay" description="取最大天">
<![CDATA[
select MAX(DAY) FROM frt_agps_poor_coverage_d
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV2_01_maxDay" description="取最大天">
        <![CDATA[
select MAX(DAY) maxDay as day FROM frt_agps_poor_coverage_d
-- UNION ALL
-- select max(day) maxDay from noce.dim_city_gis_data
-- UNION ALL
-- select max(day) maxDay from noce.dim_district_gis_data
-- UNION ALL
-- select max(day) maxDay from noce.dim_mktcenter_gis_data
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_01_province" description="取全省和各个地市弱覆盖区数和栅格数">
<![CDATA[
SELECT *from (
SELECT '全省' AS city, badcount,poor_grid_nums,CITY_DISPLAY_ORDER,new_count FROM(SELECT
	'广东' AS city,
count(object_id) badcount,
SUM(poor_grid_nums) poor_grid_nums,sum(New_Added_Flag) new_count 
FROM
	FRT_AGPS_POOR_COVERAGE_D
WHERE DAY=#{DAY}
AND TYPE = 0
AND grid_type=20
AND city <> '' )a
JOIN dim_tele_city b
ON a.city = b.city_name
union all
SELECT c.city,c.badcount,c.poor_grid_nums,c.CITY_DISPLAY_ORDER,C.new_count FROM(select * FROM (SELECT
	city,
count(object_id) badcount,
SUM(poor_grid_nums) poor_grid_nums,
sum(New_Added_Flag) new_count 
FROM
	FRT_AGPS_POOR_COVERAGE_D
WHERE DAY=#{DAY}
AND TYPE = 0
AND grid_type=20
AND city <> ''
AND country <> ''
GROUP BY city) a
JOIN dim_tele_city b
ON a.city = b.CITY_NAME
ORDER BY b.CITY_DISPLAY_ORDER) c
ORDER BY CITY_DISPLAY_ORDER
) as f
LEFT JOIN
(select SUM(JOINT_POOR_105_GRIDS)/sum(ALL_AGPS_GRIDS) as proportion ,city as city2 from 
FRT_MRO_AGPS_GRID_TOT_D WHERE DAY=#{DAY} GROUP BY city2)as g on  f.city=g.city2

]]>
</sqlTemplate>	
<sqlTemplate id="IntelligentRoadTest_02_city" description="取某地市和该地市各个区县弱覆盖区数和栅格数">
<![CDATA[

SELECT *from (
SELECT
city_id,
	city,
city_id as country_id,
'全市' AS country,
count(object_id) badcount,
SUM(poor_grid_nums) poor_grid_nums,
0 as dis_order
FROM
	FRT_AGPS_POOR_COVERAGE_D
WHERE DAY=#{DAY}
AND TYPE = 0
AND city='#{CITY}'
AND grid_type=20
AND country <> ''
GROUP BY city_id,city
union all
SELECT a.*,b.DIS_ORDER FROM (SELECT
city_id,
	city,
country_id,
country,
count(object_id) badcount,
SUM(poor_grid_nums) poor_grid_nums
FROM
	FRT_AGPS_POOR_COVERAGE_D
WHERE DAY=#{DAY}
AND TYPE = 0
AND city='#{CITY}'
AND grid_type=20
AND country <> ''
GROUP BY city_id,city,country_id,country) a LEFT JOIN (SELECT * from dim_district_gis_data where day=(SELECT MAX(day) from dim_district_gis_data)) b
ON a.country_id = b.DISTRICT_ID
) as f
LEFT JOIN
(select SUM(JOINT_POOR_105_GRIDS)/sum(ALL_AGPS_GRIDS) as proportion ,country_id as city2 from 
FRT_MRO_AGPS_GRID_TOT_D WHERE DAY=#{DAY} GROUP BY city2)as g on  f.country_id=g.city2
ORDER BY dis_order
]]>
</sqlTemplate>	
<sqlTemplate id="IntelligentRoadTest_03_country" description="取某区县和该区县各个营服弱覆盖区数和栅格数">
<![CDATA[
SELECT *from (
SELECT
city_id,
city,
country_id,
country,
country_id as mktcenter_id,
country AS MKTCENTER,
count(object_id) badcount,
SUM(poor_grid_nums) poor_grid_nums
FROM
	FRT_AGPS_POOR_COVERAGE_D
WHERE DAY=#{DAY}
AND TYPE = 0
AND city='#{CITY}'
and country = '#{COUNTRY}'
AND grid_type=20
AND MKTCENTER<> ''
GROUP BY city_id,city,country_id,country
union all
SELECT
city_id,
city,
country_id,
country,
mktcenter_id,
MKTCENTER,
count(object_id) badcount,
SUM(poor_grid_nums) poor_grid_nums
FROM
	FRT_AGPS_POOR_COVERAGE_D
WHERE DAY=#{DAY}
AND TYPE = 0
AND city='#{CITY}'
and country = '#{COUNTRY}'
AND grid_type=20
AND MKTCENTER<> ''
GROUP BY city_id,city,country_id,country,mktcenter

) as f
LEFT JOIN
(select SUM(JOINT_POOR_105_GRIDS)/sum(ALL_AGPS_GRIDS) as proportion ,mktcenter_id as city2 from 
FRT_MRO_AGPS_GRID_TOT_D WHERE DAY=#{DAY} GROUP BY city2)as g on  f.mktcenter_id=g.city2
]]>
</sqlTemplate>	
<sqlTemplate id="IntelligentRoadTest_04_TOP20Table" description="取某地市或者某区县或者某营服top20弱区">
<![CDATA[
SELECT 
city,
country,
mktcenter,
object_id,
CELL_NAME as address,
#{ORDERCOL} as col
FROM FRT_AGPS_POOR_COVERAGE_D
WHERE DAY = #{DAY}
AND TYPE = 0
AND city='#{CITY}'
#{COUNTRY}
#{MKTCENTER}
and grid_type = 20
ORDER BY #{ORDERCOL} #{DESC} 
LIMIT 20

]]>
</sqlTemplate>	
<sqlTemplate id="IntelligentRoadTest_05_polygonGis" description="取某区县或者某营服弱区轮廓数据">
<![CDATA[
SELECT 
object_id,
gis_data,
city,
country,
mktcenter,
LONGITUDE_MID_BAIDU as lng,
LATITUDE_MID_BAIDU as lat
FROM FRT_AGPS_POOR_COVERAGE_D
WHERE DAY = #{DAY}
AND TYPE = 0
AND city='#{CITY}'
AND country = '#{COUNTRY}'
#{MKTCENTER}
and grid_type = 20
AND gis_data is not null

]]>
</sqlTemplate>	
<sqlTemplate id="IntelligentRoadTest_06_grid" description="主服务小区或者弱区栅格数据">
<![CDATA[
getByKeyScope
NOCE:DSI_MRO_AGPS_GRID_TOT_D
#{STARTROW}
#{ENDROW}
#{COLUMNLIST}
rowkey 1
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTest_06_gridV2" description="主服务小区或者弱区栅格数据（4.30表）">
<![CDATA[
getByKeyScope
#{TABLENAME}
#{STARTROW}
#{ENDROW}
#{COLUMNLIST}
rowkey 0
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTest_sector_Threegrid" description="主服务小区三网栅格数据">
<![CDATA[
getByKeyScope
#{TABLENAME}
#{STARTROW}
#{ENDROW}
#{COLUMNLIST}
rowkey 1
]]>
</sqlTemplate>	

<sqlTemplate id="IntelligentRoadTest_06_boxSelectGrid" description="取框选栅格的数据">
<![CDATA[
getByKeys
NOCE:DSI_MRO_AGPS_GRID_TOT_D
#{KEYLIST}
#{COLUMNLIST}
rowkey 1
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getGridDataByGridID" description="取栅格7天历史数据">
<![CDATA[
getByKeys
NOCE:DSI_MRO_AGPS_GRID_TOT_D
#{KEYLIST}
#{COLUMNLIST}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getGridDataByGridIDV2" description="取栅格7天历史数据(4.29表)">
<![CDATA[
getByKeys
#{TABLENAME}
#{KEYLIST}
#{COLUMNLIST}
]]>
</sqlTemplate>

<sqlTemplate id="SectorComponent_03_sqr_mkt_info" description="取得当前中心点指定范围内的基站和扇区数据（取2G和4G）">
<![CDATA[
select distinct sector.city_name,sector.area_name,sector.mkt_center_name,sector.base_statn_id,
sector.base_statn_name,sector.bs_vendor,sector.longitude_baidu,sector.latitude_baidu,
sector.sector_id,sector.sector_name,sector.sector_addr,sector.ant_azimuth,sector.longitude,
sector.latitude,sector.cell_id,sector.cell_name,sector.is_indoor,sector.band,
case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 5 end as band_order,
sector.ANT_ELECTRON_ANGLE,sector.ANT_ENGINE_ANGLE,sector.high,sector.ACCEPTSTATUS,
sector.nettype,sector.BSC_ID,sector.TOTAL_DECLINATION_ANGLE,sector.day,alarm.OUTOFSRV
from noce.dim_sector sector left join ( select DISTINCT base_statn_id,alarm_scope,cell_id,bsc_id,OUTOFSRV from noce.frt_bsn_alarm  where OUTOFSRV = 1) alarm
#{2GJOIN}
#{TIME}
#{NETTYPE}
#{AREA}
#{CITY}
#{DISTRICT}
#{REGON}
#{INDOOR}
#{FACTORY}
#{BAND}
order by band_order
]]>
</sqlTemplate>

<sqlTemplate id="SectorComponent_04_sqr_mkt_info" description="取得当前中心点指定范围内的基站和扇区数据（取2G和4G）">
<![CDATA[
SELECT distinct sector.city_name,sector.area_name,sector.mkt_center_name,sector.base_statn_id,
sector.base_statn_name,sector.bs_vendor,sector.longitude_baidu,sector.latitude_baidu,
sector.sector_id,sector.sector_name,sector.sector_addr,sector.ant_azimuth,sector.longitude,
sector.latitude,sector.cell_id,sector.cell_name,sector.is_indoor,sector.band,
sector.ANT_ELECTRON_ANGLE,sector.ANT_ENGINE_ANGLE,sector.high,sector.ACCEPTSTATUS,
sector.nettype,sector.BSC_ID,sector.TOTAL_DECLINATION_ANGLE,sector.day, b.total_days
FROM (select * from FRT_CELL_EXT_W where 1=1 #{TIME} and total_days >= 6) as b, (select * from noce.dim_sector
where day = (select max(day) from noce.dim_sector) 
    and nettype = '4G'
	#{CITY}
	#{AREA}
	#{REGON}
	#{INDOOR}
	#{FACTORY}
	#{BAND}
 ) as sector 
WHERE 
   sector.base_statn_id = b.ENODEBID
  and sector.cell_id = b.cellid
  ORDER BY b.total_days desc
  #{LIMIT_TYPE}
]]>
</sqlTemplate>

<sqlTemplate id="SectorComponent_05_sqr_mkt_info" description="取得当前中心点指定范围内的基站和扇区数据（取2G和4G）基站查询中使用的（扩容小区）">
<![CDATA[
SELECT distinct sector.base_statn_id,
sector.longitude_baidu,sector.latitude_baidu,
sector.cell_id,sector.ant_azimuth,
CASE sector.is_indoor WHEN '室外' THEN 2 ELSE 1 END AS type,
case sector.band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 0 end as band_order,
b.total_days
FROM (select * from FRT_CELL_EXT_W where 1=1 #{TIME} and total_days >= 6) as b, (select * from noce.dim_sector
where day = (select max(day) from noce.dim_sector) 
    and nettype = '4G'
	#{CITY}
	#{DISTRICT}
	#{REGON}
	#{INDOOR}
	#{FACTORY}
	#{BAND}
	and longitude_baidu is not null
	and latitude_baidu is not null
 ) as sector 
WHERE 
   sector.base_statn_id = b.ENODEBID
  and sector.cell_id = b.cellid
  ORDER BY b.total_days desc
  #{LIMIT_TYPE}
]]>
</sqlTemplate>


<sqlTemplate id="PoorCoverage_01_GeoDisplay" description="弱覆盖片区呈现，分析页面，以及导出">
<![CDATA[
select PC_ID,CITY,LTE_TO_3G_TOT,Flow_4G_TOT,CE_GOOD_RATIO_AVG,User_4G_AVG
,concat(cast(ranked.rank as char),"/",cast(b.cnt as char)) as final_order,MC_longitude,MC_latitude,MC_Direction_angle1
,MC_Direction_angle2,MC_Direction_angle3,Antenna_Height,GRID_NUM_1,RSRP_AVG_1,RSRP_Cnt_1,Users_4G_AVG_1
,GRID_NUM_2,RSRP_AVG_2,RSRP_Cnt_2,Users_4G_AVG_2,GRID_NUM_3,RSRP_AVG_3,RSRP_Cnt_3,Users_4G_AVG_3
from 
(
select *,@pre_id,@k:=(case when @pre_id like a.CITY_ID then @k+1 else 1 end) as rank,@pre_id:=a.CITY_ID as pre_id  	
from
(
select CITY_ID
,CITY
,PC_ID
,LTE_TO_3G_TOT
,Flow_4G_TOT
,CE_GOOD_RATIO_AVG
,floor(User_4G_AVG) as User_4G_AVG
,MC_longitude
,MC_latitude
,MC_Direction_angle1
,MC_Direction_angle2
,MC_Direction_angle3
,Antenna_Height
,GRID_NUM_1
,round(RSRP_AVG_1, 2) as RSRP_AVG_1
,RSRP_Cnt_1
,Users_4G_AVG_1
,GRID_NUM_2
,round(RSRP_AVG_2, 2) as RSRP_AVG_2
,RSRP_Cnt_2
,Users_4G_AVG_2
,GRID_NUM_3
,round(RSRP_AVG_3, 2) as RSRP_AVG_3
,RSRP_Cnt_3
,Users_4G_AVG_3
from noce.frt_mro_poor_coverage_m
where month=#{MONTH}
and city#{CITY}
and grid_rsrp_type=#{GRID_RSRP_TYPE}
and GRID_TYPE=#{GRID_TYPE}
and MC_longitude is not NULL
and MC_latitude is not NULL
order by CITY_ID,PC_OrderNo_TOT
#{LIMIT}) a,
(select @k:=0,@pre_id:='a') tmp
) ranked
join
(
select CITY_ID, count(*) as cnt
from noce.frt_mro_poor_coverage_m
where month=#{MONTH}
and city#{CITY}
and grid_rsrp_type=#{GRID_RSRP_TYPE}
and GRID_TYPE=#{GRID_TYPE}
and MC_longitude is not NULL
and MC_latitude is not NULL
group by CITY_ID) b
on ranked.CITY_ID=b.CITY_ID
]]>
</sqlTemplate>

<sqlTemplate id="PoorCoverage_02_PoorCovCnt" description="规划点总数">
<![CDATA[
select count(*) 
from noce.frt_mro_poor_coverage_m 
where month=#{MONTH} 
and city#{CITY}
and grid_rsrp_type=#{GRID_RSRP_TYPE} 
and GRID_TYPE=#{GRID_TYPE}
and MC_longitude is not NULL
and MC_latitude is not NULL
]]>
</sqlTemplate>

<sqlTemplate id="PoorCoverage_03_PoorCovOrder_provice" description="规划点数量排名，全省维度">
<![CDATA[
select city, cnt from
(
select city, count(*) cnt
from noce.frt_mro_poor_coverage_m 
where month=#{MONTH} 
and city!='' 
and grid_rsrp_type=#{GRID_RSRP_TYPE} 
and GRID_TYPE=#{GRID_TYPE} 
and MC_longitude is not NULL
and MC_latitude is not NULL
group by city) a
join
(select city_name, city_display_order from noce.dim_tele_city) b
on a.city=b.city_name
order by b.city_display_order
]]>
</sqlTemplate>

<sqlTemplate id="PoorCoverage_04_PoorCovOrder_city" description="规划点数量排名，地市维度">
<![CDATA[
select COUNTRY, count(*) cnt
from noce.frt_mro_poor_coverage_m 
where month=#{MONTH} 
	and city='#{CITY}'
	and grid_rsrp_type=#{GRID_RSRP_TYPE}
	and GRID_TYPE=#{GRID_TYPE}
	and COUNTRY!=''
	and MC_longitude is not NULL
	and MC_latitude is not NULL
group by COUNTRY
order by COUNTRY
]]>
</sqlTemplate>

<sqlTemplate id="PoorCoverage_05_PoorCovCnt_history" description="规划点数量变化趋势">
<![CDATA[
select month, count(*) cnt
from noce.frt_mro_poor_coverage_m 
where month between #{BEGIN_MONTH} and #{END_MONTH}
	and city#{CITY}
	and grid_rsrp_type=#{GRID_RSRP_TYPE}
	and GRID_TYPE=#{GRID_TYPE}
	and MC_longitude is not NULL
	and MC_latitude is not NULL
group by month
order by month
]]>
</sqlTemplate>

<sqlTemplate id="PoorCoverage_06_date" description="查询frt_mro_poor_coverage_m表中的时间">
<![CDATA[
select DISTINCT `MONTH` from NOCE.frt_mro_poor_coverage_m ORDER BY `MONTH`
]]>
</sqlTemplate>

<sqlTemplate id="ExpandEffectTrack_getUserOrders" description="获取该用户所跟踪的所有的扩容小区的订单信息">
<![CDATA[
select DISTINCT a.enodebid , a.cellid , a.city , a.enodebname , a.cell_name , a.band_width , a.DW_PRB_USERATE , a.UP_PRB_USERATE , a.PDCH_DWFLOW , 
a.PDCH_UPFLOW , a.USEREX_UPAVGRATE ,a.Ext_status, a.Max_hour , a.USEREX_DWAVGRATE , a.RRC_Users , a.day , c.enodeb_id1 , c.enodeb_id2 , c.enodeb_id3 , c.enodeb_id4 , c.enodeb_id5 ,
c.enodeb_id6 , c.enodeb_id7 , c.enodeb_id8 , c.enodeb_id9 , c.enodeb_id10 , c.cell_id1 , c.cell_id2 , c.cell_id3 , c.cell_id4 , c.cell_id5 ,
c.cell_id6 , c.cell_id7 , c.cell_id8 , c.cell_id9 , c.cell_id10 ,
CASE
WHEN
  a.enodebid in (select enodebid from  FRT_CELL_EXT_W 
	where  day = #{DAY1} #{FRTCITY})
and 
	a.enodebid in(select enodebid from  FRT_CELL_EXT_W 
	where  day = #{DAY2} #{FRTCITY})
AND
	a.cellid in (select cellid from  FRT_CELL_EXT_W 
	where  day = #{DAY1} #{FRTCITY})
and
	a.cellid in (select cellid from  FRT_CELL_EXT_W 
	where  day = #{DAY2} #{FRTCITY})
THEN 
	2
WHEN
	a.enodebid not in (select enodebid from  FRT_CELL_EXT_W 
	where  day = #{DAY1} #{FRTCITY})
and 
	a.enodebid not in(select enodebid from  FRT_CELL_EXT_W 
	where  day = #{DAY2} #{FRTCITY})
AND
	a.cellid not in (select cellid from  FRT_CELL_EXT_W 
	where  day = #{DAY1} #{FRTCITY})
and
	a.cellid not in (select cellid from  FRT_CELL_EXT_W 
	where  day = #{DAY2} #{FRTCITY})
THEN
	0
ELSE
	1  
end sta
from (select * from sectorexpandrecommend_order_info where username = '#{USERNAME}' #{FRTCITY} ) as b  ,
(select * from FRT_CELL_EXT_D where day between #{STARTDAY} AND #{ENDDAY} #{FRTCITY}) as a
LEFT JOIN  (select * from FRT_CELL_EXT_NEAR_1K_D where day between #{STARTDAY} AND #{ENDDAY} #{FRTCITY})  as c
ON
	a.ENODEBID = c.ENODEBID and a.cellid = c.cellid and a.day = c.day
	where 
		a.enodebid = b.enodebid and a.cellid = b.cellid
		#{CITY}
		GROUP BY  a.enodebid , a.cellid 
ORDER BY a.enodebid DESC , a.cellid DESC , a.day ASC , sta ASC 

]]>
</sqlTemplate>

<sqlTemplate id="ExpandEffectTrack_getAllOrderCompleteMessage" description="获取该用户所跟踪的所有的扩容小区的订单的详细信息">
<![CDATA[
SELECT DISTINCT
	a.enodebid,
	a.cellid,
	a.city,
	a.enodebname,
	a.cell_name,
	a.band_width,
	a.DW_PRB_USERATE,
	a.UP_PRB_USERATE,
	a.PDCH_DWFLOW,
	a.PDCH_UPFLOW,
	a.USEREX_UPAVGRATE,
	a.Ext_status,
	a.Max_hour,
	a.USEREX_DWAVGRATE,
	a.RRC_Users,
	a.DW_PRB_USERATE_U,
	a.UP_PRB_USERATE_U,
	a.PDCH_DWFLOW_U,
	a.PDCH_UPFLOW_U,
	a.USEREX_UPAVGRATE_U,
	a.USEREX_DWAVGRATE_U,
	a.RRC_USERS_U,
	a.MAX_HOUR_U,
	a.CE_GOOD_RATIO,
	a.USER_SC_CNT,
	a. DAY,
	c.enodeb_id1,
	c.enodeb_id2,
	c.enodeb_id3,
	c.enodeb_id4,
	c.enodeb_id5,
	c.enodeb_id6,
	c.enodeb_id7,
	c.enodeb_id8,
	c.enodeb_id9,
	c.enodeb_id10,
	c.cell_id1,
	c.cell_id2,
	c.cell_id3,
	c.cell_id4,
	c.cell_id5,
	c.cell_id6,
	c.cell_id7,
	c.cell_id8,
	c.cell_id9,
	c.cell_id10,
CASE
WHEN
  a.enodebid in (select enodebid from  FRT_CELL_EXT_W 
	where  day = #{DAY1} #{FRTCITY})
and 
	a.enodebid in(select enodebid from  FRT_CELL_EXT_W 
	where  day = #{DAY2} #{FRTCITY})
AND
	a.cellid in (select cellid from  FRT_CELL_EXT_W 
	where  day = #{DAY1} #{FRTCITY})
and
	a.cellid in (select cellid from  FRT_CELL_EXT_W 
	where  day = #{DAY2} #{FRTCITY})
THEN 
	2
WHEN
	a.enodebid not in (select enodebid from  FRT_CELL_EXT_W 
	where  day = #{DAY1} #{FRTCITY})
and 
	a.enodebid not in(select enodebid from  FRT_CELL_EXT_W 
	where  day = #{DAY2} #{FRTCITY})
AND
	a.cellid not in (select cellid from  FRT_CELL_EXT_W 
	where  day = #{DAY1} #{FRTCITY})
and
	a.cellid not in (select cellid from  FRT_CELL_EXT_W 
	where  day = #{DAY2} #{FRTCITY})
THEN
	0
ELSE
	1  
end sta
from (select * from sectorexpandrecommend_order_info where username = '#{USERNAME}'#{FRTCITY} ) as b  ,
(select * from FRT_CELL_EXT_D where day between #{STARTDAY} AND #{ENDDAY} #{FRTCITY}) as a
LEFT JOIN  (select * from FRT_CELL_EXT_NEAR_1K_D where day between #{STARTDAY} AND #{ENDDAY} #{FRTCITY}) as c
ON
	a.ENODEBID = c.ENODEBID and a.cellid = c.cellid and a.day = c.day
	where 
		a.enodebid = b.enodebid and a.cellid = b.cellid
		#{CITY}
ORDER BY a.enodebid DESC , a.cellid DESC , a.day ASC , sta ASC 
]]>
</sqlTemplate>



<sqlTemplate id="ExpandEffectTrack_getMessageByIdAndDay" description="根据基站id、小区id以及日期获取基站的当天的信息">
<![CDATA[

select * from dim_sector 
where 
	day = (select max(day) from dim_sector) 
and 
	NETTYPE = '4G' 
and 
	base_statn_id = #{ENODEBID} 
and  
	cell_id = #{CELLID}
]]>
</sqlTemplate>

<sqlTemplate id="ExpandEffectTrack_getNewCellMessage" description="根据基站id、小区id以及日期获取新增的基站小区和原小区在这个周期中的信息">
<![CDATA[
select * from FRT_CELL_EXT_D 
WHERE 
1 = 1
 and (#{OLDID} #{NEWID} )
and DAY BETWEEN   #{STARTDAY}  and   #{ENDDAY}

ORDER BY enodebid asc , cellid asc , day ASC

]]>
</sqlTemplate>

<sqlTemplate id="ExpandEffectTrack_exportRowData" description="根据基站id、小区id以及日期查询出这个基站小区在某段时间的数据（用于导出数据）">
<![CDATA[
SELECT    
				DAY,
				CITY,	
			  enodebid,
				ENODEBNAME,
				CELLID,
				CELL_NAME,
				band_width,
				DW_PRB_USERATE ,
				UP_PRB_USERATE ,
				PDCH_DWFLOW ,
				PDCH_UPFLOW ,
				USEREX_UPAVGRATE ,
				USEREX_DWAVGRATE ,
				RRC_USERS ,
				EXT_STATUS ,
				MAX_HOUR ,
				MANUFACTURER ,
				DW_PRB_USERATE_U ,
				UP_PRB_USERATE_U ,
				PDCH_DWFLOW_U ,
				PDCH_UPFLOW_U ,
				USEREX_UPAVGRATE_U ,
				USEREX_DWAVGRATE_U ,
				RRC_USERS_U ,
				MAX_HOUR_U ,
				CE_GOOD_RATIO ,
				USER_SC_CNT 
			FROM
				 frt_cell_ext_d

where 
		day BETWEEN #{STARTDAY}  and #{ENDDAY}
 and enodebid =#{ENODEBID}   and cellid = #{CELLID}
]]>
</sqlTemplate>

<sqlTemplate id="ExpandEffectTrack_exportRowDataBySta" description="根据需求导出在某段时间的紧急扩容小区/一般扩容小区/疑似完成扩容的小区的数据（用于导出数据）">
<![CDATA[
SELECT    
				a.DAY,
				a.CITY,	
			    a.enodebid,
				a.ENODEBNAME,
				a.CELLID,
				a.CELL_NAME,
				a.band_width,
				a.DW_PRB_USERATE ,
				a.UP_PRB_USERATE ,
				a.PDCH_DWFLOW ,
				a.PDCH_UPFLOW ,
				a.USEREX_UPAVGRATE ,
				a.USEREX_DWAVGRATE ,
				a.RRC_USERS ,
				a.EXT_STATUS ,
				a.MAX_HOUR ,
				a.MANUFACTURER ,
				a.DW_PRB_USERATE_U ,
				a.UP_PRB_USERATE_U ,
				a.PDCH_DWFLOW_U ,
				a.PDCH_UPFLOW_U ,
				a.USEREX_UPAVGRATE_U ,
				a.USEREX_DWAVGRATE_U ,
				a.RRC_USERS_U ,
				a.MAX_HOUR_U ,
				a.CE_GOOD_RATIO ,
				a.USER_SC_CNT 
			FROM
				 frt_cell_ext_d as a 
JOIN 
(select s.ENODEBID , s.cellid  from sectorexpandrecommend_order_info as s
JOIN   
(select DISTINCT a.enodebid , a.cellid ,
CASE
WHEN
  a.enodebid in (select enodebid from  FRT_CELL_EXT_W 
	where  day = #{FIRSTDAY} ) 
and 
	a.enodebid in(select enodebid from  FRT_CELL_EXT_W 
	where  day = #{SECONDDAY})
AND
	a.cellid in (select cellid from  FRT_CELL_EXT_W 
	where  day = #{FIRSTDAY})
and
	a.cellid in (select cellid from  FRT_CELL_EXT_W 
	where  day = #{SECONDDAY})
THEN 
	2
WHEN
	a.enodebid not in (select enodebid from  FRT_CELL_EXT_W 
	where  day = #{FIRSTDAY}) 
and 
	a.enodebid not in(select enodebid from  FRT_CELL_EXT_W 
	where  day = #{SECONDDAY})
AND
	a.cellid not in (select cellid from  FRT_CELL_EXT_W 
	where  day = #{FIRSTDAY})
and
	a.cellid not in (select cellid from  FRT_CELL_EXT_W 
	where  day = #{SECONDDAY})
THEN
	0
ELSE
	1  
end sta
from (select * from sectorexpandrecommend_order_info where username = #{USERNAME} ) as b  ,
(select * from FRT_CELL_EXT_D where day between #{STARTDAY} AND #{ENDDAY}) as a
LEFT JOIN  FRT_CELL_EXT_NEAR_1K_D as c
ON
	a.ENODEBID = c.ENODEBID and a.cellid = c.cellid and a.day = c.day
	where 
		a.enodebid = b.enodebid and a.cellid = b.cellid
		
ORDER BY a.enodebid DESC , a.cellid DESC , a.day ASC ) as temp
ON s.ENODEBID = temp.enodebid  and s.CELLID = temp.cellid
where s.username = #{USERNAME} and temp.sta = #{STA})  as b
ON
		a.enodebid = b .ENODEBID and a.cellid = b.cellid
where a.day BETWEEN #{STARTDAY} AND #{ENDDAY}
]]>
</sqlTemplate>

<sqlTemplate id="ExpandEffectTrack_exportRowEchartsData" description="导出点击折线图显示出来的echarts图的数据">
<![CDATA[
select DISTINCT a.day , a.enodebid , a.cellid , a.city , a.enodebname , a.cell_name , a.band_width , a.DW_PRB_USERATE , a.UP_PRB_USERATE , a.PDCH_DWFLOW , 
a.PDCH_UPFLOW , a.USEREX_UPAVGRATE ,a.Ext_status, a.Max_hour , a.USEREX_DWAVGRATE , a.RRC_Users  
from frt_cell_ext_d as a 
where 
	a.enodebid = #{ENODEBID}
AND
	a.cellid = #{CELLID}
AND
	a.day BETWEEN #{STARTDAY} and #{ENDDAY} 
]]>
</sqlTemplate>

<sqlTemplate id="PoorCoverage_02_GeoDisplay" description="弱覆盖片区呈现，分析页面，以及导出">
<![CDATA[
select PC_ID,LTE_TO_3G_TOT,Flow_4G_TOT,CE_GOOD_RATIO_AVG,User_4G_AVG,PC_OrderNo_TOT
,concat(cast(ranked.rank as char),"/",cast(b.cnt as char)) as final_order,MC_longitude,MC_latitude,MC_Direction_angle1
,MC_Direction_angle2,MC_Direction_angle3,Antenna_Height,GRID_NUM_1,RSRP_AVG_1,RSRP_Cnt_1,Users_4G_AVG_1
,GRID_NUM_2,RSRP_AVG_2,RSRP_Cnt_2,Users_4G_AVG_2,GRID_NUM_3,RSRP_AVG_3,RSRP_Cnt_3,Users_4G_AVG_3
from 
(
select *,@pre_id,@k:=(case when @pre_id like a.CITY_ID then @k+1 else 1 end) as rank,@pre_id:=a.CITY_ID as pre_id  	
from
(
select CITY_ID
,PC_ID
,LTE_TO_3G_TOT
,Flow_4G_TOT
,CE_GOOD_RATIO_AVG
,floor(User_4G_AVG) as User_4G_AVG
,PC_OrderNo_TOT
,MC_longitude
,MC_latitude
,MC_Direction_angle1
,MC_Direction_angle2
,MC_Direction_angle3
,Antenna_Height
,GRID_NUM_1
,round(RSRP_AVG_1, 2) as RSRP_AVG_1
,RSRP_Cnt_1
,Users_4G_AVG_1
,GRID_NUM_2
,round(RSRP_AVG_2, 2) as RSRP_AVG_2
,RSRP_Cnt_2
,Users_4G_AVG_2
,GRID_NUM_3
,round(RSRP_AVG_3, 2) as RSRP_AVG_3
,RSRP_Cnt_3
,Users_4G_AVG_3
from noce.frt_mro_poor_coverage_m
where month=#{MONTH}
and country_id=#{COUNTRY_ID}
and grid_rsrp_type=#{GRID_RSRP_TYPE}
and GRID_TYPE=#{GRID_TYPE}
and MC_longitude is not NULL
and MC_latitude is not NULL
order by CITY_ID,PC_OrderNo_TOT
#{LIMIT}) a,
(select @k:=0,@pre_id:='a') tmp
) ranked
join
(
select CITY_ID, count(*) as cnt
from noce.frt_mro_poor_coverage_m
where month=#{MONTH}
AND city!=''
and country_id=#{COUNTRY_ID}
and grid_rsrp_type=#{GRID_RSRP_TYPE}
and GRID_TYPE=#{GRID_TYPE}
and MC_longitude is not NULL
and MC_latitude is not NULL
group by CITY_ID) b
on ranked.CITY_ID=b.CITY_ID
;

]]>
</sqlTemplate>

<sqlTemplate id="SectorUtilForBaidu_01_querySector2" description="根据查询条件获取到符合条件的所有基站小区的个数">
<![CDATA[
select COUNT(*)  as cellcount
from noce.dim_sector 
where day = #{DAY}
#{CITY} -- 地市
#{COUNTRY} -- 区县
#{MKTCENTER} -- 营服
#{BAND} -- 频率
#{FACTORY} -- 厂家
#{NETTYPE} -- 网络类型
#{REGON} -- 场景
#{INDOOR} -- 室内外
AND longitude_baidu IS NOT NULL
]]>
</sqlTemplate>
<sqlTemplate id="SectorUtilForBaidu_01_querySector" description="百度地图canvas画基站后台查询sql">
	<![CDATA[
select distinct city_name,area_name,mkt_center_name,base_statn_id,
base_statn_name,bs_vendor,longitude_baidu,latitude_baidu,
sector_id,sector_name,sector_addr,ant_azimuth,longitude,
latitude,cell_id,cell_name,CASE is_indoor WHEN '室外' THEN 2 ELSE 1 END AS is_indoor
,band,
case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 0 end as band_order,
ANT_ELECTRON_ANGLE,ANT_ENGINE_ANGLE,high,ACCEPTSTATUS,
nettype,BSC_ID,TOTAL_DECLINATION_ANGLE,day
from noce.dim_sector
where day = #{DAY}
#{CITY} -- 地市
#{COUNTRY} -- 区县
#{MKTCENTER} -- 营服
#{BAND} -- 频率
#{FACTORY} -- 厂家
#{NETTYPE} -- 网络类型
#{REGON} -- 场景
#{INDOOR} -- 室内外
AND longitude_baidu IS NOT NULL
order by band_order
]]>
</sqlTemplate>
<sqlTemplate id="SectorUtilForBaidu_01_querySector_ByScope" description="百度地图canvas画基站后台查询sql（仅取指定范围内数据">
<![CDATA[
select distinct city_name,area_name,mkt_center_name,base_statn_id,
base_statn_name,bs_vendor,longitude_baidu,latitude_baidu,
sector_id,sector_name,sector_addr,ant_azimuth,longitude,
latitude,cell_id,cell_name,CASE is_indoor WHEN '室外' THEN 2 ELSE 1 END AS is_indoor,
,band,
case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 0 end as band_order,
ANT_ELECTRON_ANGLE,ANT_ENGINE_ANGLE,high,ACCEPTSTATUS,
nettype,BSC_ID,TOTAL_DECLINATION_ANGLE,day
from noce.dim_sector
where day = #{DAY}
#{CITY} -- 地市
#{COUNTRY} -- 区县
#{MKTCENTER} -- 营服
#{BAND} -- 频率
#{FACTORY} -- 厂家
#{NETTYPE} -- 网络类型
#{REGON} -- 场景
#{INDOOR} -- 室内外
#{CONDITION} -- 其他查询条件
AND abs(longitude_baidu - #{CENTERLONGITUDE})<0.00980657*#{KM} -- 中心经度， #{KM}为范围大小，建议取5。下同
and abs(latitude_baidu - #{CENTERLATITUDE}) < 0.00899322*#{KM} -- 中心纬度，
order by band_order
]]>
</sqlTemplate>
<sqlTemplate id="SectorUtilForBaidu_01_querySector_ByScope_OnlyDrawField" description="百度地图canvas画基站后台查询sql（仅取指定范围内数据">
<![CDATA[
select distinct base_statn_id,cell_id,
longitude_baidu,latitude_baidu,
ant_azimuth,
#{QueryField}
-- is_indoor,
-- band,
-- CASE is_indoor WHEN '室外' THEN 2 ELSE 1 END AS type,
-- case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 0 end as band_order
INDOOR_MAPPING as type,
BAND_MAPPING as band_order
from noce.dim_sector
where day = #{DAY}
#{CITY} -- 地市
#{COUNTRY} -- 区县
#{MKTCENTER} -- 营服
#{BAND} -- 频率
#{FACTORY} -- 厂家
#{NETTYPE} -- 网络类型
#{REGON} -- 场景
#{INDOOR} -- 室内外
#{CONDITION} -- 其他查询条件
AND abs(longitude_baidu - #{CENTERLONGITUDE})<0.00980657*#{KM} -- 中心经度， #{KM}为范围大小，建议取5。下同
and abs(latitude_baidu - #{CENTERLATITUDE}) < 0.00899322*#{KM} -- 中心纬度，
order by band_order
]]>
</sqlTemplate>
<sqlTemplate id="SectorUtilForBaidu_02_querySector_ByScope_OnlyDrawField" description="百度地图canvas画基站后台查询sql（仅取指定范围内数据">
<![CDATA[
select distinct city_id,cell_id,
longitude_baidu,latitude_baidu,
base_statn_id,
ant_azimuth,
SECTOR_ID,BSC_ID,
#{QueryField}
CASE is_indoor WHEN '室外' THEN 2 ELSE 1 END AS type,
-- INDOOR_MAPPING as type,
-- case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 0 end as band_order
BAND_MAPPING as band_order
from noce.dim_sector
where day = #{DAY}
#{CITY} -- 地市
#{COUNTRY} -- 区县
#{MKTCENTER} -- 营服
#{BAND} -- 频率
#{FACTORY} -- 厂家
#{NETTYPE} -- 网络类型
#{REGON} -- 场景
#{INDOOR} -- 室内外
#{CONDITION} -- 其他查询条件
AND abs(longitude_baidu - #{CENTERLONGITUDE})<0.00980657*#{KM} -- 中心经度， #{KM}为范围大小，建议取5。下同
and abs(latitude_baidu - #{CENTERLATITUDE}) < 0.00899322*#{KM} -- 中心纬度，
order by band_order
]]>
</sqlTemplate>
<sqlTemplate id="SectorUtilForBaidu_01_querySector_onlyDrawField" description="百度地图canvas画基站后台查询sql（仅取画基站的字段）">
<![CDATA[
select distinct base_statn_id,cell_id,
longitude_baidu,latitude_baidu,
ant_azimuth,
-- is_indoor,
-- band,
-- CASE is_indoor WHEN '室外' THEN 2 ELSE 1 END AS type,
INDOOR_MAPPING as type,
#{QueryField}
-- case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 0 end as band_order
BAND_MAPPING as band_order
from noce.dim_sector
where day = #{DAY}
#{CITY} -- 地市
#{COUNTRY} -- 区县
#{MKTCENTER} -- 营服
#{BAND} -- 频率
#{FACTORY} -- 厂家
#{NETTYPE} -- 网络类型
#{REGON} -- 场景
#{INDOOR} -- 室内外
#{CONDITION} -- 其他查询条件
AND LONGITUDE_BAIDU IS NOT NULL
order by band_order
]]>
</sqlTemplate>

<sqlTemplate id="SectorUtilForBaidu_02_querySector_onlyDrawField" description="百度地图canvas画基站后台查询sql（仅取画基站的字段）查询2/3G基站">
<![CDATA[
select distinct city_id,cell_id,
longitude_baidu,latitude_baidu,
base_statn_id,
ant_azimuth,
SECTOR_ID,BSC_ID,
CASE is_indoor WHEN '室外' THEN 2 ELSE 1 END AS type,
#{QueryField}
-- INDOOR_MAPPING as type,
-- case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 0 end as band_order
BAND_MAPPING as band_order
from noce.dim_sector
where day = #{DAY}
#{CITY} -- 地市
#{COUNTRY} -- 区县
#{MKTCENTER} -- 营服
#{BAND} -- 频率
#{FACTORY} -- 厂家
#{NETTYPE} -- 网络类型
#{REGON} -- 场景
#{INDOOR} -- 室内外
#{CONDITION} -- 其他查询条件
AND LONGITUDE_BAIDU IS NOT NULL
order by band_order
]]>
</sqlTemplate>

<sqlTemplate id="SectorUtilForBaidu_01_querySector_ClickSector" description="百度地图canvas画基站后台查询sql（取点击位置扇区的提示信息）">
<![CDATA[
select distinct city_name,area_name,mkt_center_name,base_statn_id,
base_statn_name,bs_vendor,longitude_baidu,latitude_baidu,
sector_id,sector_name,sector_addr,ant_azimuth,longitude,
latitude,cell_id,cell_name,is_indoor,band,
case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 0 end as band_order,
ANT_ELECTRON_ANGLE,ANT_ENGINE_ANGLE,high,ACCEPTSTATUS,
nettype,BSC_ID,TOTAL_DECLINATION_ANGLE,day
from noce.dim_sector
where day = #{DAY}
-- AND nettype = '4G'
AND base_statn_id*1000000+cell_id IN (#{BSTIDANDCELLID})
AND longitude_baidu IS NOT NULL
order by band_order
]]>
</sqlTemplate>
<sqlTemplate id="SectorUtilForBaidu_02_querySector_ClickSector" description="百度地图canvas画基站后台查询sql（取点击位置扇区的提示信息）2/3G基站信息">
<![CDATA[
select distinct city_id,city_name,area_name,mkt_center_name,base_statn_id,
base_statn_name,bs_vendor,longitude_baidu,latitude_baidu,
sector_id,sector_name,sector_addr,ant_azimuth,longitude,
latitude,cell_id,cell_name,is_indoor,band,
case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 0 end as band_order,
ANT_ELECTRON_ANGLE,ANT_ENGINE_ANGLE,high,ACCEPTSTATUS,
nettype,BSC_ID,TOTAL_DECLINATION_ANGLE,day
from noce.dim_sector
where day = #{DAY}
AND nettype <> '4G'
AND base_statn_id*100000+SECTOR_ID*10000+BSC_ID IN (#{BSTIDANDCELLID})
AND city_id = '#{CITYID}'
AND longitude_baidu IS NOT NULL
order by band_order
]]>
</sqlTemplate>

<sqlTemplate id="PoorCoverage_06_PoorCovOrder_list" description="弱覆盖导出列表">
<![CDATA[
select PC_ID
,MC_longitude
,MC_latitude
,((mod(GRID_NUM_2,100000) - 1001) * (0.00000896 * 100) + 20.1297900884702) minLat
,((floor (GRID_NUM_2/100000) - 1001) * (0.00000972 * 100) + 109.456006485399) minLng
, ((mod(GRID_NUM_2,100000) - 1001) * (0.00000896 * 100) + 20.1297900884702)+ (0.00000896 * 100000) maxLat
, ((floor (GRID_NUM_2/100000) - 1001) * (0.00000972 * 100) + 109.456006485399)+ (0.00000972 * 100000) maxLng
,country
,city
from noce.frt_mro_poor_coverage_m
where month=#{MONTH}
#{COUNTRYIDS}
and grid_rsrp_type=#{GRID_RSRP_TYPE}
and GRID_TYPE=#{GRID_TYPE}
and MC_longitude is not NULL
and MC_latitude is not NULL
and city is not NULL
order by PC_OrderNo_TOT
#{LIMIT}
]]>
</sqlTemplate>
<sqlTemplate id="alarm_info_01" description="工单告警">
<![CDATA[
SELECT
city,
eNodeB_ID,
TASK_ID,
ALARM_NAME,
ALARM_ID,
ALARM_LEVEL,
date_format(ALARM_TIME,'%Y%m%d-%H:%m:%s') as ALARM_TIME,
CASE IS_RECOVER
 WHEN 1 THEN '是'
 WHEN 0 THEN '否'
ELSE '未知' END AS IS_RECOVER,
date_format(RECOVER_TIME,'%Y%m%d-%H:%m:%s') as RECOVER_TIME,
TASK_STATUS,
date_format(TASK_SEND_TIME,'%Y%m%d-%H:%m:%s') as TASK_SEND_TIME,
date_format(TASK_FINISH_TIME,'%Y%m%d-%H:%m:%s') as TASK_FINISH_TIME,
REPLACE ( ALARM_TEXT, '>', '大于' ) as ALARM_TEXT
from  alarm_info 
where 
Date(ALARM_TIME)>=#{STARTIME}
and Date(ALARM_TIME)<=#{ENDTIME}
#{CITY}
#{ALARM_ID}
and ALARM_NAME='AGPS智能路测弱覆盖区域'
]]>
</sqlTemplate>

<sqlTemplate id="GzSpecialFstPage_update_01_compareData" description="查询广州专题首页的最新时间">
<![CDATA[
select distinct day from noce.FRT_FIRST_PAGE_D where city='广州' order by day desc limit 2
]]>
</sqlTemplate>

<sqlTemplate id="GzSpecialFstPage_update_02_compareData" description="总体概况区,显示相比于上一个时间点的变化情况">
<![CDATA[
select a.flow-b.flow as flow_diff, 
a.traffic-b.traffic as traffic_diff, 
a.OFF_STATION_NUM-b.OFF_STATION_NUM as OFF_STATION_NUM_diff,
a.QUIT_SERVICE_NUM-b.QUIT_SERVICE_NUM as QUIT_SERVICE_NUM_diff,
a.4g_mr_cover_rate-b.4g_mr_cover_rate as 4g_mr_cover_rate_diff,
a.2g_voice_drop_rate-b.2g_voice_drop_rate as 2g_voice_drop_rate_diff
from
(
select day
,round(sum(IFNULL(2G_TRAFFIC,0))/10000,2) as traffic -- 话务量，单位：万ERL
,round(sum(IFNULL(4G_DATA_FLOW,0))/10240000,2) as flow -- 流量，单位：万GB
,sum(OFF_STATION_NUM) as OFF_STATION_NUM     -- 断站数
,sum(QUIT_SERVICE_NUM) as QUIT_SERVICE_NUM    -- 退服数
,case sum(IFNULL(DX_RSRP_COUNT,0)) when 0 then 0 else round(sum(IFNULL(DX_RSRP_100_COUNT,0))*100/sum(IFNULL(DX_RSRP_COUNT,0)),2) end as 4g_mr_cover_rate 	-- 4G覆盖率，单位：％
,case sum(IFNULL(2G_VOICE_SETUP_FAIL_COUNTS,0)) when 0 then 0 else  round(sum(IFNULL(2G_VOICE_DROP_FAIL_COUNTS,0))*100/sum(IFNULL(2G_VOICE_SETUP_FAIL_COUNTS,0)),2) end as 2g_voice_drop_rate 	-- 2g掉话率，单位：％
from FRT_FIRST_PAGE_D
where day=#{DAY}
and city='广州'
#{DISTRICT_CONDITION}) a,
(
select day
,round(sum(IFNULL(2G_TRAFFIC,0))/10000,2) as traffic -- 话务量，单位：万ERL
,round(sum(IFNULL(4G_DATA_FLOW,0))/10240000,2) as flow -- 流量，单位：万GB
,sum(OFF_STATION_NUM) as OFF_STATION_NUM     -- 断站数
,sum(QUIT_SERVICE_NUM) as QUIT_SERVICE_NUM    -- 退服数
,case sum(IFNULL(DX_RSRP_COUNT,0)) when 0 then 0 else round(sum(IFNULL(DX_RSRP_100_COUNT,0))*100/sum(IFNULL(DX_RSRP_COUNT,0)),2) end as 4g_mr_cover_rate
,case sum(IFNULL(2G_VOICE_SETUP_FAIL_COUNTS,0)) when 0 then 0 else  round(sum(IFNULL(2G_VOICE_DROP_FAIL_COUNTS,0))*100/sum(IFNULL(2G_VOICE_SETUP_FAIL_COUNTS,0)),2) end as 2g_voice_drop_rate 	-- 2g掉话率，单位：％
from FRT_FIRST_PAGE_D
where day=#{CMP_DAY}
and city='广州'
#{DISTRICT_CONDITION}) b
]]>
</sqlTemplate>

<sqlTemplate id="GzSpecialFstPage_update_03_networkSize" description="网络规模，显示两周趋势">
<![CDATA[
select day,network
       ,sum(case accept when '已验收' then cnt else 0 end) as total_accept
       ,sum(case accept when '未验收' then cnt else 0 end) as total_unaccept
from 
(
select day,case nettype when '3G' then 'C网' when '4G' then 'L网' else '' end as network
       ,case trim(acceptstatus) when '' then '未验收' when '通过' then '已验收' else '未验收' END as accept
       ,count(*) as cnt
from noce.dim_sector
where day between #{START_DAY} and #{END_DAY}
	and city_name='广州'
	#{AREA_CONDITION}
group by day, network, accept
) tmp
where network!=''
group by day,network
order by day,network
]]>
</sqlTemplate>


<sqlTemplate id="GzSpecialFstPage_update_04_networkVal_4g2g" description="网络价值，显示10天趋势；4GMR覆盖率，显示10天趋势，区分电信和联通;2G掉话率,显示10天趋势">
<![CDATA[
select day
,round(sum(IFNULL(2G_TRAFFIC,0))/10000,2) as traffic -- 话务量，单位：万ERL
,round(sum(IFNULL(4G_DATA_FLOW,0))/10240000,2) as flow -- 流量，单位：万GB
,sum(OFF_STATION_NUM) as OFF_STATION_NUM     -- 断站数
,sum(QUIT_SERVICE_NUM) as QUIT_SERVICE_NUM    -- 退服数
,case sum(IFNULL(DX_RSRP_COUNT,0)) when 0 then 0 else round(sum(IFNULL(DX_RSRP_100_COUNT,0))*100/sum(IFNULL(DX_RSRP_COUNT,0)),2) end as DX4g_mr_cover_rate 	-- 电信4G覆盖率，单位：％
,case sum(IFNULL(LT_RSRP_COUNT,0)) when 0 then 0 else round(sum(IFNULL(LT_RSRP_100_COUNT,0))*100/sum(IFNULL(LT_RSRP_COUNT,0)),2) end as LT4g_mr_cover_rate 	-- 联通4G覆盖率，单位：％
,case sum(IFNULL(2G_VOICE_SETUP_FAIL_COUNTS,0)) when 0 then 0 else  round(sum(IFNULL(2G_VOICE_DROP_FAIL_COUNTS,0))*100/sum(IFNULL(2G_VOICE_SETUP_FAIL_COUNTS,0)),2) end as 2g_voice_drop_rate 	-- 2g掉话率，单位：％
from FRT_FIRST_PAGE_D
where day between #{START_DAY} and #{END_DAY}
and city='广州'
#{AREA_CONDITION}
group by day
order by day
]]>
</sqlTemplate>


<sqlTemplate id="GzSpecialFstPage_update_06_secArea_city" description="地市级区域指标情况">
<![CDATA[
select DISTRICT, traffic, flow, OFF_STATION_NUM, QUIT_SERVICE_NUM, 4g_mr_cover_rate, 2g_voice_drop_rate, cnt_4G, cnt_3G
from
(
select DISTRICT
,round(sum(IFNULL(2G_TRAFFIC,0))/10000,2) as traffic -- 话务量，单位：万ERL
,round(sum(IFNULL(4G_DATA_FLOW,0))/10240000,2) as flow -- 流量，单位：万GB
,sum(OFF_STATION_NUM) as OFF_STATION_NUM     -- 断站数
,sum(QUIT_SERVICE_NUM) as QUIT_SERVICE_NUM    -- 退服数
,case sum(IFNULL(DX_RSRP_COUNT,0)) when 0 then 0 else round(sum(IFNULL(DX_RSRP_100_COUNT,0))*100/sum(IFNULL(DX_RSRP_COUNT,0)),2) end as 4g_mr_cover_rate 	-- 4G覆盖率，单位：％
,case sum(IFNULL(2G_VOICE_SETUP_FAIL_COUNTS,0)) when 0 then 0 else  round(sum(IFNULL(2G_VOICE_DROP_FAIL_COUNTS,0))*100/sum(IFNULL(2G_VOICE_SETUP_FAIL_COUNTS,0)),2) end as 2g_voice_drop_rate 	-- 2g掉话率，单位：％
from FRT_FIRST_PAGE_D
where day=#{DAY}
and city='广州'
and DISTRICT in ('天河','白云','海珠','番禺','荔湾','越秀','黄萝','东山','增城','花都','南沙','从化')
group by DISTRICT
) a
left outer join
(
select area_name
,count(distinct base_statn_id) as cnt_3G
from noce.DIM_SECTOR
where day=#{DAY}
and city_name='广州'
and area_name in ('天河','白云','海珠','番禺','荔湾','越秀','黄萝','东山','增城','花都','南沙','从化')
and nettype='3G'
group by area_name
) b
on a.DISTRICT=b.area_name
left outer join
(
select area_name
,count(distinct base_statn_id) as cnt_4G
from noce.DIM_SECTOR
where day=#{DAY}
and city_name='广州'
and area_name in ('天河','白云','海珠','番禺','荔湾','越秀','黄萝','东山','增城','花都','南沙','从化')
and nettype='4G'
group by area_name
) c
on a.DISTRICT=c.area_name
order by find_in_set(DISTRICT,'天河,白云,海珠,番禺,荔湾,越秀,黄萝,东山,增城,花都,南沙,从化')
]]>
</sqlTemplate>


<sqlTemplate id="GzSpecialFstPage_update_07_secArea_area" description="区县级营服指标情况">
<![CDATA[
select MKTCENTER, traffic, flow, OFF_STATION_NUM, QUIT_SERVICE_NUM, 4g_mr_cover_rate, 2g_voice_drop_rate, cnt_4G, cnt_3G
from
(
select MKTCENTER
,round(sum(IFNULL(2G_TRAFFIC,0))/10000,2) as traffic -- 话务量，单位：万ERL
,round(sum(IFNULL(4G_DATA_FLOW,0))/10240000,2) as flow -- 流量，单位：万GB
,sum(OFF_STATION_NUM) as OFF_STATION_NUM     -- 断站数
,sum(QUIT_SERVICE_NUM) as QUIT_SERVICE_NUM    -- 退服数
,case sum(IFNULL(DX_RSRP_COUNT,0)) when 0 then 0 else round(sum(IFNULL(DX_RSRP_100_COUNT,0))*100/sum(IFNULL(DX_RSRP_COUNT,0)),2) end as 4g_mr_cover_rate 	-- 4G覆盖率，单位：％
,case sum(IFNULL(2G_VOICE_SETUP_FAIL_COUNTS,0)) when 0 then 0 else  round(sum(IFNULL(2G_VOICE_DROP_FAIL_COUNTS,0))*100/sum(IFNULL(2G_VOICE_SETUP_FAIL_COUNTS,0)),2) end as 2g_voice_drop_rate 	-- 2g掉话率，单位：％
from FRT_FIRST_PAGE_D
where day=#{DAY}
and city='广州'
and DISTRICT='#{AREA}'
and MKTCENTER!='null'
group by MKTCENTER
) a
left outer join
(
select MKT_CENTER_NAME
,count(distinct base_statn_id) as cnt_3G
from noce.DIM_SECTOR
where day=#{DAY}
and city_name='广州'
and area_name='#{AREA}'
and nettype='3G'
group by MKT_CENTER_NAME
) b
on a.MKTCENTER=b.MKT_CENTER_NAME
left outer join
(
select MKT_CENTER_NAME
,count(distinct base_statn_id) as cnt_4G
from noce.DIM_SECTOR
where day=#{DAY}
and city_name='广州'
and area_name='#{AREA}'
and nettype='4G'
group by MKT_CENTER_NAME
) c
on a.MKTCENTER=c.MKT_CENTER_NAME
order by MKTCENTER
]]>
</sqlTemplate>

<sqlTemplate id="ITE2017P7Term_getTOP10" description="天翼手机展第7页获取TOP10型号的数据">
<![CDATA[
select * from FRT_URER_TERMTYPE_TOP_M
where 
	month = (select max(month) from FRT_URER_TERMTYPE_TOP_M) 
and
 term_short_name  not like '%UNKNOWN%' 
and
	term_short_name  not like '%unknown%' 

order by cnt desc 
limit 20
]]>
</sqlTemplate>

<sqlTemplate id="ITE2017P6NETWORK_GET12DATA" description="天翼手机展第7页获取TOP10型号的数据">
<![CDATA[
select * from ite_2017p6_networkdata
]]>
</sqlTemplate>

<sqlTemplate id="SectorExpandRecommend_selectCell" description="根据基站id和小区id获取到信息（展示在marker的点击事件中）">
<![CDATA[
select * from (
SELECT    
				a.CITY_NAME,
				a.BASE_STATN_ID,
				a.BASE_STATN_NAME,
				a.CELL_ID,
				a.CELL_NAME,
				b.band_width,
				b.total_days,
				case 
				when
					 c.ENODEBID != ''  
				then 
					'<input type="checkBox" checked ="checked"  onclick="addDataOnMarker(this)" />'
				else 
					'<input type="checkBox" onclick="addDataOnMarker(this)" />' 
				end  checkbox
			FROM
				 (select * from FRT_CELL_EXT_W  where total_days >= 6
				 AND 
				day =#{DAY})as b 
      JOIN (select * from dim_sector where day = (select max(day) from noce.dim_sector) and NETTYPE = '4G' 
      and BASE_STATN_ID = #{ENODEBID}
      and CELL_ID = #{CELLID}
      ) as a
ON  a.BASE_STATN_ID = b.ENODEBID and a.CELL_ID = b.cellid
LEFT JOIN (select * from sectorexpandrecommend_order_info  where username = '#{USERNAME}')as c
		on
			a.BASE_STATN_ID = c.ENODEBID and a.CELL_ID = c.CELLID 
		)  as temp
]]>
</sqlTemplate>


<sqlTemplate id="select_dim_sector_max_date" description="查询DIM_SECTOR 的最新时间 ">
<![CDATA[
select max(day) from noce.dim_sector
]]>
</sqlTemplate>


<sqlTemplate id="select_dim_ce_city_d_max_date" description="从dim_time_range分区中查询的最新时间 ">
<![CDATA[
select 'app' type, MAX(day) data_value from FRT_APP_CE_CITY_D
union all
select 'dpi' type, MAX(day) data_value from FRT_DPI_CE_CITY_D
]]>
</sqlTemplate>

<sqlTemplate id="select_ite_network_dpi" description="查询DIM_SECTOR 的最新时间 ">
<![CDATA[
select day
 ,High_Type
 ,round(CE_GOOD_RATIO*100, 2) as CE_GOOD_RATIO  
from noce.FRT_DPI_CE_CITY_D
where day between #{START_DAY} and #{END_DAY}
 and LATN_ID=1000
 and High_Type in (1, 3)
order by LATN_ID, day ,High_Type

]]>
</sqlTemplate>
<sqlTemplate id="select_ite_network_app" description="查询DIM_SECTOR 的最新时间 ">
<![CDATA[
select day
 ,High_Type
 ,round(CE_GOOD_RATIO*100, 2) as CE_GOOD_RATIO  
from noce.FRT_APP_CE_CITY_D
where day between #{START_DAY} and #{END_DAY}
 and LATN_ID=1000
 and High_Type in (1, 3)
order by LATN_ID, day ,High_Type

]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTest_10_allCity" description="获取所有的地市">
<![CDATA[
select a.*,b.CITY_DISPLAY_ORDER from
(SELECT DISTINCT city_name as city,DISTRICT_NAME as COUNTRY,DIS_ORDER from  dim_district_gis_data ) as a
LEFT JOIN dim_tele_city as b ON(a.city=b.CITY_NAME)
ORDER BY
		b.CITY_DISPLAY_ORDER,a.DIS_ORDER
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTest_10_allCountry" description="获取所有的地市">
<![CDATA[

SELECT  DISTINCT COUNTRY AS CITY ,MKTCENTER AS COUNTRY from  FRT_AGPS_POOR_COVERAGE_D WHERE CITY=#{CITY} and COUNTRY !='' and MKTCENTER !='' ORDER BY CITY
]]>
</sqlTemplate>

<sqlTemplate id="singlePerceptionV2_01_echart" description="用户画像V2echart图数据">
<![CDATA[
getByKeyScope
NOCE:DSI_PERSONAS
#{STARTROW}
#{ENDROW}
A:a1,A:a2,A:a3,A:a4,A:a5,A:a6,A:b1,A:b2,A:b3,A:b4,A:c1,A:c2,A:d1,A:d2,A:e1,A:e2,A:e3,A:e4,A:e5,A:e6,A:f1,A:f2,A:f3,A:f4,A:f5,A:f6,A:f7,A:f8,A:f9,A:f10,A:f11,A:f12,A:f13,A:f14,A:f15,A:f16,A:f17,A:f18,A:f19,A:f20,A:f21,A:f22,A:f23,A:f24,A:f25,A:f26,A:f27,A:j1,A:j2,A:j3,A:j4,A:j5,A:j6,A:j7,A:j8,A:j9,A:j10,A:j11,A:j12,A:j13,A:j14,A:j15,A:j16,A:j17,A:j18,A:j19,A:j20,A:j21,A:j22,A:j23,A:j24,A:j25,A:j26,A:k2
]]>
</sqlTemplate>

<sqlTemplate id="singlePerceptionV2_01_queryFault" description="查询故障告警基站">
<![CDATA[
SELECT base_statn_id,REGION,bsc_id as cell_id,alarm_time FROM frt_bsn_alarm WHERE 1=1 #{LIMIT}
]]>
</sqlTemplate>

<sqlTemplate id="singlePerceptionV2_01_queryNumber" description="查询基站电子运维单号">
	<![CDATA[
SELECT base_statn_id,BSC_ID as cell_id,ifaultticketid,dreptime,CITY_ID FROM frt_enodeb_oos_d WHERE 1=1  #{LIMIT}
]]>
</sqlTemplate>

<sqlTemplate id="singlePerceptionV2_01_queryRecove" description="查询故障已修复基站">
	<![CDATA[
SELECT base_statn_id,BSC_ID as cell_id,CITY_ID,clear_time,alarm_time FROM frt_alarm_tot_d WHERE CLEAR_TIME>#{startDay}  #{LIMIT}
]]>
</sqlTemplate>

<sqlTemplate id="singlePerception_findCellByBaseId" description="获取所有的地市">
<![CDATA[
select longitude_baidu,latitude_baidu from dim_sector
where base_statn_id =#{BASEID}
and  cell_id=#{CELLID}
and day = #{DAY}
]]>
</sqlTemplate>
<sqlTemplate id="singlePerception_position_trace_HBASE" description="位置轨迹，从HBASE取感知评分 DB:HBASE table:4.25">
	<![CDATA[
		getByKeyScope
		NOCE:DSI_LOC_COMB_USER_H
		#{STARTROW}
		#{ENDROW}
		i:a1,i:a2,i:a3,i:a4,i:a5,i:a6,i:a7,i:a8,i:a9,i:a10,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a17,i:a18,i:a19,i:a20
		rowkey 1
	]]>
</sqlTemplate>
<sqlTemplate id="singlePerception_cdrlist_trace_HBASE" description="cdr清单 DB:HBASE table:4.28">
    <![CDATA[
    getByKeyScope
    NOCE:DSI_LTE_CDR_H
    #{STARTROW}
    #{ENDROW}
    i:a1,i:a2,i:a3,i:a4,i:a5,i:a6,i:a7,i:a8,i:a9,i:a10,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a17
    rowkey 1
]]>
</sqlTemplate>
<sqlTemplate id="singlePerception_networkAna_hbase4.19" description="网络性能分析 DB:hbase table:4.19 DSI_WIRELESS_KPI_STAT_D_MX">
	<![CDATA[
		getByKeys
		NOCE:DSI_WIRELESS_KPI_STAT_D_M#{MONTH}
		#{KEYLIST}
		i:a1,i:a2,i:a3,i:a4,i:a5,i:a6,i:a7,i:a8,i:a9,i:a10,i:a11,i:a12,i:a13,i:a14,i:a15,i:b1,i:b2,i:b3,i:b4,i:b5
		rowkey 1
	]]>
</sqlTemplate>
<sqlTemplate id="singlePerception_getLonLatByBaseCell_mysql" description="dim_secotr,通过基站id，小区id拿数据">
<![CDATA[
SELECT
	*
FROM
	dim_sector
WHERE
	DAY = (
		SELECT
			MAX(DAY)
		FROM
			dim_sector
	)
#{BASEANDCELLID}
]]>
</sqlTemplate>

	<sqlTemplate id="singlePerception_srufing_trace_HBASE" description="上网轨迹，从HBASE取感知评分">
<![CDATA[
getByKeyScope
NOCE:DSI_EVT_LTE_DPI_NEW_#{MONTH}
#{STARTROW}
#{ENDROW}
i:A
rowkey 1
]]>
</sqlTemplate>
	<sqlTemplate id="singlePerception_gripNum_hbase" description="4.29 DSI_MRO_ALL_GRID_TOT_W栅格数量"  DB="hbase">
<![CDATA[
getGridsByContour
NOCE:DSI_MRO_ALL_GRID_TOT_W
#{GRIDKEYPREFIX}
20
#{POLYGONCONTOUR}
i:a7
#{PARTITIONMOD}
rowkey 1
]]>
	</sqlTemplate>
<sqlTemplate id="singlePerception_getBsNameByBsId_mysql" description="1.12dim_sector基站ID对应的基站名称" DB="mysql">
	<![CDATA[
select BASE_STATN_NAME,BASE_STATN_ID,NETTYPE FROM dim_sector WHERE BASE_STATN_ID in(#{basIds}) and `DAY`=#{day} and BASE_STATN_NAME is not null GROUP BY BASE_STATN_NAME
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV2_01" description="查询全省弱区时间变化">
<![CDATA[
SELECT day,badcount,proportion,new_count from(
SELECT
	city,
	day,
count(object_id) badcount,
SUM(poor_grid_nums) poor_grid_nums,sum(New_Added_Flag) new_count
FROM
	FRT_AGPS_POOR_COVERAGE_D
WHERE DAY BETWEEN #{starDate} and #{endDate}
AND grid_type=20
AND TYPE = 0
AND city <> ''
GROUP BY day ) as a LEFT JOIN
(select SUM(JOINT_POOR_105_GRIDS)/sum(ALL_AGPS_GRIDS) as proportion ,day as day1  from 
FRT_MRO_AGPS_GRID_TOT_D WHERE DAY BETWEEN #{starDate} and #{endDate} GROUP BY day1) b

ON a.day=b.day1
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV2_02" description="查询全全市弱区时间变化">
<![CDATA[
SELECT day,badcount,proportion,new_count FROM
(
SELECT
	city,
	day,
count(object_id) badcount,
SUM(poor_grid_nums) poor_grid_nums,sum(New_Added_Flag) new_count
FROM
	FRT_AGPS_POOR_COVERAGE_D
WHERE DAY BETWEEN #{starDate} and #{endDate}
AND grid_type=20
AND TYPE = 0
AND city_id = #{city}
AND country  <> ''
GROUP BY day 
ORDER BY day) as f LEFT JOIN
(select SUM(JOINT_POOR_105_GRIDS)/sum(ALL_AGPS_GRIDS) as proportion ,city as city2,day as day2 from 
FRT_MRO_AGPS_GRID_TOT_D WHERE DAY BETWEEN #{starDate} and #{endDate} GROUP BY city2,day2)as g on  (f.city=g.city2 and f.day=g.day2 )
]]>
</sqlTemplate>


	<sqlTemplate id="IntelligentRoadTestV2_18_dtTableList" description="路测列表">
		<![CDATA[
SELECT
	id,
	dt_name,
	date_format(dt_time, '%Y-%m-%d') dt_time,
	date_format(create_time, '%Y-%m-%d') create_time,
	creator,
	city,
	'描点' AS circle,
	'栅格' AS grid,
	'下载' AS fileupload,
CASE WHEN creator ='#{USERNAME}'
THEN  1
else  0 END isCanDelete,
center_longitude_baidu,
center_latgitude_baidu
FROM
	user_dt_list
WHERE 1=1
and is_read = 0
#{CITY}
#{DATE}
]]>
	</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV2_19_dtTableList" description="路测列表">
	<![CDATA[
SELECT
	id,
	dt_name,
	date_format(dt_time, '%Y-%m-%d') dt_time,
	date_format(create_time, '%Y-%m-%d') create_time,
	creator,
	city,
	share_status,
	audit_option,
	share_scope,
	'0' as color,
	'0' AS custom_area_style,
	'1' AS TYPE,
	'描点' AS circle,
	'栅格' AS grid,
	'下载' AS fileupload,
CASE WHEN creator ='#{USERNAME}'
THEN  1
else  0 END isCanDelete,
center_longitude_baidu,
center_latgitude_baidu
FROM
	user_dt_list
WHERE 1=1
and is_read = 0
#{CITY}
#{DATE}

#{Condition}
UNION


SELECT
	id,
	custom_name AS dt_name,
	DATE_FORMAT(file_time, '%Y-%m-%d') dt_time,
	DATE_FORMAT(file_import_time, '%Y-%m-%d') create_time,
	creator,
	city,
	share_status,
	audit_option,
	share_scope,
	color,
	custom_area_style,
	'2' AS TYPE,
	'描点' AS circle,
	'栅格' AS grid,
	'下载' AS fileupload,
CASE WHEN creator ='#{USERNAME}'
THEN  1
ELSE  0 END isCanDelete,
0 AS center_longitude_baidu,
0 AS center_latgitude_baidu
FROM
	dm_custom_area_list
WHERE 1=1
AND is_delete = 0

#{Condition}
#{CITY}
#{DATE}
]]>
</sqlTemplate>
    <sqlTemplate id="IntelligentRoadTestV2_09_areaTable" description="取区域明细数据（区县或者营服）V2版本">
        <![CDATA[
SELECT
g.object_id,
g.type,
g.longitude_min_baidu,
g.latitude_min_baidu,
g.longitude_mid_baidu,
g.latitude_mid_baidu,
g.longitude_max_baidu,
g.latitude_max_baidu,
g.city,
g.country,
g.MKTCENTER_ID,
g.mktcenter,
round(g.MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(g.MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
g.address,
g.enodeb_id,
g.CELL_ID,
g.POOR_GRID_NUMS,
g.CELL_NAME,
g.CELL_STATE,
g.TOP5_SECTOR_SET,
g.SECTOR_SET,
g.ALARM_NUMS,
g.ALARM_CELLS,
g.NR_ALARM_CELLS,
g.PC_TOT_CityNo,
g.POOR_GRID_NUMS_ORDERNO,
CASE g.do_type
 WHEN 1 THEN '工程'
 WHEN 2 THEN '维护'
 WHEN 3 THEN '优化'
 WHEN 4 THEN '规划'
ELSE '未知' END AS do_type,
case
 when f.order_id is null then  0
 else 1 END  isHasOrder ,
g.lte_to_3g_tot,
g.lte_to_3g_orderno,
round(g.flow_4g_tot,2) flow_4g_tot,
g.flow_4g_orderno,
g.user_4g_avg,
g.user_4g_orderno,
round(g.CE_GOOD_RATIO_AVG*100,2) CE_GOOD_RATIO_AVG,
g.ce_good_ratio_orderno,
g.ALL_GRID_NUMS,
g.POOR_GRID_NUMS_OrderNo,
g.POOR_GRID_AREA,
g.ALL_GRID_AREA,
g.LONGITUDE_MID_BaiDu,
g.LATITUDE_MID_BaiDu,
CASE g.BELONG_AREA_ID
 WHEN 1 THEN '市区'
 WHEN 2 THEN '县城'
 WHEN 3 THEN '乡镇'
 WHEN 4 THEN '农村'
ELSE '未知' END AS BELONG_AREA_ID,
g.GIS_DATA,
round(g.pc_orderno_tot,2) pc_orderno_tot,
g.day,
g.SCENE_TYPE,
f.order_id,
g.city_id,
g.country_id,
g.TOP5_ALARM_NUMS,
g.NEW_ADDED_FLAG
from (
SELECT
*
FROM FRT_AGPS_POOR_COVERAGE_D
WHERE DAY = #{DAY}
AND TYPE = #{TYPE}
AND city='#{CITY}'
#{COUNTRY}
#{MKTCENTER_ID}
#{DO_TYPE}
AND grid_type = 20
AND gis_data is not null
) as g LEFT JOIN ALT_AGPS_POOR_COVERAGE_D as f ON (g.day=f.day and g.OBJECT_ID =f.object_id and  g.grid_type=f.grid_type)
]]>
    </sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV2_08_polygonGis" description="取地市弱区轮廓数据(包含提示信息)">
        <![CDATA[
SELECT
object_id,
LONGITUDE_MID_BaiDu,
latitude_mid_baidu,
gis_data,
CASE type
 	WHEN 0 THEN 'poor'
 	WHEN 4 THEN 'upPoorArea'
	WHEN 5 THEN 'downPoorArea'
	WHEN 6 THEN 'm3PoorArea'
	WHEN 7 THEN 'olPoorArea'
	WHEN 8 THEN 'cbPoorArea'
ELSE '' END as type
FROM FRT_AGPS_POOR_COVERAGE_D
WHERE DAY = #{DAY}
AND TYPE in (#{TYPE})
AND city='#{CITY}'
#{COUNTRY}
AND gis_data is not null
#{POORGRIDNUMS}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV2_08_1_polygonGis" description="取地市弱区轮廓数据(重叠、覆盖、mod3)">
<![CDATA[
select
CITY_ID,
ENODEB_ID,
CELL_ID,
LONGITUDE_MID_BaiDu,
LATITUDE_MID_BaiDu,
ant_azimuth,
band_mapping,
is_indoor
from FRT_AGPS_PC_ENB_D
WHERE DAY = #{DAY}
AND city='#{CITY}'
#{COUNTRY}
AND #{TYPE}
AND LONGITUDE_MID_BaiDu is not null
AND LATITUDE_MID_BaiDu is not null
AND CITY_ID is not null
]]>
</sqlTemplate>
    <sqlTemplate id="IntelligentRoadTestV2_18_CityConcernArea" description="查询地市关注区域">
        <![CDATA[
SELECT
id,
area_name,
gis_data_baidu
FROM dm_user_concern_area
where 1=1
#{CITY}
#{COUNTRY}
]]>
    </sqlTemplate>
    <sqlTemplate id="IntelligentRoadTestV2_18_CityBoneArea" description="查询地市骨头区域">
        <![CDATA[
SELECT
id,
object_name,
GIS_DATA
FROM frt_agps_poor_area_m
where 1=1
AND MONTH = #{MONTH}
#{CITY}
#{COUNTRY}
]]>
    </sqlTemplate>

	<sqlTemplate id="IntelligentRoadTestV2_18_allConcernArea" description="查询关注区域列表V2">
		<![CDATA[
SELECT
id,
area_name,
AREA_TYPE,
creator,
create_time,
CITY,
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
handle_description,
round(rsrp,2) rsrp,
round(cover*100,2) cover,
recent_base_statn_id,
recent_cell_id,
recent_cell_name,
gis_data_baidu,
max_longitude_baidu,
max_latitude_baidu,
min_longitude_baidu,
min_latitude_baidu,
handle_time,
RSRP,
COVER,
RECENT_BASE_STATN_ID,
RECENT_CELL_ID,
RECENT_CELL_NAME,
SECTOR_SET,
LTE_TO_3G_TOT,
FLOW_4G_TOT,
CE_GOOD_RATIO_AVG,
USER_4G_AVG,
RSRP_SUM,
RSRP_COUNT,
RSRP_COUNT_105,
GRID_COUNT,
ORDERNO_TOT,
NE_SECTOR_SET,
CITY_ID,
COUNTRY,
COUNTRY_ID,
MKTCENTER,
MKTCENTER_ID,
share_scope ,
share_status ,
audit_option ,
round((POOR_GRID_COUNT/GRID_COUNT)*100 , 2) as poor_grid_radio
FROM dm_user_concern_area
where 1=1
#{CITY}
#{COUNTRY}
#{MKTCENTER}
]]>
	</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV2_BoneArea" description="查询骨头区域列表V2">
<![CDATA[
	SELECT *,
	CASE
	WHEN is_suspend IS NULL THEN  'N'
	ELSE 'Y' END  IS_SUSPENDSORT
	FROM frt_agps_poor_area_m
	where 1=1 and month = #{MONTH}
	#{CITY}
	#{COUNTRY}
	#{MKTCENTER}
	 order BY IS_SUSPEND DESC
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV2_Polygon" description="查询骨头区域列表V2">
<![CDATA[
	SELECT 
	day,
object_id,
gis_data,
city_id,
country_id,
mktcenter,
LONGITUDE_MID_BAIDU as lng,
LATITUDE_MID_BAIDU as lat
FROM FRT_AGPS_POOR_COVERAGE_D
WHERE object_id=#{OBJECT_ID} and day=#{DAY}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV2_Grid" description="查询骨头区域列表V2">
<![CDATA[
getByKeyScope
NOCE:DSI_MRO_AGPS_GRID_TOT_D
#{DAY}_20_2_#{CITY_ID}_#{COUNTRY_ID}_#{OBJECT_ID}_
#{DAY}_20_2_#{CITY_ID}_#{COUNTRY_ID}_#{OBJECT_ID}_~
i:a11,i:a12,i:a15,i:a16,i:a27
rowkey 1
]]>
</sqlTemplate>

	<!--从dim_sector上查询扇区的其他信息-->
<sqlTemplate id="IntelligentRoadTestV2_09_sectorMessage" description="取基站的一些其他信息V2">
<![CDATA[
select BASE_STATN_ID , -- 基站ID
CELL_ID , -- 小区ID
BAND, -- 频段
HIGH , -- 天线挂高
ant_azimuth , -- 天线方位角
ant_engine_angle , -- 机械下倾角
ant_electron_angle , -- 电子下倾角
acceptstatus , -- 验收状态
bs_vendor, -- 基站厂家
IS_INDOOR, -- 室内外标识
band_width, -- 下行带宽
LONGITUDE_BAIDU as lng, -- 百度经度
LATITUDE_BAIDU as lat, -- 百度纬度
BAND_MAPPING as band_level -- 频段映射
from dim_sector
WHERE DAY = #{DAY}
and BASE_STATN_ID = #{ENODEBID} AND CELL_ID = #{CELLID}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_10_getSectorOtherMessage" description="取基站的一些其他信息(覆盖率、rsrp均值和mr记录数)">
<![CDATA[
select
round((SC_RSRP_105_Cnt/SC_RSRP_140_Cnt) * 100 , 2)   as cover_rate, -- 覆盖率
SC_RSRP_140_Avg as rsrp_avg ,  -- rsrp均值
SC_RSRP_140_Cnt as mr_count , -- mr总记录数
AGPS_TYPE as agps_type  -- 0为全量 1为AGPS-MR
from FRT_MRO_ALL_CELL_D
WHERE DAY = #{DAY}
and eNodeB_ID = #{ENODEBID} AND CELL_ID = #{CELLID}

]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_12_polygonAlarmTable" description="取弱区主服务小区（top5）告警表格数据V2">
<![CDATA[
SELECT
day,-- 日期
base_statn_id, -- 基站ID
CELL_ID, -- 小区ID
FACTORY, -- 厂家
RECTIME, -- 接收告警时间
ALARM_TIME, -- 告警时间
CLEAR_TIME, -- 告警恢复时间
ALARM_LEVEL, -- 告警级别
ISRECOVER, -- 是否恢复
OUTOFSRV, -- 是否断站退服
PROB_CAUSE, -- 告警内容
ALARM_SCOPE -- 告警范围
FROM FRT_BSN_ALARM_HIS_D
WHERE DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
AND base_statn_id = #{ENODEBID} AND CELL_ID = #{CELLID}
AND ALARM_SCOPE = 'CELL'
AND OUTOFSRV = 1
UNION ALL
SELECT
day,-- 日期
base_statn_id, -- 基站ID
CELL_ID, -- 小区ID
FACTORY, -- 厂家
RECTIME, -- 接收告警时间
ALARM_TIME, -- 告警时间
CLEAR_TIME, -- 告警恢复时间
ALARM_LEVEL, -- 告警级别
ISRECOVER, -- 是否恢复
OUTOFSRV, -- 是否断站退服
PROB_CAUSE, -- 告警内容
ALARM_SCOPE -- 告警范围
FROM FRT_BSN_ALARM_HIS_D
WHERE DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
AND base_statn_id = #{ENODEBID}
AND ALARM_SCOPE = 'BASE_STATION'
AND OUTOFSRV = 1
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV2_14_polygonKPITable" description="取弱区主服务小区（top5）KPI表格数据V2">
<![CDATA[
SELECT
DAY,
enodebid,
CELLID, -- 小区ID
cell_name,
round(ERAB_SUCC_RATE*100,2) ERAB_SUCC_RATE, -- E-RAB建立成功率(%)
round(ERAB_DROP_RATE*100,2) ERAB_DROP_RATE, -- E-RAB掉线率(%)
round(RRCCON_SUCCRATE*100,2) RRCCON_SUCCRATE, -- RRC连接建立成功率(%)
round(SWCHSF_SUCC_RATE*100,2) SWCHSF_SUCC_RATE, -- 同频切换成功率(%)
round(SWCHAF_SUCC_RATE*100,2) SWCHAF_SUCC_RATE, -- 异频切换成功率(%)
round(UP_PRB_USERATE*100,2) UP_PRB_USERATE, -- 上行PRB资源利用率（业务信息）
round(DW_PRB_USERATE*100,2) DW_PRB_USERATE, -- 下行PRB平均利用率(%)
Counter0003, -- 最大RRC连接用户数
round((PDCH_DWFLOW+PDCH_UPFLOW),2) as PDCH_FLOW -- PDCP层流量(MB)
FROM FRT_WIRELESS_KPI_STAT_D
WHERE DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
and enodebid = #{ENODEBID} and cellid = #{CELLID}
]]>
</sqlTemplate>

	<!--取扇区列表数据-->
<sqlTemplate id="IntelligentRoadTestAnalysi_v2_sector" description="取基站Table（区县或者营服）">
<![CDATA[
SELECT
g.day,
g.city,
g.city_id,
g.country,
g.country_id,
g.mktcenter,
round(g.MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(g.MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
g.ENODEB_ID,
g.CELL_ID,
g.CELL_NAME,
CASE g.BELONG_AREA_ID
 WHEN 1 THEN '市区'
 WHEN 2 THEN '县城'
 WHEN 3 THEN '乡镇'
 WHEN 4 THEN '农村'
ELSE '未知' END AS BELONG_AREA_ID,
g.ALARM_LEVEL,
g.ALARM_NUMS,
g.CELL_STATE,
g.POOR_COVERAGE_COUNT,
g.NB_POOR_COVERAGE_COUNT,
g.LTE_TO_3G_TOT,
g.Flow_4G_TOT,
g.User_4G_AVG,
g.CE_GOOD_RATIO_AVG,
g.GRID_NUMS,
g.LONGITUDE_MID_BAIDU,
g.LATITUDE_MID_BAIDU,
g.PRED_LOCATION_BAIDU,
g.BS_VENDOR, -- 厂家
#{SECTORTYPE} -- 用于添加是否是专题扇区的字段
g.CBMRNUM, -- 越区全量MR数
g.OLMRNUM, -- 重叠全量MR数
g.M3MRNUM, -- MOD3全量MR数
g.AGPS_OLMRNUM, -- 重叠AGPSMR数
g.AGPS_M3MRNUM, -- MOD3AGPSMR数
g.ANT_AZIMUTH, -- 方位角
g.band_mapping, -- 频段映射
g.pci , -- PCI
g.pilot_power, -- 功率
round(g.CBMRRAT * 100 , 2) as cb_mrrat, -- 越区覆盖的占比
round(g.OLMRRAT * 100 , 2) as ol_mrrat, -- 重叠覆盖的占比
round(g.M3MRRAT * 100 , 2) as m3_mrrat, -- 模三干扰的占比
g.CB_OrderNo_TOT, -- 越区扇区的推荐排序字段
g.OL_OrderNo_TOT, -- 重叠扇区的推荐排序字段
g.M3_OrderNo_TOT, -- MOD3干扰扇区的推荐排序字段
g.agps_mr_count, -- 越区覆盖的MR条数
g.ALL_MR_COUNT, -- 模三干扰和重叠的MR条数
g.CB_IS_NEW, -- 是否是新增的越区扇区
g.OL_IS_NEW, -- 是否是新增的重叠扇区
g.M3_IS_NEW, -- 是否是新增的M3干扰扇区
g.CB_GRID_COUNT, -- 越区栅格数
g.OL_GRID_COUNT, -- 重叠栅格数
g.M3_GRID_COUNT, -- M3干扰栅格数
g.LTE_USER_COUNT, -- 全量4G用户数
g.ENODEB_ID as statn_id,
g.cell_id,
g.ORDERNO_TOT,
g.is_indoor, -- 室内外标识
g.PRED_LOCATION_GPS ,
g.LOCATION_GPS,
g.AGPS_MR_COUNT , -- 包含AGPS的MR条数
g.PRED_AZIMUTH , -- 预测角度
g.PRED_AZIMUTH_DIFF , -- 偏离角度
g.SURPORT_NUMBER , -- 预测位置支持MR条数
g.PRED_DISTANCE , -- 预测位置的相差距离
g.IS_ANT_CONN_ABNOR, -- 天馈接反
g.SURP_AZIMUTH_COUNT  -- 支持方位角预测条数
FROM FRT_AGPS_PC_ENB_D as g
WHERE DAY = #{DAY}
and city_id = #{CITY_ID}
AND COUNTRY = '#{COUNTRY}'
#{MKTCENTER_ID}
#{TYPE} -- 用于区分专题扇区和一般扇区的字段

]]>
</sqlTemplate>

<!--取专题扇区的覆盖趋势图和占比趋势图的数据-->

<sqlTemplate id="IntelligentRoadTestAnalysisV2_getSectorZhanBiRate" description="取重叠覆盖和与越区覆盖专题扇区的占比趋势图的数据">
<![CDATA[
select
	round( #{RATE} * 100 , 2)  as mr_rate, -- 占比
	day
	from FRT_AGPS_PC_ENB_D
where
	day between #{STARTDAY} AND  #{ENDDAY}
	AND ENODEB_ID = #{ENODEBID}
	AND CELL_ID = #{CELLID}
	order by day
]]>
</sqlTemplate>

	<!--模三干扰和其他两个专题扇区不一样，所以独立一个模板-->
<sqlTemplate id="IntelligentRoadTestAnalysisV2_getSectorM3FGanRaoRate" description="取模三干扰专题扇区的占比趋势图的数据">
<![CDATA[
select
round( (M3MRNUM_SC0/ ALL_MR_COUNT)* 100 , 2 ) as sc0 , -- 作为主扇区的模0干扰度
round( (M3MRNUM_SC1/ ALL_MR_COUNT)* 100 , 2 ) as  sc1, -- 作为主扇区的模1干扰度
round( (M3MRNUM_SC2/ ALL_MR_COUNT)* 100 , 2 ) as  sc2, -- 作为主扇区的模2干扰度
round( (M3MRNUM_NC0/ ALL_MR_NC_COUNT)* 100 , 2 ) as nc0 , -- 作为邻区扇区的模0干扰度
round( (M3MRNUM_NC1/ ALL_MR_NC_COUNT)* 100 , 2 ) as  nc1, -- 作为邻区扇区的模1干扰度
round( (M3MRNUM_NC2/ ALL_MR_NC_COUNT)* 100 , 2 ) as  nc2, -- 作为邻区扇区的模2干扰度
 day -- 日期
from FRT_AGPS_PC_ENB_D
where
day between #{STARTDAY} AND  #{ENDDAY}
	AND ENODEB_ID = #{ENODEBID}
	AND CELL_ID = #{CELLID}
	order by day
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_getSectorCovRate" description="取专题扇区的覆盖率趋势图的数据">
<![CDATA[
select
round( (SC_RSRP_105_Cnt/SC_RSRP_140_Cnt) * 100 , 2) as cov_rate, -- 覆盖率
day
from FRT_MRO_ALL_CELL_D
where
day between #{STARTDAY} AND  #{ENDDAY}
AND ENODEB_ID = #{ENODEBID}
AND CELL_ID = #{CELLID}
and AGPS_TYPE=0
order by day
]]>
</sqlTemplate>

    <!--这个模板用于专题区域的详情页-->
<sqlTemplate id="IntelligentRoadTestAnalysisV3_getPoorAreaZhuanTiSector" description="取专题区域的专题扇区数据">
<![CDATA[
SELECT
	TOP_CELL_SET,
	DAY
FROM
	FRT_AGPS_POOR_COVERAGE_D
WHERE
	DAY = #{DAY}
AND CITY_ID = #{CITY_ID}
and OBJECT_ID = #{OBJECT_ID}
and TYPE = #{TYPE}
]]>
</sqlTemplate>


<sqlTemplate id="IntelligentRoadTestAnalysisV2_poorArea_detil" description="取单个弱区的详细信息">
<![CDATA[
SELECT
	CITY_ID,
	COUNTRY_ID,
	OBJECT_ID
FROM
	frt_agps_poor_coverage_d
WHERE
	DAY = #{DAY}
AND TYPE = 0
AND OBJECT_ID = #{OBJECT_ID}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestAnalysisV2_concernArea_detil" description="取单个关注区域的详细信息">
        <![CDATA[
SELECT
id,
area_name,
AREA_TYPE,
creator,
create_time,
CITY,
handle_description,
round(rsrp,2) rsrp,
round(cover*100,2) cover,
recent_base_statn_id,
recent_cell_id,
recent_cell_name,
gis_data_baidu,
max_longitude_baidu,
max_latitude_baidu,
min_longitude_baidu,
min_latitude_baidu,
handle_time,
RSRP,
COVER,
RECENT_BASE_STATN_ID,
RECENT_CELL_ID,
RECENT_CELL_NAME,
SECTOR_SET,
LTE_TO_3G_TOT,
FLOW_4G_TOT,
CE_GOOD_RATIO_AVG,
USER_4G_AVG,
RSRP_SUM,
RSRP_COUNT,
RSRP_COUNT_105,
GRID_COUNT,
round((POOR_GRID_COUNT/GRID_COUNT)*100 , 2) as poor_grid_radio
FROM dm_user_concern_area
where 1=1
and id=#{ID}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestAnalysisV2_boneArea_detil" description="取单个骨头区域的详细信息">
<![CDATA[
SELECT *
	FROM frt_agps_poor_area_m
	where 1=1 and month = #{MONTH}
	and id = #{ID}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getPoorAreaByObjectId" description="取单个弱区区域明细数据">
<![CDATA[
SELECT
g.object_id,
g.type,
g.longitude_min_baidu,
g.latitude_min_baidu,
g.longitude_mid_baidu,
g.latitude_mid_baidu,
g.longitude_max_baidu,
g.latitude_max_baidu,
g.city,
g.country,
g.MKTCENTER_ID,
g.mktcenter,
round(g.MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(g.MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
g.address,
g.enodeb_id,
g.CELL_ID,
g.CELL_NAME,
g.CELL_STATE,
g.TOP5_SECTOR_SET,
g.SECTOR_SET,
g.ALARM_NUMS,
g.ALARM_CELLS,
g.NR_ALARM_CELLS,
g.PC_TOT_CityNo,
g.POOR_GRID_NUMS_ORDERNO,
CASE g.do_type
    WHEN 1 THEN '工程'
    WHEN 2 THEN '维护'
    WHEN 3 THEN '优化'
    WHEN 4 THEN '规划'
ELSE '未知' END AS do_type,
case
when f.order_id is null then  0
else 1 END  isHasOrder ,
g.lte_to_3g_tot,
g.lte_to_3g_orderno,
round(g.flow_4g_tot,2) flow_4g_tot,
g.flow_4g_orderno,
g.user_4g_avg,
g.user_4g_orderno,
round(g.CE_GOOD_RATIO_AVG*100,2) CE_GOOD_RATIO_AVG,
g.ce_good_ratio_orderno,
g.ALL_GRID_NUMS,
g.POOR_GRID_NUMS_OrderNo,
g.POOR_GRID_AREA,
g.ALL_GRID_AREA,
g.LONGITUDE_MID_BaiDu,
g.LATITUDE_MID_BaiDu,
CASE g.BELONG_AREA_ID
    WHEN 1 THEN '市区'
    WHEN 2 THEN '县城'
    WHEN 3 THEN '乡镇'
    WHEN 4 THEN '农村'
ELSE '未知' END AS BELONG_AREA_ID,
g.GIS_DATA,
round(g.pc_orderno_tot,2) pc_orderno_tot,
g.day,
g.SCENE_TYPE,
g.city_id,
g.country_id,
f.order_id
from (
SELECT
*
FROM FRT_AGPS_POOR_COVERAGE_D
WHERE DAY = #{DAY}
AND TYPE = #{TYPE}
AND object_id = #{OBJECTID}
AND grid_type = 20
AND gis_data is not null
) as g LEFT JOIN ALT_AGPS_POOR_COVERAGE_D as f ON (g.day=f.day and g.OBJECT_ID =f.object_id and  g.grid_type=f.grid_type)
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTest_14_polygonMacSectorTable" description="取宏站勘误的取数模板">
<![CDATA[
SELECT
	CITY , COUNTRY , MKTCENTER , ENODEB_ID ,  CELL_ID , CELL_NAME , LONGITUDE_MID_BaiDu ,
  LATITUDE_MID_BaiDu , ALARM_LEVEL , PRED_LOCATION_BAIDU , PRED_LOCATION_GPS ,
  PRED_DISTANCE ,  LOCA_CORR_PRIORIATY , NB_POOR_COVERAGE_COUNT, FLOW_4G_TOT ,DAY,ant_azimuth,band_mapping ,
  AGPS_MR_COUNT , -- 包含AGPS的MR条数
  AGPS_MR_DIST_AVG , -- 包含AGPS的MR与小区平均距离
  AGPS_MR_DIST_TA , -- 包含AGPS的MR与小区每TA平均距离
  PRED_AZIMUTH , -- 预测角度
  PRED_AZIMUTH_DIFF , -- 偏离角度
  SURP_AZIMUTH_COUNT , -- 支持方位角预测条数
  SURPORT_NUMBER , -- 预测位置支持MR条数
  IS_ANT_CONN_ABNOR, -- 天馈接反
  LOCATION_GPS,(select ALT_NO from  ALT_ESBH_ENB_D B where B.ENODEB_ID=A.ENODEB_ID and B.CELL_ID=A.CELL_ID and b.day=a.day)ALT_NO
from
	FRT_AGPS_PC_ENB_D A
where day = #{DAY}
and city = '#{CITY}'
#{COUNTRY}
#{MKTCENTER}
and ENODEB_ID is not null
and CELL_ID is not null
and LONGITUDE_MID_BaiDu is not null and LONGITUDE_MID_BaiDu != ""
and LATITUDE_MID_BaiDu  is not null and LATITUDE_MID_BaiDu != ""
and PRED_LOCATION_BAIDU is not null and PRED_LOCATION_BAIDU != ""
and PRED_LOCATION_BAIDU is not null and PRED_LOCATION_BAIDU != ""
and is_indoor = '室外'
]]>
</sqlTemplate>

	<!--取单个扇区的详细数据-->
<sqlTemplate id="IntelligentRoadTestAnalysisV2_getSectorById" description="根据基站ID和小区ID获取基站信息">
<![CDATA[
SELECT
g.day,
g.ENODEB_NAME,
g.city,
g.city_id,
g.country,
g.country_id,
g.mktcenter,
round(g.MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(g.MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
g.ENODEB_ID,
g.CELL_ID,
g.CELL_NAME,
CASE g.BELONG_AREA_ID
WHEN 1 THEN '市区'
WHEN 2 THEN '县城'
WHEN 3 THEN '乡镇'
WHEN 4 THEN '农村'
ELSE '未知' END AS BELONG_AREA_ID,
g.ALARM_LEVEL,
g.ALARM_NUMS,
g.CELL_STATE,
g.POOR_COVERAGE_COUNT,
g.NB_POOR_COVERAGE_COUNT,
g.LTE_TO_3G_TOT,
g.Flow_4G_TOT,
g.User_4G_AVG,
g.CE_GOOD_RATIO_AVG,
g.GRID_NUMS,
g.POOR_COVERAGE_SET ,
g.NB_POOR_COVERAGE_SET,
concat(g.ENODEB_ID,',',g.CELL_ID)as sector_set,
g.LONGITUDE_MID_BAIDU,
g.LATITUDE_MID_BAIDU,
g.PRED_LOCATION_BAIDU,
g.ant_azimuth,g.band_mapping ,
g.PRED_LOCATION_GPS ,
g.BS_VENDOR, -- 厂家
g.LOCATION_GPS,
g.is_indoor,
g.pci , -- PCI
g.pilot_power, -- 功率
#{SECTORTYPE} -- 用于添加是否是专题扇区的字段
round(g.CBMRRAT * 100 , 2) as cb_mrrat, -- 越区覆盖的占比
round(g.OLMRRAT * 100 , 2) as ol_mrrat, -- 重叠覆盖的占比
round(g.M3MRRAT * 100 , 2) as m3_mrrat, -- 模三干扰的占比
g.CB_OrderNo_TOT, -- 越区扇区的推荐排序字段
g.OL_OrderNo_TOT, -- 重叠扇区的推荐排序字段
g.M3_OrderNo_TOT, -- MOD3干扰扇区的推荐排序字段
g.STATION_SPACING, -- 站间距
g.SPACING_AGPS_MRNUM, -- 各站间距AGPS数量
g.SPACING_AGPS_MRNUM_D, -- 各站间距AGPS数量(天）
g.CBMRNUM, -- 越区全量MR数
g.OLMRNUM, -- 重叠全量MR数
g.M3MRNUM, -- MOD3全量MR数
g.AGPS_OLMRNUM, -- 重叠AGPSMR数
g.AGPS_M3MRNUM, -- MOD3AGPSMR数
g.agps_mr_count, -- 越区覆盖的MR条数
g.ALL_MR_COUNT, -- 模三干扰和重叠的MR条数
g.CB_IS_NEW, -- 是否是新增的越区扇区
g.OL_IS_NEW, -- 是否是新增的重叠扇区
g.M3_IS_NEW, -- 是否是新增的M3干扰扇区
g.CB_GRID_COUNT, -- 越区栅格数
g.OL_GRID_COUNT, -- 重叠栅格数
g.M3_GRID_COUNT, -- M3干扰栅格数
g.LTE_USER_COUNT, -- 全量4G用户数
g.CBNCCELL_SET,-- 越区邻区列表
g.OLNCCELL_SET, -- 重叠邻区列表
g.M3NCCELL_SET, -- M3邻区列表
g.AGPS_MR_COUNT , -- 包含AGPS的MR条数
g.AGPS_MR_DIST_AVG , -- 包含AGPS的MR与小区平均距离
g.AGPS_MR_DIST_TA , -- 包含AGPS的MR与小区每TA平均距离
g.PRED_AZIMUTH , -- 预测角度
g.PRED_AZIMUTH_DIFF , -- 偏离角度
g.SURPORT_NUMBER , -- 预测位置支持MR条数
g.PRED_DISTANCE , -- 预测位置的相差距离
g.IS_ANT_CONN_ABNOR, -- 天馈接反
g.SURP_AZIMUTH_COUNT  -- 支持方位角预测条数

FROM FRT_AGPS_PC_ENB_D as g
WHERE DAY = #{DAY}
AND  ENODEB_ID = #{ENODEBID}
AND CELL_ID = #{CELLID}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentTuning_get_mrAndApgsRate" description="根据基站ID和小区ID获取基站信息获取全量mr和agps-mr的覆盖率">
<![CDATA[
select
round(SC_RSRP_105_CNT/SC_RSRP_140_CNT*100,2) COV_RATE,
agps_type
from frt_mro_all_cell_d
where DAY = #{DAY}
AND  ENODEB_ID = #{ENODEBID}
AND CELL_ID = #{CELLID}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestAnalysisV2_getAlarmArea" description="获取工单对应的弱区">
<![CDATA[
select 
trim(LONGITUDE_MID_BaiDu) as LONGITUDE_MID_BaiDu,trim(LATITUDE_MID_BaiDu) as LATITUDE_MID_BaiDu 
,OBJECT_ID
, eNodeB_ID,CELL_ID ,CELL_NAME,'扇区勘误' order_type, alarm_id


from (
select b.LONGITUDE_MID_BaiDu , b.LATITUDE_MID_BaiDu 
,CONCAT(b.eNodeB_ID,'_', b.CELL_ID) OBJECT_ID
,b. eNodeB_ID, b.CELL_ID ,b.CELL_NAME,'扇区勘误' order_type,b.alt_no as alarm_id
from alt_esbh_enb_d b 
where b.alt_no in(#{ALT_NO_LIST})
union all
select b.LONGITUDE_MID_BaiDu , b.LATITUDE_MID_BaiDu 
, b.OBJECT_ID 
,b. eNodeB_ID, b.CELL_ID ,b.cell_name ,'弱区' order_type,a.order_id as alarm_id
 from ALT_AGPS_POOR_COVERAGE_D a inner join frt_agps_poor_coverage_d b 
on a.object_id=b.OBJECT_ID and a.day=b.day and a.grid_type=b.grid_type
where a.order_id in(#{ORDER_ID_LIST})
union ALL
SELECT c.LONGITUDE_MID_BaiDu , c.LATITUDE_MID_BaiDu 
, c.ESBH_ID objcet_id
,c.ESBH_ID eNodeB_ID, null ,c.cell_name ,'','' from  FRT_ESBH_INFO_D c where 
#{ESBH_SQL}
union ALL
SELECT gis_gps_bd(c.longitude_mid,c.latitude_mid,0) , gis_gps_bd(c.longitude_mid,c.latitude_mid,1)
, c.line_id objcet_id
,c.line_id eNodeB_ID, null ,c.cell_name ,'','' from  frt_esbh_line_coverage_d c where
#{ROAD_SQL}
) t order by t.OBJECT_ID
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getConcernAreaById" description="根据ID获取关注区域的信息">
<![CDATA[
SELECT
id,
area_name,
AREA_TYPE,
creator,
create_time,
CITY,
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
handle_description,
round(rsrp,2) rsrp,
round(cover*100,2) cover,
recent_base_statn_id,
recent_cell_id,
recent_cell_name,
gis_data_baidu,
max_longitude_baidu,
max_latitude_baidu,
min_longitude_baidu,
min_latitude_baidu,
handle_time,
RSRP,
COVER,
RECENT_BASE_STATN_ID,
RECENT_CELL_ID,
RECENT_CELL_NAME,
SECTOR_SET,
LTE_TO_3G_TOT,
FLOW_4G_TOT,
CE_GOOD_RATIO_AVG,
USER_4G_AVG,
RSRP_SUM,
RSRP_COUNT,
RSRP_COUNT_105,
GRID_COUNT,
ORDERNO_TOT,
NE_SECTOR_SET,
CITY_ID,
COUNTRY,
COUNTRY_ID,
MKTCENTER,
MKTCENTER_ID,
share_scope ,
share_status ,
audit_option ,
round((POOR_GRID_COUNT/GRID_COUNT)*100 , 2) as poor_grid_radio
FROM dm_user_concern_area
where 1=1
and
id = #{OBJECTID}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getBoneAreaById" description="根据ID查询骨头区域数据">
<![CDATA[
SELECT *,
CASE
WHEN is_suspend IS NULL THEN  'N'
ELSE 'Y' END  IS_SUSPENDSORT
FROM frt_agps_poor_area_m
where 1=1 and month = #{MONTH}
and id = #{ID}

]]>
</sqlTemplate>

<!--智能路测分析页V2的搜索的SQL模板-->
<sqlTemplate id="IntelligentRoadTestV2_getPoorAreaByCondition" description="根据条件查询弱区列表信息">
<![CDATA[
SELECT
g.object_id,
g.city,
g.country,
g.MKTCENTER_ID,
g.mktcenter,
round(g.MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(g.MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
g.address,
g.enodeb_id,
g.CELL_ID,
g.CELL_NAME,
g.CELL_STATE,
g.TOP5_SECTOR_SET,
g.SECTOR_SET,
g.ALARM_NUMS,
g.ALARM_CELLS,
g.NR_ALARM_CELLS,
g.PC_TOT_CityNo,
g.POOR_GRID_NUMS_ORDERNO,
CASE g.do_type
WHEN 1 THEN '工程'
WHEN 2 THEN '维护'
WHEN 3 THEN '优化'
WHEN 4 THEN '规划'
ELSE '未知' END AS do_type,
case
when f.order_id is null then  0
else 1 END isHasOrder ,
g.lte_to_3g_tot,
g.lte_to_3g_orderno,
round(g.flow_4g_tot,2) flow_4g_tot,
g.flow_4g_orderno,
g.user_4g_avg,
g.user_4g_orderno,
round(g.CE_GOOD_RATIO_AVG*100,2) CE_GOOD_RATIO_AVG,
g.ce_good_ratio_orderno,
g.ALL_GRID_NUMS,
g.POOR_GRID_NUMS_OrderNo,
g.POOR_GRID_AREA,
g.ALL_GRID_AREA,
g.LONGITUDE_MID_BaiDu,
g.LATITUDE_MID_BaiDu,
g.LONGITUDE_MIN_BAIDU,
g.LATITUDE_MIN_BAIDU,
g.LONGITUDE_MAX_BAIDU,
g.LATITUDE_MAX_BAIDU,
CASE g.BELONG_AREA_ID
    WHEN 1 THEN '市区'
    WHEN 2 THEN '县城'
    WHEN 3 THEN '乡镇'
    WHEN 4 THEN '农村'
ELSE '未知' END AS BELONG_AREA_ID,
g.GIS_DATA,
round(g.pc_orderno_tot,2) pc_orderno_tot,
g.day,
g.SCENE_TYPE,
f.order_id,
g.city_id,
g.country_id
from (
SELECT
*
FROM FRT_AGPS_POOR_COVERAGE_D
WHERE DAY = #{DAY}
AND TYPE = #{TYPE}
AND city='#{CITY}'
#{COUNTRY_ID}
#{MKTCENTER_ID}
#{DO_TYPE}
#{CONDITION}
AND grid_type = 20
AND gis_data is not null
) as g LEFT JOIN ALT_AGPS_POOR_COVERAGE_D as f ON (g.day=f.day and g.OBJECT_ID =f.object_id and  g.grid_type=f.grid_type)
limit 10
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getConcernAreaByCondition" description="根据条件搜索关注区域">
<![CDATA[
SELECT
id,
area_name,
AREA_TYPE,
creator,
create_time,
CITY,
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
handle_description,
round(rsrp,2) rsrp,
round(cover*100,2) cover,
recent_base_statn_id,
recent_cell_id,
recent_cell_name,
gis_data_baidu,
max_longitude_baidu,
max_latitude_baidu,
min_longitude_baidu,
min_latitude_baidu,
handle_time,
RSRP,
COVER,
RECENT_BASE_STATN_ID,
RECENT_CELL_ID,
RECENT_CELL_NAME,
SECTOR_SET,
LTE_TO_3G_TOT,
FLOW_4G_TOT,
CE_GOOD_RATIO_AVG,
USER_4G_AVG,
RSRP_SUM,
RSRP_COUNT,
RSRP_COUNT_105,
GRID_COUNT,
ORDERNO_TOT,
NE_SECTOR_SET,
CITY_ID,
COUNTRY,
COUNTRY_ID,
MKTCENTER,
MKTCENTER_ID,
share_scope ,
share_status ,
audit_option ,
round((POOR_GRID_COUNT/GRID_COUNT)*100 , 2) as poor_grid_radio
FROM dm_user_concern_area
where 1=1
#{CITY}
#{CONDITION}
limit 10
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getAlarmInfoTime" description="根据工单号获取派单时间">
<![CDATA[
select day , object_id from ALT_AGPS_POOR_COVERAGE_D where ORDER_ID = '#{ORDERID}'
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getAlarmInfoByCondition" description="根据条件查询工单告警信息">
<![CDATA[
SELECT
city,
eNodeB_ID,
CEll_ID,
CELL_NAME,
TASK_ID,
ALARM_NAME,
ALARM_ID,
ALARM_LEVEL,
date_format(ALARM_TIME,'%Y%m%d-%H:%m:%s') as ALARM_TIME,
CASE IS_RECOVER
WHEN 1 THEN '是'
WHEN 0 THEN '否'
ELSE '未知' END AS IS_RECOVER,
date_format(RECOVER_TIME,'%Y%m%d-%H:%m:%s') as RECOVER_TIME,
TASK_STATUS,
date_format(TASK_SEND_TIME,'%Y%m%d-%H:%m:%s') as TASK_SEND_TIME,
date_format(TASK_FINISH_TIME,'%Y%m%d-%H:%m:%s') as TASK_FINISH_TIME,
REPLACE ( ALARM_TEXT, '>', '大于' ) as ALARM_TEXT
from  alarm_info
where
Date(ALARM_TIME)<=#{ENDTIME}
and city = '#{CITY}'
and
(
ALARM_NAME='AGPS智能路测弱覆盖区域'
or  ALARM_NAME = '4G基站扇区基础信息异常'
or  ALARM_NAME = '天翼蓝鹰高密度住宅区'
or  ALARM_NAME = '天翼蓝鹰高流量商务区'
or  ALARM_NAME = '天翼蓝鹰美景'
or  ALARM_NAME = '天翼蓝鹰美食'
or  ALARM_NAME = '天翼蓝鹰农贸市场'
or  ALARM_NAME = '天翼蓝鹰战狼区域'
or  ALARM_NAME = '天翼蓝鹰高速'
or  ALARM_NAME = '天翼蓝鹰高校'
or  ALARM_NAME = '天翼蓝鹰场馆'
or  ALARM_NAME = '天翼蓝鹰中小学'
or  ALARM_NAME = '天翼蓝鹰城中村'
)
#{CONDITION}
LIMIT 10
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getBoneAreaByCondition" description="根据条件查询骨头区域">
<![CDATA[
SELECT *,
CASE
WHEN is_suspend IS NULL THEN  'N'
ELSE 'Y' END  IS_SUSPENDSORT
FROM frt_agps_poor_area_m
where 1=1 and month = #{MONTH}
#{CITY}
#{COUNTRY_ID}
#{MKTCENTER_ID}
#{CONDITION}
limit 10
]]>
</sqlTemplate>

	<!--根据搜索条件模糊匹配扇区数据  扇区搜索-->
<sqlTemplate id="IntelligentRoadTestAnalysi_v2_getSectorByCondition" description="根据条件搜索基站信息">
<![CDATA[
SELECT
g.day,
g.ENODEB_NAME,
g.city,
g.city_id,
g.country,
g.country_id,
g.mktcenter,
round(g.MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(g.MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
g.ENODEB_ID,
g.CELL_ID,
g.CELL_NAME,
CASE g.BELONG_AREA_ID
WHEN 1 THEN '市区'
WHEN 2 THEN '县城'
WHEN 3 THEN '乡镇'
WHEN 4 THEN '农村'
ELSE '未知' END AS BELONG_AREA_ID,
g.ALARM_LEVEL,
g.ALARM_NUMS,
g.CELL_STATE,
g.POOR_COVERAGE_COUNT,
g.NB_POOR_COVERAGE_COUNT,
g.LTE_TO_3G_TOT,
g.Flow_4G_TOT,
g.User_4G_AVG,
g.CE_GOOD_RATIO_AVG,
g.GRID_NUMS,
g.POOR_COVERAGE_SET ,
g.NB_POOR_COVERAGE_SET,
concat(g.ENODEB_ID,',',g.CELL_ID)as sector_set,
g.LONGITUDE_MID_BAIDU,
g.LATITUDE_MID_BAIDU,
g.PRED_LOCATION_BAIDU,
g.ant_azimuth,g.band_mapping ,
g.PRED_LOCATION_GPS ,
g.BS_VENDOR, -- 厂家
g.LOCATION_GPS,
g.is_indoor,
g.pci , -- PCI
g.pilot_power, -- 功率
#{SECTORTYPE} -- 用于添加是否是专题扇区的字段
round(g.CBMRRAT * 100 , 2) as cb_mrrat, -- 越区覆盖的占比
round(g.OLMRRAT * 100 , 2) as ol_mrrat, -- 重叠覆盖的占比
round(g.M3MRRAT * 100 , 2) as m3_mrrat, -- 模三干扰的占比
g.CB_OrderNo_TOT, -- 越区扇区的推荐排序字段
g.OL_OrderNo_TOT, -- 重叠扇区的推荐排序字段
g.M3_OrderNo_TOT, -- MOD3干扰扇区的推荐排序字段
g.agps_mr_count, -- 越区覆盖的MR条数
g.ALL_MR_COUNT, -- 模三干扰和重叠的MR条数
g.STATION_SPACING, -- 站间距
g.SPACING_AGPS_MRNUM, -- 各站间距AGPS数量
g.CBMRNUM, -- 越区全量MR数
g.OLMRNUM, -- 重叠全量MR数
g.M3MRNUM, -- MOD3全量MR数
g.AGPS_OLMRNUM, -- 重叠AGPSMR数
g.AGPS_M3MRNUM, -- MOD3AGPSMR数
g.CB_IS_NEW, -- 是否是新增的越区扇区
g.OL_IS_NEW, -- 是否是新增的重叠扇区
g.M3_IS_NEW, -- 是否是新增的M3干扰扇区
g.CB_GRID_COUNT, -- 越区栅格数
g.OL_GRID_COUNT, -- 重叠栅格数
g.M3_GRID_COUNT, -- M3干扰栅格数
g.LTE_USER_COUNT, -- 全量4G用户数
g.CBNCCELL_SET,-- 越区邻区列表
g.OLNCCELL_SET, -- 重叠邻区列表
g.M3NCCELL_SET, -- M3邻区列表
g.AGPS_MR_COUNT , -- 包含AGPS的MR条数
g.AGPS_MR_DIST_AVG , -- 包含AGPS的MR与小区平均距离
g.AGPS_MR_DIST_TA , -- 包含AGPS的MR与小区每TA平均距离
g.PRED_AZIMUTH , -- 预测角度
g.PRED_AZIMUTH_DIFF , -- 偏离角度
g.SURPORT_NUMBER , -- 预测位置支持MR条数
g.PRED_DISTANCE , -- 预测位置的相差距离
g.IS_ANT_CONN_ABNOR, -- 天馈接反
g.SURP_AZIMUTH_COUNT  -- 支持方位角预测条数
FROM FRT_AGPS_PC_ENB_D as g
WHERE DAY = #{DAY}
#{CITY}
#{COUNTRY_ID}
#{MKTCENTER_ID}
#{CONDITION}
#{TYPE} -- 区分专题扇区的条件
limit 10
]]>
</sqlTemplate>

<sqlTemplate id="alarm_info_V2" description="V2版本的工单告警查询">
<![CDATA[
SELECT
city,
eNodeB_ID,
cell_name,
cell_id,
TASK_ID,
ALARM_NAME,
ALARM_ID,
ALARM_LEVEL,
date_format(ALARM_TIME,'%Y%m%d-%H:%m:%s') as ALARM_TIME,
CASE IS_RECOVER
WHEN 1 THEN '是'
WHEN 0 THEN '否'
ELSE '未知' END AS IS_RECOVER,
date_format(RECOVER_TIME,'%Y%m%d-%H:%m:%s') as RECOVER_TIME,
TASK_STATUS,
date_format(TASK_SEND_TIME,'%Y%m%d-%H:%m:%s') as TASK_SEND_TIME,
date_format(TASK_FINISH_TIME,'%Y%m%d-%H:%m:%s') as TASK_FINISH_TIME,
REPLACE ( ALARM_TEXT, '>', '大于' ) as ALARM_TEXT
from  alarm_info
where
Date(ALARM_TIME)<=#{ENDTIME}
#{CITY}
#{ALARM_ID}
and
(
ALARM_NAME='AGPS智能路测弱覆盖区域'
or  ALARM_NAME = '4G基站扇区基础信息异常'
or  ALARM_NAME = '天翼蓝鹰高密度住宅区'
or  ALARM_NAME = '天翼蓝鹰高流量商务区'
or  ALARM_NAME = '天翼蓝鹰美景'
or  ALARM_NAME = '天翼蓝鹰美食'
or  ALARM_NAME = '天翼蓝鹰农贸市场'
or  ALARM_NAME = '天翼蓝鹰战狼区域'
or  ALARM_NAME = '天翼蓝鹰高速'
or  ALARM_NAME = '天翼蓝鹰高校'
or  ALARM_NAME = '天翼蓝鹰场馆'
or  ALARM_NAME = '天翼蓝鹰中小学'
or  ALARM_NAME = '天翼蓝鹰城中村'
)
order by alarm_name , eNodeB_ID
]]>
</sqlTemplate>

<sqlTemplate id="alarm_info_V2_Tab" description="V2版本的工单告警查询">
<![CDATA[
SELECT
city,
eNodeB_ID,
TASK_ID,
ALARM_NAME,
ALARM_ID,
ALARM_LEVEL,
date_format(ALARM_TIME,'%Y%m%d-%H:%m:%s') as ALARM_TIME,
CASE IS_RECOVER
WHEN 1 THEN '是'
WHEN 0 THEN '否'
ELSE '未知' END AS IS_RECOVER,
date_format(RECOVER_TIME,'%Y%m%d-%H:%m:%s') as RECOVER_TIME,
TASK_STATUS,
date_format(TASK_SEND_TIME,'%Y%m%d-%H:%m:%s') as TASK_SEND_TIME,
date_format(TASK_FINISH_TIME,'%Y%m%d-%H:%m:%s') as TASK_FINISH_TIME,
REPLACE ( ALARM_TEXT, '>', '大于' ) as ALARM_TEXT
from  alarm_info
where
Date(ALARM_TIME)<=#{ENDTIME}
#{CITY}
#{ALARM_ID}
and
(
ALARM_NAME='AGPS智能路测弱覆盖区域'
or  ALARM_NAME = '4G基站扇区基础信息异常'
or  ALARM_NAME = '天翼蓝鹰高密度住宅区'
or  ALARM_NAME = '天翼蓝鹰高流量商务区'
or  ALARM_NAME = '天翼蓝鹰美景'
or  ALARM_NAME = '天翼蓝鹰美食'
or  ALARM_NAME = '天翼蓝鹰农贸市场'
or  ALARM_NAME = '天翼蓝鹰战狼区域'
or  ALARM_NAME = '天翼蓝鹰高速'
or  ALARM_NAME = '天翼蓝鹰高校'
or  ALARM_NAME = '天翼蓝鹰场馆'
or  ALARM_NAME = '天翼蓝鹰中小学'
or  ALARM_NAME = '天翼蓝鹰城中村'
)
order by alarm_name , eNodeB_ID
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysi_v2_getPolygon" description="根据object_id数组 日期 获取所有object_id对应的弱区">
<![CDATA[
SELECT
*
FROM FRT_AGPS_POOR_COVERAGE_D
WHERE DAY =#{DAY}
AND TYPE = 0
AND object_id in(#{OBJECT_ID_LIST})
AND grid_type = 20
AND gis_data is not null order by field(object_id,#{OBJECT_ID_LIST})
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentTuning_getPolygon" description="根据object_id数组 日期 获取所有object_id对应的弱区">
<![CDATA[
SELECT
day,
OBJECT_ID,
CITY,
CITY_ID,
CELL_NAME,
COUNTRY,
COUNTRY_ID,
MKTCENTER,
MKTCENTER_ID,
LONGITUDE_MIN_BaiDu,
LATITUDE_MIN_BaiDu,
LONGITUDE_MID_BaiDu,
LATITUDE_MID_BaiDu,
LONGITUDE_MAX_BaiDu,
LATITUDE_MAX_BaiDu,
BELONG_AREA_ID,
SECTOR_SET,
GIS_DATA
FROM FRT_AGPS_POOR_COVERAGE_D
WHERE DAY =#{DAY}
AND TYPE = #{TYPE}
AND object_id in(#{OBJECT_ID_LIST})
AND grid_type = 20
AND gis_data is not null order by field(object_id,#{OBJECT_ID_LIST})
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysi_v2_getConcernArea30DayData" description="获取关注区域30天的折线图数据">
<![CDATA[
select pid , DATE_FORMAT(create_time,'%Y-%m-%d') create_time , rsrp  , cover, round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
 round((POOR_GRID_COUNT/GRID_COUNT)*100 , 2) as poor_grid_radio
  from dm_user_concern_area_his
WHERE
	pid = #{PID}
AND
	CREATE_TIME BETWEEN '#{STARTDAY}' AND '#{ENDDAY}'
AND
    P_TYPE = #{TYPE}
GROUP BY pid , CREATE_TIME
order by CREATE_TIME ASC
]]>
</sqlTemplate>

<sqlTemplate id="SectorUtilForOSM_01_querySector_ByScope_OnlyDrawField" description="osm地图canvas画基站后台查询sql（仅取指定范围内数据">
        <![CDATA[
select distinct base_statn_id,cell_id,
longitude,latitude,
ant_azimuth,
#{QueryField}
-- is_indoor,
-- band,
-- CASE is_indoor WHEN '室外' THEN 2 ELSE 1 END AS type,
-- case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 0 end as band_order
INDOOR_MAPPING as type,
BAND_MAPPING as band_order
from noce.dim_sector
where day = #{DAY}
#{CITY} -- 地市
#{COUNTRY} -- 区县
#{MKTCENTER} -- 营服
#{BAND} -- 频率
#{FACTORY} -- 厂家
#{NETTYPE} -- 网络类型
#{REGON} -- 场景
#{INDOOR} -- 室内外
#{CONDITION} -- 其他查询条件
AND abs(longitude_baidu - #{CENTERLONGITUDE})<0.00980657*#{KM} -- 中心经度， #{KM}为范围大小，建议取5。下同
and abs(latitude_baidu - #{CENTERLATITUDE}) < 0.00899322*#{KM} -- 中心纬度，
order by band_order
]]>
</sqlTemplate>
<sqlTemplate id="SectorUtilForOSM_02_querySector_ByScope_OnlyDrawField" description="osm地图canvas画基站后台查询sql（仅取指定范围内数据">
        <![CDATA[
select distinct base_statn_id,cell_id,
longitude,latitude,
ant_azimuth,
-- is_indoor,
-- band,
#{QueryField}
indoor_mapping AS type,
band_mapping as band_order
from noce.dim_sector
where day = #{DAY}
#{CITY} -- 地市
#{COUNTRY} -- 区县
#{MKTCENTER} -- 营服
#{BAND} -- 频率
#{FACTORY} -- 厂家
#{NETTYPE} -- 网络类型
#{REGON} -- 场景
#{INDOOR} -- 室内外
#{CONDITION} -- 其他查询条件
AND abs(longitude_baidu - #{CENTERLONGITUDE})<0.00980657*#{KM} -- 中心经度， #{KM}为范围大小，建议取5。下同
and abs(latitude_baidu - #{CENTERLATITUDE}) < 0.00899322*#{KM} -- 中心纬度，
order by band_order
]]>
</sqlTemplate>
    <sqlTemplate id="SectorUtilForOSM_01_querySector_onlyDrawField" description="osm地图canvas画基站后台查询sql（仅取画基站的字段）">
        <![CDATA[
select distinct base_statn_id,cell_id,
longitude,latitude,
ant_azimuth,
#{QueryField}
-- is_indoor,
-- band,
indoor_mapping AS type,
band_mapping as band_order
from noce.dim_sector
where day = #{DAY}
#{CITY} -- 地市
#{COUNTRY} -- 区县
#{MKTCENTER} -- 营服
#{BAND} -- 频率
#{FACTORY} -- 厂家
#{NETTYPE} -- 网络类型
#{REGON} -- 场景
#{INDOOR} -- 室内外
#{CONDITION} -- 其他查询条件
AND LONGITUDE_BAIDU IS NOT NULL
order by band_order
]]>
    </sqlTemplate>
<sqlTemplate id="SectorUtilForOSM_02_querySector_onlyDrawField" description="OSM地图canvas画基站后台查询sql（仅取画基站的字段）查询2/3G基站">
<![CDATA[
select distinct city_id,cell_id,
longitude,latitude,
ant_azimuth,
#{QueryField}
SECTOR_ID,BSC_ID,
CASE is_indoor WHEN '室外' THEN 2 ELSE 1 END AS type,
-- INDOOR_MAPPING as type,
-- case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 0 end as band_order
BAND_MAPPING as band_order
from noce.dim_sector
where day = #{DAY}
#{CITY} -- 地市
#{COUNTRY} -- 区县
#{MKTCENTER} -- 营服
#{BAND} -- 频率
#{FACTORY} -- 厂家
#{NETTYPE} -- 网络类型
#{REGON} -- 场景
#{INDOOR} -- 室内外
#{CONDITION} -- 其他查询条件
AND LONGITUDE_BAIDU IS NOT NULL
order by band_order
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysi_v2_getConcernAreaHis" description="查询关注区域的历史详情数据（关联原表）">
<![CDATA[
SELECT
a.id,
a.area_name,
a.AREA_TYPE,
a.creator,
a.gis_data_baidu,
a.CITY,
a.handle_description,
a.handle_time,
a.max_longitude_baidu,
a.max_latitude_baidu,
a.min_longitude_baidu,
a.min_latitude_baidu,
a.CITY_ID,
a.COUNTRY,
a.COUNTRY_ID,
a.MKTCENTER,
a.MKTCENTER_ID,
DATE_FORMAT(b.create_time,'%Y-%m-%d') create_time,
round(b.rsrp,2) rsrp,
b.cover cover,
b.recent_base_statn_id,
b.recent_cell_id,
b.recent_cell_name,
b.SECTOR_SET,
b.LTE_TO_3G_TOT,
b.FLOW_4G_TOT,
b.CE_GOOD_RATIO_AVG,
b.USER_4G_AVG,
b.RSRP_SUM,
b.RSRP_COUNT,
b.RSRP_COUNT_105,
b.GRID_COUNT,
b.ORDERNO_TOT,
b.TOP5_ALARM_NUMS,
b.NE_SECTOR_SET,
round(b.MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(b.MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
round((b.poor_grid_count / b.GRID_COUNT)*100 , 2) as poor_grid_radio -- 弱栅格占比
FROM dm_user_concern_area as a , dm_user_concern_area_his b
where a.id = b.pid
and a.id = #{ID}
and b.create_time = #{DAY}
]]>
</sqlTemplate>


<sqlTemplate id="IntelligentRoadTestAnalysi_v2_getBoneAreaHis" description="查询骨头区域的历史详情数据（关联原表）">
<![CDATA[
SELECT
	a.id,
	a.OBJECT_ID,
	a.CITY,
	a.LONGITUDE_MIN,
	a.LATITUDE_MIN,
	a.LONGITUDE_MID,
	a.LATITUDE_MID,
	a.LONGITUDE_MAX,
	a.LATITUDE_MAX,
	a.BELONG_AREA_ID,
	a.SECTOR_SET,
	a.GIS_DATA,
	a.ENODEBNAME,
	a.ENODEB_ID,
	a.CELL_NAME,
	a.CELL_ID,
	a.CREATOR,
	a.IS_SUSPEND,
	a.NE_SECTOR_SET,
	a.SUSPEND_REASON,
	a.CITY_ID,
	a.COUNTRY,
	a.COUNTRY_ID,
	a.MKTCENTER,
	a.MKTCENTER_ID,
	DATE_FORMAT(b.create_time,'%Y-%m-%d') create_time ,
	round(b.rsrp, 2) RSRP_AVG,
	round(b.cover * 100, 2) RSRP_COV,
	b.recent_base_statn_id,
	b.recent_cell_id,
	b.recent_cell_name,
	b.SECTOR_SET,
	b.LTE_TO_3G_TOT,
	b.FLOW_4G_TOT,
	b.CE_GOOD_RATIO_AVG,
	b.USER_4G_AVG,
	b.RSRP_SUM,
	b.RSRP_COUNT AS RSRP_COUNT_100,
	b.RSRP_COUNT_105,
	b.GRID_COUNT,
	b.ORDERNO_TOT,
	b.TOP5_ALARM_NUMS,
	b.NE_SECTOR_SET
FROM
	frt_agps_poor_area_m AS a,
	dm_user_concern_area_his b
WHERE
	a.id = b.pid
AND a.id = #{ID}
AND b.create_time = '#{DAY}'
AND b.p_type = 1
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysi_v2_getSenecsAreaData" description="查询五高一地两美一场的列表数据">
<![CDATA[
SELECT c.*,d.audit_status FROM (SELECT a.*,b.applicant_id,b.audit_style,b.audit_stat from (select
ESBH_ID,
ESBH_NAME,
CITY,
COUNTRY,
COUNTRY_ID,
MKTCENTER,
MKTCENTER_ID,
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
LONGITUDE_MIN_BaiDu ,
LATITUDE_MIN_BaiDu ,
LONGITUDE_MID_BaiDu ,
LATITUDE_MID_BaiDu ,
LONGITUDE_MAX_BaiDu ,
LATITUDE_MAX_BaiDu ,
GIS_DATA ,
SECTOR_SET ,
LTE_TO_3G_TOT,
Lte_To_3g_OrderNo,
Flow_4G_TOT,
Flow_4G_OrderNo,
CE_GOOD_RATIO_AVG,
Ce_GOOD_RATIO_OrderNo,
User_4G_AVG,
User_4G_OrderNo,
PC_OrderNo_TOT,
eNodeBName,
address,
eNodeB_ID,
POOR_GRID_NUMS,
ALARM_NUMS,
ALARM_CELLS,
NR_ALARM_CELLS,
ALL_GRID_NUMS,
POOR_GRID_NUMS_OrderNo,
POOR_GRID_AREA,
ALL_GRID_AREA,
CELL_ID,
CELL_NAME,
CELL_STATE,
TOP5_SECTOR_SET,
DX_RSRP_COUNT,
DX_RSRP_105_COUNT,
DX_RSRP_SUM,
MONTH_RELATE,
POOR_COVERAGE_SET,
POOR_COVERAGE_SET as NB_POOR_COVERAGE_SET,
POOR_COVERAGE_COUNT,
RSRP_140_0_CNT,
RSRP_105_CNT,
round((RSRP_105_CNT/RSRP_140_0_CNT) * 100  , 2) as cover_rate,
round(RSRP_140_0_AVG , 2) as rsrp_avg ,
day,
GRID_TYPE,
zlqy_flag,
alarm_id, -- 告警ID
task_id, -- 工单单号
CASE ESBH_TYPE
WHEN 1 THEN '高校'
WHEN 2 THEN '高密度住宅区'
WHEN 3 THEN '高流量商务区'
WHEN 7 THEN '美景'
WHEN 8 THEN '农贸市场'
WHEN 9 THEN '美食'
WHEN 10 THEN '场馆'
WHEN 11 THEN '中小学'
WHEN 12 THEN '城中村'
WHEN 13 THEN '自然村'
WHEN 14 THEN '工厂'
WHEN 15 THEN '服务区'
WHEN 16 THEN '收费站'
ELSE '未知' END AS ESBH_TYPE
from
	FRT_ESBH_INFO_D force index(idx_t) -- 加上这个是为了提升查询效率，是由谭工在数据库加上的以供前端使用
where
	day = #{DAY}
and
	ESBH_TYPE = #{ESBHTYPE}
-- and city = '#{CITY}'
and city_id = #{CITY_ID} -- 更改为city_id
#{COUNTRY}
#{MKTCENTER}
#{OTHERCONDITION}
) a LEFT JOIN
(select * from DM_AUDIT_LIST where object_type = '#{OBJECT_TYPE}')b ON -- 这里增加过滤条件，只拿相关类型的数据进行关联
a.ESBH_ID = b.object_id
AND a.ESBH_TYPE = b.object_type) c LEFT JOIN (SELECT * FROM dm_scene_area_gis_act WHERE editor_id = '#{USERNAME}') d 
ON c.ESBH_ID = d.obj_id AND c.ESBH_TYPE = d.obj_type
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysi_v2_getSenecsAreaDataV2" description="查询五高一地两美一场的图层数据">
<![CDATA[
select
ESBH_ID,
ESBH_NAME,
GIS_DATA ,
CASE ESBH_TYPE
WHEN 1 THEN '高校'
WHEN 2 THEN '高密度住宅区'
WHEN 3 THEN '高流量商务区'
WHEN 7 THEN '美景'
WHEN 8 THEN '农贸市场'
WHEN 9 THEN '美食'
WHEN 10 THEN '场馆'
WHEN 11 THEN '中小学'
WHEN 12 THEN '城中村'
WHEN 13 THEN '自然村'
WHEN 14 THEN '工厂'
ELSE '未知' END AS ESBH_TYPE
from
	FRT_ESBH_INFO_D
where
	day = #{DAY}
and
	ESBH_TYPE = #{ESBHTYPE}
-- and city = '#{CITY}'
and city_id = #{CITY_ID} -- 为了提高查询效率，这里改为地市ID进行查选
#{COUNTRY}
#{MKTCENTER}
#{OTHERCONDITION}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysi_v2_getSenecsAreaDataByESBHId" description="根据ESBH_ID查询五高一地两美一场的单条数据">
<![CDATA[
SELECT c.*,d.audit_status FROM (SELECT a.*,b.applicant_id,b.audit_style,b.audit_stat from (select
ESBH_ID,
ESBH_NAME,
CITY,
COUNTRY,
COUNTRY_ID,
MKTCENTER,
MKTCENTER_ID,
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
LONGITUDE_MIN_BaiDu ,
LATITUDE_MIN_BaiDu ,
LONGITUDE_MID_BaiDu ,
LATITUDE_MID_BaiDu ,
LONGITUDE_MAX_BaiDu ,
LATITUDE_MAX_BaiDu ,
GIS_DATA ,
SECTOR_SET ,
LTE_TO_3G_TOT,
Lte_To_3g_OrderNo,
Flow_4G_TOT,
Flow_4G_OrderNo,
CE_GOOD_RATIO_AVG,
Ce_GOOD_RATIO_OrderNo,
User_4G_AVG,
User_4G_OrderNo,
PC_OrderNo_TOT,
eNodeBName,
address,
eNodeB_ID,
POOR_GRID_NUMS,
ALARM_NUMS,
ALARM_CELLS,
NR_ALARM_CELLS,
ALL_GRID_NUMS,
POOR_GRID_NUMS_OrderNo,
POOR_GRID_AREA,
ALL_GRID_AREA,
CELL_ID,
CELL_NAME,
CELL_STATE,
TOP5_SECTOR_SET,
DX_RSRP_COUNT,
DX_RSRP_105_COUNT,
DX_RSRP_SUM,
MONTH_RELATE,
POOR_COVERAGE_SET,
POOR_COVERAGE_SET as NB_POOR_COVERAGE_SET,
POOR_COVERAGE_COUNT,
RSRP_105_CNT,
RSRP_140_0_CNT,
round((RSRP_105_CNT/RSRP_140_0_CNT) * 100  , 2) as cover_rate,
round(RSRP_140_0_AVG , 2) as rsrp_avg ,
day,
GRID_TYPE,
alarm_id, -- 告警ID
task_id, -- 工单单号
CASE ESBH_TYPE
WHEN 1 THEN '高校'
WHEN 2 THEN '高密度住宅区'
WHEN 3 THEN '高流量商务区'
WHEN 7 THEN '美景'
WHEN 8 THEN '农贸市场'
WHEN 9 THEN '美食'
WHEN 10 THEN '场馆'
WHEN 11 THEN '中小学'
WHEN 12 THEN '城中村'
WHEN 13 THEN '自然村'
WHEN 14 THEN '工厂'
ELSE '未知' END AS ESBH_TYPE
from
	FRT_ESBH_INFO_D
where
	day = #{DAY}
and
	ESBH_TYPE = #{ESBHTYPE}
and
	ESBH_ID = #{ESBHID}
	) a LEFT JOIN
DM_AUDIT_LIST b ON
a.ESBH_ID = b.object_id
AND a.ESBH_TYPE = b.object_type) c LEFT JOIN (SELECT * FROM dm_scene_area_gis_act WHERE editor_id = '#{USERNAME}') d 
ON c.ESBH_ID = d.obj_id AND c.ESBH_TYPE = d.obj_type
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysi_v2_getSenecsArea30DayLineData" description="根据ESBH_ID查询30天的折线图数据">
<![CDATA[
SELECT
	ESBH_ID,
	RSRP_105_CNT/RSRP_140_0_CNT as cover,  -- 覆盖率
	RSRP_140_0_AVG  as rsrp ,-- RSRP均值
	DAY,
	GRID_TYPE,
	ESBH_TYPE,
	round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
	round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE
FROM
	FRT_ESBH_INFO_D
WHERE
	DAY BETWEEN #{STARTDAY}
AND #{ENDDAY}
and GRID_TYPE=20
#{CITYCONDITION}
AND ESBH_TYPE = #{ESBHTYPE}
and ESBH_ID = #{ESBHID}
order by day asc
]]>
</sqlTemplate>


<sqlTemplate id="IntelligentRoadTestV2_getKPIList" description="取KPI的列表数据">
<![CDATA[
select f.* , d.BASE_STATN_NAME from (SELECT
DISTINCT
enodebid,
CELLID, -- 小区ID
cell_name,
MANUFACTURER as factory
FROM FRT_WIRELESS_KPI_STAT_D
WHERE DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
AND ENODEBID*1000000+cellid in (#{BSTIDANDCELLID}) ) as f

join (select BASE_STATN_ID , CELL_ID ,BASE_STATN_NAME from dim_sector where day = #{STARTDAY}) d
on f.enodebid = d.BASE_STATN_ID and f.cellid = d.CELL_ID
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getKPICompleteMessage" description="取KPI的详情页数据">
<![CDATA[
SELECT
DAY,
enodebid,
CELLID, -- 小区ID
cell_name,
MANUFACTURER as factory,
round(ERAB_SUCC_RATE*100,2) ERAB_SUCC_RATE, -- E-RAB建立成功率(%)
round(ERAB_DROP_RATE*100,2) ERAB_DROP_RATE, -- E-RAB掉线率(%)
round(RRCCON_SUCCRATE*100,2) RRCCON_SUCCRATE, -- RRC连接建立成功率(%)
round(SWCHSF_SUCC_RATE*100,2) SWCHSF_SUCC_RATE, -- 同频切换成功率(%)
round(SWCHAF_SUCC_RATE*100,2) SWCHAF_SUCC_RATE, -- 异频切换成功率(%)
round(UP_PRB_USERATE*100,2) UP_PRB_USERATE, -- 上行PRB资源利用率（业务信息）
round(DW_PRB_USERATE*100,2) DW_PRB_USERATE, -- 下行PRB平均利用率(%)
Counter0003, -- 最大RRC连接用户数
round((PDCH_DWFLOW+PDCH_UPFLOW),2) as PDCH_FLOW -- PDCP层流量(MB)
FROM FRT_WIRELESS_KPI_STAT_D
WHERE DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
AND ENODEBID*1000000+cellid in (#{BSTIDANDCELLID})
order by DAY
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getAlarmList" description="取告警列表的数据">
<![CDATA[
SELECT
DISTINCT
base_statn_id,
CELL_ID,
case FACTORY
when 'ZTE' then '中兴'
when 'AL' then '阿郎'
when 'HW' then '华为'
when 'ERIC' then '爱立信'
when '国人' then '国人'
ELSE '未知' END AS factory,
BTSNAME as enodeb_name
FROM FRT_BSN_ALARM_HIS_D
WHERE DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
AND base_statn_id*1000000+cell_id in (#{BSTIDANDCELLID})
AND ALARM_SCOPE = 'CELL'
AND OUTOFSRV = 1
UNION ALL
SELECT
DISTINCT
base_statn_id ,
CELL_ID,
case FACTORY
when 'ZTE' then '中兴'
when 'AL' then '阿郎'
when 'HW' then '华为'
when 'ERIC' then '爱立信'
when '国人' then '国人'
ELSE '未知' END AS factory,
BTSNAME as enodeb_name
FROM FRT_BSN_ALARM_HIS_D
WHERE DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
AND base_statn_id in (#{BSTID})
AND ALARM_SCOPE = 'BASE_STATION'
AND OUTOFSRV = 1
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getAlarmCompleteMessageForCell" description="取告警详情页的数据（小区级）">
<![CDATA[
SELECT
day,
base_statn_id,
BTSNAME as enodeb_name ,
CELL_ID,
FACTORY,
RECTIME,
ALARM_TIME,
CLEAR_TIME,
ALARM_LEVEL,
ISRECOVER,
OUTOFSRV,
PROB_CAUSE,
case ALARM_SCOPE
when 'CELL' then '小区级'
when 'BASE_STATION' then '基站级'
ELSE ALARM_SCOPE
END as ALARM_SCOPE
FROM FRT_BSN_ALARM_HIS_D
WHERE DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
AND base_statn_id*1000000+cell_id in (#{BSTIDANDCELLID})
AND ALARM_SCOPE = 'CELL'
AND OUTOFSRV = 1
order by day
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getAlarmCompleteMessageForSector" description="取告警详情页的数据(基站级)">
<![CDATA[
SELECT
day,
base_statn_id,
BTSNAME as enodeb_name ,
CELL_ID,
FACTORY,
RECTIME,
ALARM_TIME,
CLEAR_TIME,
ALARM_LEVEL,
ISRECOVER,
OUTOFSRV,
PROB_CAUSE,
case ALARM_SCOPE
when 'CELL' then '小区级'
when 'BASE_STATION' then '基站级'
ELSE ALARM_SCOPE
END as ALARM_SCOPE
FROM FRT_BSN_ALARM_HIS_D
WHERE DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
AND base_statn_id in (#{BSTID})
AND ALARM_SCOPE = 'BASE_STATION'
AND OUTOFSRV = 1
order by day
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV2_getGridData" description="获取栅格数据">
<![CDATA[
getGridByKey
NOCE:DSI_MRO_AGPS_GRID_TOT_D
#{GRIDKEYPREFIX}
20
#{MAXLNG_MAXLAT_MINLNG_MINLAT}
#{COLUMNLIST}
rowkey 1
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getGridDataV2" description="获取栅格数据-4.29表取分频段栅格">
<![CDATA[
getGridsByContour
#{TABLENAME}
#{GRIDKEYPREFIX}
#{GRIDLEVEL}
#{POLYGONCONTOUR}
#{COLUMNLIST}
#{PARTITIONMOD}
rowkey 0
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getThreeGridData" description="获取三网栅格数据(4.21)">
<![CDATA[
getGridsByContour
#{TABLENAME}
#{GRIDKEYPREFIX}
20
#{POLYGONCONTOUR}
#{COLUMNLIST}
rowkey 1
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_103_HighwaySectors" description="取视图范围内的路段对象" DB="postgrepSQL">
    <![CDATA[
SELECT
t1.city_id,
t1.city_name,
t1.road_id,
t1.id
FROM dim_road_section t1,
(SELECT ST_PolygonFromText('POLYGON((#{MINLNG} #{MINLAT},
                                                   #{MINLNG} #{MAXLAT},
                                                   #{MAXLNG} #{MAXLAT},
                                                   #{MAXLNG} #{MINLAT},
                                                   #{MINLNG} #{MINLAT}))',4326) AS geom) t2
WHERE ST_Intersects(t1.geom,t2.geom)
AND city_name = '#{CITYNAME}'
AND road_type_id=#{ROAD_TYPE_ID} -- 1：表示高速；2：表示高铁；3：表示市政路
AND level=#{LEVEL}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestAnalysisV2_103_HighwayAllLine" description="取某条高速分段所有线路数据" DB="postgrepSQL">
    <![CDATA[
SELECT
city_id,
city_name,
road_id,
id
FROM dim_road_section
WHERE 1=1
AND city_name = '#{CITYNAME}'
AND road_type_id=#{ROAD_TYPE_ID} -- 1：表示高速；2：表示高铁；3：表示市政路
AND road_id = #{ROAD_ID}
AND level=#{LEVEL}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestAnalysisV2_103_Highway20meter" description="查询500米线段对应的20米全部线段" DB="mysql">
   <![CDATA[
SELECT sect_id,sect_20_id FROM dim_road_sect_ref WHERE sect_id = '#{SECTID}'  -- 这里后续要修改为dim_road_sect_ref_baidu这个表
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestAnalysisV2_104_HighwaySectorsIdx" description="取指定高速路段对象的业务数据" DB="hbase">
<![CDATA[
getByKeys
NOCE:DSI_ESBH_LINE_RSRP_D
#{KEYLIST}
#{COLUMNLIST}
]]>
</sqlTemplate>
<sqlTemplate id="PoorCoverage_07_PoorCovTab" description=" 省／地市弱覆盖总表">
<![CDATA[
select sum(Cell_TOT) as Cell_TOT
	,sum(Cell_105_TOT) as Cell_105_TOT
	,sum(Cell_110_TOT) as Cell_110_TOT
	,sum(Cell_115_TOT) as Cell_115_TOT
	,sum(RSRP_CNT_TOT) as RSRP_CNT_TOT
	,sum(RSRP_105_TOT) as RSRP_105_TOT
	,sum(RSRP_110_TOT) as RSRP_110_TOT
	,sum(RSRP_115_TOT) as RSRP_115_TOT
	,sum(Grid_TOT) as Grid_TOT
	,sum(Grid_105_TOT) as Grid_105_TOT
	,sum(Grid_110_TOT) as Grid_110_TOT
	,sum(Grid_115_TOT) as Grid_115_TOT
	,sum(Grid_Valid_TOT) as Grid_Valid_TOT
	,sum(Grid_Valid_105_TOT) as Grid_Valid_105_TOT
	,sum(Grid_Valid_110_TOT) as Grid_Valid_110_TOT
	,sum(Grid_Valid_115_TOT) as Grid_Valid_115_TOT
	,sum(PC_TOT) as PC_TOT
	,sum(PC_105_TOT) as PC_105_TOT
	,sum(PC_110_TOT) as PC_110_TOT
	,sum(PC_115_TOT) as PC_115_TOT
from noce.FRT_COVERAGE_RATE_M
where month=#{MONTH}
	and CITY_ID=#{CITY_ID}
]]>
</sqlTemplate>

<sqlTemplate id="MRStatistics_01_dxydlt" description="三家运营商全量MR／AGPS MR的数据统计">
<![CDATA[
select CITY
	,TYPE
	,BELONG_AREA_TYPE
	,round(dx_rsrp_avg, 2) as dx_rsrp_avg
	,dx_mr_count
	,dx_rsrp_85_0
	,dx_rsrp_95_85
	,dx_rsrp_105_95
	,dx_rsrp_110_105
	,dx_rsrp_115_110
	,dx_rsrp_120_115
	,dx_rsrp_140_120
	,round(yd_rsrp_avg, 2) as yd_rsrp_avg
	,yd_mr_count
	,yd_rsrp_85_0
	,yd_rsrp_95_85
	,yd_rsrp_105_95
	,yd_rsrp_110_105
	,yd_rsrp_115_110
	,yd_rsrp_120_115
	,yd_rsrp_140_120
	,round(lt_rsrp_avg, 2) as lt_rsrp_avg
	,lt_mr_count
	,lt_rsrp_85_0
	,lt_rsrp_95_85
	,lt_rsrp_105_95
	,lt_rsrp_110_105
	,lt_rsrp_115_110
	,lt_rsrp_120_115
	,lt_rsrp_140_120
from noce.FRT_MRO_RSRP_SUBS_AREA_W
where day=#{DAY}
and CITY#{CITY}
group by CITY, TYPE, BELONG_AREA_TYPE
order by TYPE, CITY, BELONG_AREA_TYPE
]]>
</sqlTemplate>

<sqlTemplate id="MRStatistics_02_MRGrid" description="全省网格MR数据统计">
<![CDATA[
select GRID
	,GRID_NAME
	,MKTCENTER
	,COUNTRY_ID
	,COUNTRY
	,CITY
	,CENTRE_LONGITUDE
	,CENTRE_LATITUDE
	,DX_MR_COUNT
	,DX_RSRP_105_0
	,DX_RSRP_110_105
	,DX_RSRP_115_110
	,DX_RSRP_140_115
from noce.FRT_MRO_RSRP_SUBS_GRID_W
where day=#{DAY}
and CITY#{CITY}
#{LIMIT}
]]>
</sqlTemplate>



<sqlTemplate id="badCellAnalysis_17_alarm_ifexists" description="质差小区告警的结果">
		<![CDATA[
select day
	,case when count(*) > 0 then 1 else 0 end as if_exists
from noce.FRT_BSN_ALARM_HIS_D
where day between #{START_DAY} and #{END_DAY}
and network="L"
and base_statn_id='#{BASE_STATION}'
group by day
]]>
</sqlTemplate>

<sqlTemplate id="badCellAnalysis_18_alarm_details" description="质差小区告警具体字段生成表格">
		<![CDATA[
select ID
	,RECTIME
	,base_statn_id
	,bsc_id
	,OUTOFSRV
	,NETWORK
	,FACTORY
	,OWNER
	,REGION
	,NETINFO
	,NETTYPE
	,ALARM_TIME
	,ISOFF
	,ALARM_ID
	,ALARM_INDEX
	,ALARM_LEVEL
	,ALARM_CODE
	,ALARM_POS
	,PROB_CAUSE
	,ALARM_TEXT
	,ALARM_ACK
	,ALARM_NEIP
	,ACKTIME
	,ACKUSER
	,ISFILTER
	,ISDISPLAY
	,BTSNAME
	,OFFTYPE
	,ISRECOVER
	,CLEAR_TIME
	,ISRECOVERID
	,STIME
	,AUTONUM
	,COLLECTIP
	,RESERVEFIELD
	,ALARM_SCOPE
	,CELL_ID
from noce.FRT_BSN_ALARM_HIS_D
where day=#{DAY}
and network="L"
and base_statn_id='#{BASE_STATION}'
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_101_HighwayList" description="某天某地市下所有高速路的汇总数据">
<![CDATA[
  SELECT
  	CITY ,
	ROAD_ID,
	ROAD_NAME,
	POOR_LENGTH,
	COVER_LENGTH,
	POOR_RATIO,
	POOR_COUNT ,
	LONGITUDE_MIN, -- 线路最小经度
	LATITUDE_MIN, -- 线路最小纬度
	LONGITUDE_MID, -- 线路中心经度
	LATITUDE_MID, -- 线路中心纬度
	LONGITUDE_MAX, -- 线路最大经度
	LATITUDE_MAX, -- 线路最大纬度
	pc_orderno_tot,
	lte_to_3g_orderno,
	flow_4g_orderno,
	ce_good_ratio_orderno,
	poor_cov_length_orderno,
	user_4g_orderno ,
	MIN_USEREX_UPAVGRATE,
	MIN_USEREX_DWAVGRATE,
	round(ROAD_LENGTH/1000 , 2) as road_length
FROM
(
SELECT
	CITY ,
	ROAD_ID,
	ROAD_NAME,
	sum((case when RSRP_SUM/RSRP_COUNT< -105 then 1 else 0 end)*ROAD_LENGTH)/1000 as POOR_LENGTH,
	sum(ROAD_LENGTH)/1000 as COVER_LENGTH,
	round((sum((case when RSRP_SUM/RSRP_COUNT< -105 then 1 else 0 end)*ROAD_LENGTH)/sum(ROAD_LENGTH)) * 100,2 ) as POOR_RATIO,
	count(*) AS POOR_COUNT ,
	LONGITUDE_MIN, -- 线路最小经度
	LATITUDE_MIN, -- 线路最小纬度
	LONGITUDE_MID, -- 线路中心经度
	LATITUDE_MID, -- 线路中心纬度
	LONGITUDE_MAX, -- 线路最大经度
	LATITUDE_MAX, -- 线路最大纬度
	pc_orderno_tot,
	lte_to_3g_orderno,
	flow_4g_orderno,
	ce_good_ratio_orderno,
	poor_cov_length_orderno,
	user_4g_orderno,
	round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE ,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE
FROM
	FRT_ESBH_LINE_COVERAGE_D
WHERE
	DAY = #{DAY}
AND CITY = '#{CITYNAME}'
AND LINE_TYPE = #{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
AND LINE_LEVEL=500
#{CONDITION}
GROUP BY
	ROAD_ID,
	ROAD_NAME
) A
JOIN
(
SELECT
	ROAD_ID AS ID,ROAD_LENGTH
FROM
	DIM_ROAD_CITY
WHERE
    CITY_NAME = '#{CITYNAME}'
) B
ON A.ROAD_ID = B.ID
ORDER BY
  POOR_RATIO DESC
    #{LIMIT}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_105_HighwaySector500" description="取某条高速路的500米分段数据">
<![CDATA[
SELECT
    ROAD_ID , -- 道路ID
	LINE_ID, -- 线段ID
	city , -- 地市名称
	road_name , -- 道路名称
LONGITUDE_MIN, -- 线路最小经度
LATITUDE_MIN, -- 线路最小纬度
LONGITUDE_MID, -- 线路中心经度
LATITUDE_MID, -- 线路中心纬度
LONGITUDE_MAX, -- 线路最大经度
LATITUDE_MAX, -- 线路最大纬度
ALL_COV_LENGTH, -- 覆盖长度
LTE_TO_3G_TOT, -- 4G切3G总次数
Flow_4G_TOT, -- 4G总流量
CE_GOOD_RATIO_AVG, -- 感知优良率按天平均值
User_4G_AVG, -- 4G用户数按天平均值
RSRP_COUNT, -- RSRP总条数
RSRP_SUM, -- RSRP之和
RSRP_COUNT_105, -- RSRP大于105之和
round((RSRP_COUNT_105/RSRP_COUNT) * 100 , 2) as COVER_RATE, -- 覆盖率
round(RSRP_SUM/RSRP_COUNT,2) as RSRP_AVG, -- RSRP均值
Do_Type, -- 路段处理措施
eNodeB_ID, -- 基站ID
eNodeB_Name, -- 最近基站名称
CELL_ID, -- 最近的小区ID
CELL_NAME, -- 最近的小区的名称
CELL_ADDRESS, -- 最近基站地址
CELL_STATE , -- 最近的小区的状态
sector_set , -- mr最大的小区集合
pc_orderno_tot,
lte_to_3g_orderno,
flow_4g_orderno,
ce_good_ratio_orderno,
poor_cov_length_orderno,
user_4g_orderno,
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
nc_sector_set as ne_sector_set -- 附近小区集合
FROM
	FRT_ESBH_LINE_COVERAGE_D
WHERE
	DAY = #{DAY}
AND LINE_LEVEL=500
AND LINE_TYPE=#{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
AND ROAD_ID= #{ROAD_ID}
AND CITY = '#{CITY}'
#{CONDITION} -- 用于扩展查询条件的变量
ORDER BY
  LINE_ID
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_105_seachHighwaySector500" description="模糊搜索某条高速路的500米分段数据">
	<![CDATA[
SELECT
ROAD_ID , -- 道路ID
LINE_ID, -- 线段ID
city , -- 地市名称
road_name , -- 道路名称
LONGITUDE_MIN, -- 线路最小经度
LATITUDE_MIN, -- 线路最小纬度
LONGITUDE_MID, -- 线路中心经度
LATITUDE_MID, -- 线路中心纬度
LONGITUDE_MAX, -- 线路最大经度
LATITUDE_MAX, -- 线路最大纬度
ALL_COV_LENGTH, -- 覆盖长度
LTE_TO_3G_TOT, -- 4G切3G总次数
Flow_4G_TOT, -- 4G总流量
CE_GOOD_RATIO_AVG, -- 感知优良率按天平均值
User_4G_AVG, -- 4G用户数按天平均值
RSRP_COUNT, -- RSRP总条数
RSRP_SUM, -- RSRP之和
RSRP_COUNT_105, -- RSRP大于105之和
round((RSRP_COUNT_105/RSRP_COUNT) * 100 , 2) as COVER_RATE, -- 覆盖率
RSRP_SUM/RSRP_COUNT as RSRP_AVG, -- RSRP均值
Do_Type, -- 路段处理措施
eNodeB_ID, -- 基站ID
eNodeB_Name, -- 最近基站名称
CELL_ID, -- 最近的小区ID
CELL_NAME, -- 最近的小区的名称
CELL_ADDRESS, -- 最近基站地址
CELL_STATE , -- 最近的小区的状态
sector_set , -- mr最大的小区集合
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
nc_sector_set as ne_sector_set -- 附近小区集合
FROM
FRT_ESBH_LINE_COVERAGE_D
WHERE
DAY = #{DAY}
AND LINE_LEVEL=500
AND LINE_TYPE=#{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
AND CITY = '#{CITY}'
#{CONDITION}
ORDER BY
LINE_ID
#{LIMIT}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_106_HighwaySectorsIdx_OneLine" description="取指定某条高速路某级别下的业务数据">
<![CDATA[
getByKeyScope
NOCE:DSI_ESBH_LINE_RSRP_D
#{STARTROW}
#{STARTROW}~
i:a1,i:a2,i:a3,i:a4,i:a5,i:a6,i:a7,i:a8,i:a9,i:a10,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a17,i:a18,i:a19
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_107_HighwaySector500His" description="取某个500米分段的历史30天的覆盖率和rsrp均值数据">
<![CDATA[
SELECT
    DAY as create_time,
	LINE_ID, -- 线段ID
RSRP_COUNT_105/RSRP_COUNT as cover, -- 覆盖率
RSRP_SUM/RSRP_COUNT as rsrp, -- RSRP均值
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE
FROM
	FRT_ESBH_LINE_COVERAGE_D
WHERE
	DAY between #{DAYSTART} AND #{DAYEND}
AND LINE_LEVEL=500
AND LINE_TYPE =#{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
AND ROAD_ID= #{ROAD_ID}
AND LINE_ID= '#{LINE_ID}'
ORDER BY
  DAY
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_108_HighwayList_Continuous" description="某天某地市下所有高速路的汇总数据（连片模式）">
<![CDATA[
SELECT A.CITY , A.ROAD_ID,ROAD_NAME,POOR_LENGTH,POOR_COUNT, ROAD_LENGTH ,
ROUND((POOR_LENGTH/COVER_LENGTH) * 100,2) AS POOR_RATIO ,
b.COVER_LENGTH,
a.longitude_min,
a.latitude_min,
a.longitude_max,
a.latitude_max,
a.longitude_mid,
a.latitude_mid,
a.pc_orderno_tot,
a.lte_to_3g_orderno,
a.flow_4g_orderno,
a.ce_good_ratio_orderno,
a.poor_cov_length_orderno,
a.user_4g_orderno
FROM
(
SELECT
	d.CITY ,
	d.ROAD_ID,
	d.ROAD_NAME,
	d.LONGITUDE_MIN_BAIDU as longitude_min,
	d.LATITUDE_MIN_BAIDU as latitude_min,
	d.LONGITUDE_MAX_BAIDU as longitude_max,
	d.LATITUDE_MAX_BAIDU as latitude_max,
	d.LONGITUDE_MID_BAIDU as longitude_mid,
	d.LATITUDE_MID_BAIDU as latitude_mid,
	d.PC_ORDERNO_TOT,
	d.LTE_TO_3G_ORDERNO as lte_to_3g_orderno,
	d.FLOW_4G_ORDERNO as flow_4g_orderno,
	d.ce_good_ratio_orderno,
    d.POOR_GRID_NUMS_ORDERNO as poor_cov_length_orderno,
	d.USER_4G_ORDERNO as user_4g_orderno,
	ROUND(sum(d.POOR_GRID_AREA)/1000 , 2) as POOR_LENGTH ,-- 连片弱里程数
	count(*) AS POOR_COUNT, -- 连片弱区数
	round(c.road_length/1000 , 0) as road_length
FROM
	FRT_AGPS_POOR_COVERAGE_D as d
JOIN
(
	select road_id , road_length from DIM_ROAD_CITY
WHERE
    CITY_NAME = '#{CITY}'
) as c
on d.road_id = c.road_id
WHERE
	d.DAY = #{DAY}
AND d.GRID_TYPE=20
AND d.TYPE = #{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
AND d.CITY = '#{CITY}'
#{CONDITION}
GROUP BY
	ROAD_ID,
	ROAD_NAME
) A
join
(
SELECT
	ROAD_ID,
	sum(ROAD_LENGTH)/1000 as COVER_LENGTH -- 覆盖里程数
FROM
	FRT_ESBH_LINE_COVERAGE_D
WHERE
	DAY = #{DAY}
AND LINE_LEVEL=500
AND LINE_TYPE = #{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
AND CITY = '#{CITY}'
GROUP BY
	ROAD_ID,
	ROAD_NAME
) B
on A.ROAD_ID = B.ROAD_ID
ORDER BY POOR_RATIO DESC
#{LIMIT}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_109_HighwayList_Continuous" description="某天某地市下所有高速路的连片弱区数据地图（连片模式）">
<![CDATA[
SELECT
CITY ,
CITY_ID,
OBJECT_ID,
TYPE,
ROAD_ID,
ROAD_NAME,
LONGITUDE_MIN_BaiDu AS LONGITUDE_MIN, -- 栅格最小经度(用于OSM，取值为GPS，只是复用字段名称)
LATITUDE_MIN_BaiDu AS LATITUDE_MIN, -- 栅格最小纬度
LONGITUDE_MID_BaiDu AS LONGITUDE_MID, -- 栅格中心经度
LATITUDE_MID_BaiDu AS LATITUDE_MID, -- 栅格中心纬度
LONGITUDE_MAX_BaiDu AS LONGITUDE_MAX, -- 栅格最大经度
LATITUDE_MAX_BaiDu AS LATITUDE_MAX, -- 栅格最大纬度
contain_ids,
GIS_DATA --	GIS经纬度集合
FROM
	FRT_AGPS_POOR_COVERAGE_D
WHERE
	DAY = #{DAY}
AND GRID_TYPE=20
AND TYPE = #{TYPE}-- 1：表示高速；2：表示高铁；3：表示市政路。
AND CITY = '#{CITY}'
#{CONDITION}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_110_HighwayList_Continuous" description="某天某地市下所有高速路的连片弱区地图数据（连片模式）">
<![CDATA[
SELECT
CITY ,
OBJECT_ID,
ROAD_ID,
ROAD_NAME,
LONGITUDE_MIN_BaiDu, -- 栅格最小经度
LATITUDE_MIN_BaiDu, -- 栅格最小纬度
LONGITUDE_MID_BaiDu, -- 栅格中心经度
LATITUDE_MID_BaiDu, -- 栅格中心纬度
LONGITUDE_MAX_BaiDu, -- 栅格最大经度
LATITUDE_MAX_BaiDu, -- 栅格最大纬度
GIS_DATA -- GIS经纬度集合
FROM
	FRT_AGPS_POOR_COVERAGE_D
WHERE
	DAY = #{DAY}
AND GRID_TYPE=20
AND TYPE = #{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
AND CITY = '#{CITY}'
]]>
</sqlTemplate><!--已经没有用到-->

<sqlTemplate id="IntelligentRoadTestAnalysisV2_111_HighwayPoor" description="取某条高速路的连片弱区明细数据">
<![CDATA[
SELECT
CITY ,
ROAD_ID ,
road_name,
OBJECT_ID as line_id, -- 线段ID，为了复用对象，这里将名称和500米段的名称统一一下
POOR_GRID_AREA, -- 里程数
LONGITUDE_MIN_BAIDU AS LONGITUDE_MIN, -- 线路最小经度
LATITUDE_MIN_BAIDU AS LATITUDE_MIN, -- 线路最小纬度
LONGITUDE_MID_BAIDU AS LONGITUDE_MID, -- 线路中心经度
LATITUDE_MID_BAIDU AS LATITUDE_MID, -- 线路中心纬度
LONGITUDE_MAX_BAIDU AS LONGITUDE_MAX, -- 线路最大经度
LATITUDE_MAX_BAIDU AS LATITUDE_MAX, -- 线路最大纬度
LTE_TO_3G_TOT, -- 4G切3G总次数
Flow_4G_TOT, -- 4G总流量
CE_GOOD_RATIO_AVG, -- 感知优良率按天平均值
User_4G_AVG, -- 4G用户数按天平均值
DX_RSRP_COUNT AS RSRP_COUNT, -- RSRP总条数
DX_RSRP_SUM AS RSRP_SUM, -- RSRP之和
DX_RSRP_105_COUNT AS RSRP_COUNT_105, -- RSRP大于105之和
round((DX_RSRP_105_COUNT/DX_RSRP_COUNT ) * 100 ,2)as COVER_RATE, -- 覆盖率
round(DX_RSRP_SUM/DX_RSRP_COUNT,2) as RSRP_AVG, -- RSRP均值
Do_Type, -- 路段处理措施
ENODEB_ID, -- 基站ID
ENODEBNAME, -- 最近基站名称
CELL_ID, -- 最近的小区ID
CELL_NAME, -- 最近的小区的名称
ADDRESS, -- 最近基站地址
CELL_STATE , -- 最近的小区的状态
SECTOR_SET , -- mr最大的小区集合
TOP5_SECTOR_SET as ne_sector_set ,-- 附近小区集合
GIS_DATA,  -- gis数据
pc_orderno_tot,
lte_to_3g_orderno,
flow_4g_orderno,
ce_good_ratio_orderno,
POOR_GRID_NUMS_ORDERNO as poor_cov_length_orderno,
user_4g_orderno,
contain_ids   -- 弱连片对应的20米线段的id集合
FROM
FRT_AGPS_POOR_COVERAGE_D
WHERE
DAY = #{DAY}
AND GRID_TYPE=20
AND TYPE =  #{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
AND CITY = '#{CITYNAME}'
AND ROAD_ID = '#{ROAD_ID}'
#{CONDITION} -- 用于扩展查询条件的变量
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_getHighwayLPHis" description="取某个连片的历史30天的覆盖率和rsrp均值数据">
<![CDATA[
SELECT
DAY as create_time,
round((DX_RSRP_105_COUNT/DX_RSRP_COUNT ) * 100 ,2)as COVER_RATE, -- 覆盖率
DX_RSRP_SUM/DX_RSRP_COUNT as RSRP_AVG -- RSRP均值
FROM
FRT_AGPS_POOR_COVERAGE_D
WHERE
DAY between #{DAYSTART} AND #{DAYEND}
AND GRID_TYPE=20
AND TYPE =  #{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
AND ROAD_ID = '#{ROAD_ID}'
AND OBJECT_ID = '#{LINE_ID}'
]]>
</sqlTemplate><!--已经没有用到-->

<sqlTemplate id="IntelligentRoadTestAnalysisV2_111_scachHighwayPoor" description="搜索某条高速路的连片弱区明细数据">
	<![CDATA[
SELECT
CITY ,
ROAD_ID ,
OBJECT_ID as line_id, -- 线段ID，为了复用对象，这里将名称和500米段的名称统一一下
POOR_GRID_AREA, -- 里程数
LONGITUDE_MIN_BAIDU AS LONGITUDE_MIN, -- 线路最小经度
LATITUDE_MIN_BAIDU AS LATITUDE_MIN, -- 线路最小纬度
LONGITUDE_MID_BAIDU AS LONGITUDE_MID, -- 线路中心经度
LATITUDE_MID_BAIDU AS LATITUDE_MID, -- 线路中心纬度
LONGITUDE_MAX_BAIDU AS LONGITUDE_MAX, -- 线路最大经度
LATITUDE_MAX_BAIDU AS LATITUDE_MAX, -- 线路最大纬度
LTE_TO_3G_TOT, -- 4G切3G总次数
Flow_4G_TOT, -- 4G总流量
CE_GOOD_RATIO_AVG, -- 感知优良率按天平均值
User_4G_AVG, -- 4G用户数按天平均值
DX_RSRP_COUNT AS RSRP_COUNT, -- RSRP总条数
DX_RSRP_SUM AS RSRP_SUM, -- RSRP之和
DX_RSRP_105_COUNT AS RSRP_COUNT_105, -- RSRP大于105之和
round((DX_RSRP_105_COUNT/DX_RSRP_COUNT ) * 100 ,2)as COVER_RATE, -- 覆盖率
DX_RSRP_SUM/DX_RSRP_COUNT as RSRP_AVG, -- RSRP均值
Do_Type, -- 路段处理措施
ENODEB_ID, -- 基站ID
ENODEBNAME, -- 最近基站名称
CELL_ID, -- 最近的小区ID
CELL_NAME, -- 最近的小区的名称
ADDRESS, -- 最近基站地址
CELL_STATE , -- 最近的小区的状态
SECTOR_SET , -- mr最大的小区集合
TOP5_SECTOR_SET as ne_sector_set ,-- 附近小区集合
GIS_DATA  -- gis数据
FROM
FRT_AGPS_POOR_COVERAGE_D
WHERE
DAY = #{DAY}
AND GRID_TYPE=20
AND TYPE =  #{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
AND CITY = '#{CITYNAME}'
#{CONDITION}
#{LIMIT}
]]>
</sqlTemplate><!--已经没有用到-->

<sqlTemplate id="IntelligentRoadTestAnalysisV2_112_HighwayPoorHis" description="取某个连片弱区段的历史数据">
<![CDATA[
SELECT
    DAY,
	LINE_ID, -- 线段ID
ROUND(DX_RSRP_105_COUNT/DX_RSRP_COUNT*100,2) as COVER_RATE, -- 覆盖率
ROUND(DX_RSRP_SUM/DX_RSRP_COUNT,2) as RSRP_AVG, -- RSRP均值
FROM
	FRT_AGPS_POOR_COVERAGE_D
WHERE
	DAY between #{DAYSTART} AND #{DAYEND}
AND GRID_TYPE=20
AND TYPE =  #{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
AND ROAD_ID= #{ROAD_ID}
AND OBJECT_ID= #{OBJECT_ID}
ORDER BY
  DAY
]]>
</sqlTemplate><!--已经没有用到-->


	<!--高铁增加隧道显示的模板-->
<sqlTemplate id="IntelligentRoadTestAnalysisV5_getHighwaySectors" description="取视图范围内的路段对象" DB="postgrepSQL">
<![CDATA[
SELECT
t1.city_id,
t1.city_name,
t1.road_id,
t1.id
FROM dim_road_section_bd t1,
(SELECT ST_PolygonFromText('POLYGON((#{MINLNG} #{MINLAT},
										   #{MINLNG} #{MAXLAT},
										   #{MAXLNG} #{MAXLAT},
										   #{MAXLNG} #{MINLAT},
										   #{MINLNG} #{MINLAT}))',4326) AS geom) t2
WHERE ST_Intersects(t1.geom,t2.geom)
#{CITY}
AND road_type_id=#{ROAD_TYPE_ID} -- 1：表示高速；2：表示高铁；3：表示市政路
AND level=#{LEVEL}
#{ROADID}
]]>
</sqlTemplate>

    <sqlTemplate id="IntelligentRoadTestAnalysisV5_getHighway500By20id" description="根据20米线段的id，获取500米线段id" DB="mysql">
        <![CDATA[
        SELECT sect_id,city_id FROM dim_road_sect_ref_bd WHERE find_in_set('#{SECT_20_ID}',sect_20_id)
        ]]>
    </sqlTemplate>


    <sqlTemplate id="IntelligentRoadTestAnalysisV5_getRoadList" description="某天某地市下所有道路的汇总数据">
        <![CDATA[
select B.ROAD_NAME,B.CENT_GEOM,A.* from
(
	SELECT
		ROAD_ID,
		sum(ROAD_LENGTH) as total_length, -- 总里程
		count(*) as total_count, -- ROAD_TYPE_ID=21时表示隧道数，其那情况下无意义
		sum(COV_LENGTH_110) as gteq110_length, -- >=-110里程
		SUM(ALL_COV_LENGTH-COV_LENGTH_110) as lt110_length, -- <-110里程
		SUM(ROAD_LENGTH- ALL_COV_LENGTH) as out_net_length -- 脱网里程
	FROM
		FRT_ESBH_LINE_COVERAGE_W
	WHERE
		DAY = #{DAY}
		 #{CITYIDCOND}
	AND LINE_TYPE = #{LINE_TYPE} -- 2：综合；21：高铁隧道；22：非隧道
	GROUP BY
		ROAD_ID
) A
JOIN
(
	SELECT
		ROAD_ID ,
		sum(ROAD_LENGTH) AS road_length,
		CENT_GEOM, -- 中心点坐标，是一个字符串，需要切割
		ROAD_NAME
	FROM
		DIM_ROAD_CITY_BD
	WHERE ROAD_TYPE_ID = 2 -- 1：表示高速；2：表示高铁；3：表示市政路;21：表示高铁隧道
	group by ROAD_ID
) B
ON A.ROAD_ID = B.ROAD_ID
ORDER BY
	lt110_length DESC

]]>
    </sqlTemplate>


<!--    <sqlTemplate id="IntelligentRoadTestAnalysisV5_getRoadList" description="某天某地市下所有道路的汇总数据">
<![CDATA[
SELECT
CITY ,
ROAD_ID,
ROAD_NAME,
POOR_LENGTH,
COVER_LENGTH,
POOR_RATIO,
POOR_COUNT ,
LONGITUDE_MIN, &#45;&#45; 线路最小经度
LATITUDE_MIN, &#45;&#45; 线路最小纬度
LONGITUDE_MID, &#45;&#45; 线路中心经度
LATITUDE_MID, &#45;&#45; 线路中心纬度
LONGITUDE_MAX, &#45;&#45; 线路最大经度
LATITUDE_MAX, &#45;&#45; 线路最大纬度
pc_orderno_tot,
lte_to_3g_orderno,
flow_4g_orderno,
ce_good_ratio_orderno,
poor_cov_length_orderno,
user_4g_orderno ,
MIN_USEREX_UPAVGRATE,
MIN_USEREX_DWAVGRATE,
SEED_USER_COUNT, &#45;&#45; 种子用户数
NON_SEED_USER_COUNT, &#45;&#45; 非种子用户数
USER_COUNT, &#45;&#45; 总用户数
round(ROAD_LENGTH/1000 , 2) as road_length
FROM
(
SELECT
CITY ,
ROAD_ID,
sum((case when RSRP_SUM/RSRP_COUNT< -105 then 1 else 0 end)*ROAD_LENGTH)/1000 as POOR_LENGTH,
sum(ROAD_LENGTH)/1000 as COVER_LENGTH,
round((sum((case when RSRP_SUM/RSRP_COUNT< -105 then 1 else 0 end)*ROAD_LENGTH)/sum(ROAD_LENGTH)) * 100,2 ) as POOR_RATIO,
count(*) AS POOR_COUNT ,
LONGITUDE_MIN, &#45;&#45; 线路最小经度
LATITUDE_MIN, &#45;&#45; 线路最小纬度
LONGITUDE_MID, &#45;&#45; 线路中心经度
LATITUDE_MID, &#45;&#45; 线路中心纬度
LONGITUDE_MAX, &#45;&#45; 线路最大经度
LATITUDE_MAX, &#45;&#45; 线路最大纬度
pc_orderno_tot,
lte_to_3g_orderno,
flow_4g_orderno,
ce_good_ratio_orderno,
poor_cov_length_orderno,
user_4g_orderno,
SEED_USER_COUNT, &#45;&#45; 种子用户数
NON_SEED_USER_COUNT, &#45;&#45; 非种子用户数
USER_COUNT, &#45;&#45; 总用户数
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE ,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE
FROM
FRT_ESBH_LINE_COVERAGE_W
WHERE
DAY = #{DAY}
&#45;&#45; AND CITY = '#{CITYNAME}'
#{CITYCONDITION1} &#45;&#45; 考虑到可以看全省，这里要设置为条件控制，全省时为空
AND LINE_TYPE = #{TYPE} &#45;&#45; 1：表示高速；2：表示高铁；3：表示市政路；21：表示高铁隧道。
AND LINE_LEVEL=500
#{CONDITION}
GROUP BY
ROAD_ID
) A
JOIN
(
SELECT
ROAD_ID AS ID,sum(ROAD_LENGTH) as road_length,ROAD_NAME
FROM
DIM_ROAD_CITY_BD
WHERE
1=1
&#45;&#45; CITY_NAME = '#{CITYNAME}'
#{CITYCONDITION2} &#45;&#45; 考虑到可以看全省，这里要设置为条件控制，全省时为空
  and ROAD_TYPE_ID = #{ROAD_TYPE_ID} &#45;&#45; 1：表示高速；2：表示高铁；3：表示市政路;21：表示高铁隧道
  group by ROAD_ID
) B
ON A.ROAD_ID = B.ID
ORDER BY
POOR_RATIO DESC
#{LIMIT}
]]>
</sqlTemplate>-->

<sqlTemplate id="IntelligentRoadTestAnalysisV5_getRoadSector500" description="取某条高速路的500米分段数据">
		<![CDATA[
SELECT
    ROAD_ID , -- 道路ID
	LINE_ID, -- 线段ID
	city , -- 地市名称
	road_name , -- 道路名称
LONGITUDE_MIN, -- 线路最小经度
LATITUDE_MIN, -- 线路最小纬度
LONGITUDE_MID, -- 线路中心经度
LATITUDE_MID, -- 线路中心纬度
LONGITUDE_MAX, -- 线路最大经度
LATITUDE_MAX, -- 线路最大纬度
ALL_COV_LENGTH, -- 覆盖长度
LTE_TO_3G_TOT, -- 4G切3G总次数
Flow_4G_TOT, -- 4G总流量
CE_GOOD_RATIO_AVG, -- 感知优良率按天平均值
User_4G_AVG, -- 4G用户数按天平均值
RSRP_COUNT, -- RSRP总条数，即：MR数量
RSRP_SUM, -- RSRP之和
RSRP_COUNT_105, -- RSRP大于105之和
round((RSRP_COUNT_105/RSRP_COUNT) * 100 , 2) as COVER_RATE, -- 覆盖率
round(RSRP_SUM/ RSRP_COUNT,2) as RSRP_AVG, -- RSRP均值
round((1 -COV_LENGTH_110/ ROAD_LENGTH)*100,2) as weak_length_rate, -- 弱里程占比(%)
ALL_COV_LENGTH-COV_LENGTH_110 lt110_length, -- 弱里程
Do_Type, -- 路段处理措施
eNodeB_ID, -- 基站ID
eNodeB_Name, -- 最近基站名称
CELL_ID, -- 最近的小区ID
CELL_NAME, -- 最近的小区的名称
CELL_ADDRESS, -- 最近基站地址
CELL_STATE , -- 最近的小区的状态
sector_set , -- mr最大的小区集合
SEED_USER_COUNT, -- 种子用户数
NON_SEED_USER_COUNT, -- 非种子用户数
USER_COUNT, -- 总用户数
pc_orderno_tot,
lte_to_3g_orderno,
flow_4g_orderno,
ce_good_ratio_orderno,
poor_cov_length_orderno,
user_4g_orderno,
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE, -- 上行速率
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE, -- 下行速率
nc_sector_set as ne_sector_set -- 附近小区集合
FROM
	FRT_ESBH_LINE_COVERAGE_W
WHERE
	DAY = #{DAY}
AND LINE_LEVEL=500
AND LINE_TYPE=#{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
AND ROAD_ID= #{ROAD_ID}
-- AND CITY = '#{CITY}'
#{CITYCONDITION}
#{CONDITION} -- 用于扩展查询条件的变量
ORDER BY
  LINE_ID
]]>
	</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV5_getRoad20meter" description="查询500米线段对应的20米全部线段" DB="mysql">
<![CDATA[
SELECT sect_id,sect_20_id,city_id FROM DIM_ROAD_SECT_REF_BD WHERE sect_id  = #{SECTID}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV5_RoadSector500His30Day" description="取某个500米分段的历史30天的覆盖率和rsrp均值数据">
<![CDATA[
SELECT
    DAY as create_time,
	LINE_ID, -- 线段ID
RSRP_COUNT_105/RSRP_COUNT as cover, -- 覆盖率
round(COV_LENGTH_110 , 2) as gteq110_length, -- >=-110里程
round(RSRP_SUM/RSRP_COUNT , 2) as rsrp, -- RSRP均值
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE
FROM
	FRT_ESBH_LINE_COVERAGE_W
WHERE
	DAY between #{DAYSTART} AND #{DAYEND}
AND LINE_LEVEL=500
AND LINE_TYPE =#{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
AND ROAD_ID= #{ROAD_ID}
AND LINE_ID= '#{LINE_ID}'
ORDER BY
  DAY
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV5_getRoadAllLine" description="取某条高速分段所有线路数据" DB="postgrepSQL">
<![CDATA[
SELECT
city_id,
city_name,
road_id,
id
FROM DIM_ROAD_SECTION_BD
WHERE 1=1
-- AND city_name = '#{CITYNAME}'
#{CITYCONDITION}
AND road_type_id=#{ROAD_TYPE_ID} -- 1：表示高速；2：表示高铁；3：表示市政路
AND road_id = #{ROAD_ID}
AND level=#{LEVEL}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV5_getRoadSuiDaoGisData" description="查询隧道的第一二层地图数据" DB="mysql">
<![CDATA[
 select * from dim_road_city_bd where 1=1 #{CITYCONDITION} and ROAD_TYPE_ID = #{ROAD_TYPE_ID}
  -- CITY_NAME='#{CITY_NAME}'
  #{ROAD_ID}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV5_getRoadContinuousFirstList" description="某天某地市下所有高速路的汇总数据（连片模式）">
<![CDATA[
    SELECT
    A.CITY,
    A.ROAD_ID,
    ROAD_NAME,
    POOR_LENGTH,
    POOR_COUNT,
    ROAD_LENGTH,
    ROUND(
    (POOR_LENGTH / COVER_LENGTH) * 100,
    2
    ) AS POOR_RATIO,
    b.COVER_LENGTH,
    a.longitude_min,
    a.latitude_min,
    a.longitude_max,
    a.latitude_max,
    a.longitude_mid,
    a.latitude_mid,
    a.pc_orderno_tot,
    a.lte_to_3g_orderno,
    a.flow_4g_orderno,
    a.ce_good_ratio_orderno,
    a.poor_cov_length_orderno,
    a.user_4g_orderno
    FROM
    (
    SELECT
    d.CITY,
    d.ROAD_ID,
    d.ROAD_NAME,
    d.LONGITUDE_MIN_BAIDU AS longitude_min,
    d.LATITUDE_MIN_BAIDU AS latitude_min,
    d.LONGITUDE_MAX_BAIDU AS longitude_max,
    d.LATITUDE_MAX_BAIDU AS latitude_max,
    d.LONGITUDE_MID_BAIDU AS longitude_mid,
    d.LATITUDE_MID_BAIDU AS latitude_mid,
    d.PC_ORDERNO_TOT,
    d.LTE_TO_3G_ORDERNO AS lte_to_3g_orderno,
    d.FLOW_4G_ORDERNO AS flow_4g_orderno,
    d.ce_good_ratio_orderno,
    d.POOR_GRID_NUMS_ORDERNO AS poor_cov_length_orderno,
    d.USER_4G_ORDERNO AS user_4g_orderno,
    ROUND(
    sum(d.POOR_GRID_AREA) / 1000,
    2
    ) AS POOR_LENGTH,
    -- 连片弱里程数
    count(*) AS POOR_COUNT,
    -- 连片弱区数
    round(c.road_length / 1000, 2) AS road_length
    FROM
    FRT_AGPS_POOR_COVERAGE_D AS d
    JOIN (
    SELECT
    ROAD_ID,
    sum(ROAD_LENGTH) AS road_length,
    ROAD_NAME
    FROM
    DIM_ROAD_CITY_BD
    WHERE
    1 = 1 -- CITY_NAME = '#{CITYNAME}'
    #{CITYCONDITION1} -- 考虑到可以看全省，这里要设置为条件控制，全省时为空
    AND ROAD_TYPE_ID = #{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路;21：表示高铁隧道
    GROUP BY
    ROAD_ID
    ) AS c ON d.road_id = c.road_id
    WHERE
    d. DAY = #{DAY}
    AND d.GRID_TYPE = 20
    AND d.TYPE = #{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
    -- AND d.CITY = '#{CITY}'
    #{CITYCONDITION2} -- 可以查看全省，所以这里要设置一个变量控制是否添加地市条件
    #{CONDITION}
    GROUP BY
    ROAD_ID,
    ROAD_NAME
    ) A
    JOIN (
    SELECT
    ROAD_ID,
    sum(ROAD_LENGTH) / 1000 AS COVER_LENGTH -- 覆盖里程数
    FROM
    FRT_ESBH_LINE_COVERAGE_W
    WHERE
    DAY = #{DAY}
    AND RSRP_COUNT>0
    AND LINE_LEVEL = 500
    AND LINE_TYPE = #{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
    -- AND CITY = '#{CITY}'
    #{CITYCONDITION2} -- 可以查看全省，所以这里要设置一个变量控制是否添加地市条件
    GROUP BY
    ROAD_ID,
    ROAD_NAME
    ) B ON A.ROAD_ID = B.ROAD_ID
    ORDER BY
    POOR_RATIO DESC #{LIMIT}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV5_getRoadList_weak" description="某天某地市或全省所有高铁的汇总数据（按每条高铁线路汇总，弱连片）">
<![CDATA[
SELECT
	ROAD_ID,road_name,
	count(*) as total_count, -- 弱连片数
	sum(POOR_GRID_NUMS)*20 as lt110_length, -- <-110里程
	max(POOR_GRID_NUMS)*20 as max_weak_length, -- 最大连段里程,米
	min(POOR_GRID_NUMS)*20 as min_weak_length -- 最小连段里程,米
FROM
	FRT_AGPS_POOR_COVERAGE_D
WHERE
	DAY = #{DAY}
	#{CITYIDCOND}
AND TYPE=#{TYPE} -- 高铁弱连片
GROUP BY
	ROAD_ID
ORDER BY
	lt110_length DESC
]]>
</sqlTemplate>
    <!--<sqlTemplate id="IntelligentRoadTestAnalysisV5_getRoadContinuousFirstList" description="某天某地市下所有高速路的汇总数据（连片模式）">
            <![CDATA[
    SELECT A.CITY , A.ROAD_ID,ROAD_NAME,POOR_LENGTH,POOR_COUNT, ROAD_LENGTH ,
    ROUND((POOR_LENGTH/COVER_LENGTH) * 100,2) AS POOR_RATIO ,
    b.COVER_LENGTH,
    a.longitude_min,
    a.latitude_min,
    a.longitude_max,
    a.latitude_max,
    a.longitude_mid,
    a.latitude_mid,
    a.pc_orderno_tot,
    a.lte_to_3g_orderno,
    a.flow_4g_orderno,
    a.ce_good_ratio_orderno,
    a.poor_cov_length_orderno,
    a.user_4g_orderno
    FROM
    (
    SELECT
        d.CITY ,
        d.ROAD_ID,
        d.ROAD_NAME,
        d.LONGITUDE_MIN_BAIDU as longitude_min,
        d.LATITUDE_MIN_BAIDU as latitude_min,
        d.LONGITUDE_MAX_BAIDU as longitude_max,
        d.LATITUDE_MAX_BAIDU as latitude_max,
        d.LONGITUDE_MID_BAIDU as longitude_mid,
        d.LATITUDE_MID_BAIDU as latitude_mid,
        d.PC_ORDERNO_TOT,
        d.LTE_TO_3G_ORDERNO as lte_to_3g_orderno,
        d.FLOW_4G_ORDERNO as flow_4g_orderno,
        d.ce_good_ratio_orderno,
        d.POOR_GRID_NUMS_ORDERNO as poor_cov_length_orderno,
        d.USER_4G_ORDERNO as user_4g_orderno,
        ROUND(sum(d.POOR_GRID_AREA)/1000 , 2) as POOR_LENGTH ,&#45;&#45; 连片弱里程数
        count(*) AS POOR_COUNT, &#45;&#45; 连片弱区数
        round(c.road_length/1000 , 0) as road_length
    FROM
        FRT_AGPS_POOR_COVERAGE_D as d
    JOIN
    (
        SELECT
    ROAD_ID,sum(ROAD_LENGTH) as road_length,ROAD_NAME
    FROM
    DIM_ROAD_CITY_BD
    WHERE
    1=1
    &#45;&#45; CITY_NAME = '#{CITYNAME}'
    #{CITYCONDITION1} &#45;&#45; 考虑到可以看全省，这里要设置为条件控制，全省时为空
      and ROAD_TYPE_ID = #{TYPE} &#45;&#45; 1：表示高速；2：表示高铁；3：表示市政路;21：表示高铁隧道
      group by ROAD_ID
    ) as c
    on d.road_id = c.road_id
    WHERE
        d.DAY = #{DAY}
    AND d.GRID_TYPE=20
    AND d.TYPE = #{TYPE} &#45;&#45; 1：表示高速；2：表示高铁；3：表示市政路。
    &#45;&#45; AND d.CITY = '#{CITY}'
    #{CITYCONDITION2} &#45;&#45; 可以查看全省，所以这里要设置一个变量控制是否添加地市条件
    #{CONDITION}
    GROUP BY
        ROAD_ID,
        ROAD_NAME
    ) A
    join
    (
    SELECT
        ROAD_ID,
        sum(ROAD_LENGTH)/1000 as COVER_LENGTH &#45;&#45; 覆盖里程数
    FROM
        FRT_ESBH_LINE_COVERAGE_W
    WHERE
        DAY = #{DAY}
    AND LINE_LEVEL=500
    AND LINE_TYPE = #{TYPE} &#45;&#45; 1：表示高速；2：表示高铁；3：表示市政路。
    &#45;&#45; AND CITY = '#{CITY}'
    #{CITYCONDITION2} &#45;&#45; 可以查看全省，所以这里要设置一个变量控制是否添加地市条件
    GROUP BY
        ROAD_ID,
        ROAD_NAME
    ) B
    on A.ROAD_ID = B.ROAD_ID
    ORDER BY POOR_RATIO DESC
    #{LIMIT}
    ]]>
        </sqlTemplate>-->

<sqlTemplate id="IntelligentRoadTestAnalysisV5_getRoadContinuousGisData" description="某天某地市下所有高速路的连片弱区数据地图（连片模式）">
<![CDATA[
SELECT
CITY ,
CITY_ID,
OBJECT_ID,
TYPE,
ROAD_ID,
ROAD_NAME,
LONGITUDE_MIN_BaiDu AS LONGITUDE_MIN, -- 栅格最小经度(用于OSM，取值为GPS，只是复用字段名称)
LATITUDE_MIN_BaiDu AS LATITUDE_MIN, -- 栅格最小纬度
LONGITUDE_MID_BaiDu AS LONGITUDE_MID, -- 栅格中心经度
LATITUDE_MID_BaiDu AS LATITUDE_MID, -- 栅格中心纬度
LONGITUDE_MAX_BaiDu AS LONGITUDE_MAX, -- 栅格最大经度
LATITUDE_MAX_BaiDu AS LATITUDE_MAX, -- 栅格最大纬度
contain_ids,
GIS_DATA --	GIS经纬度集合
FROM
	FRT_AGPS_POOR_COVERAGE_D
WHERE
	DAY = #{DAY}
AND GRID_TYPE=20
AND TYPE = #{TYPE}-- 1：表示高速；2：表示高铁；3：表示市政路。
-- AND CITY = '#{CITY}'
#{CITYCONDITION} -- 由于可以查看全省，这里要做成一个变量
#{CONDITION}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV5_getRoadPoorByRoadID" description="取某条高速路的连片弱区明细数据">
		<![CDATA[
SELECT
CITY ,
ROAD_ID ,
road_name,
OBJECT_ID as line_id, -- 线段ID，为了复用对象，这里将名称和500米段的名称统一一下
POOR_GRID_AREA, -- 里程数
POOR_GRID_AREA as lt110_length, -- 里程数
LONGITUDE_MIN_BAIDU AS LONGITUDE_MIN, -- 线路最小经度
LATITUDE_MIN_BAIDU AS LATITUDE_MIN, -- 线路最小纬度
LONGITUDE_MID_BAIDU AS LONGITUDE_MID, -- 线路中心经度
LATITUDE_MID_BAIDU AS LATITUDE_MID, -- 线路中心纬度
LONGITUDE_MAX_BAIDU AS LONGITUDE_MAX, -- 线路最大经度
LATITUDE_MAX_BAIDU AS LATITUDE_MAX, -- 线路最大纬度
LTE_TO_3G_TOT, -- 4G切3G总次数
Flow_4G_TOT, -- 4G总流量
CE_GOOD_RATIO_AVG, -- 感知优良率按天平均值
User_4G_AVG, -- 4G用户数按天平均值
DX_RSRP_COUNT AS RSRP_COUNT, -- RSRP总条数,即：MR数量
DX_RSRP_SUM AS RSRP_SUM, -- RSRP之和
DX_RSRP_105_COUNT AS RSRP_COUNT_105, -- RSRP大于105之和
round((DX_RSRP_105_COUNT/DX_RSRP_COUNT ) * 100 ,2)as COVER_RATE, -- 覆盖率
round(DX_RSRP_SUM/DX_RSRP_COUNT,2) as RSRP_AVG, -- RSRP均值
round(POOR_GRID_NUMS/ ALL_GRID_NUMS*100,2) as weak_length_rate, -- 弱里程占比（%）
round(MIN_USEREX_UPAVGRATE,2) MIN_USEREX_UPAVGRATE, -- 上行速率
round(MIN_USEREX_DWAVGRATE,2) MIN_USEREX_DWAVGRATE, -- 下行速率
Do_Type, -- 路段处理措施
ENODEB_ID, -- 基站ID
ENODEBNAME, -- 最近基站名称
CELL_ID, -- 最近的小区ID
CELL_NAME, -- 最近的小区的名称
ADDRESS, -- 最近基站地址
CELL_STATE , -- 最近的小区的状态
SECTOR_SET , -- mr最大的小区集合
SEED_USER_COUNT, -- 种子用户数
NON_SEED_USER_COUNT, -- 非种子用户数
USER_COUNT, -- 总用户数
TOP5_SECTOR_SET as ne_sector_set ,-- 附近小区集合
GIS_DATA,  -- gis数据
pc_orderno_tot,
lte_to_3g_orderno,
flow_4g_orderno,
ce_good_ratio_orderno,
POOR_GRID_NUMS_ORDERNO as poor_cov_length_orderno,
user_4g_orderno,
contain_ids   -- 弱连片对应的20米线段的id集合
FROM
FRT_AGPS_POOR_COVERAGE_D
WHERE
DAY = #{DAY}
AND GRID_TYPE=20
AND TYPE =  #{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
-- AND CITY = '#{CITYNAME}'
#{CITYCONDTION} -- 可以查看全省，这里要做一个变量
AND ROAD_ID = '#{ROAD_ID}'
#{CONDITION} -- 用于扩展查询条件的变量
]]>
	</sqlTemplate>


<sqlTemplate id="IntelligentRoadTestAnalysisV5_roadSectorsIdx" description="取指定高速路段对象的业务数据" DB="hbase">
<![CDATA[
getByKeys
NOCE:DSI_ESBH_LINE_RSRP_W
#{KEYLIST}
#{COLUMNLIST}
]]>
</sqlTemplate>
<!--高铁增加隧道显示的模板结束-->


<sqlTemplate id="IntelligentRoadTestAnalysisV2_201_MetroLinesList" description="取某地市各条地铁线路汇总列表数据（汇总到线路）">
<![CDATA[
SELECT
	A.line_id,
	line_name,
	poor_count,
	cov_count,
	poor_ratio,
	cover_rate,
	rsrp_avg,
	B.line_sect_count
FROM
	(
		SELECT
			Line_ID,
			line_name,
			round(
				(sum(DX_RSRP_105_Cnt)/sum(DX_RSRP_140_Cnt)) * 100,
				2
			) AS cover_rate,
			-- 覆盖率
			round(
				sum(DX_RSRP_140_Sum)/sum(DX_RSRP_140_Cnt),
				2
			) AS rsrp_avg,
			-- rsrp均值
			sum(
				CASE
				WHEN DX_RSRP_140_Avg < - 105 THEN
					1
				ELSE
					0
				END
			) AS poor_count,
			-- 弱路段数
			count(*) AS cov_count,
			-- 覆盖段数
			round(
				sum(
					CASE
					WHEN DX_RSRP_140_Avg < - 105 THEN
						1
					ELSE
						0
					END
				) / count(*) * 100,
				2
			) AS poor_ratio -- 弱覆盖占比
		FROM
			FRT_METRO_LINE_RSRP_D
		WHERE
			DAY = #{DAY}
		AND CITY_ID = #{CITY_ID}
		and MR_FLAG = 2
	  #{CONDITION}
		GROUP BY
			line_id,
			LINE_NAME
	) A
JOIN (
	SELECT
		LINE_ID,
		count(*) line_sect_count
	FROM
		dim_metro_section
	WHERE
		LEVEL = 78
	GROUP BY
		LINE_ID
) B ON A.line_id = B.line_id
ORDER BY
	poor_ratio DESC
#{LIMIT}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_202_MetroStations" description="取某地市各条地铁线路地理数据和业务数据（汇总到每两个相邻站）">
<![CDATA[
SELECT a.*, -- 这里包括有rsrp均值指标
b.BAIDU_LONGITUDE AS from_station_longitude,
b.BAIDU_LATITUDE AS from_station_latitude,
c.BAIDU_LONGITUDE AS to_station_longitude,
c.BAIDU_LATITUDE AS to_station_latitude,
b.STATION_ORDER,
e.line_sect_count, -- 路段数
e.cov_count cov_count_sect, -- 覆盖段数
e.poor_ratio poor_ratio_sect -- 弱覆盖占比
FROM (
select
CITY_ID,
CITY_NAME ,
LINE_ID, -- 线路ID
LINE_NAME, -- 线路名称
FROM_STATION_ID, -- 源地铁站ID
FROM_STATION_NAME, -- 源地铁站名称
TO_STATION_ID, -- 目的地铁站ID
TO_STATION_NAME, -- 目的地铁站名称
ALL_COV_SECTION, -- 覆盖段数
(ALL_COV_SECTION*78) as cover_length, -- 覆盖里程，单位：米
POOR_COV_SECTION, -- 弱覆盖段数
round(POOR_COV_SECTION/ALL_COV_SECTION*100,2) as poor_ratio, -- 弱覆盖占比
LINE_LENGTH, -- 总里程
POOR_COV_SECTION_OrderNo, -- 路弱覆盖段数排名
SECTOR_SET, -- 主服务小区集合
LTE_TO_3G_TOT, -- 4G切3G总次数
Lte_To_3g_OrderNo, -- 4G切3G总次数在本地网内排名
Flow_4G_TOT, -- 4G总流量
Flow_4G_OrderNo, -- 本地网内4G流量排名
CE_GOOD_RATIO_AVG, -- 感知优良率按天平均值
Ce_GOOD_RATIO_OrderNo, -- 本地网内感知优良率排名
User_4G_AVG, -- 4G用户数按天平均值
User_4G_OrderNo, -- 本地网内4G用户数排名
PC_OrderNo_TOT, -- 最终排名累计值
ALARM_NUMS, -- 曾发生退服告警总次数
ALARM_CELLS, -- 曾发生退服告警小区数
NR_ALARM_CELLS, -- 未恢复退服告警小区数
NC_SECTOR_SET, -- 距离最近的TOP5的小区集合
NC_ALARM_NUMS, -- 最近小区告警数
Do_Type, -- 路段处理措施
eNodeB_ID, -- 基站ID
eNodeB_Name, -- 最近基站名称
CELL_ID, -- 最近的小区ID
CELL_NAME, -- 最近的小区的名称
CELL_ADDRESS, -- 最近基站地址
CELL_STATE, -- 最近的小区的状态
DX_RSRP_140_Cnt, -- 电信RSRP[-140，0)记录数
DX_RSRP_115_Cnt, -- 电信RSRP[-115，0)记录数
DX_RSRP_110_Cnt, -- 电信RSRP[-110，0)记录数
DX_RSRP_105_Cnt, -- 电信RSRP[-105，0)记录数
DX_RSRP_100_Cnt, -- 电信RSRP[-100，0)记录数
DX_RSRP_95_Cnt, -- 电信RSRP[-95，0)记录数
DX_RSRP_140_Sum, -- 电信RSRP[-140，0)之和
round(DX_RSRP_140_Sum/ DX_RSRP_140_Cnt,2) as rsrp_avg_sect, -- RSRP均值
round((DX_RSRP_105_Cnt/ DX_RSRP_140_Cnt)*100,2) as cover_rate_sect, -- 覆盖率
POOR_COV_SECTION as poor_count_sect, -- 弱路段数
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
LONGITUDE_MIN,
LATITUDE_MIN,
LONGITUDE_MID,
LATITUDE_MID,
LONGITUDE_MAX,
LATITUDE_MAX,
MR_FLAG,
LINE_GIS_DATA
from FRT_METRO_INTER_COV_D
where
		day = #{DAY}
		and CITY_ID = #{CITY_ID}
		and MR_FLAG in (-1 , 1 , 2) -- 将正向指标、方向指标和综合指标都取出来
    #{CONDITION}
) a
left join (
-- 计算站间覆盖率
select a.FROM_STATION_ID,a.TO_STATION_ID,a.MR_FLAG,a.cover_rate,a.rsrp_avg,a.poor_count,a.cov_count,a.poor_ratio,b.line_sect_count
from (
select FROM_STATION_ID,TO_STATION_ID ,MR_FLAG,
  round(sum(DX_RSRP_105_Cnt)/sum(DX_RSRP_140_Cnt)*100 , 2) as cover_rate , -- 覆盖率
   round(sum(DX_RSRP_140_Sum)/sum(DX_RSRP_140_Cnt) , 2) as rsrp_avg , -- rsrp均值
  sum(case when DX_RSRP_140_Avg < -105 then 1 else 0 end) as poor_count, -- 弱路段数
  count(*) as cov_count, -- 覆盖段数
  round(sum(case when DX_RSRP_140_Avg < -105 then 1 else 0 end)/count(*) * 100,2) as poor_ratio -- 弱覆盖占比
from FRT_METRO_LINE_RSRP_D
where day = #{DAY}
and MR_FLAG in (-1 , 1 , 2)
group by FROM_STATION_ID,TO_STATION_ID,MR_FLAG

) a left join (

select FROM_STATION_ID,TO_STATION_ID ,count(*) line_sect_count from dim_metro_section where LEVEL=78
group by FROM_STATION_ID,TO_STATION_ID
union
select TO_STATION_ID,FROM_STATION_ID ,count(*) line_sect_count from dim_metro_section where LEVEL=78
group by TO_STATION_ID,FROM_STATION_ID

) b on a.FROM_STATION_ID=b.FROM_STATION_ID and a.TO_STATION_ID=b.TO_STATION_ID
-- 结束计算站间覆盖率
) e on a.FROM_STATION_ID=e.FROM_STATION_ID and a.TO_STATION_ID=e.TO_STATION_ID and a.MR_FLAG=e.MR_FLAG
 LEFT JOIN dim_metro_station b
ON a.FROM_STATION_ID = b.STATION_ID
left join dim_metro_station c on a.TO_STATION_ID=c.STATION_ID
order by poor_ratio desc
#{LIMIT}
]]>
</sqlTemplate>

    <sqlTemplate id="IntelligentRoadTestAnalysisV5_202_MetroSection" description="取某地市78米所有地铁线路数据">
        <![CDATA[
        SELECT
            city_id,
            Line_ID,
            LINE_NAME,
            section_id,
            FROM_STATION_ID,
            FROM_STATION_NAME,
            TO_STATION_ID,
            TO_STATION_NAME,
            DX_RSRP_140_Cnt,
            DX_RSRP_140_Avg AS rsrp_avg,
            Longitude_MID,
            Latitude_MID,
            MIN_USEREX_DWAVGRATE,
            MIN_USEREX_UPAVGRATE,
            MR_FLAG,
            GIS_LINE_GPS
        FROM
            frt_metro_line_rsrp_d
        WHERE
            DAY = #{DAY}
        AND CITY_ID = #{CITY_ID}
        AND MR_FLAG IN (- 1, 1, 2)
        ORDER BY
            MR_FLAG,
            Line_ID,
            FROM_STATION_ID,
            section_id
        ]]>
    </sqlTemplate>
    <sqlTemplate id="IntelligentRoadTestAnalysisV5_203_MetroStations" description="取某地市78米所有站点的数据">
        <![CDATA[
        SELECT a.*,
            b.BAIDU_LONGITUDE AS from_station_longitude,
            b.BAIDU_LATITUDE AS from_station_latitude,
            c.BAIDU_LONGITUDE AS to_station_longitude,
            c.BAIDU_LATITUDE AS to_station_latitude,
            c.STATION_ORDER
             FROM
            (SELECT DISTINCT
                city_id,
                Line_ID,
                LINE_NAME,
                FROM_STATION_ID,
                FROM_STATION_NAME,
                TO_STATION_ID,
                TO_STATION_NAME,
                MR_FLAG
            FROM
                frt_metro_line_rsrp_d
            WHERE
                DAY = #{DAY}
            AND CITY_ID = #{CITY_ID}
            AND MR_FLAG IN (- 1, 1, 2)
            ) a LEFT JOIN
            (SELECT STATION_ID,STATION_NAME,BAIDU_LONGITUDE,BAIDU_LATITUDE,STATION_ORDER FROM dim_metro_station WHERE CITY_ID = #{CITY_ID}) b
            ON a.FROM_STATION_ID=b.STATION_ID
            left join
            (SELECT STATION_ID,STATION_NAME,BAIDU_LONGITUDE,BAIDU_LATITUDE,STATION_ORDER FROM dim_metro_station WHERE CITY_ID = #{CITY_ID}) c
            on a.TO_STATION_ID=c.STATION_ID
            ORDER BY mr_flag,line_id,STATION_ORDER
        ]]>
    </sqlTemplate>
    <sqlTemplate id="IntelligentRoadTestAnalysisV5_01_MetroPoorCov" description="取某地市所有连片的地铁打标注点">
        <![CDATA[
        select
            LONGITUDE_MIN_BAIDU,
            LATITUDE_MIN_BAIDU,
            LONGITUDE_MID_BaiDu,
            LATITUDE_MID_BaiDu,
            LONGITUDE_MAX_BAIDU,
            LATITUDE_MAX_BAIDU,
            POOR_GRID_NUMS,
            ROAD_ID,
            line_id
        from FRT_AGPS_POOR_COVERAGE_D A
        join dim_metro_section B
        on A.road_id=b.id
        where day = #{DAY}
        and A.CITY_ID='#{CITY_ID}'
        and TYPE=15
        ]]>
    </sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_207_MetroStationTA" description="取某些站点的TA值">
<![CDATA[
SELECT
	MR_FLAG, -- 标记正向、反向等指标
	CITY_ID, -- 地市ID
	FROM_STATION_ID, -- 起始站点id
	SECTION_ID,
	TA_LEVEL, -- TA值
	FROM_STATION_NAME, -- 起始站点名称
	Longitude_MID, -- 中心经度
	Latitude_MID, -- 中心纬度
	ROUND(DX_RSRP_140_Sum/ DX_RSRP_140_Cnt , 2) as rsrp_avg, -- rsrp均值
	DX_RSRP_140_Cnt as counts , -- MR条数
	MIN_USEREX_UPAVGRATE, -- 上行速率
	MIN_USEREX_DWAVGRATE, -- 下行速率
	DAY
FROM
	FRT_METRO_LINE_RSRP_D
WHERE
	city_id = #{CITY_ID}
AND DAY = #{DAY}
AND FROM_STATION_ID in(
#{FROM_STATION_ID_LIST}
)
AND MR_FLAG = 0
ORDER BY
	FROM_STATION_ID,
	TA_LEVEL
]]>
</sqlTemplate>

<!--获取站点每个扇区的TA记录-->
<sqlTemplate id="IntelligentRoadTestAnalysisV2_208_MetroStationSectorTA" description="取某些站点的每个室分TA值">
<![CDATA[
SELECT
	DAY,
	ENODEB_ID,
	CELL_ID,
	CITY_ID,
	-- 地市ID
	FROM_STATION_ID,
	-- 起始站点id
	TA_LEVEL,
	-- TA值
	FROM_STATION_NAME,
	-- 起始站点名称
	Longitude_MID,
	-- 中心经度
	Latitude_MID,
	-- 中心纬度
	ROUND(
		DX_RSRP_140_Sum / DX_RSRP_140_Cnt,
		2
	) AS rsrp_avg,
	-- rsrp均值
	DX_RSRP_140_Cnt as ta_count
	-- MR条数
FROM
	FRT_METRO_CELL_RSRP_D
WHERE
city_id = #{CITY_ID}
AND DAY = #{DAY}
AND FROM_STATION_ID in(
#{FROM_STATION_ID_LIST}
)
AND TA_LEVEL < 4
ORDER BY
	FROM_STATION_ID,
	ENODEB_ID,
	CELL_ID,
	TA_LEVEL
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_203_MetroStationHis" description="取某地市某地铁线路某相邻站历史数据">
<![CDATA[
select DAY,FROM_STATION_ID,TO_STATION_ID,
round(A.DX_RSRP_105_Cnt/A.DX_RSRP_140_Cnt,2) as RSRP_AVG -- 覆盖率
round(DX_RSRP_140_Sum/DX_RSRP_140_Cnt,2) as RSRP_AVG -- RSRP均值
from FRT_METRO_INTER_COV_D
where day = #{DAY} and CITY_ID = #{CITY_ID} and FROM_STATION_ID = #{FROM_STATION_ID} and TO_STATION_ID = #{TO_STATION_ID}
group by line_id,FROM_STATION_ID,TO_STATION_ID
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_204_MetroStation_DetailGis" description="取某两个相邻站间每78米的分段数据">
<![CDATA[
select SECTION_ID,GIS_LINE_GPS,
DX_RSRP_140_Cnt,
round(min_userex_upavgrate, 2 ) as min_userex_upavgrate,
round(min_userex_dwavgrate ,  2) as min_userex_dwavgrate,
round(DX_RSRP_140_Sum/DX_RSRP_140_Cnt,2) as RSRP_AVG -- RSRP均值
from FRT_METRO_LINE_RSRP_D
where day = #{DAY} and CITY_ID = #{CITY_ID} and FROM_STATION_ID = #{FROM_STATION_ID} and TO_STATION_ID = #{TO_STATION_ID}
and mr_flag = #{MR_FLAG}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getRoad20MDataByLineID" description="取20米线段7天历史数据">
<![CDATA[
getByKeys
NOCE:DSI_ESBH_LINE_RSRP_D
#{KEYLIST}
#{COLUMNLIST}
]]>
</sqlTemplate>
    <sqlTemplate id="IntelligentRoadTestV5_getRoad20MDataByLineID" description="取20米线段7天历史数据(更改为W表)">
        <![CDATA[
getByKeys
NOCE:DSI_ESBH_LINE_RSRP_W
#{KEYLIST}
#{COLUMNLIST}
]]>
    </sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_205_getMetroStation30DayData" description="取地铁某站点的30天覆盖率和rsrp均值的趋势图数据">
<![CDATA[
SELECT
	DAY as create_time,
	mr_flag, -- 方向区分
    round(DX_RSRP_140_Sum/DX_RSRP_140_Cnt,2) as rsrp, -- RSRP均值
  	round(DX_RSRP_105_Cnt/DX_RSRP_140_Cnt,4) as cover, -- 覆盖率
    round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
    round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE
FROM
	 FRT_METRO_INTER_COV_D   -- 之前是使用这张表的FRT_METRO_LINE_RSRP_D
WHERE
   FROM_STATION_ID = #{FROM_ID} and TO_STATION_ID = #{TO_ID}
   AND DAY BETWEEN #{STARTDAY}
AND #{ENDDAY}
and mr_flag = #{MR_FLAG} -- 区分方向
GROUP BY create_time,FROM_STATION_ID,TO_STATION_ID , MIN_USEREX_UPAVGRATE , MIN_USEREX_DWAVGRATE
ORDER BY create_time
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_206_getMetro78MLineData" description="取地铁78米的线段的详情页数据">
<![CDATA[
SELECT
	city_id,
	line_id,
	SECTION_ID,
	DX_RSRP_140_Cnt,
	DX_RSRP_105_Cnt,
	DX_RSRP_110_Cnt,
	DX_RSRP_115_Cnt,
	DX_RSRP_140_Sum,
	DX_RSRP_115_Sum,
	DX_RSRP_110_Sum,
	DX_RSRP_105_Sum,
	DX_RSRP_140_Avg,
	DX_RSRP_115_Avg,
	DX_RSRP_110_Avg,
	DX_RSRP_105_Avg,
	DX_TOP_SC_SECTOR as sector_set,
	DX_TOP_NC_SECTOR as nc_sector_set,
	round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
	round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
  	round(DX_RSRP_140_Sum/DX_RSRP_140_Cnt,2) as RSRP_AVG, -- RSRP均值
  	round((DX_RSRP_105_Cnt/DX_RSRP_140_Cnt)*100,2) as cover_rate, -- 覆盖率
	LINE_NAME,
	FROM_STATION_NAME, -- 起始站点名称
    TO_STATION_NAME, -- 终点站点名称
    case
    when MR_FLAG=1 then '正向'
    when MR_FLAG=-1 then '反向'
    else '双向综合'
    end as DIRECTION, -- 方向
	LONGITUDE_MID,
	LATITUDE_MID
FROM
	frt_metro_line_rsrp_d
WHERE
	day = #{DAY}
AND
	SECTION_ID = #{SECTION_ID}
AND
	CITY_ID is not null
AND
	MR_FLAG = #{MR_FLAG}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_getMetro78MLine30DayData" description="取地铁78米的线段的30天历史数据">
<![CDATA[
SELECT
  day as create_time,
  mr_flag,
  round(DX_RSRP_140_Sum/DX_RSRP_140_Cnt,2) as rsrp, -- RSRP均值
  round(DX_RSRP_105_Cnt/DX_RSRP_140_Cnt,4) as cover -- 覆盖率
FROM
	frt_metro_line_rsrp_d
WHERE
	day BETWEEN  #{STARTDAY} AND  #{ENDDAY}
AND
	SECTION_ID = #{SECTION_ID}
AND
	MR_FLAG = #{MR_FLAG}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_getHighwaySector500ByID" description="取某条高速路的500米分段数据">
<![CDATA[
SELECT
    ROAD_ID , -- 道路ID
	LINE_ID, -- 线段ID
	city , -- 地市名称
	road_name,
LONGITUDE_MIN, -- 线路最小经度
LATITUDE_MIN, -- 线路最小纬度
LONGITUDE_MID, -- 线路中心经度
LATITUDE_MID, -- 线路中心纬度
LONGITUDE_MAX, -- 线路最大经度
LATITUDE_MAX, -- 线路最大纬度
ALL_COV_LENGTH, -- 覆盖长度
LTE_TO_3G_TOT, -- 4G切3G总次数
Flow_4G_TOT, -- 4G总流量
CE_GOOD_RATIO_AVG, -- 感知优良率按天平均值
User_4G_AVG, -- 4G用户数按天平均值
RSRP_COUNT, -- RSRP总条数
RSRP_SUM, -- RSRP之和
RSRP_COUNT_105, -- RSRP大于105之和
round((RSRP_COUNT_105/RSRP_COUNT) * 100 , 2) as COVER_RATE, -- 覆盖率
RSRP_SUM/RSRP_COUNT as RSRP_AVG, -- RSRP均值
Do_Type, -- 路段处理措施
eNodeB_ID, -- 基站ID
eNodeB_Name, -- 最近基站名称
CELL_ID, -- 最近的小区ID
CELL_NAME, -- 最近的小区的名称
CELL_ADDRESS, -- 最近基站地址
CELL_STATE , -- 最近的小区的状态
sector_set , -- mr最大的小区集合
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
nc_sector_set as ne_sector_set -- 附近小区集合
FROM
	FRT_ESBH_LINE_COVERAGE_D
WHERE
	DAY = #{DAY}
AND LINE_LEVEL=500
AND LINE_TYPE=#{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
AND CITY = '#{CITY}'
AND LINE_ID = #{LINE_ID}
ORDER BY
  LINE_ID
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_getHighwayPoorByID" description="根据line_id取某个高速路的连片弱区明细数据">
<![CDATA[
SELECT
CITY ,
ROAD_ID ,
road_name,
OBJECT_ID as line_id, -- 线段ID，为了复用对象，这里将名称和500米段的名称统一一下
POOR_GRID_AREA, -- 里程数
LONGITUDE_MIN_BAIDU AS LONGITUDE_MIN, -- 线路最小经度
LATITUDE_MIN_BAIDU AS LATITUDE_MIN, -- 线路最小纬度
LONGITUDE_MID_BAIDU AS LONGITUDE_MID, -- 线路中心经度
LATITUDE_MID_BAIDU AS LATITUDE_MID, -- 线路中心纬度
LONGITUDE_MAX_BAIDU AS LONGITUDE_MAX, -- 线路最大经度
LATITUDE_MAX_BAIDU AS LATITUDE_MAX, -- 线路最大纬度
LTE_TO_3G_TOT, -- 4G切3G总次数
Flow_4G_TOT, -- 4G总流量
CE_GOOD_RATIO_AVG, -- 感知优良率按天平均值
User_4G_AVG, -- 4G用户数按天平均值
DX_RSRP_COUNT AS RSRP_COUNT, -- RSRP总条数
DX_RSRP_SUM AS RSRP_SUM, -- RSRP之和
DX_RSRP_105_COUNT AS RSRP_COUNT_105, -- RSRP大于105之和
round((DX_RSRP_105_COUNT/DX_RSRP_COUNT ) * 100 ,2)as COVER_RATE, -- 覆盖率
DX_RSRP_SUM/DX_RSRP_COUNT as RSRP_AVG, -- RSRP均值
Do_Type, -- 路段处理措施
ENODEB_ID, -- 基站ID
ENODEBNAME, -- 最近基站名称
CELL_ID, -- 最近的小区ID
CELL_NAME, -- 最近的小区的名称
ADDRESS, -- 最近基站地址
CELL_STATE , -- 最近的小区的状态
SECTOR_SET , -- mr最大的小区集合
TOP5_SECTOR_SET as ne_sector_set ,-- 附近小区集合
GIS_DATA,  -- gis数据
contain_ids   -- 弱连片对应的20米线段的id集合
FROM
FRT_AGPS_POOR_COVERAGE_D
WHERE
DAY = #{DAY}
AND GRID_TYPE=20
AND TYPE =  #{TYPE} -- 1：表示高速；2：表示高铁；3：表示市政路。
AND CITY = '#{CITYNAME}'
AND OBJECT_ID = '#{LINE_ID}'
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestAnalysisV2_3_171_cellTable" description="显示扇区数据表格">
<![CDATA[
SELECT
CITY,   					        -- 地市名称,
CITY_ID,  				         	-- 地市ID,
COUNTRY,   				         	-- 区县,
COUNTRY_ID,   			         	-- 区县ID,
MKTCENTER,   			         	-- 营服中心,
MKTCENTER_ID,  			         	-- 营服中心ID,
ENODEB_ID,   			         	-- 基站ID,
ENODEB_NAME,   			         	-- 基站名称,
CELL_ID,   				         	-- 小区ID,
CELL_NAME,   			            -- 小区名称,
LONGITUDE_MIN_BaiDu,   	         	-- 覆盖范围最小经度,
LATITUDE_MIN_BaiDu,  	         	-- 覆盖范围最小纬度,
LONGITUDE_MID_BaiDu,  	         	--  覆盖范围中心经度,
LATITUDE_MID_BaiDu,   	         	-- 覆盖范围中心纬度,
LONGITUDE_MAX_BaiDu,  	         	-- 覆盖范围最大经度,
LATITUDE_MAX_BaiDu,   	         	-- 覆盖范围最大纬度,
BELONG_AREA_ID,   		            -- 中心点区域归属ID,
GRID_NUMS,  				        -- 覆盖范围内栅格数,
POOR_COVERAGE_SET,   	         	-- 弱覆盖区域集合,
POOR_COVERAGE_COUNT,   	         	-- 弱覆盖区域数,
NB_POOR_COVERAGE_SET,   	        -- 附近弱覆盖区域集合,
NB_POOR_COVERAGE_COUNT,             -- 附近弱覆盖区域数,
LTE_TO_3G_TOT,  			        -- 4G切3G总次数,
Flow_4G_TOT,  			         	-- 4G总流量,
CE_GOOD_RATIO_AVG,   	         	-- 感知优良率按天平均值,
User_4G_AVG,   			         	-- 4G用户数按天平均值,
ALARM_NUMS,   			         	-- 曾发生退服告警总次数,
CELL_STATE,   			         	-- 小区的服务状态,
ALARM_LEVEL,  			          	-- 基站小区处理级别,
PRED_LOCATION_GPS,  	         	-- 预测GPS位置,
PRED_LOCATION_BAIDU,  	         	-- 预测百度地图位置,
PRED_DISTANCE,   		         	-- 预测位置相差距离,
LOCA_CORR_PRIORIATY,   	         	-- 坐标勘误优先值,
SURPORT_NUMBER,   		         	-- 支持的MR条数,
BS_VENDOR,  			 	            -- 设备厂商,
OrderNo_TOT,  			          	-- 最终排名累计值,
ant_azimuth,   			         	-- 方位角,
band_mapping,   			            -- 频段映射,
is_indoor,   			         	-- 是否室内,
ant_engine_angle,  		         	-- 机械下倾,
ant_electron_angle,   	         	-- 电子下倾,
high,   					            -- 天线挂高,
acceptstatus,   			            -- 验收状况,
sector_addr,  			         	-- 基站站址,
day,
GRID_TYPE   			            -- 栅格颗粒度类型,
FROM
frt_agps_pc_enb_d
WHERE `DAY` = #{DAY}
AND CITY='#{CITY}'
#{COUNTRY}
-- AND COUNTRY='#{COUNTRY}'
#{PRED_DISTANCE}
and ENODEB_ID is not null
and CELL_ID is not null
and LONGITUDE_MID_BaiDu is not null and LONGITUDE_MID_BaiDu != ""
and LATITUDE_MID_BaiDu  is not null and LATITUDE_MID_BaiDu != ""
and PRED_LOCATION_BAIDU is not null and PRED_LOCATION_BAIDU != ""
and PRED_LOCATION_BAIDU is not null and PRED_LOCATION_BAIDU != ""
and is_indoor = '室外'
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestAnalysisV2_3_171_cellTable2" description="显示扇区数据表格2">
<![CDATA[
SELECT
CITY,   					        -- 地市名称,
CITY_ID,  				         	-- 地市ID,
COUNTRY,   				         	-- 区县,
COUNTRY_ID,   			         	-- 区县ID,
MKTCENTER,   			         	-- 营服中心,
MKTCENTER_ID,  			         	-- 营服中心ID,
ENODEB_ID,   			         	-- 基站ID,
ENODEB_NAME,   			         	-- 基站名称,
CELL_ID,   				         	-- 小区ID,
CELL_NAME,   			            -- 小区名称,
LONGITUDE_MIN_BaiDu,   	         	-- 覆盖范围最小经度,
LATITUDE_MIN_BaiDu,  	         	-- 覆盖范围最小纬度,
LONGITUDE_MID_BaiDu,  	         	--  覆盖范围中心经度,
LATITUDE_MID_BaiDu,   	         	-- 覆盖范围中心纬度,
LONGITUDE_MAX_BaiDu,  	         	-- 覆盖范围最大经度,
LATITUDE_MAX_BaiDu,   	         	-- 覆盖范围最大纬度,
BELONG_AREA_ID,   		            -- 中心点区域归属ID,
GRID_NUMS,  				        -- 覆盖范围内栅格数,
POOR_COVERAGE_SET,   	         	-- 弱覆盖区域集合,
POOR_COVERAGE_COUNT,   	         	-- 弱覆盖区域数,
NB_POOR_COVERAGE_SET,   	        -- 附近弱覆盖区域集合,
NB_POOR_COVERAGE_COUNT,             -- 附近弱覆盖区域数,
LTE_TO_3G_TOT,  			        -- 4G切3G总次数,
Flow_4G_TOT,  			         	-- 4G总流量,
CE_GOOD_RATIO_AVG,   	         	-- 感知优良率按天平均值,
User_4G_AVG,   			         	-- 4G用户数按天平均值,
ALARM_NUMS,   			         	-- 曾发生退服告警总次数,
CELL_STATE,   			         	-- 小区的服务状态,
ALARM_LEVEL,  			          	-- 基站小区处理级别,
PRED_LOCATION_GPS,  	         	-- 预测GPS位置,
PRED_LOCATION_BAIDU,  	         	-- 预测百度地图位置,
PRED_DISTANCE,   		         	-- 预测位置相差距离,
LOCA_CORR_PRIORIATY,   	         	-- 坐标勘误优先值,
SURPORT_NUMBER,   		         	-- 支持的MR条数,
BS_VENDOR,  			 	            -- 设备厂商,
OrderNo_TOT,  			          	-- 最终排名累计值,
ant_azimuth,   			         	-- 方位角,
band_mapping,   			            -- 频段映射,
is_indoor,   			         	-- 是否室内,
ant_engine_angle,  		         	-- 机械下倾,
ant_electron_angle,   	         	-- 电子下倾,
high,   					            -- 天线挂高,
acceptstatus,   			            -- 验收状况,
sector_addr,  			         	-- 基站站址,
day,
GRID_TYPE   			            -- 栅格颗粒度类型,
FROM
frt_agps_pc_enb_d
WHERE `DAY` = #{DAY}
AND CITY='#{CITY}'
#{COUNTRY}
#{PRED_DISTANCE}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestAnalysisV2_3_171_cellTableExport" description="显示扇区数据表提供导出">
<![CDATA[
SELECT
CITY,   					        -- 地市名称,
CITY_ID,  				         	-- 地市ID,
COUNTRY,   				         	-- 区县,
COUNTRY_ID,   			         	-- 区县ID,
MKTCENTER,   			         	-- 营服中心,
MKTCENTER_ID,  			         	-- 营服中心ID,
ENODEB_ID,   			         	-- 基站ID,
ENODEB_NAME,   			         	-- 基站名称,
CELL_ID,   				         	-- 小区ID,
CELL_NAME,   			            -- 小区名称,
BELONG_AREA_ID,   		            -- 中心点区域归属ID,
GRID_NUMS,  				        -- 覆盖范围内栅格数,
POOR_COVERAGE_COUNT,   	         	-- 弱覆盖区域数,
NB_POOR_COVERAGE_SET,   	        -- 附近弱覆盖区域集合,
NB_POOR_COVERAGE_COUNT,             -- 附近弱覆盖区域数,
LTE_TO_3G_TOT,  			        -- 4G切3G总次数,
Flow_4G_TOT,  			         	-- 4G总流量,
CE_GOOD_RATIO_AVG,   	         	-- 感知优良率按天平均值,
User_4G_AVG,   			         	-- 4G用户数按天平均值,
ALARM_NUMS,   			         	-- 曾发生退服告警总次数,
CELL_STATE,   			         	-- 小区的服务状态,
ALARM_LEVEL,  			          	-- 基站小区处理级别,
PRED_LOCATION_GPS,  	         	-- 预测GPS位置,
PRED_LOCATION_BAIDU,  	         	-- 预测百度地图位置,
PRED_DISTANCE,   		         	-- 预测位置相差距离,
LOCA_CORR_PRIORIATY,   	         	-- 坐标勘误优先值,
SURPORT_NUMBER,   		         	-- 支持的MR条数,
BS_VENDOR,  			 	            -- 设备厂商,
OrderNo_TOT,  			          	-- 最终排名累计值,
ant_azimuth,   			         	-- 方位角,
band_mapping,   			            -- 频段映射,
is_indoor,   			         	-- 是否室内,
ant_engine_angle,  		         	-- 机械下倾,
ant_electron_angle,   	         	-- 电子下倾,
high,   					            -- 天线挂高,
acceptstatus,   			            -- 验收状况,
sector_addr,  			         	-- 基站站址,
day,
GRID_TYPE   			            -- 栅格颗粒度类型,
FROM
frt_agps_pc_enb_d
WHERE `DAY` = #{DAY}
AND CITY='#{CITY}'
-- AND COUNTRY='#{COUNTRY}'
#{COUNTRY}
#{PRED_DISTANCE}
and ENODEB_ID is not null
and CELL_ID is not null
and LONGITUDE_MID_BaiDu is not null and LONGITUDE_MID_BaiDu != ""
and LATITUDE_MID_BaiDu  is not null and LATITUDE_MID_BaiDu != ""
and PRED_LOCATION_BAIDU is not null and PRED_LOCATION_BAIDU != ""
and PRED_LOCATION_BAIDU is not null and PRED_LOCATION_BAIDU != ""
and is_indoor = '室外'
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestAnalysisV2_3_176_BONE_AREA_M_table" description="显示骨头区域数据表格">
	<![CDATA[
SELECT
OBJECT_ID,				  -- 区域ID
CITY,					  -- 地市名称
CITY_ID,				  -- 地市ID
COUNTRY,				  -- 区县
COUNTRY_ID,				  -- 区县ID
MKTCENTER,				  -- 营服中心
MKTCENTER_ID,			  -- 营服中心ID
LONGITUDE_MIN,			  -- 栅格最小经度
LATITUDE_MIN,			  -- 栅格最小纬度
LONGITUDE_MID,			  -- 栅格中心经度
LATITUDE_MID,			  -- 栅格中心纬度
LONGITUDE_MAX,			  -- 栅格最大经度
LATITUDE_MAX,			  -- 栅格最大纬度
BELONG_AREA_ID,			  -- 中心点区域归属ID
SECTOR_SET,				  -- 主服务小区集合
GIS_DATA,				  -- GIS经纬度集合
LTE_TO_3G_TOT,			  -- 4G切3G总次数
Lte_To_3g_OrderNo,		  -- 4G切3G总次数在本地网内排名
Flow_4G_TOT,			  -- 4G总流量
Flow_4G_OrderNo,		  -- 本地网内4G流量排名
CE_GOOD_RATIO_AVG,		  -- 感知优良率按天平均值
Ce_GOOD_RATIO_OrderNo,	  -- 本地网内感知优良率排名
User_4G_AVG,			  -- 4G用户数按天平均值
User_4G_OrderNo,		  -- 本地网内4G用户数排名
POOR_GRID_NUMS,			  -- 弱覆盖区域的弱覆盖栅格数
POOR_GRID_NUMS_OrderNo,	  -- 弱覆盖区域的弱覆盖栅格数排名
PC_OrderNo_TOT,			  -- 最终排名累计值
eNodeBName,				  -- 弱覆盖最近基站名称
address,				  -- 弱覆盖最近基站地址
eNodeB_ID,				  -- 弱覆盖最近的基站ID
CELL_ID,				  -- 弱覆盖最近的小区ID
CELL_NAME,				  -- 弱覆盖最近的小区的名称
RSRP_SUM,				  -- RSRP总和
RSRP_COUNT,				  -- RSRP记录数
RSRP_AVG,				  -- RSRP均值
RSRP_COUNT_105,			  -- 大于等于-105记录数
RSRP_COUNT_100,			  -- 大于等于-105记录数
RSRP_COV,				  -- 覆盖率
OBJECT_NAME,			  -- 区域名称
AREA_TYPE,				  -- 区域类型
AREA_SRC_TYPE,			  -- 区域来源类型
IS_SUSPEND,				  -- 是否缓期处理
SUSPEND_REASON,			  -- 缓期原因
CREATOR,				  -- 创建人
CREATE_TIME,			  -- 创建时间
NE_SECTOR_SET,			  -- 最近小区集合
MONTH					  -- 月份

FROM
frt_agps_poor_area_m
WHERE
`MONTH` = #{DAY}
AND CITY = '#{CITY}'
#{COUNTRY}
-- AND COUNTRY = '#{COUNTRY}'
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestAnalysisV2_3_176_BONE_AREA_M_tableExport" description="显示骨头区域数据表格导出">
<![CDATA[
SELECT
OBJECT_ID,				  -- 区域ID
CITY,					  -- 地市名称
CITY_ID,				  -- 地市ID
COUNTRY,				  -- 区县
COUNTRY_ID,				  -- 区县ID
MKTCENTER,				  -- 营服中心
MKTCENTER_ID,			  -- 营服中心ID
BELONG_AREA_ID,			  -- 中心点区域归属ID
SECTOR_SET,				  -- 主服务小区集合
LTE_TO_3G_TOT,			  -- 4G切3G总次数
Lte_To_3g_OrderNo,		  -- 4G切3G总次数在本地网内排名
Flow_4G_TOT,			  -- 4G总流量
Flow_4G_OrderNo,		  -- 本地网内4G流量排名
CE_GOOD_RATIO_AVG,		  -- 感知优良率按天平均值
Ce_GOOD_RATIO_OrderNo,	  -- 本地网内感知优良率排名
User_4G_AVG,			  -- 4G用户数按天平均值
User_4G_OrderNo,		  -- 本地网内4G用户数排名
POOR_GRID_NUMS,			  -- 弱覆盖区域的弱覆盖栅格数
POOR_GRID_NUMS_OrderNo,	  -- 弱覆盖区域的弱覆盖栅格数排名
PC_OrderNo_TOT,			  -- 最终排名累计值
eNodeBName,				  -- 弱覆盖最近基站名称
address,				  -- 弱覆盖最近基站地址
eNodeB_ID,				  -- 弱覆盖最近的基站ID
CELL_ID,				  -- 弱覆盖最近的小区ID
CELL_NAME,				  -- 弱覆盖最近的小区的名称
RSRP_SUM,				  -- RSRP总和
RSRP_COUNT,				  -- RSRP记录数
RSRP_AVG,				  -- RSRP均值
RSRP_COUNT_105,			  -- 大于等于-105记录数
RSRP_COUNT_100,			  -- 大于等于-105记录数
RSRP_COV,				  -- 覆盖率
OBJECT_NAME,			  -- 区域名称
AREA_TYPE,				  -- 区域类型
AREA_SRC_TYPE,			  -- 区域来源类型
IS_SUSPEND,				  -- 是否缓期处理
SUSPEND_REASON,			  -- 缓期原因
CREATOR,				  -- 创建人
CREATE_TIME,			  -- 创建时间
NE_SECTOR_SET,			  -- 最近小区集合
MONTH					  -- 月份

FROM
frt_agps_poor_area_m
WHERE
`MONTH` = #{DAY}
AND CITY = '#{CITY}'
#{COUNTRY}
-- AND COUNTRY = '#{COUNTRY}'
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_3_166_WUGAO_table" description="显示高速、高铁、市政路对应数据表表格">
<![CDATA[
SELECT
OBJECT_ID,                                -- 弱覆盖片区编号
CITY,                                     -- 地市名称
CITY_ID,                                  -- 地市ID
COUNTRY,                                  -- 区县
COUNTRY_ID,                               -- 区县ID
MKTCENTER,                                -- 营服中心
MKTCENTER_ID,                             -- 营服中心ID
LONGITUDE_MIN_BAIDU,                      -- 栅格最小经度
LATITUDE_MIN_BAIDU,                       -- 栅格最小纬度
LONGITUDE_MID_BAIDU,                      -- 栅格中心经度
LATITUDE_MID_BAIDU,                       -- 栅格中心纬度
LONGITUDE_MAX_BAIDU,                      -- 栅格最大经度
LATITUDE_MAX_BAIDU,                       -- 栅格最大纬度
BELONG_AREA_ID,                           -- 中心点区域归属ID
SECTOR_SET,                               -- 主服务小区集合
GIS_DATA,                                 -- GIS经纬度集合
LTE_TO_3G_TOT,                            -- 4G切3G总次数
LTE_TO_3G_ORDERNO,                        -- 4G切3G总次数在本地网内排名
FLOW_4G_TOT,                              -- 4G总流量
FLOW_4G_ORDERNO,                          -- 本地网内4G流量排名
CE_GOOD_RATIO_AVG,                        -- 感知优良率按天平均值
CE_GOOD_RATIO_ORDERNO,                    -- 本地网内感知优良率排名
USER_4G_AVG,                              -- 4G用户数按天平均值
USER_4G_ORDERNO,                          -- 本地网内4G用户数排名
PC_ORDERNO_TOT,                           -- 最终排名累计值
DO_TYPE,                                  -- 弱覆盖处理措施
ENODEBNAME,                               -- 弱覆盖最近基站名称
ADDRESS,                                  -- 弱覆盖最近基站地址
ENODEB_ID,                                -- 基站ID
POOR_GRID_NUMS,                           -- 弱覆盖区域的弱覆盖栅格数
ALARM_NUMS,                               -- 曾发生退服告警总次数
ALARM_CELLS,                              -- 曾发生退服告警小区数
NR_ALARM_CELLS,                           -- 未恢复退服告警小区数
ALL_GRID_NUMS,                            -- 弱覆盖区域的全部栅格数
POOR_GRID_NUMS_ORDERNO,                   -- 弱覆盖区域的弱覆盖栅格数排名
POOR_GRID_AREA,                           -- 弱覆盖区域的弱栅格的面积
ALL_GRID_AREA,                            -- 弱覆盖区域的全部栅格的面积
CELL_ID,                                  -- 弱覆盖最近的小区ID
CELL_NAME,                                -- 弱覆盖最近的小区的名称
CELL_STATE,                               -- 弱覆盖最近的小区的状态
TOP5_SECTOR_SET,                          -- 距离最近的TOP5的小区集合
DX_RSRP_COUNT,                            -- 电信RSRP均值最大频点记录数
DX_RSRP_105_COUNT,                        -- 电信大于等于-105记录数
DX_RSRP_SUM,                              -- 电信RSRP均值最大频点的所有RSRP之和
YD_RSRP_COUNT,                            -- 移动RSRP均值最大频点的非空RSRP记录数
YD_RSRP_105_COUNT,                        -- 移动大于等于-105记录数
YD_RSRP_SUM,                              -- 移动RSRP均值最大频点RSRP之和
LT_RSRP_COUNT,                            -- 联通RSRP均值最大频点记录数
LT_RSRP_105_COUNT,                        -- 联通大于等于-105记录数
LT_RSRP_SUM,                              -- 联通RSRP均值最大频点RSRP之和
MONTH_RELATE,                             -- 关联月份
SCENE_TYPE,                               -- 场景类型
TOP5_ALARM_NUMS,                          -- 最近小区告警数
ROAD_ID,                                  -- 线路ID
ROAD_NAME,                                -- 线路名称
`DAY`,                                    -- day
GRID_TYPE,                                -- 栅格颗粒度类型
TYPE                                      -- 类型TYPE=1（高速）、2（高铁）、3（市政路）
FROM
frt_agps_poor_coverage_d
WHERE CITY='#{CITY}'
AND `DAY`=#{DAY}
AND TYPE=#{TYPE}
#{COUNTRY}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_3_166_WUGAO_tableExport" description="显示高速、高铁、市政路对应数据表表格导出">
<![CDATA[
SELECT
OBJECT_ID,                                -- 弱覆盖片区编号
CITY,                                     -- 弱覆盖片区编号
CITY_ID,                                  -- 地市ID
COUNTRY,                                  -- 区县
COUNTRY_ID,                               -- 区县ID
MKTCENTER,                                -- 营服中心
MKTCENTER_ID,                             -- 营服中心ID
BELONG_AREA_ID,                           -- 中心点区域归属ID
SECTOR_SET,                               -- 主服务小区集合
LTE_TO_3G_TOT,                            -- 4G切3G总次数
LTE_TO_3G_ORDERNO,                        -- 4G切3G总次数在本地网内排名
FLOW_4G_TOT,                              -- 4G总流量
FLOW_4G_ORDERNO,                          -- 本地网内4G流量排名
CE_GOOD_RATIO_AVG,                        -- 感知优良率按天平均值
CE_GOOD_RATIO_ORDERNO,                    -- 本地网内感知优良率排名
USER_4G_AVG,                              -- 4G用户数按天平均值
USER_4G_ORDERNO,                          -- 本地网内4G用户数排名
PC_ORDERNO_TOT,                           -- 最终排名累计值
DO_TYPE,                                  -- 弱覆盖处理措施
ENODEBNAME,                               -- 弱覆盖最近基站名称
ADDRESS,                                  -- 弱覆盖最近基站地址
ENODEB_ID,                                -- 基站ID
POOR_GRID_NUMS,                           -- 弱覆盖区域的弱覆盖栅格数
ALARM_NUMS,                               -- 曾发生退服告警总次数
ALARM_CELLS,                              -- 曾发生退服告警小区数
NR_ALARM_CELLS,                           -- 未恢复退服告警小区数
ALL_GRID_NUMS,                            -- 弱覆盖区域的全部栅格数
POOR_GRID_NUMS_ORDERNO,                   -- 弱覆盖区域的弱覆盖栅格数排名
POOR_GRID_AREA,                           -- 弱覆盖区域的弱栅格的面积
ALL_GRID_AREA,                            -- 弱覆盖区域的全部栅格的面积
CELL_ID,                                  -- 弱覆盖最近的小区ID
CELL_NAME,                                -- 弱覆盖最近的小区的名称
CELL_STATE,                               -- 弱覆盖最近的小区的状态
TOP5_SECTOR_SET,                          -- 距离最近的TOP5的小区集合
DX_RSRP_COUNT,                            -- 电信RSRP均值最大频点记录数
DX_RSRP_105_COUNT,                        -- 电信大于等于-105记录数
DX_RSRP_SUM,                              -- 电信RSRP均值最大频点的所有RSRP之和
YD_RSRP_COUNT,                            -- 移动RSRP均值最大频点的非空RSRP记录数
YD_RSRP_105_COUNT,                        -- 移动大于等于-105记录数
YD_RSRP_SUM,                              -- 移动RSRP均值最大频点RSRP之和
LT_RSRP_COUNT,                            -- 联通RSRP均值最大频点记录数
LT_RSRP_105_COUNT,                        -- 联通大于等于-105记录数
LT_RSRP_SUM,                              -- 联通RSRP均值最大频点RSRP之和
MONTH_RELATE,                             -- 关联月份
SCENE_TYPE,                               -- 场景类型
TOP5_ALARM_NUMS,                          -- 最近小区告警数
ROAD_ID,                                  -- 线路ID
ROAD_NAME,                                -- 线路名称
`DAY`,                                    -- day
GRID_TYPE,                                -- 栅格颗粒度类型
TYPE                                      -- 类型TYPE=1（高速）、2（高铁）、3（市政路）
FROM
frt_agps_poor_coverage_d
WHERE CITY='#{CITY}'
AND `DAY`=#{DAY}
AND TYPE=#{TYPE}
#{COUNTRY}
]]>
</sqlTemplate>


<sqlTemplate id="IntelligentRoadTestAnalysisV2_3_181_WUGAO_METRO_table" description="显示地铁对应数据表表格">
<![CDATA[
SELECT
CITY_ID,
FROM_STATION_ID,
TO_STATION_ID,
SECTION_ID,
LINE_ID,
TA_LEVEL,
GIS_LINE_GPS,
YD_RSRP_140_CNT,
YD_RSRP_115_CNT,
YD_RSRP_110_CNT,
YD_RSRP_105_CNT,
YD_RSRP_100_CNT,
YD_RSRP_95_CNT,
YD_RSRP_140_SUM,
YD_RSRP_115_SUM,
YD_RSRP_110_SUM,
YD_RSRP_105_SUM,
YD_RSRP_100_SUM,
YD_RSRP_95_SUM,
YD_RSRP_140_AVG,
YD_RSRP_115_AVG,
YD_RSRP_110_AVG,
YD_RSRP_105_AVG,
YD_RSRP_100_AVG,
YD_RSRP_95_AVG,
LT_RSRP_140_CNT,
LT_RSRP_115_CNT,
LT_RSRP_110_CNT,
LT_RSRP_105_CNT,
LT_RSRP_100_CNT,
LT_RSRP_95_CNT,
LT_RSRP_140_SUM,
LT_RSRP_115_SUM,
LT_RSRP_110_SUM,
LT_RSRP_105_SUM,
LT_RSRP_100_SUM,
LT_RSRP_95_SUM,
LT_RSRP_140_AVG,
LT_RSRP_115_AVG,
LT_RSRP_110_AVG,
LT_RSRP_105_AVG,
LT_RSRP_100_AVG,
LT_RSRP_95_AVG,
DX_RSRP_140_CNT,
DX_RSRP_115_CNT,
DX_RSRP_110_CNT,
DX_RSRP_105_CNT,
DX_RSRP_100_CNT,
DX_RSRP_95_CNT,
DX_RSRP_140_SUM,
DX_RSRP_115_SUM,
DX_RSRP_110_SUM,
DX_RSRP_105_SUM,
DX_RSRP_100_SUM,
DX_RSRP_95_SUM,
DX_RSRP_140_AVG,
DX_RSRP_115_AVG,
DX_RSRP_110_AVG,
DX_RSRP_105_AVG,
DX_RSRP_100_AVG,
DX_RSRP_95_AVG,
DX_TOP_SC_SECTOR,
DX_TOP_NC_SECTOR,
LINE_NAME,
FROM_STATION_NAME,
TO_STATION_NAME,
LONGITUDE_MID,
LATITUDE_MID,
RESERVE8,
RESERVE9,
RESERVE10,
`DAY`
FROM
frt_metro_line_rsrp_d
WHERE CITY_ID=#{CITYID}
AND `DAY`=#{DAY}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_3_181_WUGAO_METRO_tableExport" description="显示地铁对应数据表表格导出">
<![CDATA[
SELECT
CITY_ID,
FROM_STATION_ID,
TO_STATION_ID,
SECTION_ID,
LINE_ID,
TA_LEVEL,
YD_RSRP_140_CNT,
YD_RSRP_115_CNT,
YD_RSRP_110_CNT,
YD_RSRP_105_CNT,
YD_RSRP_100_CNT,
YD_RSRP_95_CNT,
YD_RSRP_140_SUM,
YD_RSRP_115_SUM,
YD_RSRP_110_SUM,
YD_RSRP_105_SUM,
YD_RSRP_100_SUM,
YD_RSRP_95_SUM,
YD_RSRP_140_AVG,
YD_RSRP_115_AVG,
YD_RSRP_110_AVG,
YD_RSRP_105_AVG,
YD_RSRP_100_AVG,
YD_RSRP_95_AVG,
LT_RSRP_140_CNT,
LT_RSRP_115_CNT,
LT_RSRP_110_CNT,
LT_RSRP_105_CNT,
LT_RSRP_100_CNT,
LT_RSRP_95_CNT,
LT_RSRP_140_SUM,
LT_RSRP_115_SUM,
LT_RSRP_110_SUM,
LT_RSRP_105_SUM,
LT_RSRP_100_SUM,
LT_RSRP_95_SUM,
LT_RSRP_140_AVG,
LT_RSRP_115_AVG,
LT_RSRP_110_AVG,
LT_RSRP_105_AVG,
LT_RSRP_100_AVG,
LT_RSRP_95_AVG,
DX_RSRP_140_CNT,
DX_RSRP_115_CNT,
DX_RSRP_110_CNT,
DX_RSRP_105_CNT,
DX_RSRP_100_CNT,
DX_RSRP_95_CNT,
DX_RSRP_140_SUM,
DX_RSRP_115_SUM,
DX_RSRP_110_SUM,
DX_RSRP_105_SUM,
DX_RSRP_100_SUM,
DX_RSRP_95_SUM,
DX_RSRP_140_AVG,
DX_RSRP_115_AVG,
DX_RSRP_110_AVG,
DX_RSRP_105_AVG,
DX_RSRP_100_AVG,
DX_RSRP_95_AVG,
DX_TOP_SC_SECTOR,
DX_TOP_NC_SECTOR,
LINE_NAME,
FROM_STATION_NAME,
TO_STATION_NAME,
RESERVE8,
RESERVE9,
RESERVE10,
`DAY`
FROM
frt_metro_line_rsrp_d
WHERE CITY_ID=#{CITYID}
AND `DAY`=#{DAY}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_3_177_WUGAO_Area_table" description="显示五高区域类对应数据表表格">
<![CDATA[
SELECT
ESBH_ID,
ESBH_NAME,
CITY,
CITY_ID,
COUNTRY,
COUNTRY_ID,
MKTCENTER,
MKTCENTER_ID,
LONGITUDE_MIN_BAIDU,
LATITUDE_MIN_BAIDU,
LONGITUDE_MID_BAIDU,
LATITUDE_MID_BAIDU,
LONGITUDE_MAX_BAIDU,
LATITUDE_MAX_BAIDU,
BELONG_AREA_ID,
SECTOR_SET,
GIS_DATA,
LTE_TO_3G_TOT,
LTE_TO_3G_ORDERNO,
FLOW_4G_TOT,
FLOW_4G_ORDERNO,
CE_GOOD_RATIO_AVG,
CE_GOOD_RATIO_ORDERNO,
USER_4G_AVG,
USER_4G_ORDERNO,
PC_ORDERNO_TOT,
ENODEBNAME,
ADDRESS,
ENODEB_ID,
POOR_GRID_NUMS,
ALARM_NUMS,
ALARM_CELLS,
NR_ALARM_CELLS,
ALL_GRID_NUMS,
POOR_GRID_NUMS_ORDERNO,
POOR_GRID_AREA,
ALL_GRID_AREA,
CELL_ID,
CELL_NAME,
CELL_STATE,
TOP5_SECTOR_SET,
DX_RSRP_COUNT,
DX_RSRP_105_COUNT,
DX_RSRP_SUM,
MONTH_RELATE,
POOR_COVERAGE_SET,
POOR_COVERAGE_COUNT,
`DAY`,
GRID_TYPE,
ESBH_TYPE
FROM
frt_esbh_info_d
WHERE CITY='#{CITY}'
AND `DAY`=#{DAY}
AND ESBH_TYPE=#{ESBHTYPE}
#{COUNTRY}
#{OTHERCONDITION}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_3_177_WUGAO_Area_tableExport" description="显示五高区域类对应数据表表格导出">
<![CDATA[
SELECT
ESBH_ID,
ESBH_NAME,
CITY,
CITY_ID,
COUNTRY,
COUNTRY_ID,
MKTCENTER,
MKTCENTER_ID,
BELONG_AREA_ID,
SECTOR_SET,
LTE_TO_3G_TOT,
LTE_TO_3G_ORDERNO,
FLOW_4G_TOT,
FLOW_4G_ORDERNO,
CE_GOOD_RATIO_AVG,
CE_GOOD_RATIO_ORDERNO,
USER_4G_AVG,
USER_4G_ORDERNO,
PC_ORDERNO_TOT,
ENODEBNAME,
ADDRESS,
ENODEB_ID,
POOR_GRID_NUMS,
ALARM_NUMS,
ALARM_CELLS,
NR_ALARM_CELLS,
ALL_GRID_NUMS,
POOR_GRID_NUMS_ORDERNO,
POOR_GRID_AREA,
ALL_GRID_AREA,
CELL_ID,
CELL_NAME,
CELL_STATE,
TOP5_SECTOR_SET,
DX_RSRP_COUNT,
DX_RSRP_105_COUNT,
DX_RSRP_SUM,
MONTH_RELATE,
POOR_COVERAGE_SET,
POOR_COVERAGE_COUNT,
`DAY`,
GRID_TYPE,
CASE WHEN ESBH_TYPE=1 THEN '高校'
WHEN ESBH_TYPE=2 THEN '高密度住宅区'
WHEN ESBH_TYPE=3 AND ZLQY_FLAG < 1 THEN '高流量商务区'
WHEN ESBH_TYPE=7 THEN '美景'
WHEN ESBH_TYPE=8 THEN '农贸市场'
WHEN ESBH_TYPE=9 THEN '美食'
WHEN ESBH_TYPE=10 THEN '场馆'
WHEN ESBH_TYPE=3 AND ZLQY_FLAG=1 THEN '战狼区域'
 END ESBH_TYPE
FROM
frt_esbh_info_d
WHERE CITY='#{CITY}'
AND `DAY`=#{DAY}
AND ESBH_TYPE=#{ESBHTYPE}
#{COUNTRY}
#{OTHERCONDITION}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV2_getMetroStationsDataById" description="根据id获取某个地铁站点的详细数据">
<![CDATA[
SELECT a.*,
b.BAIDU_LONGITUDE AS from_station_longitude,
b.BAIDU_LATITUDE AS from_station_latitude,
c.BAIDU_LONGITUDE AS to_station_longitude,
c.BAIDU_LATITUDE AS to_station_latitude
FROM (
select
CITY_ID,
CITY_NAME ,
LINE_ID, -- 线路ID
LINE_NAME, -- 线路名称
FROM_STATION_ID, -- 源地铁站ID
FROM_STATION_NAME, -- 源地铁站名称
TO_STATION_ID, -- 目的地铁站ID
TO_STATION_NAME, -- 目的地铁站名称
MR_FLAG, -- 方向标识
ALL_COV_SECTION, -- 覆盖段数
(ALL_COV_SECTION*78) as cover_length, -- 覆盖里程，单位：米
POOR_COV_SECTION, -- 弱覆盖段数
round(POOR_COV_SECTION/ALL_COV_SECTION*100,2) as poor_ratio, -- 弱覆盖占比
LINE_LENGTH, -- 总里程
POOR_COV_SECTION_OrderNo, -- 路弱覆盖段数排名
SECTOR_SET, -- 主服务小区集合
LTE_TO_3G_TOT, -- 4G切3G总次数
Lte_To_3g_OrderNo, -- 4G切3G总次数在本地网内排名
Flow_4G_TOT, -- 4G总流量
Flow_4G_OrderNo, -- 本地网内4G流量排名
CE_GOOD_RATIO_AVG, -- 感知优良率按天平均值
Ce_GOOD_RATIO_OrderNo, -- 本地网内感知优良率排名
User_4G_AVG, -- 4G用户数按天平均值
User_4G_OrderNo, -- 本地网内4G用户数排名
PC_OrderNo_TOT, -- 最终排名累计值
ALARM_NUMS, -- 曾发生退服告警总次数
ALARM_CELLS, -- 曾发生退服告警小区数
NR_ALARM_CELLS, -- 未恢复退服告警小区数
NC_SECTOR_SET, -- 距离最近的TOP5的小区集合
NC_ALARM_NUMS, -- 最近小区告警数
Do_Type, -- 路段处理措施
eNodeB_ID, -- 基站ID
eNodeB_Name, -- 最近基站名称
CELL_ID, -- 最近的小区ID
CELL_NAME, -- 最近的小区的名称
CELL_ADDRESS, -- 最近基站地址
CELL_STATE, -- 最近的小区的状态
DX_RSRP_140_Cnt, -- 电信RSRP[-140，0)记录数
DX_RSRP_115_Cnt, -- 电信RSRP[-115，0)记录数
DX_RSRP_110_Cnt, -- 电信RSRP[-110，0)记录数
DX_RSRP_105_Cnt, -- 电信RSRP[-105，0)记录数
DX_RSRP_100_Cnt, -- 电信RSRP[-100，0)记录数
DX_RSRP_95_Cnt, -- 电信RSRP[-95，0)记录数
DX_RSRP_140_Sum, -- 电信RSRP[-140，0)之和
round(DX_RSRP_140_Sum/ DX_RSRP_140_Cnt,2) as rsrp_avg_sect, -- RSRP均值
round((DX_RSRP_105_Cnt/ DX_RSRP_140_Cnt)*100,2) as cover_rate_sect, -- 覆盖率
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
LONGITUDE_MIN,
LATITUDE_MIN,
LONGITUDE_MID,
LATITUDE_MID,
LONGITUDE_MAX,
LATITUDE_MAX,
LINE_GIS_DATA
from FRT_METRO_INTER_COV_D
where day = #{DAY}
and FROM_STATION_ID = #{FROM_ID} AND  TO_STATION_ID = #{TO_ID}
and MR_FLAG=#{MR_FLAG}
) a LEFT JOIN dim_metro_station b
ON a.FROM_STATION_ID = b.STATION_ID
left join dim_metro_station c on a.TO_STATION_ID=c.STATION_ID
]]>
</sqlTemplate>

<sqlTemplate id="VisitManagement_01_querybymonth" description="按照月份查询系统的访问情况。">
<![CDATA[
select #{GROUPBYFIELD}
  ,sum(open_count) as open_count
  ,sum(search_count) as search_count
  ,sum(download_count) as download_count
  ,count(distinct user_name) as user_count
from
(select * from t_login_user_oper_info_M
where month=#{MONTH}
#{USERCOND}
) a

left join (
  select * from (
    select permission_id,code,name as app_name,CREATE_TIME,@j:=@j+1 as j
      ,@k:=(case when @pre_code like func.code then @k+1 else 1 end) as rank
      ,@pre_code:=func.code as pre_code
      ,@pre_code
    from
    (select permission_id,code,name,CREATE_TIME from dm_permission_func order by code asc, CREATE_TIME desc) func,
    (select @j:=0,@k:=0,@pre_code:='a') tmp
    ORDER BY code asc, CREATE_TIME desc
  ) ranked
  where rank=1
) recent
on a.app_id=recent.code

left join (
  select * from t_organization_branch_info
) c
on a.class=c.class and a.company=c.company and a.country=c.country and a.mktcenter=c.mktcenter
where branch is not NULL and app_name is not NULL
#{BRANCHCOND}
group by #{GROUPBYFIELD}
order by open_count desc
]]>
</sqlTemplate>

<sqlTemplate id="MKTCenterGridAna_01_mktcenter" description="营服评分, 置1为优于其他运营商，置0为劣于其他运营商" db="mysql">
<![CDATA[
select CITY
,COUNTRY
,COUNTRY_ID
,MKTCENTER
,IFNULL(floor(DX_RSRP_115_0*100/DX_MR_COUNT),0) as dx_score
,case when IFNULL(floor(DX_RSRP_115_0*100/DX_MR_COUNT),0)>IFNULL(floor(YD_RSRP_115_0*100/YD_MR_COUNT),0) then "优于移动" when IFNULL(floor(DX_RSRP_115_0*100/DX_MR_COUNT),0)=IFNULL(floor(YD_RSRP_115_0*100/YD_MR_COUNT),0) then "与移动持平" else "劣于移动" end as yd_score
,case when IFNULL(floor(DX_RSRP_115_0*100/DX_MR_COUNT),0)>IFNULL(floor(LT_RSRP_115_0*100/LT_MR_COUNT),0) then "优于联通" when IFNULL(floor(DX_RSRP_115_0*100/DX_MR_COUNT),0)>IFNULL(floor(LT_RSRP_115_0*100/LT_MR_COUNT),0) then "与联通持平" else "劣于联通" end as lt_score
,floor(DX_MR_COUNT/3500) as user_cnt
from FRT_MRO_RSRP_MKTCENTER_W
where day=#{DAY}
and CITY#{CITY}
and COUNTRY!=""
and MKTCENTER!=""
having yd_score#{YD_CMP} and lt_score#{LT_CMP}
order by CITY
#{LIMIT}
]]>
</sqlTemplate>

<sqlTemplate id="MKTCenterGridAna_02_grid" description="网格评分, 置1为优于其他运营商，置0为劣于其他运营商" db="mysql">
<![CDATA[
select CITY
,COUNTRY
,COUNTRY_ID
,MKTCENTER
,GRID_NAME
,GRID
,GRID_TYPE
,IFNULL(floor((DX_RSRP_105_0+DX_RSRP_110_105+DX_RSRP_115_110)*100/DX_MR_COUNT), 0) as dx_score
,case when IFNULL(floor((DX_RSRP_105_0+DX_RSRP_110_105+DX_RSRP_115_110)*100/DX_MR_COUNT), 0)>IFNULL(floor(YD_RSRP_115_0*100/YD_MR_COUNT), 0) then "优于移动" when IFNULL(floor((DX_RSRP_105_0+DX_RSRP_110_105+DX_RSRP_115_110)*100/DX_MR_COUNT), 0)=IFNULL(floor(YD_RSRP_115_0*100/YD_MR_COUNT), 0) then "与移动持平" else "劣于移动" end as yd_score
,case when IFNULL(floor((DX_RSRP_105_0+DX_RSRP_110_105+DX_RSRP_115_110)*100/DX_MR_COUNT), 0)>IFNULL(floor(LT_RSRP_115_0*100/LT_MR_COUNT), 0) then "优于联通" when IFNULL(floor((DX_RSRP_105_0+DX_RSRP_110_105+DX_RSRP_115_110)*100/DX_MR_COUNT), 0)=IFNULL(floor(LT_RSRP_115_0*100/LT_MR_COUNT), 0) then "与联通持平" else "劣于联通" end as lt_score
,floor(DX_MR_COUNT/3500) as user_cnt
,CENTRE_LONGITUDE
,CENTRE_LATITUDE
from FRT_MRO_RSRP_SUBS_GRID_W
where day=#{DAY}
and CITY#{CITY}
and COUNTRY!=""
and MKTCENTER!=""
and GRID!=""
having yd_score#{YD_CMP} and lt_score#{LT_CMP}
order by CITY
#{LIMIT}
]]>
</sqlTemplate>

<sqlTemplate id="MKTCenterGridAna_03_gridcoverlist" description="网格覆盖清单" db="mysql">
<![CDATA[
select CITY
,COUNTRY
,COUNTRY_ID
,MKTCENTER
,GRID_NAME
,GRID
,GRID_TYPE
,DX_MR_COUNT
,DX_RSRP_105_0
,DX_RSRP_110_105
,DX_RSRP_115_110
,DX_RSRP_140_115
,IFNULL(round((DX_RSRP_105_0+DX_RSRP_110_105)*100/DX_MR_COUNT, 2), 0) as more_110_rate
,IFNULL(round((DX_RSRP_105_0+DX_RSRP_110_105+DX_RSRP_115_110)*100/DX_MR_COUNT, 2), 0) as more_115_rate
,floor(DX_MR_COUNT/3500) as user_cnt
,IFNULL(round(DX_AGPS_105_0*100/DX_AGPS_COUNT, 2), 0) as dx_agps_rate
,IFNULL(round(YD_AGPS_105_0*100/YD_AGPS_COUNT, 2), 0) as yd_agps_rate
,IFNULL(round(LT_AGPS_105_0*100/LT_AGPS_COUNT, 2), 0) as lt_agps_rate
,CENTRE_LONGITUDE
,CENTRE_LATITUDE
from FRT_MRO_RSRP_SUBS_GRID_W
where day=#{DAY}
and CITY#{CITY}
and COUNTRY!=""
and MKTCENTER!=""
and GRID!=""
order by CITY
#{LIMIT}
]]>
</sqlTemplate>

<sqlTemplate id="AuditList_01_getDate" description="获取审核清单数据的最小时间" db="mysql">
<![CDATA[
select 
min(apply_time) day
from DM_AUDIT_LIST 
]]>
</sqlTemplate>
<sqlTemplate id="AuditList_02_getAuditList" description="根据条件获取审核清单数据" db="mysql">
<![CDATA[
select 
*
from #{TABLENAME}  where
DATE_FORMAT(apply_time,'%Y%m%d') BETWEEN #{DAYSTAR} and #{DAYEND}
#{CITY}
#{AUDIT_STAT}
#{applicant_id}
 ORDER BY apply_time desc
]]>
</sqlTemplate>
<sqlTemplate id="AuditList_03_getCity" description="根据条件获取审核清单数据" db="mysql">
<![CDATA[
select * from t_permission_div_department
]]>
</sqlTemplate>
<sqlTemplate id="AuditList_04_getUserCity" description="根据用户名查询分权分域" db="mysql">
<![CDATA[
SELECT
  USER_ID,name,FLAG,node_id,city,node_name,level,parent_id
 from 
dm_user a LEFT JOIN t_permission_div_department b 
on(a.PERMISSION_GROUP_ID=b.node_id) where a.name='#{name}'
]]>
</sqlTemplate>
<sqlTemplate id="AuditList_05_auditCount" description="全省用户获取审核单待审核数" db="mysql">
<![CDATA[
select 
 count(*) count
from DM_AUDIT_LIST  where 
AUDIT_STAT ='待审核'
AND ((OBJECT_TYPE in ('高校','场馆','高密度住宅区','美食','美景','高流量商务区','战狼区域','农贸市场','中小学','城中村','自然村','工厂')) OR(OBJECT_TYPE in ('点图层','多边形图层','dt图层') AND city = '#{CITY}') OR (OBJECT_TYPE = '关注区域' AND city = '#{CITY}') )
#{USER}
]]>
</sqlTemplate>
<sqlTemplate id="AuditList_06_auditCount" description="地市用户获取审核单待审核数" db="mysql">
<![CDATA[
select 
 count(*) count
from DM_AUDIT_LIST  where 
AUDIT_STAT ='待审核'
AND ((OBJECT_TYPE in ('点图层','多边形图层','dt图层') AND city = '#{CITY}') OR (OBJECT_TYPE = '关注区域' AND city = '#{CITY}') )
#{USER}
]]>
</sqlTemplate>

<sqlTemplate id="AuditList_08_getSenseMaxDay" description="获取场景表的最大日期" db="mysql">
<![CDATA[
select
max(day) maxday
from FRT_ESBH_INFO_D
]]>
</sqlTemplate>

<sqlTemplate id="ShareObject_getAuditByObject" description="根据用户名查询分权分域" db="mysql">
<![CDATA[
SELECT * from
dm_audit_list where object_type = '#{OBJECT_TYPE}' and object_id = #{OBJECT_ID} order by apply_time desc  limit 1
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTest_SystemLayerEdit_loadLastVersion" description="读取最新版本信息" db="mysql">
<![CDATA[
SELECT a.*,u.REAL_NAME FROM (SELECT
date_format(edit_time, '%Y-%m-%d %H:%i:%S') edit_time,
editor_id
FROM
	dm_scene_area_gis
WHERE
	obj_id = #{OBJ_ID}
AND obj_type = '#{OBJ_TYPE}') a LEFT JOIN dm_user u
ON a.editor_id = u.NAME
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTest_SystemLayerEdit_loadHisVersion" description="读取历史版本信息" db="mysql">
<![CDATA[
SELECT
	date_format(version_time, '%Y-%m-%d %T') version_time,
gis_data_baidu
FROM dm_scene_area_gis_his
WHERE obj_id = #{OBJ_ID}
AND obj_type = '#{OBJ_TYPE}'
-- GROUP BY version_time,gis_data_baidu
order by version_time
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTest_SystemLayerEdit_loadLastVersionGisData" description="读取最新版本轮廓" db="mysql">
<![CDATA[
SELECT
gis_data_baidu as gis_data
FROM
	dm_scene_area_gis
WHERE
	obj_id = #{OBJ_ID}
AND obj_type = '#{OBJ_TYPE}'
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTest_SystemLayerEdit_loadSaveGisData" description="根据用户、对象id、对象类型查询是否有编辑状态的轮廓" db="mysql">
<![CDATA[
SELECT
	obj_id,
obj_name,
obj_type,
gis_data_baidu,
longitude_max_baidu,
latitude_max_baidu,
longitude_mid_baidu,
latitude_mid_baidu,
longitude_min_baidu,
latitude_min_baidu,
audit_status
FROM
	dm_scene_area_gis_act
WHERE
	obj_id = #{OBJ_ID}
AND obj_type = '#{OBJ_TYPE}'
AND editor_id = '#{NAME}'
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV3_SystemLayerEdit_getNewData" description="根据对象id、对象类型查询新增的数据" db="mysql">
<![CDATA[
SELECT obj_id,
obj_name,
obj_type,
city,
city_id,
country,
country_id,
mktcenter,
mktcenter_id,
gis_data_baidu,
longitude_mid_baidu,
latitude_mid_baidu FROM  dm_scene_area_gis_che
WHERE obj_id = #{OBJCT_ID}
AND obj_type = '#{OBJECT_TYPE}'
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV2_getAllConcernAreaByNormalUser" description="非系统管理员查询关注区域列表,也可用于模糊查询">
<![CDATA[
select
DISTINCT
id,
area_name,
AREA_TYPE,
creator,
create_time,
CITY,
city_id,
country,
country_id,
mktcenter,
mktcenter_id,
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
handle_description,
round(rsrp,2) rsrp,
round(cover*100,2) cover,
recent_base_statn_id,
recent_cell_id,
recent_cell_name,
gis_data_baidu,
max_longitude_baidu,
max_latitude_baidu,
min_longitude_baidu,
min_latitude_baidu,
handle_time,
RSRP,
COVER,
RECENT_BASE_STATN_ID,
RECENT_CELL_ID,
RECENT_CELL_NAME,
SECTOR_SET,
LTE_TO_3G_TOT,
FLOW_4G_TOT,
CE_GOOD_RATIO_AVG,
USER_4G_AVG,
RSRP_SUM,
RSRP_COUNT,
RSRP_COUNT_105,
GRID_COUNT,
ORDERNO_TOT,
NE_SECTOR_SET,
share_scope ,
share_status ,
audit_option ,
round((POOR_GRID_COUNT/GRID_COUNT)*100 , 2) as poor_grid_radio
from (
select * from dm_user_concern_area where creator = '#{USERNAME}'
#{CITY}
#{COUNTRY}
#{MKTCENTER}
UNION ALL
select * from dm_user_concern_area
where
	share_scope is not null
and
	share_scope <>  ''
and share_status in( '已共享' , '取消共享审核中' )
and
	(locate(CONCAT('_',CONCAT('#{NODE_ID}','_')) ,CONCAT('_',CONCAT(share_scope , '_'))) > 0 OR #{NODE_ID} = 1 )
	) as a
	#{CONDITION}
	#{LIMIT}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV2_getAllConcernAreaByNormalUser_layer" description="非系统管理员查询关注区域地图图层数据">
<![CDATA[
select
DISTINCT
id,
area_name,
gis_data_baidu
from (
select * from dm_user_concern_area where creator = '#{USERNAME}'
#{CITY}
#{COUNTRY}
#{DISTRINCT}
UNION ALL
select * from dm_user_concern_area
where
	share_scope is not null
and
	share_scope <>  ''
and share_status in( '已共享' , '取消共享审核中' )
and
	(locate(CONCAT('_',CONCAT('#{NODE_ID}','_')) ,CONCAT('_',CONCAT(share_scope , '_'))) > 0 OR #{NODE_ID} = 1 )
	) as a
	#{CONDITION}
	#{LIMIT}
]]>
</sqlTemplate>
<sqlTemplate id="AuditList_05_getTable" description="根据tableName获取表格数据" db="mysql">
<![CDATA[
SELECT * from 
#{tableName} 
#{where}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV3_getDtData" description="根据id获取DT，数据 用于审核页点击id跳转到测评页打开自定义图层" db="mysql">
<![CDATA[
SELECT
	id,
	dt_name,
	date_format(dt_time, '%Y-%m-%d') dt_time,
	date_format(create_time, '%Y-%m-%d') create_time,
	creator,
	city,
	share_status,
	audit_option,
	share_scope,
	'0' as color,
	'0' AS custom_area_style,
	'1' AS TYPE,
	'描点' AS circle,
	'栅格' AS grid,
	'下载' AS fileupload,
CASE WHEN creator ='#{USERNAME}'
THEN  1
else  0 END isCanDelete,
center_longitude_baidu,
center_latgitude_baidu
FROM
	user_dt_list
WHERE id=#{ID}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV3_getCustomData" description="根据id获取点或多边形数据，数据 用于审核页点击id跳转到测评页打开自定义图层" db="mysql">
<![CDATA[
SELECT
		id,
	custom_name AS dt_name,
	DATE_FORMAT(file_time, '%Y-%m-%d') dt_time,
	DATE_FORMAT(file_import_time, '%Y-%m-%d') create_time,
	creator,
	city,
	share_status,
	audit_option,
	share_scope,
	color,
	custom_area_style,
	'2' AS TYPE,
	'描点' AS circle,
	'栅格' AS grid,
	'下载' AS fileupload,
CASE WHEN creator ='#{USERNAME}'
THEN  1
ELSE  0 END isCanDelete,
0 AS center_longitude_baidu,
0 AS center_latgitude_baidu
FROM
	dm_custom_area_list
WHERE 
 id=#{ID}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV3_getCustomDetailData" description="查询	dm_custom_area_detail" db="mysql">
<![CDATA[
SELECT * from dm_custom_area_detail where custom_area_id=#{custom_area_id}
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp6.0_04_cellbar" description="宏观三网V2版本取TOP3柱图数据" DB="mysql">
<![CDATA[
select CITY,OBJECT_NAME,OBJECT_ID,LONGITUDE_MIN,
LATITUDE_MIN,
LONGITUDE_MID,
LATITUDE_MID,
LONGITUDE_MAX,
LATITUDE_MAX,
round(DX_AREA_RSRP_COV*100,2) as DX_COV,
round((DX_AREA_RSRP_COV-YD_AREA_RSRP_COV)*100,2) as DX_YD_COV,
round((DX_AREA_RSRP_COV-LT_AREA_RSRP_COV)*100,2) as DX_LT_COV,
IS_SORTABLE
from FRT_MRO_AREA_RSRP_M
where month = #{MONTH}
#{AREACOND}
and OBJECT_TYPE=#{OBJECTTYPE}
order by IS_SORTABLE desc,DX_AREA_RSRP_COV #{ASCDESC}
limit 3

]]>
</sqlTemplate>

<sqlTemplate id="OpersComp6.0_04_03_cellbar" description="取小区柱图数据" DB="postgrepSQL">
<![CDATA[
select OBJECT_NAME,OBJECT_ID, city , RSRP_105_DISTANCE as RFG,
round(CAST(DX_AREA_RSRP_COV*100 as NUMERIC),2) as DX_COV,
round(CAST((DX_AREA_RSRP_COV-YD_AREA_RSRP_COV)*100 as NUMERIC),2) as DX_YD_COV,
round(CAST((DX_AREA_RSRP_COV-LT_AREA_RSRP_COV)*100 as NUMERIC),2) as DX_LT_COV,
cast(gis_line_gps as box2d) as box2d
from FRT_MRO_AREA_RSRP_M
where month=#{MONTH}
#{AREACOND}
and OBJECT_TYPE=#{OBJECTTYPE}
order by DX_AREA_RSRP_COV #{ASCDESC}
limit 3

]]>
</sqlTemplate>


<sqlTemplate id="OpersComp6.0_04_02_cellbar" description="取地铁的top20站点数据" DB="mysql">
<![CDATA[
select a.*,b.BAIDU_LONGITUDE,b.BAIDU_LATITUDE,b.GEOG from (select OBJECT_ID,OBJECT_NAME,STATION_ID,STATION_NAME, city,
round(DX_AREA_RSRP_COV*100,2) as DX_COV,
round((DX_AREA_RSRP_COV-YD_AREA_RSRP_COV)*100,2) as DX_YD_COV,
round((DX_AREA_RSRP_COV-LT_AREA_RSRP_COV)*100,2) as DX_LT_COV
from frt_agps_metro_rsrp_m
where month = #{MONTH}
#{AREACOND}
and OBJECT_TYPE=#{OBJECTTYPE}
order by DX_AREA_RSRP_COV #{ASCDESC}
limit 3) a
JOIN
(
select STATION_ID,BAIDU_LONGITUDE,BAIDU_LATITUDE,GEOG from dim_metro_station where  1=1  #{CITYNAME}
) b
on a.STATION_ID=B.STATION_ID
ORDER BY a.DX_COV #{ASCDESC}
]]>
</sqlTemplate>


<sqlTemplate id="OpersComp6.0_getSenseTotalDistance" description="取场景的弱覆盖面积的历史趋势图数据" DB="mysql">
<![CDATA[
select
month,
sum(RSRP_105_DISTANCE) as totalDistance
from FRT_MRO_AREA_RSRP_M
where month between  (SELECT CAST(DATE_FORMAT(date_add(#{MONTH}01, interval -11 month),'%Y%m') as signed)) and #{MONTH}
#{AREACOND}
and OBJECT_TYPE=#{OBJECTTYPE}
and object_name!=''
GROUP BY month
ORDER BY month ASC
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp6.0_getRoadTotalDistance" description="取道路的弱覆盖面积的历史趋势图数据" DB="postSQL">
<![CDATA[
select
month,
sum(RSRP_105_DISTANCE) as totalDistance
from FRT_MRO_AREA_RSRP_M
where month between  cast((select to_char(date '#{MONTH}01' - interval '11 month', 'YYYYMM')) as NUMERIC) and #{MONTH}
	#{AREACOND}
	and OBJECT_TYPE=#{OBJECTTYPE}
GROUP BY month
ORDER BY month ASC
]]>
</sqlTemplate>

<sqlTemplate id="OpersComp6.0_getMaxMonth" description="获取场景数据表中最大的月份" DB="mysql/postsql">
<![CDATA[
select
max(month) as month
from FRT_MRO_AREA_RSRP_M
]]>
</sqlTemplate>

<sqlTemplate id="netElement_echartsData_FRT_ZERO_TRAFFIC_SETS_D" description="取最新day分区至前7天，7个分区的数据中，查询每一天的小区(cell_id)数量、基站(enodeb_id)数量" DB="mysql_3.199">
<![CDATA[
SELECT
	COUNT(*) count,`DAY`
FROM
	FRT_ZERO_TRAFFIC_SETS_D
where 1=1
#{DAY}
AND NETTYPE='#{NETTYPE}'
AND ZERO_TYPE=#{ZEROTYPE}
#{CITY}
GROUP BY DAY
]]>
</sqlTemplate>
<sqlTemplate id="netElement_4G0celltableData_in30day_FRT_ZERO_TRAFFIC_SETS_D" description="4g零流量小区表格" DB="mysql_3.199">
<![CDATA[
SELECT
	ENODEB_ID,CELL_ID,CITY,ZERO_DAY_SETS,day
FROM
	FRT_ZERO_TRAFFIC_SETS_D
WHERE 1=1
#{DAY}
AND NETTYPE='#{NETTYPE}'
AND ZERO_TYPE=#{ZEROTYPE}
#{ORTHER}
#{CITY}
]]>
</sqlTemplate>
<sqlTemplate id="netElement_2G0calltableData_in30day_FRT_ZERO_TRAFFIC_SETS_D" description="2g零话务小区表格" DB="mysql_3.199">
<![CDATA[
SELECT
ENODEB_ID,CELL_ID,CITY,BSC_ID,ZERO_DAY_SETS,day
FROM
FRT_ZERO_TRAFFIC_SETS_D
WHERE 1=1
#{DAY}
AND NETTYPE='#{NETTYPE}'
AND ZERO_TYPE=#{ZEROTYPE}
#{ORTHER}
#{CITY}
]]>
</sqlTemplate>
<sqlTemplate id="netElement_4G0StatetableData_in30day_FRT_ZERO_TRAFFIC_SETS_D" description="4g零流量基站表格" DB="mysql_3.199">
<![CDATA[
SELECT
ENODEB_ID,CITY,ZERO_DAY_SETS,day
FROM
FRT_ZERO_TRAFFIC_SETS_D
WHERE 1=1
#{DAY}
AND NETTYPE='#{NETTYPE}'
AND ZERO_TYPE=#{ZEROTYPE}
#{ORTHER}
#{CITY}
]]>
</sqlTemplate>
<sqlTemplate id="netElement_2G0CallStatetableData_in30day_FRT_ZERO_TRAFFIC_SETS_D" description="2g零话务基站表格" DB="mysql_3.199">
<![CDATA[
SELECT
ENODEB_ID,CITY,BSC_ID,ZERO_DAY_SETS
FROM
FRT_ZERO_TRAFFIC_SETS_D
WHERE 1=1
#{DAY}
AND NETTYPE='#{NETTYPE}'
AND ZERO_TYPE=#{ZEROTYPE}
#{ORTHER}
#{CITY}
]]>
</sqlTemplate>
<sqlTemplate id="netElement_getMaxDay" description="获取最大时间和最大时间前7天" DB="mysql_3.199">
<![CDATA[
SELECT
	(
		SELECT
			SUBSTRING(
				DATE_ADD(
					FROM_UNIXTIME(UNIX_TIMESTAMP(MAX(`DAY`))),
					INTERVAL - 6 DAY
				),
				1,
				10
			) DAY
		FROM
			FRT_ZERO_TRAFFIC_SETS_D
	) st,
	(
		SELECT
			SUBSTRING(
				DATE_ADD(
					FROM_UNIXTIME(UNIX_TIMESTAMP(MAX(`DAY`))),
					INTERVAL - 0 DAY
				),
				1,
				10
			) DAY
		FROM
			FRT_ZERO_TRAFFIC_SETS_D
	) ed
]]>
</sqlTemplate>

<sqlTemplate id="AppTest_getMaxDay" description="取最大天">
<![CDATA[
select MAX(DAY) FROM FRT_APP_RATIO_SCENE_D
]]>
</sqlTemplate>

<sqlTemplate id="APPTest_01_getTotalData" description="查询地图的汇总数据">
<![CDATA[
SELECT
	City, -- 地市
	city_id, -- 地市ID
	RSRP_SINR_Cnt, -- 覆盖率的分子
	RSRP_140_Cnt, -- 覆盖率的分母
	Scene_Tot, -- 总场景数
	Object_Name_Cnt, -- 有测试场景数
	round(APP_Ratio * 100 , 2) as APP_Ratio, -- APP覆盖率
	round(Scene_Ratio * 100 , 2) as Scene_Ratio-- 规划进度的值
FROM
	FRT_APP_RATIO_SCENE_D

WHERE
	day = #{DAY}
#{OBJECTTYPE}
]]>
</sqlTemplate>

<sqlTemplate id="APPTest_02_getProvinceTotalData" description="查询所有场景的APP覆盖率和测试进度的数据">
<![CDATA[
select
	sum(RSRP_140_Cnt) as rsrp140_sum, -- 覆盖率的分母
	round((sum(RSRP_SINR_Cnt)/sum(RSRP_140_Cnt))* 100 , 2) as app_ratio_avg, -- APP覆盖率
	round(sum(OBJECT_NAME_CNT)/sum(SCENE_TOT)* 100 , 2) as scene_ratio_avg -- 规划进度的值
from FRT_APP_RATIO_SCENE_D
where day = #{DAY}
#{OBJECTTYPE}
]]>
</sqlTemplate>

<sqlTemplate id="APPTest_03_getDataTrendData" description="查询趋势图数据">
<![CDATA[
select
	day ,
	City, -- 地市
	city_id, -- 地市ID
	RSRP_SINR_Cnt, -- 覆盖率的分子
	RSRP_140_Cnt, -- 覆盖率的分母
	round(APP_Ratio * 100 , 2) as APP_Ratio, -- APP覆盖率
	round(Scene_Ratio * 100 , 2) as Scene_Ratio -- 规划进度的值
from FRT_APP_RATIO_SCENE_D
WHERE day
BETWEEN
#{STARTDAY}
AND
#{ENDDAY}
AND
city = '#{CITY}'
#{OBJECTTYPE}
order by day asc
]]>
</sqlTemplate>

<sqlTemplate id="APPTest_04_getDataTrendDataForAllCity" description="查询全省趋势图数据">
<![CDATA[
select
	day ,
 	"全省" as city ,
	sum(RSRP_SINR_Cnt) as RSRP_SINR_Cnt , -- 覆盖率的分子
	sum(RSRP_140_Cnt) as RSRP_140_Cnt, -- 覆盖率的分母
	round((sum(RSRP_SINR_Cnt)/sum(RSRP_140_Cnt)) * 100 , 2) as APP_Ratio, -- APP覆盖率
	round(sum(OBJECT_NAME_CNT)/sum(SCENE_TOT) * 100 , 2) as Scene_Ratio -- 规划进度的值
from FRT_APP_RATIO_SCENE_D
WHERE day
BETWEEN
#{STARTDAY}
AND
#{ENDDAY}
#{OBJECTTYPE}
GROUP BY day
order by day asc
]]>
</sqlTemplate>

	<sqlTemplate id="StatisticsDL_MRSatSenceTab_20181127" description="高校、高密度住宅区、高流量商务区、美景、农贸市场、美食、场馆、战狼MR统计表格;">
		<![CDATA[
			select a.CITY
			,a.COUNTRY
			,a.MKTCENTER
			,a.`Object_ID`
			,a.`Object_Name`

			,BEST_RSRP_140_Cnt
			,round(BEST_RSRP_140_Sum/BEST_RSRP_140_Cnt, 2) as BEST_RSRP_140_Avg
			,BEST_RSRP_95_Cnt
			,CONCAT(round(BEST_RSRP_95_Cnt*100/BEST_RSRP_140_Cnt, 2),'%') as BEST_RSRP_95_rate
			,BEST_RSRP_100_Cnt
			,CONCAT(round(BEST_RSRP_100_Cnt*100/BEST_RSRP_140_Cnt, 2),'%') as BEST_RSRP_100_rate
			,BEST_RSRP_105_Cnt
			,CONCAT(round(BEST_RSRP_105_Cnt*100/BEST_RSRP_140_Cnt, 2),'%') as BEST_RSRP_105_rate
			,BEST_RSRP_110_Cnt
			,CONCAT(round(BEST_RSRP_110_Cnt*100/BEST_RSRP_140_Cnt, 2),'%') as BEST_RSRP_110_rate
			,BEST_RSRP_115_Cnt
			,CONCAT(round(BEST_RSRP_115_Cnt*100/BEST_RSRP_140_Cnt, 2),'%') as BEST_RSRP_115_rate
			,BEST_RSRP_140_GRID_Cnt-BEST_RSRP_105_GRID_Cnt
			,BEST_RSRP_140_GRID_Cnt
			,CONCAT(round((BEST_RSRP_140_GRID_Cnt-BEST_RSRP_105_GRID_Cnt)*100/BEST_RSRP_140_GRID_Cnt, 2),'%') as BEST_RSRP_GRID_Avg

			,SC_RSRP_140_Cnt
			,round(SC_RSRP_140_Sum/SC_RSRP_140_Cnt, 2) as SC_RSRP_140_Avg
			,SC_RSRP_95_Cnt
			,CONCAT(round(SC_RSRP_95_Cnt*100/SC_RSRP_140_Cnt, 2),'%') as SC_RSRP_95_rate
			,SC_RSRP_100_Cnt
			,CONCAT(round(SC_RSRP_100_Cnt*100/SC_RSRP_140_Cnt, 2),'%') as SC_RSRP_100_rate
			,SC_RSRP_105_Cnt
			,CONCAT(round(SC_RSRP_105_Cnt*100/SC_RSRP_140_Cnt, 2),'%') as SC_RSRP_105_rate
			,SC_RSRP_110_Cnt
			,CONCAT(round(SC_RSRP_110_Cnt*100/SC_RSRP_140_Cnt, 2),'%') as SC_RSRP_110_rate
			,SC_RSRP_115_Cnt
			,CONCAT(round(SC_RSRP_115_Cnt*100/SC_RSRP_140_Cnt, 2),'%') as SC_RSRP_115_rate
			,SC_RSRP_140_GRID_Cnt-SC_RSRP_105_GRID_Cnt
			,SC_RSRP_140_GRID_Cnt
			,round((SC_RSRP_140_GRID_Cnt-SC_RSRP_105_GRID_Cnt)*100/SC_RSRP_140_GRID_Cnt, 2) as SC_RSRP_GRID_Avg

			,F800M_RSRP_140_Cnt
			,round(F800M_RSRP_140_Sum/F800M_RSRP_140_Cnt, 2) as F800M_RSRP_140_Avg
			,F800M_RSRP_95_Cnt
			,CONCAT(round(F800M_RSRP_95_Cnt*100/F800M_RSRP_140_Cnt, 2),'%') as F800M_RSRP_95_rate
			,F800M_RSRP_100_Cnt
			,CONCAT(round(F800M_RSRP_100_Cnt*100/F800M_RSRP_140_Cnt, 2),'%') as F800M_RSRP_100_rate
			,F800M_RSRP_105_Cnt
			,CONCAT(round(F800M_RSRP_105_Cnt*100/F800M_RSRP_140_Cnt, 2),'%') as F800M_RSRP_105_rate
			,F800M_RSRP_110_Cnt
			,CONCAT(round(F800M_RSRP_110_Cnt*100/F800M_RSRP_140_Cnt, 2),'%') as F800M_RSRP_110_rate
			,F800M_RSRP_115_Cnt
			,CONCAT(round(F800M_RSRP_115_Cnt*100/F800M_RSRP_140_Cnt, 2),'%') as F800M_RSRP_115_rate
			,F800M_RSRP_140_GRID_Cnt-F800M_RSRP_105_GRID_Cnt
			,F800M_RSRP_140_GRID_Cnt
			,round((F800M_RSRP_140_GRID_Cnt-F800M_RSRP_105_GRID_Cnt)*100/F800M_RSRP_140_GRID_Cnt, 2) as F800M_RSRP_GRID_Avg

			,F18G_RSRP_140_Cnt
			,round(F18G_RSRP_140_Sum/F18G_RSRP_140_Cnt, 2) as F18G_RSRP_140_Avg
			,F18G_RSRP_95_Cnt
			,CONCAT(round(F18G_RSRP_95_Cnt*100/F18G_RSRP_140_Cnt, 2),'%') as F18G_RSRP_95_rate
			,F18G_RSRP_100_Cnt
			,CONCAT(round(F18G_RSRP_100_Cnt*100/F18G_RSRP_140_Cnt, 2),'%') as F18G_RSRP_100_rate
			,F18G_RSRP_105_Cnt
			,CONCAT(round(F18G_RSRP_105_Cnt*100/F18G_RSRP_140_Cnt, 2),'%') as F18G_RSRP_105_rate
			,F18G_RSRP_110_Cnt
			,CONCAT(round(F18G_RSRP_110_Cnt*100/F18G_RSRP_140_Cnt, 2),'%') as F18G_RSRP_110_rate
			,F18G_RSRP_115_Cnt
			,CONCAT(round(F18G_RSRP_115_Cnt*100/F18G_RSRP_140_Cnt, 2),'%') as F18G_RSRP_115_rate
			,F18G_RSRP_140_GRID_Cnt-F18G_RSRP_105_GRID_Cnt
			,F18G_RSRP_140_GRID_Cnt
			,round((F18G_RSRP_140_GRID_Cnt-F18G_RSRP_105_GRID_Cnt)*100/F18G_RSRP_140_GRID_Cnt, 2) as F18G_RSRP_GRID_Avg

			,F21G_RSRP_140_Cnt
			,round(F21G_RSRP_140_Sum/F21G_RSRP_140_Cnt, 2) as F21G_RSRP_140_Avg
			,F21G_RSRP_95_Cnt
			,CONCAT(round(F21G_RSRP_95_Cnt*100/F21G_RSRP_140_Cnt, 2),'%') as F21G_RSRP_95_rate
			,F21G_RSRP_100_Cnt
			,CONCAT(round(F21G_RSRP_100_Cnt*100/F21G_RSRP_140_Cnt, 2),'%') as F21G_RSRP_100_rate
			,F21G_RSRP_105_Cnt
			,CONCAT(round(F21G_RSRP_105_Cnt*100/F21G_RSRP_140_Cnt, 2),'%') as F21G_RSRP_105_rate
			,F21G_RSRP_110_Cnt
			,CONCAT(round(F21G_RSRP_110_Cnt*100/F21G_RSRP_140_Cnt, 2),'%') as F21G_RSRP_110_rate
			,F21G_RSRP_115_Cnt
			,CONCAT(round(F21G_RSRP_115_Cnt*100/F21G_RSRP_140_Cnt, 2),'%') as F21G_RSRP_115_rate
			,F21G_RSRP_140_GRID_Cnt-F21G_RSRP_105_GRID_Cnt
			,F21G_RSRP_140_GRID_Cnt
			,round((F21G_RSRP_140_GRID_Cnt-F21G_RSRP_105_GRID_Cnt)*100/F21G_RSRP_140_GRID_Cnt, 2) as F21G_RSRP_GRID_Avg

			,F26G_RSRP_140_Cnt
			,round(F26G_RSRP_140_Sum/F26G_RSRP_140_Cnt, 2) as F26G_RSRP_140_Avg
			,F26G_RSRP_95_Cnt
			,CONCAT(round(F26G_RSRP_95_Cnt*100/F26G_RSRP_140_Cnt, 2),'%') as F26G_RSRP_95_rate
			,F26G_RSRP_100_Cnt
			,CONCAT(round(F26G_RSRP_100_Cnt*100/F26G_RSRP_140_Cnt, 2),'%') as F26G_RSRP_100_rate
			,F26G_RSRP_105_Cnt
			,CONCAT(round(F26G_RSRP_105_Cnt*100/F26G_RSRP_140_Cnt, 2),'%') as F26G_RSRP_105_rate
			,F26G_RSRP_110_Cnt
			,CONCAT(round(F26G_RSRP_110_Cnt*100/F26G_RSRP_140_Cnt, 2),'%') as F26G_RSRP_110_rate
			,F26G_RSRP_115_Cnt
			,CONCAT(round(F26G_RSRP_115_Cnt*100/F26G_RSRP_140_Cnt, 2),'%') as F26G_RSRP_115_rate
			,F26G_RSRP_140_GRID_Cnt-F26G_RSRP_105_GRID_Cnt
			,F26G_RSRP_140_GRID_Cnt
			,round((F26G_RSRP_140_GRID_Cnt-F26G_RSRP_105_GRID_Cnt)*100/F26G_RSRP_140_GRID_Cnt, 2) as F26G_RSRP_GRID_Avg

			,c.gis_data_gps

			from noce.FRT_MRO_9S_SC_#{TABLE} a
			INNER JOIN dm_scene_area_gis c
			ON
			a.Object_ID = c.OBJ_ID and a.Object_Type= c.OBJ_TYPE
			where 1=1
			and AGPS_TYPE=#{AGPS_TYPE}
			and #{T_PARTITION_VAR}=#{endTime}
			#{CITY_CONDITION}
			#{COUNTRY_CONDITION}
			#{MKTCENTER_CONDITION}
			#{OBJECT_TYPE}
			#{ZLQY_CONDITION}
		]]>
	</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSatSenceTab_1" description="高校、高密度住宅区、高流量商务区、美景、农贸市场、美食、场馆、战狼MR统计表格;">
<![CDATA[
SELECT	a.CITY
,a.COUNTRY
,a.MKTCENTER
,a.`Object_ID`
,a.`Object_Name`

,a.BEST_RSRP_140_Cnt_1
,round(a.BEST_RSRP_140_Sum_1/a.BEST_RSRP_140_Cnt_1, 2) as BEST_RSRP_140_Avg_1
,a.BEST_RSRP_95_Cnt_1
,CONCAT(round(a.BEST_RSRP_95_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_95_rate_1
,a.BEST_RSRP_100_Cnt_1
,CONCAT(round(a.BEST_RSRP_100_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_100_rate_1
,a.BEST_RSRP_105_Cnt_1
,CONCAT(round(a.BEST_RSRP_105_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_105_rate_1
,a.BEST_RSRP_110_Cnt_1
,CONCAT(round(a.BEST_RSRP_110_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_110_rate_1
,a.BEST_RSRP_115_Cnt_1
,CONCAT(round(a.BEST_RSRP_115_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_115_rate_1
,a.BEST_RSRP_140_GRID_Cnt_1-a.BEST_RSRP_105_GRID_Cnt_1
,a.BEST_RSRP_140_GRID_Cnt_1
,CONCAT(round((a.BEST_RSRP_140_GRID_Cnt_1-a.BEST_RSRP_105_GRID_Cnt_1)*100/a.BEST_RSRP_140_GRID_Cnt_1, 2),'%') as BEST_RSRP_GRID_Avg_1

,a.SC_RSRP_140_Cnt_1
,round(a.SC_RSRP_140_Sum_1/a.SC_RSRP_140_Cnt_1, 2) as SC_RSRP_140_Avg_1
,a.SC_RSRP_95_Cnt_1
,CONCAT(round(a.SC_RSRP_95_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_95_rate_1
,a.SC_RSRP_100_Cnt_1
,CONCAT(round(a.SC_RSRP_100_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_100_rate_1
,a.SC_RSRP_105_Cnt_1
,CONCAT(round(a.SC_RSRP_105_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_105_rate_1
,a.SC_RSRP_110_Cnt_1
,CONCAT(round(a.SC_RSRP_110_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_110_rate_1
,a.SC_RSRP_115_Cnt_1
,CONCAT(round(a.SC_RSRP_115_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_115_rate_1
,a.SC_RSRP_140_GRID_Cnt_1-a.SC_RSRP_105_GRID_Cnt_1
,a.SC_RSRP_140_GRID_Cnt_1
,round((a.SC_RSRP_140_GRID_Cnt_1-a.SC_RSRP_105_GRID_Cnt_1)*100/a.SC_RSRP_140_GRID_Cnt_1, 2) as SC_RSRP_GRID_Avg_1

,a.F800M_RSRP_140_Cnt_1
,round(a.F800M_RSRP_140_Sum_1/a.F800M_RSRP_140_Cnt_1, 2) as F800M_RSRP_140_Avg_1
,a.F800M_RSRP_95_Cnt_1
,CONCAT(round(a.F800M_RSRP_95_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_95_rate_1
,a.F800M_RSRP_100_Cnt_1
,CONCAT(round(a.F800M_RSRP_100_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_100_rate_1
,a.F800M_RSRP_105_Cnt_1
,CONCAT(round(a.F800M_RSRP_105_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_105_rate_1
,a.F800M_RSRP_110_Cnt_1
,CONCAT(round(a.F800M_RSRP_110_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_110_rate_1
,a.F800M_RSRP_115_Cnt_1
,CONCAT(round(a.F800M_RSRP_115_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_115_rate_1
,a.F800M_RSRP_140_GRID_Cnt_1-a.F800M_RSRP_105_GRID_Cnt_1
,a.F800M_RSRP_140_GRID_Cnt_1
,round((a.F800M_RSRP_140_GRID_Cnt_1-a.F800M_RSRP_105_GRID_Cnt_1)*100/a.F800M_RSRP_140_GRID_Cnt_1, 2) as F800M_RSRP_GRID_Avg_1

,a.F18G_RSRP_140_Cnt_1
,round(a.F18G_RSRP_140_Sum_1/a.F18G_RSRP_140_Cnt_1, 2) as F18G_RSRP_140_Avg_1
,a.F18G_RSRP_95_Cnt_1
,CONCAT(round(a.F18G_RSRP_95_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_95_rate_1
,a.F18G_RSRP_100_Cnt_1
,CONCAT(round(a.F18G_RSRP_100_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_100_rate_1
,a.F18G_RSRP_105_Cnt_1
,CONCAT(round(a.F18G_RSRP_105_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_105_rate_1
,a.F18G_RSRP_110_Cnt_1
,CONCAT(round(a.F18G_RSRP_110_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_110_rate_1
,a.F18G_RSRP_115_Cnt_1
,CONCAT(round(a.F18G_RSRP_115_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_115_rate_1
,a.F18G_RSRP_140_GRID_Cnt_1-a.F18G_RSRP_105_GRID_Cnt_1
,a.F18G_RSRP_140_GRID_Cnt_1
,round((a.F18G_RSRP_140_GRID_Cnt_1-a.F18G_RSRP_105_GRID_Cnt_1)*100/a.F18G_RSRP_140_GRID_Cnt_1, 2) as F18G_RSRP_GRID_Avg_1

,a.F21G_RSRP_140_Cnt_1
,round(a.F21G_RSRP_140_Sum_1/a.F21G_RSRP_140_Cnt_1, 2) as F21G_RSRP_140_Avg_1
,a.F21G_RSRP_95_Cnt_1
,CONCAT(round(a.F21G_RSRP_95_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_95_rate_1
,a.F21G_RSRP_100_Cnt_1
,CONCAT(round(a.F21G_RSRP_100_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_100_rate_1
,a.F21G_RSRP_105_Cnt_1
,CONCAT(round(a.F21G_RSRP_105_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_105_rate_1
,a.F21G_RSRP_110_Cnt_1
,CONCAT(round(a.F21G_RSRP_110_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_110_rate_1
,a.F21G_RSRP_115_Cnt_1
,CONCAT(round(a.F21G_RSRP_115_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_115_rate_1
,a.F21G_RSRP_140_GRID_Cnt_1-a.F21G_RSRP_105_GRID_Cnt_1
,a.F21G_RSRP_140_GRID_Cnt_1
,round((a.F21G_RSRP_140_GRID_Cnt_1-a.F21G_RSRP_105_GRID_Cnt_1)*100/a.F21G_RSRP_140_GRID_Cnt_1, 2) as F21G_RSRP_GRID_Avg_1

,a.F26G_RSRP_140_Cnt_1
,round(a.F26G_RSRP_140_Sum_1/a.F26G_RSRP_140_Cnt_1, 2) as F26G_RSRP_140_Avg_1
,a.F26G_RSRP_95_Cnt_1
,CONCAT(round(a.F26G_RSRP_95_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_95_rate_1
,a.F26G_RSRP_100_Cnt_1
,CONCAT(round(a.F26G_RSRP_100_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_100_rate_1
,a.F26G_RSRP_105_Cnt_1
,CONCAT(round(a.F26G_RSRP_105_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_105_rate_1
,a.F26G_RSRP_110_Cnt_1
,CONCAT(round(a.F26G_RSRP_110_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_110_rate_1
,a.F26G_RSRP_115_Cnt_1
,CONCAT(round(a.F26G_RSRP_115_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_115_rate_1
,a.F26G_RSRP_140_GRID_Cnt_1-a.F26G_RSRP_105_GRID_Cnt_1
,a.F26G_RSRP_140_GRID_Cnt_1
,round((a.F26G_RSRP_140_GRID_Cnt_1-a.F26G_RSRP_105_GRID_Cnt_1)*100/a.F26G_RSRP_140_GRID_Cnt_1, 2) as F26G_RSRP_GRID_Avg_1

,a.BEST_RSRP_140_Cnt_0
,round(a.BEST_RSRP_140_Sum_0/a.BEST_RSRP_140_Cnt_0, 2) as BEST_RSRP_140_Avg_0
,a.BEST_RSRP_95_Cnt_0
,CONCAT(round(a.BEST_RSRP_95_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_95_rate_0
,a.BEST_RSRP_100_Cnt_0
,CONCAT(round(a.BEST_RSRP_100_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_100_rate_0
,a.BEST_RSRP_105_Cnt_0
,CONCAT(round(a.BEST_RSRP_105_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_105_rate_0
,a.BEST_RSRP_110_Cnt_0
,CONCAT(round(a.BEST_RSRP_110_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_110_rate_0
,a.BEST_RSRP_115_Cnt_0
,CONCAT(round(a.BEST_RSRP_115_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_115_rate_0
,a.BEST_RSRP_140_GRID_Cnt_0-a.BEST_RSRP_105_GRID_Cnt_0
,a.BEST_RSRP_140_GRID_Cnt_0
,round((a.BEST_RSRP_140_GRID_Cnt_0-a.BEST_RSRP_105_GRID_Cnt_0)*100/a.BEST_RSRP_140_GRID_Cnt_0, 2) as BEST_RSRP_GRID_Avg_0

,a.SC_RSRP_140_Cnt_0
,round(a.SC_RSRP_140_Sum_0/a.SC_RSRP_140_Cnt_0, 2) as SC_RSRP_140_Avg_0
,a.SC_RSRP_95_Cnt_0
,CONCAT(round(a.SC_RSRP_95_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_95_rate_0
,a.SC_RSRP_100_Cnt_0
,CONCAT(round(a.SC_RSRP_100_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_100_rate_0
,a.SC_RSRP_105_Cnt_0
,CONCAT(round(a.SC_RSRP_105_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_105_rate_0
,a.SC_RSRP_110_Cnt_0
,CONCAT(round(a.SC_RSRP_110_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_110_rate_0
,a.SC_RSRP_115_Cnt_0
,CONCAT(round(a.SC_RSRP_115_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_115_rate_0
,a.SC_RSRP_140_GRID_Cnt_0-a.SC_RSRP_105_GRID_Cnt_0
,a.SC_RSRP_140_GRID_Cnt_0
,round((a.SC_RSRP_140_GRID_Cnt_0-a.SC_RSRP_105_GRID_Cnt_0)*100/a.SC_RSRP_140_GRID_Cnt_0, 2) as SC_RSRP_GRID_Avg_0

,a.F800M_RSRP_140_Cnt_0
,round(a.F800M_RSRP_140_Sum_0/a.F800M_RSRP_140_Cnt_0, 2) as F800M_RSRP_140_Avg_0
,a.F800M_RSRP_95_Cnt_0
,CONCAT(round(a.F800M_RSRP_95_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_95_rate_0
,a.F800M_RSRP_100_Cnt_0
,CONCAT(round(a.F800M_RSRP_100_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_100_rate_0
,a.F800M_RSRP_105_Cnt_0
,CONCAT(round(a.F800M_RSRP_105_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_105_rate_0
,a.F800M_RSRP_110_Cnt_0
,CONCAT(round(a.F800M_RSRP_110_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_110_rate_0
,a.F800M_RSRP_115_Cnt_0
,CONCAT(round(a.F800M_RSRP_115_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_115_rate_0
,a.F800M_RSRP_140_GRID_Cnt_0-a.F800M_RSRP_105_GRID_Cnt_0
,a.F800M_RSRP_140_GRID_Cnt_0
,round((a.F800M_RSRP_140_GRID_Cnt_0-a.F800M_RSRP_105_GRID_Cnt_0)*100/a.F800M_RSRP_140_GRID_Cnt_0, 2) as F800M_RSRP_GRID_Avg_0

,a.F18G_RSRP_140_Cnt_0
,round(a.F18G_RSRP_140_Sum_0/a.F18G_RSRP_140_Cnt_0, 2) as F18G_RSRP_140_Avg_0
,a.F18G_RSRP_95_Cnt_0
,CONCAT(round(a.F18G_RSRP_95_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_95_rate_0
,a.F18G_RSRP_100_Cnt_0
,CONCAT(round(a.F18G_RSRP_100_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_100_rate_0
,a.F18G_RSRP_105_Cnt_0
,CONCAT(round(a.F18G_RSRP_105_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_105_rate_0
,a.F18G_RSRP_110_Cnt_0
,CONCAT(round(a.F18G_RSRP_110_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_110_rate_0
,a.F18G_RSRP_115_Cnt_0
,CONCAT(round(a.F18G_RSRP_115_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_115_rate_0
,a.F18G_RSRP_140_GRID_Cnt_0-a.F18G_RSRP_105_GRID_Cnt_0
,a.F18G_RSRP_140_GRID_Cnt_0
,round((a.F18G_RSRP_140_GRID_Cnt_0-a.F18G_RSRP_105_GRID_Cnt_0)*100/a.F18G_RSRP_140_GRID_Cnt_0, 2) as F18G_RSRP_GRID_Avg_0

,a.F21G_RSRP_140_Cnt_0
,round(a.F21G_RSRP_140_Sum_0/a.F21G_RSRP_140_Cnt_0, 2) as F21G_RSRP_140_Avg_0
,a.F21G_RSRP_95_Cnt_0
,CONCAT(round(a.F21G_RSRP_95_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_95_rate_0
,a.F21G_RSRP_100_Cnt_0
,CONCAT(round(a.F21G_RSRP_100_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_100_rate_0
,a.F21G_RSRP_105_Cnt_0
,CONCAT(round(a.F21G_RSRP_105_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_105_rate_0
,a.F21G_RSRP_110_Cnt_0
,CONCAT(round(a.F21G_RSRP_110_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_110_rate_0
,a.F21G_RSRP_115_Cnt_0
,CONCAT(round(a.F21G_RSRP_115_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_115_rate_0
,a.F21G_RSRP_140_GRID_Cnt_0-a.F21G_RSRP_105_GRID_Cnt_0
,a.F21G_RSRP_140_GRID_Cnt_0
,round((a.F21G_RSRP_140_GRID_Cnt_0-a.F21G_RSRP_105_GRID_Cnt_0)*100/a.F21G_RSRP_140_GRID_Cnt_0, 2) as F21G_RSRP_GRID_Avg_0

,a.F26G_RSRP_140_Cnt_0
,round(a.F26G_RSRP_140_Sum_0/a.F26G_RSRP_140_Cnt_0, 2) as F26G_RSRP_140_Avg_0
,a.F26G_RSRP_95_Cnt_0
,CONCAT(round(a.F26G_RSRP_95_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_95_rate_0
,a.F26G_RSRP_100_Cnt_0
,CONCAT(round(a.F26G_RSRP_100_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_100_rate_0
,a.F26G_RSRP_105_Cnt_0
,CONCAT(round(a.F26G_RSRP_105_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_105_rate_0
,a.F26G_RSRP_110_Cnt_0
,CONCAT(round(a.F26G_RSRP_110_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_110_rate_0
,a.F26G_RSRP_115_Cnt_0
,CONCAT(round(a.F26G_RSRP_115_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_115_rate_0
,a.F26G_RSRP_140_GRID_Cnt_0-a.F26G_RSRP_105_GRID_Cnt_0
,a.F26G_RSRP_140_GRID_Cnt_0
,round((a.F26G_RSRP_140_GRID_Cnt_0-a.F26G_RSRP_105_GRID_Cnt_0)*100/a.F26G_RSRP_140_GRID_Cnt_0, 2) as F26G_RSRP_GRID_Avg_0
,c.gis_data_gps
from
(
SELECT CITY
,COUNTRY
,MKTCENTER
,`Object_ID`
,`Object_Name`
,Object_Type

,sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ) as BEST_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Sum else 0 end ) as BEST_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_95_Cnt else 0 end ) as BEST_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_100_Cnt else 0 end ) as BEST_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_105_Cnt else 0 end ) as BEST_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_110_Cnt else 0 end ) as BEST_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_115_Cnt else 0 end ) as BEST_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_105_GRID_Cnt else 0 end ) as BEST_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_140_GRID_Cnt else 0 end ) as BEST_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ) as SC_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_140_Sum else 0 end ) as SC_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_95_Cnt else 0 end ) as SC_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_100_Cnt else 0 end ) as SC_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_105_Cnt else 0 end ) as SC_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_110_Cnt else 0 end ) as SC_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_115_Cnt else 0 end ) as SC_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_105_GRID_Cnt else 0 end ) as SC_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_140_GRID_Cnt else 0 end ) as SC_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then F800M_RSRP_140_Cnt else 0 end ) as F800M_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_140_Sum else 0 end ) as F800M_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_95_Cnt else 0 end ) as F800M_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_100_Cnt else 0 end ) as F800M_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_105_Cnt else 0 end ) as F800M_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_110_Cnt else 0 end ) as F800M_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_115_Cnt else 0 end ) as F800M_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_105_GRID_Cnt else 0 end ) as F800M_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_140_GRID_Cnt else 0 end ) as F800M_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then F18G_RSRP_140_Cnt else 0 end ) as F18G_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_140_Sum else 0 end ) as F18G_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_95_Cnt else 0 end ) as F18G_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_100_Cnt else 0 end ) as F18G_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_105_Cnt else 0 end ) as F18G_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_110_Cnt else 0 end ) as F18G_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_115_Cnt else 0 end ) as F18G_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_105_GRID_Cnt else 0 end ) as F18G_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_140_GRID_Cnt else 0 end ) as F18G_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then F21G_RSRP_140_Cnt else 0 end ) as F21G_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_140_Sum else 0 end ) as F21G_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_95_Cnt else 0 end ) as F21G_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_100_Cnt else 0 end ) as F21G_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_105_Cnt else 0 end ) as F21G_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_110_Cnt else 0 end ) as F21G_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_115_Cnt else 0 end ) as F21G_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_105_GRID_Cnt else 0 end ) as F21G_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_140_GRID_Cnt else 0 end ) as F21G_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then F26G_RSRP_140_Cnt else 0 end ) as F26G_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_140_Sum else 0 end ) as F26G_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_95_Cnt else 0 end ) as F26G_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_100_Cnt else 0 end ) as F26G_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_105_Cnt else 0 end ) as F26G_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_110_Cnt else 0 end ) as F26G_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_115_Cnt else 0 end ) as F26G_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_105_GRID_Cnt else 0 end ) as F26G_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_140_GRID_Cnt else 0 end ) as F26G_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ) as BEST_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Sum else 0 end ) as BEST_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_95_Cnt else 0 end ) as BEST_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_100_Cnt else 0 end ) as BEST_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_105_Cnt else 0 end ) as BEST_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_110_Cnt else 0 end ) as BEST_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_115_Cnt else 0 end ) as BEST_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_105_GRID_Cnt else 0 end ) as BEST_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_140_GRID_Cnt else 0 end ) as BEST_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ) as SC_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_140_Sum else 0 end ) as SC_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_95_Cnt else 0 end ) as SC_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_100_Cnt else 0 end ) as SC_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_105_Cnt else 0 end ) as SC_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_110_Cnt else 0 end ) as SC_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_115_Cnt else 0 end ) as SC_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_105_GRID_Cnt else 0 end ) as SC_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_140_GRID_Cnt else 0 end ) as SC_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then F800M_RSRP_140_Cnt else 0 end ) as F800M_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_140_Sum else 0 end ) as F800M_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_95_Cnt else 0 end ) as F800M_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_100_Cnt else 0 end ) as F800M_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_105_Cnt else 0 end ) as F800M_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_110_Cnt else 0 end ) as F800M_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_115_Cnt else 0 end ) as F800M_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_105_GRID_Cnt else 0 end ) as F800M_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_140_GRID_Cnt else 0 end ) as F800M_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then F18G_RSRP_140_Cnt else 0 end ) as F18G_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_140_Sum else 0 end ) as F18G_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_95_Cnt else 0 end ) as F18G_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_100_Cnt else 0 end ) as F18G_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_105_Cnt else 0 end ) as F18G_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_110_Cnt else 0 end ) as F18G_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_115_Cnt else 0 end ) as F18G_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_105_GRID_Cnt else 0 end ) as F18G_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_140_GRID_Cnt else 0 end ) as F18G_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then F21G_RSRP_140_Cnt else 0 end ) as F21G_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_140_Sum else 0 end ) as F21G_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_95_Cnt else 0 end ) as F21G_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_100_Cnt else 0 end ) as F21G_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_105_Cnt else 0 end ) as F21G_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_110_Cnt else 0 end ) as F21G_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_115_Cnt else 0 end ) as F21G_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_105_GRID_Cnt else 0 end ) as F21G_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_140_GRID_Cnt else 0 end ) as F21G_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then F26G_RSRP_140_Cnt else 0 end ) as F26G_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_140_Sum else 0 end ) as F26G_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_95_Cnt else 0 end ) as F26G_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_100_Cnt else 0 end ) as F26G_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_105_Cnt else 0 end ) as F26G_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_110_Cnt else 0 end ) as F26G_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_115_Cnt else 0 end ) as F26G_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_105_GRID_Cnt else 0 end ) as F26G_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_140_GRID_Cnt else 0 end ) as F26G_RSRP_140_GRID_Cnt_0
from noce.FRT_MRO_9S_SC_#{TABLE}
where 1=1 and
#{T_PARTITION_VAR}=#{endTime}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{OBJECT_TYPE}
#{ZLQY_CONDITION}

GROUP BY CITY
,COUNTRY
,MKTCENTER
,`Object_ID`
,`Object_Name`
) a
,
(select OBJ_ID,OBJ_TYPE,gis_data_gps FROM dm_scene_area_gis) c
where a.Object_ID = c.OBJ_ID and a.Object_Type= c.OBJ_TYPE
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_02_MRSatTab_count_2" description="场景类表格总数">
<![CDATA[
select count(distinct Object_Type,Object_ID ) count from FRT_MRO_9S_SC_#{TABLE}
where 1=1 and
#{T_PARTITION_VAR}=#{endTime}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{OBJECT_TYPE}
#{ZLQY_CONDITION}
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_02_MRSatTab_count" description="高校、高密度住宅区、高流量商务区、美景、农贸市场、美食、场馆、战狼MR统计表格总数;">
<![CDATA[
SELECT
	count(1) count
FROM
(
SELECT *

from noce.FRT_MRO_9S_SC_#{TABLE}
where 1=1 and
#{T_PARTITION_VAR}=#{endTime}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{OBJECT_TYPE}
#{ZLQY_CONDITION}

GROUP BY CITY
,COUNTRY
,MKTCENTER
,`Object_ID`
,`Object_Name`
) a
,
(select OBJ_ID,OBJ_TYPE,gis_data_gps FROM dm_scene_area_gis) c
where a.Object_ID = c.OBJ_ID and a.Object_Type= c.OBJ_TYPE
]]>
</sqlTemplate>

	<sqlTemplate id="StatisticsDL_02_MRSatTab_count_20181127" description="高校、高密度住宅区、高流量商务区、美景、农贸市场、美食、场馆、战狼MR统计表格总数;">
		<![CDATA[
			SELECT
				count(1) count
			FROM
			(
			SELECT *

			from noce.FRT_MRO_9S_SC_#{TABLE}
			where 1=1 and AGPS_TYPE=#{AGPS_TYPE} and
			#{T_PARTITION_VAR}=#{endTime}
			#{CITY_CONDITION}
			#{COUNTRY_CONDITION}
			#{MKTCENTER_CONDITION}
			#{OBJECT_TYPE}
			#{ZLQY_CONDITION}
			) a
			,
			(select OBJ_ID,OBJ_TYPE,gis_data_gps FROM dm_scene_area_gis) c
			where a.Object_ID = c.OBJ_ID and a.Object_Type= c.OBJ_TYPE
		]]>
	</sqlTemplate>

<sqlTemplate id="StatisticsDL_03_MRSatTab_count" description="高速、市政路统计表格总数;">
<![CDATA[
SELECT
count(1) count
FROM
(
SELECT *

from noce.FRT_MRO_9S_SC_#{TABLE}
where 1=1 and
#{T_PARTITION_VAR}=#{endTime}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{OBJECT_TYPE}
#{ZLQY_CONDITION}

GROUP BY CITY
,COUNTRY
,MKTCENTER
,`Object_ID`
,`Object_Name`
) a

]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSatSenceTab_11" description="高速、市政路统计表格;">
<![CDATA[
SELECT	a.CITY
,a.COUNTRY
,a.MKTCENTER
,a.`Object_ID`
,a.`Object_Name`

,a.BEST_RSRP_140_Cnt_1
,round(a.BEST_RSRP_140_Sum_1/a.BEST_RSRP_140_Cnt_1, 2) as BEST_RSRP_140_Avg_1
,a.BEST_RSRP_95_Cnt_1
,CONCAT(round(a.BEST_RSRP_95_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_95_rate_1
,a.BEST_RSRP_100_Cnt_1
,CONCAT(round(a.BEST_RSRP_100_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_100_rate_1
,a.BEST_RSRP_105_Cnt_1
,CONCAT(round(a.BEST_RSRP_105_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_105_rate_1
,a.BEST_RSRP_110_Cnt_1
,CONCAT(round(a.BEST_RSRP_110_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_110_rate_1
,a.BEST_RSRP_115_Cnt_1
,CONCAT(round(a.BEST_RSRP_115_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_115_rate_1
,a.BEST_RSRP_105_GRID_Cnt_1
,a.BEST_RSRP_140_GRID_Cnt_1
,CONCAT(round(a.BEST_RSRP_105_GRID_Cnt_1*100/a.BEST_RSRP_140_GRID_Cnt_1, 2),'%') as BEST_RSRP_GRID_Avg_1

,a.SC_RSRP_140_Cnt_1
,round(a.SC_RSRP_140_Sum_1/a.SC_RSRP_140_Cnt_1, 2) as SC_RSRP_140_Avg_1
,a.SC_RSRP_95_Cnt_1
,CONCAT(round(a.SC_RSRP_95_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_95_rate_1
,a.SC_RSRP_100_Cnt_1
,CONCAT(round(a.SC_RSRP_100_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_100_rate_1
,a.SC_RSRP_105_Cnt_1
,CONCAT(round(a.SC_RSRP_105_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_105_rate_1
,a.SC_RSRP_110_Cnt_1
,CONCAT(round(a.SC_RSRP_110_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_110_rate_1
,a.SC_RSRP_115_Cnt_1
,CONCAT(round(a.SC_RSRP_115_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_115_rate_1
,a.SC_RSRP_105_GRID_Cnt_1
,a.SC_RSRP_140_GRID_Cnt_1
,round(a.SC_RSRP_105_GRID_Cnt_1*100/a.SC_RSRP_140_GRID_Cnt_1, 2) as SC_RSRP_GRID_Avg_1

,a.F800M_RSRP_140_Cnt_1
,round(a.F800M_RSRP_140_Sum_1/a.F800M_RSRP_140_Cnt_1, 2) as F800M_RSRP_140_Avg_1
,a.F800M_RSRP_95_Cnt_1
,CONCAT(round(a.F800M_RSRP_95_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_95_rate_1
,a.F800M_RSRP_100_Cnt_1
,CONCAT(round(a.F800M_RSRP_100_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_100_rate_1
,a.F800M_RSRP_105_Cnt_1
,CONCAT(round(a.F800M_RSRP_105_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_105_rate_1
,a.F800M_RSRP_110_Cnt_1
,CONCAT(round(a.F800M_RSRP_110_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_110_rate_1
,a.F800M_RSRP_115_Cnt_1
,CONCAT(round(a.F800M_RSRP_115_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_115_rate_1
,a.F800M_RSRP_105_GRID_Cnt_1
,a.F800M_RSRP_140_GRID_Cnt_1
,round(a.F800M_RSRP_105_GRID_Cnt_1*100/a.F800M_RSRP_140_GRID_Cnt_1, 2) as F800M_RSRP_GRID_Avg_1

,a.F18G_RSRP_140_Cnt_1
,round(a.F18G_RSRP_140_Sum_1/a.F18G_RSRP_140_Cnt_1, 2) as F18G_RSRP_140_Avg_1
,a.F18G_RSRP_95_Cnt_1
,CONCAT(round(a.F18G_RSRP_95_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_95_rate_1
,a.F18G_RSRP_100_Cnt_1
,CONCAT(round(a.F18G_RSRP_100_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_100_rate_1
,a.F18G_RSRP_105_Cnt_1
,CONCAT(round(a.F18G_RSRP_105_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_105_rate_1
,a.F18G_RSRP_110_Cnt_1
,CONCAT(round(a.F18G_RSRP_110_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_110_rate_1
,a.F18G_RSRP_115_Cnt_1
,CONCAT(round(a.F18G_RSRP_115_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_115_rate_1
,a.F18G_RSRP_105_GRID_Cnt_1
,a.F18G_RSRP_140_GRID_Cnt_1
,round(a.F18G_RSRP_105_GRID_Cnt_1*100/a.F18G_RSRP_140_GRID_Cnt_1, 2) as F18G_RSRP_GRID_Avg_1

,a.F21G_RSRP_140_Cnt_1
,round(a.F21G_RSRP_140_Sum_1/a.F21G_RSRP_140_Cnt_1, 2) as F21G_RSRP_140_Avg_1
,a.F21G_RSRP_95_Cnt_1
,CONCAT(round(a.F21G_RSRP_95_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_95_rate_1
,a.F21G_RSRP_100_Cnt_1
,CONCAT(round(a.F21G_RSRP_100_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_100_rate_1
,a.F21G_RSRP_105_Cnt_1
,CONCAT(round(a.F21G_RSRP_105_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_105_rate_1
,a.F21G_RSRP_110_Cnt_1
,CONCAT(round(a.F21G_RSRP_110_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_110_rate_1
,a.F21G_RSRP_115_Cnt_1
,CONCAT(round(a.F21G_RSRP_115_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_115_rate_1
,a.F21G_RSRP_105_GRID_Cnt_1
,a.F21G_RSRP_140_GRID_Cnt_1
,round(a.F21G_RSRP_105_GRID_Cnt_1*100/a.F21G_RSRP_140_GRID_Cnt_1, 2) as F21G_RSRP_GRID_Avg_1

,a.F26G_RSRP_140_Cnt_1
,round(a.F26G_RSRP_140_Sum_1/a.F26G_RSRP_140_Cnt_1, 2) as F26G_RSRP_140_Avg_1
,a.F26G_RSRP_95_Cnt_1
,CONCAT(round(a.F26G_RSRP_95_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_95_rate_1
,a.F26G_RSRP_100_Cnt_1
,CONCAT(round(a.F26G_RSRP_100_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_100_rate_1
,a.F26G_RSRP_105_Cnt_1
,CONCAT(round(a.F26G_RSRP_105_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_105_rate_1
,a.F26G_RSRP_110_Cnt_1
,CONCAT(round(a.F26G_RSRP_110_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_110_rate_1
,a.F26G_RSRP_115_Cnt_1
,CONCAT(round(a.F26G_RSRP_115_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_115_rate_1
,a.F26G_RSRP_105_GRID_Cnt_1
,a.F26G_RSRP_140_GRID_Cnt_1
,round(a.F26G_RSRP_105_GRID_Cnt_1*100/a.F26G_RSRP_140_GRID_Cnt_1, 2) as F26G_RSRP_GRID_Avg_1

,a.BEST_RSRP_140_Cnt_0
,round(a.BEST_RSRP_140_Sum_0/a.BEST_RSRP_140_Cnt_0, 2) as BEST_RSRP_140_Avg_0
,a.BEST_RSRP_95_Cnt_0
,CONCAT(round(a.BEST_RSRP_95_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_95_rate_0
,a.BEST_RSRP_100_Cnt_0
,CONCAT(round(a.BEST_RSRP_100_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_100_rate_0
,a.BEST_RSRP_105_Cnt_0
,CONCAT(round(a.BEST_RSRP_105_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_105_rate_0
,a.BEST_RSRP_110_Cnt_0
,CONCAT(round(a.BEST_RSRP_110_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_110_rate_0
,a.BEST_RSRP_115_Cnt_0
,CONCAT(round(a.BEST_RSRP_115_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_115_rate_0
,a.BEST_RSRP_105_GRID_Cnt_0
,a.BEST_RSRP_140_GRID_Cnt_0
,round(a.BEST_RSRP_105_GRID_Cnt_0*100/a.BEST_RSRP_140_GRID_Cnt_0, 2) as BEST_RSRP_GRID_Avg_0

,a.SC_RSRP_140_Cnt_0
,round(a.SC_RSRP_140_Sum_0/a.SC_RSRP_140_Cnt_0, 2) as SC_RSRP_140_Avg_0
,a.SC_RSRP_95_Cnt_0
,CONCAT(round(a.SC_RSRP_95_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_95_rate_0
,a.SC_RSRP_100_Cnt_0
,CONCAT(round(a.SC_RSRP_100_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_100_rate_0
,a.SC_RSRP_105_Cnt_0
,CONCAT(round(a.SC_RSRP_105_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_105_rate_0
,a.SC_RSRP_110_Cnt_0
,CONCAT(round(a.SC_RSRP_110_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_110_rate_0
,a.SC_RSRP_115_Cnt_0
,CONCAT(round(a.SC_RSRP_115_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_115_rate_0
,a.SC_RSRP_105_GRID_Cnt_0
,a.SC_RSRP_140_GRID_Cnt_0
,round(a.SC_RSRP_105_GRID_Cnt_0*100/a.SC_RSRP_140_GRID_Cnt_0, 2) as SC_RSRP_GRID_Avg_0

,a.F800M_RSRP_140_Cnt_0
,round(a.F800M_RSRP_140_Sum_0/a.F800M_RSRP_140_Cnt_0, 2) as F800M_RSRP_140_Avg_0
,a.F800M_RSRP_95_Cnt_0
,CONCAT(round(a.F800M_RSRP_95_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_95_rate_0
,a.F800M_RSRP_100_Cnt_0
,CONCAT(round(a.F800M_RSRP_100_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_100_rate_0
,a.F800M_RSRP_105_Cnt_0
,CONCAT(round(a.F800M_RSRP_105_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_105_rate_0
,a.F800M_RSRP_110_Cnt_0
,CONCAT(round(a.F800M_RSRP_110_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_110_rate_0
,a.F800M_RSRP_115_Cnt_0
,CONCAT(round(a.F800M_RSRP_115_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_115_rate_0
,a.F800M_RSRP_105_GRID_Cnt_0
,a.F800M_RSRP_140_GRID_Cnt_0
,round(a.F800M_RSRP_105_GRID_Cnt_0*100/a.F800M_RSRP_140_GRID_Cnt_0, 2) as F800M_RSRP_GRID_Avg_0

,a.F18G_RSRP_140_Cnt_0
,round(a.F18G_RSRP_140_Sum_0/a.F18G_RSRP_140_Cnt_0, 2) as F18G_RSRP_140_Avg_0
,a.F18G_RSRP_95_Cnt_0
,CONCAT(round(a.F18G_RSRP_95_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_95_rate_0
,a.F18G_RSRP_100_Cnt_0
,CONCAT(round(a.F18G_RSRP_100_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_100_rate_0
,a.F18G_RSRP_105_Cnt_0
,CONCAT(round(a.F18G_RSRP_105_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_105_rate_0
,a.F18G_RSRP_110_Cnt_0
,CONCAT(round(a.F18G_RSRP_110_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_110_rate_0
,a.F18G_RSRP_115_Cnt_0
,CONCAT(round(a.F18G_RSRP_115_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_115_rate_0
,a.F18G_RSRP_105_GRID_Cnt_0
,a.F18G_RSRP_140_GRID_Cnt_0
,round(a.F18G_RSRP_105_GRID_Cnt_0*100/a.F18G_RSRP_140_GRID_Cnt_0, 2) as F18G_RSRP_GRID_Avg_0

,a.F21G_RSRP_140_Cnt_0
,round(a.F21G_RSRP_140_Sum_0/a.F21G_RSRP_140_Cnt_0, 2) as F21G_RSRP_140_Avg_0
,a.F21G_RSRP_95_Cnt_0
,CONCAT(round(a.F21G_RSRP_95_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_95_rate_0
,a.F21G_RSRP_100_Cnt_0
,CONCAT(round(a.F21G_RSRP_100_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_100_rate_0
,a.F21G_RSRP_105_Cnt_0
,CONCAT(round(a.F21G_RSRP_105_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_105_rate_0
,a.F21G_RSRP_110_Cnt_0
,CONCAT(round(a.F21G_RSRP_110_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_110_rate_0
,a.F21G_RSRP_115_Cnt_0
,CONCAT(round(a.F21G_RSRP_115_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_115_rate_0
,a.F21G_RSRP_105_GRID_Cnt_0
,a.F21G_RSRP_140_GRID_Cnt_0
,round(a.F21G_RSRP_105_GRID_Cnt_0*100/a.F21G_RSRP_140_GRID_Cnt_0, 2) as F21G_RSRP_GRID_Avg_0

,a.F26G_RSRP_140_Cnt_0
,round(a.F26G_RSRP_140_Sum_0/a.F26G_RSRP_140_Cnt_0, 2) as F26G_RSRP_140_Avg_0
,a.F26G_RSRP_95_Cnt_0
,CONCAT(round(a.F26G_RSRP_95_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_95_rate_0
,a.F26G_RSRP_100_Cnt_0
,CONCAT(round(a.F26G_RSRP_100_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_100_rate_0
,a.F26G_RSRP_105_Cnt_0
,CONCAT(round(a.F26G_RSRP_105_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_105_rate_0
,a.F26G_RSRP_110_Cnt_0
,CONCAT(round(a.F26G_RSRP_110_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_110_rate_0
,a.F26G_RSRP_115_Cnt_0
,CONCAT(round(a.F26G_RSRP_115_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_115_rate_0
,a.F26G_RSRP_105_GRID_Cnt_0
,a.F26G_RSRP_140_GRID_Cnt_0
,round(a.F26G_RSRP_105_GRID_Cnt_0*100/a.F26G_RSRP_140_GRID_Cnt_0, 2) as F26G_RSRP_GRID_Avg_0
,a.GEOM
from
(
SELECT a.CITY
,a.COUNTRY
,a.MKTCENTER
,a.`Object_ID`
,a.`Object_Name`
,a.Object_Type
,c.GEOM

,sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ) as BEST_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Sum else 0 end ) as BEST_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_95_Cnt else 0 end ) as BEST_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_100_Cnt else 0 end ) as BEST_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_105_Cnt else 0 end ) as BEST_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_110_Cnt else 0 end ) as BEST_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_115_Cnt else 0 end ) as BEST_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_105_GRID_Cnt else 0 end ) as BEST_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_140_GRID_Cnt else 0 end ) as BEST_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ) as SC_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_140_Sum else 0 end ) as SC_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_95_Cnt else 0 end ) as SC_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_100_Cnt else 0 end ) as SC_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_105_Cnt else 0 end ) as SC_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_110_Cnt else 0 end ) as SC_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_115_Cnt else 0 end ) as SC_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_105_GRID_Cnt else 0 end ) as SC_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_140_GRID_Cnt else 0 end ) as SC_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then F800M_RSRP_140_Cnt else 0 end ) as F800M_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_140_Sum else 0 end ) as F800M_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_95_Cnt else 0 end ) as F800M_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_100_Cnt else 0 end ) as F800M_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_105_Cnt else 0 end ) as F800M_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_110_Cnt else 0 end ) as F800M_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_115_Cnt else 0 end ) as F800M_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_105_GRID_Cnt else 0 end ) as F800M_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_140_GRID_Cnt else 0 end ) as F800M_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then F18G_RSRP_140_Cnt else 0 end ) as F18G_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_140_Sum else 0 end ) as F18G_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_95_Cnt else 0 end ) as F18G_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_100_Cnt else 0 end ) as F18G_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_105_Cnt else 0 end ) as F18G_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_110_Cnt else 0 end ) as F18G_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_115_Cnt else 0 end ) as F18G_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_105_GRID_Cnt else 0 end ) as F18G_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_140_GRID_Cnt else 0 end ) as F18G_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then F21G_RSRP_140_Cnt else 0 end ) as F21G_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_140_Sum else 0 end ) as F21G_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_95_Cnt else 0 end ) as F21G_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_100_Cnt else 0 end ) as F21G_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_105_Cnt else 0 end ) as F21G_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_110_Cnt else 0 end ) as F21G_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_115_Cnt else 0 end ) as F21G_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_105_GRID_Cnt else 0 end ) as F21G_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_140_GRID_Cnt else 0 end ) as F21G_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then F26G_RSRP_140_Cnt else 0 end ) as F26G_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_140_Sum else 0 end ) as F26G_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_95_Cnt else 0 end ) as F26G_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_100_Cnt else 0 end ) as F26G_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_105_Cnt else 0 end ) as F26G_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_110_Cnt else 0 end ) as F26G_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_115_Cnt else 0 end ) as F26G_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_105_GRID_Cnt else 0 end ) as F26G_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_140_GRID_Cnt else 0 end ) as F26G_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ) as BEST_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Sum else 0 end ) as BEST_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_95_Cnt else 0 end ) as BEST_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_100_Cnt else 0 end ) as BEST_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_105_Cnt else 0 end ) as BEST_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_110_Cnt else 0 end ) as BEST_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_115_Cnt else 0 end ) as BEST_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_105_GRID_Cnt else 0 end ) as BEST_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_140_GRID_Cnt else 0 end ) as BEST_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ) as SC_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_140_Sum else 0 end ) as SC_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_95_Cnt else 0 end ) as SC_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_100_Cnt else 0 end ) as SC_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_105_Cnt else 0 end ) as SC_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_110_Cnt else 0 end ) as SC_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_115_Cnt else 0 end ) as SC_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_105_GRID_Cnt else 0 end ) as SC_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_140_GRID_Cnt else 0 end ) as SC_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then F800M_RSRP_140_Cnt else 0 end ) as F800M_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_140_Sum else 0 end ) as F800M_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_95_Cnt else 0 end ) as F800M_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_100_Cnt else 0 end ) as F800M_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_105_Cnt else 0 end ) as F800M_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_110_Cnt else 0 end ) as F800M_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_115_Cnt else 0 end ) as F800M_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_105_GRID_Cnt else 0 end ) as F800M_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_140_GRID_Cnt else 0 end ) as F800M_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then F18G_RSRP_140_Cnt else 0 end ) as F18G_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_140_Sum else 0 end ) as F18G_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_95_Cnt else 0 end ) as F18G_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_100_Cnt else 0 end ) as F18G_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_105_Cnt else 0 end ) as F18G_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_110_Cnt else 0 end ) as F18G_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_115_Cnt else 0 end ) as F18G_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_105_GRID_Cnt else 0 end ) as F18G_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_140_GRID_Cnt else 0 end ) as F18G_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then F21G_RSRP_140_Cnt else 0 end ) as F21G_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_140_Sum else 0 end ) as F21G_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_95_Cnt else 0 end ) as F21G_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_100_Cnt else 0 end ) as F21G_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_105_Cnt else 0 end ) as F21G_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_110_Cnt else 0 end ) as F21G_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_115_Cnt else 0 end ) as F21G_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_105_GRID_Cnt else 0 end ) as F21G_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_140_GRID_Cnt else 0 end ) as F21G_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then F26G_RSRP_140_Cnt else 0 end ) as F26G_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_140_Sum else 0 end ) as F26G_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_95_Cnt else 0 end ) as F26G_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_100_Cnt else 0 end ) as F26G_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_105_Cnt else 0 end ) as F26G_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_110_Cnt else 0 end ) as F26G_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_115_Cnt else 0 end ) as F26G_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_105_GRID_Cnt else 0 end ) as F26G_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_140_GRID_Cnt else 0 end ) as F26G_RSRP_140_GRID_Cnt_0
from noce.FRT_MRO_9S_SC_#{TABLE} a
left JOIN dim_road_section c ON a.Object_ID = c.ID  and c.`LEVEL`=500 and c.ROAD_TYPE_ID=#{ROAD_TYPE_ID}
where 1=1 and
#{T_PARTITION_VAR}=#{endTime}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{OBJECT_TYPE}
#{ZLQY_CONDITION}

GROUP BY CITY
,COUNTRY
,MKTCENTER
,`Object_ID`
,`Object_Name`
) a
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSatSceneImg_time" description="高校、高密度住宅区、高流量商务区、美景、农贸市场、美食、场馆、战狼、关注区域MR统计图">
<![CDATA[
select #{T_PARTITION_VAR}
,AGPS_TYPE
,sum(#{COVERAGE_TYPE}_RSRP_140_Cnt) as RSRP_Cnt
,round(sum(#{COVERAGE_TYPE}_RSRP_#{THRESHOLD}_Cnt)*100/sum(#{COVERAGE_TYPE}_RSRP_140_Cnt), 2) as RSRP_rate
from noce.FRT_MRO_9S_SC_MKT_#{TABLE}
where #{T_PARTITION_VAR} between #{START_TIME} and #{END_TIME}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{OBJECT_TYPE}
#{ZLQY_CONDITION}
group by #{T_PARTITION_VAR},AGPS_TYPE
order by #{T_PARTITION_VAR},AGPS_TYPE
;
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSatSceneImg_city" description="高校、高密度住宅区、高流量商务区、美景、农贸市场、美食、场馆、战狼、关注区域MR统计图(按地市)">
<![CDATA[
select #{CITY}
,AGPS_TYPE
,sum(#{COVERAGE_TYPE}_RSRP_140_Cnt) as RSRP_Cnt -- 记录数
,round(sum(#{COVERAGE_TYPE}_RSRP_#{THRESHOLD}_Cnt)*100/sum(#{COVERAGE_TYPE}_RSRP_140_Cnt), 2) as RSRP_rate -- 覆盖率
from noce.FRT_MRO_9S_SC_MKT_#{TABLE}
where #{T_PARTITION_VAR} = #{END_TIME}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
and #{CITY} <> ''
#{OBJECT_TYPE}
#{ZLQY_CONDITION}
group by #{CITY},AGPS_TYPE
order by #{CITY},AGPS_TYPE

]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSatSceneDownload_time" description="高校、高密度住宅区、高流量商务区、美景、农贸市场、美食、场馆、战狼、关注区域MR趋势图导出">
<![CDATA[
select a.#{T_PARTITION_VAR} -- 日期
,'#{COVERAGE_TYPE}' as COVERAGE_TYPE

,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum -- AGPS-MR覆盖记录数
,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum -- 全量MR覆盖记录数

,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum -- INDOOR-MR覆盖记录数
,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖记录数

,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum -- AGPS-MR覆盖#{THRESHOLD}记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_95_AGPS_rate -- AGPS-MR 95覆盖率
,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_sum -- 全量MR覆盖95记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_95_rate -- 全量MR 95覆盖率

,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_INDOOR_sum -- INDOOR-MR覆盖 95记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_95_INDOOR_rate -- INDOOR-MR 95覆盖率
,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖95记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_95_OUTDOOR_rate -- OUTDOOR_MR 95覆盖率

,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum -- AGPS-MR覆盖100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_100_AGPS_rate -- AGPS-MR 100覆盖率
,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_sum -- 全量MR覆盖100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_100_rate -- 全量MR 100覆盖率

,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_INDOOR_sum -- INDOOR-MR覆盖 100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_100_INDOOR_rate -- INDOOR-MR 100覆盖率
,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_100_OUTDOOR_rate -- OUTDOOR_MR 100覆盖率

,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum -- AGPS-MR覆盖105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_105_AGPS_rate -- AGPS-MR 105覆盖率
,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_sum -- 全量MR覆盖105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_105_rate -- 全量MR 105覆盖率

,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_INDOOR_sum -- INDOOR-MR覆盖 105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_105_INDOOR_rate -- INDOOR-MR 105覆盖率
,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_105_OUTDOOR_rate -- OUTDOOR_MR 105覆盖率

,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum -- AGPS-MR覆盖110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_110_AGPS_rate -- AGPS-MR 110覆盖率
,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_sum -- 全量MR覆盖110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_110_rate -- 全量MR 110覆盖率

,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_INDOOR_sum -- INDOOR-MR覆盖 110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_110_INDOOR_rate -- INDOOR-MR 110覆盖率
,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_110_OUTDOOR_rate -- OUTDOOR_MR 110覆盖率

,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum -- AGPS-MR覆盖115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_115_AGPS_rate -- AGPS-MR 115覆盖率
,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_sum -- 全量MR覆盖115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_115_rate -- 全量MR 115覆盖率

,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_INDOOR_sum -- INDOOR-MR覆盖 115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_115_INDOOR_rate -- INDOOR-MR 115覆盖率
,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_115_OUTDOOR_rate -- OUTDOOR_MR 115覆盖率

from
(select #{T_PARTITION_VAR}
,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end ) as #{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_140_Cnt_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end ) as #{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end ) as #{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_OUTDOOR_sum

from noce.FRT_MRO_9S_SC_MKT_#{TABLE}
where #{T_PARTITION_VAR} between #{START_TIME} and #{END_TIME}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{OBJECT_TYPE}
#{ZLQY_CONDITION}
group by #{T_PARTITION_VAR}
) a
order by a.#{T_PARTITION_VAR}
]]>
</sqlTemplate>


<sqlTemplate id="StatisticsDL_MRSatSceneDownload_city" description="高校、高密度住宅区、高流量商务区、美景、农贸市场、美食、场馆、战狼、关注区域MR区域趋势图导出">
<![CDATA[
select a.#{CITY} -- 地市
,'#{COVERAGE_TYPE}' as COVERAGE_TYPE

,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum -- AGPS-MR覆盖记录数
,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum -- 全量MR覆盖记录数

,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum -- INDOOR-MR覆盖记录数
,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖记录数

,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum -- AGPS-MR覆盖#{THRESHOLD}记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_95_AGPS_rate -- AGPS-MR 95覆盖率
,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_sum -- 全量MR覆盖95记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_95_rate -- 全量MR 95覆盖率

,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_INDOOR_sum -- INDOOR-MR覆盖 95记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_95_INDOOR_rate -- INDOOR-MR 95覆盖率
,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖95记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_95_OUTDOOR_rate -- OUTDOOR_MR 95覆盖率

,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum -- AGPS-MR覆盖100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_100_AGPS_rate -- AGPS-MR 100覆盖率
,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_sum -- 全量MR覆盖100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_100_rate -- 全量MR 100覆盖率

,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_INDOOR_sum -- INDOOR-MR覆盖 100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_100_INDOOR_rate -- INDOOR-MR 100覆盖率
,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_100_OUTDOOR_rate -- OUTDOOR_MR 100覆盖率

,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum -- AGPS-MR覆盖105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_105_AGPS_rate -- AGPS-MR 105覆盖率
,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_sum -- 全量MR覆盖105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_105_rate -- 全量MR 105覆盖率

,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_INDOOR_sum -- INDOOR-MR覆盖 105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_105_INDOOR_rate -- INDOOR-MR 105覆盖率
,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_105_OUTDOOR_rate -- OUTDOOR_MR 105覆盖率

,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum -- AGPS-MR覆盖110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_110_AGPS_rate -- AGPS-MR 110覆盖率
,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_sum -- 全量MR覆盖110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_110_rate -- 全量MR 110覆盖率

,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_INDOOR_sum -- INDOOR-MR覆盖 110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_110_INDOOR_rate -- INDOOR-MR 110覆盖率
,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_110_OUTDOOR_rate -- OUTDOOR_MR 110覆盖率

,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum -- AGPS-MR覆盖115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_115_AGPS_rate -- AGPS-MR 115覆盖率
,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_sum -- 全量MR覆盖115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_115_rate -- 全量MR 115覆盖率

,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_INDOOR_sum -- INDOOR-MR覆盖 115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_115_INDOOR_rate -- INDOOR-MR 115覆盖率
,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_115_OUTDOOR_rate -- OUTDOOR_MR 115覆盖率

from
(select #{CITY}
,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end ) as #{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_140_Cnt_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end ) as #{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end ) as #{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_OUTDOOR_sum

from noce.FRT_MRO_9S_SC_MKT_#{TABLE}
where #{T_PARTITION_VAR} = #{END_TIME}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{OBJECT_TYPE}
#{ZLQY_CONDITION}
and #{CITY} <> ''
group by #{CITY}
) a
order by a.#{CITY}
]]>
</sqlTemplate>


<sqlTemplate id="StatisticsDL_MRSatCellImg" description="扇区MR统计图">
<![CDATA[
select #{T_PARTITION_VAR}
,AGPS_TYPE
,sum(#{COVERAGE_TYPE}_RSRP_140_Cnt) as RSRP_Cnt
,round(sum(#{COVERAGE_TYPE}_RSRP_#{THRESHOLD}_Cnt)*100/sum(#{COVERAGE_TYPE}_RSRP_140_Cnt), 2) as RSRP_rate
,sum(#{COVERAGE_TYPE}_RSRP_ENB_Cnt) as ENB_Cnt  -- 基站数
,sum(#{COVERAGE_TYPE}_RSRP_CELL_Cnt) as CELL_Cnt  -- 扇区数
from noce.FRT_MRO_ALL_YF_#{TABLE}
where #{T_PARTITION_VAR} between #{START_TIME} and #{END_TIME}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{FACTORY_CONDITION}
group by #{T_PARTITION_VAR},AGPS_TYPE
order by #{T_PARTITION_VAR},AGPS_TYPE
;

]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSatCellImg_city" description="扇区MR统计图(按地市);">
<![CDATA[
select #{CITY}
,AGPS_TYPE
,sum(#{COVERAGE_TYPE}_RSRP_140_Cnt) RSRP_Cnt -- 记录数
,round(sum(#{COVERAGE_TYPE}_RSRP_#{THRESHOLD}_Cnt)*100/sum(#{COVERAGE_TYPE}_RSRP_140_Cnt), 2) RSRP_rate  -- 覆盖率
,sum(#{COVERAGE_TYPE}_RSRP_ENB_Cnt) ENB_Cnt   -- 基站数
,sum(#{COVERAGE_TYPE}_RSRP_CELL_Cnt) CELL_Cnt  -- 扇区数
from noce.FRT_MRO_ALL_YF_#{TABLE}
where #{T_PARTITION_VAR} = #{END_TIME}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{FACTORY_CONDITION}
and #{CITY} <> ''
group by #{CITY},AGPS_TYPE
order by #{CITY},AGPS_TYPE
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSatCellDownload" description="扇区MR统计图数据导出">
<![CDATA[
select a.#{T_PARTITION_VAR} -- 日期
,'#{COVERAGE_TYPE}' as COVERAGE_TYPE
,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum -- AGPS-MR覆盖记录数
,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum -- 全量MR覆盖记录数
,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum -- AGPS-MR覆盖#{THRESHOLD}记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_95_AGPS_rate -- AGPS-MR 95覆盖率
,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_sum -- 全量MR覆盖95记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_95_rate -- 全量MR 95覆盖率

,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum -- AGPS-MR覆盖100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_100_AGPS_rate -- AGPS-MR 100覆盖率
,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_sum -- 全量MR覆盖100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_100_rate -- 全量MR 100覆盖率

,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum -- AGPS-MR覆盖105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_105_AGPS_rate -- AGPS-MR 105覆盖率
,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_sum -- 全量MR覆盖105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_105_rate -- 全量MR 105覆盖率

,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum -- AGPS-MR覆盖110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_110_AGPS_rate -- AGPS-MR 110覆盖率
,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_sum -- 全量MR覆盖110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_110_rate -- 全量MR 110覆盖率

,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum -- AGPS-MR覆盖115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_115_AGPS_rate -- AGPS-MR 115覆盖率
,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_sum -- 全量MR覆盖115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_115_rate -- 全量MR 115覆盖率

,a.#{COVERAGE_TYPE}_RSRP_ENB_Cnt_AGPS_sum  -- AGPS-MR 基站数
,a.#{COVERAGE_TYPE}_RSRP_ENB_Cnt_sum  -- 全量MR 基站数
,a.#{COVERAGE_TYPE}_RSRP_CELL_Cnt_AGPS_sum  -- AGPS-MR 扇区数
,a.#{COVERAGE_TYPE}_RSRP_CELL_Cnt_sum  -- 全量MR 扇区数

from
(select #{T_PARTITION_VAR}
,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end ) as #{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_140_Cnt_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_ENB_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_ENB_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_ENB_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_ENB_Cnt_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_CELL_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_CELL_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_CELL_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_CELL_Cnt_sum

from noce.FRT_MRO_ALL_YF_#{TABLE}
where #{T_PARTITION_VAR} between #{START_TIME} and #{END_TIME}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{FACTORY_CONDITION}
group by #{T_PARTITION_VAR}
) a
order by a.#{T_PARTITION_VAR}

]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSatCellImg_city_download" description="扇区MR区域统计图数据导出">
<![CDATA[
select a.#{CITY} -- 地市
,'#{COVERAGE_TYPE}' as COVERAGE_TYPE
,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum -- AGPS-MR覆盖记录数
,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum -- 全量MR覆盖记录数
,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum -- AGPS-MR覆盖#{THRESHOLD}记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_95_AGPS_rate -- AGPS-MR 95覆盖率
,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_sum -- 全量MR覆盖95记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_95_rate -- 全量MR 95覆盖率

,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum -- AGPS-MR覆盖100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_100_AGPS_rate -- AGPS-MR 100覆盖率
,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_sum -- 全量MR覆盖100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_100_rate -- 全量MR 100覆盖率

,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum -- AGPS-MR覆盖105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_105_AGPS_rate -- AGPS-MR 105覆盖率
,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_sum -- 全量MR覆盖105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_105_rate -- 全量MR 105覆盖率

,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum -- AGPS-MR覆盖110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_110_AGPS_rate -- AGPS-MR 110覆盖率
,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_sum -- 全量MR覆盖110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_110_rate -- 全量MR 110覆盖率

,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum -- AGPS-MR覆盖115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_115_AGPS_rate -- AGPS-MR 115覆盖率
,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_sum -- 全量MR覆盖115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_115_rate -- 全量MR 115覆盖率

,a.#{COVERAGE_TYPE}_RSRP_ENB_Cnt_AGPS_sum  -- AGPS-MR 基站数
,a.#{COVERAGE_TYPE}_RSRP_ENB_Cnt_sum  -- 全量MR 基站数
,a.#{COVERAGE_TYPE}_RSRP_CELL_Cnt_AGPS_sum  -- AGPS-MR 扇区数
,a.#{COVERAGE_TYPE}_RSRP_CELL_Cnt_sum  -- 全量MR 扇区数

from
(select #{CITY}
,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end ) as #{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_140_Cnt_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_ENB_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_ENB_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_ENB_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_ENB_Cnt_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_CELL_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_CELL_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_CELL_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_CELL_Cnt_sum


from noce.FRT_MRO_ALL_YF_#{TABLE}
where #{T_PARTITION_VAR} = #{END_TIME}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{FACTORY_CONDITION}
and #{CITY} <> ''
group by #{CITY}
) a
order by a.#{CITY};
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSatCellTab_cell" description="扇区MR统计表">
<![CDATA[
select CITY
,COUNTRY
,MKTCENTER
,eNodeB_ID
,CELL_ID
,CELL_NAME
,factory
,sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ) as BEST_RSRP_140_Cnt_1
,round(sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Sum else 0 end )/sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ),2) as BEST_RSRP_140_Avg_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_95_Cnt else 0 end ) as BEST_RSRP_95_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_RSRP_95_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_95_rate_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_100_Cnt else 0 end ) as BEST_RSRP_100_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_RSRP_100_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_100_rate_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_105_Cnt else 0 end ) as BEST_RSRP_105_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_RSRP_105_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_105_rate_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_110_Cnt else 0 end ) as BEST_RSRP_110_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_RSRP_110_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_110_rate_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_115_Cnt else 0 end ) as BEST_RSRP_115_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_RSRP_115_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_115_rate_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_105_GRID_Cnt else 0 end ) as BEST_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_140_GRID_Cnt else 0 end ) as BEST_RSRP_140_GRID_Cnt_1
,round(sum(case AGPS_TYPE when 1 then BEST_RSRP_105_GRID_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_RSRP_140_GRID_Cnt else 0 end ), 2) as BEST_RSRP_GRID_Avg_1

,sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_Cnt else 0 end ) as BEST_SC_RSRP_140_Cnt_1
,round(sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_Sum else 0 end )/sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_Cnt else 0 end ),2) as BEST_SC_RSRP_140_Avg_1
,sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_95_Cnt else 0 end ) as BEST_SC_RSRP_95_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_95_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_95_rate_1
,sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_100_Cnt else 0 end ) as BEST_SC_RSRP_100_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_100_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_100_rate_1
,sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_105_Cnt else 0 end ) as BEST_SC_RSRP_105_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_105_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_105_rate_1
,sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_110_Cnt else 0 end ) as BEST_SC_RSRP_110_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_110_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_110_rate_1
,sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_115_Cnt else 0 end ) as BEST_SC_RSRP_115_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_115_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_115_rate_1
,sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_105_GRID_Cnt else 0 end ) as BEST_SC_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_GRID_Cnt else 0 end ) as BEST_SC_RSRP_140_GRID_Cnt_1
,round(sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_105_GRID_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_GRID_Cnt else 0 end ), 2) as BEST_SC_RSRP_GRID_Avg_1


,sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ) as SC_RSRP_140_Cnt_1
,round(sum(case AGPS_TYPE when 1 then SC_RSRP_140_Sum else 0 end )/sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ),2) as SC_RSRP_140_Avg_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_95_Cnt else 0 end ) as SC_RSRP_95_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then SC_RSRP_95_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_95_rate_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_100_Cnt else 0 end ) as SC_RSRP_100_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then SC_RSRP_100_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_100_rate_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_105_Cnt else 0 end ) as SC_RSRP_105_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then SC_RSRP_105_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_105_rate_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_110_Cnt else 0 end ) as SC_RSRP_110_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then SC_RSRP_110_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_110_rate_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_115_Cnt else 0 end ) as SC_RSRP_115_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then SC_RSRP_115_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_115_rate_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_105_GRID_Cnt else 0 end ) as SC_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_140_GRID_Cnt else 0 end ) as SC_RSRP_140_GRID_Cnt_1
,round(sum(case AGPS_TYPE when 1 then SC_RSRP_105_GRID_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then SC_RSRP_140_GRID_Cnt else 0 end ), 2) as SC_RSRP_GRID_Avg_1


,sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ) as BEST_RSRP_140_Cnt_0
,round(sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Sum else 0 end )/sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ),2) as BEST_RSRP_140_Avg_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_95_Cnt else 0 end ) as BEST_RSRP_95_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_RSRP_95_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_95_rate_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_100_Cnt else 0 end ) as BEST_RSRP_100_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_RSRP_100_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_100_rate_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_105_Cnt else 0 end ) as BEST_RSRP_105_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_RSRP_105_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_105_rate_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_110_Cnt else 0 end ) as BEST_RSRP_110_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_RSRP_110_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_110_rate_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_115_Cnt else 0 end ) as BEST_RSRP_115_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_RSRP_115_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_115_rate_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_105_GRID_Cnt else 0 end ) as BEST_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_140_GRID_Cnt else 0 end ) as BEST_RSRP_140_GRID_Cnt_0
,round(sum(case AGPS_TYPE when 0 then BEST_RSRP_105_GRID_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_RSRP_140_GRID_Cnt else 0 end ), 2) as BEST_RSRP_GRID_Avg_0

,sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_Cnt else 0 end ) as BEST_SC_RSRP_140_Cnt_0
,round(sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_Sum else 0 end )/sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_Cnt else 0 end ),2) as BEST_SC_RSRP_140_Avg_0
,sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_95_Cnt else 0 end ) as BEST_SC_RSRP_95_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_95_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_95_rate_0
,sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_100_Cnt else 0 end ) as BEST_SC_RSRP_100_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_100_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_100_rate_0
,sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_105_Cnt else 0 end ) as BEST_SC_RSRP_105_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_105_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_105_rate_0
,sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_110_Cnt else 0 end ) as BEST_SC_RSRP_110_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_110_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_110_rate_0
,sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_115_Cnt else 0 end ) as BEST_SC_RSRP_115_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_115_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_115_rate_0
,sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_105_GRID_Cnt else 0 end ) as BEST_SC_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_GRID_Cnt else 0 end ) as BEST_SC_RSRP_140_GRID_Cnt_0
,round(sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_105_GRID_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_GRID_Cnt else 0 end ), 2) as BEST_SC_RSRP_GRID_Avg_0

,sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ) as SC_RSRP_140_Cnt_0
,round(sum(case AGPS_TYPE when 0 then SC_RSRP_140_Sum else 0 end )/sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ),2) as SC_RSRP_140_Avg_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_95_Cnt else 0 end ) as SC_RSRP_95_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then SC_RSRP_95_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_95_rate_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_100_Cnt else 0 end ) as SC_RSRP_100_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then SC_RSRP_100_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_100_rate_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_105_Cnt else 0 end ) as SC_RSRP_105_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then SC_RSRP_105_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_105_rate_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_110_Cnt else 0 end ) as SC_RSRP_110_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then SC_RSRP_110_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_110_rate_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_115_Cnt else 0 end ) as SC_RSRP_115_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then SC_RSRP_115_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_115_rate_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_105_GRID_Cnt else 0 end ) as SC_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_140_GRID_Cnt else 0 end ) as SC_RSRP_140_GRID_Cnt_0
,round(sum(case AGPS_TYPE when 0 then SC_RSRP_105_GRID_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then SC_RSRP_140_GRID_Cnt else 0 end ), 2) as SC_RSRP_GRID_Avg_0
from noce.FRT_MRO_ALL_CELL_#{TABLE}
where
#{T_PARTITION_VAR}=#{endTime}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
group by
eNodeB_ID
,CELL_ID
]]>
</sqlTemplate>


<sqlTemplate id="StatisticsDL_04_MRSatTab4Cell_count" description="扇区MR统计表总数">
<![CDATA[

select count(1) count
from
(select *
from noce.FRT_MRO_ALL_CELL_#{TABLE}
where
#{T_PARTITION_VAR}=#{endTime}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
group by
eNodeB_ID
,CELL_ID
) a
]]>
</sqlTemplate>


<sqlTemplate id="StatisticsDL_MRSatCellTab_mkt" description="扇区MR统计表(按营服);">
<![CDATA[
select CITY
,CITY_ID
,COUNTRY
,COUNTRY_ID
,MKTCENTER
,MKTCENTER_ID

,sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ) as BEST_RSRP_140_Cnt_1
,round(sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Sum else 0 end )/sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ),2) as BEST_RSRP_140_Avg_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_95_Cnt else 0 end ) as BEST_RSRP_95_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_RSRP_95_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_95_rate_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_100_Cnt else 0 end ) as BEST_RSRP_100_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_RSRP_100_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_100_rate_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_105_Cnt else 0 end ) as BEST_RSRP_105_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_RSRP_105_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_105_rate_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_110_Cnt else 0 end ) as BEST_RSRP_110_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_RSRP_110_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_110_rate_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_115_Cnt else 0 end ) as BEST_RSRP_115_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_RSRP_115_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_115_rate_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_105_GRID_Cnt else 0 end ) as BEST_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_140_GRID_Cnt else 0 end ) as BEST_RSRP_140_GRID_Cnt_1
,round(sum(case AGPS_TYPE when 1 then BEST_RSRP_105_GRID_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_RSRP_140_GRID_Cnt else 0 end ), 2) as BEST_RSRP_GRID_Avg_1

,sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_Cnt else 0 end ) as BEST_SC_RSRP_140_Cnt_1
,round(sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_Sum else 0 end )/sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_Cnt else 0 end ),2) as BEST_SC_RSRP_140_Avg_1
,sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_95_Cnt else 0 end ) as BEST_SC_RSRP_95_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_95_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_95_rate_1
,sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_100_Cnt else 0 end ) as BEST_SC_RSRP_100_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_100_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_100_rate_1
,sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_105_Cnt else 0 end ) as BEST_SC_RSRP_105_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_105_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_105_rate_1
,sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_110_Cnt else 0 end ) as BEST_SC_RSRP_110_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_110_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_110_rate_1
,sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_115_Cnt else 0 end ) as BEST_SC_RSRP_115_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_115_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_115_rate_1
,sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_105_GRID_Cnt else 0 end ) as BEST_SC_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_GRID_Cnt else 0 end ) as BEST_SC_RSRP_140_GRID_Cnt_1
,round(sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_105_GRID_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then BEST_SC_RSRP_140_GRID_Cnt else 0 end ), 2) as BEST_SC_RSRP_GRID_Avg_1


,sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ) as SC_RSRP_140_Cnt_1
,round(sum(case AGPS_TYPE when 1 then SC_RSRP_140_Sum else 0 end )/sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ),2) as SC_RSRP_140_Avg_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_95_Cnt else 0 end ) as SC_RSRP_95_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then SC_RSRP_95_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_95_rate_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_100_Cnt else 0 end ) as SC_RSRP_100_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then SC_RSRP_100_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_100_rate_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_105_Cnt else 0 end ) as SC_RSRP_105_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then SC_RSRP_105_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_105_rate_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_110_Cnt else 0 end ) as SC_RSRP_110_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then SC_RSRP_110_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_110_rate_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_115_Cnt else 0 end ) as SC_RSRP_115_Cnt_1
,CONCAT(round(sum(case AGPS_TYPE when 1 then SC_RSRP_115_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_115_rate_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_105_GRID_Cnt else 0 end ) as SC_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_140_GRID_Cnt else 0 end ) as SC_RSRP_140_GRID_Cnt_1
,round(sum(case AGPS_TYPE when 1 then SC_RSRP_105_GRID_Cnt else 0 end )*100/sum(case AGPS_TYPE when 1 then SC_RSRP_140_GRID_Cnt else 0 end ), 2) as SC_RSRP_GRID_Avg_1


,sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ) as BEST_RSRP_140_Cnt_0
,round(sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Sum else 0 end )/sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ),2) as BEST_RSRP_140_Avg_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_95_Cnt else 0 end ) as BEST_RSRP_95_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_RSRP_95_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_95_rate_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_100_Cnt else 0 end ) as BEST_RSRP_100_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_RSRP_100_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_100_rate_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_105_Cnt else 0 end ) as BEST_RSRP_105_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_RSRP_105_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_105_rate_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_110_Cnt else 0 end ) as BEST_RSRP_110_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_RSRP_110_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_110_rate_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_115_Cnt else 0 end ) as BEST_RSRP_115_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_RSRP_115_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_RSRP_115_rate_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_105_GRID_Cnt else 0 end ) as BEST_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_140_GRID_Cnt else 0 end ) as BEST_RSRP_140_GRID_Cnt_0
,round(sum(case AGPS_TYPE when 0 then BEST_RSRP_105_GRID_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_RSRP_140_GRID_Cnt else 0 end ), 2) as BEST_RSRP_GRID_Avg_0

,sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_Cnt else 0 end ) as BEST_SC_RSRP_140_Cnt_0
,round(sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_Sum else 0 end )/sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_Cnt else 0 end ),2) as BEST_SC_RSRP_140_Avg_0
,sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_95_Cnt else 0 end ) as BEST_SC_RSRP_95_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_95_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_95_rate_0
,sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_100_Cnt else 0 end ) as BEST_SC_RSRP_100_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_100_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_100_rate_0
,sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_105_Cnt else 0 end ) as BEST_SC_RSRP_105_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_105_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_105_rate_0
,sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_110_Cnt else 0 end ) as BEST_SC_RSRP_110_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_110_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_110_rate_0
,sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_115_Cnt else 0 end ) as BEST_SC_RSRP_115_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_115_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_Cnt else 0 end ), 2),'%') as BEST_SC_RSRP_115_rate_0
,sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_105_GRID_Cnt else 0 end ) as BEST_SC_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_GRID_Cnt else 0 end ) as BEST_SC_RSRP_140_GRID_Cnt_0
,round(sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_105_GRID_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then BEST_SC_RSRP_140_GRID_Cnt else 0 end ), 2) as BEST_SC_RSRP_GRID_Avg_0

,sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ) as SC_RSRP_140_Cnt_0
,round(sum(case AGPS_TYPE when 0 then SC_RSRP_140_Sum else 0 end )/sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ),2) as SC_RSRP_140_Avg_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_95_Cnt else 0 end ) as SC_RSRP_95_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then SC_RSRP_95_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_95_rate_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_100_Cnt else 0 end ) as SC_RSRP_100_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then SC_RSRP_100_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_100_rate_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_105_Cnt else 0 end ) as SC_RSRP_105_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then SC_RSRP_105_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_105_rate_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_110_Cnt else 0 end ) as SC_RSRP_110_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then SC_RSRP_110_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_110_rate_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_115_Cnt else 0 end ) as SC_RSRP_115_Cnt_0
,CONCAT(round(sum(case AGPS_TYPE when 0 then SC_RSRP_115_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ), 2),'%') as SC_RSRP_115_rate_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_105_GRID_Cnt else 0 end ) as SC_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_140_GRID_Cnt else 0 end ) as SC_RSRP_140_GRID_Cnt_0
,round(sum(case AGPS_TYPE when 0 then SC_RSRP_105_GRID_Cnt else 0 end )*100/sum(case AGPS_TYPE when 0 then SC_RSRP_140_GRID_Cnt else 0 end ), 2) as SC_RSRP_GRID_Avg_0
from noce.FRT_MRO_ALL_CELL_#{TABLE}
where
#{T_PARTITION_VAR}=#{endTime}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
group by CITY
,CITY_ID
,COUNTRY
,COUNTRY_ID
,MKTCENTER
,MKTCENTER_ID
]]>
</sqlTemplate>


<sqlTemplate id="StatisticsDL_MRSatCellTab_mkt_cnt" description="扇区MR统计表(按营服)表格总数">
<![CDATA[
select COUNT(1) count FROM(
SELECT * from noce.FRT_MRO_ALL_CELL_#{TABLE}
where
#{T_PARTITION_VAR}=#{endTime}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
group by CITY
,CITY_ID
,COUNTRY
,COUNTRY_ID
,MKTCENTER
,MKTCENTER_ID
)a
]]>
</sqlTemplate>


<sqlTemplate id="StatisticsDL_MRSatCellTab_mkt_gdkw" description="扇区勘误列表">
<![CDATA[
select
CITY	,   --  地市名称
CITY_ID	, -- 地市ID
COUNTRY	, -- 区县
COUNTRY_ID	, -- 区县ID
MKTCENTER	, -- 营服中心
MKTCENTER_ID	, -- 营服中心ID
ENODEB_ID	, -- 基站ID
ENODEB_NAME	, -- 基站名称
CELL_ID	, -- 小区ID
CELL_NAME	, -- 小区名称
BS_VENDOR	, -- 设备厂商
LOCATION_GPS	, -- 基站位置GPS
PRED_LOCATION_GPS	, -- 预测GPS位置
PRED_LOCATION_BAIDU	, -- 预测百度地图位置
PRED_DISTANCE	, -- 预测位置相差距离
SURPORT_NUMBER,	 -- 支持预测的MR条数
AGPS_MR_DIST_AVG,   -- 包含AGPS的MR条数
AGPS_MR_COUNT,   -- 包含AGPS的MR与小区平均距离
AGPS_MR_DIST_TA,   -- 包含AGPS的MR与小区每TA平均距离
ANT_AZIMUTH,	-- 方位角
PRED_AZIMUTH,   -- 预测角度
PRED_AZIMUTH_DIFF,   -- 偏离角度
SURP_AZIMUTH_COUNT,   -- 支持方位角预测条数
LTE_TO_3G_TOT,   -- 4G切3G总次数
Flow_4G_TOT,   -- 4G总流量(MB)
CONCAT(round(CE_GOOD_RATIO_AVG*100,2),'%'),   -- 感知优良率按天平均值
User_4G_AVG,   -- AGPS用户数按天平均值
round(MIN_USEREX_UPAVGRATE,2),   -- 最小用户体验上行平均速率（Mbps）
round(MIN_USEREX_DWAVGRATE,2),   -- 最小用户体验下行平均速率（Mbps）
CASE IS_ANT_CONN_ABNOR
    WHEN 0 THEN '否'
    WHEN 1 THEN '是'
END AS IS_ANT_CONN_ABNOR, -- 是否天馈接反
STATION_SPACING,   -- 站间距
SPACING_AGPS_MRNUM,   -- 各站间距AGPS数量
LTE_USER_COUNT   -- 全量4G用户数

from FRT_AGPS_PC_ENB_D
where PRED_DISTANCE > 0
and #{T_PARTITION_VAR}=#{endTime}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
ORDER BY PRED_DISTANCE desc
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSatCellTab_mkt_gdkw_cnt" description="扇区勘误列表总数">
<![CDATA[
select
COUNT(1) count
from FRT_AGPS_PC_ENB_D
where PRED_DISTANCE > 0
and #{T_PARTITION_VAR}=#{endTime}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSatAllAreaImg" description="全区域MR统计图">
<![CDATA[
select #{T_PARTITION_VAR}
,AGPS_TYPE
,sum(#{COVERAGE_TYPE}_RSRP_140_Cnt) as RSRP_cnt
,round(sum(#{COVERAGE_TYPE}_RSRP_#{THRESHOLD}_Cnt)*100/sum(#{COVERAGE_TYPE}_RSRP_140_Cnt), 2) as RSRP_rate
from noce.FRT_MRO_ALL_MKT_#{TABLE}
where #{T_PARTITION_VAR} between #{START_TIME} and #{END_TIME}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
group by #{T_PARTITION_VAR},AGPS_TYPE
order by #{T_PARTITION_VAR},AGPS_TYPE
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSatAllAreaImg_city" description="全区域MR区域统计图">
<![CDATA[
select #{CITY}
,AGPS_TYPE
,sum(#{COVERAGE_TYPE}_RSRP_140_Cnt) as RSRP_cnt -- 记录数
,round(sum(#{COVERAGE_TYPE}_RSRP_#{THRESHOLD}_Cnt)*100/sum(#{COVERAGE_TYPE}_RSRP_140_Cnt), 2) as RSRP_rate  -- 覆盖率
from noce.FRT_MRO_ALL_MKT_#{TABLE}
where #{T_PARTITION_VAR} = #{END_TIME}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
and #{CITY} <> ''
group by #{CITY},AGPS_TYPE
order by #{CITY},AGPS_TYPE

]]>
</sqlTemplate>


<sqlTemplate id="StatisticsDL_MRSatAllAreadownload" description="全区域MR导出">
<![CDATA[
select a.#{T_PARTITION_VAR} -- 日期
,'#{COVERAGE_TYPE}' as COVERAGE_TYPE

,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum -- AGPS-MR覆盖记录数
,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum -- 全量MR覆盖记录数

,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum -- INDOOR-MR覆盖记录数
,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖记录数

,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum -- AGPS-MR覆盖#{THRESHOLD}记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_95_AGPS_rate -- AGPS-MR 95覆盖率
,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_sum -- 全量MR覆盖95记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_95_rate -- 全量MR 95覆盖率

,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_INDOOR_sum -- INDOOR-MR覆盖 95记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_95_INDOOR_rate -- INDOOR-MR 95覆盖率
,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖95记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_95_OUTDOOR_rate -- OUTDOOR_MR 95覆盖率

,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum -- AGPS-MR覆盖100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_100_AGPS_rate -- AGPS-MR 100覆盖率
,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_sum -- 全量MR覆盖100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_100_rate -- 全量MR 100覆盖率

,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_INDOOR_sum -- INDOOR-MR覆盖 100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_100_INDOOR_rate -- INDOOR-MR 100覆盖率
,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_100_OUTDOOR_rate -- OUTDOOR_MR 100覆盖率

,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum -- AGPS-MR覆盖105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_105_AGPS_rate -- AGPS-MR 105覆盖率
,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_sum -- 全量MR覆盖105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_105_rate -- 全量MR 105覆盖率

,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_INDOOR_sum -- INDOOR-MR覆盖 105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_105_INDOOR_rate -- INDOOR-MR 105覆盖率
,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_105_OUTDOOR_rate -- OUTDOOR_MR 105覆盖率

,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum -- AGPS-MR覆盖110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_110_AGPS_rate -- AGPS-MR 110覆盖率
,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_sum -- 全量MR覆盖110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_110_rate -- 全量MR 110覆盖率

,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_INDOOR_sum -- INDOOR-MR覆盖 110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_110_INDOOR_rate -- INDOOR-MR 110覆盖率
,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_110_OUTDOOR_rate -- OUTDOOR_MR 110覆盖率

,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum -- AGPS-MR覆盖115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_115_AGPS_rate -- AGPS-MR 115覆盖率
,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_sum -- 全量MR覆盖115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_115_rate -- 全量MR 115覆盖率

,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_INDOOR_sum -- INDOOR-MR覆盖 115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_115_INDOOR_rate -- INDOOR-MR 115覆盖率
,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_115_OUTDOOR_rate -- OUTDOOR_MR 115覆盖率

from
(select #{T_PARTITION_VAR}
,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end ) as #{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_140_Cnt_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end ) as #{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end ) as #{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_OUTDOOR_sum


from noce.FRT_MRO_ALL_MKT_#{TABLE}
where #{T_PARTITION_VAR} between #{START_TIME} and #{END_TIME}

#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
group by #{T_PARTITION_VAR}
) a
order by a.#{T_PARTITION_VAR}
]]>
</sqlTemplate>



<sqlTemplate id="StatisticsDL_MRSatAllAreaImg_city_download" description="全区域MR区域导出">
<![CDATA[
select a.#{CITY} -- 地市
,'#{COVERAGE_TYPE}' as COVERAGE_TYPE

,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum -- AGPS-MR覆盖记录数
,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum -- 全量MR覆盖记录数

,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum -- INDOOR-MR覆盖记录数
,a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖记录数

,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum -- AGPS-MR覆盖#{THRESHOLD}记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_95_AGPS_rate -- AGPS-MR 95覆盖率
,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_sum -- 全量MR覆盖95记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_95_rate -- 全量MR 95覆盖率

,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_INDOOR_sum -- INDOOR-MR覆盖 95记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_95_INDOOR_rate -- INDOOR-MR 95覆盖率
,a.#{COVERAGE_TYPE}_RSRP_95_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖95记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_95_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_95_OUTDOOR_rate -- OUTDOOR_MR 95覆盖率

,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum -- AGPS-MR覆盖100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_100_AGPS_rate -- AGPS-MR 100覆盖率
,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_sum -- 全量MR覆盖100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_100_rate -- 全量MR 100覆盖率

,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_INDOOR_sum -- INDOOR-MR覆盖 100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_100_INDOOR_rate -- INDOOR-MR 100覆盖率
,a.#{COVERAGE_TYPE}_RSRP_100_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖100记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_100_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_100_OUTDOOR_rate -- OUTDOOR_MR 100覆盖率

,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum -- AGPS-MR覆盖105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_105_AGPS_rate -- AGPS-MR 105覆盖率
,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_sum -- 全量MR覆盖105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_105_rate -- 全量MR 105覆盖率

,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_INDOOR_sum -- INDOOR-MR覆盖 105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_105_INDOOR_rate -- INDOOR-MR 105覆盖率
,a.#{COVERAGE_TYPE}_RSRP_105_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖105记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_105_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_105_OUTDOOR_rate -- OUTDOOR_MR 105覆盖率

,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum -- AGPS-MR覆盖110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_110_AGPS_rate -- AGPS-MR 110覆盖率
,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_sum -- 全量MR覆盖110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_110_rate -- 全量MR 110覆盖率

,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_INDOOR_sum -- INDOOR-MR覆盖 110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_110_INDOOR_rate -- INDOOR-MR 110覆盖率
,a.#{COVERAGE_TYPE}_RSRP_110_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖110记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_110_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_110_OUTDOOR_rate -- OUTDOOR_MR 110覆盖率

,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum -- AGPS-MR覆盖115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_115_AGPS_rate -- AGPS-MR 115覆盖率
,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_sum -- 全量MR覆盖115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_115_rate -- 全量MR 115覆盖率

,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_INDOOR_sum -- INDOOR-MR覆盖 115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_INDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum, 2),'%') as #{COVERAGE_TYPE}_RSRP_115_INDOOR_rate -- INDOOR-MR 115覆盖率
,a.#{COVERAGE_TYPE}_RSRP_115_Cnt_OUTDOOR_sum -- OUTDOOR-MR覆盖115记录数
,CONCAT(round(a.#{COVERAGE_TYPE}_RSRP_115_Cnt_OUTDOOR_sum*100/a.#{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum,2 ),'%') as #{COVERAGE_TYPE}_RSRP_115_OUTDOOR_rate -- OUTDOOR_MR 115覆盖率

from
(select #{CITY}
,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end ) as #{COVERAGE_TYPE}_RSRP_140_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_140_Cnt_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end ) as #{COVERAGE_TYPE}_RSRP_140_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_140_Cnt else 0 end ) as #{COVERAGE_TYPE}_RSRP_140_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_95_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_95_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_100_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_100_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_105_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_105_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_110_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_110_Cnt_OUTDOOR_sum

,sum(case AGPS_TYPE when 1 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_AGPS_sum
,sum(case AGPS_TYPE when 0 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_sum

,sum(case AGPS_TYPE when 2 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_INDOOR_sum
,sum(case AGPS_TYPE when 3 then #{COVERAGE_TYPE}_RSRP_115_Cnt else 0 end) as #{COVERAGE_TYPE}_RSRP_115_Cnt_OUTDOOR_sum


from noce.FRT_MRO_ALL_MKT_#{TABLE}
where #{T_PARTITION_VAR} = #{END_TIME}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
and #{CITY} <> ''
group by #{CITY}
) a
order by a.#{CITY};
]]>
</sqlTemplate>



<sqlTemplate id="StatisticsDL_MRSatAllAreaTab" description="全区域MR统计表格">
<![CDATA[
    select CITY
,COUNTRY
,MKTCENTER
,BEST_RSRP_140_Cnt
,BEST_RSRP_140_Avg
,BEST_RSRP_95_Cnt
,CONCAT(round(BEST_RSRP_95_Cnt*100/BEST_RSRP_140_Cnt, 2),'%') as BEST_RSRP_95_rate
,BEST_RSRP_100_Cnt
,CONCAT(round(BEST_RSRP_100_Cnt*100/BEST_RSRP_140_Cnt, 2),'%') as BEST_RSRP_100_rate
,BEST_RSRP_105_Cnt
,CONCAT(round(BEST_RSRP_105_Cnt*100/BEST_RSRP_140_Cnt, 2),'%') as BEST_RSRP_105_rate
,BEST_RSRP_110_Cnt
,CONCAT(round(BEST_RSRP_110_Cnt*100/BEST_RSRP_140_Cnt, 2),'%') as BEST_RSRP_110_rate
,BEST_RSRP_115_Cnt
,CONCAT(round(BEST_RSRP_115_Cnt*100/BEST_RSRP_140_Cnt, 2),'%') as BEST_RSRP_115_rate
,BEST_RSRP_140_GRID_Cnt-BEST_RSRP_105_GRID_Cnt
,BEST_RSRP_140_GRID_Cnt
,round((BEST_RSRP_140_GRID_Cnt-BEST_RSRP_105_GRID_Cnt)*100/BEST_RSRP_140_GRID_Cnt, 2) as BEST_RSRP_GRID_Cnt_Avg

,SC_RSRP_140_Cnt
,SC_RSRP_140_Avg
,SC_RSRP_95_Cnt
,CONCAT(round(SC_RSRP_95_Cnt*100/SC_RSRP_140_Cnt, 2),'%') as SC_RSRP_95_rate
,SC_RSRP_100_Cnt
,CONCAT(round(SC_RSRP_100_Cnt*100/SC_RSRP_140_Cnt, 2),'%') as SC_RSRP_100_rate
,SC_RSRP_105_Cnt
,CONCAT(round(SC_RSRP_105_Cnt*100/SC_RSRP_140_Cnt, 2),'%') as SC_RSRP_105_rate
,SC_RSRP_110_Cnt
,CONCAT(round(SC_RSRP_110_Cnt*100/SC_RSRP_140_Cnt, 2),'%') as SC_RSRP_110_rate
,SC_RSRP_115_Cnt
,CONCAT(round(SC_RSRP_115_Cnt*100/SC_RSRP_140_Cnt, 2),'%') as SC_RSRP_115_rate
,SC_RSRP_140_GRID_Cnt-SC_RSRP_105_GRID_Cnt
,SC_RSRP_140_GRID_Cnt
,round((SC_RSRP_140_GRID_Cnt-SC_RSRP_105_GRID_Cnt)*100/SC_RSRP_140_GRID_Cnt, 2) as SC_RSRP_GRID_Cnt_Avg

,F800M_RSRP_140_Cnt
,F800M_RSRP_140_Avg
,F800M_RSRP_95_Cnt
,CONCAT(round(F800M_RSRP_95_Cnt*100/F800M_RSRP_140_Cnt, 2),'%') as F800M_RSRP_95_rate
,F800M_RSRP_100_Cnt
,CONCAT(round(F800M_RSRP_100_Cnt*100/F800M_RSRP_140_Cnt, 2),'%') as F800M_RSRP_100_rate
,F800M_RSRP_105_Cnt
,CONCAT(round(F800M_RSRP_105_Cnt*100/F800M_RSRP_140_Cnt, 2),'%') as F800M_RSRP_105_rate
,F800M_RSRP_110_Cnt
,CONCAT(round(F800M_RSRP_110_Cnt*100/F800M_RSRP_140_Cnt, 2),'%') as F800M_RSRP_110_rate
,F800M_RSRP_115_Cnt
,CONCAT(round(F800M_RSRP_115_Cnt*100/F800M_RSRP_140_Cnt, 2),'%') as F800M_RSRP_115_rate
,F800M_RSRP_140_GRID_Cnt-F800M_RSRP_105_GRID_Cnt
,F800M_RSRP_140_GRID_Cnt
,round((F800M_RSRP_140_GRID_Cnt-F800M_RSRP_105_GRID_Cnt)*100/F800M_RSRP_140_GRID_Cnt, 2) as F800M_RSRP_GRID_Cnt_Avg

,F18G_RSRP_140_Cnt
,F18G_RSRP_140_Avg
,F18G_RSRP_95_Cnt
,CONCAT(round(F18G_RSRP_95_Cnt*100/F18G_RSRP_140_Cnt, 2),'%') as F18G_RSRP_95_rate
,F18G_RSRP_100_Cnt
,CONCAT(round(F18G_RSRP_100_Cnt*100/F18G_RSRP_140_Cnt, 2),'%') as F18G_RSRP_100_rate
,F18G_RSRP_105_Cnt
,CONCAT(round(F18G_RSRP_105_Cnt*100/F18G_RSRP_140_Cnt, 2),'%') as F18G_RSRP_105_rate
,F18G_RSRP_110_Cnt
,CONCAT(round(F18G_RSRP_110_Cnt*100/F18G_RSRP_140_Cnt, 2),'%') as F18G_RSRP_110_rate
,F18G_RSRP_115_Cnt
,CONCAT(round(F18G_RSRP_115_Cnt*100/F18G_RSRP_140_Cnt, 2),'%') as F18G_RSRP_115_rate
,F18G_RSRP_140_GRID_Cnt-F18G_RSRP_105_GRID_Cnt
,F18G_RSRP_140_GRID_Cnt
,round((F18G_RSRP_140_GRID_Cnt-F18G_RSRP_105_GRID_Cnt)*100/F18G_RSRP_140_GRID_Cnt, 2) as F18G_RSRP_GRID_Cnt_Avg

,F21G_RSRP_140_Cnt
,F21G_RSRP_140_Avg
,F21G_RSRP_95_Cnt
,CONCAT(round(F21G_RSRP_95_Cnt*100/F21G_RSRP_140_Cnt, 2),'%') as F21G_RSRP_95_rate
,F21G_RSRP_100_Cnt
,CONCAT(round(F21G_RSRP_100_Cnt*100/F21G_RSRP_140_Cnt, 2),'%') as F21G_RSRP_100_rate
,F21G_RSRP_105_Cnt
,CONCAT(round(F21G_RSRP_105_Cnt*100/F21G_RSRP_140_Cnt, 2),'%') as F21G_RSRP_105_rate
,F21G_RSRP_110_Cnt
,CONCAT(round(F21G_RSRP_110_Cnt*100/F21G_RSRP_140_Cnt, 2),'%') as F21G_RSRP_110_rate
,F21G_RSRP_115_Cnt
,CONCAT(round(F21G_RSRP_115_Cnt*100/F21G_RSRP_140_Cnt, 2),'%') as F21G_RSRP_115_rate
,F21G_RSRP_140_GRID_Cnt-F21G_RSRP_105_GRID_Cnt
,F21G_RSRP_140_GRID_Cnt
,round((F21G_RSRP_140_GRID_Cnt-F21G_RSRP_105_GRID_Cnt)*100/F21G_RSRP_140_GRID_Cnt, 2) as F21G_RSRP_GRID_Cnt_Avg

,F26G_RSRP_140_Cnt
,F26G_RSRP_140_Avg
,F26G_RSRP_95_Cnt
,CONCAT(round(F26G_RSRP_95_Cnt*100/F26G_RSRP_140_Cnt, 2),'%') as F26G_RSRP_95_rate
,F26G_RSRP_100_Cnt
,CONCAT(round(F26G_RSRP_100_Cnt*100/F26G_RSRP_140_Cnt, 2),'%') as F26G_RSRP_100_rate
,F26G_RSRP_105_Cnt
,CONCAT(round(F26G_RSRP_105_Cnt*100/F26G_RSRP_140_Cnt, 2),'%') as F26G_RSRP_105_rate
,F26G_RSRP_110_Cnt
,CONCAT(round(F26G_RSRP_110_Cnt*100/F26G_RSRP_140_Cnt, 2),'%') as F26G_RSRP_110_rate
,F26G_RSRP_115_Cnt
,CONCAT(round(F26G_RSRP_115_Cnt*100/F26G_RSRP_140_Cnt, 2),'%') as F26G_RSRP_115_rate
,F26G_RSRP_140_GRID_Cnt-F26G_RSRP_105_GRID_Cnt
,F26G_RSRP_140_GRID_Cnt
,round((F26G_RSRP_140_GRID_Cnt-F26G_RSRP_105_GRID_Cnt)*100/F26G_RSRP_140_GRID_Cnt, 2) as F26G_RSRP_GRID_Cnt_Avg

from noce.FRT_MRO_ALL_MKT_#{TABLE}
where #{T_PARTITION_VAR}=#{endTime}
and AGPS_TYPE=#{AGPS_TYPE}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_06_MRSatAllAreaTab_count" description="全区域MR统计表格总数">
	<![CDATA[
        select count(1) count
        from noce.FRT_MRO_ALL_MKT_#{TABLE}
        where #{T_PARTITION_VAR}=#{endTime}
        and AGPS_TYPE=#{AGPS_TYPE}
        #{CITY_CONDITION}
        #{COUNTRY_CONDITION}
        #{MKTCENTER_CONDITION}

    ]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSatSenceTab_2" description="关注区域MR统计表格">
<![CDATA[

SELECT	a.CITY
,a.COUNTRY
,a.MKTCENTER
,a.`Object_ID`
,a.`Object_Name`

,a.BEST_RSRP_140_Cnt_1
,round(a.BEST_RSRP_140_Sum_1/a.BEST_RSRP_140_Cnt_1, 2) as BEST_RSRP_140_Avg_1
,a.BEST_RSRP_95_Cnt_1
,CONCAT(round(a.BEST_RSRP_95_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_95_rate_1
,a.BEST_RSRP_100_Cnt_1
,CONCAT(round(a.BEST_RSRP_100_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_100_rate_1
,a.BEST_RSRP_105_Cnt_1
,CONCAT(round(a.BEST_RSRP_105_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_105_rate_1
,a.BEST_RSRP_110_Cnt_1
,CONCAT(round(a.BEST_RSRP_110_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_110_rate_1
,a.BEST_RSRP_115_Cnt_1
,CONCAT(round(a.BEST_RSRP_115_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_115_rate_1
,a.BEST_RSRP_140_GRID_Cnt_1-a.BEST_RSRP_105_GRID_Cnt_1
,a.BEST_RSRP_140_GRID_Cnt_1
,round((a.BEST_RSRP_140_GRID_Cnt_1-a.BEST_RSRP_105_GRID_Cnt_1)*100/a.BEST_RSRP_140_GRID_Cnt_1, 2) as BEST_RSRP_GRID_Avg_1

,a.SC_RSRP_140_Cnt_1
,round(a.SC_RSRP_140_Sum_1/a.SC_RSRP_140_Cnt_1, 2) as SC_RSRP_140_Avg_1
,a.SC_RSRP_95_Cnt_1
,CONCAT(round(a.SC_RSRP_95_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_95_rate_1
,a.SC_RSRP_100_Cnt_1
,CONCAT(round(a.SC_RSRP_100_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_100_rate_1
,a.SC_RSRP_105_Cnt_1
,CONCAT(round(a.SC_RSRP_105_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_105_rate_1
,a.SC_RSRP_110_Cnt_1
,CONCAT(round(a.SC_RSRP_110_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_110_rate_1
,a.SC_RSRP_115_Cnt_1
,CONCAT(round(a.SC_RSRP_115_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_115_rate_1
,a.SC_RSRP_140_GRID_Cnt_1-a.SC_RSRP_105_GRID_Cnt_1
,a.SC_RSRP_140_GRID_Cnt_1
,round((a.SC_RSRP_140_GRID_Cnt_1-a.SC_RSRP_105_GRID_Cnt_1)*100/a.SC_RSRP_140_GRID_Cnt_1, 2) as SC_RSRP_GRID_Avg_1

,a.F800M_RSRP_140_Cnt_1
,round(a.F800M_RSRP_140_Sum_1/a.F800M_RSRP_140_Cnt_1, 2) as F800M_RSRP_140_Avg_1
,a.F800M_RSRP_95_Cnt_1
,CONCAT(round(a.F800M_RSRP_95_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_95_rate_1
,a.F800M_RSRP_100_Cnt_1
,CONCAT(round(a.F800M_RSRP_100_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_100_rate_1
,a.F800M_RSRP_105_Cnt_1
,CONCAT(round(a.F800M_RSRP_105_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_105_rate_1
,a.F800M_RSRP_110_Cnt_1
,CONCAT(round(a.F800M_RSRP_110_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_110_rate_1
,a.F800M_RSRP_115_Cnt_1
,CONCAT(round(a.F800M_RSRP_115_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_115_rate_1
,a.F800M_RSRP_140_GRID_Cnt_1-a.F800M_RSRP_105_GRID_Cnt_1
,a.F800M_RSRP_140_GRID_Cnt_1
,round((a.F800M_RSRP_140_GRID_Cnt_1-a.F800M_RSRP_105_GRID_Cnt_1)*100/a.F800M_RSRP_140_GRID_Cnt_1, 2) as F800M_RSRP_GRID_Avg_1

,a.F18G_RSRP_140_Cnt_1
,round(a.F18G_RSRP_140_Sum_1/a.F18G_RSRP_140_Cnt_1, 2) as F18G_RSRP_140_Avg_1
,a.F18G_RSRP_95_Cnt_1
,CONCAT(round(a.F18G_RSRP_95_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_95_rate_1
,a.F18G_RSRP_100_Cnt_1
,CONCAT(round(a.F18G_RSRP_100_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_100_rate_1
,a.F18G_RSRP_105_Cnt_1
,CONCAT(round(a.F18G_RSRP_105_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_105_rate_1
,a.F18G_RSRP_110_Cnt_1
,CONCAT(round(a.F18G_RSRP_110_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_110_rate_1
,a.F18G_RSRP_115_Cnt_1
,CONCAT(round(a.F18G_RSRP_115_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_115_rate_1
,a.F18G_RSRP_140_GRID_Cnt_1-a.F18G_RSRP_105_GRID_Cnt_1
,a.F18G_RSRP_140_GRID_Cnt_1
,round((a.F18G_RSRP_140_GRID_Cnt_1-a.F18G_RSRP_105_GRID_Cnt_1)*100/a.F18G_RSRP_140_GRID_Cnt_1, 2) as F18G_RSRP_GRID_Avg_1

,a.F21G_RSRP_140_Cnt_1
,round(a.F21G_RSRP_140_Sum_1/a.F21G_RSRP_140_Cnt_1, 2) as F21G_RSRP_140_Avg_1
,a.F21G_RSRP_95_Cnt_1
,CONCAT(round(a.F21G_RSRP_95_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_95_rate_1
,a.F21G_RSRP_100_Cnt_1
,CONCAT(round(a.F21G_RSRP_100_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_100_rate_1
,a.F21G_RSRP_105_Cnt_1
,CONCAT(round(a.F21G_RSRP_105_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_105_rate_1
,a.F21G_RSRP_110_Cnt_1
,CONCAT(round(a.F21G_RSRP_110_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_110_rate_1
,a.F21G_RSRP_115_Cnt_1
,CONCAT(round(a.F21G_RSRP_115_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_115_rate_1
,a.F21G_RSRP_140_GRID_Cnt_1-a.F21G_RSRP_105_GRID_Cnt_1
,a.F21G_RSRP_140_GRID_Cnt_1
,round((a.F21G_RSRP_140_GRID_Cnt_1-a.F21G_RSRP_105_GRID_Cnt_1)*100/a.F21G_RSRP_140_GRID_Cnt_1, 2) as F21G_RSRP_GRID_Avg_1

,a.F26G_RSRP_140_Cnt_1
,round(a.F26G_RSRP_140_Sum_1/a.F26G_RSRP_140_Cnt_1, 2) as F26G_RSRP_140_Avg_1
,a.F26G_RSRP_95_Cnt_1
,CONCAT(round(a.F26G_RSRP_95_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_95_rate_1
,a.F26G_RSRP_100_Cnt_1
,CONCAT(round(a.F26G_RSRP_100_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_100_rate_1
,a.F26G_RSRP_105_Cnt_1
,CONCAT(round(a.F26G_RSRP_105_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_105_rate_1
,a.F26G_RSRP_110_Cnt_1
,CONCAT(round(a.F26G_RSRP_110_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_110_rate_1
,a.F26G_RSRP_115_Cnt_1
,CONCAT(round(a.F26G_RSRP_115_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_115_rate_1
,a.F26G_RSRP_140_GRID_Cnt_1-a.F26G_RSRP_105_GRID_Cnt_1
,a.F26G_RSRP_140_GRID_Cnt_1
,round((a.F26G_RSRP_140_GRID_Cnt_1-a.F26G_RSRP_105_GRID_Cnt_1)*100/a.F26G_RSRP_140_GRID_Cnt_1, 2) as F26G_RSRP_GRID_Avg_1

,a.BEST_RSRP_140_Cnt_0
,round(a.BEST_RSRP_140_Sum_0/a.BEST_RSRP_140_Cnt_0, 2) as BEST_RSRP_140_Avg_0
,a.BEST_RSRP_95_Cnt_0
,CONCAT(round(a.BEST_RSRP_95_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_95_rate_0
,a.BEST_RSRP_100_Cnt_0
,CONCAT(round(a.BEST_RSRP_100_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_100_rate_0
,a.BEST_RSRP_105_Cnt_0
,CONCAT(round(a.BEST_RSRP_105_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_105_rate_0
,a.BEST_RSRP_110_Cnt_0
,CONCAT(round(a.BEST_RSRP_110_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_110_rate_0
,a.BEST_RSRP_115_Cnt_0
,CONCAT(round(a.BEST_RSRP_115_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_115_rate_0
,a.BEST_RSRP_140_GRID_Cnt_0-a.BEST_RSRP_105_GRID_Cnt_0
,a.BEST_RSRP_140_GRID_Cnt_0
,round((a.BEST_RSRP_140_GRID_Cnt_0-a.BEST_RSRP_105_GRID_Cnt_0)*100/a.BEST_RSRP_140_GRID_Cnt_0, 2) as BEST_RSRP_GRID_Avg_0

,a.SC_RSRP_140_Cnt_0
,round(a.SC_RSRP_140_Sum_0/a.SC_RSRP_140_Cnt_0, 2) as SC_RSRP_140_Avg_0
,a.SC_RSRP_95_Cnt_0
,CONCAT(round(a.SC_RSRP_95_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_95_rate_0
,a.SC_RSRP_100_Cnt_0
,CONCAT(round(a.SC_RSRP_100_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_100_rate_0
,a.SC_RSRP_105_Cnt_0
,CONCAT(round(a.SC_RSRP_105_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_105_rate_0
,a.SC_RSRP_110_Cnt_0
,CONCAT(round(a.SC_RSRP_110_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_110_rate_0
,a.SC_RSRP_115_Cnt_0
,CONCAT(round(a.SC_RSRP_115_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_115_rate_0
,a.SC_RSRP_140_GRID_Cnt_0-a.SC_RSRP_105_GRID_Cnt_0
,a.SC_RSRP_140_GRID_Cnt_0
,round((a.SC_RSRP_140_GRID_Cnt_0-a.SC_RSRP_105_GRID_Cnt_0)*100/a.SC_RSRP_140_GRID_Cnt_0, 2) as SC_RSRP_GRID_Avg_0

,a.F800M_RSRP_140_Cnt_0
,round(a.F800M_RSRP_140_Sum_0/a.F800M_RSRP_140_Cnt_0, 2) as F800M_RSRP_140_Avg_0
,a.F800M_RSRP_95_Cnt_0
,CONCAT(round(a.F800M_RSRP_95_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_95_rate_0
,a.F800M_RSRP_100_Cnt_0
,CONCAT(round(a.F800M_RSRP_100_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_100_rate_0
,a.F800M_RSRP_105_Cnt_0
,CONCAT(round(a.F800M_RSRP_105_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_105_rate_0
,a.F800M_RSRP_110_Cnt_0
,CONCAT(round(a.F800M_RSRP_110_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_110_rate_0
,a.F800M_RSRP_115_Cnt_0
,CONCAT(round(a.F800M_RSRP_115_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_115_rate_0
,a.F800M_RSRP_140_GRID_Cnt_0-a.F800M_RSRP_105_GRID_Cnt_0
,a.F800M_RSRP_140_GRID_Cnt_0
,round((a.F800M_RSRP_140_GRID_Cnt_0-a.F800M_RSRP_105_GRID_Cnt_0)*100/a.F800M_RSRP_140_GRID_Cnt_0, 2) as F800M_RSRP_GRID_Avg_0

,a.F18G_RSRP_140_Cnt_0
,round(a.F18G_RSRP_140_Sum_0/a.F18G_RSRP_140_Cnt_0, 2) as F18G_RSRP_140_Avg_0
,a.F18G_RSRP_95_Cnt_0
,CONCAT(round(a.F18G_RSRP_95_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_95_rate_0
,a.F18G_RSRP_100_Cnt_0
,CONCAT(round(a.F18G_RSRP_100_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_100_rate_0
,a.F18G_RSRP_105_Cnt_0
,CONCAT(round(a.F18G_RSRP_105_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_105_rate_0
,a.F18G_RSRP_110_Cnt_0
,CONCAT(round(a.F18G_RSRP_110_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_110_rate_0
,a.F18G_RSRP_115_Cnt_0
,CONCAT(round(a.F18G_RSRP_115_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_115_rate_0
,a.F18G_RSRP_140_GRID_Cnt_0-a.F18G_RSRP_105_GRID_Cnt_0
,a.F18G_RSRP_140_GRID_Cnt_0
,round((a.F18G_RSRP_140_GRID_Cnt_0-a.F18G_RSRP_105_GRID_Cnt_0)*100/a.F18G_RSRP_140_GRID_Cnt_0, 2) as F18G_RSRP_GRID_Avg_0

,a.F21G_RSRP_140_Cnt_0
,round(a.F21G_RSRP_140_Sum_0/a.F21G_RSRP_140_Cnt_0, 2) as F21G_RSRP_140_Avg_0
,a.F21G_RSRP_95_Cnt_0
,CONCAT(round(a.F21G_RSRP_95_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_95_rate_0
,a.F21G_RSRP_100_Cnt_0
,CONCAT(round(a.F21G_RSRP_100_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_100_rate_0
,a.F21G_RSRP_105_Cnt_0
,CONCAT(round(a.F21G_RSRP_105_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_105_rate_0
,a.F21G_RSRP_110_Cnt_0
,CONCAT(round(a.F21G_RSRP_110_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_110_rate_0
,a.F21G_RSRP_115_Cnt_0
,CONCAT(round(a.F21G_RSRP_115_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_115_rate_0
,a.F21G_RSRP_140_GRID_Cnt_0-a.F21G_RSRP_105_GRID_Cnt_0
,a.F21G_RSRP_140_GRID_Cnt_0
,round((a.F21G_RSRP_140_GRID_Cnt_0-a.F21G_RSRP_105_GRID_Cnt_0)*100/a.F21G_RSRP_140_GRID_Cnt_0, 2) as F21G_RSRP_GRID_Avg_0

,a.F26G_RSRP_140_Cnt_0
,round(a.F26G_RSRP_140_Sum_0/a.F26G_RSRP_140_Cnt_0, 2) as F26G_RSRP_140_Avg_0
,a.F26G_RSRP_95_Cnt_0
,CONCAT(round(a.F26G_RSRP_95_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_95_rate_0
,a.F26G_RSRP_100_Cnt_0
,CONCAT(round(a.F26G_RSRP_100_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_100_rate_0
,a.F26G_RSRP_105_Cnt_0
,CONCAT(round(a.F26G_RSRP_105_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_105_rate_0
,a.F26G_RSRP_110_Cnt_0
,CONCAT(round(a.F26G_RSRP_110_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_110_rate_0
,a.F26G_RSRP_115_Cnt_0
,CONCAT(round(a.F26G_RSRP_115_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_115_rate_0
,a.F26G_RSRP_140_GRID_Cnt_0-a.F26G_RSRP_105_GRID_Cnt_0
,a.F26G_RSRP_140_GRID_Cnt_0
,round((a.F26G_RSRP_140_GRID_Cnt_0-a.F26G_RSRP_105_GRID_Cnt_0)*100/a.F26G_RSRP_140_GRID_Cnt_0, 2) as F26G_RSRP_GRID_Avg_0
,c.gis_data_baidu
from
(
SELECT CITY
,COUNTRY
,MKTCENTER
,`Object_ID`
,`Object_Name`
,Object_Type

,sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ) as BEST_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Sum else 0 end ) as BEST_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_95_Cnt else 0 end ) as BEST_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_100_Cnt else 0 end ) as BEST_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_105_Cnt else 0 end ) as BEST_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_110_Cnt else 0 end ) as BEST_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_115_Cnt else 0 end ) as BEST_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_105_GRID_Cnt else 0 end ) as BEST_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_140_GRID_Cnt else 0 end ) as BEST_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ) as SC_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_140_Sum else 0 end ) as SC_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_95_Cnt else 0 end ) as SC_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_100_Cnt else 0 end ) as SC_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_105_Cnt else 0 end ) as SC_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_110_Cnt else 0 end ) as SC_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_115_Cnt else 0 end ) as SC_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_105_GRID_Cnt else 0 end ) as SC_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_140_GRID_Cnt else 0 end ) as SC_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then F800M_RSRP_140_Cnt else 0 end ) as F800M_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_140_Sum else 0 end ) as F800M_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_95_Cnt else 0 end ) as F800M_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_100_Cnt else 0 end ) as F800M_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_105_Cnt else 0 end ) as F800M_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_110_Cnt else 0 end ) as F800M_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_115_Cnt else 0 end ) as F800M_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_105_GRID_Cnt else 0 end ) as F800M_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_140_GRID_Cnt else 0 end ) as F800M_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then F18G_RSRP_140_Cnt else 0 end ) as F18G_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_140_Sum else 0 end ) as F18G_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_95_Cnt else 0 end ) as F18G_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_100_Cnt else 0 end ) as F18G_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_105_Cnt else 0 end ) as F18G_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_110_Cnt else 0 end ) as F18G_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_115_Cnt else 0 end ) as F18G_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_105_GRID_Cnt else 0 end ) as F18G_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_140_GRID_Cnt else 0 end ) as F18G_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then F21G_RSRP_140_Cnt else 0 end ) as F21G_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_140_Sum else 0 end ) as F21G_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_95_Cnt else 0 end ) as F21G_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_100_Cnt else 0 end ) as F21G_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_105_Cnt else 0 end ) as F21G_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_110_Cnt else 0 end ) as F21G_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_115_Cnt else 0 end ) as F21G_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_105_GRID_Cnt else 0 end ) as F21G_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_140_GRID_Cnt else 0 end ) as F21G_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then F26G_RSRP_140_Cnt else 0 end ) as F26G_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_140_Sum else 0 end ) as F26G_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_95_Cnt else 0 end ) as F26G_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_100_Cnt else 0 end ) as F26G_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_105_Cnt else 0 end ) as F26G_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_110_Cnt else 0 end ) as F26G_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_115_Cnt else 0 end ) as F26G_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_105_GRID_Cnt else 0 end ) as F26G_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_140_GRID_Cnt else 0 end ) as F26G_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ) as BEST_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Sum else 0 end ) as BEST_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_95_Cnt else 0 end ) as BEST_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_100_Cnt else 0 end ) as BEST_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_105_Cnt else 0 end ) as BEST_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_110_Cnt else 0 end ) as BEST_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_115_Cnt else 0 end ) as BEST_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_105_GRID_Cnt else 0 end ) as BEST_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_140_GRID_Cnt else 0 end ) as BEST_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ) as SC_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_140_Sum else 0 end ) as SC_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_95_Cnt else 0 end ) as SC_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_100_Cnt else 0 end ) as SC_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_105_Cnt else 0 end ) as SC_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_110_Cnt else 0 end ) as SC_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_115_Cnt else 0 end ) as SC_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_105_GRID_Cnt else 0 end ) as SC_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_140_GRID_Cnt else 0 end ) as SC_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then F800M_RSRP_140_Cnt else 0 end ) as F800M_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_140_Sum else 0 end ) as F800M_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_95_Cnt else 0 end ) as F800M_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_100_Cnt else 0 end ) as F800M_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_105_Cnt else 0 end ) as F800M_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_110_Cnt else 0 end ) as F800M_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_115_Cnt else 0 end ) as F800M_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_105_GRID_Cnt else 0 end ) as F800M_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_140_GRID_Cnt else 0 end ) as F800M_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then F18G_RSRP_140_Cnt else 0 end ) as F18G_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_140_Sum else 0 end ) as F18G_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_95_Cnt else 0 end ) as F18G_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_100_Cnt else 0 end ) as F18G_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_105_Cnt else 0 end ) as F18G_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_110_Cnt else 0 end ) as F18G_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_115_Cnt else 0 end ) as F18G_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_105_GRID_Cnt else 0 end ) as F18G_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_140_GRID_Cnt else 0 end ) as F18G_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then F21G_RSRP_140_Cnt else 0 end ) as F21G_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_140_Sum else 0 end ) as F21G_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_95_Cnt else 0 end ) as F21G_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_100_Cnt else 0 end ) as F21G_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_105_Cnt else 0 end ) as F21G_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_110_Cnt else 0 end ) as F21G_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_115_Cnt else 0 end ) as F21G_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_105_GRID_Cnt else 0 end ) as F21G_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_140_GRID_Cnt else 0 end ) as F21G_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then F26G_RSRP_140_Cnt else 0 end ) as F26G_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_140_Sum else 0 end ) as F26G_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_95_Cnt else 0 end ) as F26G_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_100_Cnt else 0 end ) as F26G_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_105_Cnt else 0 end ) as F26G_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_110_Cnt else 0 end ) as F26G_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_115_Cnt else 0 end ) as F26G_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_105_GRID_Cnt else 0 end ) as F26G_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_140_GRID_Cnt else 0 end ) as F26G_RSRP_140_GRID_Cnt_0

from noce.FRT_MRO_9S_SC_#{TABLE}
where 1=1 and
#{T_PARTITION_VAR}=#{endTime}
and Object_Type = '关注区域'
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{ZLQY_CONDITION}

GROUP BY CITY
,COUNTRY
,MKTCENTER
,`Object_ID`
,`Object_Name`
) a
,
(select id,gis_data_baidu FROM dm_user_concern_area) c
where a.Object_ID = c.id
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL__concern_area_table_count" description="关注区域表格总数">
<![CDATA[
SELECT	COUNT(1) count
from
(
SELECT *
from noce.FRT_MRO_9S_SC_#{TABLE}
where 1=1 and
#{T_PARTITION_VAR}=#{endTime}
and Object_Type = '关注区域'
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{ZLQY_CONDITION}

GROUP BY CITY
,COUNTRY
,MKTCENTER
,`Object_ID`
,`Object_Name`
) a
,
(select id,gis_data_baidu FROM dm_user_concern_area) c
where a.Object_ID = c.id

]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSatSenceTab_3" description="骨头区域MR统计表格">
<![CDATA[
SELECT	a.CITY
,a.COUNTRY
,a.MKTCENTER
,a.`Object_ID`
,a.`Object_Name`

,a.BEST_RSRP_140_Cnt_1
,round(a.BEST_RSRP_140_Sum_1/a.BEST_RSRP_140_Cnt_1, 2) as BEST_RSRP_140_Avg_1
,a.BEST_RSRP_95_Cnt_1
,CONCAT(round(a.BEST_RSRP_95_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_95_rate_1
,a.BEST_RSRP_100_Cnt_1
,CONCAT(round(a.BEST_RSRP_100_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_100_rate_1
,a.BEST_RSRP_105_Cnt_1
,CONCAT(round(a.BEST_RSRP_105_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_105_rate_1
,a.BEST_RSRP_110_Cnt_1
,CONCAT(round(a.BEST_RSRP_110_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_110_rate_1
,a.BEST_RSRP_115_Cnt_1
,CONCAT(round(a.BEST_RSRP_115_Cnt_1*100/a.BEST_RSRP_140_Cnt_1, 2),'%') as BEST_RSRP_115_rate_1
,a.BEST_RSRP_140_GRID_Cnt_1-a.BEST_RSRP_105_GRID_Cnt_1
,a.BEST_RSRP_140_GRID_Cnt_1
,round((a.BEST_RSRP_140_GRID_Cnt_1-a.BEST_RSRP_105_GRID_Cnt_1)*100/a.BEST_RSRP_140_GRID_Cnt_1, 2) as BEST_RSRP_GRID_Avg_1

,a.SC_RSRP_140_Cnt_1
,round(a.SC_RSRP_140_Sum_1/a.SC_RSRP_140_Cnt_1, 2) as SC_RSRP_140_Avg_1
,a.SC_RSRP_95_Cnt_1
,CONCAT(round(a.SC_RSRP_95_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_95_rate_1
,a.SC_RSRP_100_Cnt_1
,CONCAT(round(a.SC_RSRP_100_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_100_rate_1
,a.SC_RSRP_105_Cnt_1
,CONCAT(round(a.SC_RSRP_105_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_105_rate_1
,a.SC_RSRP_110_Cnt_1
,CONCAT(round(a.SC_RSRP_110_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_110_rate_1
,a.SC_RSRP_115_Cnt_1
,CONCAT(round(a.SC_RSRP_115_Cnt_1*100/a.SC_RSRP_140_Cnt_1, 2),'%') as SC_RSRP_115_rate_1
,a.SC_RSRP_140_GRID_Cnt_1-a.SC_RSRP_105_GRID_Cnt_1
,a.SC_RSRP_140_GRID_Cnt_1
,round((a.SC_RSRP_140_GRID_Cnt_1-a.SC_RSRP_105_GRID_Cnt_1)*100/a.SC_RSRP_140_GRID_Cnt_1, 2) as SC_RSRP_GRID_Avg_1

,a.F800M_RSRP_140_Cnt_1
,round(a.F800M_RSRP_140_Sum_1/a.F800M_RSRP_140_Cnt_1, 2) as F800M_RSRP_140_Avg_1
,a.F800M_RSRP_95_Cnt_1
,CONCAT(round(a.F800M_RSRP_95_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_95_rate_1
,a.F800M_RSRP_100_Cnt_1
,CONCAT(round(a.F800M_RSRP_100_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_100_rate_1
,a.F800M_RSRP_105_Cnt_1
,CONCAT(round(a.F800M_RSRP_105_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_105_rate_1
,a.F800M_RSRP_110_Cnt_1
,CONCAT(round(a.F800M_RSRP_110_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_110_rate_1
,a.F800M_RSRP_115_Cnt_1
,CONCAT(round(a.F800M_RSRP_115_Cnt_1*100/a.F800M_RSRP_140_Cnt_1, 2),'%') as F800M_RSRP_115_rate_1
,a.F800M_RSRP_140_GRID_Cnt_1-a.F800M_RSRP_105_GRID_Cnt_1
,a.F800M_RSRP_140_GRID_Cnt_1
,round((a.F800M_RSRP_140_GRID_Cnt_1-a.F800M_RSRP_105_GRID_Cnt_1)*100/a.F800M_RSRP_140_GRID_Cnt_1, 2) as F800M_RSRP_GRID_Avg_1

,a.F18G_RSRP_140_Cnt_1
,round(a.F18G_RSRP_140_Sum_1/a.F18G_RSRP_140_Cnt_1, 2) as F18G_RSRP_140_Avg_1
,a.F18G_RSRP_95_Cnt_1
,CONCAT(round(a.F18G_RSRP_95_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_95_rate_1
,a.F18G_RSRP_100_Cnt_1
,CONCAT(round(a.F18G_RSRP_100_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_100_rate_1
,a.F18G_RSRP_105_Cnt_1
,CONCAT(round(a.F18G_RSRP_105_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_105_rate_1
,a.F18G_RSRP_110_Cnt_1
,CONCAT(round(a.F18G_RSRP_110_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_110_rate_1
,a.F18G_RSRP_115_Cnt_1
,CONCAT(round(a.F18G_RSRP_115_Cnt_1*100/a.F18G_RSRP_140_Cnt_1, 2),'%') as F18G_RSRP_115_rate_1
,a.F18G_RSRP_140_GRID_Cnt_1-a.F18G_RSRP_105_GRID_Cnt_1
,a.F18G_RSRP_140_GRID_Cnt_1
,round((a.F18G_RSRP_140_GRID_Cnt_1-a.F18G_RSRP_105_GRID_Cnt_1)*100/a.F18G_RSRP_140_GRID_Cnt_1, 2) as F18G_RSRP_GRID_Avg_1

,a.F21G_RSRP_140_Cnt_1
,round(a.F21G_RSRP_140_Sum_1/a.F21G_RSRP_140_Cnt_1, 2) as F21G_RSRP_140_Avg_1
,a.F21G_RSRP_95_Cnt_1
,CONCAT(round(a.F21G_RSRP_95_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_95_rate_1
,a.F21G_RSRP_100_Cnt_1
,CONCAT(round(a.F21G_RSRP_100_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_100_rate_1
,a.F21G_RSRP_105_Cnt_1
,CONCAT(round(a.F21G_RSRP_105_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_105_rate_1
,a.F21G_RSRP_110_Cnt_1
,CONCAT(round(a.F21G_RSRP_110_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_110_rate_1
,a.F21G_RSRP_115_Cnt_1
,CONCAT(round(a.F21G_RSRP_115_Cnt_1*100/a.F21G_RSRP_140_Cnt_1, 2),'%') as F21G_RSRP_115_rate_1
,a.F21G_RSRP_140_GRID_Cnt_1-a.F21G_RSRP_105_GRID_Cnt_1
,a.F21G_RSRP_140_GRID_Cnt_1
,round((a.F21G_RSRP_140_GRID_Cnt_1-a.F21G_RSRP_105_GRID_Cnt_1)*100/a.F21G_RSRP_140_GRID_Cnt_1, 2) as F21G_RSRP_GRID_Avg_1

,a.F26G_RSRP_140_Cnt_1
,round(a.F26G_RSRP_140_Sum_1/a.F26G_RSRP_140_Cnt_1, 2) as F26G_RSRP_140_Avg_1
,a.F26G_RSRP_95_Cnt_1
,CONCAT(round(a.F26G_RSRP_95_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_95_rate_1
,a.F26G_RSRP_100_Cnt_1
,CONCAT(round(a.F26G_RSRP_100_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_100_rate_1
,a.F26G_RSRP_105_Cnt_1
,CONCAT(round(a.F26G_RSRP_105_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_105_rate_1
,a.F26G_RSRP_110_Cnt_1
,CONCAT(round(a.F26G_RSRP_110_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_110_rate_1
,a.F26G_RSRP_115_Cnt_1
,CONCAT(round(a.F26G_RSRP_115_Cnt_1*100/a.F26G_RSRP_140_Cnt_1, 2),'%') as F26G_RSRP_115_rate_1
,a.F26G_RSRP_140_GRID_Cnt_1-a.F26G_RSRP_105_GRID_Cnt_1
,a.F26G_RSRP_140_GRID_Cnt_1
,round((a.F26G_RSRP_140_GRID_Cnt_1-a.F26G_RSRP_105_GRID_Cnt_1)*100/a.F26G_RSRP_140_GRID_Cnt_1, 2) as F26G_RSRP_GRID_Avg_1

,a.BEST_RSRP_140_Cnt_0
,round(a.BEST_RSRP_140_Sum_0/a.BEST_RSRP_140_Cnt_0, 2) as BEST_RSRP_140_Avg_0
,a.BEST_RSRP_95_Cnt_0
,CONCAT(round(a.BEST_RSRP_95_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_95_rate_0
,a.BEST_RSRP_100_Cnt_0
,CONCAT(round(a.BEST_RSRP_100_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_100_rate_0
,a.BEST_RSRP_105_Cnt_0
,CONCAT(round(a.BEST_RSRP_105_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_105_rate_0
,a.BEST_RSRP_110_Cnt_0
,CONCAT(round(a.BEST_RSRP_110_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_110_rate_0
,a.BEST_RSRP_115_Cnt_0
,CONCAT(round(a.BEST_RSRP_115_Cnt_0*100/a.BEST_RSRP_140_Cnt_0, 2),'%') as BEST_RSRP_115_rate_0
,a.BEST_RSRP_140_GRID_Cnt_0-a.BEST_RSRP_105_GRID_Cnt_0
,a.BEST_RSRP_140_GRID_Cnt_0
,round((a.BEST_RSRP_140_GRID_Cnt_0-a.BEST_RSRP_105_GRID_Cnt_0)*100/a.BEST_RSRP_140_GRID_Cnt_0, 2) as BEST_RSRP_GRID_Avg_0

,a.SC_RSRP_140_Cnt_0
,round(a.SC_RSRP_140_Sum_0/a.SC_RSRP_140_Cnt_0, 2) as SC_RSRP_140_Avg_0
,a.SC_RSRP_95_Cnt_0
,CONCAT(round(a.SC_RSRP_95_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_95_rate_0
,a.SC_RSRP_100_Cnt_0
,CONCAT(round(a.SC_RSRP_100_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_100_rate_0
,a.SC_RSRP_105_Cnt_0
,CONCAT(round(a.SC_RSRP_105_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_105_rate_0
,a.SC_RSRP_110_Cnt_0
,CONCAT(round(a.SC_RSRP_110_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_110_rate_0
,a.SC_RSRP_115_Cnt_0
,CONCAT(round(a.SC_RSRP_115_Cnt_0*100/a.SC_RSRP_140_Cnt_0, 2),'%') as SC_RSRP_115_rate_0
,a.SC_RSRP_140_GRID_Cnt_0-a.SC_RSRP_105_GRID_Cnt_0
,a.SC_RSRP_140_GRID_Cnt_0
,round((a.SC_RSRP_140_GRID_Cnt_0-a.SC_RSRP_105_GRID_Cnt_0)*100/a.SC_RSRP_140_GRID_Cnt_0, 2) as SC_RSRP_GRID_Avg_0

,a.F800M_RSRP_140_Cnt_0
,round(a.F800M_RSRP_140_Sum_0/a.F800M_RSRP_140_Cnt_0, 2) as F800M_RSRP_140_Avg_0
,a.F800M_RSRP_95_Cnt_0
,CONCAT(round(a.F800M_RSRP_95_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_95_rate_0
,a.F800M_RSRP_100_Cnt_0
,CONCAT(round(a.F800M_RSRP_100_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_100_rate_0
,a.F800M_RSRP_105_Cnt_0
,CONCAT(round(a.F800M_RSRP_105_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_105_rate_0
,a.F800M_RSRP_110_Cnt_0
,CONCAT(round(a.F800M_RSRP_110_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_110_rate_0
,a.F800M_RSRP_115_Cnt_0
,CONCAT(round(a.F800M_RSRP_115_Cnt_0*100/a.F800M_RSRP_140_Cnt_0, 2),'%') as F800M_RSRP_115_rate_0
,a.F800M_RSRP_140_GRID_Cnt_0-a.F800M_RSRP_105_GRID_Cnt_0
,a.F800M_RSRP_140_GRID_Cnt_0
,round((a.F800M_RSRP_140_GRID_Cnt_0-a.F800M_RSRP_105_GRID_Cnt_0)*100/a.F800M_RSRP_140_GRID_Cnt_0, 2) as F800M_RSRP_GRID_Avg_0

,a.F18G_RSRP_140_Cnt_0
,round(a.F18G_RSRP_140_Sum_0/a.F18G_RSRP_140_Cnt_0, 2) as F18G_RSRP_140_Avg_0
,a.F18G_RSRP_95_Cnt_0
,CONCAT(round(a.F18G_RSRP_95_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_95_rate_0
,a.F18G_RSRP_100_Cnt_0
,CONCAT(round(a.F18G_RSRP_100_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_100_rate_0
,a.F18G_RSRP_105_Cnt_0
,CONCAT(round(a.F18G_RSRP_105_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_105_rate_0
,a.F18G_RSRP_110_Cnt_0
,CONCAT(round(a.F18G_RSRP_110_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_110_rate_0
,a.F18G_RSRP_115_Cnt_0
,CONCAT(round(a.F18G_RSRP_115_Cnt_0*100/a.F18G_RSRP_140_Cnt_0, 2),'%') as F18G_RSRP_115_rate_0
,a.F18G_RSRP_140_GRID_Cnt_0-a.F18G_RSRP_105_GRID_Cnt_0
,a.F18G_RSRP_140_GRID_Cnt_0
,round((a.F18G_RSRP_140_GRID_Cnt_0-a.F18G_RSRP_105_GRID_Cnt_0)*100/a.F18G_RSRP_140_GRID_Cnt_0, 2) as F18G_RSRP_GRID_Avg_0

,a.F21G_RSRP_140_Cnt_0
,round(a.F21G_RSRP_140_Sum_0/a.F21G_RSRP_140_Cnt_0, 2) as F21G_RSRP_140_Avg_0
,a.F21G_RSRP_95_Cnt_0
,CONCAT(round(a.F21G_RSRP_95_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_95_rate_0
,a.F21G_RSRP_100_Cnt_0
,CONCAT(round(a.F21G_RSRP_100_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_100_rate_0
,a.F21G_RSRP_105_Cnt_0
,CONCAT(round(a.F21G_RSRP_105_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_105_rate_0
,a.F21G_RSRP_110_Cnt_0
,CONCAT(round(a.F21G_RSRP_110_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_110_rate_0
,a.F21G_RSRP_115_Cnt_0
,CONCAT(round(a.F21G_RSRP_115_Cnt_0*100/a.F21G_RSRP_140_Cnt_0, 2),'%') as F21G_RSRP_115_rate_0
,a.F21G_RSRP_140_GRID_Cnt_0-a.F21G_RSRP_105_GRID_Cnt_0
,a.F21G_RSRP_140_GRID_Cnt_0
,round((a.F21G_RSRP_140_GRID_Cnt_0-a.F21G_RSRP_105_GRID_Cnt_0)*100/a.F21G_RSRP_140_GRID_Cnt_0, 2) as F21G_RSRP_GRID_Avg_0

,a.F26G_RSRP_140_Cnt_0
,round(a.F26G_RSRP_140_Sum_0/a.F26G_RSRP_140_Cnt_0, 2) as F26G_RSRP_140_Avg_0
,a.F26G_RSRP_95_Cnt_0
,CONCAT(round(a.F26G_RSRP_95_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_95_rate_0
,a.F26G_RSRP_100_Cnt_0
,CONCAT(round(a.F26G_RSRP_100_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_100_rate_0
,a.F26G_RSRP_105_Cnt_0
,CONCAT(round(a.F26G_RSRP_105_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_105_rate_0
,a.F26G_RSRP_110_Cnt_0
,CONCAT(round(a.F26G_RSRP_110_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_110_rate_0
,a.F26G_RSRP_115_Cnt_0
,CONCAT(round(a.F26G_RSRP_115_Cnt_0*100/a.F26G_RSRP_140_Cnt_0, 2),'%') as F26G_RSRP_115_rate_0
,a.F26G_RSRP_140_GRID_Cnt_0-a.F26G_RSRP_105_GRID_Cnt_0
,a.F26G_RSRP_140_GRID_Cnt_0
,round((a.F26G_RSRP_140_GRID_Cnt_0-a.F26G_RSRP_105_GRID_Cnt_0)*100/a.F26G_RSRP_140_GRID_Cnt_0, 2) as F26G_RSRP_GRID_Avg_0


,c.GIS_DATA
from
(
SELECT CITY
,COUNTRY
,MKTCENTER
,`Object_ID`
,`Object_Name`
,Object_Type

,sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Cnt else 0 end ) as BEST_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_140_Sum else 0 end ) as BEST_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_95_Cnt else 0 end ) as BEST_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_100_Cnt else 0 end ) as BEST_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_105_Cnt else 0 end ) as BEST_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_110_Cnt else 0 end ) as BEST_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_115_Cnt else 0 end ) as BEST_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_105_GRID_Cnt else 0 end ) as BEST_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then BEST_RSRP_140_GRID_Cnt else 0 end ) as BEST_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then SC_RSRP_140_Cnt else 0 end ) as SC_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_140_Sum else 0 end ) as SC_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_95_Cnt else 0 end ) as SC_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_100_Cnt else 0 end ) as SC_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_105_Cnt else 0 end ) as SC_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_110_Cnt else 0 end ) as SC_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_115_Cnt else 0 end ) as SC_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_105_GRID_Cnt else 0 end ) as SC_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then SC_RSRP_140_GRID_Cnt else 0 end ) as SC_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then F800M_RSRP_140_Cnt else 0 end ) as F800M_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_140_Sum else 0 end ) as F800M_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_95_Cnt else 0 end ) as F800M_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_100_Cnt else 0 end ) as F800M_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_105_Cnt else 0 end ) as F800M_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_110_Cnt else 0 end ) as F800M_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_115_Cnt else 0 end ) as F800M_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_105_GRID_Cnt else 0 end ) as F800M_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then F800M_RSRP_140_GRID_Cnt else 0 end ) as F800M_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then F18G_RSRP_140_Cnt else 0 end ) as F18G_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_140_Sum else 0 end ) as F18G_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_95_Cnt else 0 end ) as F18G_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_100_Cnt else 0 end ) as F18G_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_105_Cnt else 0 end ) as F18G_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_110_Cnt else 0 end ) as F18G_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_115_Cnt else 0 end ) as F18G_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_105_GRID_Cnt else 0 end ) as F18G_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then F18G_RSRP_140_GRID_Cnt else 0 end ) as F18G_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then F21G_RSRP_140_Cnt else 0 end ) as F21G_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_140_Sum else 0 end ) as F21G_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_95_Cnt else 0 end ) as F21G_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_100_Cnt else 0 end ) as F21G_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_105_Cnt else 0 end ) as F21G_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_110_Cnt else 0 end ) as F21G_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_115_Cnt else 0 end ) as F21G_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_105_GRID_Cnt else 0 end ) as F21G_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then F21G_RSRP_140_GRID_Cnt else 0 end ) as F21G_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 1 then F26G_RSRP_140_Cnt else 0 end ) as F26G_RSRP_140_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_140_Sum else 0 end ) as F26G_RSRP_140_Sum_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_95_Cnt else 0 end ) as F26G_RSRP_95_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_100_Cnt else 0 end ) as F26G_RSRP_100_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_105_Cnt else 0 end ) as F26G_RSRP_105_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_110_Cnt else 0 end ) as F26G_RSRP_110_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_115_Cnt else 0 end ) as F26G_RSRP_115_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_105_GRID_Cnt else 0 end ) as F26G_RSRP_105_GRID_Cnt_1
,sum(case AGPS_TYPE when 1 then F26G_RSRP_140_GRID_Cnt else 0 end ) as F26G_RSRP_140_GRID_Cnt_1

,sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Cnt else 0 end ) as BEST_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_140_Sum else 0 end ) as BEST_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_95_Cnt else 0 end ) as BEST_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_100_Cnt else 0 end ) as BEST_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_105_Cnt else 0 end ) as BEST_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_110_Cnt else 0 end ) as BEST_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_115_Cnt else 0 end ) as BEST_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_105_GRID_Cnt else 0 end ) as BEST_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then BEST_RSRP_140_GRID_Cnt else 0 end ) as BEST_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then SC_RSRP_140_Cnt else 0 end ) as SC_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_140_Sum else 0 end ) as SC_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_95_Cnt else 0 end ) as SC_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_100_Cnt else 0 end ) as SC_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_105_Cnt else 0 end ) as SC_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_110_Cnt else 0 end ) as SC_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_115_Cnt else 0 end ) as SC_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_105_GRID_Cnt else 0 end ) as SC_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then SC_RSRP_140_GRID_Cnt else 0 end ) as SC_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then F800M_RSRP_140_Cnt else 0 end ) as F800M_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_140_Sum else 0 end ) as F800M_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_95_Cnt else 0 end ) as F800M_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_100_Cnt else 0 end ) as F800M_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_105_Cnt else 0 end ) as F800M_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_110_Cnt else 0 end ) as F800M_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_115_Cnt else 0 end ) as F800M_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_105_GRID_Cnt else 0 end ) as F800M_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then F800M_RSRP_140_GRID_Cnt else 0 end ) as F800M_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then F18G_RSRP_140_Cnt else 0 end ) as F18G_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_140_Sum else 0 end ) as F18G_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_95_Cnt else 0 end ) as F18G_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_100_Cnt else 0 end ) as F18G_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_105_Cnt else 0 end ) as F18G_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_110_Cnt else 0 end ) as F18G_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_115_Cnt else 0 end ) as F18G_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_105_GRID_Cnt else 0 end ) as F18G_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then F18G_RSRP_140_GRID_Cnt else 0 end ) as F18G_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then F21G_RSRP_140_Cnt else 0 end ) as F21G_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_140_Sum else 0 end ) as F21G_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_95_Cnt else 0 end ) as F21G_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_100_Cnt else 0 end ) as F21G_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_105_Cnt else 0 end ) as F21G_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_110_Cnt else 0 end ) as F21G_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_115_Cnt else 0 end ) as F21G_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_105_GRID_Cnt else 0 end ) as F21G_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then F21G_RSRP_140_GRID_Cnt else 0 end ) as F21G_RSRP_140_GRID_Cnt_0

,sum(case AGPS_TYPE when 0 then F26G_RSRP_140_Cnt else 0 end ) as F26G_RSRP_140_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_140_Sum else 0 end ) as F26G_RSRP_140_Sum_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_95_Cnt else 0 end ) as F26G_RSRP_95_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_100_Cnt else 0 end ) as F26G_RSRP_100_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_105_Cnt else 0 end ) as F26G_RSRP_105_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_110_Cnt else 0 end ) as F26G_RSRP_110_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_115_Cnt else 0 end ) as F26G_RSRP_115_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_105_GRID_Cnt else 0 end ) as F26G_RSRP_105_GRID_Cnt_0
,sum(case AGPS_TYPE when 0 then F26G_RSRP_140_GRID_Cnt else 0 end ) as F26G_RSRP_140_GRID_Cnt_0
from noce.FRT_MRO_9S_SC_#{TABLE}
where 1=1 and
#{T_PARTITION_VAR}=#{endTime}
and Object_Type = '骨头区域'
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{ZLQY_CONDITION}

GROUP BY CITY
,COUNTRY
,MKTCENTER
,`Object_ID`
,`Object_Name`
) a
,
(select id,OBJECT_ID,GIS_DATA FROM frt_agps_poor_area_m where month = #{endTime2}) c
where a.Object_ID = c.ID
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL__poor_area_table_count" description="骨头区域表格总数">
<![CDATA[
SELECT
	count(1) count
FROM
(
SELECT *
from noce.FRT_MRO_9S_SC_#{TABLE}
where 1=1 and
#{T_PARTITION_VAR}=#{endTime}
and Object_Type = '骨头区域'
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{ZLQY_CONDITION}

GROUP BY CITY
,COUNTRY
,MKTCENTER
,`Object_ID`
,`Object_Name`
) a
,
(select id,OBJECT_ID,GIS_DATA FROM frt_agps_poor_area_m where month = #{endTime2}) c
where a.Object_ID = c.ID
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_PoorGridCountImg" description="弱区统计趋势图" db="mysql">
<![CDATA[
SELECT
	a.`DAY`,
	a.POOR_GRIDS_COUNT count,
	a.POOR_GRID_NUMS JOINT_POOR_105_GRIDS_sum,
	b.ALL_AGPS_GRIDS,
	ROUND(POOR_GRID_NUMS/ALL_AGPS_GRIDS*100,2) rate
FROM
(SELECT
	`DAY`,
	COUNT(`OBJECT_ID`) as POOR_GRIDS_COUNT,
	sum(POOR_GRID_NUMS) as POOR_GRID_NUMS
FROM
	frt_agps_poor_coverage_d
WHERE 1=1
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
AND `TYPE` = #{TYPE}
AND	`DAY` >= #{START_TIME}
AND	`DAY` <= #{END_TIME}
GROUP BY
	`DAY`) a
,
(SELECT
	`DAY`,
	SUM(ALL_AGPS_GRIDS) as ALL_AGPS_GRIDS
FROM
	frt_mro_agps_grid_tot_d
WHERE 1=1
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
AND	`DAY` >= #{START_TIME}
AND	`DAY` <= #{END_TIME}
GROUP BY
	`DAY`) b
WHERE a.`DAY` = b.`DAY` order by day asc
]]>
</sqlTemplate>


<sqlTemplate id="StatisticsDL_PoorGridCountImg_city" description="弱区区域统计趋势图" db="mysql">
<![CDATA[
SELECT
	a.#{CITY},
	a.POOR_GRIDS_COUNT count,  -- 弱区数量
	a.POOR_GRID_NUMS JOINT_POOR_105_GRIDS_sum, -- 弱栅格数
	b.ALL_AGPS_GRIDS, -- 总栅格数
	ROUND(POOR_GRID_NUMS/ALL_AGPS_GRIDS*100,2) rate -- 弱栅格占比
FROM
(SELECT
	#{CITY},
	COUNT(`OBJECT_ID`) as POOR_GRIDS_COUNT, -- 弱区数量
	sum(POOR_GRID_NUMS) as POOR_GRID_NUMS -- 弱栅格数量
FROM
	frt_agps_poor_coverage_d
WHERE
	`DAY` = #{END_TIME}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
AND `TYPE` = #{TYPE}
and #{CITY} <> ''
GROUP BY
	#{CITY}) a
,
(SELECT
	#{CITY},
	SUM(ALL_AGPS_GRIDS) as ALL_AGPS_GRIDS -- 总栅格数
FROM
	frt_mro_agps_grid_tot_d
WHERE
	`DAY` = #{END_TIME}
	#{CITY_CONDITION}
	#{COUNTRY_CONDITION}
	#{MKTCENTER_CONDITION}
	and #{CITY} <> ''
GROUP BY
	#{CITY}) b
WHERE a.#{CITY} = b.#{CITY}
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_PoorGridCountTab" description="弱区统计表" db="mysql">
<![CDATA[
SELECT
	`Day`,
	`OBJECT_ID`,
	CITY,
	COUNTRY,
	MKTCENTER,
	LONGITUDE_MID_BaiDu,
	LATITUDE_MID_BaiDu,
	(case when BELONG_AREA_ID=1 then '市区'
		  when BELONG_AREA_ID=2 then '县城'
		  when BELONG_AREA_ID=3 then '乡镇'
		  else '农村'
		  end) BELONG_AREA,
    #{TOP_CELL_SET_CONDITION}
	SECTOR_SET,
	LTE_TO_3G_TOT,
	Lte_To_3g_OrderNo,
	Flow_4G_TOT,
	Flow_4G_OrderNo,
	CE_GOOD_RATIO_AVG,
	Ce_GOOD_RATIO_OrderNo,
	User_4G_AVG,
	User_4G_OrderNo,
	PC_OrderNo_TOT,
	(case when Do_Type=1 then '工程'
		  when Do_Type=2 then '维护'
		  when Do_Type=3 then '优化'
		  else '规划'
		  end) Do_Type,
	eNodeBName,
	address,
	eNodeB_ID,
	CELL_ID,
	CELL_NAME,
	CELL_STATE,
	TOP5_SECTOR_SET,
	POOR_GRID_NUMS,
	ALARM_NUMS,
	ALARM_CELLS,
	NR_ALARM_CELLS,
	ALL_GRID_NUMS,
	POOR_GRID_NUMS_OrderNo,
	POOR_GRID_AREA,
	ALL_GRID_AREA,
	SCENE_TYPE,
	TOP5_ALARM_NUMS,
	ROAD_ID,
	ROAD_NAME,
	CONTAIN_IDS,
	Lte_To_3g_CountyNo,
	Flow_4G_CountyNo,
	Ce_GOOD_RATIO_CountyNo,
	User_4G_CountyNo,
	POOR_GRID_NUMS_CountyNo,
	PC_TOT_CityNo,
	PC_TOT_CountyNo,
	New_Added_Flag,
	GIS_DATA
	#{HIGHWAY_CONDITION_FIELDS}
FROM
	frt_agps_poor_coverage_d
WHERE 1=1
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
AND	`DAY` = #{endTime}
AND `TYPE` = #{TYPE}
order by day desc
]]>
</sqlTemplate>


<sqlTemplate id="IntelligentRoadTestAnalysisV3_166_PoorTable_count" description="弱区统计表格总数" db="mysql">
<![CDATA[
SELECT
	COUNT(`OBJECT_ID`) count
FROM
	frt_agps_poor_coverage_d
WHERE 1=1
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
AND	`DAY` = #{endTime}
AND `TYPE` = #{TYPE}
GROUP BY
	`TYPE`
]]>
</sqlTemplate>



<sqlTemplate id="IntelligentRoadTestAnalysisV5_HighRail_166_PoorTable_count" description="高速弱连段统计表格总数" db="mysql">
<![CDATA[
SELECT
COUNT(1) count
FROM
(
SELECT
	`Day`,
	`OBJECT_ID`,
	CITY,
	COUNTRY,
	MKTCENTER,
	LONGITUDE_MID_BaiDu,
	LATITUDE_MID_BaiDu,
	(case when BELONG_AREA_ID=1 then '市区'
		  when BELONG_AREA_ID=2 then '县城'
		  when BELONG_AREA_ID=3 then '乡镇'
		  else '农村'
		  end) BELONG_AREA,
    #{TOP_CELL_SET_CONDITION}
	SECTOR_SET,
	LTE_TO_3G_TOT,
	Lte_To_3g_OrderNo,
	Flow_4G_TOT,
	Flow_4G_OrderNo,
	CE_GOOD_RATIO_AVG,
	Ce_GOOD_RATIO_OrderNo,
	User_4G_AVG,
	User_4G_OrderNo,
	PC_OrderNo_TOT,
	(case when Do_Type=1 then '工程'
		  when Do_Type=2 then '维护'
		  when Do_Type=3 then '优化'
		  else '规划'
		  end) Do_Type,
	eNodeBName,
	address,
	eNodeB_ID,
	CELL_ID,
	CELL_NAME,
	CELL_STATE,
	TOP5_SECTOR_SET,
	POOR_GRID_NUMS,
	ALARM_NUMS,
	ALARM_CELLS,
	NR_ALARM_CELLS,
	ALL_GRID_NUMS,
	POOR_GRID_NUMS_OrderNo,
	POOR_GRID_AREA,
	ALL_GRID_AREA,
	SCENE_TYPE,
	TOP5_ALARM_NUMS,
	ROAD_ID,
	ROAD_NAME,
	CONTAIN_IDS,
	Lte_To_3g_CountyNo,
	Flow_4G_CountyNo,
	Ce_GOOD_RATIO_CountyNo,
	User_4G_CountyNo,
	POOR_GRID_NUMS_CountyNo,
	PC_TOT_CityNo,
	PC_TOT_CountyNo,
	New_Added_Flag,
	GIS_DATA
	#{HIGHWAY_CONDITION_FIELDS}
FROM
	frt_agps_poor_coverage_d
WHERE 1=1
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
AND	`DAY` = #{endTime}
AND `TYPE` = #{TYPE}
order by day desc
)a
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV3_getPoorAreaHistorTrendData" description="根据当前查看的弱区的轮廓数据获取到该弱区中的所有栅格的编号" db="habse">
<![CDATA[
getGridsByContour
#{TABLENAME}
#{GRIDKEYPREFIX}
#{GRIDLEVEL}
#{POLYGONCONTOUR}
#{COLUMNLIST}
#{PARTITIONMOD}
rowkey 1
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV3_getNearPoorAreaCount" description="根据当前弱区中心经纬度获取附近弱区数" db="mysql">
<![CDATA[
select day , count(*) as npnum from FRT_AGPS_POOR_COVERAGE_D
WHERE DAY between #{STATRDAY} and #{ENDDAY}
AND grid_type = 20
AND gis_data is not null
AND TYPE =  #{TYPE}
and LONGITUDE_MID_BAIDU between #{LNGMID} - #{LNGDIFF}  and #{LNGMID} + #{LNGDIFF}
and LATITUDE_MID_BAIDU BETWEEN #{LATMID} - #{LATDIFF}  and #{LATMID} + #{LATDIFF}
GROUP BY day
order BY day ASC
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV3_getPoorCoverage" description="根据日期和object_id获取FRT_AGPS_POOR_COVERAGE_D表数据" db="mysql">
<![CDATA[
SELECT * from FRT_AGPS_POOR_COVERAGE_D 
where object_id =#{OBJECT_ID} and day =#{DAY}
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV3_getSenseObjectAlarmInfoData" description="根据场景对象的类型和对象的ID获取该告警对象的某天的指标数据" db="mysql">
<![CDATA[
Select  day
,ALARM_ID -- 告警ID
,ALARM_TIME  -- 产生日期
,RECOVER_TIME -- 恢复日期
,POOR_COVE_RECO_COUNT -- 弱区的弱栅格数
,POOR_COVE_GRID_COUNT -- 弱区的弱栅格恢复数
,round((POOR_COVE_RECO_COUNT/POOR_COVE_GRID_COUNT) *100 , 2 ) as recover_avg, -- 弱区的弱栅格恢复比
POOR_COVERAGE_SET -- 该工单对象的附近弱区集合
From ALT_ESBH_INFO_D a where  ALARM_TYPE='#{ALARM_TYPE}' and ESBH_ID= #{ESBH_ID}
order by  day desc limit 1
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV3_getSenseObjectPoorGridTrend" description="根据场景对象的类型和对象的ID获取该告警对象某段时间的弱栅格恢复比趋势图数据" db="mysql">
<![CDATA[
Select day,
POOR_COVE_RECO_COUNT, -- 弱区的弱栅格数
POOR_COVE_GRID_COUNT ,-- 弱区的弱栅格恢复数
round((POOR_COVE_RECO_COUNT/POOR_COVE_GRID_COUNT) * 100 , 2 ) as recover_avg -- 恢复比
From ALT_ESBH_INFO_D where  ALARM_TYPE='#{ALARM_TYPE}' and ESBH_ID= #{ESBH_ID}
AND DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
ORDER BY DAY ASC
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV3_getLineObjectAlarmInfoData" description="根据道路对象的类型和对象的ID获取该告警对象某天的指标数据" db="mysql">
<![CDATA[
select
	day,
	ALARM_ID,
	ALARM_TYPE,
	ALARM_TIME,
	RECOVER_TIME,
	POOR_COV_LENGTH
from
	ALT_ESBH_LINE_COVERAGE_D a
where ALARM_TYPE = '#{ALARM_TYPE}'  and  LINE_ID = #{LINE_ID}
order by  day desc limit 1


]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestV3_getLineObjectPoorLengthTrend" description="根据道路对象的类型和对象的ID获取该告警对象某段时间的弱路段长度变化趋势图数据" db="mysql">
<![CDATA[
Select day,
POOR_COV_LENGTH  -- 弱路段长度
From ALT_ESBH_LINE_COVERAGE_D where  ALARM_TYPE='#{ALARM_TYPE}' and LINE_ID= #{LINE_ID}
AND DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
order by day asc
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_AlarmCountImg_1" description="告警数，恢复数">
<![CDATA[
SELECT
	a.`DAY`,
	a.alarm_count, -- 告警数
	b.rec_count   -- 恢复数
FROM
(SELECT
	DATE_FORMAT(ALARM_TIME,'%Y-%m-%d') as `DAY`,
	COUNT(ALARM_TIME) as alarm_count
FROM
	alarm_info
WHERE 1=1
	#{CITY_CONDITION}
	#{COUNTRY_CONDITION}
	#{MKTCENTER_CONDITION}
	#{ALARM_NAME}
AND ALARM_TYPE_ID = 4
AND	ALARM_TIME >= '#{START_DAY}'
AND ALARM_TIME <= '#{END_DAY}'
GROUP BY
	DATE_FORMAT(ALARM_TIME,'%Y-%m-%d')
) a
left join
(SELECT
	DATE_FORMAT(RECOVER_TIME,'%Y-%m-%d') as `DAY`,
	COUNT(RECOVER_TIME) as rec_count
FROM
	alarm_info
WHERE 1=1
	#{CITY_CONDITION}
	#{COUNTRY_CONDITION}
	#{MKTCENTER_CONDITION}
	#{ALARM_NAME}
AND ALARM_TYPE_ID = 4
AND	RECOVER_TIME >= '#{START_DAY}'
AND RECOVER_TIME <= '#{END_DAY}'
GROUP BY
	DATE_FORMAT(RECOVER_TIME,'%Y-%m-%d')
) b
on a.`DAY` = b.`DAY`
union
SELECT
	b.`DAY`,
	a.alarm_count, -- 告警数
	b.rec_count   -- 恢复数
FROM
(SELECT
	DATE_FORMAT(ALARM_TIME,'%Y-%m-%d') as `DAY`,
	COUNT(ALARM_TIME) as alarm_count
FROM
	alarm_info
WHERE 1=1
	#{CITY_CONDITION}
	#{COUNTRY_CONDITION}
	#{MKTCENTER_CONDITION}
	#{ALARM_NAME}
AND ALARM_TYPE_ID = 4
AND ALARM_TIME <= '#{END_DAY}'
GROUP BY
	DATE_FORMAT(ALARM_TIME,'%Y-%m-%d')
) a
right join
(SELECT
	DATE_FORMAT(RECOVER_TIME,'%Y-%m-%d') as `DAY`,
	COUNT(RECOVER_TIME) as rec_count
FROM
	alarm_info
WHERE 1=1
	#{CITY_CONDITION}
	#{COUNTRY_CONDITION}
	#{MKTCENTER_CONDITION}
	#{ALARM_NAME}
AND ALARM_TYPE_ID = 4
AND	RECOVER_TIME >= '#{START_DAY}'
AND RECOVER_TIME <= '#{END_DAY}'
GROUP BY
	DATE_FORMAT(RECOVER_TIME,'%Y-%m-%d')
) b
on a.`DAY` = b.`DAY`
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_AlarmCountImg_2" description="--当期告警总数：筛选ALARM_TIME落在统计周期里面的数量;
															--当期产生且同期恢复的告警数：ALARM_TIME且RECOVER_TIME落在统计周期内告警数
															--当期恢复比=当期产生且同期恢复的告警数/当期产生的告警数">
<![CDATA[
SELECT
	a.alarm_count,
	b.rec_count,
	round(b.rec_count*100/a.alarm_count,2) rec_rate
FROM
(SELECT
  	COUNT(ALARM_TIME) alarm_count
FROM
	alarm_info
WHERE 1=1
	#{CITY_CONDITION}
	#{COUNTRY_CONDITION}
	#{MKTCENTER_CONDITION}
	#{ALARM_NAME}
AND ALARM_TYPE_ID = 4
AND ALARM_TIME >= '#{START_DAY}'
AND ALARM_TIME <= '#{END_DAY}'
) a
,
(SELECT
  	COUNT(RECOVER_TIME) rec_count
FROM
	alarm_info
WHERE 1=1
	#{CITY_CONDITION}
	#{COUNTRY_CONDITION}
	#{MKTCENTER_CONDITION}
	#{ALARM_NAME}
AND ALARM_TYPE_ID = 4
AND ALARM_TIME >= '#{START_DAY}'
AND ALARM_TIME <= '#{END_DAY}'
AND RECOVER_TIME >= '#{START_DAY}'
AND RECOVER_TIME <= '#{END_DAY}'
) b
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_AlarmCountImg_3" description="历史告警当期恢复数：筛选RECOVER_TIME落在统计周期里面的数量">
<![CDATA[
SELECT
	COUNT(RECOVER_TIME) recover_cnt
FROM
	alarm_info
WHERE 1=1
	#{CITY_CONDITION}
	#{COUNTRY_CONDITION}
	#{MKTCENTER_CONDITION}
	#{ALARM_NAME}
AND ALARM_TYPE_ID = 4
AND	RECOVER_TIME >= '#{START_DAY}'
AND RECOVER_TIME <= '#{END_DAY}'
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_AlarmCountImg_4" description="当期告警至今恢复数:ALARM_TIME落在统计周期内,且IS_RECOVER=1的告警数">
<![CDATA[
SELECT
  	SUM(IS_RECOVER) is_recover_sum
FROM
	alarm_info
where 1=1
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{ALARM_NAME}
AND ALARM_TYPE_ID = 4
AND ALARM_TIME >= '#{START_DAY}'
AND ALARM_TIME <= '#{END_DAY}'
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_AlarmCounTab_detail" description="统计表格:筛选用户选的ALARM_TYPE记录，并且ALARM_TIME或RECOVER_TIME落在用户选择周期内的记录">
<![CDATA[
SELECT
	ALARM_ID,
	ALARM_TYPE,
	CITY,
	COUNTRY,
	MKTCENTER,
	LONGITUDE_MID_GPS,
	LATITUDE_MID_GPS,
	ESBH_ID,
	ESBH_NAME,
	ESBH_GIS_GPS,
	ALARM_LEVEL,
	DATE_FORMAT(ALARM_TIME,'%Y-%m-%d') as ALARM_TIME,
	(case when IS_RECOVER=0 then '否'
	 else '是' end) IS_RECOVER,
	DATE_FORMAT(RECOVER_TIME,'%Y-%m-%d') as RECOVER_TIME,
	TASK_ID,
	eNodeB_ID,
	CELL_ID,
	CELL_NAME,
	POOR_COVE_GRID_COUNT,
	POOR_COVE_RECO_COUNT,
	POOR_COVERAGE_SET,
	POOR_COVERAGE_COUNT,
	POOR_COVERAGE_SET_GIS_GPS,
	PC_OrderNo_TOT,
	DATE_FORMAT(RECOVER_OPT_TIME,'%Y-%m-%d') as RECOVER_OPT_TIME,
	ROAD_ID,
	ALL_COV_LENGTH,
	POOR_COV_LENGTH,
	POOR_COV_RECO_LENGTH
FROM
	ALT_ESBH_TOT_INFO
where 1=1
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{ALARM_NAME}
AND (ALARM_TIME >= '#{startTime}'
AND ALARM_TIME <= '#{endTime}'
OR RECOVER_TIME >= '#{startTime}'
AND RECOVER_TIME <= '#{endTime}')
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_AlarmCounTab_count" description="工单数量">
<![CDATA[
select #{CITY}
,sum(case when alarm_name='天翼蓝鹰场馆' then 1 else 0 end) 天翼蓝鹰场馆
,sum(case when alarm_name='天翼蓝鹰场馆' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰场馆累计恢复数
,sum(case when alarm_name='天翼蓝鹰高流量商务区' then 1 else 0 end) 天翼蓝鹰高流量商务区
,sum(case when alarm_name='天翼蓝鹰高流量商务区' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰高流量商务区累计恢复数
,sum(case when alarm_name='天翼蓝鹰高密度住宅区' then 1 else 0 end) 天翼蓝鹰高密度住宅区
,sum(case when alarm_name='天翼蓝鹰高密度住宅区' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰高密度住宅区累计恢复数
,sum(case when alarm_name='天翼蓝鹰高速' then 1 else 0 end) 天翼蓝鹰高速
,sum(case when alarm_name='天翼蓝鹰高速' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰高速累计恢复数
,sum(case when alarm_name='天翼蓝鹰高校' then 1 else 0 end) 天翼蓝鹰高校
,sum(case when alarm_name='天翼蓝鹰高校' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰高校累计恢复数
,sum(case when alarm_name='天翼蓝鹰美景' then 1 else 0 end) 天翼蓝鹰美景
,sum(case when alarm_name='天翼蓝鹰美景' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰美景累计恢复数
,sum(case when alarm_name='天翼蓝鹰美食' then 1 else 0 end) 天翼蓝鹰美食
,sum(case when alarm_name='天翼蓝鹰美食' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰美食累计恢复数
,sum(case when alarm_name='天翼蓝鹰农贸市场' then 1 else 0 end) 天翼蓝鹰农贸市场
,sum(case when alarm_name='天翼蓝鹰农贸市场' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰农贸市场累计恢复数
,sum(case when alarm_name='天翼蓝鹰战狼区域' then 1 else 0 end) 天翼蓝鹰战狼区域
,sum(case when alarm_name='天翼蓝鹰战狼区域' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰战狼区域累计恢复数
,sum(case when alarm_name='天翼蓝鹰中小学' then 1 else 0 end) 天翼蓝鹰中小学
,sum(case when alarm_name='天翼蓝鹰中小学' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰中小学累计恢复数
,sum(1) 总派单量
,sum(case when recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 总恢复量
,CONCAT(ROUND(sum(case when recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end)/sum(1)*100,2),'%') 总恢复比
FROM `alarm_info`
where alarm_type='天翼蓝鹰系统'
and ALARM_TIME >=#{START_DAY}
and ALARM_TIME <=#{END_DAY}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
group by #{CITY}
union
select '#{isWhere}' as city
,sum(a.天翼蓝鹰场馆) 天翼蓝鹰场馆
,sum(a.天翼蓝鹰场馆累计恢复数) 天翼蓝鹰场馆累计恢复数
,sum(a.天翼蓝鹰高流量商务区) 天翼蓝鹰高流量商务区
,sum(a.天翼蓝鹰高流量商务区累计恢复数) 天翼蓝鹰高流量商务区累计恢复数
,sum(a.天翼蓝鹰高密度住宅区) 天翼蓝鹰高密度住宅区
,sum(a.天翼蓝鹰高密度住宅区累计恢复数) 天翼蓝鹰高密度住宅区累计恢复数
,sum(a.天翼蓝鹰高速) 天翼蓝鹰高速
,sum(a.天翼蓝鹰高速累计恢复数) 天翼蓝鹰高速累计恢复数
,sum(a.天翼蓝鹰高校) 天翼蓝鹰高校
,sum(a.天翼蓝鹰高校累计恢复数) 天翼蓝鹰高校累计恢复数
,sum(a.天翼蓝鹰美景) 天翼蓝鹰美景
,sum(a.天翼蓝鹰美景累计恢复数) 天翼蓝鹰美景累计恢复数
,sum(a.天翼蓝鹰美食) 天翼蓝鹰美食
,sum(a.天翼蓝鹰美食累计恢复数) 天翼蓝鹰美食累计恢复数
,sum(a.天翼蓝鹰农贸市场) 天翼蓝鹰农贸市场
,sum(a.天翼蓝鹰农贸市场累计恢复数) 天翼蓝鹰农贸市场累计恢复数
,sum(a.天翼蓝鹰战狼区域) 天翼蓝鹰战狼区域
,sum(a.天翼蓝鹰战狼区域累计恢复数) 天翼蓝鹰战狼区域累计恢复数
,sum(a.天翼蓝鹰中小学) 天翼蓝鹰中小学
,sum(a.天翼蓝鹰中小学累计恢复数) 天翼蓝鹰中小学累计恢复数
,sum(a.总派单量) 总派单量
,sum(a.总恢复量) 总恢复量
,CONCAT(ROUND((sum(a.总恢复量)/sum(a.总派单量))*100,2),'%') 总恢复比
from
(select #{CITY}
,sum(case when alarm_name='天翼蓝鹰场馆' then 1 else 0 end) 天翼蓝鹰场馆
,sum(case when alarm_name='天翼蓝鹰场馆' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰场馆累计恢复数
,sum(case when alarm_name='天翼蓝鹰高流量商务区' then 1 else 0 end) 天翼蓝鹰高流量商务区
,sum(case when alarm_name='天翼蓝鹰高流量商务区' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰高流量商务区累计恢复数
,sum(case when alarm_name='天翼蓝鹰高密度住宅区' then 1 else 0 end) 天翼蓝鹰高密度住宅区
,sum(case when alarm_name='天翼蓝鹰高密度住宅区' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰高密度住宅区累计恢复数
,sum(case when alarm_name='天翼蓝鹰高速' then 1 else 0 end) 天翼蓝鹰高速
,sum(case when alarm_name='天翼蓝鹰高速' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰高速累计恢复数
,sum(case when alarm_name='天翼蓝鹰高校' then 1 else 0 end) 天翼蓝鹰高校
,sum(case when alarm_name='天翼蓝鹰高校' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰高校累计恢复数
,sum(case when alarm_name='天翼蓝鹰美景' then 1 else 0 end) 天翼蓝鹰美景
,sum(case when alarm_name='天翼蓝鹰美景' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰美景累计恢复数
,sum(case when alarm_name='天翼蓝鹰美食' then 1 else 0 end) 天翼蓝鹰美食
,sum(case when alarm_name='天翼蓝鹰美食' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰美食累计恢复数
,sum(case when alarm_name='天翼蓝鹰农贸市场' then 1 else 0 end) 天翼蓝鹰农贸市场
,sum(case when alarm_name='天翼蓝鹰农贸市场' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰农贸市场累计恢复数
,sum(case when alarm_name='天翼蓝鹰战狼区域' then 1 else 0 end) 天翼蓝鹰战狼区域
,sum(case when alarm_name='天翼蓝鹰战狼区域' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰战狼区域累计恢复数
,sum(case when alarm_name='天翼蓝鹰中小学' then 1 else 0 end) 天翼蓝鹰中小学
,sum(case when alarm_name='天翼蓝鹰中小学' and recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 天翼蓝鹰中小学累计恢复数
,sum(1) 总派单量
,sum(case when recover_time >=#{START_DAY} and recover_time <=#{END_DAY} then 1 else 0 end) 总恢复量
FROM `alarm_info`
where alarm_type='天翼蓝鹰系统'
and ALARM_TIME >=#{START_DAY}
and ALARM_TIME <=#{END_DAY}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
group by #{CITY}
) a
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV3_getPoorAreaGisDataByIDList" description="根据弱区ID数组获取其轮廓">
<![CDATA[
SELECT
object_id,
gis_data
FROM FRT_AGPS_POOR_COVERAGE_D
WHERE DAY = #{DAY}
AND TYPE = 0
AND object_id in( #{OBJECTIDLIST})
AND grid_type = 20
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV3_getDISTRICTNAME" description="拿地市区县营服">
<![CDATA[
SELECT
	CITY_NAME,
	DISTRICT_NAME area_name,
	MKTCEN_NAME mkt_center_name
FROM
	dim_mktcenter_gis_data
WHERE
	CITY_NAME IS NOT NULL
AND DISTRICT_NAME IS NOT NULL
AND MKTCEN_NAME IS NOT NULL
GROUP BY
	CITY_NAME,
	DISTRICT_NAME,
	MKTCEN_NAME
]]>
</sqlTemplate>


<sqlTemplate id="IntelligentRoadTestAnalysisV3_getPoorAreaGisDataByID" description="根据场景ID和场景类型ID以及日期获取到该对象在某天的附近弱区">
<![CDATA[
select POOR_COVERAGE_SET , day , esbh_id , esbh_name from
	FRT_ESBH_INFO_D
where
	day = #{DAY}
and
	ESBH_ID = #{ESBH_ID}
	limit 1
]]>
</sqlTemplate>
<sqlTemplate id="test_sql_server" description="在SQLSERVER上查找某工单（无线前端总受理库或公众客户越级申诉）对应的电话号码" db="SQL Server">
<![CDATA[
select [客户电话] from yhsg.dbo.[无线前端总受理库-ABC] where [工单编号]='#{ORDERNO}'
union all
select [申告号码] from yhsg.dbo.[GDS-公众客户越级申诉] where [工单编号]='#{ORDERNO}'
]]>
</sqlTemplate>

<sqlTemplate id="WorkSheetDetailv3_0_getAppidParas" description="根据用户终端查询工单URL的前半部分">
<![CDATA[
SELECT paravalue
FROM dm_worksheet_pages
WHERE paraname = #{TYPE}
]]>
</sqlTemplate>

<sqlTemplate id="WorkSheetDetailv3_0_getWorkSheetParas" description="根据用户终端查询工单URL的后半部分">
<![CDATA[
SELECT
	REPLACE (
		SUBSTR(ALARM_TIME, 1, 10),
		'-',
		''
	) AS DAY,
	city,
	country,
	MKTCENTER,
	eNodeB_ID AS object_id, -- 对象ID（比如区域ID ，基站ID)
	cell_id , -- 扇区ID
	REPLACE (
		ALARM_NAME,
		'天翼蓝鹰',
		''
	) AS object_type
FROM
	alarm_info
WHERE
	ALARM_ID = #{WORKSHEETID}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysisV3_getSectorKPITrend" description="获取扇区的KPI速率历史趋势图" db="mysql">
<![CDATA[
SELECT
	DAY AS CREATE_TIME,
	round(MIN_USEREX_UPAVGRATE, 2) AS MIN_USEREX_UPAVGRATE,
	round(MIN_USEREX_DWAVGRATE, 2) AS MIN_USEREX_DWAVGRATE
FROM
	FRT_AGPS_PC_ENB_D
WHERE
	DAY BETWEEN #{STARTDAY}
AND #{ENDDAY}
AND ENODEB_ID = #{ENODEBID}
AND CELL_ID = #{CELLID}
ORDER BY
	DAY ASC
]]>
</sqlTemplate>

<sqlTemplate id="hotspotZoneAnalyzeV2_maxHour" description="获取热点区域最新的小时">
<![CDATA[
SELECT 
  MAX(a.`HOUR`) maxHour
FROM
  (SELECT 
    `HOUR`,
    COUNT(LATN_ID) latn_cnt 
  FROM
    frt_3gbts_user_city_h 
  GROUP BY `HOUR`) a 
WHERE a.latn_cnt = 21
]]>
</sqlTemplate>

<sqlTemplate id="hotspotZoneAnalyzeV2_hourTOPCity" description="获取小时热点区域top城市">
<![CDATA[
SELECT 
  LATN_ID,
  USER_CNT 
FROM
  FRT_3GBTS_USER_CITY_H 
WHERE HOUR = #{hour} 
  AND LATN_ID IS NOT NULL 
ORDER BY USER_CNT DESC ;
]]>
</sqlTemplate>

<sqlTemplate id="hotspotZoneAnalyzeV2_hourTOPRegion" description="获取小时热点区域top小区">
<![CDATA[
SELECT 
  BSC_ID,
  BASE_STATN_ID,
  BASE_STATN_NAME,
  USER_CNT 
FROM
  frt_3gbts_user_top100_h 
WHERE LATN_ID = #{latn_id} 
  AND HOUR = #{hour} 
GROUP BY BSC_ID,
  BASE_STATN_ID,
  BASE_STATN_Name,
  USER_CNT 
ORDER BY USER_CNT DESC ;
]]>
</sqlTemplate>

<sqlTemplate id="hotspotZoneAnalyzeV2_max5M" description="获取热点区域最新的5分钟">
<![CDATA[
SELECT 
  MAX(a.STS_TIME) minute
FROM
  (SELECT 
    STS_TIME,
    COUNT(LATN_ID) latn_cnt 
  FROM
    frt_3gbts_user_city_5m 
  GROUP BY STS_TIME) a 
WHERE a.latn_cnt = 21
]]>
</sqlTemplate>

<sqlTemplate id="hotspotZoneAnalyzeV2_5MTOPCity" description="获取5分钟热点区域top城市">
<![CDATA[
SELECT 
  LATN_ID,
  USER_CNT 
FROM
  frt_3gbts_user_city_5m 
WHERE STS_TIME = #{minute} 
  AND LATN_ID IS NOT NULL 
ORDER BY USER_CNT DESC ;
]]>
</sqlTemplate>


<sqlTemplate id="hotspotZoneAnalyzeV2_5MTOPRegion" description="获取5分钟热点区域top小区">
<![CDATA[
SELECT 
  BSC_ID,
  BASE_STATN_ID,
  BASE_STATN_NAME,
  USER_CNT 
FROM
  frt_3gbts_user_top100_5m 
WHERE LATN_ID = #{latn_id} 
  AND STS_TIME = #{minute} 
GROUP BY BSC_ID,
  BASE_STATN_ID,
  BASE_STATN_Name,
  USER_CNT 
ORDER BY USER_CNT DESC
]]>
</sqlTemplate>

<sqlTemplate id="hotspotZoneAnalyzeV2_5MProvinceUserNum" description="获取5分钟全省热力图">
<!-- (SELECT MAX(STS_TIME) FROM FRT_3GBTS_USERNUM_5M WHERE longitude NOT IN (0) AND latitude  NOT IN (0)) -->
<![CDATA[
SELECT 
  LATN_ID,
  BSC_ID,
  BASE_STATN_ID,
  longitude,
  latitude,
  Base_Statn_Name,
  STAY_USERNUM + IN_USERNUM AS USENUM 
FROM
  FRT_3GBTS_USERNUM_5M 
WHERE STS_TIME = #{STS_TIME}
ORDER BY LATN_ID,
  BSC_ID,
  BASE_STATN_ID 
]]>
</sqlTemplate>

<sqlTemplate id="hotspotZoneAnalyzeV2_5MRegionUserNum" description="获取5分钟区县热力图">
<![CDATA[
SELECT 
  LATN_ID,
  BSC_ID,
  BASE_STATN_ID,
  longitude,
  latitude,
  Base_Statn_Name,
  STAY_USERNUM + IN_USERNUM AS USENUM 
FROM
  FRT_3GBTS_USERNUM_5M 
WHERE STS_TIME = #{STS_TIME}
AND LATN_ID = #{LATN_ID}
ORDER BY 
  BSC_ID,
  BASE_STATN_ID
]]>
</sqlTemplate>

<sqlTemplate id="hotspotZoneAnalyzeV2_HourProvinceUserNum" description="获取小时全省热力图">
<!-- (SELECT MAX(`HOUR`) FROM FRT_3GBTS_USERNUM_H) -->
<![CDATA[
SELECT 
  LATN_ID,
  BSC_ID,
  BASE_STATN_ID,
  longitude,
  latitude,
  Base_Statn_Name,
  USERNUM 
FROM
  FRT_3GBTS_USERNUM_H 
WHERE HOUR = #{hour} 
ORDER BY LATN_ID,
  BSC_ID,
  BASE_STATN_ID 
]]>
</sqlTemplate>

<sqlTemplate id="hotspotZoneAnalyzeV2_HourRegionUserNum" description="获取小时区县热力图">
<![CDATA[
SELECT 
  LATN_ID,
  BSC_ID,
  BASE_STATN_ID,
  longitude,
  latitude,
  Base_Statn_Name,
  USERNUM 
FROM
  FRT_3GBTS_USERNUM_H 
WHERE HOUR = #{hour}  
AND LATN_ID = #{LATN_ID}
ORDER BY 
  BSC_ID,
  BASE_STATN_ID 
]]>
</sqlTemplate>

<sqlTemplate id="hotspotZoneAnalyzeV2_5MTop100ProvinceBaseStatn" description="获取5分钟全省的top100基站">
<![CDATA[
SELECT 
  LATN_ID,
  BSC_ID,
  BASE_STATN_ID,
  longitude_Baidu,
  latitude_Baidu,
  BASE_STATN_Name,
  USER_CNT,
  STS_TIME 
FROM
  FRT_3GBTS_USER_TOP100_5M 
WHERE STS_TIME = #{minute} 
  AND longitude_Baidu IS NOT NULL 
  AND latitude_Baidu IS NOT NULL 
GROUP BY LATN_ID,
  BSC_ID,
  BASE_STATN_ID,
  BASE_STATN_Name,
  USER_CNT,
  STS_TIME 
ORDER BY USER_CNT DESC
LIMIT 100
]]>
</sqlTemplate>

<sqlTemplate id="hotspotZoneAnalyzeV2_HourTop100ProvinceBaseStatn" description="获取小时全省的top100基站">
<![CDATA[
SELECT 
  LATN_ID,
  BSC_ID,
  BASE_STATN_ID,
  longitude_Baidu,
  latitude_Baidu,
  BASE_STATN_Name,
  USER_CNT,
  HOUR 
FROM
  FRT_3GBTS_USER_TOP100_H 
WHERE HOUR = #{hour} 
  AND longitude_Baidu IS NOT NULL 
  AND latitude_Baidu IS NOT NULL 
GROUP BY LATN_ID,
  BSC_ID,
  BASE_STATN_ID,
  BASE_STATN_Name,
  USER_CNT,
  HOUR 
ORDER BY USER_CNT DESC
LIMIT 100
]]>
</sqlTemplate>

<sqlTemplate id="hotspotZoneAnalyzeV2_5MTop100RegionBaseStatn" description="获取5分钟区县的top100基站">
<![CDATA[
SELECT 
  BSC_ID,
  BASE_STATN_ID,
  longitude_Baidu,
  latitude_Baidu,
  BASE_STATN_Name,
  USER_CNT,
  STS_TIME 
FROM
  FRT_3GBTS_USER_TOP100_5M 
WHERE LATN_ID = #{latn_id} 
  AND STS_TIME = #{minute} 
GROUP BY BSC_ID,
  BASE_STATN_ID,
  BASE_STATN_Name,
  USER_CNT
ORDER BY USER_CNT DESC ;
]]>
</sqlTemplate>

<sqlTemplate id="hotspotZoneAnalyzeV2_HourTop100RegionBaseStatn" description="获取小时区县的top100基站">
<![CDATA[
SELECT 
  BSC_ID,
  BASE_STATN_ID,
  longitude_Baidu,
  latitude_Baidu,
  BASE_STATN_Name,
  USER_CNT,
  HOUR 
FROM
  FRT_3GBTS_USER_TOP100_H 
WHERE LATN_ID = #{latn_id} 
  AND HOUR = #{hour} 
GROUP BY BSC_ID,
  BASE_STATN_ID,
  BASE_STATN_Name,
  USER_CNT 
ORDER BY USER_CNT DESC ;
]]>
</sqlTemplate>

<sqlTemplate id="hotspotZoneAnalyzeV2_HourBaseStatnTrendMap" description="获取小时基站趋势图">
<![CDATA[
SELECT
HOUR,
USERNUM
FROM
FRT_3GBTS_USERNUM_H
WHERE
HOUR between FROM_UNIXTIME(UNIX_TIMESTAMP(STR_TO_DATE(CONCAT(#{HOUR},''),'%Y%m%d%H'))-3600*24,'%Y%m%d%H')+0 and #{HOUR}
AND LATN_ID=#{LATN_ID} AND BSC_ID=#{BSC_ID} AND BASE_STATN_ID=#{BASE_STATN_ID}
GROUP BY HOUR
]]>
</sqlTemplate>

<sqlTemplate id="hotspotZoneAnalyzeV2_5MBaseStatnTrendMap" description="获取5分钟基站趋势图">
<![CDATA[
SELECT
STS_TIME,
STAY_USERNUM+IN_USERNUM AS USENUM
FROM
FRT_3GBTS_USERNUM_5M
WHERE
STS_TIME between FROM_UNIXTIME(UNIX_TIMESTAMP(STR_TO_DATE(CONCAT(#{STS_TIME},''),'%Y%m%d%H%i'))-3600*24,'%Y%m%d%H%i')+0 and #{STS_TIME} 
AND LATN_ID=#{LATN_ID} AND BSC_ID=#{BSC_ID} AND BASE_STATN_ID=#{BASE_STATN_ID}
GROUP BY STS_TIME
]]>
</sqlTemplate>

<sqlTemplate id="diffuseUserV2_OutsideProvinceDiffuse" description="省外漫入">
<![CDATA[
SELECT 
  HOME_PROVINCE,
  SUM(USERNUM) cnt_pro 
FROM
  FRT_3GROAMIN_USERNUM 
WHERE DAY = #{DAY} 
  AND Country = 'china' 
  AND LATN_ID = #{LATN_ID}
  AND HOME_PROVINCE <> '广东'
  AND HOME_PROVINCE <> 'null' 
GROUP BY HOME_PROVINCE 
ORDER BY cnt_pro DESC
]]>
</sqlTemplate>

<sqlTemplate id="diffuseUserV2_ProvinceDiffuse_Get_Into" description="省内漫入">
<![CDATA[
SELECT 
  LATN_ID,
  SUM(USERNUM) cnt 
FROM
  FRT_3GROAMIN_USERNUM 
WHERE DAY = #{DAY} 
  AND Country = 'china' 
  AND HOME_PROVINCE = '广东' 
  AND LATN_ID <> HOME_LATN_ID 
  AND LATN_ID NOT IN (0,1000)
GROUP BY LATN_ID 
ORDER BY cnt DESC
]]>
</sqlTemplate>

<sqlTemplate id="diffuseUserV2_ProvinceRegionDiffuse_Get_Into" description="省内地市漫入">
<![CDATA[
SELECT 
  HOME_LATN_ID,
  USERNUM
FROM
  FRT_3GROAMIN_USERNUM 
WHERE DAY = #{DAY} 
  AND Country = 'china' 
  AND HOME_PROVINCE = '广东' 
  AND LATN_ID <> HOME_LATN_ID 
  AND LATN_ID = #{LATN_ID}
ORDER BY USERNUM DESC 
]]>
</sqlTemplate>

<sqlTemplate id="diffuseUserV2_ProvinceDiffuse_Get_Out" description="省内漫出">
<![CDATA[
SELECT 
  HOME_LATN_ID,
  SUM(USERNUM) cnt 
FROM
  FRT_3GROAMIN_USERNUM 
WHERE DAY = #{DAY}
  AND Country = 'china' 
  AND HOME_PROVINCE = '广东' 
  AND LATN_ID <> HOME_LATN_ID 
  AND LATN_ID NOT IN (0, 1000)
GROUP BY HOME_LATN_ID 
ORDER BY cnt DESC
]]>
</sqlTemplate>

<sqlTemplate id="diffuseUserV2_ProvinceRegionDiffuse_Get_Out" description="省内地市漫出">
<![CDATA[
SELECT 
  LATN_ID,
  USERNUM
FROM
  FRT_3GROAMIN_USERNUM 
WHERE DAY = #{DAY} 
  AND Country = 'china' 
  AND HOME_PROVINCE = '广东' 
  AND LATN_ID <> HOME_LATN_ID 
  AND LATN_ID NOT IN (0, 1000) 
  AND HOME_LATN_ID = #{LATN_ID} 
ORDER BY USERNUM DESC 
]]>
</sqlTemplate>

<sqlTemplate id="diffuseUserV2_InternationalDiffuse_Get_Into" description="国外漫入">
<![CDATA[
SELECT 
  LATN_ID,
  USERNUM 
FROM
  FRT_3GROAMIN_USERNUM 
WHERE DAY = #{DAY} 
  AND Country = 'foreign' 
  AND LATN_ID NOT IN (0, 1000) 
ORDER BY USERNUM DESC 
]]>
</sqlTemplate>

<sqlTemplate id="diffuseUserV2_LatestDate" description="用户漫游的最新时间">
<![CDATA[
SELECT 
  MAX(DAY) DAY
FROM
  FRT_3GROAMIN_USERNUM 
ORDER BY DAY DESC 
]]>
</sqlTemplate>


<sqlTemplate id="IntelligentRoadTestAnalysisV3_getNewAddSenseBaiduGisData" description="根据id和type获取新增的场景的经纬度集合" >
<![CDATA[
SELECT
	obj_id,
	obj_type,
	gis_data_baidu,
	longitude_mid_baidu,
	latitude_mid_baidu,
	longitude_min_baidu,
	latitude_min_baidu,
	longitude_max_baidu,
	latitude_max_baidu
from
	dm_scene_area_gis_che
WHERE
	obj_type = '#{OBJ_TYPE}'
AND obj_id = #{OBJ_ID}
limit 1
]]>
</sqlTemplate>


<sqlTemplate id="IntelligentRoadTestAnalysisV2_getNewPageUrl" description="获取到最新版本的天翼蓝鹰的url" >
<![CDATA[
SELECT
	paravalue
from
	dm_worksheet_pages
WHERE
	paraname = 'PC'
limit 1
]]>
</sqlTemplate>


<sqlTemplate id="YJ_DilatancyCell_Img" description="当前扩容小区趋势图" >
<![CDATA[
SELECT 
  band_width,
  `DAY`,
  COUNT(1) COUNT
FROM
  frt_cell_ext_tot_d 
WHERE TYPE = 'YJ' 
  #{CITY_ID}
  AND `DAY` BETWEEN #{MOUTH}*100+1 AND #{MOUTH}*100+31
GROUP BY band_width,
  `DAY` 
ORDER BY DAY 
]]>
</sqlTemplate>

<sqlTemplate id="YJ_DilatancyCell_Tab" description="当前扩容小区表格" >
<![CDATA[
SELECT 
  city,
  Base_statn_id,
  Cell_id,
  Cell_Name,
  Factory,
  down_band,
  band_width,
  LONGITUDE,
  LATITUDE,
  IS_INDOOR,
  rru_rxport_num,
  rru_txport_num,
  ROUND(FLOW_ALL,2) FLOW_ALL,
  CEIL(RRC_Users) RRC_Users,
  USER_CNT,
  ROUND(DW_PRB_USERATE_AVG,2) DW_PRB_USERATE_AVG
FROM
  frt_cell_ext_tot_d 
WHERE TYPE = 'YJ' 
  #{CITY_ID}
  AND `DAY` = #{DAY} 
]]>
</sqlTemplate>

<sqlTemplate id="YC_DilatancyCell_Img" description="预测扩容小区趋势图" >
<![CDATA[
SELECT 
  band_width,
  `DAY`,
  COUNT(1) COUNT
FROM
  frt_cell_ext_tot_d 
WHERE TYPE = 'YC' 
  #{CITY_ID}
  AND `DAY` BETWEEN #{MOUTH}*100+1 AND #{MOUTH}*100+31
GROUP BY band_width,
  `DAY` 
ORDER BY DAY 
]]>
</sqlTemplate>

<sqlTemplate id="YC_DilatancyCell_Tab" description="预测扩容小区表格" >
<![CDATA[
SELECT 
  city,
  Base_statn_id,
  Cell_id,
  Cell_Name,
  Factory,
  down_band,
  band_width,
  LONGITUDE,
  LATITUDE,
  IS_INDOOR,
  rru_rxport_num,
  rru_txport_num,
  ROUND(FLOW_ALL,2) FLOW_ALL,
  CEIL(RRC_Users) RRC_Users,
  USER_CNT,
  ROUND(DW_PRB_USERATE_AVG,2) DW_PRB_USERATE_AVG
FROM
  frt_cell_ext_tot_d 
WHERE TYPE = 'YC' 
  #{CITY_ID}
  AND `DAY` = #{DAY} 
]]>
</sqlTemplate>

<sqlTemplate id="DilatancyCell_Tab_NewDate" description="扩容小区最新的日期" >
<![CDATA[
SELECT 
  MAX(DAY) DAY
FROM
  frt_cell_ext_tot_d 
ORDER BY DAY DESC 
]]>
</sqlTemplate>

<sqlTemplate id="badCellAnalysis_03_querythreshold" description="从表DIM_KQI_THRESHOLD_DPI查询门限值" DB="mysql">
<![CDATA[
SELECT SUM(a.first_threshold) AS WEBPAGE_TCP_SynAck_DL -- 第1段时延门限
,SUM(a.second_threshold) AS WEBPAGE_TCP_Ack_DL -- 第2段时延门限
,SUM(a.third_threshold) AS WEBPAGE_WIRELESS_DT2 -- 第3段时延门限
,SUM(a.fourth_threshold) AS WEBPAGE_HTTP_DELAY -- 第4段时延门限
,SUM(a.fifth_threshold) AS FIN_DELAY -- 第5段时延门限
FROM
(SELECT
CASE WHEN KQI='WEBPAGE_TCP_SynAck_DL' THEN LOW ELSE 0 END as first_threshold,
CASE WHEN KQI='WEBPAGE_TCP_Ack_DL' THEN LOW  ELSE 0 END as second_threshold,
CASE WHEN KQI='WEBPAGE_WIRELESS_DT2' THEN LOW ELSE 0 END as third_threshold,
CASE WHEN KQI='WEBPAGE_HTTP_DELAY' THEN LOW ELSE 0 END as fourth_threshold,
CASE WHEN KQI='FIN_DELAY' THEN LOW ELSE 0 END as fifth_threshold
FROM
dim_kqi_threshold_dpi
WHERE
NETTYPE='4G'
AND KQI_LEVEL=3) a
]]>
</sqlTemplate>



<sqlTemplate id="badCellAnalysis_01_queryresult_hbase" description="根据需求在表4.19 DSI_WIRELESS_KPI_STAT_D_MX查询数据" DB="hbase">
    <![CDATA[
#{KEY}
NOCE:DSI_WIRELESS_KPI_STAT_D_M#{MONTH}
#{KEYLIST}
i:a1,i:a2,i:a17,i:b1,i:b2,i:b3,i:b4,i:b5,i:b6

]]>
</sqlTemplate>
<sqlTemplate id="badCellAnalysis_01_queryresult_hbase_v2" description="根据需求在表4.19 DSI_WIRELESS_KPI_STAT_D_MX查询数据_整合在智能调优" DB="hbase">
 <![CDATA[
#{KEY}
NOCE:DSI_WIRELESS_KPI_STAT_D_M#{MONTH}
#{KEYLIST}
i:a1,i:a2,i:a17
]]>
</sqlTemplate>
	<sqlTemplate id="badCellAnalysis_m06_cellquery_cellquery" description="根据用户选择的基站查询小区" DB="hbase">
		<![CDATA[
SELECT
`DAY`,
BASE_STATN_ID,
CELL_ID
FROM
dim_sector
WHERE
(#{DATE})
AND (#{BASE_STATN_ID})
ORDER BY
BASE_STATN_ID,CELL_ID,`DAY`

]]>
	</sqlTemplate>


    <sqlTemplate id="badCellAnalysis_cellquery_intelligentroadtestanalysisv3_sector" description="质差小区地理位置分析跳转到智能测评扇区详情页所需字段" DB="hbase">
        <![CDATA[
SELECT
`DAY`,
CITY_ID,
CITY_NAME,
AREA_ID,
AREA_NAME,
MKT_CENTER_CODE,
MKT_CENTER_NAME,
BASE_STATN_ID,
BASE_STATN_NAME,
CELL_ID,
CELL_NAME
FROM dim_sector
WHERE `DAY`=#{DAY}
AND CITY_ID=#{CITY_ID}
AND BASE_STATN_ID=#{BASE_STATN_ID}
AND CELL_ID=#{CELL_ID}
AND NETTYPE='4G'

]]>
    </sqlTemplate>

<sqlTemplate id="WirelessDataCheck_02_map_MonthWeekDay" description="地图月周日数据查询，全省各地市数据（基站级和小区级）">
<![CDATA[
SELECT
	b.*,
	ROUND((b.bst_mr_ratio + b.bst_agps_ratio + b.MR_FIELDS_RATIO) / 3,2) bst_mr_all_ratio,-- MR数据优良率基站级
	ROUND((b.cell_mr_ratio + b.cell_agps_ratio + b.MR_FIELDS_RATIO) / 3,2) cell_mr_all_ratio,-- MR数据优良率小区级
	ROUND((b.bst_cdr_ratio + b.CDR_FIELDS_RATIO) / 2,2) AS bst_cdr_all_ratio,-- CDR数据优良率基站级
	ROUND((b.cell_cdr_ratio + b.CDR_FIELDS_RATIO) / 2,2) AS cell_cdr_all_ratio -- CDR数据优良率小区级
FROM
	(SELECT
			a.City,
			ROUND(mrEnbNum / TotalEnbNum * 100, 2) bst_mr_ratio,-- MR基站上报完整率
			ROUND(mrCellNum / TotalCellNum * 100,2) cell_mr_ratio,-- MR小区上报完整率
			ROUND(agpsEnbNum / mrEnbNum * 100, 2) bst_agps_ratio,	-- AGPS开启基站完整率
			ROUND(agpsCellNum / mrCellNum * 100,2) cell_agps_ratio,	-- AGPS开启小区完整率
			ROUND((MR_LteScSinrUL_SUM + MR_LteScRI_SUM + MR_CQI_SUM + MR_LteScRIP_SUM + MR_eNodeBId_SUM + MR_objectId_SUM + MR_MmeUeS1apId_SUM + MR_MmeGroupId_SUM + MR_MmeCode_SUM) / 9 / MR_REC_SUM * 100,2) MR_FIELDS_RATIO,	-- MR关键字段非空率
			ROUND(cdrEnbNum / TotalEnbNum * 100,2) bst_cdr_ratio,	-- CDR基站上报完整率
			ROUND(cdrCellNum / TotalCellNum * 100,2) cell_cdr_ratio,-- CDR小区上报完整率
			ROUND((CDR_MMEGroupID_SUM + CDR_MMECode_SUM + CDR_eNodeBID_SUM + CDR_MmeUeS1APID_SUM + CDR_eNBUeS1APID_SUM + CDR_StartTime_SUM + CDR_EndTime_SUM + AC_MR_LteScCQI0_SUM + AC_RRCEndTime_SUM + ERAB_QCI1_SUM) / 10 / CDR_REC_SUM * 100,2) CDR_FIELDS_RATIO -- CDR关键字段非空率
		FROM
			(SELECT
					City,
					SUM(mrEnbNum) mrEnbNum,
					SUM(mrCellNum) mrCellNum,
					SUM(TotalEnbNum) TotalEnbNum,
					SUM(TotalCellNum) TotalCellNum,
					SUM(agpsEnbNum) agpsEnbNum,
					SUM(agpsCellNum) agpsCellNum,
					SUM(MR_REC_SUM) MR_REC_SUM,
					SUM(MR_LteScSinrUL_SUM) MR_LteScSinrUL_SUM,
					SUM(MR_LteScRI_SUM) MR_LteScRI_SUM,
					SUM(MR_CQI_SUM) MR_CQI_SUM,
					SUM(MR_LteScRIP_SUM) MR_LteScRIP_SUM,
					SUM(MR_PLMN_SUM) MR_PLMN_SUM,
					SUM(MR_eNodeBId_SUM) MR_eNodeBId_SUM,
					SUM(MR_objectId_SUM) MR_objectId_SUM,
					SUM(MR_MmeUeS1apId_SUM) MR_MmeUeS1apId_SUM,
					SUM(MR_MmeGroupId_SUM) MR_MmeGroupId_SUM,
					SUM(MR_MmeCode_SUM) MR_MmeCode_SUM,
					SUM(cdrEnbNum) cdrEnbNum,
					SUM(cdrCellNum) cdrCellNum,
					SUM(CDR_REC_SUM) CDR_REC_SUM,
					SUM(CDR_MMEGroupID_SUM) CDR_MMEGroupID_SUM,
					SUM(CDR_MMECode_SUM) CDR_MMECode_SUM,
					SUM(CDR_eNodeBID_SUM) CDR_eNodeBID_SUM,
					SUM(CDR_MmeUeS1APID_SUM) CDR_MmeUeS1APID_SUM,
					SUM(CDR_eNBUeS1APID_SUM) CDR_eNBUeS1APID_SUM,
					SUM(CDR_StartTime_SUM) CDR_StartTime_SUM,
					SUM(CDR_EndTime_SUM) CDR_EndTime_SUM,
					SUM(AC_MR_LteScCQI0_SUM) AC_MR_LteScCQI0_SUM,
					SUM(AC_RRCEndTime_SUM) AC_RRCEndTime_SUM,
					SUM(ERAB_QCI1_SUM) ERAB_QCI1_SUM
				FROM
					frt_wrl_data_chk_d
			    WHERE DAY BETWEEN #{STARTTIME} AND #{ENDTIME}
				AND City IS NOT NULL
				GROUP BY City
			) a GROUP BY city
	) b GROUP BY city
]]>
</sqlTemplate>
<sqlTemplate id="WirelessDataCheck_03_cell_list_Day" description="问题清单数据查询，小区、基站级日MR总指标优良率、CDR总指标优良率、MR数据完整率、AGPS开启完整率、CDR记录完整率">
<![CDATA[
SELECT Day,
City_ID,
City,
Area_Name,
eNodeB_Name,
eNodeB_ID
#{CELLCONDITIONGROUP}
FROM frt_wrl_chk_bug#{TABLEPARTION}_d
WHERE DAY = #{DAY}
#{BUGTYPE}
#{CITY}
#{AREA}
AND City IS NOT NULL
]]>
</sqlTemplate>
<sqlTemplate id="WirelessDataCheck_04_cell_list_non-empty_Day" description="问题清单数据查询，小区、基站级日MR关键字段非空率">
<![CDATA[
SELECT Day,
City_ID,
City,
Area_Name,
eNodeB_Name,
eNodeB_ID,
#{CELLCONDITION}
ROUND(MR_LteScSinrUL_CNT/MR_REC_CNT*100,2) MR_LteScSinrUL_ratio,-- MR.LteScSinrUL非空率
ROUND(MR_LteScRI_CNT/MR_REC_CNT*100,2) MR_LteScRI_ratio,-- MR.LteScRI非空率
ROUND(MR_CQI_CNT/MR_REC_CNT*100,2) MR_CQI_ratio,-- MR.CQI非空率
ROUND(MR_LteScRIP_CNT/MR_REC_CNT*100,2) MR_LteScRIP_ratio,-- MR.LteScRIP非空率
ROUND(MR_PLMN_CNT/MR_REC_CNT*100,2) MR_PLMN_ratio,-- MR.PLMN未非空率
ROUND(MR_eNodeBId_CNT/MR_REC_CNT*100,2) MR_eNodeBId_ratio,-- MR.eNodeBId非空率
ROUND(MR_objectId_CNT/MR_REC_CNT*100,2) MR_objectId_ratio,-- MR.objectId非空率
ROUND(MR_MmeUeS1apId_CNT/MR_REC_CNT*100,2) MR_MmeUeS1apId_ratio,-- MR.MmeUeS1apId非空率
ROUND(MR_MmeGroupId_CNT/MR_REC_CNT*100,2) MR_MmeGroupId_ratio,-- MR.MmneGroupId非空率
ROUND(MR_MmeCode_CNT/MR_REC_CNT*100,2) MR_MmeCode_ratio -- MR.MmeCode非空率
FROM frt_wrl_chk_bug#{TABLEPARTION}_d
WHERE DAY = #{DAY}
AND BUG_TYPE = 'NN_MR'
#{CITY}
#{AREA}
AND City IS NOT NULL
]]>
</sqlTemplate>
<sqlTemplate id="WirelessDataCheck_05_cell_list_non-empty_Day" description="问题清单数据查询，小区级、基站级日CDR关键字段非空率">
<![CDATA[
SELECT Day,
City_ID,
City,
Area_Name,
eNodeB_Name,
eNodeB_ID,
#{CELLCONDITION}
ROUND(CDR_MMEGroupID_CNT/CDR_REC_CNT*100,2) CDR_MMEGroupID_ratio,-- CDR_MMEGroupID非空率
ROUND(CDR_MMECode_CNT/CDR_REC_CNT*100,2) CDR_MMECode_ratio,-- CDR_MMECode非空率
ROUND(CDR_eNodeBID_CNT/CDR_REC_CNT*100,2) CDR_eNodeBID_ratio,-- CDR_eNodeBID非空率
ROUND(CDR_MmeUeS1APID_CNT/CDR_REC_CNT*100,2) CDR_MmeUeS1APID_ratio,-- CDR_MmeUeS1APID非空率
ROUND(CDR_eNBUeS1APID_CNT/CDR_REC_CNT*100,2) CDR_eNBUeS1APID_ratio,-- CDR_eNBUeS1APID非空率
ROUND(CDR_StartTime_CNT/CDR_REC_CNT*100,2) CDR_StartTime_ratio,-- CDR_StartTime非空率
ROUND(CDR_EndTime_CNT/CDR_REC_CNT*100,2) CDR_EndTime_ratio,-- CDR_EndTime非空率
ROUND(AC_MR_LteScCQI0_CNT/CDR_REC_CNT*100,2) AC_MR_LteScCQI0_ratio,-- AC_MR_LteScCQI0非空率
ROUND(AC_RRCEndTime_CNT/CDR_REC_CNT*100,2) AC_RRCEndTime_ratio,-- AC_RRCEndTime非空率
ROUND(ERAB_QCI1_CNT/CDR_REC_CNT*100,2) ERAB_QCI1_ratio -- ERAB_QCI1非空率
FROM frt_wrl_chk_bug#{TABLEPARTION}_d
WHERE DAY = #{DAY}
AND BUG_TYPE = 'NN_CDR'
#{CITY}
#{AREA}
AND City IS NOT NULL
]]>
</sqlTemplate>
<sqlTemplate id="WirelessDataCheck_06_cell_list_monthWeek" description="问题清单数据查询，小区、基站级月、周MR总指标优良率、CDR总指标优良率、MR数据完整率、AGPS开启完整率、CDR记录完整率">
<![CDATA[
SELECT
City_ID,
City,
Area_Name,
eNodeB_Name,
eNodeB_ID,
#{CELLCONDITION}
count(day) countDay
FROM frt_wrl_chk_bug#{TABLEPARTION}_d
WHERE DAY BETWEEN #{STARTTIME} AND #{ENDTIME}
#{BUGTYPE}
#{CITY}
#{AREA}
AND City IS NOT NULL
GROUP BY City_ID,City,Area_Name,eNodeB_Name,eNodeB_ID#{CELLCONDITIONGROUP}
]]>
</sqlTemplate>
<sqlTemplate id="WirelessDataCheck_07_cellMR_list_non-empty_monthWeek" description="问题清单数据查询，小区、基站级月、周MR关键字段非空率">
<![CDATA[
SELECT
City_ID,
City,
Area_Name,
eNodeB_Name,
eNodeB_ID,
#{CELLCONDITION}
SUM(CASE WHEN MR_LteScSinrUL_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_LteScSinrUL_count,-- MR.LteScSinrUL未达标天数
SUM(CASE WHEN MR_LteScRI_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_LteScRI_count,-- MR.LteScRI未达标天数
SUM(CASE WHEN MR_CQI_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_CQI_count,-- MR.CQI未达标天数
SUM(CASE WHEN MR_LteScRIP_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_LteScRIP_count,-- MR.LteScRIP未达标天数
SUM(CASE WHEN MR_PLMN_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_PLMN_count,-- MR.PLMN未达标天数
SUM(CASE WHEN MR_eNodeBId_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_eNodeBId_count,-- MR.eNodeBId未达标天数
SUM(CASE WHEN MR_objectId_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_objectId_count,-- MR.objectId未达标天数
SUM(CASE WHEN MR_MmeUeS1apId_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_MmeUeS1apId_count,-- MR.MmeUeS1apId未达标天数
SUM(CASE WHEN MR_MmeGroupId_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_MmeGroupId_count,-- MR.MmneGroupId未达标天数
SUM(CASE WHEN MR_MmeCode_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_MmeCode_count -- MR.MmeCode未达标天数
FROM frt_wrl_chk_bug#{TABLEPARTION}_d
WHERE DAY BETWEEN #{STARTTIME} AND #{ENDTIME}
AND BUG_TYPE = 'NN_MR'
#{CITY}
#{AREA}
AND City IS NOT NULL
 GROUP BY City_ID,City,Area_Name,eNodeB_Name,eNodeB_ID#{CELLCONDITIONGROUP}
 ]]>
</sqlTemplate>
<sqlTemplate id="WirelessDataCheck_08_cellCDR_list_non-empty_monthWeek" description="问题清单数据查询，小区、基站级月、周CDR关键字段非空率">
<![CDATA[
SELECT
City_ID,
City,
Area_Name,
eNodeB_Name,
eNodeB_ID,
#{CELLCONDITION}
SUM(CASE WHEN CDR_MMEGroupID_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) CDR_MMEGroupID_count,-- CDR_MMEGroupID未达标天数
SUM(CASE WHEN CDR_MMECode_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) CDR_MMECode_count,-- CDR_MMECode未达标天数
SUM(CASE WHEN CDR_eNodeBID_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) CDR_eNodeBID_count,-- CDR_eNodeBID未达标天数
SUM(CASE WHEN CDR_MmeUeS1APID_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) CDR_MmeUeS1APID_count,-- CDR_MmeUeS1APID未达标天数
SUM(CASE WHEN CDR_eNBUeS1APID_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) CDR_eNBUeS1APID_count,-- CDR_eNBUeS1APID未达标天数
SUM(CASE WHEN CDR_StartTime_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) CDR_StartTime_count,-- CDR_StartTime未达标天数
SUM(CASE WHEN CDR_EndTime_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) CDR_EndTime_count,-- CDR_EndTime未达标天数
SUM(CASE WHEN AC_MR_LteScCQI0_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) AC_MR_LteScCQI0_count,-- AC_MR_LteScCQI0未达标天数
SUM(CASE WHEN AC_RRCEndTime_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) AC_RRCEndTime_count,-- AC_RRCEndTime未达标天数
SUM(CASE WHEN ERAB_QCI1_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) CERAB_QCI1_count -- ERAB_QCI1未达标天数
FROM frt_wrl_chk_bug#{TABLEPARTION}_d
WHERE DAY BETWEEN #{STARTTIME} AND #{ENDTIME}
AND BUG_TYPE = 'NN_CDR'
#{CITY}
#{AREA}
AND City IS NOT NULL
GROUP BY City_ID,City,Area_Name,eNodeB_Name,eNodeB_ID#{CELLCONDITIONGROUP}
]]>

</sqlTemplate>

<sqlTemplate id="WirelessDataCheck_03_cell_list_Day_count" description="问题清单数据查询，小区、基站级日MR总指标优良率、CDR总指标优良率、MR数据完整率、AGPS开启完整率、CDR记录完整率">
<![CDATA[
select count(*) countNum from (
SELECT Day,
City_ID,
City,
Area_Name,
eNodeB_Name,
eNodeB_ID
#{CELLCONDITIONGROUP}
FROM frt_wrl_chk_bug#{TABLEPARTION}_d
WHERE DAY = #{DAY}
#{BUGTYPE}
#{CITY}
#{AREA}
AND City IS NOT NULL
) a
]]>
</sqlTemplate>
<sqlTemplate id="WirelessDataCheck_04_cell_list_non-empty_Day_count" description="问题清单数据查询，小区、基站级日MR关键字段非空率">
<![CDATA[
select count(*) countNum from (
SELECT Day,
City_ID,
City,
Area_Name,
eNodeB_Name,
eNodeB_ID,
#{CELLCONDITION}
ROUND(MR_LteScSinrUL_CNT/MR_REC_CNT*100,2) MR_LteScSinrUL_ratio,-- MR.LteScSinrUL非空率
ROUND(MR_LteScRI_CNT/MR_REC_CNT*100,2) MR_LteScRI_ratio,-- MR.LteScRI非空率
ROUND(MR_CQI_CNT/MR_REC_CNT*100,2) MR_CQI_ratio,-- MR.CQI非空率
ROUND(MR_LteScRIP_CNT/MR_REC_CNT*100,2) MR_LteScRIP_ratio,-- MR.LteScRIP非空率
ROUND(MR_PLMN_CNT/MR_REC_CNT*100,2) MR_PLMN_ratio,-- MR.PLMN未非空率
ROUND(MR_eNodeBId_CNT/MR_REC_CNT*100,2) MR_eNodeBId_ratio,-- MR.eNodeBId非空率
ROUND(MR_objectId_CNT/MR_REC_CNT*100,2) MR_objectId_ratio,-- MR.objectId非空率
ROUND(MR_MmeUeS1apId_CNT/MR_REC_CNT*100,2) MR_MmeUeS1apId_ratio,-- MR.MmeUeS1apId非空率
ROUND(MR_MmeGroupId_CNT/MR_REC_CNT*100,2) MR_MmeGroupId_ratio,-- MR.MmneGroupId非空率
ROUND(MR_MmeCode_CNT/MR_REC_CNT*100,2) MR_MmeCode_ratio -- MR.MmeCode非空率
FROM frt_wrl_chk_bug#{TABLEPARTION}_d
WHERE DAY = #{DAY}
AND BUG_TYPE = 'NN_MR'
#{CITY}
#{AREA}
AND City IS NOT NULL
) a
]]>
</sqlTemplate>
<sqlTemplate id="WirelessDataCheck_05_cell_list_non-empty_Day_count" description="问题清单数据查询，小区级、基站级日CDR关键字段非空率">
<![CDATA[
select count(*) countNum from (
SELECT Day,
City_ID,
City,
Area_Name,
eNodeB_Name,
eNodeB_ID,
#{CELLCONDITION}
ROUND(CDR_MMEGroupID_CNT/CDR_REC_CNT*100,2) CDR_MMEGroupID_ratio,-- CDR_MMEGroupID非空率
ROUND(CDR_MMECode_CNT/CDR_REC_CNT*100,2) CDR_MMECode_ratio,-- CDR_MMECode非空率
ROUND(CDR_eNodeBID_CNT/CDR_REC_CNT*100,2) CDR_eNodeBID_ratio,-- CDR_eNodeBID非空率
ROUND(CDR_MmeUeS1APID_CNT/CDR_REC_CNT*100,2) CDR_MmeUeS1APID_ratio,-- CDR_MmeUeS1APID非空率
ROUND(CDR_eNBUeS1APID_CNT/CDR_REC_CNT*100,2) CDR_eNBUeS1APID_ratio,-- CDR_eNBUeS1APID非空率
ROUND(CDR_StartTime_CNT/CDR_REC_CNT*100,2) CDR_StartTime_ratio,-- CDR_StartTime非空率
ROUND(CDR_EndTime_CNT/CDR_REC_CNT*100,2) CDR_EndTime_ratio,-- CDR_EndTime非空率
ROUND(AC_MR_LteScCQI0_CNT/CDR_REC_CNT*100,2) AC_MR_LteScCQI0_ratio,-- AC_MR_LteScCQI0非空率
ROUND(AC_RRCEndTime_CNT/CDR_REC_CNT*100,2) AC_RRCEndTime_ratio,-- AC_RRCEndTime非空率
ROUND(ERAB_QCI1_CNT/CDR_REC_CNT*100,2) ERAB_QCI1_ratio -- ERAB_QCI1非空率
FROM frt_wrl_chk_bug#{TABLEPARTION}_d
WHERE DAY = #{DAY}
AND BUG_TYPE = 'NN_CDR'
#{CITY}
#{AREA}
AND City IS NOT NULL
) a
]]>
</sqlTemplate>
<sqlTemplate id="WirelessDataCheck_06_cell_list_monthWeek_count" description="问题清单数据查询，小区、基站级月、周MR总指标优良率、CDR总指标优良率、MR数据完整率、AGPS开启完整率、CDR记录完整率">
<![CDATA[
select count(*) countNum from (
SELECT
City_ID,
City,
Area_Name,
eNodeB_Name,
eNodeB_ID,
#{CELLCONDITION}
count(day) countDay
FROM frt_wrl_chk_bug#{TABLEPARTION}_d
WHERE DAY BETWEEN #{STARTTIME} AND #{ENDTIME}
#{BUGTYPE}
#{CITY}
#{AREA}
AND City IS NOT NULL
GROUP BY City_ID,City,Area_Name,eNodeB_Name,eNodeB_ID#{CELLCONDITIONGROUP} ) a
]]>
</sqlTemplate>
<sqlTemplate id="WirelessDataCheck_07_cellMR_list_non-empty_monthWeek_count" description="问题清单数据查询，小区、基站级月、周MR关键字段非空率">
<![CDATA[
select count(*) countNum from (
SELECT
City_ID,
City,
Area_Name,
eNodeB_Name,
eNodeB_ID,
#{CELLCONDITION}
SUM(CASE WHEN MR_LteScSinrUL_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_LteScSinrUL_count,-- MR.LteScSinrUL未达标天数
SUM(CASE WHEN MR_LteScRI_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_LteScRI_count,-- MR.LteScRI未达标天数
SUM(CASE WHEN MR_CQI_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_CQI_count,-- MR.CQI未达标天数
SUM(CASE WHEN MR_LteScRIP_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_LteScRIP_count,-- MR.LteScRIP未达标天数
SUM(CASE WHEN MR_PLMN_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_PLMN_count,-- MR.PLMN未达标天数
SUM(CASE WHEN MR_eNodeBId_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_eNodeBId_count,-- MR.eNodeBId未达标天数
SUM(CASE WHEN MR_objectId_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_objectId_count,-- MR.objectId未达标天数
SUM(CASE WHEN MR_MmeUeS1apId_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_MmeUeS1apId_count,-- MR.MmeUeS1apId未达标天数
SUM(CASE WHEN MR_MmeGroupId_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_MmeGroupId_count,-- MR.MmneGroupId未达标天数
SUM(CASE WHEN MR_MmeCode_CNT/MR_REC_CNT<0.95 THEN 1 ELSE 0 END) MR_MmeCode_count -- MR.MmeCode未达标天数
FROM frt_wrl_chk_bug#{TABLEPARTION}_d
WHERE DAY BETWEEN #{STARTTIME} AND #{ENDTIME}
AND BUG_TYPE = 'NN_MR'
#{CITY}
#{AREA}
AND City IS NOT NULL
 GROUP BY City_ID,City,Area_Name,eNodeB_Name,eNodeB_ID#{CELLCONDITIONGROUP} ) a
 ]]>
</sqlTemplate>
<sqlTemplate id="WirelessDataCheck_08_cellCDR_list_non-empty_monthWeek_count" description="问题清单数据查询，小区、基站级月、周CDR关键字段非空率">
<![CDATA[
select count(*) countNum from (
SELECT
City_ID,
City,
Area_Name,
eNodeB_Name,
eNodeB_ID,
#{CELLCONDITION}
SUM(CASE WHEN CDR_MMEGroupID_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) CDR_MMEGroupID_count,-- CDR_MMEGroupID未达标天数
SUM(CASE WHEN CDR_MMECode_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) CDR_MMECode_count,-- CDR_MMECode未达标天数
SUM(CASE WHEN CDR_eNodeBID_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) CDR_eNodeBID_count,-- CDR_eNodeBID未达标天数
SUM(CASE WHEN CDR_MmeUeS1APID_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) CDR_MmeUeS1APID_count,-- CDR_MmeUeS1APID未达标天数
SUM(CASE WHEN CDR_eNBUeS1APID_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) CDR_eNBUeS1APID_count,-- CDR_eNBUeS1APID未达标天数
SUM(CASE WHEN CDR_StartTime_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) CDR_StartTime_count,-- CDR_StartTime未达标天数
SUM(CASE WHEN CDR_EndTime_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) CDR_EndTime_count,-- CDR_EndTime未达标天数
SUM(CASE WHEN AC_MR_LteScCQI0_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) AC_MR_LteScCQI0_count,-- AC_MR_LteScCQI0未达标天数
SUM(CASE WHEN AC_RRCEndTime_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) AC_RRCEndTime_count,-- AC_RRCEndTime未达标天数
SUM(CASE WHEN ERAB_QCI1_CNT/CDR_REC_CNT<0.95 THEN 1 ELSE 0 END) CERAB_QCI1_count -- ERAB_QCI1未达标天数
FROM frt_wrl_chk_bug#{TABLEPARTION}_d
WHERE DAY BETWEEN #{STARTTIME} AND #{ENDTIME}
AND BUG_TYPE = 'NN_CDR'
#{CITY}
#{AREA}
AND City IS NOT NULL
GROUP BY City_ID,City,Area_Name,eNodeB_Name,eNodeB_ID#{CELLCONDITIONGROUP}) a
]]>
</sqlTemplate>

<sqlTemplate id="WirelessDataCheck_01_bar_MonthWeekDay" description="柱状图月周日数据查询，全省、地市和区县数据（基站级和小区级）" DB="mysql">
<!--
#{TIME}：时间条件,如果统计为月份数据，则为MONTH(DAY),如果统计为周数据，则为WEEKOFYEAR(DAY)，如果统计为天数据，则为DAY
#{STARTTIME}：开始时间，统计月份时，开始时间为所选月的第一天 如：20180501，周则为选中周的周一日期
#{ENDTIME}：结束时间 ，统计月份时，结束时间为所选月的最后一天，如20180630，周则为选中周的周日日期
#{CITY}:地市条件，如果全省，该条件为空，如果是某地市，则为 and city = '广州'
#{AREA}:区县条件，如果全省，该条件为空，如果是某个区县，则为 and area_name = '天河'
-->
<![CDATA[
SELECT
	ROUND((b.bst_mr_ratio + b.bst_agps_ratio + b.MR_FIELDS_RATIO) / 3,2) bst_mr_all_ratio,-- MR数据优良率基站级
	ROUND((b.cell_mr_ratio + b.cell_agps_ratio + b.MR_FIELDS_RATIO) / 3,2) cell_mr_all_ratio,-- MR数据优良率小区级
	ROUND((b.bst_cdr_ratio + b.CDR_FIELDS_RATIO) / 2,2) AS bst_cdr_all_ratio,-- CDR数据优良率基站级
	ROUND((b.cell_cdr_ratio + b.CDR_FIELDS_RATIO) / 2,2) AS cell_cdr_all_ratio,-- CDR数据优良率小区级

	ROUND(b.MR_LteScSinrUL_SUM/b.MR_REC_SUM*100,2) MR_LteScSinrUL_RATIO,
	ROUND(b.MR_LteScRI_SUM/b.MR_REC_SUM*100,2) MR_LteScRI_RATIO,
	ROUND(b.MR_CQI_SUM/b.MR_REC_SUM*100,2) MR_CQI_RATIO,
	ROUND(b.MR_LteScRIP_SUM/b.MR_REC_SUM*100,2) MR_LteScRIP_RATIO,
	ROUND(b.MR_eNodeBId_SUM/b.MR_REC_SUM*100,2) MR_eNodeBId_RATIO,
	ROUND(b.MR_objectId_SUM/b.MR_REC_SUM*100,2) MR_objectId_RATIO,
	ROUND(b.MR_MmeUeS1apId_SUM/b.MR_REC_SUM*100,2) MR_MmeUeS1apId_RATIO,
	ROUND(b.MR_MmeGroupId_SUM/b.MR_REC_SUM*100,2) MR_MmeGroupId_RATIO,
	ROUND(b.MR_MmeCode_SUM/b.MR_REC_SUM*100,2) MR_MmeCode_RATIO,

	ROUND(b.CDR_MMEGroupID_SUM/b.CDR_REC_SUM*100,2) CDR_MMEGroupID_RATIO,
	ROUND(b.CDR_MMECode_SUM/b.CDR_REC_SUM*100,2) CDR_MMECode_RATIO,
	ROUND(b.CDR_eNodeBID_SUM/b.CDR_REC_SUM*100,2) CDR_eNodeBID_RATIO,
	ROUND(b.CDR_MmeUeS1APID_SUM/b.CDR_REC_SUM*100,2) CDR_MmeUeS1APID_RATIO,
	ROUND(b.CDR_eNBUeS1APID_SUM/b.CDR_REC_SUM*100,2) CDR_eNBUeS1APID_RATIO,
	ROUND(b.CDR_StartTime_SUM/b.CDR_REC_SUM*100,2) CDR_StartTime_RATIO,
	ROUND(b.CDR_EndTime_SUM/b.CDR_REC_SUM*100,2) CDR_EndTime_RATIO,
	ROUND(b.AC_MR_LteScCQI0_SUM/b.CDR_REC_SUM*100,2) AC_MR_LteScCQI0_RATIO,
	ROUND(b.AC_RRCEndTime_SUM/b.CDR_REC_SUM*100,2) AC_RRCEndTime_RATIO,
	ROUND(b.ERAB_QCI1_SUM/b.CDR_REC_SUM*100,2) ERAB_QCI1_RATIO,
	b.*
FROM
	(SELECT
			ROUND(mrEnbNum / TotalEnbNum * 100, 2) bst_mr_ratio,-- MR基站上报完整率
			ROUND(mrCellNum / TotalCellNum * 100,2) cell_mr_ratio,-- MR小区上报完整率
			ROUND(agpsEnbNum / mrEnbNum * 100, 2) bst_agps_ratio,	-- AGPS开启基站完整率
			ROUND(agpsCellNum / mrCellNum * 100,2) cell_agps_ratio,	-- AGPS开启小区完整率
			ROUND((MR_LteScSinrUL_SUM + MR_LteScRI_SUM + MR_CQI_SUM + MR_LteScRIP_SUM + MR_eNodeBId_SUM + MR_objectId_SUM + MR_MmeUeS1apId_SUM + MR_MmeGroupId_SUM + MR_MmeCode_SUM) / 9 / MR_REC_SUM * 100,2) MR_FIELDS_RATIO,	-- MR关键字段非空率
			ROUND(cdrEnbNum / TotalEnbNum * 100,2) bst_cdr_ratio,	-- CDR基站上报完整率
			ROUND(cdrCellNum / TotalCellNum * 100,2) cell_cdr_ratio,-- CDR小区上报完整率
			ROUND((CDR_MMEGroupID_SUM + CDR_MMECode_SUM + CDR_eNodeBID_SUM + CDR_MmeUeS1APID_SUM + CDR_eNBUeS1APID_SUM + CDR_StartTime_SUM + CDR_EndTime_SUM + AC_MR_LteScCQI0_SUM + AC_RRCEndTime_SUM + ERAB_QCI1_SUM) / 10 / CDR_REC_SUM * 100,2) CDR_FIELDS_RATIO,-- CDR关键字段非空率
			a.*
		FROM
			(SELECT
					SUM(mrEnbNum) mrEnbNum,
					SUM(mrCellNum) mrCellNum,
					SUM(TotalEnbNum) TotalEnbNum,
					SUM(TotalCellNum) TotalCellNum,
					SUM(agpsEnbNum) agpsEnbNum,
					SUM(agpsCellNum) agpsCellNum,
					SUM(MR_REC_SUM) MR_REC_SUM,
					SUM(MR_LteScSinrUL_SUM) MR_LteScSinrUL_SUM,
					SUM(MR_LteScRI_SUM) MR_LteScRI_SUM,
					SUM(MR_CQI_SUM) MR_CQI_SUM,
					SUM(MR_LteScRIP_SUM) MR_LteScRIP_SUM,
					SUM(MR_PLMN_SUM) MR_PLMN_SUM,
					SUM(MR_eNodeBId_SUM) MR_eNodeBId_SUM,
					SUM(MR_objectId_SUM) MR_objectId_SUM,
					SUM(MR_MmeUeS1apId_SUM) MR_MmeUeS1apId_SUM,
					SUM(MR_MmeGroupId_SUM) MR_MmeGroupId_SUM,
					SUM(MR_MmeCode_SUM) MR_MmeCode_SUM,
					SUM(cdrEnbNum) cdrEnbNum,
					SUM(cdrCellNum) cdrCellNum,
					SUM(CDR_REC_SUM) CDR_REC_SUM,
					SUM(CDR_MMEGroupID_SUM) CDR_MMEGroupID_SUM,
					SUM(CDR_MMECode_SUM) CDR_MMECode_SUM,
					SUM(CDR_eNodeBID_SUM) CDR_eNodeBID_SUM,
					SUM(CDR_MmeUeS1APID_SUM) CDR_MmeUeS1APID_SUM,
					SUM(CDR_eNBUeS1APID_SUM) CDR_eNBUeS1APID_SUM,
					SUM(CDR_StartTime_SUM) CDR_StartTime_SUM,
					SUM(CDR_EndTime_SUM) CDR_EndTime_SUM,
					SUM(AC_MR_LteScCQI0_SUM) AC_MR_LteScCQI0_SUM,
					SUM(AC_RRCEndTime_SUM) AC_RRCEndTime_SUM,
					SUM(ERAB_QCI1_SUM) ERAB_QCI1_SUM,
					YEAR (DAY) AS yeartime,
					DAY AS time
				FROM
					frt_wrl_data_chk_d
				WHERE DAY BETWEEN #{STARTTIME} AND #{ENDTIME}
				#{CITY}
				#{AREA}
				AND City IS NOT NULL
				GROUP BY yeartime,time
				ORDER BY yeartime,time
			) a
	) b
]]>
</sqlTemplate>
<sqlTemplate  id="embedPage_getCellName" description="根据基站id和小区id获取小区名称" DB="mysql">
	<![CDATA[
		SELECT
	BASE_STATN_ID,
	CELL_ID,
CELL_NAME
FROM
	dim_sector
WHERE
	DAY = #{day}  #{str}
	]]>
</sqlTemplate>

<!--平台使用情况统计的sql模板区域-->

<sqlTemplate  id="SysAccess_01_AppOpenDetail" description="取指定时间范围内所有（OA/4A）用户或指定用户打开应用的清单" DB="mysql">
<![CDATA[
SELECT
	a.app_name AS app_id,
	-- 应用ID
	recent. NAME AS app_name,
	-- 应用名称
	date_format(a.oper_time ,'%Y-%m-%d %H:%I:%S') as oper_time,
	-- 操作时间
	date_format(b.login_time ,'%Y-%m-%d %H:%I:%S') as login_time,
	-- 登录时间
	c. NAME AS user_name,
	-- 用户登录名
	c.real_name,
	-- 用户实名
	-- d.node_id,
	-- 所在单位的ID
	CASE -- 用户所属省/市分公司
WHEN (d.city IS NULL OR d.city = '') THEN
	'省公司'
ELSE
	d.city
END AS branch,
 d.node_name,
 -- 用户所在组织机构的名称
d. LEVEL,
 -- 用户所在组织机构的级别
d.parent_id -- 用户所在组织机构的直接上级
FROM
	(
		-- 查出指定时间范围内的所有应用的打开日志
		SELECT
			*
		FROM
			t_oper_info
		WHERE
			oper_time >= '#{STARTDAY}'
		AND oper_time < '#{ENDDAY}'
		AND oper_type LIKE "%OPEN%"
	) a
JOIN (
	-- 查出指定时间范围内的所有登录日志
	SELECT
		*
	FROM
		t_login_info
	WHERE
		LOGIN_TIME >= '#{LOGINDAY}' -- 登录时间应比所要求查询的时间早一天
	AND LOGIN_TIME < '#{ENDDAY}'
) b ON a.login_info_id = b.id
JOIN ( -- 查出所有OA/4A用户或指定用户
	SELECT
		*
	FROM
		dm_user
	WHERE
		#{USERCOND}
) c ON b.USER_NAME = c.`NAME`
-- 关联出用户所在组织机构的节点树信息
JOIN t_permission_div_department d ON c.permission_group_id = d.node_id
JOIN ( -- 查出所有应用的名称，由于系统维护的原因，同一个应用可能会挂在不同目录下（一般，旧的目录下的应用没有被授权给用户，只有最新的应用才会授权给用户），所以，按应用的code和CREATE_TIME排序，同一个CODE的应用只取最新的一个为准。
	SELECT
		*
	FROM
		(
			SELECT
				permission_id,
				CODE,
				NAME,
				CREATE_TIME ,@j :=@j + 1 AS j ,@k := (
					CASE
					WHEN @pre_code LIKE func. CODE THEN
						@k + 1
					ELSE
						1
					END
				) AS rank ,@pre_code := func. CODE AS pre_code,
				@pre_code
			FROM
				(
					SELECT
						permission_id,
						CODE,
						NAME,
						CREATE_TIME
					FROM
						dm_permission_func
					ORDER BY
						CODE ASC,
						CREATE_TIME DESC
				) func,
				(
					SELECT
						@j := 0 ,@k := 0 ,@pre_code := 'a'
				) tmp
			ORDER BY
				CODE ASC,
				CREATE_TIME DESC
		) ranked
	WHERE
		rank = 1
) recent ON a.app_name = recent. CODE
#{CONDITION} -- 用于指定用户查询时加上地市的限制
]]>
</sqlTemplate>

<sqlTemplate  id="SysAccess_02_AppDetail" description="应用目录清单" DB="mysql">
<![CDATA[
select PERMISSION_ID,code,name,level,PARENT_ID from dm_permission_func order by level
]]>
</sqlTemplate>

<!--平台使用情况统计的sql模板区域-->

<sqlTemplate id="embedPage_level_num" description="查询4.12DSI_PERSONAS的level_115_num" DB="hbase">
<![CDATA[
	getByKeyScope
	NOCE:DSI_PERSONAS
	#{STARTROW}
	#{ENDROW}
	A:e1,A:e2,A:e3,A:e4,A:e5,A:e6
	rowkey 1
]]>
</sqlTemplate>

<sqlTemplate id="user_cell_lists" description="获取用户接入小区列表,4.36 DSI_MDN_ENB_TOP_D" DB="hbase">
<![CDATA[
	getByKeys
	NOCE:DSI_MDN_ENB_TOP_D
	#{KEYLIST}
	i:a
	rowkey 1
]]>
</sqlTemplate>

<sqlTemplate id="user_cell_lists_keyScope" description="获取用户接入小区列表,4.36 DSI_MDN_ENB_TOP_D" DB="hbase">
<![CDATA[
    getByKeyScope
    NOCE:DSI_MDN_ENB_TOP_D
    #{STARTROW}
    #{ENDROW}
    i:a
    rowkey 1
]]>
</sqlTemplate>

<sqlTemplate id="embedPage_have_cell_record" description="按ServingCellList中每一个小区查询frt_bsn_alarm表的记录" DB="mysql">
<![CDATA[
	select base_statn_id,cell_id
		from frt_bsn_alarm
		where concat(base_statn_id,'_',cell_id) in (#{ENODEB_CELL});
]]>
</sqlTemplate>
<sqlTemplate id="embedPage_spsgw_record" description="根据时间范围查询FRT_WEAK_SPSGW_D" DB="mysql">
	<![CDATA[
		SELECT SP_LIST,SGW_LIST,DAY FROM FRT_WEAK_SPSGW_D WHERE DAY BETWEEN #{beginTime} AND #{endTime}
	]]>
</sqlTemplate>

<sqlTemplate id="embedPage_havenot_cell_record" description="按ServingCellList中每一个小区查询FRT_ALARM_TOT_D表的记录" DB="mysql">
<![CDATA[
	select base_statn_id,cell_id
	 	from FRT_ALARM_TOT_D
		where DAY=#{DAY}
		and concat(base_statn_id,'_',cell_id) in (#{ENODEB_CELL})
		and CLEAR_TIME > '#{CLEAR_TIME}'
]]>
</sqlTemplate>



<!--天翼手机展2018-->
<sqlTemplate id="ItermExpo2018_01_getTerminalChangeMessage" description="终端分析页获取用户使用的终端变化情况数据" DB="mysql">
<![CDATA[
SELECT
	change_type, -- 类型
	factory_old, -- 旧手机品牌
	factory_new, -- 新手机品牌
	change_cnt -- 更换的
FROM
	FRT_MOBILE_IN_OUT_CNT_M
WHERE
	MONTH = (
		SELECT
			max(MONTH)
		FROM
			FRT_MOBILE_IN_OUT_CNT_M
	)
]]>
</sqlTemplate>

<!--天翼手机展2018-->

<sqlTemplate id="system_DataCheckMailSend_template" description="系统后端定时发送邮件查询数据模板" DB="mysql">
<![CDATA[
select data_source,cell_cnt,CELL_CNT_ALL,cell_ratio,day from frt_cell_ratio_d where
-- (CELL_RATIO < 0.9 OR CELL_RATIO IS NULL) AND
DAY = #{DAY}
]]>
</sqlTemplate>


<sqlTemplate id="StatisticsDL_MRSubway_Line_Info" description="地铁线路详细清单" DB="mysql">
<![CDATA[
SELECT b.city_name
,a.LINE_NAME
,sum(a.DX_RSRP_140_Cnt)
,ROUND(sum(a.DX_RSRP_140_Sum)/sum(a.DX_RSRP_140_Cnt),2)
,sum(a.DX_RSRP_115_Cnt)
,sum(a.DX_RSRP_110_Cnt)
,sum(a.DX_RSRP_105_Cnt)
,sum(a.DX_RSRP_100_Cnt)
,sum(a.DX_RSRP_95_Cnt)
,CONCAT(ROUND(sum(a.DX_RSRP_115_Cnt)*100/sum(a.DX_RSRP_140_Cnt),2),'%')
,CONCAT(ROUND(sum(a.DX_RSRP_110_Cnt)*100/sum(a.DX_RSRP_140_Cnt),2),'%')
,CONCAT(ROUND(sum(a.DX_RSRP_105_Cnt)*100/sum(a.DX_RSRP_140_Cnt),2),'%')
,CONCAT(ROUND(sum(a.DX_RSRP_100_Cnt)*100/sum(a.DX_RSRP_140_Cnt),2),'%')
,CONCAT(ROUND(sum(a.DX_RSRP_95_Cnt)*100/sum(a.DX_RSRP_140_Cnt),2),'%')
,ROUND(sum(a.MIN_USEREX_UPAVGRATE)/count(a.MIN_USEREX_UPAVGRATE),2)
,ROUND(sum(a.MIN_USEREX_DWAVGRATE)/count(a.MIN_USEREX_DWAVGRATE),2)
FROM
noce.FRT_METRO_LINE_RSRP_D a
INNER JOIN
noce.dim_tele_city b
on a.city_id = b.city_id
where `DAY`= #{DAY}
AND (a.MR_FLAG=0 OR a.MR_FLAG=2)
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
GROUP BY a.CITY_ID,a.LINE_NAME
]]>
</sqlTemplate>
<sqlTemplate id="StatisticsDL_MRSubway_Line_Info_count" description="地铁线路详细清单总数" DB="mysql">
<![CDATA[
SELECT COUNT(1) count from (
select
*
FROM
noce.FRT_METRO_LINE_RSRP_D
where `DAY`= #{DAY}
AND (MR_FLAG=0 OR MR_FLAG=2)
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
GROUP BY CITY_ID,LINE_NAME) a
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSubway_Tunnel_Info" description="地铁隧道详细清单" DB="mysql">
<![CDATA[
select a.SECTION_ID
,b.city_name
,a.LINE_NAME
,a.FROM_STATION_NAME
,a.TO_STATION_NAME
,(case when a.MR_FLAG=1 then '正向' when a.MR_FLAG=-1 then '反向' else '综合' end ) as direction
,a.DX_RSRP_140_Cnt
,round(a.DX_RSRP_140_Sum/a.DX_RSRP_140_Cnt,2)
,a.DX_RSRP_115_Cnt
,a.DX_RSRP_110_Cnt
,a.DX_RSRP_105_Cnt
,a.DX_RSRP_100_Cnt
,a.DX_RSRP_95_Cnt
,concat(round(a.DX_RSRP_115_Cnt*100/a.DX_RSRP_140_Cnt,2),'%')
,concat(round(a.DX_RSRP_110_Cnt*100/a.DX_RSRP_140_Cnt,2),'%')
,concat(round(a.DX_RSRP_105_Cnt*100/a.DX_RSRP_140_Cnt,2),'%')
,concat(round(a.DX_RSRP_100_Cnt*100/a.DX_RSRP_140_Cnt,2),'%')
,concat(round(a.DX_RSRP_95_Cnt*100/a.DX_RSRP_140_Cnt,2),'%')
,round(a.MIN_USEREX_UPAVGRATE,2)
,round(a.MIN_USEREX_DWAVGRATE,2)
,a.DX_TOP_SC_SECTOR
,a.GIS_LINE_GPS
FROM
noce.FRT_METRO_LINE_RSRP_D a
INNER JOIN
noce.dim_tele_city b
on a.city_id = b.city_id
where a.`DAY`= #{DAY}
AND a.MR_FLAG <> 0
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
]]>
</sqlTemplate>
<sqlTemplate id="StatisticsDL_MRSubway_Tunnel_Info_count" description="地铁隧道详细清单总数" DB="mysql">
<![CDATA[
select
COUNT(1) count
FROM
noce.FRT_METRO_LINE_RSRP_D
where `DAY`= #{DAY}
AND MR_FLAG <> 0
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSubway_Station_Info" description="地铁站点详细清单" DB="mysql">
<![CDATA[
select b.city_name
,a.LINE_NAME
,a.FROM_STATION_NAME
,sum(a.DX_RSRP_140_Cnt)
,round(sum(a.DX_RSRP_140_Sum)/sum(a.DX_RSRP_140_Cnt),2)
,sum(a.DX_RSRP_115_Cnt)
,sum(a.DX_RSRP_110_Cnt)
,sum(a.DX_RSRP_105_Cnt)
,sum(a.DX_RSRP_100_Cnt)
,sum(a.DX_RSRP_95_Cnt)
,concat(round(a.DX_RSRP_115_Cnt*100/a.DX_RSRP_140_Cnt,2),'%')
,concat(round(a.DX_RSRP_110_Cnt*100/a.DX_RSRP_140_Cnt,2),'%')
,concat(round(a.DX_RSRP_105_Cnt*100/a.DX_RSRP_140_Cnt,2),'%')
,concat(round(a.DX_RSRP_100_Cnt*100/a.DX_RSRP_140_Cnt,2),'%')
,concat(round(a.DX_RSRP_95_Cnt*100/a.DX_RSRP_140_Cnt,2),'%')
,round(AVG(a.MIN_USEREX_UPAVGRATE),2)
,round(AVG(a.MIN_USEREX_DWAVGRATE),2)
FROM
noce.FRT_METRO_LINE_RSRP_D a
INNER JOIN
noce.dim_tele_city b
on a.city_id = b.city_id
where a.`DAY`= #{DAY}
AND a.MR_FLAG = 0
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
GROUP BY a.LINE_NAME,a.FROM_STATION_NAME
]]>
</sqlTemplate>
<sqlTemplate id="StatisticsDL_MRSubway_Station_Info_count" description="地铁站点详细清单总数" DB="mysql">
<![CDATA[
SELECT COUNT(1) count from (
select
*
FROM
noce.FRT_METRO_LINE_RSRP_D
where `DAY`= #{DAY}
AND MR_FLAG = 0
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
GROUP BY LINE_NAME,FROM_STATION_NAME) a
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSubway_MidStation_Info" description="地铁站间详细清单" DB="mysql">
<![CDATA[
select CITY_NAME
,LINE_NAME
,FROM_STATION_NAME
,TO_STATION_NAME
,(case when MR_FLAG=1 then '正向' when MR_FLAG=-1 then '反向' else '综合' end ) as direction
,ALL_COV_SECTION
,POOR_COV_SECTION
,POOR_COV_SECTION_OrderNo
,SECTOR_SET
,LTE_TO_3G_TOT
,Lte_To_3g_OrderNo
,ROUND(Flow_4G_TOT,2)
,Flow_4G_OrderNo
,ROUND(CE_GOOD_RATIO_AVG,2)
,Ce_GOOD_RATIO_OrderNo
,User_4G_AVG
,User_4G_OrderNo
,ROUND(PC_OrderNo_TOT,2)
,ALARM_NUMS
,ALARM_CELLS
,NR_ALARM_CELLS
,NC_SECTOR_SET
,NC_ALARM_NUMS
,Do_Type
,eNodeB_ID
,eNodeB_Name
,CELL_ID
,CELL_NAME
,CELL_ADDRESS
,CELL_STATE
,DX_RSRP_140_Cnt
,DX_RSRP_115_Cnt
,DX_RSRP_110_Cnt
,DX_RSRP_105_Cnt
,DX_RSRP_100_Cnt
,DX_RSRP_95_Cnt
,DX_RSRP_140_Sum
,ROUND(LONGITUDE_MIN,6)
,ROUND(LATITUDE_MIN,6)
,ROUND(LONGITUDE_MID,6)
,ROUND(LATITUDE_MID,6)
,ROUND(LONGITUDE_MAX,6)
,ROUND(LATITUDE_MAX,6)
,LINE_LENGTH
,LINE_GIS_DATA
,ROUND(MIN_USEREX_UPAVGRATE,2)
,ROUND(MIN_USEREX_DWAVGRATE,2)
from
noce.FRT_METRO_INTER_COV_D a
where `DAY`= #{DAY}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
]]>
</sqlTemplate>
<sqlTemplate id="StatisticsDL_MRSubway_MidStation_Info_count" description="地铁站间详细清单总数" DB="mysql">
<![CDATA[
select
COUNT(1) count
FROM
noce.FRT_METRO_INTER_COV_D
where `DAY`= #{DAY}
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRHSRail_Line_Info" description="高铁线路详细清单" DB="mysql">
<![CDATA[
SELECT ROAD_NAME
,sum(RSRP_COUNT)
,ROUND(sum(RSRP_SUM)/sum(RSRP_COUNT),2)
,sum(RSRP_COUNT_115)
,sum(RSRP_COUNT_110)
,sum(RSRP_COUNT_105)
,sum(RSRP_COUNT_100)
,sum(RSRP_COUNT_95)
,CONCAT(ROUND(sum(RSRP_COUNT_115)*100/sum(RSRP_COUNT),2),'%')
,CONCAT(ROUND(sum(RSRP_COUNT_110)*100/sum(RSRP_COUNT),2),'%')
,CONCAT(ROUND(sum(RSRP_COUNT_105)*100/sum(RSRP_COUNT),2),'%')
,CONCAT(ROUND(sum(RSRP_COUNT_100)*100/sum(RSRP_COUNT),2),'%')
,CONCAT(ROUND(sum(RSRP_COUNT_95)*100/sum(RSRP_COUNT),2),'%')
,ROUND(AVG(MIN_USEREX_UPAVGRATE),2)
,ROUND(AVG(MIN_USEREX_DWAVGRATE),2)
,COV_LENGTH_95
,COV_LENGTH_100
,COV_LENGTH_105
,COV_LENGTH_110
,COV_LENGTH_115
,ALL_COV_LENGTH-COV_LENGTH_95
,ALL_COV_LENGTH-COV_LENGTH_100
,ALL_COV_LENGTH-COV_LENGTH_105
,ALL_COV_LENGTH-COV_LENGTH_110
,ALL_COV_LENGTH-COV_LENGTH_115
,ROAD_LENGTH- ALL_COV_LENGTH
FROM
noce.FRT_ESBH_LINE_COVERAGE_#{STATCYCLE}
where `DAY`= #{DAY}
AND LINE_TYPE=2
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{ROAD_CONDITION}
GROUP BY ROAD_NAME
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRHSRail_Line_Info_count" description="高铁线路详细清单总数" DB="mysql">
<![CDATA[
SELECT COUNT(1) count from (
select
*
FROM
noce.FRT_ESBH_LINE_COVERAGE_#{STATCYCLE}
where `DAY`= #{DAY}
AND LINE_TYPE=2
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
#{ROAD_CONDITION}
GROUP BY ROAD_NAME) a
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRHSRail_500metres_Info" description="高铁500metres详细清单" DB="mysql">
<![CDATA[
select LINE_ID
,ROAD_ID
,ROAD_NAME
,CITY
,CITY_ID
,COUNTRY
,COUNTRY_ID
,MKTCENTER
,MKTCENTER_ID
,BELONG_AREA_ID
,ROUND(LONGITUDE_MIN,6)
,ROUND(LATITUDE_MIN,6)
,ROUND(LONGITUDE_MID,6)
,ROUND(LATITUDE_MID,6)
,ROUND(LONGITUDE_MAX,6)
,ROUND(LATITUDE_MAX,6)
,ALL_COV_LENGTH
,POOR_COV_LENGTH
,POOR_COV_LENGTH_OrderNo
,SECTOR_SET
,LTE_TO_3G_TOT
,Lte_To_3g_OrderNo
,ROUND(Flow_4G_TOT,2)
,Flow_4G_OrderNo
,ROUND(CE_GOOD_RATIO_AVG,2)
,Ce_GOOD_RATIO_OrderNo
,User_4G_AVG
,User_4G_OrderNo
,PC_OrderNo_TOT
,ALARM_NUMS
,ALARM_CELLS
,NR_ALARM_CELLS
,NC_SECTOR_SET
,NC_ALARM_NUMS
,Do_Type
,eNodeB_ID
,eNodeB_Name
,CELL_ID
,CELL_NAME
,CELL_ADDRESS
,CELL_STATE
,RSRP_COUNT
,RSRP_SUM
,RSRP_COUNT_105
,ROAD_LENGTH
,RSRP_COUNT_95
,RSRP_COUNT_100
,RSRP_COUNT_110
,RSRP_COUNT_115
,ROUND(DX_LINE_GRID_COV_SUM_95,2)
,ROUND(DX_LINE_GRID_COV_SUM_100,2)
,ROUND(DX_LINE_GRID_COV_SUM_105,2)
,ROUND(DX_LINE_GRID_COV_SUM_110,2)
,ROUND(DX_LINE_GRID_COV_SUM_115,2)
,DX_LINE_GRID_NUM
,ROUND(DX_LINE_GRID_RSRP_SUM,2)
,ROUND(MIN_USEREX_UPAVGRATE,2)
,ROUND(MIN_USEREX_DWAVGRATE,2)
,ALARM_ID
,TASK_ID
,COV_LENGTH_95
,COV_LENGTH_100
,COV_LENGTH_105
,COV_LENGTH_110
,COV_LENGTH_115
,ALL_COV_LENGTH-COV_LENGTH_95
,ALL_COV_LENGTH-COV_LENGTH_100
,ALL_COV_LENGTH-COV_LENGTH_105
,ALL_COV_LENGTH-COV_LENGTH_110
,ALL_COV_LENGTH-COV_LENGTH_115
,ROAD_LENGTH- ALL_COV_LENGTH
FROM
noce.FRT_ESBH_LINE_COVERAGE_#{STATCYCLE}
where `DAY`= #{DAY}
AND LINE_TYPE=#{LINE_TYPE_CONDITION} -- 取值2为500米，取值22为非隧道
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRHSRail_500metres_Info_count" description="高铁500metres详细清单总数" DB="mysql">
<![CDATA[
select
COUNT(1) count
FROM
noce.FRT_ESBH_LINE_COVERAGE_#{STATCYCLE}
where `DAY`= #{DAY}
AND LINE_TYPE=#{LINE_TYPE_CONDITION} -- 取值2为500米，取值22为非隧道
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_MRSubway_Img" description="地铁MR统计图" DB="mysql">
<![CDATA[
select `DAY`
,sum(DX_RSRP_140_Cnt) as rsrp_cnt  -- 记录数
,round(sum(DX_RSRP_#{THRESHOLD}_Cnt)*100/sum(DX_RSRP_140_Cnt), 2) as rsrp_rate  -- 覆盖率
from noce.FRT_METRO_LINE_RSRP_D
where `DAY`  between #{START_TIME} and #{END_TIME}
AND (MR_FLAG=0 OR MR_FLAG=2)
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
GROUP BY `DAY`
]]>
</sqlTemplate>
<sqlTemplate id="StatisticsDL_MRHSRail_Img" description="高铁MR统计图" DB="mysql">
<![CDATA[
select `DAY`
,sum(RSRP_COUNT) as rsrp_cnt -- 记录数
,round(sum(RSRP_COUNT_#{THRESHOLD})*100/sum(RSRP_COUNT), 2) as rsrp_rate  -- 覆盖率
from noce.FRT_ESBH_LINE_COVERAGE_D
where `DAY`  between #{START_TIME} and #{END_TIME}
AND LINE_TYPE=2
#{CITY_CONDITION}
#{COUNTRY_CONDITION}
#{MKTCENTER_CONDITION}
GROUP BY `DAY`
]]>
</sqlTemplate>

<sqlTemplate id="StatisticsDL_HSRail_01" description="高铁MR统计图（20190124改版）" DB="mysql">
    <![CDATA[
        select `DAY`,case LINE_TYPE when 2 then '综合' when 21 then '隧道' when 22 then '非隧道' else '其他' end as SCENE
        ,sum(RSRP_COUNT) as RSRP_Cnt_sum  -- 全量MR数
        ,sum(COV_LENGTH_#{THRESHOLD}) as qulified_length -- 达标里程
        ,SUM(ALL_COV_LENGTH-COV_LENGTH_#{THRESHOLD}) as unqualified_length -- 未达标里程
        ,SUM(ROAD_LENGTH- ALL_COV_LENGTH) as out_neted_length -- 脱网里程
        from noce.FRT_ESBH_LINE_COVERAGE_#{STATCYCLE}
        where `DAY` between #{START_TIME} and #{END_TIME}
        AND LINE_TYPE in (2,21,22)
        #{CITY_CONDITION}
        #{ROAD_NAME_CONDITION}
        GROUP BY SCENE,`DAY`
        order by SCENE,`DAY`
    ]]>
</sqlTemplate>
<sqlTemplate id="StatisticsDL_MRHSRail_tunnels_Info" description="全条高铁的按隧道进行汇总" DB="mysql">
    <![CDATA[
        select B.ROAD_NAME, A.* from
            (
                select LINE_ID
                ,ROAD_ID
                ,ROAD_NAME
                ,CITY
                ,CITY_ID
                ,COUNTRY
                ,COUNTRY_ID
                ,MKTCENTER
                ,MKTCENTER_ID
                ,BELONG_AREA_ID
                ,ROUND(LONGITUDE_MIN,6)
                ,ROUND(LATITUDE_MIN,6)
                ,ROUND(LONGITUDE_MID,6)
                ,ROUND(LATITUDE_MID,6)
                ,ROUND(LONGITUDE_MAX,6)
                ,ROUND(LATITUDE_MAX,6)
                ,ALL_COV_LENGTH
                ,POOR_COV_LENGTH
                ,POOR_COV_LENGTH_OrderNo
                ,SECTOR_SET
                ,LTE_TO_3G_TOT
                ,Lte_To_3g_OrderNo
                ,Flow_4G_TOT
                ,Flow_4G_OrderNo
                ,ROUND(CE_GOOD_RATIO_AVG,2)
                ,Ce_GOOD_RATIO_OrderNo
                ,User_4G_AVG
                ,User_4G_OrderNo
                ,PC_OrderNo_TOT
                ,ALARM_NUMS
                ,ALARM_CELLS
                ,NR_ALARM_CELLS
                ,NC_SECTOR_SET
                ,NC_ALARM_NUMS
                ,Do_Type
                ,eNodeB_ID
                ,eNodeB_Name
                ,CELL_ID
                ,CELL_NAME
                ,CELL_ADDRESS
                ,CELL_STATE
                ,RSRP_COUNT
                ,RSRP_SUM
                ,RSRP_COUNT_105
                ,ROAD_LENGTH
                ,RSRP_COUNT_95
                ,RSRP_COUNT_100
                ,RSRP_COUNT_110
                ,RSRP_COUNT_115
                ,ROUND(DX_LINE_GRID_COV_SUM_95,2)
                ,ROUND(DX_LINE_GRID_COV_SUM_100,2)
                ,ROUND(DX_LINE_GRID_COV_SUM_105,2)
                ,ROUND(DX_LINE_GRID_COV_SUM_110,2)
                ,ROUND(DX_LINE_GRID_COV_SUM_115,2)
                ,DX_LINE_GRID_NUM
                ,ROUND(DX_LINE_GRID_RSRP_SUM,2)
                ,ROUND(MIN_USEREX_UPAVGRATE,2)
                ,ROUND(MIN_USEREX_DWAVGRATE,2)
                ,ALARM_ID
                ,TASK_ID
                ,COV_LENGTH_95
                ,COV_LENGTH_100
                ,COV_LENGTH_105
                ,COV_LENGTH_110
                ,COV_LENGTH_115
                ,ALL_COV_LENGTH-COV_LENGTH_95
                ,ALL_COV_LENGTH-COV_LENGTH_100
                ,ALL_COV_LENGTH-COV_LENGTH_105
                ,ALL_COV_LENGTH-COV_LENGTH_110
                ,ALL_COV_LENGTH-COV_LENGTH_115
                ,ROAD_LENGTH- ALL_COV_LENGTH
                FROM
                noce.FRT_ESBH_LINE_COVERAGE_#{STATCYCLE}
                where `DAY`= #{DAY}
                AND LINE_TYPE=21 -- 限定为隧道对象
                #{CITY_CONDITION}
                ) A
            JOIN
            (
                SELECT distinct
                    ROAD_ID,
                    ROAD_NAME  -- 高铁名称
                FROM
                    DIM_ROAD_CITY_BD
                WHERE ROAD_TYPE_ID = 2 -- 1：表示高速；2：表示高铁；3：表示市政路;21：表示高铁隧道
            ) B
            ON A.ROAD_ID = B.ROAD_ID
    ]]>
</sqlTemplate>
<sqlTemplate id="StatisticsDL_MRHSRail_tunnels_Info_count" description="全条高铁的按隧道进行汇总总数" DB="mysql">
    <![CDATA[
    select count(1) count from
        (
            select *
            FROM
            noce.FRT_ESBH_LINE_COVERAGE_#{STATCYCLE}
            where `DAY`= #{DAY}
            AND LINE_TYPE=21 -- 限定为隧道对象
            #{CITY_CONDITION}
            ) A
        JOIN
        (
            SELECT distinct
                ROAD_ID,
                ROAD_NAME  -- 高铁名称
            FROM
                DIM_ROAD_CITY_BD
            WHERE ROAD_TYPE_ID = 2 -- 1：表示高速；2：表示高铁；3：表示市政路;21：表示高铁隧道
        ) B
        ON A.ROAD_ID = B.ROAD_ID
]]>
</sqlTemplate>
	<!--用户抱怨涉及的sql模板-->

<sqlTemplate id="IntelligentRoadTestAnalysis_UC_01_wo_abc" description="某天所有用户投诉全量工单" DB="用户投诉库mysql">
<![CDATA[
select
"全量工单" as type -- 类型
,WORKORDER_ID -- 工单编号
,SERVICE_TYPE -- 服务类别
,WORKORDER_STATUS -- 工单状态
,BELONG_CITY -- 归属地市
,ACCEPT_CONTENT -- 受理内容
,date_format(ACCEPT_TIME , '%Y-%m-%d %H:%i:%s') as  ACCEPT_TIME -- 受理时间
,date_format(ARCHIVE_TIME , '%Y-%m-%d %H:%i:%s') as ARCHIVE_TIME -- 归档时间
,DURATION -- 工单总历时时长（小时）
,COMPLAINT_CITY -- 申告地
,COMPLAINT_COUNTY -- 区/县
,ARCHIVE_CONTENT -- 归档内容
,LONGITUDE -- 经度（百度）
,LATITUDE -- 纬度（百度）
,POSITION_ONE -- 原因定性一级
,POSITION_TWO -- 原因定性二级
,BELONG_GRID -- 归属网格
,PHENOMENON -- 表象大类
,CLASSIFY -- 分析归类
,WORKORDER_TYPE -- 工单种类
,POSITION -- 原因定性
,MKTCENTER -- 营服中心
from tb_wo_abc_archive
where date(ACCEPT_TIME) between '#{DAY_BEGIN}'  and '#{DAY_END}'
#{CITY} -- 地市条件，如果是地使用户则这个条件会生效
#{COUNTRY} -- 区县条件
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysis_UC_02_wo_LEAPFROG" description="某天所有用户越级投诉工单" DB="用户投诉库mysql">
<![CDATA[
select
"越级工单" as type -- 类型
,WORKORDER_ID -- 工单编号
,'考核工单' as WORKORDER_TYPE2
,date_format(ACCEPT_TIME , '%Y-%m-%d %H:%i:%s') as  ACCEPT_TIME -- 受理时间
,WORKORDER_TYPE -- 投诉来源
,SERVICE_TYPE -- 服务类别
,BELONG_CITY -- 归属地
,COMPLAINT_CITY -- 申告地市
,ACCEPT_CONTENT -- 投诉情况描述
,ARCHIVE_CONTENT -- 处理结果描述
,WORKORDER_STATUS -- 工单状态
,CLASSIFY_FRONT -- 投诉原因分类
-- ,ANSWER_TIME -- 处理审核/答复时间
,date_format(ANSWER_TIME , '%Y-%m-%d %H:%i:%s') as  ANSWER_TIME -- 处理审核/答复时间
,CLASSIFY_AFTER -- 投诉原因分类（申诉后）
,POSITION_TWO -- 原因定性二级
,ACTUAL_CITY -- 实际申告地
,COMPLAINT_COUNTY -- 投诉地区县
,POSITION -- 原因定性
,CLASSIFY -- 分析归类
,LONGITUDE -- 经度（百度）
,LATITUDE -- 纬度（百度）
,MKTCENTER -- 营服中心
from TB_WO_LEAPFROG_CHECK
where date(ACCEPT_TIME) between '#{DAY_BEGIN}'  and '#{DAY_END}'
#{CITY} -- 地市条件，如果是地使用户则这个条件会生效
#{COUNTRY}
union all
 select
"越级工单" as type -- 类型
,WORKORDER_ID -- 工单编号
,'归档工单' as WORKORDER_TYPE2
,date_format(ACCEPT_TIME , '%Y-%m-%d %H:%i:%s') as  ACCEPT_TIME -- 受理时间
,WORKORDER_TYPE -- 投诉来源
,SERVICE_TYPE -- 服务类别
,BELONG_CITY -- 归属地
,COMPLAINT_CITY -- 申告地市
,ACCEPT_CONTENT -- 投诉情况描述
,ARCHIVE_CONTENT -- 处理结果描述
,WORKORDER_STATUS -- 工单状态
,CLASSIFY_FRONT -- 投诉原因分类
-- ,ANSWER_TIME -- 处理审核/答复时间
,date_format(ANSWER_TIME , '%Y-%m-%d %H:%i:%s') as  ANSWER_TIME -- 处理审核/答复时间
,CLASSIFY_AFTER -- 投诉原因分类（申诉后）
,POSITION_TWO -- 原因定性二级
,ACTUAL_CITY -- 实际申告地
,COMPLAINT_COUNTY -- 投诉地区县
,POSITION -- 原因定性
,CLASSIFY -- 分析归类
,LONGITUDE -- 经度（百度）
,LATITUDE -- 纬度（百度）
,MKTCENTER -- 营服中心
from TB_WO_LEAPFROG_DETAIL
where date(ACCEPT_TIME) between '#{DAY_BEGIN}'  and '#{DAY_END}'
#{CITY} -- 地市条件，如果是地使用户则这个条件会生效
#{COUNTRY}
]]>
</sqlTemplate>

<sqlTemplate id="IntelligentRoadTestAnalysis_UC_03_wo_hot" description="某天所有用户投诉热点" DB="用户投诉库mysql">
<![CDATA[
select
"抱怨热点" as type -- 类型
,ID  -- ID
,GRIDID as WORKORDER_ID -- 栅格编号
,CITY  -- 地市
,CENLON as LONGITUDE  -- 中心点经度（百度）
,CENLAT as LATITUDE  -- 中心点纬度（百度）
,COUNTY  -- 区县
,TOWN  -- 镇
,ROAD  -- 路名
,date_format(CREATE_STIME , '%Y-%m-%d %H:%i:%s') as CREATE_STIME -- 原始周期起始时间
,date_format(CREATE_ETIME , '%Y-%m-%d %H:%i:%s') as  CREATE_ETIME -- 原始周期结束时间
,OLDER_COUNT  -- 原始单量
,CLOSE_LOOP  -- 是否闭环
,CONTINUED_CYCLE  -- 持续周期
,date_format(UPDATE_STIME , '%Y-%m-%d %H:%i:%s') as UPDATE_STIME -- 更新/闭环周期起始时间
,date_format(UPDATE_ETIME , '%Y-%m-%d %H:%i:%s') as UPDATE_ETIME -- 更新/闭环周期结束时间
,NEWEST_COUNT  -- 最新单量
,TOP_NUMBER  -- 排序
,MKTCENTER  -- 营服中心
from TB_WO_HOT_TOP5
where date(CREATE_ETIME) between '#{DAY_BEGIN}'  and '#{DAY_END}'
#{CITY} -- 地市条件，如果是地使用户则这个条件会生效
#{COUNTRY}
union all
select
"抱怨热点" as type -- 类型
,ID  -- ID
,GRIDID as WORKORDER_ID -- 栅格编号
,CITY  -- 地市
,CENLON as LONGITUDE  -- 中心点经度（百度）
,CENLAT as LATITUDE  -- 中心点纬度（百度）
,COUNTY  -- 区县
,TOWN  -- 镇
,ROAD  -- 路名
,date_format(CREATE_STIME , '%Y-%m-%d %H:%i:%s') as CREATE_STIME -- 原始周期起始时间
,date_format(CREATE_ETIME , '%Y-%m-%d %H:%i:%s') as  CREATE_ETIME -- 原始周期结束时间
,OLDER_COUNT  -- 原始单量
,CLOSE_LOOP  -- 是否闭环
,CONTINUED_CYCLE  -- 持续周期
,date_format(UPDATE_STIME , '%Y-%m-%d %H:%i:%s') as UPDATE_STIME -- 更新/闭环周期起始时间
,date_format(UPDATE_ETIME , '%Y-%m-%d %H:%i:%s') as UPDATE_ETIME -- 更新/闭环周期结束时间
,NEWEST_COUNT  -- 最新单量
,TOP_NUMBER  -- 排序
,MKTCENTER  -- 营服中心
from TB_WO_HOT_TOP10
where date(CREATE_ETIME) between '#{DAY_BEGIN}'  and '#{DAY_END}'
#{CITY} -- 地市条件，如果是地使用户则这个条件会生效
#{COUNTRY}
]]>
</sqlTemplate>
<sqlTemplate id="test_metro_line" description="测试地铁线段加上箭头" DB="mysql">
<![CDATA[
select
CITY_NAME ,
LINE_ID, -- 线路ID
LINE_NAME, -- 线路名称
FROM_STATION_ID, -- 源地铁站ID
FROM_STATION_NAME, -- 源地铁站名称
TO_STATION_ID, -- 目的地铁站ID
TO_STATION_NAME, -- 目的地铁站名称
MR_FLAG,
LINE_GIS_DATA
from FRT_METRO_INTER_COV_D
where
		day = #{DAY}
		and CITY_ID = #{CITY_ID}
		and MR_FLAG = #{MR} -- 将正向指标、方向指标和综合指标都取出来
AND LINE_ID = #{LINE_ID}
]]>
</sqlTemplate>

<sqlTemplate id="loadSectorUtilForBaidu_01_querySector_onlyDrawFieldTopNotice" description="加载置顶公告">
<![CDATA[
SELECT notice_content FROM t_notice_top
]]>
</sqlTemplate>
<sqlTemplate id="HeatPicture_enodeb" description="查询DIM_LTE_EXPO_SECTOR的经纬度" DB="mysql">
	<![CDATA[
		SELECT DISTINCT
			LONGITUDE,
			LATITUDE
		FROM
			DIM_LTE_EXPO_SECTOR
		WHERE
			LONGITUDE IS NOT NULL
		AND LATITUDE IS NOT NULL
	]]>
</sqlTemplate>
	<sqlTemplate id="HeatPicture_allEnodeb" description="查询DIM_LTE_EXPO_SECTOR的所有数据" DB="mysql">
		<![CDATA[
			SELECT
				*
			FROM
				DIM_LTE_EXPO_SECTOR
			WHERE
				LONGITUDE = #{lng}
			AND LATITUDE = #{lat}
		]]>
	</sqlTemplate>
    <sqlTemplate id="HeatPicture_sector" description="根据DIM_LTE_EXPO_SECTOR表查询基站组件" DB="mysql">
        <![CDATA[
            SELECT
                ENODEBID AS base_statn_id,
                CELLID AS cell_id,
                LONGITUDE AS longitude_baidu,
                LATITUDE AS latitude_baidu
            FROM
                DIM_LTE_EXPO_SECTOR
            WHERE
                LONGITUDE IS NOT NULL
            AND LATITUDE IS NOT NULL
        ]]>
    </sqlTemplate>
<sqlTemplate id="ITE2018P4Hall15_01_cell_data" DB="mysql" description="手机展15分钟展馆小区数据">
<![CDATA[
SELECT a.*,b.longitude,b.latitude,b.Ant_Azimuth,b.Indoor_Mapping,b.Band_Mapping,b.Branch_area_id FROM (
SELECT
	ENODEB_ID,	-- 基站id
	CELL_ID,	-- 小区id
	round(PDCP_Flow_All/1024/1024/1024,2) PDCP_Flow_All,	-- 总流量
	round(RRC_USER_Cnt,0) RRC_USER_Cnt,	-- rrc最大用户数
	round(PDCP_SPEED_UP,2) PDCP_SPEED_UP, -- 上行速率
	round(PDCP_SPEED_DOWN,2) PDCP_SPEED_DOWN -- 下行速率
FROM
	FRT_PDCP_CELL_FLOW_15M
WHERE
	sts_time = (SELECT MAX(sts_time) FROM	FRT_PDCP_CELL_FLOW_15M)) a RIGHT JOIN
(SELECT ENODEBID,CELLID,LONGITUDE,LATITUDE,Ant_Azimuth,Indoor_Mapping,Band_Mapping,Branch_area_id FROM dim_lte_expo_sector WHERE AREA_ID = 71 AND Band_Mapping IS NOT NULL) b
ON a.ENODEB_ID = b.enodebid AND a.CELL_ID = b.cellid
]]>
</sqlTemplate>
<sqlTemplate id="ITE2018P4Hall15_02_Grid_data" DB="hbase" description="手机展展馆全量栅格数据">
<![CDATA[
getGridsByContour
NOCE:DSI_MRO_ALL_GRID_TOT_W
#{GRIDKEYPREFIX}
#{GRIDLEVEL}
#{POLYGONCONTOUR}
#{COLUMNLIST}
rowkey 0
]]>
</sqlTemplate>
<sqlTemplate id="ITE2018P1_01_cellUserCnt_forHeatmap" DB="mysql" description="根据区域id查询各个区域的热力图数据">
<![CDATA[
SELECT
	b.LONGITUDE AS lng,
	b.LATITUDE AS lat,
	a.Users_Cnt AS count
FROM
	(SELECT
			eNodeB_ID,
			Cell_ID,
			Users_Cnt
		FROM
			flm_cell_area_usr_cnt_5m
		WHERE
			Area_ID in(#{AREA_ID})
		AND STS_TIME = (SELECT MAX(STS_TIME) FROM flm_cell_area_usr_cnt_5m
			WHERE Area_ID in(#{AREA_ID}))
	) a
LEFT JOIN (SELECT ENODEBID,CELLID,LONGITUDE,LATITUDE FROM dim_lte_expo_sector WHERE AREA_ID in(#{AREA_ID})) b ON a.eNodeB_ID = b.ENODEBID
AND a.Cell_ID = b.CELLID
]]>
</sqlTemplate>

<sqlTemplate id="ITE2018P1_01_cellUserCnt_forHeatmap_v2" DB="mysql" description="根据区域id查询各个区域的热力图数据">
    <![CDATA[
SELECT
b.LONGITUDE AS lng,
b.LATITUDE AS lat,
a.Users_Cnt AS count
FROM
(SELECT
        eNodeB_ID,
        Cell_ID,
        Users_Cnt
    FROM
        flm_cell_area_usr_cnt_5m
    WHERE 1=1
        #{AREA_ID}
    AND STS_TIME = (SELECT MAX(STS_TIME) FROM flm_cell_area_usr_cnt_5m
        WHERE 1=1 #{AREA_ID})
) a
LEFT JOIN (SELECT ENODEBID,CELLID,LONGITUDE,LATITUDE FROM dim_lte_expo_sector WHERE 1=1 #{AREA_ID}) b ON a.eNodeB_ID = b.ENODEBID
AND a.Cell_ID = b.CELLID
]]>
</sqlTemplate>

<sqlTemplate id="ITE2018P4Hall15_03_maxTime" DB="mysql" description="取扇区性能表的最大时间">
    <![CDATA[
select max(sts_time) maxtime from frt_pdcp_cell_flow_15m
]]>
</sqlTemplate>
<sqlTemplate id="ITE2018P4Hall15_03_cell_line_data" DB="mysql" description="手机展展馆下方折线图">
    <![CDATA[
SELECT sts_time,
	round(SUM(PDCP_Flow_All)/1024/1024/1024,2) flow_All,	-- 总流量
	round(SUM(RRC_USER_Cnt),0) user_cnt,	-- rrc最大用户数
	round(AVG(PDCP_SPEED_UP),2) speed_up_avg,	-- 上行速率
	round(AVG(PDCP_SPEED_DOWN),2) speed_down_avg	-- 下行速率
FROM frt_pdcp_cell_flow_15m a, (SELECT ENODEBID,CELLID FROM dim_lte_expo_sector WHERE AREA_ID = 71) b
WHERE sts_time BETWEEN #{STARTTIME} AND #{ENDTIME}
AND a.ENODEB_ID = b.ENODEBID
AND a.CELL_ID = b.CELLID
GROUP BY sts_time
ORDER BY sts_time
]]>
</sqlTemplate>
<sqlTemplate id="ITE2018P4Hall15_04_cell_hall_data" DB="mysql" description="手机展各展馆雷达图数据">
    <![CDATA[
SELECT round(SUM(a.PDCP_Flow_All)/1024/1024/1024,2) flow,round(AVG(a.PDCP_SPEED_UP),2) speed_up,round(SUM(a.RRC_USER_Cnt),0) user,round(AVG(a.PDCP_SPEED_DOWN),2) speed_down,b.Branch_area_id FROM (
SELECT
	ENODEB_ID,	-- 基站id
	CELL_ID,	-- 小区id
	PDCP_Flow_All,	-- 总流量
	RRC_USER_Cnt,	-- rrc最大用户数
	PDCP_SPEED_UP,	-- 上行速率
	PDCP_SPEED_DOWN	-- 下行速率
FROM
	FRT_PDCP_CELL_FLOW_15M
WHERE
	sts_time = (SELECT MAX(sts_time) FROM FRT_PDCP_CELL_FLOW_15M)) a ,
(SELECT ENODEBID,CELLID,Branch_area_id FROM dim_lte_expo_sector WHERE AREA_ID = 71 AND Branch_area_id IS NOT NULL) b
WHERE a.ENODEB_ID = b.enodebid AND a.CELL_ID = b.cellid
GROUP BY b.Branch_area_id
ORDER BY b.Branch_area_id
]]>
</sqlTemplate>
<sqlTemplate id="ITE2018P4Hall15_05_cell_Top_data" DB="mysql" description="手机展展馆各指标的top3扇区">
<![CDATA[
SELECT * FROM (SELECT ENODEB_ID,CELL_ID,ROUND(PDCP_Flow_All/1024/1024/1024,2) AS val,'flow' AS type,b.CELLNAME FROM frt_pdcp_cell_flow_15m a,
(SELECT *  FROM dim_lte_expo_sector WHERE AREA_ID = 71) b WHERE sts_time =
(SELECT MAX(sts_time) FROM frt_pdcp_cell_flow_15m) AND a.ENODEB_ID = b.ENODEBID AND a.CELL_ID = b.CELLID  ORDER BY PDCP_Flow_All DESC LIMIT 5) a
UNION
SELECT * FROM (SELECT ENODEB_ID,CELL_ID,ROUND(RRC_USER_Cnt,0) AS val,'user' AS type,b.CELLNAME FROM frt_pdcp_cell_flow_15m a,
(SELECT *  FROM dim_lte_expo_sector WHERE AREA_ID = 71) b WHERE sts_time =
(SELECT MAX(sts_time) FROM frt_pdcp_cell_flow_15m) AND a.ENODEB_ID = b.ENODEBID AND a.CELL_ID = b.CELLID  ORDER BY RRC_USER_Cnt DESC LIMIT 5) b
UNION
SELECT * FROM (SELECT ENODEB_ID,CELL_ID,ROUND(PDCP_SPEED_UP,2) AS val,'spleed_up' AS type,b.CELLNAME FROM frt_pdcp_cell_flow_15m a,
(SELECT *  FROM dim_lte_expo_sector WHERE AREA_ID = 71) b WHERE sts_time =
(SELECT MAX(sts_time) FROM frt_pdcp_cell_flow_15m) AND a.ENODEB_ID = b.ENODEBID AND a.CELL_ID = b.CELLID ORDER BY PDCP_SPEED_UP DESC LIMIT 5) c
UNION
SELECT * FROM (SELECT ENODEB_ID,CELL_ID,ROUND(PDCP_SPEED_DOWN,2) AS val,'spleed_down' AS type,b.CELLNAME FROM frt_pdcp_cell_flow_15m a,
(SELECT *  FROM dim_lte_expo_sector WHERE AREA_ID = 71) b WHERE sts_time =
(SELECT MAX(sts_time) FROM frt_pdcp_cell_flow_15m) AND a.ENODEB_ID = b.ENODEBID AND a.CELL_ID = b.CELLID ORDER BY PDCP_SPEED_DOWN DESC LIMIT 5) d
]]>
</sqlTemplate>

<sqlTemplate id="ITE2018P4Hall15_06_hall_concernArea_data" DB="mysql" description="手机展展馆关注区域">
<![CDATA[
SELECT id,gis_data_baidu,ROUND(RSRP,2) rsrp,GRID_COUNT,ROUND(POOR_GRID_COUNT/GRID_COUNT*100,2) POOR_Radio
FROM dm_user_concern_area WHERE id = #{AREAID}
]]>
</sqlTemplate>

<sqlTemplate id="ITE2018P4Hall15_07_hall_colorOption" DB="mysql" description="手机展展馆指标颜色配置表">
<![CDATA[
SELECT * FROM dim_lte_expo_color_option WHERE type IN ('flow','user','up_spleed','down_spleed','rsrp')
]]>
</sqlTemplate>
<sqlTemplate id="ITE2018P7NetworkCar_01_topTerm" DB="mysql" description="网约车top10终端">
<![CDATA[
SELECT TERM_TYPE,USERS_CNT FROM FRT_TAXI_DRV_TERM_URS_D
WHERE DAY = (SELECT MAX(`DAY`) FROM FRT_TAXI_DRV_TERM_URS_D)
ORDER BY USERS_CNT DESC LIMIT 10
]]>
</sqlTemplate>
<sqlTemplate id="ITE2018P7NetworkCar_02_topApplication" DB="mysql" description="网约车top10应用">
    <![CDATA[
SELECT service_name,USERS_CNT FROM FRT_TAXI_DRV_SRV_URS_D
WHERE DAY = (SELECT MAX(`DAY`) FROM FRT_TAXI_DRV_SRV_URS_D)
AND service_name <> '' AND service_name IS NOT NULL
ORDER BY USERS_CNT DESC LIMIT 10
]]>
</sqlTemplate>
<sqlTemplate id="ITE2018P7NetworkCar_03_drivarAndUser" DB="mysql" description="网约车司机和乘客用户数">
<![CDATA[
SELECT b.CITY_NAME,a.DRV_Cnt,a.radio FROM (SELECT CITY_ID,ROUND(DRV_Cnt/0.16,0) DRV_Cnt,ROUND(USR_Cnt/DRV_Cnt,2) radio FROM frt_taxi_drv_user_cnt_d
WHERE DAY = (SELECT MAX(DAY) FROM frt_taxi_drv_user_cnt_d WHERE DRV_Cnt IS NOT NULL AND USR_Cnt IS NOT NULL)) a,
dim_tele_city b WHERE a.CITY_ID = b.CITY_ID
ORDER BY DRV_Cnt DESC
]]>
</sqlTemplate>
<sqlTemplate id="ITE2018P7NetworkCar_04_driverCallData" DB="mysql" description="网约车司机业务数据">
<![CDATA[
SELECT
	TAXI_DRV_FLOW_AVG,
	TAXI_DRV_SMS_AVG,
	TAXI_DRV_CALL_AVG,
	network_radio,
	TAXI_DRV_DIST_AVG,
	TAXI_DRV_DURATION_AVG
FROM (
		SELECT
			ROUND(TAXI_DRV_FLOW_AVG,2) TAXI_DRV_FLOW_AVG ,
			ROUND(TAXI_DRV_SMS_AVG,2) TAXI_DRV_SMS_AVG,
			ROUND(TAXI_DRV_CALL_AVG,2) TAXI_DRV_CALL_AVG,
			ROUND(TAXI_DVR_RSRP_AVG*100,2) network_radio,
			ROUND(TAXI_DRV_DIST_AVG,2) TAXI_DRV_DIST_AVG,
			'taxi' AS type
		FROM frt_taxi_drv_srv_avg_d
		WHERE	DAY = (SELECT	MAX(DAY) FROM frt_taxi_drv_srv_avg_d WHERE
TAXI_DRV_FLOW_AVG IS NOT NULL AND TAXI_DRV_SMS_AVG IS NOT NULL
AND TAXI_DRV_CALL_AVG IS NOT NULL AND TAXI_DVR_RSRP_AVG IS NOT NULL
AND TAXI_DRV_DIST_AVG IS NOT NULL)
	) a,
(SELECT ROUND(TAXI_DRV_DURATION_AVG,2) TAXI_DRV_DURATION_AVG,'taxi' AS type
FROM frt_taxi_drv_wktime_d
WHERE DAY = (SELECT MAX(day) FROM frt_taxi_drv_wktime_d WHERE TAXI_DRV_DURATION_AVG IS NOT NULL)) b
WHERE a.type = b.type
]]>
</sqlTemplate>

	<!--2018手机交易会智能终端页面新增TOP10厂家表格显示的模板-->

<sqlTemplate id="ITE2018P7Term_getTop10Factory" DB="mysql" description="智能终端页面取TOP10厂家信息">
<![CDATA[
SELECT
	factory,
	SUM(cnt) AS sum_count
FROM
	FRT_URER_TERMTYPE_TOP_M
where factory is not null and factory <> '' and factory <> '未知厂商'
and month = (select MAX(month) from FRT_URER_TERMTYPE_TOP_M)
GROUP BY
	Factory
ORDER BY
	sum_count DESC
LIMIT 20
]]>
</sqlTemplate>
	<!--规划站点库-->
<sqlTemplate id="SitePlanning_getImportSite" description="获取导入站点里不重复的需求申请单编号" DB="mysql">
	<![CDATA[
		SELECT id, demand_number, scroll_demand_bst_number, plan_adress_number, physical_address_number, physical_address_name, physical_address, province, city, address_longitude, address_latitude, area_type, scenes_type, new_resource_tag, own_line_province, own_line_nation, priority_level, is_indoor, system_type, band, province_construction_type, is_bbu_centralized_deployment, is_remote_adjustment, radio_frequency_count, rru_paln_power, rru_transceiver, factory, is_unicom_shared, design_institute_name, door_scenes_type, sector_option, ant_azimuth, ant_count, high, floor_or_ground, plan_distance, splitters_explanation, indoor_type, indoor_scenes, building_or_position, building_area, indoor_das_type, is_ca_demand, recent_poor_id, poor_time, poor_distance, poor_area, not_poor_type_remark, not_poor_detailed_description, is_thirdparty_or_tower, tower_name, tower_longitude, tower_latitude, tower_distance, storage_time, update_time, update_reason, building_progress, priority_building_number, remarks, status, submit_time, country, import_user, audit_option, is_reimport, audit_city_level, proposed_settlement_of_poor_ranking, demand_type, build_type, Engineering_period, Engin_current_state, street, Is_new_line, Is_hot_line, station_address_type, sector_num, Is_support_CL, Tower_Mast_Information, ant_tilt, indoor_pRRU_num, indoor_RRU_num, Place_name, Place_area, Bid_alignment, Coverage_Assessment, Capacity_evaluation, Station_spacing_evaluation, Main_Scene_Evaluation, Weakregion_correlation_evaluation, Signal_strength_evaluation, Area_evaluation, overall_merit, eNodeB_ID, Cell_ID, Admission_time, Longitude_access, Latitude_access, Site_owner, Owner_name, contact_name, contact_type, contact_coding, child_scenes_type FROM dm_zdgh_import_site WHERE demand_number IS NOT NULL #{conditions}
   	]]>
</sqlTemplate>
	<sqlTemplate id="SitePlanning_getDbSite" description="获取库内站点里不重复的需求申请单编号" DB="mysql">
		<![CDATA[
			SELECT id,demand_number,db_number,scroll_demand_bst_number,plan_adress_number,physical_address_number,physical_address_name,physical_address,province,city,address_longitude,address_latitude,area_type,scenes_type,new_resource_tag,own_line_province,own_line_nation,priority_level,is_indoor,system_type,band,province_construction_type,is_bbu_centralized_deployment,is_remote_adjustment,radio_frequency_count,rru_paln_power,rru_transceiver,factory,is_unicom_shared,design_institute_name,door_scenes_type,sector_option,ant_azimuth,ant_count,high,floor_or_ground,plan_distance,splitters_explanation,indoor_type,indoor_scenes,building_or_position,building_area,indoor_das_type,is_ca_demand,recent_poor_id,poor_time,poor_distance,poor_area,not_poor_type_remark,not_poor_detailed_description,is_thirdparty_or_tower,tower_name,tower_longitude,tower_latitude,tower_distance,storage_time,update_time,update_reason,building_progress,priority_building_number,remarks,status,submit_time,audit_user,audit_time,recent_reviser,recent_time,reviser_detail,audit_id,country,import_user,audit_option,is_reimport,audit_city_level,proposed_settlement_of_poor_ranking,delete_status,demand_type,build_type,Engineering_period,Engin_current_state,street,Is_new_line,Is_hot_line,station_address_type,sector_num,Is_support_CL,Tower_Mast_Information,ant_tilt,indoor_pRRU_num,indoor_RRU_num,Place_name,Place_area,Bid_alignment,Coverage_Assessment,Capacity_evaluation,Station_spacing_evaluation,Main_Scene_Evaluation,Weakregion_correlation_evaluation,Signal_strength_evaluation,Area_evaluation,overall_merit,eNodeB_ID,Cell_ID,Admission_time,Longitude_access,Latitude_access,Site_owner,Owner_name,contact_name,contact_type,contact_coding,child_scenes_type,day FROM dm_zdgh_db_site WHERE demand_number IS NOT NULL #{conditions}
		]]>
	</sqlTemplate>
<sqlTemplate id="SitePlanning_getRefuSite" description="获取不通过站点里的需求申请单编号" DB="mysql">
	<![CDATA[
		SELECT id, demand_number, scroll_demand_bst_number, plan_adress_number, physical_address_number, physical_address_name, physical_address, province, city, address_longitude, address_latitude, area_type, scenes_type, new_resource_tag, own_line_province, own_line_nation, priority_level, is_indoor, system_type, band, province_construction_type, is_bbu_centralized_deployment, is_remote_adjustment, radio_frequency_count, rru_paln_power, rru_transceiver, factory, is_unicom_shared, design_institute_name, door_scenes_type, sector_option, ant_azimuth, ant_count, high, floor_or_ground, plan_distance, splitters_explanation, indoor_type, indoor_scenes, building_or_position, building_area, indoor_das_type, is_ca_demand, recent_poor_id, poor_time, poor_distance, poor_area, not_poor_type_remark, not_poor_detailed_description, is_thirdparty_or_tower, tower_name, tower_longitude, tower_latitude, tower_distance, storage_time, update_time, update_reason, building_progress, priority_building_number, remarks, status, submit_time, audit_user, audit_time, audit_id, country, import_user, audit_option, is_reimport, audit_city_level, proposed_settlement_of_poor_ranking, reimport, demand_type, build_type, Engineering_period, Engin_current_state, street, Is_new_line, Is_hot_line, station_address_type, sector_num, Is_support_CL, Tower_Mast_Information, ant_tilt, indoor_pRRU_num, indoor_RRU_num, Place_name, Place_area, Bid_alignment, Coverage_Assessment, Capacity_evaluation, Station_spacing_evaluation, Main_Scene_Evaluation, Weakregion_correlation_evaluation, Signal_strength_evaluation, Area_evaluation, overall_merit, eNodeB_ID, Cell_ID, Admission_time, Longitude_access, Latitude_access, Site_owner, Owner_name, contact_name, contact_type, contact_coding, child_scenes_type FROM dm_zdgh_refused_site WHERE is_reimport=0 AND demand_number IS NOT NULL #{conditions}
	]]>
</sqlTemplate>
<sqlTemplate id="SitePlanning_getImportSiteBySerial" description="隶属于这个批次的所有的导入站点" DB="mysql">
	<![CDATA[
		SELECT id, demand_number, scroll_demand_bst_number, plan_adress_number, physical_address_number, physical_address_name, physical_address, province, city, address_longitude, address_latitude, area_type, scenes_type, new_resource_tag, own_line_province, own_line_nation, priority_level, is_indoor, system_type, band, province_construction_type, is_bbu_centralized_deployment, is_remote_adjustment, radio_frequency_count, rru_paln_power, rru_transceiver, factory, is_unicom_shared, design_institute_name, door_scenes_type, sector_option, ant_azimuth, ant_count, high, floor_or_ground, plan_distance, splitters_explanation, indoor_type, indoor_scenes, building_or_position, building_area, indoor_das_type, is_ca_demand, recent_poor_id, poor_time, poor_distance, poor_area, not_poor_type_remark, not_poor_detailed_description, is_thirdparty_or_tower, tower_name, tower_longitude, tower_latitude, tower_distance, storage_time, update_time, update_reason, building_progress, priority_building_number, remarks, status, submit_time, country, import_user, audit_option, is_reimport, audit_city_level, proposed_settlement_of_poor_ranking, demand_type, build_type, Engineering_period, Engin_current_state, street, Is_new_line, Is_hot_line, station_address_type, sector_num, Is_support_CL, Tower_Mast_Information, ant_tilt, indoor_pRRU_num, indoor_RRU_num, Place_name, Place_area, Bid_alignment, Coverage_Assessment, Capacity_evaluation, Station_spacing_evaluation, Main_Scene_Evaluation, Weakregion_correlation_evaluation, Signal_strength_evaluation, Area_evaluation, overall_merit, eNodeB_ID, Cell_ID, Admission_time, Longitude_access, Latitude_access, Site_owner, Owner_name, contact_name, contact_type, contact_coding, child_scenes_type  FROM dm_zdgh_import_site WHERE demand_number = #{demand_number} and status='已提交审核' AND  scroll_demand_bst_number IS NOT NULL
	]]>
</sqlTemplate>
    <sqlTemplate id="SitePlanning_getDbSiteBySerial" description="隶属于这个批次的库内站点" DB="mysql">
        <![CDATA[
		SELECT id,demand_number,db_number,scroll_demand_bst_number,plan_adress_number,physical_address_number,physical_address_name,physical_address,province,city,address_longitude,address_latitude,area_type,scenes_type,new_resource_tag,own_line_province,own_line_nation,priority_level,is_indoor,system_type,band,province_construction_type,is_bbu_centralized_deployment,is_remote_adjustment,radio_frequency_count,rru_paln_power,rru_transceiver,factory,is_unicom_shared,design_institute_name,door_scenes_type,sector_option,ant_azimuth,ant_count,high,floor_or_ground,plan_distance,splitters_explanation,indoor_type,indoor_scenes,building_or_position,building_area,indoor_das_type,is_ca_demand,recent_poor_id,poor_time,poor_distance,poor_area,not_poor_type_remark,not_poor_detailed_description,is_thirdparty_or_tower,tower_name,tower_longitude,tower_latitude,tower_distance,storage_time,update_time,update_reason,building_progress,priority_building_number,remarks,status,submit_time,audit_user,audit_time,recent_reviser,recent_time,reviser_detail,audit_id,country,import_user,audit_option,is_reimport,audit_city_level,proposed_settlement_of_poor_ranking,delete_status,demand_type,build_type,Engineering_period,Engin_current_state,street,Is_new_line,Is_hot_line,station_address_type,sector_num,Is_support_CL,Tower_Mast_Information,ant_tilt,indoor_pRRU_num,indoor_RRU_num,Place_name,Place_area,Bid_alignment,Coverage_Assessment,Capacity_evaluation,Station_spacing_evaluation,Main_Scene_Evaluation,Weakregion_correlation_evaluation,Signal_strength_evaluation,Area_evaluation,overall_merit,eNodeB_ID,Cell_ID,Admission_time,Longitude_access,Latitude_access,Site_owner,Owner_name,contact_name,contact_type,contact_coding,child_scenes_type,day FROM dm_zdgh_db_site WHERE demand_number = #{demand_number} AND  scroll_demand_bst_number IS NOT NULL
        ]]>
    </sqlTemplate>
    <sqlTemplate id="SitePlanning_getRefuseSIteBySerial" description="隶属于这个批次的未通过站点" DB="mysql">
        <![CDATA[
		SELECT id, demand_number, scroll_demand_bst_number, plan_adress_number, physical_address_number, physical_address_name, physical_address, province, city, address_longitude, address_latitude, area_type, scenes_type, new_resource_tag, own_line_province, own_line_nation, priority_level, is_indoor, system_type, band, province_construction_type, is_bbu_centralized_deployment, is_remote_adjustment, radio_frequency_count, rru_paln_power, rru_transceiver, factory, is_unicom_shared, design_institute_name, door_scenes_type, sector_option, ant_azimuth, ant_count, high, floor_or_ground, plan_distance, splitters_explanation, indoor_type, indoor_scenes, building_or_position, building_area, indoor_das_type, is_ca_demand, recent_poor_id, poor_time, poor_distance, poor_area, not_poor_type_remark, not_poor_detailed_description, is_thirdparty_or_tower, tower_name, tower_longitude, tower_latitude, tower_distance, storage_time, update_time, update_reason, building_progress, priority_building_number, remarks, status, submit_time, audit_user, audit_time, audit_id, country, import_user, audit_option, is_reimport, audit_city_level, proposed_settlement_of_poor_ranking, reimport, demand_type, build_type, Engineering_period, Engin_current_state, street, Is_new_line, Is_hot_line, station_address_type, sector_num, Is_support_CL, Tower_Mast_Information, ant_tilt, indoor_pRRU_num, indoor_RRU_num, Place_name, Place_area, Bid_alignment, Coverage_Assessment, Capacity_evaluation, Station_spacing_evaluation, Main_Scene_Evaluation, Weakregion_correlation_evaluation, Signal_strength_evaluation, Area_evaluation, overall_merit, eNodeB_ID, Cell_ID, Admission_time, Longitude_access, Latitude_access, Site_owner, Owner_name, contact_name, contact_type, contact_coding, child_scenes_type FROM dm_zdgh_refused_site WHERE demand_number = #{demand_number} AND  scroll_demand_bst_number IS NOT NULL
        ]]>
    </sqlTemplate>
	<sqlTemplate id="SitePlanning_getImporeSiteObj" description="获取导入站点的详细信息" DB="mysql">
		<![CDATA[
			SELECT id, demand_number, scroll_demand_bst_number, plan_adress_number, physical_address_number, physical_address_name, physical_address, province, city, address_longitude, address_latitude, area_type, scenes_type, new_resource_tag, own_line_province, own_line_nation, priority_level, is_indoor, system_type, band, province_construction_type, is_bbu_centralized_deployment, is_remote_adjustment, radio_frequency_count, rru_paln_power, rru_transceiver, factory, is_unicom_shared, design_institute_name, door_scenes_type, sector_option, ant_azimuth, ant_count, high, floor_or_ground, plan_distance, splitters_explanation, indoor_type, indoor_scenes, building_or_position, building_area, indoor_das_type, is_ca_demand, recent_poor_id, poor_time, poor_distance, poor_area, not_poor_type_remark, not_poor_detailed_description, is_thirdparty_or_tower, tower_name, tower_longitude, tower_latitude, tower_distance, storage_time, update_time, update_reason, building_progress, priority_building_number, remarks, status, submit_time, country, import_user, audit_option, is_reimport, audit_city_level, proposed_settlement_of_poor_ranking, demand_type, build_type, Engineering_period, Engin_current_state, street, Is_new_line, Is_hot_line, station_address_type, sector_num, Is_support_CL, Tower_Mast_Information, ant_tilt, indoor_pRRU_num, indoor_RRU_num, Place_name, Place_area, Bid_alignment, Coverage_Assessment, Capacity_evaluation, Station_spacing_evaluation, Main_Scene_Evaluation, Weakregion_correlation_evaluation, Signal_strength_evaluation, Area_evaluation, overall_merit, eNodeB_ID, Cell_ID, Admission_time, Longitude_access, Latitude_access, Site_owner, Owner_name, contact_name, contact_type, contact_coding, child_scenes_type FROM dm_zdgh_import_site WHERE id = #{id}
		]]>
	</sqlTemplate>
    <sqlTemplate id="SitePlanning_getDbSiteObj"  description="获取库内站点的详细信息" DB="mysql">
        <![CDATA[
			SELECT id,demand_number,db_number,scroll_demand_bst_number,plan_adress_number,physical_address_number,physical_address_name,physical_address,province,city,address_longitude,address_latitude,area_type,scenes_type,new_resource_tag,own_line_province,own_line_nation,priority_level,is_indoor,system_type,band,province_construction_type,is_bbu_centralized_deployment,is_remote_adjustment,radio_frequency_count,rru_paln_power,rru_transceiver,factory,is_unicom_shared,design_institute_name,door_scenes_type,sector_option,ant_azimuth,ant_count,high,floor_or_ground,plan_distance,splitters_explanation,indoor_type,indoor_scenes,building_or_position,building_area,indoor_das_type,is_ca_demand,recent_poor_id,poor_time,poor_distance,poor_area,not_poor_type_remark,not_poor_detailed_description,is_thirdparty_or_tower,tower_name,tower_longitude,tower_latitude,tower_distance,storage_time,update_time,update_reason,building_progress,priority_building_number,remarks,status,submit_time,audit_user,audit_time,recent_reviser,recent_time,reviser_detail,audit_id,country,import_user,audit_option,is_reimport,audit_city_level,proposed_settlement_of_poor_ranking,delete_status,demand_type,build_type,Engineering_period,Engin_current_state,street,Is_new_line,Is_hot_line,station_address_type,sector_num,Is_support_CL,Tower_Mast_Information,ant_tilt,indoor_pRRU_num,indoor_RRU_num,Place_name,Place_area,Bid_alignment,Coverage_Assessment,Capacity_evaluation,Station_spacing_evaluation,Main_Scene_Evaluation,Weakregion_correlation_evaluation,Signal_strength_evaluation,Area_evaluation,overall_merit,eNodeB_ID,Cell_ID,Admission_time,Longitude_access,Latitude_access,Site_owner,Owner_name,contact_name,contact_type,contact_coding,child_scenes_type,day FROM dm_zdgh_db_site WHERE id = #{id}
		]]>
    </sqlTemplate>
    <sqlTemplate id="SitePlanning_getRefuseSiteObj" description="获取未通过站点的详细信息" DB="mysql">
        <![CDATA[
			SELECT id, demand_number, scroll_demand_bst_number, plan_adress_number, physical_address_number, physical_address_name, physical_address, province, city, address_longitude, address_latitude, area_type, scenes_type, new_resource_tag, own_line_province, own_line_nation, priority_level, is_indoor, system_type, band, province_construction_type, is_bbu_centralized_deployment, is_remote_adjustment, radio_frequency_count, rru_paln_power, rru_transceiver, factory, is_unicom_shared, design_institute_name, door_scenes_type, sector_option, ant_azimuth, ant_count, high, floor_or_ground, plan_distance, splitters_explanation, indoor_type, indoor_scenes, building_or_position, building_area, indoor_das_type, is_ca_demand, recent_poor_id, poor_time, poor_distance, poor_area, not_poor_type_remark, not_poor_detailed_description, is_thirdparty_or_tower, tower_name, tower_longitude, tower_latitude, tower_distance, storage_time, update_time, update_reason, building_progress, priority_building_number, remarks, status, submit_time, audit_user, audit_time, audit_id, country, import_user, audit_option, is_reimport, audit_city_level, proposed_settlement_of_poor_ranking, reimport, demand_type, build_type, Engineering_period, Engin_current_state, street, Is_new_line, Is_hot_line, station_address_type, sector_num, Is_support_CL, Tower_Mast_Information, ant_tilt, indoor_pRRU_num, indoor_RRU_num, Place_name, Place_area, Bid_alignment, Coverage_Assessment, Capacity_evaluation, Station_spacing_evaluation, Main_Scene_Evaluation, Weakregion_correlation_evaluation, Signal_strength_evaluation, Area_evaluation, overall_merit, eNodeB_ID, Cell_ID, Admission_time, Longitude_access, Latitude_access, Site_owner, Owner_name, contact_name, contact_type, contact_coding, child_scenes_type FROM dm_zdgh_refused_site WHERE id = #{id}
		]]>
    </sqlTemplate>

<sqlTemplate id="SitePlanning_import_site_chart" DB="mysql" description="站点规划里导入站点的图表">
<![CDATA[ 
SELECT 
  A.cityCount big,
  B.cityCount small 
FROM
  (SELECT 
    COUNT(*) cityCount 
  FROM
    dm_zdgh_import_site 
  WHERE STATUS = '待提交审核' 
    AND plan_distance IS NOT NULL
    AND (poor_distance = '未与弱区匹配' OR poor_distance > 100)
    #{demandNumber}
  ) A,
  (SELECT 
    COUNT(*) cityCount 
  FROM
    dm_zdgh_import_site 
  WHERE STATUS = '待提交审核' 
    AND plan_distance IS NOT NULL
    AND poor_distance != '未与弱区匹配'
    AND poor_distance <= 100 
    #{demandNumber}
  ) B 
]]>
</sqlTemplate>

<sqlTemplate id="SitePlanning_apply_site_chart" DB="mysql" description="站点规划里申请站点的图表">
<![CDATA[ 
SELECT 
  city,
  COUNT(*) cityCount
FROM
  dm_zdgh_import_site 
WHERE demand_number IS NOT NULL 
  #{storage_time}
  AND STATUS LIKE "已提交审核%"  
GROUP BY city
]]>
</sqlTemplate>

<sqlTemplate id="SitePlanning_db_site_chart" DB="mysql" description="站点规划里库内站点的图表">
<![CDATA[ 
SELECT 
  city,
  COUNT(*) cityCount
FROM
  dm_zdgh_db_site 
WHERE demand_number IS NOT NULL 
  #{audit_time}
  AND building_progress IN (
    '待建设',
    '待建单',
    '改点审批中',
    '建设中',
    '完成建设'
  ) 
GROUP BY city
]]>
</sqlTemplate>

<sqlTemplate id="SitePlanning_refused_site_chart" DB="mysql" description="站点规划里未通过站点的图表">
<![CDATA[ 
SELECT 
  city,
  COUNT(*) cityCount
FROM
  dm_zdgh_refused_site 
WHERE is_reimport = 0 
  AND demand_number IS NOT NULL 
  #{audit_time}
GROUP BY city
]]>
</sqlTemplate>

<sqlTemplate id="SitePlanning_01_cellsNearBy" DB="mysql" description="站点导入弱区信息">
<![CDATA[
SELECT
	*
FROM
	FRT_AGPS_POOR_COVERAGE_D
WHERE
	DAY = #{DAY}  -- 指定日期条件
 AND type = 0 -- 只取区域类型的弱区
and abs(LATITUDE_MID_BAIDU-#{LAT})<0.009996608 -- +/-1000米范围
and abs(LONGITUDE_MID_BAIDU-#{LNG})<0.009903286 -- +/-1000米范围
]]>
</sqlTemplate>

<sqlTemplate id="SitePlanning_02_cellsNearBy" DB="mysql" description="站点导入铁塔信息">
<![CDATA[
SELECT
*
FROM
DIM_IRON_TOWER_SITE_DETAILS
WHERE
DAY = #{DAY}  -- 指定日期条件
and abs(latitude_baidu-#{LAT})<0.009996608 -- +/-1000米范围
and abs(longitude_baidu-#{LNG})<0.009903286 -- +/-1000米范围
]]>
</sqlTemplate>

<sqlTemplate id="SitePlanning_03_cellsNearBy" DB="mysql" description="站点导入国动信息">
<![CDATA[
SELECT
*
FROM
DIM_GD_SITE_DETAILS
WHERE
DAY = #{DAY}  -- 指定日期条件
and abs(latitude_baidu-#{LAT})<0.009996608 -- +/-1000米范围
and abs(longitude_baidu-#{LNG})<0.009903286 -- +/-1000米范围
]]>
</sqlTemplate>
<sqlTemplate id="SitePlanning_getPoorDay" description="获取有弱区数据的日期" DB="mysql">
    <![CDATA[
        SELECT day from FRT_AGPS_POOR_COVERAGE_D GROUP BY day
    ]]>
</sqlTemplate>
<sqlTemplate id="SitePlanning_getMaxScroll" description="从库内站点获取同地市场景审核日期最大的滚动需求站点库编号" DB="mysql">
	<![CDATA[
		SELECT
            db_number AS number -- 最大滚动需求站点库编号
        FROM
            dm_zdgh_db_site
        WHERE
            db_number LIKE #{systemTime}
        AND LENGTH(db_number) = 16
	]]>
</sqlTemplate>
<sqlTemplate id="SitePlanning_getMaxPlanAddr" description="从库内站点获取当天同地市的统一规划站址编号" DB="mysql">
    <![CDATA[
		SELECT
            plan_adress_number AS number -- 统一规划站址编号
        FROM
            dm_zdgh_db_site
        WHERE
            city = #{city}
        AND plan_adress_number LIKE #{number}
        AND LENGTH(plan_adress_number) = 16
	]]>
</sqlTemplate>
<sqlTemplate id="SitePlanning_applySiteExport" DB="mysql" description="申请站点导出">
<![CDATA[
SELECT 
  demand_number,
  scroll_demand_bst_number,
  plan_adress_number,
  Engineering_period,
  Engin_current_state,
  building_progress,
  physical_address_number,
  province,
  city,
  country,
  street,
  physical_address_name,
  physical_address,
  address_longitude,
  address_latitude,
  area_type,
  scenes_type,
  child_scenes_type,
  Is_new_line,
  Is_hot_line,
  own_line_province,
  own_line_nation,
  station_address_type,
  province_construction_type,
  system_type,
  band,
  is_bbu_centralized_deployment,
  factory,
  is_unicom_shared,
  sector_num,
  is_ca_demand,
  rru_paln_power,
  rru_transceiver,
  Is_support_CL,
  priority_level,
  design_institute_name,
  sector_option,
  radio_frequency_count,
  Tower_Mast_Information,
  high,
  ant_azimuth,
  ant_tilt,
  ant_count,
  plan_distance,
  splitters_explanation,
  is_remote_adjustment,
  indoor_type,
  indoor_pRRU_num,
  indoor_RRU_num,
  building_area,
  indoor_das_type,
  Place_name,
  Place_area,
  Bid_alignment,
  Coverage_Assessment,
  Capacity_evaluation,
  Station_spacing_evaluation,
  Main_Scene_Evaluation,
  Weakregion_correlation_evaluation,
  Signal_strength_evaluation,
  Area_evaluation,
  overall_merit,
  eNodeB_ID,
  Cell_ID,
  Admission_time,
  Longitude_access,
  Latitude_access,
  Site_owner,
  Owner_name,
  contact_name,
  contact_type,
  contact_coding,
  recent_poor_id,
  proposed_settlement_of_poor_ranking,
  poor_time,
  poor_distance,
  poor_area,
  not_poor_type_remark,
  not_poor_detailed_description,
  is_thirdparty_or_tower,
  tower_name,
  tower_longitude,
  tower_latitude,
  tower_distance,
  storage_time,
  update_time,
  update_reason,
  building_progress,
  priority_building_number,
  remarks,
  STATUS,
  submit_time,
  import_user
FROM
  dm_zdgh_import_site 
WHERE #{STATUS} 
  #{demandNumber}
]]>
</sqlTemplate>

<sqlTemplate id="SitePlanning_dbSiteExport" DB="mysql" description="库内站点导出">
<![CDATA[
SELECT 
  demand_number,
  db_number,
  plan_adress_number,
  Engineering_period,
  Engin_current_state,
  building_progress,
  physical_address_number,
  province,
  city,
  country,
  street,
  physical_address_name,
  physical_address,
  address_longitude,
  address_latitude,
  area_type,
  scenes_type,
  child_scenes_type,
  Is_new_line,
  Is_hot_line,
  own_line_province,
  own_line_nation,
  station_address_type,
  province_construction_type,
  system_type,
  band,
  is_bbu_centralized_deployment,
  factory,
  is_unicom_shared,
  sector_num,
  is_ca_demand,
  rru_paln_power,
  rru_transceiver,
  Is_support_CL,
  priority_level,
  design_institute_name,
  sector_option,
  radio_frequency_count,
  Tower_Mast_Information,
  high,
  ant_azimuth,
  ant_tilt,
  ant_count,
  plan_distance,
  splitters_explanation,
  is_remote_adjustment,
  indoor_type,
  indoor_pRRU_num,
  indoor_RRU_num,
  building_area,
  indoor_das_type,
  Place_name,
  Place_area,
  Bid_alignment,
  Coverage_Assessment,
  Capacity_evaluation,
  Station_spacing_evaluation,
  Main_Scene_Evaluation,
  Weakregion_correlation_evaluation,
  Signal_strength_evaluation,
  Area_evaluation,
  overall_merit,
  eNodeB_ID,
  Cell_ID,
  Admission_time,
  Longitude_access,
  Latitude_access,
  Site_owner,
  Owner_name,
  contact_name,
  contact_type,
  contact_coding,
  recent_poor_id,
  proposed_settlement_of_poor_ranking,
  poor_time,
  poor_distance,
  poor_area,
  not_poor_type_remark,
  not_poor_detailed_description,
  is_thirdparty_or_tower,
  tower_name,
  tower_longitude,
  tower_latitude,
  tower_distance,
  storage_time,
  update_time,
  update_reason,
  building_progress,
  priority_building_number,
  remarks,
  STATUS,
  submit_time,
  audit_user,
  audit_time,
  recent_reviser,
  recent_time,
  reviser_detail,
  import_user
FROM
  dm_zdgh_db_site 
#{demandNumber}
]]>
</sqlTemplate>

<sqlTemplate id="SitePlanning_refusedSiteExport" DB="mysql" description="未通过站点导出">
<![CDATA[
SELECT 
  demand_number,
  scroll_demand_bst_number,
  plan_adress_number,
  Engineering_period,
  Engin_current_state,
  building_progress,
  physical_address_number,
  province,
  city,
  country,
  street,
  physical_address_name,
  physical_address,
  address_longitude,
  address_latitude,
  area_type,
  scenes_type,
  child_scenes_type,
  Is_new_line,
  Is_hot_line,
  own_line_province,
  own_line_nation,
  station_address_type,
  province_construction_type,
  system_type,
  band,
  is_bbu_centralized_deployment,
  factory,
  is_unicom_shared,
  sector_num,
  is_ca_demand,
  rru_paln_power,
  rru_transceiver,
  Is_support_CL,
  priority_level,
  design_institute_name,
  sector_option,
  radio_frequency_count,
  Tower_Mast_Information,
  high,
  ant_azimuth,
  ant_tilt,
  ant_count,
  plan_distance,
  splitters_explanation,
  is_remote_adjustment,
  indoor_type,
  indoor_pRRU_num,
  indoor_RRU_num,
  building_area,
  indoor_das_type,
  Place_name,
  Place_area,
  Bid_alignment,
  Coverage_Assessment,
  Capacity_evaluation,
  Station_spacing_evaluation,
  Main_Scene_Evaluation,
  Weakregion_correlation_evaluation,
  Signal_strength_evaluation,
  Area_evaluation,
  overall_merit,
  eNodeB_ID,
  Cell_ID,
  Admission_time,
  Longitude_access,
  Latitude_access,
  Site_owner,
  Owner_name,
  contact_name,
  contact_type,
  contact_coding,
  recent_poor_id,
  proposed_settlement_of_poor_ranking,
  poor_time,
  poor_distance,
  poor_area,
  not_poor_type_remark,
  not_poor_detailed_description,
  is_thirdparty_or_tower,
  tower_name,
  tower_longitude,
  tower_latitude,
  tower_distance,
  storage_time,
  update_time,
  update_reason,
  building_progress,
  priority_building_number,
  remarks,
  STATUS,
  submit_time,
  import_user,
  audit_user,
  status,
  audit_option,
  audit_time
FROM
  dm_zdgh_refused_site 
#{demandNumber}
]]>
</sqlTemplate>

<sqlTemplate id="SitePlanning_importSiteExport" DB="mysql" description="站点导入导出">
<![CDATA[
SELECT 
  demand_number,
  scroll_demand_bst_number,
  plan_adress_number,
  Engineering_period,
  Engin_current_state,
  building_progress,
  physical_address_number,
  province,
  city,
  country,
  street,
  physical_address_name,
  physical_address,
  address_longitude,
  address_latitude,
  area_type,
  scenes_type,
  child_scenes_type,
  Is_new_line,
  Is_hot_line,
  own_line_province,
  own_line_nation,
  station_address_type,
  province_construction_type,
  system_type,
  band,
  is_bbu_centralized_deployment,
  factory,
  is_unicom_shared,
  sector_num,
  is_ca_demand,
  rru_paln_power,
  rru_transceiver,
  Is_support_CL,
  priority_level,
  design_institute_name,
  sector_option,
  radio_frequency_count,
  Tower_Mast_Information,
  high,
  ant_azimuth,
  ant_tilt,
  ant_count,
  plan_distance,
  splitters_explanation,
  is_remote_adjustment,
  indoor_type,
  indoor_pRRU_num,
  indoor_RRU_num,
  building_area,
  indoor_das_type,
  Place_name,
  Place_area,
  Bid_alignment,
  Coverage_Assessment,
  Capacity_evaluation,
  Station_spacing_evaluation,
  Main_Scene_Evaluation,
  Weakregion_correlation_evaluation,
  Signal_strength_evaluation,
  Area_evaluation,
  overall_merit,
  eNodeB_ID,
  Cell_ID,
  Admission_time,
  Longitude_access,
  Latitude_access,
  Site_owner,
  Owner_name,
  contact_name,
  contact_type,
  contact_coding,
  recent_poor_id,
  proposed_settlement_of_poor_ranking,
  poor_time,
  poor_distance,
  poor_area,
  not_poor_type_remark,
  not_poor_detailed_description,
  is_thirdparty_or_tower,
  tower_name,
  tower_longitude,
  tower_latitude,
  tower_distance,
  storage_time,
  update_time,
  update_reason,
  building_progress,
  priority_building_number,
  remarks,
  STATUS,
  submit_time,
  import_user 
FROM
  dm_zdgh_import_site 
WHERE STATUS = '待提交审核' 
  #{demandNumber} 
]]>
</sqlTemplate>

<sqlTemplate id="SitePlanning_04_getPoorAreaById" DB="mysql" description="根据ID获取弱区的信息">
<![CDATA[
SELECT
g.object_id,
g.type,
g.longitude_min_baidu,
g.latitude_min_baidu,
g.longitude_mid_baidu,
g.latitude_mid_baidu,
g.longitude_max_baidu,
g.latitude_max_baidu,
g.city,
g.country,
g.MKTCENTER_ID,
g.mktcenter,
round(g.MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(g.MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
g.address,
g.enodeb_id,
g.CELL_ID,
g.CELL_NAME,
g.CELL_STATE,
g.TOP5_SECTOR_SET,
g.SECTOR_SET,
g.ALARM_NUMS,
g.ALARM_CELLS,
g.NR_ALARM_CELLS,
g.PC_TOT_CityNo,
g.POOR_GRID_NUMS_ORDERNO,
CASE g.do_type
    WHEN 1 THEN '工程'
    WHEN 2 THEN '维护'
    WHEN 3 THEN '优化'
    WHEN 4 THEN '规划'
ELSE '未知' END AS do_type,
case
when f.order_id is null then  0
else 1 END  isHasOrder ,
g.lte_to_3g_tot,
g.lte_to_3g_orderno,
round(g.flow_4g_tot,2) flow_4g_tot,
g.flow_4g_orderno,
g.user_4g_avg,
g.user_4g_orderno,
round(g.CE_GOOD_RATIO_AVG*100,2) CE_GOOD_RATIO_AVG,
g.ce_good_ratio_orderno,
g.ALL_GRID_NUMS,
g.POOR_GRID_NUMS_OrderNo,
g.POOR_GRID_AREA,
g.ALL_GRID_AREA,
g.LONGITUDE_MID_BaiDu,
g.LATITUDE_MID_BaiDu,
CASE g.BELONG_AREA_ID
    WHEN 1 THEN '市区'
    WHEN 2 THEN '县城'
    WHEN 3 THEN '乡镇'
    WHEN 4 THEN '农村'
ELSE '未知' END AS BELONG_AREA_ID,
g.GIS_DATA,
round(g.pc_orderno_tot,2) pc_orderno_tot,
g.day,
g.SCENE_TYPE,
g.city_id,
g.country_id,
f.order_id
from (
SELECT
*
FROM FRT_AGPS_POOR_COVERAGE_D
WHERE DAY = #{DAY}
AND TYPE = #{TYPE}
AND object_id = #{OBJECTID}
AND grid_type = 20
AND gis_data is not null
) as g LEFT JOIN ALT_AGPS_POOR_COVERAGE_D as f ON (g.day=f.day and g.OBJECT_ID =f.object_id and  g.grid_type=f.grid_type)
]]>
</sqlTemplate>
	<!--筛选-->
	<sqlTemplate id="SitePlanning_filter_getDbsite" description="筛选库内站点信息" DB="mysql">
		SELECT id,demand_number,db_number,scroll_demand_bst_number,plan_adress_number,physical_address_number,physical_address_name,physical_address,province,city,address_longitude,address_latitude,area_type,scenes_type,new_resource_tag,own_line_province,own_line_nation,priority_level,is_indoor,system_type,band,province_construction_type,is_bbu_centralized_deployment,is_remote_adjustment,radio_frequency_count,rru_paln_power,rru_transceiver,factory,is_unicom_shared,design_institute_name,door_scenes_type,sector_option,ant_azimuth,ant_count,high,floor_or_ground,plan_distance,splitters_explanation,indoor_type,indoor_scenes,building_or_position,building_area,indoor_das_type,is_ca_demand,recent_poor_id,poor_time,poor_distance,poor_area,not_poor_type_remark,not_poor_detailed_description,is_thirdparty_or_tower,tower_name,tower_longitude,tower_latitude,tower_distance,storage_time,update_time,update_reason,building_progress,priority_building_number,remarks,status,submit_time,audit_user,audit_time,recent_reviser,recent_time,reviser_detail,audit_id,country,import_user,audit_option,is_reimport,audit_city_level,proposed_settlement_of_poor_ranking,delete_status,demand_type,build_type,Engineering_period,Engin_current_state,street,Is_new_line,Is_hot_line,station_address_type,sector_num,Is_support_CL,Tower_Mast_Information,ant_tilt,indoor_pRRU_num,indoor_RRU_num,Place_name,Place_area,Bid_alignment,Coverage_Assessment,Capacity_evaluation,Station_spacing_evaluation,Main_Scene_Evaluation,Weakregion_correlation_evaluation,Signal_strength_evaluation,Area_evaluation,overall_merit,eNodeB_ID,Cell_ID,Admission_time,Longitude_access,Latitude_access,Site_owner,Owner_name,contact_name,contact_type,contact_coding,child_scenes_type,day FROM dm_zdgh_db_site WHERE demand_number IN (#{demand_numbers});
	</sqlTemplate>
	<sqlTemplate id="SitePlanning_filter_getImportsite" description="筛选导入站点信息" DB="mysql">
		SELECT id, demand_number, scroll_demand_bst_number, plan_adress_number, physical_address_number, physical_address_name, physical_address, province, city, address_longitude, address_latitude, area_type, scenes_type, new_resource_tag, own_line_province, own_line_nation, priority_level, is_indoor, system_type, band, province_construction_type, is_bbu_centralized_deployment, is_remote_adjustment, radio_frequency_count, rru_paln_power, rru_transceiver, factory, is_unicom_shared, design_institute_name, door_scenes_type, sector_option, ant_azimuth, ant_count, high, floor_or_ground, plan_distance, splitters_explanation, indoor_type, indoor_scenes, building_or_position, building_area, indoor_das_type, is_ca_demand, recent_poor_id, poor_time, poor_distance, poor_area, not_poor_type_remark, not_poor_detailed_description, is_thirdparty_or_tower, tower_name, tower_longitude, tower_latitude, tower_distance, storage_time, update_time, update_reason, building_progress, priority_building_number, remarks, status, submit_time, country, import_user, audit_option, is_reimport, audit_city_level, proposed_settlement_of_poor_ranking, demand_type, build_type, Engineering_period, Engin_current_state, street, Is_new_line, Is_hot_line, station_address_type, sector_num, Is_support_CL, Tower_Mast_Information, ant_tilt, indoor_pRRU_num, indoor_RRU_num, Place_name, Place_area, Bid_alignment, Coverage_Assessment, Capacity_evaluation, Station_spacing_evaluation, Main_Scene_Evaluation, Weakregion_correlation_evaluation, Signal_strength_evaluation, Area_evaluation, overall_merit, eNodeB_ID, Cell_ID, Admission_time, Longitude_access, Latitude_access, Site_owner, Owner_name, contact_name, contact_type, contact_coding, child_scenes_type FROM dm_zdgh_import_site WHERE demand_number IN (#{demand_numbers});
	</sqlTemplate>
	<sqlTemplate id="SitePlanning_filter_getRefusesite" description="筛选不通过站点信息" DB="mysql">
		SELECT id, demand_number, scroll_demand_bst_number, plan_adress_number, physical_address_number, physical_address_name, physical_address, province, city, address_longitude, address_latitude, area_type, scenes_type, new_resource_tag, own_line_province, own_line_nation, priority_level, is_indoor, system_type, band, province_construction_type, is_bbu_centralized_deployment, is_remote_adjustment, radio_frequency_count, rru_paln_power, rru_transceiver, factory, is_unicom_shared, design_institute_name, door_scenes_type, sector_option, ant_azimuth, ant_count, high, floor_or_ground, plan_distance, splitters_explanation, indoor_type, indoor_scenes, building_or_position, building_area, indoor_das_type, is_ca_demand, recent_poor_id, poor_time, poor_distance, poor_area, not_poor_type_remark, not_poor_detailed_description, is_thirdparty_or_tower, tower_name, tower_longitude, tower_latitude, tower_distance, storage_time, update_time, update_reason, building_progress, priority_building_number, remarks, status, submit_time, audit_user, audit_time, audit_id, country, import_user, audit_option, is_reimport, audit_city_level, proposed_settlement_of_poor_ranking, reimport, demand_type, build_type, Engineering_period, Engin_current_state, street, Is_new_line, Is_hot_line, station_address_type, sector_num, Is_support_CL, Tower_Mast_Information, ant_tilt, indoor_pRRU_num, indoor_RRU_num, Place_name, Place_area, Bid_alignment, Coverage_Assessment, Capacity_evaluation, Station_spacing_evaluation, Main_Scene_Evaluation, Weakregion_correlation_evaluation, Signal_strength_evaluation, Area_evaluation, overall_merit, eNodeB_ID, Cell_ID, Admission_time, Longitude_access, Latitude_access, Site_owner, Owner_name, contact_name, contact_type, contact_coding, child_scenes_type FROM dm_zdgh_refused_site WHERE demand_number IN (#{demand_numbers});
	</sqlTemplate>

	<!--智能调优的模板开始-->

	<sqlTemplate id="AntAdj_00_GetMaxDayFrom_FRT_AGPS_PC_ENB_D" description="获取3.171表的最新日期" DB="mysql">
		select max(day) as day from FRT_AGPS_PC_ENB_D
	</sqlTemplate>

	<!--/**变量说明
	#{DAY}: 日期，如20180101
	#{CITYCOND}: 地市条件，如全省搜索，则取值为空串，如指定地市，如广州，则取值为：and CITY='广州'
	#{CELL_NAME_OR_CODE}: 用于模板匹配小区名称或小区编码（格式为ENODEB_ID+'\_'+cell_id）的字符串 (特别注意：下划线需要用\转义，否则代理匹配任意一个字符）
	*/-->
	<sqlTemplate id="AntAdj_01_SectorSearchByNameOrCode" description="根据编号搜索小区" DB="mysql">
		select CELL_NAME,
		concat(ENODEB_ID,'_',cell_id) as cell_code,
		city
		from  FRT_AGPS_PC_ENB_D
		where day=#{DAY}
		#{CITYCOND}
		-- and NETTYPE='4G'
		and ( (concat_ws('_',ENODEB_ID,cell_id) like '%#{CELL_NAME_OR_CODE}%' ) or (cell_name like '%#{CELL_NAME_OR_CODE}%' ))
		limit 10
	</sqlTemplate>

	<!--/**变量说明
	#{DAY}:日期
	#{CITY_ID}：地市ID
	*/-->
	<sqlTemplate id="AntAdj_02_GetAllCells" description="取出某地市的所有小区" DB="mysql">
		select
		day, -- 日期
		city,-- 地市名称
		country,-- 区县名称
		mktcenter, -- 营服名称
		ENODEB_ID, -- 基站ID
		CELL_ID, -- 扇区ID
		CELL_NAME, -- 扇区名称
		CASE BELONG_AREA_ID
		WHEN 1 THEN '市区'
		WHEN 2 THEN '县城'
		WHEN 3 THEN '乡镇'
		WHEN 4 THEN '农村'
		ELSE '未知' END AS BELONG_AREA_ID,-- 所属区域
		cell_state, -- 扇区状态
		bs_vendor, -- 厂家
		is_indoor, -- 室内外
		ANT_AZIMUTH, -- 方位角
		band_mapping, -- 频段映射
		m3_is_new, -- MOD3扇区是否新增标识
		ol_is_new, -- 重叠扇区是否新增标识
		cb_is_new, -- 越区扇区是否新增标识
		LOCA_ABNOR_IS_NEW , -- 坐标勘误是否新增标识
		ANT_CONN_ABNOR_IS_NEW , -- 天馈接反是否新增标识
		POOR_COV_IS_NEW , -- 弱覆盖是否新增标识
        DECL_ANGLE_ABNOR_IS_NEW , -- 下倾角勘误是否新增的标识
		is_m3_cov,-- 是否是MOD3干扰的标识
		is_ol_cov, -- 是否是重叠覆盖的标识
		is_cb_cov , -- 是否是越区覆盖的标识
		IS_LOCA_ABNOR, -- 是否是坐标勘误的标识
		is_decl_angle_abnor , -- 是否是下倾角勘误的标识
		all_mr_count, -- MOD3和重叠覆盖扇区的mr条数过滤字段
		agps_mr_count, -- 越区扇区的mr条数过滤字段
		ORDERNO_TOT, -- 推荐排序字段(全部扇区)
		m3_orderno_tot, -- MOD3推荐排序字段
		ol_orderno_tot, -- 重叠推荐排序字段
		cb_orderno_tot, -- 越区推荐排序字段
		lte_to_3g_tot, -- 下切优先的排序字段
		flow_4g_tot, -- 流量优先的排序字段
		ce_good_ratio_avg, -- 感知优先的排序字段
		poor_coverage_count, -- 弱覆盖优先的排序字段
		user_4g_avg, -- 用户数优先的排序字段
		M3MRRAT, -- MOD3占比优先的排序字段
		OLMRRAT, -- 重叠占比优先的排序字段
		CBMRRAT, -- 越区占比优先的排序字段
		LONGITUDE_MID_BAIDU, -- 百度经度
		LATITUDE_MID_BAIDU ,-- 百度纬度
		PRED_DISTANCE ,-- 预测偏差距离
		IS_ANT_CONN_ABNOR , -- 是否天馈接反
		PRED_AZIMUTH_DIFF , -- 预测偏离角度
		NB_POOR_COVERAGE_COUNT , -- 附近弱区数量
		IS_EXIST_POOR__AREA, -- 是否存在弱覆盖
		PROBLEM_NAME, -- 问题类型
		ZNTY_TASK_ID as task_id , -- 工单ID
        IS_LOCA_ABNOR,-- 派单门限
        SYS_STATUS -- 状态
		from FRT_AGPS_PC_ENB_D
		WHERE DAY = #{DAY}
		AND city_id=#{CITY_ID}
		and ENODEB_ID is not null
		and CELL_ID is not null
		#{PROBLEM_NAME}
		-- and PROBLEM_NAME is not null
		#{MINLNG}
		#{MAXLNG}
		#{MINLAT}
		#{MAXLAT}
	</sqlTemplate>

    <!--/**变量说明
	#{DAY}:日期
	#{CITY_ID}：地市ID
	*/-->
	<sqlTemplate id="AntAdj_02_GetAllProblemCells" description="取出某地市的所有问题小区" DB="mysql">
        SELECT DISTINCT
        DAY,
        -- 日期
        city,
        -- 地市名称
        country,
        -- 区县名称
        mktcenter,
        -- 营服名称
        ENODEB_ID,
        -- 基站ID
        CELL_ID,
        -- 扇区ID
        CELL_NAME,
        -- 扇区名称
        CASE BELONG_AREA_ID
        WHEN 1 THEN
        '市区'
        WHEN 2 THEN
        '县城'
        WHEN 3 THEN
        '乡镇'
        WHEN 4 THEN
        '农村'
        ELSE
        '未知'
        END AS BELONG_AREA_ID,
        -- 所属区域
        cell_state,
        -- 扇区状态
        bs_vendor,
        -- 厂家
        is_indoor,
        -- 室内外
        ANT_AZIMUTH,
        -- 方位角
        band_mapping,
        -- 频段映射
        m3_is_new,
        -- MOD3扇区是否新增标识
        ol_is_new,
        -- 重叠扇区是否新增标识
        cb_is_new,
        -- 越区扇区是否新增标识
        LOCA_ABNOR_IS_NEW,
        -- 坐标勘误是否新增标识
        ANT_CONN_ABNOR_IS_NEW,
        -- 天馈接反是否新增标识
        POOR_COV_IS_NEW,
        -- 弱覆盖是否新增标识
        DECL_ANGLE_ABNOR_IS_NEW,
        -- 下倾角勘误是否新增的标识
        is_m3_cov,
        -- 是否是MOD3干扰的标识
        is_ol_cov,
        -- 是否是重叠覆盖的标识
        is_cb_cov,
        -- 是否是越区覆盖的标识
        IS_LOCA_ABNOR,
        -- 是否是坐标勘误的标识
        is_decl_angle_abnor,
        -- 是否是下倾角勘误的标识
        all_mr_count,
        -- MOD3和重叠覆盖扇区的mr条数过滤字段
        agps_mr_count,
        -- 越区扇区的mr条数过滤字段
        ORDERNO_TOT,
        -- 推荐排序字段(全部扇区)
        m3_orderno_tot,
        -- MOD3推荐排序字段
        ol_orderno_tot,
        -- 重叠推荐排序字段
        cb_orderno_tot,
        -- 越区推荐排序字段
        lte_to_3g_tot,
        -- 下切优先的排序字段
        flow_4g_tot,
        -- 流量优先的排序字段
        ce_good_ratio_avg,
        -- 感知优先的排序字段
        poor_coverage_count,
        -- 弱覆盖优先的排序字段
        user_4g_avg,
        -- 用户数优先的排序字段
        M3MRRAT,
        -- MOD3占比优先的排序字段
        OLMRRAT,
        -- 重叠占比优先的排序字段
        CBMRRAT,
        -- 越区占比优先的排序字段
        LONGITUDE_MID_BAIDU,
        -- 百度经度
        LATITUDE_MID_BAIDU,
        -- 百度纬度
        PRED_DISTANCE,
        -- 预测偏差距离
        IS_ANT_CONN_ABNOR,
        -- 是否天馈接反
        PRED_AZIMUTH_DIFF,
        -- 预测偏离角度
        NB_POOR_COVERAGE_COUNT,
        -- 附近弱区数量
        IS_EXIST_POOR__AREA,
        -- 是否存在弱覆盖
        PROBLEM_NAME,
        -- 问题类型
        ZNTY_TASK_ID AS task_id,
        -- 工单ID
        IS_LOCA_ABNOR,
        -- 派单门限
        SYS_STATUS -- 状态
        FROM
        FRT_AGPS_PC_ENB_D
        WHERE DAY = #{DAY}
        AND city_id=#{CITY_ID}
        AND ENODEB_ID IS NOT NULL
        AND CELL_ID IS NOT NULL
        #{PROBLEM_NAME}
        AND (
        IS_ANT_CONN_ABNOR = 1
        OR IS_LOCA_ABNOR = 1
        OR IS_CB_COV = 1
        OR IS_EXIST_POOR__AREA = 1
        OR IS_OL_COV = 1
        OR IS_DECL_ANGLE_ABNOR = 1
        OR IS_M3_COV = 1
        OR TRIM(PROBLEM_NAME) != ''
        )
	</sqlTemplate>

	<!--/**变量说明
	#{ENODEB_ID}:基站ID
	#{CELL_ID}: 小区ID
	*/-->
	<sqlTemplate id="AntAdj_03_GetProblemCell" description="取指定某个的小区方案数据" DB="mysql">
		SELECT
		ENODEB_ID,
		CELL_ID,
		OPRT_SOLU_RESULT,
		COMF_TIME,
		COMF_OPINION,
		COMF_NOTE,
		OPRT_ETIME,
		COMF_TASK_ID,
		OPRT_RESULT,
		EVAL_ETIME,
		EVAL_RESULT,
		PROBLEM_NAME,
		ANT_ELECTRON_ANGLE,
		SUGG_ANT_ELECTRON_ANGLE,
		PILOT_POWER,
		SUGG_PILOT_POWER,
		HANDOVER,
		SUGG_HANDOVER,
		PCI,
		SUGG_PCI,
		SOLUTION,
		SYS_STATUS,
		TASK_CREATE_TIME
		FROM
		FRT_ZNTY_CELL_OPTI_TASK_D
		WHERE
		ENODEB_ID = #{ENODEB_ID}
		AND CELL_ID = #{CELL_ID}
		AND
		DAY = (
		SELECT
		MAX(DAY)
		FROM
		FRT_ZNTY_CELL_OPTI_TASK_D
		)
		ORDER BY
		TASK_CREATE_TIME DESC
		LIMIT 10
	</sqlTemplate>
	<!--/**变量说明
	#{ENODEB_ID}:基站ID
	#{CELL_ID}: 小区ID
	*/-->
	<sqlTemplate id="AntAdj_03_01_GetCellCurSet" description="取指定某个的小区方案数据的当前设置" DB="mysql">
		SELECT
		ant_electron_angle,pilot_power,PCI,`DAY`
		FROM
		FRT_AGPS_PC_ENB_D
		WHERE
		DAY = (
		SELECT
		MAX(DAY)
		FROM
		FRT_AGPS_PC_ENB_D
		)
		AND ENODEB_ID = #{ENODEB_ID}
		AND CELL_ID = #{CELL_ID}
	</sqlTemplate>
	<!--/**变量说明
	#{ENODEB_ID}:基站ID
	#{CELL_ID}: 小区ID
	#{start}:开始时间 yyyyMMdd
	#{end}:结束时间 yyyyMMdd
	*/-->
	<sqlTemplate id="AntAdj_03_01_GetCellRefer" description="获取小区的参考方案" DB="mysql">
		SELECT
		PROBLEM,-- 	问题类型
		DAY,-- 	日期
		SOLUTION-- 	 优化方案
		FROM
		FRT_ZNTY_CELL_OPTI_D
		WHERE
		<!--DAY = (-->
		<!--SELECT-->
		<!--MAX(`DAY`)-->
		<!--FROM-->
		<!--FRT_ZNTY_CELL_OPTI_D-->
		<!--)-->
		DAY BETWEEN #{start}
		AND #{end}
		AND ENODEB_ID = #{ENODEB_ID}
		AND CELL_ID = #{CELL_ID}
	</sqlTemplate>

	<!--/**变量说明
	#{STARTDAY}：开始日期
	#{ENDDAY}：结束日期
	#{ENODEB_ID}:基站ID
	#{CELL_ID}: 小区ID
	*/-->
	<sqlTemplate id="AntAdj_05_GetTrendData" description="取出大部分的趋势图数据和邻区列表和站间距柱状图的数据" DB="mysql">
		select
		round( CBMRRAT * 100 , 2)  as CBMRRAT, -- 越区占比
		round( OLMRRAT * 100 , 2)  as OLMRRAT, -- 重叠占比
		IS_ANT_CONN_ABNOR, -- 天馈现接反
		NB_AGPS_MR_COV_RATE, -- 区域统计的折线图的覆盖率数据，值按逗号分隔，分别表示300米、500米、1公里、3公里
		NB_AGPS_MR_DWRATE, -- 区域统计的折线图的下行速率数据，值按逗号分隔，分别表示300米、500米、1公里、3公里
		SPACING_AGPS_MRNUM_D as SPACING_AGPS_MRNUM, -- 站间距列表的AGPS数量,这里也是字符串进行切割，拿出每个区间的数值
		SPACING_AGPS_PMRNUM_D  as SPACING_AGPS_PMRNUM, -- 站间距列表的覆盖率,这里也是字符串进行切割，拿出每个区间的数值
		SPACING_AGPS_DWRATE_SUM_D as SPACING_AGPS_DWRATE_SUM, -- 站间距列表的速率,这里也是字符串进行切割，拿出每个区间的数值
		PROBLEM_NAME, -- 问题类型
		POOR_AREA_COV_RATE, -- 弱覆盖
		POOR_AREA_DWRATE, -- 下行速率(弱覆盖)
  		POOR_AREA_MRNUMS, -- MR(弱覆盖)
		OL_AREA_COV_RATE, -- 重叠覆盖
		OL_AREA_DWRATE, -- 下行速率(重叠覆盖)
        OL_AREA_MRNUMS, -- MR(重叠覆盖)
		CB_AREA_COV_RATE, -- 越区覆盖
		CB_AREA_DWRATE, -- 下行速率(越区覆盖)
        CB_AREA_MRNUMS, -- MR(越区覆盖)
		PRED_DISTANCE, -- 偏离距离
		PRED_AZIMUTH_DIFF, -- 偏转角度
		ANT_declination_angle, -- 台账总下倾角
  		PRED_ANT_DECLINATION_ANGLE, -- 预测总下倾角
    	ROUND(PRED_ANT_DECLINATION_ANGLE - ANT_declination_angle, 2) AS declination_disparity, -- 下倾角差值
		DAY
		from FRT_AGPS_PC_ENB_D
		where
		day between #{STARTDAY} AND  #{ENDDAY}
		AND ENODEB_ID = #{ENODEBID}
		AND CELL_ID = #{CELLID}
		order by day
	</sqlTemplate>

	<!--/**变量说明
	#{STARTDAY}：开始日期
	#{ENDDAY}：结束日期
	#{ENODEB_ID}:基站ID
	#{CELL_ID}: 小区ID
	*/-->
	<sqlTemplate id="AntAdj_06_GetMOD3TrendData" description="取MOD3干扰的占比数据" DB="mysql">
		select
		round( (M3MRNUM_SC0/ ALL_MR_COUNT)* 100 , 2 ) as sc0 , -- 作为主扇区的模0干扰度
		round( (M3MRNUM_SC1/ ALL_MR_COUNT)* 100 , 2 ) as sc1, -- 作为主扇区的模1干扰度
		round( (M3MRNUM_SC2/ ALL_MR_COUNT)* 100 , 2 ) as sc2, -- 作为主扇区的模2干扰度
		round( (M3MRNUM_NC0/ ALL_MR_NC_COUNT)* 100 , 2 ) as nc0 , -- 作为邻区扇区的模0干扰度
		round( (M3MRNUM_NC1/ ALL_MR_NC_COUNT)* 100 , 2 ) as nc1, -- 作为邻区扇区的模1干扰度
		round( (M3MRNUM_NC2/ ALL_MR_NC_COUNT)* 100 , 2 ) as nc2, -- 作为邻区扇区的模2干扰度
		day -- 日期
		from FRT_AGPS_PC_ENB_D
		where
		day between #{STARTDAY} AND  #{ENDDAY}
		AND ENODEB_ID = #{ENODEBID}
		AND CELL_ID = #{CELLID}
		order by day
	</sqlTemplate>

	<!--/**变量说明
	#{DAY}：日期
	#{ENODEB_ID}:基站ID
	#{CELL_ID}: 小区ID
	*/-->
	<sqlTemplate id="AntAdj_07_GetSectorByID" description="根据日期和基站扇区编号获取扇区的数据" DB="mysql">
		SELECT
		day,
		ENODEB_NAME,
		city,
		city_id,
		country,
		country_id,
		mktcenter,
		round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
		round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
		ENODEB_ID,
		CELL_ID,
		CELL_NAME,
		CASE BELONG_AREA_ID
		WHEN 1 THEN '市区'
		WHEN 2 THEN '县城'
		WHEN 3 THEN '乡镇'
		WHEN 4 THEN '农村'
		ELSE '未知' END AS BELONG_AREA_ID,
		ALARM_LEVEL,
		ALARM_NUMS,
		CELL_STATE,
		POOR_COVERAGE_COUNT,
		NB_POOR_COVERAGE_COUNT,
		LTE_TO_3G_TOT,
		Flow_4G_TOT,
		User_4G_AVG,
		CE_GOOD_RATIO_AVG,
		GRID_NUMS,
		POOR_COVERAGE_SET ,
        NB_POOR_COVERAGE_SET,  -- 弱覆盖区域集合
        NB_POOR_DWRATEE_SET,  -- 下行低速率区域集合
        NB_M3COV_SET,  -- 模三区域集合
        OL_M3COV_SET,  -- 重叠区域集合
        NB_CBCOV_SET,  -- 越区区域集合
		concat(ENODEB_ID,',',CELL_ID)as sector_set,
		LONGITUDE_MID_BAIDU,
		LATITUDE_MID_BAIDU,
		PRED_LOCATION_BAIDU,
		ant_azimuth,band_mapping ,
		PRED_LOCATION_GPS ,
		BS_VENDOR, -- 厂家
		LOCATION_GPS,
		is_indoor,
		pci , -- PCI
		pilot_power, -- 功率
		ant_electron_angle, -- 电子下倾,
		round(CBMRRAT * 100 , 2) as cb_mrrat, -- 越区覆盖的占比
		round(OLMRRAT * 100 , 2) as ol_mrrat, -- 重叠覆盖的占比
		round(M3MRRAT * 100 , 2) as m3_mrrat, -- 模三干扰的占比
		CB_OrderNo_TOT, -- 越区扇区的推荐排序字段
		OL_OrderNo_TOT, -- 重叠扇区的推荐排序字段
		M3_OrderNo_TOT, -- MOD3干扰扇区的推荐排序字段
		STATION_SPACING, -- 站间距
		SPACING_AGPS_MRNUM, -- 各站间距AGPS数量
		CBMRNUM, -- 越区全量MR数
		OLMRNUM, -- 重叠全量MR数
		M3MRNUM, -- MOD3全量MR数
		AGPS_OLMRNUM, -- 重叠AGPSMR数
		AGPS_M3MRNUM, -- MOD3AGPSMR数
		agps_mr_count, -- 越区覆盖的MR条数
		ALL_MR_COUNT, -- 模三干扰和重叠的MR条数
		CB_IS_NEW, -- 是否是新增的越区扇区
		OL_IS_NEW, -- 是否是新增的重叠扇区
		M3_IS_NEW, -- 是否是新增的M3干扰扇区
		CB_GRID_COUNT, -- 越区栅格数
		OL_GRID_COUNT, -- 重叠栅格数
		M3_GRID_COUNT, -- M3干扰栅格数
		LTE_USER_COUNT, -- 全量4G用户数
		CBNCCELL_SET,-- 越区邻区列表
		OLNCCELL_SET, -- 重叠邻区列表
		M3NCCELL_SET, -- M3邻区列表
		AGPS_MR_COUNT , -- 包含AGPS的MR条数
		AGPS_MR_DIST_AVG , -- 包含AGPS的MR与小区平均距离
		AGPS_MR_DIST_TA , -- 包含AGPS的MR与小区每TA平均距离
		PRED_AZIMUTH , -- 预测角度
		PRED_AZIMUTH_DIFF , -- 偏离角度
		SURPORT_NUMBER , -- 预测位置支持MR条数
		PRED_DISTANCE , -- 预测位置的相差距离
        ANT_declination_angle, -- 台账总下倾角
        PRED_ANT_DECLINATION_ANGLE,-- 预测总下倾角
        ANT_MID_RADIUS, -- 台账覆盖半径
        PRED_ANT_MID_RADIUS, -- 预测覆盖半径
        ANT_NEAR_RADIUS, -- 台账覆盖近端半径
        ANT_MAX_RADIUS, -- 台账覆盖远端半径
        PRED_ANT_NEAR_RADIUS, -- 预测覆盖近端半径
        PRED_ANT_MAX_RADIUS, -- 预测覆盖远端半径
		IS_ANT_CONN_ABNOR, -- 天馈接反
		ZNTY_TASK_ID as task_id, -- 工单ID
        PROBLEM_NAME, -- 问题类型
        SYS_STATUS, -- 状态
		SURP_AZIMUTH_COUNT,  -- 支持方位角预测条数
		POOR_AREA_TGRID_COUNT,	 -- 弱覆盖区域总栅格数
		POOR_AREA_PGRID_COUNT,	 -- 弱覆盖区域弱栅格数
		POOR_AREA_COV_RATE,	 -- 弱覆盖区域覆盖率
		REF_POOR_AREA_GIS_BD,	 -- 弱覆盖问题区域多边形
		CB_AREA_GIS_BD,	 -- 越区覆盖问题区域多边形
		OL_AREA_GIS_BD	 -- 重叠覆盖问题区域多边形
		FROM FRT_AGPS_PC_ENB_D
		WHERE DAY = #{DAY}
		AND  ENODEB_ID = #{ENODEBID}
		AND CELL_ID = #{CELLID}
	</sqlTemplate>

    <!--/**变量说明
        #{DAY}：日期
        #{BSTIDANDCELLID}:基站ID*1000000+cell_id拼接形成的字符串
        */-->
    <sqlTemplate id="IntelligentTuning_15_nrSectorList" description="取邻区数据">
        <![CDATA[
        select distinct city_id,base_statn_id,longitude_baidu,latitude_baidu,
        ant_azimuth,cell_id,cell_name,is_indoor,band,band_mapping,day
        from noce.dim_sector
        where day = #{DAY}
        AND nettype='4G'
        AND base_statn_id*1000000+cell_id in (#{BSTIDANDCELLID})
        and longitude_baidu is not null
        and latitude_baidu is not null
        and longitude is not null
        and latitude is not null order by field(base_statn_id*1000000+cell_id,#{BSTIDANDCELLID})
        ]]>
    </sqlTemplate>


	<!--/**变量说明
	#{STARTDAY}：开始日期
	#{ENDDAY}：结束日期
	#{ENODEB_ID}:基站ID
	#{CELL_ID}: 小区ID
	*/-->
	<sqlTemplate id="AntAdj_08_GetDistanceTrendData" description="取出坐标勘误的图表数据" DB="mysql">
		SELECT 
		  PRED_LOCATION_BAIDU,
		  PRED_DISTANCE,
		  DAY 
		FROM
		  FRT_AGPS_PC_ENB_D 
		WHERE 
		  DAY between #{STARTDAY} AND #{ENDDAY}
		  AND ENODEB_ID = #{ENODEBID} 
		  AND CELL_ID = #{CELLID} 
		  AND PRED_LOCATION_BAIDU IS NOT NULL 
		  AND PRED_DISTANCE IS NOT NULL
		ORDER BY DAY 
	</sqlTemplate>
	
	<!--/**变量说明
	#{STARTDAY}：开始日期
	#{ENDDAY}：结束日期
	#{ENODEB_ID}:基站ID
	#{CELL_ID}: 小区ID
	*/-->
	<sqlTemplate id="AntAdj_09_GetPoorRateTrendData" description="取出弱覆盖占比的图表数据" DB="mysql">
		SELECT 
		  DAY,
		  round( (SC_RSRP_105_CNT / SC_RSRP_140_CNT) * 100 , 2) POOR_RATE
		FROM
		  frt_mro_all_cell_d 
		WHERE AGPS_TYPE = 0 
		  AND DAY between #{STARTDAY} AND #{ENDDAY}
		  AND ENODEB_ID = #{ENODEBID} 
		  AND CELL_ID = #{CELLID} 
		ORDER BY DAY 
	</sqlTemplate>

    <!--/**变量说明
	 #{DAY}：日期
	 #{BSTIDANDCELLID}:基站ID*100000+cell_id拼接的字符串
	*/-->
    <sqlTemplate id="AntAdj_08_GetNrSectorProblem" description="查询扇区邻小区的问题清单" DB="mysql">
        SELECT
        ENODEB_ID,
        CELL_ID,
        PROBLEM_NAME,
        MKTCENTER,
        BS_VENDOR,
        BAND_MAPPING,
        ROUND(CBMRRAT * 100, 2) cb_mrrat,
        ROUND(olmrrat * 100, 2) ol_mrrat,
        ROUND(M3MRRAT * 100, 2) m3_mrrat,
        POOR_AREA_COV_RATE,
        POOR_AREA_TGRID_COUNT,
        POOR_AREA_PGRID_COUNT,
		LONGITUDE_MID_BAIDU,
		LATITUDE_MID_BAIDU,
		is_indoor,
		day,
		ant_azimuth,
		city,
		country,
		mktcenter
        FROM
        noce.frt_agps_pc_enb_d
        WHERE
        DAY = #{DAY}
        AND ENODEB_ID * 1000000 + cell_id IN (#{BSTIDANDCELLID})
        ORDER BY field(ENODEB_ID * 1000000 + cell_id,#{BSTIDANDCELLID})
    </sqlTemplate>

    <sqlTemplate id="IntelligentTuningBoxSelection_01_getGridData" description="获取栅格数据-4.29.1表" DB="hbase">
        <![CDATA[
        getGridsByContour
        #{TABLENAME}
        #{GRIDKEYPREFIX}
        #{GRIDLEVEL}
        #{POLYGONCONTOUR}
        #{COLUMNLIST}
        rowkey 0
        ]]>
    </sqlTemplate>
	<!--智能调优的模板结束-->

	<sqlTemplate id="intelligentAdjustment_getHis" description="调参历史表">
		<![CDATA[
			SELECT
			ID,
			VERSION,
			case ADJ_TYPE when '/rcu/tilts' then '电子下倾角'
			when '/rcu/azimuths' then '方位角'
			when '/parameters' then '参数' end ADJ_TYPE,
			PROVINCE_ID,
			case VENDOR_ID when 7 then '中兴' else '华为' end VENDOR_ID,
			BODY, PROCESS_TIME, REQUESTID, QUERY_TIME, QUERY_RESULT,
			opti_id AS optiId,
			`status`
			FROM
				noce.dm_ant_adj_his
			ORDER BY
				PROCESS_TIME DESC
        ]]>
	</sqlTemplate>
    <sqlTemplate id="SectorUtilForBaidu_01_querySector_ByScope_OnlyDrawField_otherTable" description="百度地图canvas画基站(天翼蓝鹰，从3.171取数)后台查询sql（仅取指定范围内数据">
        <![CDATA[
        select ENODEB_ID AS base_statn_id,cell_id,
        LONGITUDE_MID_BAIDU AS LONGITUDE_BAIDU,
        LATITUDE_MID_BAIDU AS LATITUDE_BAIDU,
        ant_azimuth,
        #{QueryField}
        CASE IS_INDOOR WHEN '室外' THEN 2 WHEN '室内' THEN 1 WHEN '室外和室内' THEN 3 ELSE 0 END AS type,
        BAND_MAPPING as band_order
        from noce.frt_agps_pc_enb_d
        where day = #{DAY}
        #{CITY} -- 地市
        #{COUNTRY} -- 区县
        #{MKTCENTER} -- 营服
        #{BAND} -- 频率
        #{FACTORY} -- 厂家
        #{INDOOR} -- 室内外
        #{CONDITION} -- 其他查询条件
        AND abs(LONGITUDE_MID_BAIDU - #{CENTERLONGITUDE})<0.00980657*#{KM} -- 中心经度， #{KM}为范围大小，建议取5。下同
        and abs(LATITUDE_MID_BAIDU - #{CENTERLATITUDE}) < 0.00899322*#{KM} -- 中心纬度，
        order by band_order
        ]]>
    </sqlTemplate>

    <sqlTemplate id="SectorUtilForOSM_01_querySector_ByScope_OnlyDrawField_otherTable" description="OSM地图canvas画基站(天翼蓝鹰，从3.171取数)后台查询sql（仅取指定范围内数据">
        <![CDATA[
        select ENODEB_ID AS base_statn_id,cell_id,
        LONGITUDE_MID_BAIDU AS LONGITUDE,
        LATITUDE_MID_BAIDU AS LATITUDE,
        ant_azimuth,
        #{QueryField}
        CASE IS_INDOOR WHEN '室外' THEN 2 WHEN '室内' THEN 1 WHEN '室外和室内' THEN 3 ELSE 0 END AS type,
        BAND_MAPPING as band_order
        from noce.frt_agps_pc_enb_d
        where day = #{DAY}
        #{CITY} -- 地市
        #{COUNTRY} -- 区县
        #{MKTCENTER} -- 营服
        #{BAND} -- 频率
        #{FACTORY} -- 厂家
        #{INDOOR} -- 室内外
        #{CONDITION} -- 其他查询条件
        AND abs(LONGITUDE_MID_BAIDU - #{CENTERLONGITUDE})<0.00980657*#{KM} -- 中心经度， #{KM}为范围大小，建议取5。下同
        and abs(LATITUDE_MID_BAIDU - #{CENTERLATITUDE}) < 0.00899322*#{KM} -- 中心纬度，
        order by band_order
        ]]>
    </sqlTemplate>


    <sqlTemplate id="SectorUtilForBaidu_01_querySector_onlyDrawField_otherTable" description="百度地图canvas画基站(天翼蓝鹰查询3.171表)后台查询sql（仅取指定范围内数据">
        <![CDATA[
        SELECT
            ENODEB_ID AS base_statn_id,
            cell_id,
            LONGITUDE_MID_BAIDU AS LONGITUDE_BAIDU,
            LATITUDE_MID_BAIDU AS LATITUDE_BAIDU,
            ant_azimuth,
            #{QueryField}
            CASE IS_INDOOR WHEN '室外' THEN 2 WHEN '室内' THEN 1 WHEN '室外和室内' THEN 3 ELSE 0 END AS type,
            BAND_MAPPING AS band_order
        FROM
            noce.frt_agps_pc_enb_d
        WHERE
            DAY = #{DAY}
            #{CITY} -- 地市
            #{COUNTRY} -- 区县
            #{MKTCENTER} -- 营服
            #{BAND} -- 频率
            #{FACTORY} -- 厂家
            #{INDOOR} -- 室内外
            #{CONDITION} -- 其他查询条件
        AND LONGITUDE_MID_BAIDU IS NOT NULL
        ORDER BY band_order
        ]]>
    </sqlTemplate>

    <sqlTemplate id="SectorUtilForOSM_01_querySector_onlyDrawField_otherTable" description="OSM地图canvas画基站(天翼蓝鹰查询3.171表)后台查询sql（仅取指定范围内数据">
        <![CDATA[
        SELECT
            ENODEB_ID AS base_statn_id,
            cell_id,
            LONGITUDE_MID_BAIDU AS LONGITUDE,
            LATITUDE_MID_BAIDU AS LATITUDE,
            ant_azimuth,
            #{QueryField}
            CASE IS_INDOOR WHEN '室外' THEN 2 WHEN '室内' THEN 1 WHEN '室外和室内' THEN 3 ELSE 0 END AS type,
            BAND_MAPPING AS band_order
        FROM
            noce.frt_agps_pc_enb_d
        WHERE
            DAY = #{DAY}
            #{CITY} -- 地市
            #{COUNTRY} -- 区县
            #{MKTCENTER} -- 营服
            #{BAND} -- 频率
            #{FACTORY} -- 厂家
            #{INDOOR} -- 室内外
            #{CONDITION} -- 其他查询条件
        AND LONGITUDE_MID_BAIDU IS NOT NULL
        ORDER BY band_order
        ]]>
    </sqlTemplate>
    
    <!--/**变量说明
	#{STARTDAY}：开始日期
	#{ENDDAY}：结束日期
	#{ENODEB_ID}:基站ID
	#{CELL_ID}: 小区ID
	*/-->
	<sqlTemplate id="AntAdj_07_GetErrorSign" description="获取小区问题状态变迁的问题标识" DB="mysql">
		SELECT 
		  IS_CB_COV AS IS_CB_COV, --   是否越区覆盖
		  IS_OL_COV AS IS_OL_COV, --  是否重叠覆盖
		  IS_M3_COV AS IS_M3_COV, --  是否模三干扰覆盖
		  IS_EXIST_POOR__AREA AS IS_EXIST_POOR_AREA, --  是否弱覆盖
		  IS_LOCA_ABNOR, --  是否坐标勘误
		  IS_ANT_CONN_ABNOR, --  是否天馈接反
		  is_decl_angle_abnor -- 是否下倾角勘误
		FROM
		  FRT_AGPS_PC_ENB_D 
		WHERE
		day = #{DAY}
		AND ENODEB_ID = #{ENODEBID}
		AND CELL_ID = #{CELLID}
		order by day
	</sqlTemplate>
	
    <!--/**变量说明
	#{STARTDAY}：开始日期
	#{ENDDAY}：结束日期
	#{ENODEB_ID}:基站ID
	#{CELL_ID}: 小区ID
	*/-->
	<sqlTemplate id="AntAdj_10_GetFeederLineData" description="获取天馈接反的方位角勘误的图表数据" DB="mysql">
		SELECT 
		  DAY,
		  ant_azimuth,
		  PRED_AZIMUTH,
		  PRED_AZIMUTH_DIFF,
		  SWAP_ANT_ENODEB_ID,
		  SWAP_ANT_CELL_ID,
		  (SELECT 
		    ANT_AZIMUTH 
		  FROM
		    frt_agps_pc_enb_d b 
		  WHERE b.day = a.day 
		    AND b.ENODEB_ID = a.SWAP_ANT_ENODEB_ID 
		    AND b.CELL_ID = a.SWAP_ANT_CELL_ID) SWAP_ANT_AZIMUTH 
		FROM
		  frt_agps_pc_enb_d a 
		WHERE 
			day between #{STARTDAY} AND  #{ENDDAY}
			AND ENODEB_ID = #{ENODEBID}
			AND CELL_ID = #{CELLID}
	</sqlTemplate>


	<sqlTemplate id="AntAdj_00_01_GetMaxDayFrom_FRT_ZNTY_CELL_OPTI_TASK_D" description="取表FRT_ZNTY_CELL_OPTI_TASK_D的最新日期" DB="mysql">
		SELECT
		MAX(DAY) day
		FROM
		FRT_ZNTY_CELL_OPTI_TASK_D
	</sqlTemplate>


	<sqlTemplate id="AntAdj_09_StatisticByDay" description="按天统计" DB="mysql">
		select SUBSTR(TASK_CREATE_TIME FROM 1 FOR 10) as create_day,city,country,MKTCENTER,PROBLEM_NAME
		,sum(case when TASK_CREATE_TIME is not null then 1 else 0 end) as TASK_CREATE_count -- 方案派单数
		,sum(case when COMF_TIME is not null then 1 else 0 end) as accept_count -- 方案受理数
		,sum(case when (OPRT_ETIME is not null and OPRT_RESULT ='成功') then 1 else 0 end) as execute_count -- 执行成功数
		,sum(case when (EVAL_ETIME is not null and EVAL_RESULT ='解决') then 1 else 0 end) as resolve_count -- 成功解决数
		from
		FRT_ZNTY_CELL_OPTI_TASK_D
		where day=#{DAY}
		and TASK_CREATE_TIME>= '#{STARTDAY}'
		group by create_day,city,country,MKTCENTER,PROBLEM_NAME
	</sqlTemplate>

	<sqlTemplate id="AntAdj_10_StatisticDetail" description="统计清单" DB="mysql">
		SELECT
		CITY, --  地市名称
		COUNTRY, -- 区县
		MKTCENTER, -- 营服中心
		ENODEB_ID, -- 基站ID
		ENODEB_NAME, -- 基站名称
		CELL_ID, -- 小区ID
		CELL_NAME, -- 小区名称
		BS_VENDOR, -- 设备厂商
		case NB_FLAG when '' then '' when null then '' when 0 then '否' when 1 then '是' end NB_FLAG, -- 是否为NB_IOT
		PRED_LOCATION_GPS, -- 预测GPS位置
		LOCATION_GPS, -- 基站位置GPS
		PRED_DISTANCE, -- 预测位置相差距离
		LOCA_CORR_PRIORIATY, -- 坐标勘误优先值
		ant_azimuth, -- 方位角
		PRED_AZIMUTH, -- 预测角度
		PRED_AZIMUTH_DIFF, -- 偏离角度
		case IS_ANT_CONN_ABNOR when '' then '' when null then '' when 0 then '否' when 1 then '是' end IS_ANT_CONN_ABNOR, -- 是否天馈接反
		SWAP_ANT_ENODEB_ID, -- 天馈接反建议修改基站号
		SWAP_ANT_CELL_ID, -- 天馈接反建议修改小区号
		AGPS_MR_COUNT, -- 包含AGPS的MR条数
		ALL_MR_COUNT, -- 全量MR条数
		STATION_SPACING, -- 站间距
		IS_EXIST_POOR__AREA, -- 是否存在弱覆盖
		POOR_AREA_COV_RATE, -- 弱覆盖区域覆盖率
		POOR_AREA_RSRP_AVG, -- 弱覆盖区域RSRP均值
		IS_CB_COV, -- 是否越区覆盖
		CBMRNUM, -- 越区覆盖MR条数
		CONCAT(round(CBMRRAT*100,2),'%') CBMRRAT, -- 越区覆盖占比
		IS_OL_COV, -- 是否重叠覆盖
		OLMRNUM, -- 重叠覆盖MR量
		CONCAT(round(OLMRRAT*100,2),'%') OLMRRAT, -- 重叠覆盖度
		IS_M3_COV, -- 是否模三干扰覆盖
		M3MRNUM, -- 模三干扰覆盖MR量
		CONCAT(round(M3MRRAT*100,2),'%') M3MRRAT, -- 模三干扰占比
		PROBLEM_NAME, -- 问题类型
		SYS_STATUS, -- 调整实施状态
		ZNTY_OPTI_ID, -- 智能调优方案ID
		ZNTY_TASK_ID, -- 智能调优工单ID

		PRED_LOCATION_BAIDU	, -- 预测百度地图位置
		SURPORT_NUMBER,	 -- 支持预测的MR条数
		AGPS_MR_DIST_AVG,   -- 包含AGPS的MR条数
		AGPS_MR_DIST_TA,   -- 包含AGPS的MR与小区每TA平均距离
		SURP_AZIMUTH_COUNT,   -- 支持方位角预测条数
		LTE_TO_3G_TOT,   -- 4G切3G总次数
		Flow_4G_TOT,   -- 4G总流量(MB)
		CONCAT(round(CE_GOOD_RATIO_AVG*100,2),'%'),   -- 感知优良率按天平均值
		User_4G_AVG,   -- AGPS用户数按天平均值
		round(MIN_USEREX_UPAVGRATE,2),   -- 最小用户体验上行平均速率（Mbps）
		round(MIN_USEREX_DWAVGRATE,2),   -- 最小用户体验下行平均速率（Mbps）
		SPACING_AGPS_MRNUM,   -- 各站间距AGPS数量
		LTE_USER_COUNT   -- 全量4G用户数
		FROM
		FRT_AGPS_PC_ENB_D
		where day=#{DAY}
		#{CITY_ID_COND}
		#{COUNTRY_COND}
		#{MKTCENTER_COND}
		#{PROBLEM_NAME_COND}
        #{SYS_STATUS_COND}
        #{ZNTY_TASK_ID_COND}
		ORDER BY PRED_DISTANCE desc
	</sqlTemplate>

	<sqlTemplate id="AntAdj_10_StatisticDetail_count" description="统计清单总数" DB="mysql">
		SELECT
		count(1) count
		FROM
		FRT_AGPS_PC_ENB_D
		where day=#{DAY}
		#{CITY_ID_COND}
		#{COUNTRY_COND}
		#{MKTCENTER_COND}
		#{PROBLEM_NAME_COND}
        #{SYS_STATUS_COND}
        #{ZNTY_TASK_ID_COND}
	</sqlTemplate>

    <sqlTemplate id="AntAdj_10_Task_List" description="智能调优工单清单" DB="mysql">
        SELECT
            OPTI_ID						-- 调优方案标识
            ,OPTI_CODE					-- 调优方案编码
            ,OPTI_REF_ID				-- 调优方案关联ID
            ,CITY						-- 地市名称
            ,CITY_ID					-- 地市ID
            ,COUNTRY					-- 区县
            ,MKTCENTER					-- 营服中心
            ,COMF_TASK_ID				-- 工单单号
            ,BELONG_AREA_ID				-- 区域归属ID
            ,CONCAT_WS('_',ENODEB_ID,CELL_ID) ENODEB_ID_CELL_ID -- 基站ID_小区ID
            ,CELL_NAME					-- 小区名称
            ,BS_VENDOR					-- 厂家
            ,BS_BAND					-- 频点
            ,ant_azimuth				-- 方位角
            ,is_indoor					-- 是否室内
            ,LONGITUDE_BD				-- 基站小区百度经度
            ,LATITUDE_BD				-- 基站小区百度纬度
            ,LONGITUDE_GPS				-- 基站小区GPS经度
            ,LATITUDE_GPS				-- 基站小区GPS纬度
            ,PROBLEM_ID					-- 问题类型ID
            ,PROBLEM_NAME				-- 问题类型
            ,SOLUTION					-- 优化方案
            ,HANDING_METHON				-- 处理方式
            ,TASK_CREATE_TIME			-- 生成时间
            ,COMF_CREATE_TIME			-- 确认单生成时间
            ,COMF_COMP					-- 确认单位
            ,COMF_DEPT					-- 确认部门
            ,COMF_USER					-- 确认人员
            ,COMF_TIME					-- 确认时间
            ,COMF_OPINION				-- 确认结果
            ,COMF_NOTE					-- 确认说明
            ,OPRT_RESULT				-- 集团执行结果
            ,OPRT_STIME					-- 集团执行开始时间
            ,OPRT_ETIME					-- 集团执行结束时间
            ,EVAL_RESULT				-- 系统评估结果
            ,EVAL_STIME					-- 系统评估开始时间
            ,EVAL_ETIME					-- 系统评估结束时间
            ,SYS_STATUS					-- 调整实施状态
            ,PRIORITY_VALUE				-- 问题处理优先值
        FROM
            frt_znty_cell_opti_task_d
            where day=#{DAY}
            #{CITY_ID_COND}
            #{COUNTRY_COND}
            #{MKTCENTER_COND}
            #{PROBLEM_NAME_COND}
            #{SYS_STATUS_COND}
            #{COMF_TASK_ID_COND}
        ORDER BY
            COMF_TASK_ID DESC
    </sqlTemplate>

    <sqlTemplate id="AntAdj_10_Task_List_count" description="智能调优工单清单总数" DB="mysql">
        SELECT
            count(1) count
        FROM
        frt_znty_cell_opti_task_d
        where day=#{DAY}
        #{CITY_ID_COND}
        #{COUNTRY_COND}
        #{MKTCENTER_COND}
        #{PROBLEM_NAME_COND}
        #{SYS_STATUS_COND}
        #{COMF_TASK_ID_COND}
    </sqlTemplate>

    <sqlTemplate id="AntAdj_11_StatisticDetail_export" description="统计清单导出" DB="mysql">
        SELECT
        CITY,
        CITY_ID,
        COUNTRY,
        COUNTRY_ID,
        MKTCENTER,
        MKTCENTER_ID,
        ENODEB_ID,
        ENODEB_NAME,
        CELL_ID,
        CELL_NAME,
        LONGITUDE_MIN_BaiDu,
        LATITUDE_MIN_BaiDu,
        LONGITUDE_MID_BaiDu,
        LATITUDE_MID_BaiDu,
        LONGITUDE_MAX_BaiDu,
        LATITUDE_MAX_BaiDu,
        BELONG_AREA_ID,
        GRID_NUMS,
        POOR_COVERAGE_SET,
        POOR_COVERAGE_COUNT,
        NB_POOR_COVERAGE_SET,
        NB_POOR_COVERAGE_COUNT,
        LTE_TO_3G_TOT,
        Flow_4G_TOT,
        CE_GOOD_RATIO_AVG,
        User_4G_AVG,
        ALARM_NUMS,
        CELL_STATE,
        ALARM_LEVEL,
        PRED_LOCATION_GPS,
        PRED_LOCATION_BAIDU,
        PRED_DISTANCE,
        LOCA_CORR_PRIORIATY,
        SURPORT_NUMBER,
        BS_VENDOR,
        OrderNo_TOT,
        ant_azimuth,
        band_mapping,
        is_indoor,
        ant_engine_angle,
        ant_electron_angle,
        high,
        acceptstatus,
        sector_addr,
        LOCATION_GPS,
        NB_FLAG,
        MIN_USEREX_UPAVGRATE,
        MIN_USEREX_DWAVGRATE,
        PCI,
        cell_powet,
        ANT_declination_angle,
        AGPS_MR_COUNT,
        AGPS_MR_DIST_AVG,
        AGPS_MR_DIST_TA,
        PRED_AZIMUTH,
        PRED_AZIMUTH_DIFF,
        SURP_AZIMUTH_COUNT,
        STATION_SPACING,
        IS_CB_COV,
        CBMRNUM,
        CBMRRAT,
        CBNCCELL_SET,
        ALL_MR_COUNT,
        IS_OL_COV,
        OLMRNUM,
		CONCAT(round(OLMRRAT*100,2),'%') OLMRRAT,
        OLNCCELL_SET,
        IS_M3_COV,
        M3MRNUM,
		CONCAT(round(M3MRRAT*100,2),'%') M3MRRAT,
        M3NCCELL_SET,
        CB_IS_NEW,
        OL_IS_NEW,
        M3_IS_NEW,
        CB_GRID_COUNT,
        OL_GRID_COUNT,
        M3_GRID_COUNT,
        LTE_USER_COUNT,
        pilot_power,
        M3MRNUM_SC0,
        M3MRNUM_SC1,
        M3MRNUM_SC2,
        ALL_MR_NC_COUNT,
        M3MRNUM_NC0,
        M3MRNUM_NC1,
        M3MRNUM_NC2,
        IS_ANT_CONN_ABNOR,
        LOW_CQI_RATE,
        CB_OrderNo_TOT,
        OL_OrderNo_TOT,
        M3_OrderNo_TOT,
        AGPS_OLMRNUM,
        AGPS_M3MRNUM,
        SPACING_AGPS_MRNUM,
        SPACING_AGPS_GRIDNUM,
        SPACING_AGPS_PGRIDNUM,
        SPACING_AGPS_PMRNUM,
        SPACING_AGPS_RSRP_SUM,
        SPACING_AGPS_DWRATE_SUM,
        IS_EXIST_POOR__AREA,
        REF_POOR_AREA_DATE,
        REF_POOR_AREA_IDS,
        POOR_AREA_TGRID_COUNT,
        POOR_AREA_PGRID_COUNT,
        POOR_AREA_COV_RATE,
        POOR_AREA_RSRP_AVG,
        POOR_AREA_DWRATE,
        NB_AGPS_MR_COUNT,
        NB_AGPS_GRID_COUNT,
        NB_AGPS_PGRID_COUNT,
        NB_AGPS_MR_COV_RATE,
        NB_AGPS_MR_RSRP_AVG,
        NB_AGPS_MR_DWRATE,
        POOR_DWRATE_SET,
        POOR_DWRATE_COUNT,
        NB_POOR_DWRATEE_SET,
        NB_POOR_DWRATE_COUNT,
        M3COV_SET,
        M3COV_COUNT,
        NB_M3COV_SET,
        NB_M3COV_COUNT,
        OLCOV_SET,
        OLCOV_COUNT,
        OL_M3COV_SET,
        NB_OLCOV_COUNT,
        CBCOV_SET,
        CBCOV_COUNT,
        NB_CBCOV_SET,
        NB_CBCOV_COUNT,
        PROBLEM_ID,
        PROBLEM_NAME,
        SYS_STATUS,
        SPACING_AGPS_MRNUM_D,
        SPACING_AGPS_GRIDNUM_D,
        SPACING_AGPS_PGRIDNUM_D,
        SPACING_AGPS_PMRNUM_D,
        SPACING_AGPS_RSRP_SUM_D,
        SPACING_AGPS_DWRATE_SUM_D,
        SWAP_ANT_ENODEB_ID,
        SWAP_ANT_CELL_ID,
        longitude_gps,
        latitude_gps,
        band_width,
        OL_AREA_GIS_BD,
        OL_AREA_TGRID_COUNT,
        OL_AREA_PGRID_COUNT,
        OL_AREA_COV_RATE,
        OL_AREA_RSRP_AVG,
        OL_AREA_DWRATE,
        CB_AREA_GIS_BD,
        CB_AREA_TGRID_COUNT,
        CB_AREA_PGRID_COUNT,
        CB_AREA_COV_RATE,
        CB_AREA_RSRP_AVG,
        CB_AREA_DWRATE,
        REF_POOR_AREA_GIS_BD,
        ZNTY_OPTI_ID,
        ZNTY_TASK_ID
        FROM
        FRT_AGPS_PC_ENB_D
        where day=#{DAY}
        #{CITY_ID_COND}
        #{COUNTRY_COND}
        #{MKTCENTER_COND}
		#{PROBLEM_NAME_COND}
        #{SYS_STATUS_COND}
        #{ZNTY_TASK_ID_COND}
    </sqlTemplate>
    <!--/**变量说明
    #{FN}: 字段名称，取值为db_number或plan_adress_number
    #{MV}: 匹配串
    #{CONDITION}:其他的查询条件
    #{BUILDING_PROGRESS}:建设状态，取值为：待建设、待建单、改点审批中、建设中、完成建设
    */ -->
    <sqlTemplate id="SitePlanning_02_search" description="站点规划接口查询" DB="mysql">
        select db_number AS scroll_demand_bst_number,
        plan_adress_number,
        physical_address_name,
        physical_address,
        city,
        area_type,
        scenes_type,
        priority_level,
        is_indoor,
        system_type,
        band,
        province_construction_type,
        address_longitude,
        address_latitude,
        sector_option
        from dm_zdgh_db_site
        where #{FN} like '%#{MV}%'
        and building_progress='#{BUILDING_PROGRESS}'
        #{CONDITION}
        limit 100
    </sqlTemplate>


	<sqlTemplate id="getdistrictGisDataBaidu" description="根据经纬度获取区县 dim_district_gis_data">
		<![CDATA[
        	SELECT
				CITY_NAME,
				DISTRICT_NAME,
				GIS_DATA_BAIDU
			FROM
				dim_district_gis_data
			WHERE
				DAY = (
					SELECT
						MAX(DAY)
					FROM
						dim_district_gis_data
				)
				AND GIS_DATA_BAIDU != ''
				AND GIS_DATA_BAIDU IS NOT NULL
			#{CITY_COND}
        ]]>
	</sqlTemplate>
    <sqlTemplate id="LineUtilForBaidu_01_test" description="某个地市地铁78米线段">
        <![CDATA[
        	SELECT
                ID,CITY_NAME,LINE_ID,LINE_NAME,FROM_STATION_ID,TO_STATION_ID,GEOG
            FROM
                dim_metro_section
            WHERE
                CITY_ID = #{CITY_ID}
            AND LEVEL = 78
            ORDER BY LINE_ID,FROM_STATION_ID,ID
        ]]>
    </sqlTemplate>


	<!--天翼蓝鹰5.0的需求所需的sql模板-->

	<!--
	#{DAY}：日期
	#{CITY_ID}：地市ID
	-->
	<sqlTemplate id="IntelligentRoadTestAnalysisV5_getMetroFirstList" description="取某地市各条地铁线路汇总列表数据（汇总到线路）">
		<![CDATA[
    SELECT
		A.line_id,line_name,poor_count,cov_count,poor_ratio,cover_rate_total,rsrp_avg_total,B.line_sect_count
		,station_cnt,cov_station_cnt,weak_station_cnt,cov_station_rate,station_rsrp_avg
		,round(weak_station_cnt/cov_station_cnt*100,2) as weak_station_rate -- 弱站点占比
FROM
	(
		SELECT	Line_ID,line_name,
			-- 不再适用 round(	(sum(DX_RSRP_105_Cnt)/sum(DX_RSRP_140_Cnt)) * 100,2) AS cover_rate,	-- 覆盖率
			-- 不再适用 round(	sum(DX_RSRP_140_Sum)/sum(DX_RSRP_140_Cnt),2) AS rsrp_avg,		-- rsrp均值
			sum(CASE WHEN DX_RSRP_140_Avg < - 105 THEN	1 ELSE	0 END ) AS poor_count,	-- 弱路段数
			count(*) AS cov_count,			-- 覆盖段数
			round(sum(CASE	WHEN DX_RSRP_140_Avg < - 105 THEN	1 ELSE	0 END) / count(*) * 100,2) AS poor_ratio -- 弱覆盖占比
		FROM FRT_METRO_LINE_RSRP_D
		WHERE DAY = #{DAY}	AND CITY_ID = #{CITY_ID} and MR_FLAG = 2
		GROUP BY line_id,LINE_NAME
	) A
JOIN (
	SELECT	LINE_ID, count(*) line_sect_count
	FROM dim_metro_section
	WHERE LEVEL = 78
	GROUP BY LINE_ID
) B ON A.line_id = B.line_id
-- 计算总站点数
join (
  select line_id,count(*) as station_cnt
  from dim_metro_station
  where city_id=#{CITY_ID}
  GROUP BY LINE_ID
) E ON A.line_id = E.line_id
join (
  SELECT Line_ID,count(*) as cov_station_cnt, -- 覆盖站点数
       sum(case when avg_140 < -105 then 1 else 0 end) as weak_station_cnt, -- 弱站点数
       round(sum(DX_RSRP_105_Cnt) / sum(DX_RSRP_140_Cnt)*100,2) as cov_station_rate, -- 站点覆盖率
       round(sum(DX_RSRP_140_Sum) / sum(DX_RSRP_140_Cnt),2) as station_rsrp_avg-- 站点RSRP均值
  from (
    select Line_ID,FROM_STATION_ID,sum(DX_RSRP_140_Sum)/sum(DX_RSRP_140_Cnt) as avg_140,
       sum(DX_RSRP_140_Sum) as DX_RSRP_140_Sum ,
       sum(DX_RSRP_140_Cnt) as DX_RSRP_140_Cnt,
       sum(DX_RSRP_105_Cnt) as DX_RSRP_105_Cnt
    from FRT_METRO_LINE_RSRP_D
    WHERE DAY = #{DAY}	AND CITY_ID = #{CITY_ID} and MR_FLAG=0
    GROUP BY Line_ID,FROM_STATION_ID
  ) aa
  GROUP BY line_id
) C ON A.line_id = C.line_id
join (
  SELECT	Line_ID,
			round(	(sum(DX_RSRP_105_Cnt)/sum(DX_RSRP_140_Cnt)) * 100,2) AS cover_rate_total,	-- 总覆盖率
			round(	sum(DX_RSRP_140_Sum)/sum(DX_RSRP_140_Cnt),2) AS rsrp_avg_total		-- 总rsrp均值
		FROM FRT_METRO_LINE_RSRP_D
		WHERE DAY = #{DAY}	AND CITY_ID = #{CITY_ID} and MR_FLAG in (0,2)
		GROUP BY line_id
) D ON A.line_id = D.line_id
GROUP BY line_id , line_name
ORDER BY poor_ratio DESC
        ]]>
	</sqlTemplate>


	<!--
	#{DAY}: 日期，如20180101
	#{CITY_ID}：地市ID，如广州为200
	-->
<sqlTemplate id="IntelligentRoadTestAnalysisV5_getMetroSecondList" description="取某地市各条地铁线路地理数据和业务数据（汇总到每两个相邻站）">
<![CDATA[
SELECT a.*, -- 这里包括有rsrp均值指标
b.BAIDU_LONGITUDE AS from_station_longitude,
b.BAIDU_LATITUDE AS from_station_latitude,
c.BAIDU_LONGITUDE AS to_station_longitude,
c.BAIDU_LATITUDE AS to_station_latitude,
b.STATION_ORDER,
e.line_sect_count, -- 路段数
e.cov_count cov_count_sect, -- 覆盖段数
e.poor_ratio poor_ratio_sect, -- 弱覆盖占比
d.station_cnt, -- 总站点数
f.cov_station_rate as cov_station_rate_from, -- 起站点覆盖率
f.station_rsrp_avg as station_rsrp_avg_from,  -- 起站点RSRP均值
g.cov_station_rate as cov_station_rate_to, -- 止站点覆盖率
g.station_rsrp_avg as station_rsrp_avg_to,  -- 止站点RSRP均值
h.cover_rate_total,	-- 总覆盖率
h.rsrp_avg_total		-- 总rsrp均值
FROM (
select
CITY_ID,
CITY_NAME ,
LINE_ID, -- 线路ID
LINE_NAME, -- 线路名称
FROM_STATION_ID, -- 源地铁站ID
FROM_STATION_NAME, -- 源地铁站名称
TO_STATION_ID, -- 目的地铁站ID
TO_STATION_NAME, -- 目的地铁站名称
ALL_COV_SECTION, -- 覆盖段数
(ALL_COV_SECTION*78) as cover_length, -- 覆盖里程，单位：米
POOR_COV_SECTION, -- 弱覆盖段数
round(POOR_COV_SECTION/ALL_COV_SECTION*100,2) as poor_ratio, -- 弱覆盖占比
LINE_LENGTH, -- 总里程
POOR_COV_SECTION_OrderNo, -- 路弱覆盖段数排名
SECTOR_SET, -- 主服务小区集合
LTE_TO_3G_TOT, -- 4G切3G总次数
Lte_To_3g_OrderNo, -- 4G切3G总次数在本地网内排名
Flow_4G_TOT, -- 4G总流量
Flow_4G_OrderNo, -- 本地网内4G流量排名
CE_GOOD_RATIO_AVG, -- 感知优良率按天平均值
Ce_GOOD_RATIO_OrderNo, -- 本地网内感知优良率排名
User_4G_AVG, -- 4G用户数按天平均值
User_4G_OrderNo, -- 本地网内4G用户数排名
PC_OrderNo_TOT, -- 最终排名累计值
ALARM_NUMS, -- 曾发生退服告警总次数
ALARM_CELLS, -- 曾发生退服告警小区数
NR_ALARM_CELLS, -- 未恢复退服告警小区数
NC_SECTOR_SET, -- 距离最近的TOP5的小区集合
NC_ALARM_NUMS, -- 最近小区告警数
Do_Type, -- 路段处理措施
eNodeB_ID, -- 基站ID
eNodeB_Name, -- 最近基站名称
CELL_ID, -- 最近的小区ID
CELL_NAME, -- 最近的小区的名称
CELL_ADDRESS, -- 最近基站地址
CELL_STATE, -- 最近的小区的状态
DX_RSRP_140_Cnt, -- 电信RSRP[-140，0)记录数
DX_RSRP_115_Cnt, -- 电信RSRP[-115，0)记录数
DX_RSRP_110_Cnt, -- 电信RSRP[-110，0)记录数
DX_RSRP_105_Cnt, -- 电信RSRP[-105，0)记录数
DX_RSRP_100_Cnt, -- 电信RSRP[-100，0)记录数
DX_RSRP_95_Cnt, -- 电信RSRP[-95，0)记录数
DX_RSRP_140_Sum, -- 电信RSRP[-140，0)之和
round(DX_RSRP_140_Sum/ DX_RSRP_140_Cnt,2) as rsrp_avg_sect, -- RSRP均值
round((DX_RSRP_105_Cnt/ DX_RSRP_140_Cnt)*100,2) as cover_rate_sect, -- 覆盖率
POOR_COV_SECTION as poor_count_sect, -- 弱路段数
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
LONGITUDE_MIN,
LATITUDE_MIN,
LONGITUDE_MID,
LATITUDE_MID,
LONGITUDE_MAX,
LATITUDE_MAX,
MR_FLAG,
LINE_GIS_DATA
from FRT_METRO_INTER_COV_D
where
		day = #{DAY}
		and CITY_ID = #{CITY_ID}
		and MR_FLAG in (-1 , 1 , 2) -- 将正向指标、反向指标和综合指标都取出来
) a
left join (
-- 计算站间覆盖率
select a.FROM_STATION_ID,a.TO_STATION_ID,a.MR_FLAG,a.poor_count,a.cov_count,a.poor_ratio,b.line_sect_count
from (
select FROM_STATION_ID,TO_STATION_ID ,MR_FLAG,
  -- 不再适用 round(sum(DX_RSRP_105_Cnt)/sum(DX_RSRP_140_Cnt)*100 , 2) as cover_rate , -- 覆盖率
  -- 不再适用 round(sum(DX_RSRP_140_Sum)/sum(DX_RSRP_140_Cnt) , 2) as rsrp_avg , -- rsrp均值
  sum(case when DX_RSRP_140_Avg < -105 then 1 else 0 end) as poor_count, -- 弱路段数
  count(*) as cov_count, -- 覆盖段数
  round(sum(case when DX_RSRP_140_Avg < -105 then 1 else 0 end)/count(*) * 100,2) as poor_ratio -- 弱覆盖占比
from FRT_METRO_LINE_RSRP_D
where day = #{DAY} and CITY_ID = #{CITY_ID}
and MR_FLAG in (-1 , 1 , 2)
group by FROM_STATION_ID,TO_STATION_ID,MR_FLAG

) a left join (

select FROM_STATION_ID,TO_STATION_ID ,count(*) line_sect_count from dim_metro_section where LEVEL=78
group by FROM_STATION_ID,TO_STATION_ID
union
select TO_STATION_ID,FROM_STATION_ID ,count(*) line_sect_count from dim_metro_section where LEVEL=78
group by TO_STATION_ID,FROM_STATION_ID

) b on a.FROM_STATION_ID=b.FROM_STATION_ID and a.TO_STATION_ID=b.TO_STATION_ID
-- 结束计算站间覆盖率
) e on a.FROM_STATION_ID=e.FROM_STATION_ID and a.TO_STATION_ID=e.TO_STATION_ID and a.MR_FLAG=e.MR_FLAG
 LEFT JOIN dim_metro_station b
ON a.FROM_STATION_ID = b.STATION_ID
left join dim_metro_station c on a.TO_STATION_ID=c.STATION_ID
-- 计算起站的 站点覆盖率 和 站点RSRP均值
left join (
    select Line_ID,FROM_STATION_ID,
	       round(sum(DX_RSRP_105_Cnt) / sum(DX_RSRP_140_Cnt)*100,2) as cov_station_rate, -- 站点覆盖率
           round(sum(DX_RSRP_140_Sum) / sum(DX_RSRP_140_Cnt),2) as station_rsrp_avg -- 站点RSRP均值
    from FRT_METRO_LINE_RSRP_D
    where day=#{DAY} and CITY_ID=#{CITY_ID} and MR_FLAG=0
    GROUP BY Line_ID,FROM_STATION_ID
  ) f
on a.line_id = f.line_id and a.FROM_STATION_ID = f.FROM_STATION_ID
-- 计算总站点数
left join (
  select line_id,count(*) as station_cnt
  from dim_metro_station
  where city_id=200
  GROUP BY LINE_ID
) d
on a.line_id = d.line_id
-- 计算止站的 站点覆盖率 和 站点RSRP均值
left join (
    select Line_ID,FROM_STATION_ID,
	       round(sum(DX_RSRP_105_Cnt) / sum(DX_RSRP_140_Cnt)*100,2) as cov_station_rate, -- 站点覆盖率
           round(sum(DX_RSRP_140_Sum) / sum(DX_RSRP_140_Cnt),2) as station_rsrp_avg -- 站点RSRP均值
    from FRT_METRO_LINE_RSRP_D
    where day=#{DAY} and CITY_ID=#{CITY_ID} and MR_FLAG=0
    GROUP BY Line_ID,FROM_STATION_ID
  ) g
on a.line_id = g.line_id and  a.TO_STATION_ID = g.FROM_STATION_ID

-- 计算总覆盖率和总RSRP均值
left join (
    select A.Line_ID,A.FROM_STATION_ID,A.TO_STATION_ID
      ,round((ifnull(A.DX_RSRP_105_Cnt,0)+ifnull(B.DX_RSRP_105_Cnt,0)+ifnull(C.DX_RSRP_105_Cnt,0))/(ifnull(A.DX_RSRP_140_Cnt,0)+ifnull(B.DX_RSRP_140_Cnt,0)+ifnull(C.DX_RSRP_140_Cnt,0))*100,2) AS cover_rate_total	-- 总覆盖率
      ,round((ifnull(A.DX_RSRP_140_Sum,0)+ifnull(B.DX_RSRP_140_Sum,0)+ifnull(C.DX_RSRP_140_Sum,0))/(ifnull(A.DX_RSRP_140_Cnt,0)+ifnull(B.DX_RSRP_140_Cnt,0)+ifnull(C.DX_RSRP_140_Cnt,0)),2) AS rsrp_avg_total		-- 总rsrp均值
    from
    (
    SELECT	Line_ID,FROM_STATION_ID,TO_STATION_ID,
			sum(DX_RSRP_105_Cnt) as DX_RSRP_105_Cnt,
      sum(DX_RSRP_140_Cnt) as DX_RSRP_140_Cnt,
			sum(DX_RSRP_140_Sum) AS DX_RSRP_140_Sum
		FROM FRT_METRO_LINE_RSRP_D
		WHERE DAY = #{DAY}	AND CITY_ID = #{CITY_ID} and MR_FLAG = 2
		GROUP BY line_id,FROM_STATION_ID,TO_STATION_ID
    ) A
    left join (
      SELECT	Line_ID,FROM_STATION_ID,
			sum(DX_RSRP_105_Cnt) as DX_RSRP_105_Cnt,
            sum(DX_RSRP_140_Cnt) as DX_RSRP_140_Cnt,
			sum(DX_RSRP_140_Sum) AS DX_RSRP_140_Sum
		FROM FRT_METRO_LINE_RSRP_D
		WHERE DAY = #{DAY}	AND CITY_ID = #{CITY_ID} and MR_FLAG = 0
		GROUP BY line_id,FROM_STATION_ID
    ) B
    on A.Line_ID=B.Line_ID and A.FROM_STATION_ID = B.FROM_STATION_ID
    left join (
      SELECT	Line_ID,FROM_STATION_ID,
			sum(DX_RSRP_105_Cnt) as DX_RSRP_105_Cnt,
      sum(DX_RSRP_140_Cnt) as DX_RSRP_140_Cnt,
			sum(DX_RSRP_140_Sum) AS DX_RSRP_140_Sum
		FROM FRT_METRO_LINE_RSRP_D
		WHERE DAY = #{DAY}	AND CITY_ID = #{CITY_ID} and MR_FLAG = 0
		GROUP BY line_id,FROM_STATION_ID
    ) C
    on A.Line_ID=C.Line_ID and A.TO_STATION_ID = C.FROM_STATION_ID
) h
on ( (a.line_id = h.line_id and a.MR_FLAG<>-1 and a.FROM_STATION_ID = h.FROM_STATION_ID and a.TO_STATION_ID = h.TO_STATION_ID)
   or (a.line_id = h.line_id and a.MR_FLAG=-1 and a.FROM_STATION_ID = h.TO_STATION_ID and a.TO_STATION_ID = h.FROM_STATION_ID))
order by poor_ratio desc
		]]>
	</sqlTemplate>


	<!--
	#{STARTDAY}: 起始日期，如20180101
	#{ENDDAY}: 结束日期，如20180131
	#{FROM_STATION_ID}: 起站ID
	#{TO_STATION_ID}: 起站ID
	#特别注意：当查看的是正向或综合时，起站ID传给参数#{FROM_STATION_ID}，止站ID传给参数#{TO_STATION_ID}；当查看的是反向时，则需要对调之！！！
	-->
	<sqlTemplate id="IntelligentRoadTestAnalysisV5_getMetroStation30DayData" description="取地铁某站点的30天覆盖率和rsrp均值的趋势图数据">
		<![CDATA[
SELECT
	DAY as create_time,
	mr_flag, -- 方向区分
	FROM_STATION_ID,
	round(DX_RSRP_140_Sum/DX_RSRP_140_Cnt,2) as rsrp, -- RSRP均值
	round(DX_RSRP_105_Cnt/DX_RSRP_140_Cnt,4) as cover, -- 覆盖率
	round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
	round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE
FROM
	FRT_METRO_INTER_COV_D   -- 之前是使用这张表的FRT_METRO_LINE_RSRP_D
WHERE
	DAY BETWEEN #{STARTDAY}
	AND #{ENDDAY}
	and (
		(FROM_STATION_ID =#{FROM_STATION_ID} and TO_STATION_ID = #{TO_STATION_ID} AND MR_FLAG in (1 , 2))
		OR
		(FROM_STATION_ID =#{TO_STATION_ID} and TO_STATION_ID = #{FROM_STATION_ID} AND MR_FLAG = -1)
		OR
		( (FROM_STATION_ID  = #{FROM_STATION_ID} or  FROM_STATION_ID  =#{TO_STATION_ID}) AND MR_FLAG = 0)
		)
ORDER BY mr_flag, create_time
]]>
	</sqlTemplate>


    <!--
	#{DAY}: 日期，如20180101
	#{CITY_ID}：地市ID，如广州为200
	#{MR_FLAG}：方向
	#{FROM_STATION_ID} ： 起始站点ID
	#{TO_STATION_ID} ： 终点站点ID
	-->
    <sqlTemplate id="IntelligentRoadTestAnalysisV5_getMetroStationById" description="根据起止站点的ID、地市、日期还有方向查询某个站间段的数据">
        <![CDATA[
SELECT a.*, -- 这里包括有rsrp均值指标
b.BAIDU_LONGITUDE AS from_station_longitude,
b.BAIDU_LATITUDE AS from_station_latitude,
c.BAIDU_LONGITUDE AS to_station_longitude,
c.BAIDU_LATITUDE AS to_station_latitude,
b.STATION_ORDER,
e.line_sect_count, -- 路段数
e.cov_count cov_count_sect, -- 覆盖段数
e.poor_ratio poor_ratio_sect, -- 弱覆盖占比
d.station_cnt, -- 总站点数
f.cov_station_rate as cov_station_rate_from, -- 起站点覆盖率
f.station_rsrp_avg as station_rsrp_avg_from,  -- 起站点RSRP均值
g.cov_station_rate as cov_station_rate_to, -- 止站点覆盖率
g.station_rsrp_avg as station_rsrp_avg_to,  -- 止站点RSRP均值
h.cover_rate_total,	-- 总覆盖率
h.rsrp_avg_total		-- 总rsrp均值
FROM (
select
CITY_ID,
CITY_NAME ,
LINE_ID, -- 线路ID
LINE_NAME, -- 线路名称
FROM_STATION_ID, -- 源地铁站ID
FROM_STATION_NAME, -- 源地铁站名称
TO_STATION_ID, -- 目的地铁站ID
TO_STATION_NAME, -- 目的地铁站名称
ALL_COV_SECTION, -- 覆盖段数
(ALL_COV_SECTION*78) as cover_length, -- 覆盖里程，单位：米
POOR_COV_SECTION, -- 弱覆盖段数
round(POOR_COV_SECTION/ALL_COV_SECTION*100,2) as poor_ratio, -- 弱覆盖占比
LINE_LENGTH, -- 总里程
POOR_COV_SECTION_OrderNo, -- 路弱覆盖段数排名
SECTOR_SET, -- 主服务小区集合
LTE_TO_3G_TOT, -- 4G切3G总次数
Lte_To_3g_OrderNo, -- 4G切3G总次数在本地网内排名
Flow_4G_TOT, -- 4G总流量
Flow_4G_OrderNo, -- 本地网内4G流量排名
CE_GOOD_RATIO_AVG, -- 感知优良率按天平均值
Ce_GOOD_RATIO_OrderNo, -- 本地网内感知优良率排名
User_4G_AVG, -- 4G用户数按天平均值
User_4G_OrderNo, -- 本地网内4G用户数排名
PC_OrderNo_TOT, -- 最终排名累计值
ALARM_NUMS, -- 曾发生退服告警总次数
ALARM_CELLS, -- 曾发生退服告警小区数
NR_ALARM_CELLS, -- 未恢复退服告警小区数
NC_SECTOR_SET, -- 距离最近的TOP5的小区集合
NC_ALARM_NUMS, -- 最近小区告警数
Do_Type, -- 路段处理措施
eNodeB_ID, -- 基站ID
eNodeB_Name, -- 最近基站名称
CELL_ID, -- 最近的小区ID
CELL_NAME, -- 最近的小区的名称
CELL_ADDRESS, -- 最近基站地址
CELL_STATE, -- 最近的小区的状态
DX_RSRP_140_Cnt, -- 电信RSRP[-140，0)记录数
DX_RSRP_115_Cnt, -- 电信RSRP[-115，0)记录数
DX_RSRP_110_Cnt, -- 电信RSRP[-110，0)记录数
DX_RSRP_105_Cnt, -- 电信RSRP[-105，0)记录数
DX_RSRP_100_Cnt, -- 电信RSRP[-100，0)记录数
DX_RSRP_95_Cnt, -- 电信RSRP[-95，0)记录数
DX_RSRP_140_Sum, -- 电信RSRP[-140，0)之和
round(DX_RSRP_140_Sum/ DX_RSRP_140_Cnt,2) as rsrp_avg_sect, -- RSRP均值
round((DX_RSRP_105_Cnt/ DX_RSRP_140_Cnt)*100,2) as cover_rate_sect, -- 覆盖率
POOR_COV_SECTION as poor_count_sect, -- 弱路段数
round(MIN_USEREX_UPAVGRATE, 2 ) as MIN_USEREX_UPAVGRATE,
round(MIN_USEREX_DWAVGRATE ,  2) as MIN_USEREX_DWAVGRATE,
LONGITUDE_MIN,
LATITUDE_MIN,
LONGITUDE_MID,
LATITUDE_MID,
LONGITUDE_MAX,
LATITUDE_MAX,
MR_FLAG,
LINE_GIS_DATA
from FRT_METRO_INTER_COV_D
where
		day = #{DAY}
		and CITY_ID = #{CITY_ID}
		and MR_FLAG = #{MR_FLAG}
		and from_station_id = #{FROM_STATION_ID}
		and to_station_id = #{TO_STATION_ID}
) a
left join (
-- 计算站间覆盖率
select a.FROM_STATION_ID,a.TO_STATION_ID,a.MR_FLAG,a.poor_count,a.cov_count,a.poor_ratio,b.line_sect_count
from (
select FROM_STATION_ID,TO_STATION_ID ,MR_FLAG,
  -- 不再适用 round(sum(DX_RSRP_105_Cnt)/sum(DX_RSRP_140_Cnt)*100 , 2) as cover_rate , -- 覆盖率
  -- 不再适用 round(sum(DX_RSRP_140_Sum)/sum(DX_RSRP_140_Cnt) , 2) as rsrp_avg , -- rsrp均值
  sum(case when DX_RSRP_140_Avg < -105 then 1 else 0 end) as poor_count, -- 弱路段数
  count(*) as cov_count, -- 覆盖段数
  round(sum(case when DX_RSRP_140_Avg < -105 then 1 else 0 end)/count(*) * 100,2) as poor_ratio -- 弱覆盖占比
from FRT_METRO_LINE_RSRP_D
where day = #{DAY} and CITY_ID = #{CITY_ID}
and MR_FLAG in (-1 , 1 , 2)
group by FROM_STATION_ID,TO_STATION_ID,MR_FLAG

) a left join (

select FROM_STATION_ID,TO_STATION_ID ,count(*) line_sect_count from dim_metro_section where LEVEL=78
group by FROM_STATION_ID,TO_STATION_ID
union
select TO_STATION_ID,FROM_STATION_ID ,count(*) line_sect_count from dim_metro_section where LEVEL=78
group by TO_STATION_ID,FROM_STATION_ID

) b on a.FROM_STATION_ID=b.FROM_STATION_ID and a.TO_STATION_ID=b.TO_STATION_ID
-- 结束计算站间覆盖率
) e on a.FROM_STATION_ID=e.FROM_STATION_ID and a.TO_STATION_ID=e.TO_STATION_ID and a.MR_FLAG=e.MR_FLAG
 LEFT JOIN dim_metro_station b
ON a.FROM_STATION_ID = b.STATION_ID
left join dim_metro_station c on a.TO_STATION_ID=c.STATION_ID
-- 计算起站的 站点覆盖率 和 站点RSRP均值
left join (
    select Line_ID,FROM_STATION_ID,
	       round(sum(DX_RSRP_105_Cnt) / sum(DX_RSRP_140_Cnt)*100,2) as cov_station_rate, -- 站点覆盖率
           round(sum(DX_RSRP_140_Sum) / sum(DX_RSRP_140_Cnt),2) as station_rsrp_avg -- 站点RSRP均值
    from FRT_METRO_LINE_RSRP_D
    where day=#{DAY} and CITY_ID=#{CITY_ID} and MR_FLAG=0
    GROUP BY Line_ID,FROM_STATION_ID
  ) f
on a.line_id = f.line_id and a.FROM_STATION_ID = f.FROM_STATION_ID
-- 计算总站点数
left join (
  select line_id,count(*) as station_cnt
  from dim_metro_station
  where city_id=200
  GROUP BY LINE_ID
) d
on a.line_id = d.line_id
-- 计算止站的 站点覆盖率 和 站点RSRP均值
left join (
    select Line_ID,FROM_STATION_ID,
	       round(sum(DX_RSRP_105_Cnt) / sum(DX_RSRP_140_Cnt)*100,2) as cov_station_rate, -- 站点覆盖率
           round(sum(DX_RSRP_140_Sum) / sum(DX_RSRP_140_Cnt),2) as station_rsrp_avg -- 站点RSRP均值
    from FRT_METRO_LINE_RSRP_D
    where day=#{DAY} and CITY_ID=#{CITY_ID} and MR_FLAG=0
    GROUP BY Line_ID,FROM_STATION_ID
  ) g
on a.line_id = g.line_id and  a.TO_STATION_ID = g.FROM_STATION_ID

-- 计算总覆盖率和总RSRP均值
left join (
    select A.Line_ID,A.FROM_STATION_ID,A.TO_STATION_ID
      ,round((ifnull(A.DX_RSRP_105_Cnt,0)+ifnull(B.DX_RSRP_105_Cnt,0)+ifnull(C.DX_RSRP_105_Cnt,0))/(ifnull(A.DX_RSRP_140_Cnt,0)+ifnull(B.DX_RSRP_140_Cnt,0)+ifnull(C.DX_RSRP_140_Cnt,0))*100,2) AS cover_rate_total	-- 总覆盖率
      ,round((ifnull(A.DX_RSRP_140_Sum,0)+ifnull(B.DX_RSRP_140_Sum,0)+ifnull(C.DX_RSRP_140_Sum,0))/(ifnull(A.DX_RSRP_140_Cnt,0)+ifnull(B.DX_RSRP_140_Cnt,0)+ifnull(C.DX_RSRP_140_Cnt,0)),2) AS rsrp_avg_total		-- 总rsrp均值
    from
    (
    SELECT	Line_ID,FROM_STATION_ID,TO_STATION_ID,
			sum(DX_RSRP_105_Cnt) as DX_RSRP_105_Cnt,
      sum(DX_RSRP_140_Cnt) as DX_RSRP_140_Cnt,
			sum(DX_RSRP_140_Sum) AS DX_RSRP_140_Sum
		FROM FRT_METRO_LINE_RSRP_D
		WHERE DAY = #{DAY}	AND CITY_ID = #{CITY_ID} and MR_FLAG = 2
		GROUP BY line_id,FROM_STATION_ID,TO_STATION_ID
    ) A
    left join (
      SELECT	Line_ID,FROM_STATION_ID,
			sum(DX_RSRP_105_Cnt) as DX_RSRP_105_Cnt,
            sum(DX_RSRP_140_Cnt) as DX_RSRP_140_Cnt,
			sum(DX_RSRP_140_Sum) AS DX_RSRP_140_Sum
		FROM FRT_METRO_LINE_RSRP_D
		WHERE DAY = #{DAY}	AND CITY_ID = #{CITY_ID} and MR_FLAG = 0
		GROUP BY line_id,FROM_STATION_ID
    ) B
    on A.Line_ID=B.Line_ID and A.FROM_STATION_ID = B.FROM_STATION_ID
    left join (
      SELECT	Line_ID,FROM_STATION_ID,
			sum(DX_RSRP_105_Cnt) as DX_RSRP_105_Cnt,
      sum(DX_RSRP_140_Cnt) as DX_RSRP_140_Cnt,
			sum(DX_RSRP_140_Sum) AS DX_RSRP_140_Sum
		FROM FRT_METRO_LINE_RSRP_D
		WHERE DAY = #{DAY}	AND CITY_ID = #{CITY_ID} and MR_FLAG = 0
		GROUP BY line_id,FROM_STATION_ID
    ) C
    on A.Line_ID=C.Line_ID and A.TO_STATION_ID = C.FROM_STATION_ID
) h
on ( (a.line_id = h.line_id and a.MR_FLAG<>-1 and a.FROM_STATION_ID = h.FROM_STATION_ID and a.TO_STATION_ID = h.TO_STATION_ID)
   or (a.line_id = h.line_id and a.MR_FLAG=-1 and a.FROM_STATION_ID = h.TO_STATION_ID and a.TO_STATION_ID = h.FROM_STATION_ID))
order by poor_ratio desc
		]]>
    </sqlTemplate>

	<!--
	#{DAY}: 日期，如20180101
	#{OBJECT_TYPE}: 场景类型 比如高校 、住宅区等等
	#{OBJECT_ID}: 场景ID
	-->
	<sqlTemplate id="IntelligentRoadTestAnalysisV5_getSenseMRData" description="取区域场景类型的全量MR指标数据">
		<![CDATA[
SELECT
	AGPS_TYPE,
	round(
		(
			SC_RSRP_105_Cnt / SC_RSRP_140_Cnt
		) * 100,
		2
	) cover_rate, -- 覆盖率
	SC_RSRP_140_Cnt mr_count, -- MR记录数
	SC_RSRP_140_Avg rsrp_avg, -- RSRP均值
	SC_RSRP_140_GRID_Cnt grid_count -- 栅格数
FROM
	FRT_MRO_9S_SC_W
WHERE
	DAY = #{DAY}
AND object_type = '#{OBJECT_TYPE}'
AND object_id = #{OBJECT_ID}
and AGPS_TYPE != 1 -- 1表示AGPS_MR的数据，这里不需要这个的数据，所以去除掉
]]>
	</sqlTemplate>

	<!--
	#{DAY}: 日期，如20180101
	#{OBJECT_TYPE}: 场景类型 比如高校 、住宅区等等
	#{OBJECT_ID}: 场景ID
	-->
	<sqlTemplate id="IntelligentRoadTestAnalysisV5_getSenseMRData" description="取区域场景类型的全量MR指标数据">
		<![CDATA[
SELECT
	AGPS_TYPE,
	round(
		(
			SC_RSRP_105_Cnt / SC_RSRP_140_Cnt
		) * 100,
		2
	) cover_rate, -- 覆盖率
	SC_RSRP_140_Cnt mr_count, -- MR记录数
	round(SC_RSRP_140_Avg , 2) rsrp_avg, -- RSRP均值
	SC_RSRP_140_GRID_Cnt grid_count -- 栅格数
FROM
	FRT_MRO_9S_SC_W
WHERE
	DAY = #{DAY}
AND object_type = '#{OBJECT_TYPE}'
AND object_id = '#{OBJECT_ID}'
and city_id = #{CITYID}
and AGPS_TYPE != 1 -- 1表示AGPS_MR的数据，这里不需要这个的数据，所以去除掉
and AGPS_TYPE is not null
and AGPS_TYPE <> ''
]]>
	</sqlTemplate>

	<!--
	#{OBJECT_TYPE}: 场景类型 比如高校 、住宅区等等
	#{OBJECT_ID}: 场景ID
	#{STARTDAY}: 起始日期，如20180101
	#{ENDDAY}: 结束日期，如20180131
	-->
	<sqlTemplate id="IntelligentRoadTestAnalysisV5_getSenseAllMR30DayData" description="取区域场景类型的30覆盖率、rsrp均值以及上下行速率趋势图数据">
		<![CDATA[
SELECT
	DAY as create_time,
	AGPS_TYPE,
	(SC_RSRP_105_Cnt / SC_RSRP_140_Cnt) as cover,
	round(SC_RSRP_140_AVG , 2) AS rsrp,
    round(MIN_USEREX_UPAVGRATE , 2) as MIN_USEREX_UPAVGRATE,
    round(MIN_USEREX_DWAVGRATE , 2) as MIN_USEREX_DWAVGRATE
FROM
	FRT_MRO_9S_SC_W
WHERE
    city_id = #{CITYID}
AND OBJECT_TYPE = '#{OBJECT_TYPE}'
AND OBJECT_ID = '#{OBJECT_ID}'
AND DAY BETWEEN #{STARTDAY}
AND #{ENDDAY}
ORDER BY
	DAY ASC
]]>
	</sqlTemplate>

<sqlTemplate id="ITE2018CountrySide_query_01_scatter_data" description="取中国电信C网、中国电信4G、中国移动的散点数据">
<![CDATA[
select city,district_name,round(longitude_BAIDU,6) longitude_BAIDU,
        round(latitude_BAIDU,6) latitude_BAIDU,
		if(DX_C_COV='是',1,2) DX_C_COV_LEVEL, -- 中国电信C网等级
		if(DX_4G_COV='是',1,2) DX_4G_COV_LEVEL, -- 中国电信4G等级
		if(YD_COV='是',1,2) YD_COV_LEVEL -- 中国移动等级
				from DIM_COUNTRY_COV_PON_FO_INFO
		WHERE City NOT in ('东莞市','中山市')
]]>
</sqlTemplate>
<sqlTemplate id="ITE2018CountrySide_query_03_cityForDistrict_data" description="取区县的轮廓">
<![CDATA[
SELECT c.city,c.district_full_name,d.district,c.district_id,d.GIS_DATA_BAIDU,d.max_lng,d.max_lat,d.min_lng,d.min_lat,d.CITY_NAME FROM
(
SELECT a.city,b.district_name,b.district_full_name,b.district_id FROM
(SELECT city,district_name FROM dim_country_cov_pon_fo_info
WHERE City NOT in ('东莞市','中山市') GROUP BY City,district_name) a LEFT JOIN dim_country_district_id_name b
ON a.district_name = b.district_full_name AND a.city = CONCAT(b.city,'市')
) c LEFT JOIN
(SELECT DISTRICT_NAME district,CITY_NAME,GIS_DATA_BAIDU,BAIDU_MAX_LONGITUDE max_lng,BAIDU_MAXLATITUDE max_lat,BAIDU_MIN_LONGITUDE min_lng,BAIDU_MINLATITUDE min_lat
FROM dim_district_gis_data WHERE DAY = (SELECT MAX(DAY) FROM dim_district_gis_data) AND GIS_DATA_BAIDU IS NOT NULL
-- AND CITY_NAME = '韶关'
) d
ON c.district_name = d.district AND c.city = CONCAT(d.CITY_NAME,'市')
WHERE d.GIS_DATA_BAIDU IS NOT NULL
AND c.city IS NOT NULL

]]>
</sqlTemplate>

<sqlTemplate id="ITE2018CountrySide_query_02_cov_province_rate" description="取中国电信C网、中国电信4G、中国移动的全省覆盖率数据">
<![CDATA[
SELECT * FROM (SELECT '全省' as city,round(sum(case when DX_C_COV='是' then 1 else 0 end)/count(*)*100,2) as DX_C_COV_rate,
    round(sum(case when DX_4G_COV='是' then 1 else 0 end)/count(*)*100,2) DX_4G_COV_rate,
    round(sum(case when YD_COV='是' then 1 else 0 end)/count(*)*100,2) as YD_COV_rate
	FROM dim_country_cov_pon_fo_info
	WHERE City NOT in ('东莞市','中山市')
UNION ALL
SELECT city,round(sum(case when DX_C_COV='是' then 1 else 0 end)/count(*)*100,2) as DX_C_COV_rate,
    round(sum(case when DX_4G_COV='是' then 1 else 0 end)/count(*)*100,2) DX_4G_COV_rate,
    round(sum(case when YD_COV='是' then 1 else 0 end)/count(*)*100,2) as YD_COV_rate
        FROM dim_country_cov_pon_fo_info
WHERE City NOT in ('东莞市','中山市')
		GROUP BY city) a
LEFT JOIN
(SELECT
	CASE
WHEN CITY_NAME = '广东' THEN
	'全省'
WHEN CITY_NAME = '未知' THEN
	'未知'
ELSE
	CONCAT(CITY_NAME, '市')
END CITY_NAME,
 CITY_DISPLAY_ORDER
FROM
	dim_tele_city) b
ON a.city = b.CITY_NAME
ORDER BY CITY_DISPLAY_ORDER
]]>
</sqlTemplate><sqlTemplate id="ITE2018CountrySide_query_03_cov_city_rate" description="取中国电信C网、中国电信4G、中国移动的某地市覆盖率数据">
<![CDATA[
SELECT district_name AS city,City as city_name,round(sum(case when DX_C_COV='是' then 1 else 0 end)/count(*)*100,2) as DX_C_COV_rate,
    round(sum(case when DX_4G_COV='是' then 1 else 0 end)/count(*)*100,2) DX_4G_COV_rate,
    round(sum(case when YD_COV='是' then 1 else 0 end)/count(*)*100,2) as YD_COV_rate
        FROM dim_country_cov_pon_fo_info
WHERE 1=1
AND City = '#{CITY}'
#{DISTRICT}
		GROUP BY district_name
]]>
</sqlTemplate>
<sqlTemplate id="IntelligentRoadTestV5_ydsector_detail" description="取地市移动站址图层数据(包含提示信息)">
    <![CDATA[
    SELECT
	eNodeBName,
	bandtype,
	coveragetype,
	longitude_BAIDU,
	latitude_BAIDU
FROM
	DIM_STATION_ADDRESS_DATA_D
WHERE
	AREA_NAME = '#{CITY}'
AND DAY = #{DAY}
]]>
</sqlTemplate>


<sqlTemplate id="ExpandPlanning_getData" description="获取扩容规划表格数据">
    <![CDATA[
        SELECT
            date,
            province,
            SORT_ID2,
            city,
            baseID,
            cellID,
            cellName,
            factory,
            bandIndicator,
            downFlow,
            RRCusers,
            billUsers,
            downPRBoccupancyrate,
            valueUserRate,
            valueRank
        FROM
            frt_cell_cap_ext
            where 1 = 1
            #{DATE_CONDICTION}
            #{CITY_CONDICTION}
            #{BASEID_CONDICTION}
            #{CELLID_CONDICTION}
            #{CELLNAME_CONDICTION}

            #{DOWNFLOW_CONDICTION}
            #{RRCUSERS_CONDICTION}
            #{BILLUSERS_CONDICTION}
            #{DOWNPRBOCCUPANCYRATE_CONDICTION}
            #{VALUEUSERRATE_CONDICTION}
    ]]>
</sqlTemplate>

    <sqlTemplate id="ExpandPlanning_exportByTemplate" description="获取扩容规划表格数据">
        <![CDATA[
        SELECT
            date,
            "集团" jituan,
            province,
            SORT_ID2,
            city,
            baseID,
            cellID,
            cellName,
            factory,
            bandIndicator,
            downFlow,
            RRCusers,
            billUsers,
            downPRBoccupancyrate,
            valueUserRate,
            valueRank
        FROM
            frt_cell_cap_ext
            where 1 = 1
            #{DATE_CONDICTION}
            #{CITY_CONDICTION}
            #{BASEID_CONDICTION}
            #{CELLID_CONDICTION}
            #{CELLNAME_CONDICTION}

            #{DOWNFLOW_CONDICTION}
            #{RRCUSERS_CONDICTION}
            #{BILLUSERS_CONDICTION}
            #{DOWNPRBOCCUPANCYRATE_CONDICTION}
            #{VALUEUSERRATE_CONDICTION}
    ]]>
    </sqlTemplate>

    <sqlTemplate id="ExpandPlanning_getData_count" description="获取扩容规划表格数据总数">
        <![CDATA[
        SELECT
            count(1) count
        FROM
            frt_cell_cap_ext
            where 1 = 1
            #{DATE_CONDICTION}
            #{CITY_CONDICTION}
            #{BASEID_CONDICTION}
            #{CELLID_CONDICTION}
            #{CELLNAME_CONDICTION}

            #{DOWNFLOW_CONDICTION}
            #{RRCUSERS_CONDICTION}
            #{BILLUSERS_CONDICTION}
            #{DOWNPRBOCCUPANCYRATE_CONDICTION}
            #{VALUEUSERRATE_CONDICTION}
    ]]>
    </sqlTemplate>

<sqlTemplate id="ExpandPlanning_get_cap_ext_maxDay" description="获取 frt_cell_cap_ext 表最新日期">
    <![CDATA[
    SELECT
        max(month) month
    FROM
        frt_cell_cap_ext
]]>
</sqlTemplate>

<sqlTemplate id="ExpandPlanning_getCapEvalData" description="获取扩容规划表格数据">
    <![CDATA[
        SELECT
        date,
        province,
        city,
        baseID,
        cellID,
        cellName,
        type,
        bandIndicator,
        factory,
        longitude,
        latitude,
        upPRBoccupancyrate,
        downPRBoccupancyrate,
        downPRBbusyRRCusersmax,
        downPRBbusyUpFlow,
        downPRBbusyDownFlow,
        downPRBbusyusers
        FROM
        frt_cell_cap_eval
        where 1 = 1
        #{DATE_CONDICTION}
        #{CITY_CONDICTION}
        #{BASEID_CONDICTION}
        #{CELLID_CONDICTION}
        #{CELLNAME_CONDICTION}

        #{UPPRBOCCUPANCYRATE_CONDICTION}
        #{DOWNPRBOCCUPANCYRATE_CONDICTION}
        #{DOWNPRBBUSYRRCUSERSMAX_CONDICTION}
        #{DOWNPRBBUSYUPFLOW_CONDICTION}
        #{DOWNPRBBUSYDOWNFLOW_CONDICTION}
        #{DOWNPRBBUSYUSERS_CONDICTION}
]]>
</sqlTemplate>
    <sqlTemplate id="ExpandPlanning_getCapEvalData_count" description="获取扩容规划表格数据总数">
        <![CDATA[
                SELECT
                count(1) count
                FROM
                frt_cell_cap_eval
                where 1 = 1
                #{DATE_CONDICTION}
                #{CITY_CONDICTION}
                #{BASEID_CONDICTION}
                #{CELLID_CONDICTION}
                #{CELLNAME_CONDICTION}

                #{UPPRBOCCUPANCYRATE_CONDICTION}
                #{DOWNPRBOCCUPANCYRATE_CONDICTION}
                #{DOWNPRBBUSYRRCUSERSMAX_CONDICTION}
                #{DOWNPRBBUSYUPFLOW_CONDICTION}
                #{DOWNPRBBUSYDOWNFLOW_CONDICTION}
                #{DOWNPRBBUSYUSERS_CONDICTION}
        ]]>
    </sqlTemplate>

<sqlTemplate id="ExpandPlanning_get_cap_eval_maxDay" description="获取 frt_cell_cap_eval 表最新日期">
    <![CDATA[
    SELECT
    max(day) day
    FROM
    frt_cell_cap_eval
]]>
</sqlTemplate>
<sqlTemplate id="APP_KQI_perce_01_trendwithday_week_month_v4" description="粒度为天／周／月" DB="mysql">
<![CDATA[
select #{PERIOD_VARIABLE}
    ,NETTYPE
	,case when NETTYPE='4G' then High_Type else NETTYPE end as High_Type
	,round(CE_GOOD_RATIO*100, 2) as CE_GOOD_RATIO 	-- 感知优良率
	,round(WEBPAGE_GOOD_RATIO_AVG*100, 2) as WEBPAGE_GOOD_RATIO_AVG		-- 网页浏览优良率
	,round(Video_Good_Ratio_Avg*100, 2) as Video_Good_Ratio_Avg 	-- 视频优良率
	,round(Game_Good_Ratio_Avg*100, 2) as Game_Good_Ratio_Avg 	-- 游戏优良率
	,round(Im_Good_Ratio_Avg*100, 2) as Im_Good_Ratio_Avg 	-- 即时通信优良率
    ,round(ERR_EVT_RATIO*100,2) as ERR_EVT_RATIO -- 异常事件率
from noce.#{TABLE_NAME}
where #{PERIOD_VARIABLE} between #{START_TIME} and #{END_TIME}
	and LATN_ID=#{LATN_ID}
    and (DLJS_COUNT_TYPE #{DLJS_COUNT_TYPE_COND} or DLJS_COUNT_TYPE is null)
	and (( NETTYPE='4G' and High_Type in (1, 2, 3, 4, 5)  ) or NETTYPE<>'4G')
order by #{PERIOD_VARIABLE}
]]>
</sqlTemplate>

<sqlTemplate id="APP_KQI_perce_04_detailswithprovince_day_week_month_v4" description="显示21地市感知指标(天／周／月)" DB="mysql">
<![CDATA[
select t2.city_name,case when t1.NETTYPE='4G' then t1.High_Type else t1.NETTYPE end as High_Type, cnt_all, Cell_CNT, CE_GOOD_RATIO,
WEBPAGE_GOOD_RATIO_AVG, Video_Good_Ratio_Avg, Game_Good_Ratio_Avg, Im_Good_Ratio_Avg, First_Screen_ALL, VIDIO_ALL, Video_Halt_ALL,
Game_ALL, Im_ALL,t1.ERR_EVT_RATIO,t1.REC_Cnt
from
(
select LATN_ID
	,High_Type
	,nettype
	,Cell_CNT
	,round(CE_GOOD_RATIO*100, 2) as CE_GOOD_RATIO 	-- 感知优良率
	,round(WEBPAGE_GOOD_RATIO_AVG*100, 2) as WEBPAGE_GOOD_RATIO_AVG
	,round(Video_Good_Ratio_Avg*100, 2) as Video_Good_Ratio_Avg
	,round(Game_Good_Ratio_Avg*100, 2) as Game_Good_Ratio_Avg
	,round(Im_Good_Ratio_Avg*100, 2) as Im_Good_Ratio_Avg
    ,round(ERR_EVT_RATIO*100,2) as ERR_EVT_RATIO -- 异常事件率
	,First_Screen_ALL
	,VIDIO_ALL
	,Video_Halt_ALL
	,Game_ALL
	,Im_ALL
	,REC_Cnt
from noce.#{TABLE_NAME}
where #{PERIOD_VARIABLE}=#{TIME}
	and LATN_ID is not NULL
    and (DLJS_COUNT_TYPE #{DLJS_COUNT_TYPE_COND} or DLJS_COUNT_TYPE is null)
	and (( NETTYPE='4G' and High_Type in (1, 2, 3, 4, 5)  ) or NETTYPE<>'4G')
) t1
left outer join
(
select city_name, city_id, city_display_order from noce.DIM_TELE_CITY
) t2
on t1.LATN_ID=cast(city_id as signed)
left outer join
(
	select
    case when t4.city_id=1 then t3.city_id else 1000 end as city_id,
    t4.attribute as High_Type,
    sum(case when t4.attribute = 1 then t3.count_1
             when t4.attribute = 2 then t3.count_2
             when t4.attribute = 3 then t3.count_3
             when t4.attribute = 4 then t3.count_4
             when t4.attribute = 5 then t3.count_5
             else 0
        end)  as cnt_all
    from
    (
    select
        city_id,
        sum(case when attribute is not NULL then 1 else 0 end ) as count_1,
        sum(case when attribute is NULL     then 1 else 0 end ) as count_2,
        sum(1) as count_3,
        sum(case when attribute%64 != 0 then 1 else 0 end ) as count_4,
        sum(case when attribute%64 = 0 or attribute is NULL then 1 else 0 end ) as count_5
    from noce.dim_sector
    where day=#{MAX_DATE}
        and nettype='4G'
        and city_id is not NULL
    group by city_id
    ) t3
    join
    (   select 1 as attribute , 1 as city_id
        union all  select 2 as attribute , 1 as city_id
        union all  select 3 as attribute , 1 as city_id
        union all  select 4 as attribute , 1 as city_id
        union all  select 5 as attribute , 1 as city_id
        union all  select 1 as attribute , 2 as city_id
        union all  select 2 as attribute , 2 as city_id
        union all  select 3 as attribute , 2 as city_id
        union all  select 4 as attribute , 2 as city_id
        union all  select 5 as attribute , 2 as city_id
        ) t4
    GROUP BY
        case when t4.city_id=1 then t3.city_id else 1000 end,
        High_Type
    HAVING
        cnt_all>=0
) t5
on t1.LATN_ID=t5.city_id and t1.High_Type=t5.High_Type
order by t2.city_display_order, t1.High_Type
]]>
</sqlTemplate>

<sqlTemplate id="APP_KQI_perce_07_detailswithcity_day_week_month_v4" description="显示目标地市下面区县感知指标(天/周/月)" DB="mysql">
<![CDATA[
select t1.AREA_NAME, case when t1.NETTYPE='4G' then t1.High_Type else t1.NETTYPE end as High_Type, cnt_all,Cell_CNT, CE_GOOD_RATIO, WEBPAGE_GOOD_RATIO_AVG, Video_Good_Ratio_Avg,
	Game_Good_Ratio_Avg, Im_Good_Ratio_Avg, First_Screen_ALL,VIDIO_ALL
	,Video_Halt_ALL,Game_ALL,IM_ALL,t1.ERR_EVT_RATIO,t1.REC_Cnt
from
(
	select AREA_NAME
		,high_type
		,nettype
		,cell_cnt
		,round(CE_GOOD_RATIO*100, 2) as CE_GOOD_RATIO
		,round(WEBPAGE_GOOD_RATIO_AVG*100, 2) as WEBPAGE_GOOD_RATIO_AVG
		,round(Video_Good_Ratio_Avg*100, 2) as Video_Good_Ratio_Avg
		,round(Game_Good_Ratio_Avg*100, 2) as Game_Good_Ratio_Avg
		,round(Im_Good_Ratio_Avg*100, 2) as Im_Good_Ratio_Avg
		,round(ERR_EVT_RATIO*100,2) as ERR_EVT_RATIO -- 异常事件率
		,First_Screen_ALL
		,VIDIO_ALL
		,Video_Halt_ALL
		,Game_ALL
		,IM_ALL
		,2 as display_order
		,REC_Cnt -- 业务样本数
	from noce.#{TABLE_NAME}
	where #{PERIOD_VARIABLE}=#{TIME}
		and LATN_ID=#{LATN_ID}
        and (DLJS_COUNT_TYPE #{DLJS_COUNT_TYPE_COND} or DLJS_COUNT_TYPE is null)
	    and (( NETTYPE='4G' and High_Type in (1, 2, 3, 4, 5)  ))
) t1
left outer join
(
	select
	    case when t4.area=1 then t3.AREA_NAME else '全市' end as AREA_NAME,
	    t4.attribute as High_Type,
	    sum(case when t4.attribute = 1 then t3.count_1
	             when t4.attribute = 2 then t3.count_2
	             when t4.attribute = 3 then t3.count_3
	             when t4.attribute = 4 then t3.count_4
	             when t4.attribute = 5 then t3.count_5
	             else 0
	        end)  as cnt_all
	from
	(
	    select
	        case when AREA_NAME is NULL then '未知' when AREA_NAME = 'null' then '未知' else AREA_NAME end as AREA_NAME,
	        sum(case when attribute is not NULL then 1 else 0 end ) as count_1,
	        sum(case when attribute is NULL     then 1 else 0 end ) as count_2,
	        sum(1) as count_3,
	        sum(case when attribute%64 != 0 then 1 else 0 end ) as count_4,
	        sum(case when attribute%64 = 0 or attribute is NULL then 1 else 0 end ) as count_5
	    from noce.dim_sector
	    where day=#{MAX_DATE}
	        and nettype='4G'
	        and CITY_ID=#{LATN_ID}
	    group by AREA_NAME
	    ) t3
	join
	(   select 1 as attribute , 1 as area
	    union all  select 2 as attribute , 1 as area
	    union all  select 3 as attribute , 1 as area
	    union all  select 4 as attribute , 1 as area
	    union all  select 5 as attribute , 1 as area
	    union all  select 1 as attribute , 2 as area
	    union all  select 2 as attribute , 2 as area
	    union all  select 3 as attribute , 2 as area
	    union all  select 4 as attribute , 2 as area
	    union all  select 5 as attribute , 2 as area
	    ) t4
	GROUP BY
	    case when t4.area=1 then t3.AREA_NAME else '全市' end,
	    High_Type
	HAVING
	    cnt_all>=0
) t2
on t1.AREA_NAME=t2.AREA_NAME and t1.High_Type=t2.High_Type
order by t1.AREA_NAME="全市" desc, t1.AREA_NAME, t1.High_Type
]]>
</sqlTemplate>

<sqlTemplate id="APP_KQI_perce_12_detailsofcell_day_week_month_v4" description="显示目标地市下面全部小区感知指标(天/周/月)" DB="mysql">
<![CDATA[
select LATN_ID
,AREA_NAME
,BASE_STATN_ID
,CELL_ID
,CELL_NAME
-- ,round(avg(CE_GOOD_RATIO)*100, 2) as CE_GOOD_RATIO
,round(avg(WEBPAGE_GOOD_RATIO)*100, 2) as WEBPAGE_GOOD_RATIO
,round(avg(Video_Good_Ratio)*100, 2) as Video_Good_Ratio
,round(avg(Game_Good_Ratio)*100, 2) as Game_Good_Ratio
,round(avg(Im_Good_Ratio)*100, 2) as Im_Good_Ratio
-- ,round(avg(WEBPAGE_OPEN_DELAY_GOOD_RATIO)*100, 2) as WEBPAGE_OPEN_DELAY_GOOD_RATIO
,round(avg(First_Screen_Good_Ratio)*100, 2) as First_Screen_Good_Ratio
,round(avg(VIDIO_DOWNLOAD_RATE_GOOD_RATIO)*100, 2) as VIDIO_DOWNLOAD_RATE_GOOD_RATIO
,round(avg(Video_Halt_Good_Ratio)*100, 2) as Video_Halt_Good_Ratio
-- ,sum(WEBPAGE_OPEN_ALL) as WEBPAGE_OPEN_ALL
,sum(First_Screen_ALL) as First_Screen_ALL
,sum(VIDIO_ALL) as VIDIO_ALL
,sum(Video_Halt_ALL) as Video_Halt_ALL
,sum(Game_ALL) as Game_ALL
,sum(Im_ALL) as Im_Send_ALL
,round(avg(ERR_EVT_RATIO)*100,2) as ERR_EVT_RATIO -- 异常事件率
,sum(REC_Cnt) as REC_Cnt -- 业务样本数
,if(
substring(concat(case when H_RailWay_Type=1 then '|高铁' else '' end,  case when H_Road_Type=1 then '|高速' else '' end,  case when H_College_Type=1 then '|高校' else '' end,
 case when H_Value_Type=1 then '|高流量商务区' else '' end,  case when L_Metro_Type=1 then '|地铁' else '' end,  case when H_Density_Type=1 then '|高密度住宅区' else '' end,
 case when H_Scenery_Type=1 then '|美景' else '' end,  case when H_Food_Type=1 then '|美食' else '' end,  case when H_Field_Type=1 then '|体育场' else '' end -- ,
 ),2)="",'其他',
substring(concat(case when H_RailWay_Type=1 then '|高铁' else '' end,  case when H_Road_Type=1 then '|高速' else '' end,  case when H_College_Type=1 then '|高校' else '' end,
 case when H_Value_Type=1 then '|高流量商务区' else '' end,  case when L_Metro_Type=1 then '|地铁' else '' end,  case when H_Density_Type=1 then '|高密度住宅区' else '' end,
 case when H_Scenery_Type=1 then '|美景' else '' end,  case when H_Food_Type=1 then '|美食' else '' end,  case when H_Field_Type=1 then '|体育场' else '' end -- ,
 ),2)
) as high_type
from noce.#{TABLE_NAME}
where #{PERIOD_VARIABLE}=#{TIME}
and LATN_ID=#{LATN_ID}
and (DLJS_COUNT_TYPE #{DLJS_COUNT_TYPE_COND} or DLJS_COUNT_TYPE is null)
-- and AREA_NAME is not NULL
#{AREA_NAME}
group by LATN_ID, AREA_NAME, BASE_STATN_ID, CELL_ID, high_type,CELL_NAME
#{LIMIT}
]]>
</sqlTemplate>
<sqlTemplate id="KQI_perce_01_trendwithday_week_month_v4" description="粒度为天/周／月" DB="mysql">
<![CDATA[
select #{PERIOD_VARIABLE}
	,High_Type
	,round(CE_GOOD_RATIO*100, 2) as CE_GOOD_RATIO 	-- 感知优良率
	,round(WEBPAGE_GOOD_RATIO_AVG*100, 2) as WEBPAGE_GOOD_RATIO_AVG		-- 网页浏览优良率
	,round(Video_Good_Ratio_Avg*100, 2) as Video_Good_Ratio_Avg 	-- 视频优良率
	,round(Game_Good_Ratio_Avg*100, 2) as Game_Good_Ratio_Avg 	-- 游戏优良率
	,round(Im_Good_Ratio_Avg*100, 2) as Im_Good_Ratio_Avg 	-- 即时通信优良率
from noce.#{TABLE_NAME}
where #{PERIOD_VARIABLE} between #{START_TIME} and #{END_TIME}
	and LATN_ID=#{LATN_ID}
	and (DLJS_COUNT_TYPE #{DLJS_COUNT_TYPE_COND} or DLJS_COUNT_TYPE is null)
	and High_Type in (1, 2, 3, 4, 5)
order by #{PERIOD_VARIABLE}
]]>
</sqlTemplate>
<sqlTemplate id="KQI_perce_04_detailswithprovince_day_week_month_v4" description="显示21地市感知指标粒度为天/周／月" DB="mysql">
<![CDATA[
select t2.city_name, t1.High_Type, cnt_all, Cell_CNT, CE_GOOD_RATIO, WEBPAGE_GOOD_RATIO_AVG, Video_Good_Ratio_Avg
,Game_Good_Ratio_Avg, Im_Good_Ratio_Avg, First_Screen_ALL, VIDIO_ALL
,Video_Halt_ALL, Game_ALL, Im_Send_ALL
from
(
select LATN_ID
    ,High_Type
    ,Cell_CNT
    ,round(CE_GOOD_RATIO*100, 2) as CE_GOOD_RATIO   -- 感知优良率
    ,round(WEBPAGE_GOOD_RATIO_AVG*100, 2) as WEBPAGE_GOOD_RATIO_AVG
    ,round(Video_Good_Ratio_Avg*100, 2) as Video_Good_Ratio_Avg
    ,round(Game_Good_Ratio_Avg*100, 2) as Game_Good_Ratio_Avg
    ,round(Im_Good_Ratio_Avg*100, 2) as Im_Good_Ratio_Avg
    ,First_Screen_ALL
    ,VIDIO_ALL
    ,Video_Halt_ALL
    ,Game_ALL
    ,Im_Send_ALL
from noce.#{TABLE_NAME}
where #{PERIOD_VARIABLE}=#{TIME}
    and LATN_ID is not NULL
	and (DLJS_COUNT_TYPE #{DLJS_COUNT_TYPE_COND} or DLJS_COUNT_TYPE is null)
    and High_Type in (1, 2, 3, 4, 5)
) t1
join
(
select city_name, city_id, city_display_order from noce.DIM_TELE_CITY
) t2
on t1.LATN_ID=cast(city_id as signed)
left outer join
(
    select
    case when t4.city_id=1 then t3.city_id else 1000 end as city_id,
    t4.attribute as High_Type,
    sum(case when t4.attribute = 1 then t3.count_1
             when t4.attribute = 2 then t3.count_2
             when t4.attribute = 3 then t3.count_3
             when t4.attribute = 4 then t3.count_4
             when t4.attribute = 5 then t3.count_5
             else 0
        end)  as cnt_all
    from
    (
    select
        city_id,
        sum(case when attribute is not NULL then 1 else 0 end ) as count_1,
        sum(case when attribute is NULL     then 1 else 0 end ) as count_2,
        sum(1) as count_3,
        sum(case when attribute%64 != 0 then 1 else 0 end ) as count_4,
        sum(case when attribute%64 = 0 or attribute is NULL then 1 else 0 end ) as count_5
    from noce.dim_sector
    where day=#{MAX_DATE}
        and nettype='4G'
        and city_id is not NULL
    group by city_id
    ) t3
    join
    (   select 1 as attribute , 1 as city_id
        union all  select 2 as attribute , 1 as city_id
        union all  select 3 as attribute , 1 as city_id
        union all  select 4 as attribute , 1 as city_id
        union all  select 5 as attribute , 1 as city_id
        union all  select 1 as attribute , 2 as city_id
        union all  select 2 as attribute , 2 as city_id
        union all  select 3 as attribute , 2 as city_id
        union all  select 4 as attribute , 2 as city_id
        union all  select 5 as attribute , 2 as city_id
        ) t4
    GROUP BY
        case when t4.city_id=1 then t3.city_id else 1000 end,
        High_Type
    HAVING
        cnt_all>=0
) t5
on t1.LATN_ID=t5.city_id and t1.High_Type=t5.High_Type
order by t2.city_display_order, t1.High_Type
]]>
</sqlTemplate>
<sqlTemplate id="KQI_perce_07_detailswithcity_day_week_month_v4" description="显示目标地市下面区县感知指标 粒度为天/周／月" DB="mysql">
<![CDATA[
select t1.AREA_NAME, t1.High_Type, cnt_all,Cell_CNT, CE_GOOD_RATIO, WEBPAGE_GOOD_RATIO_AVG, Video_Good_Ratio_Avg,
	Game_Good_Ratio_Avg, Im_Good_Ratio_Avg, First_Screen_ALL,VIDIO_ALL
	,Video_Halt_ALL,Game_ALL,Im_Send_ALL
from
(
	select AREA_NAME
		,high_type
		,cell_cnt
		,round(CE_GOOD_RATIO*100, 2) as CE_GOOD_RATIO
		,round(WEBPAGE_GOOD_RATIO_AVG*100, 2) as WEBPAGE_GOOD_RATIO_AVG
		,round(Video_Good_Ratio_Avg*100, 2) as Video_Good_Ratio_Avg
		,round(Game_Good_Ratio_Avg*100, 2) as Game_Good_Ratio_Avg
		,round(Im_Good_Ratio_Avg*100, 2) as Im_Good_Ratio_Avg
		,First_Screen_ALL
		,VIDIO_ALL
		,Video_Halt_ALL
		,Game_ALL
		,Im_Send_ALL
		,2 as display_order
	from noce.#{TABLE_NAME}
	where #{PERIOD_VARIABLE}=#{TIME}
		and LATN_ID=#{LATN_ID}
		and (DLJS_COUNT_TYPE #{DLJS_COUNT_TYPE_COND} or DLJS_COUNT_TYPE is null)
		and High_Type in (1, 2, 3, 4, 5)
) t1
left outer join
(
	select
	    case when t4.area=1 then t3.AREA_NAME else '全市' end as AREA_NAME,
	    t4.attribute as High_Type,
	    sum(case when t4.attribute = 1 then t3.count_1
	             when t4.attribute = 2 then t3.count_2
	             when t4.attribute = 3 then t3.count_3
	             when t4.attribute = 4 then t3.count_4
	             when t4.attribute = 5 then t3.count_5
	             else 0
	        end)  as cnt_all
	from
	(
	    select
	        case when AREA_NAME is NULL then '未知' when AREA_NAME = 'null' then '未知' else AREA_NAME end as AREA_NAME,
	        sum(case when attribute is not NULL then 1 else 0 end ) as count_1,
	        sum(case when attribute is NULL     then 1 else 0 end ) as count_2,
	        sum(1) as count_3,
	        sum(case when attribute%64 != 0 then 1 else 0 end ) as count_4,
	        sum(case when attribute%64 = 0 or attribute is NULL then 1 else 0 end ) as count_5
	    from noce.dim_sector
	    where day=#{MAX_DATE}
	        and nettype='4G'
	        and CITY_ID=#{LATN_ID}
	    group by AREA_NAME
	    ) t3
	join
	(   select 1 as attribute , 1 as area
	    union all  select 2 as attribute , 1 as area
	    union all  select 3 as attribute , 1 as area
	    union all  select 4 as attribute , 1 as area
	    union all  select 5 as attribute , 1 as area
	    union all  select 1 as attribute , 2 as area
	    union all  select 2 as attribute , 2 as area
	    union all  select 3 as attribute , 2 as area
	    union all  select 4 as attribute , 2 as area
	    union all  select 5 as attribute , 2 as area
	    ) t4
	GROUP BY
	    case when t4.area=1 then t3.AREA_NAME else '全市' end,
	    High_Type
	HAVING
	    cnt_all>=0
) t2
on t1.AREA_NAME=t2.AREA_NAME and t1.High_Type=t2.High_Type
order by t1.AREA_NAME="全市" desc, t1.AREA_NAME, t1.High_Type
]]>
</sqlTemplate>
<sqlTemplate id="KQI_perce_12_detailsofcell_day_week_month_v4" description="显示目标地市下面全部小区感知指标（日）" DB="mysql">
<![CDATA[
select LATN_ID
	,AREA_NAME
	,BASE_STATN_ID
	,CELL_ID
	,CELL_NAME
	-- ,round(avg(CE_GOOD_RATIO)*100, 2) as CE_GOOD_RATIO
	,round(avg(WEBPAGE_GOOD_RATIO)*100, 2) as WEBPAGE_GOOD_RATIO
	,round(avg(Video_Good_Ratio)*100, 2) as Video_Good_Ratio
	,round(avg(Game_Good_Ratio)*100, 2) as Game_Good_Ratio
	,round(avg(Im_Good_Ratio)*100, 2) as Im_Good_Ratio
	-- ,round(avg(WEBPAGE_OPEN_DELAY_GOOD_RATIO)*100, 2) as WEBPAGE_OPEN_DELAY_GOOD_RATIO
	,round(avg(First_Screen_Good_Ratio)*100, 2) as First_Screen_Good_Ratio
	,round(avg(VIDIO_DOWNLOAD_RATE_GOOD_RATIO)*100, 2) as VIDIO_DOWNLOAD_RATE_GOOD_RATIO
	,round(avg(Video_Halt_Good_Ratio)*100, 2) as Video_Halt_Good_Ratio
	-- ,sum(WEBPAGE_OPEN_ALL) as WEBPAGE_OPEN_ALL
	,sum(First_Screen_ALL) as First_Screen_ALL
	,sum(VIDIO_ALL) as VIDIO_ALL
	,sum(Video_Halt_ALL) as Video_Halt_ALL
	,sum(Game_ALL) as Game_ALL
	,sum(Im_Send_ALL) as Im_Send_ALL
	,IF(substring(
	concat(case when H_RailWay_Type=1 then '|高铁' else '' end,  case when H_Road_Type=1 then '|高速' else '' end,  case when H_College_Type=1 then '|高校' else '' end,
		 case when H_Value_Type=1 then '|高流量商务区' else '' end,  case when L_Metro_Type=1 then '|地铁' else '' end,  case when H_Density_Type=1 then '|高密度住宅区' else '' end,
		 case when H_Scenery_Type=1 then '|美景' else '' end,  case when H_Food_Type=1 then '|美食' else '' end,  case when H_Field_Type=1 then '|体育场' else '' end -- ,
		 -- case when H_Market_Type=1 then '|市场' else '' end, case when H_Village_Type=1 then '|自然村' else '' end
		 ),2)="",'其他',substring(
	concat(case when H_RailWay_Type=1 then '|高铁' else '' end,  case when H_Road_Type=1 then '|高速' else '' end,  case when H_College_Type=1 then '|高校' else '' end,
		 case when H_Value_Type=1 then '|高流量商务区' else '' end,  case when L_Metro_Type=1 then '|地铁' else '' end,  case when H_Density_Type=1 then '|高密度住宅区' else '' end,
		 case when H_Scenery_Type=1 then '|美景' else '' end,  case when H_Food_Type=1 then '|美食' else '' end,  case when H_Field_Type=1 then '|体育场' else '' end -- ,
		 -- case when H_Market_Type=1 then '|市场' else '' end, case when H_Village_Type=1 then '|自然村' else '' end
		 ),2)
	) as high_type
from noce.#{TABLE_NAME}
where #{PERIOD_VARIABLE}=#{TIME}
	and LATN_ID=#{LATN_ID}
	and (DLJS_COUNT_TYPE #{DLJS_COUNT_TYPE_COND} or DLJS_COUNT_TYPE is null)
	-- and AREA_NAME is not NULL
	#{AREA_NAME}
group by LATN_ID, AREA_NAME, BASE_STATN_ID, CELL_ID, high_type,CELL_NAME
#{LIMIT}

]]>
</sqlTemplate>


<sqlTemplate id="IntelligentRoadTestSimple_getCurrentCountryPoloyData" description="获取当前用户所属区县的轮廓数据" DB="mysql">
<![CDATA[
SELECT
	*
FROM
	dim_district_gis_data
WHERE
	CITY_NAME = '#{CITY_NAME}'
AND DISTRICT_NAME = '#{DISTRICT_NAME}'
AND DAY = (
	SELECT
		MAX(DAY)
	FROM
		dim_district_gis_data
)

]]>
</sqlTemplate>

<sqlTemplate id="NewGuarantee_getSectorInfo" description="根据框选轮廓获取基站信息" DB="mysql">
<![CDATA[
    SELECT
    BASE_STATN_ID,
    BASE_STATN_NAME,
    BSC_ID,
    CELL_ID,
    CELL_NAME,
    SECTOR_ID,
    SECTOR_NAME,
    LONGITUDE_BAIDU,
    LATITUDE_BAIDU,
    NETTYPE,
    ant_azimuth,
    CASE IS_INDOOR WHEN '室外' THEN 2 WHEN '室内' THEN 1 WHEN '室外和室内' THEN 3 ELSE 0 END AS type,
    BAND_MAPPING as band_order
    FROM
    dim_sector
    WHERE
    `DAY`=(SELECT MAX(`DAY`) FROM dim_sector)
    AND CITY_ID=#{CITY_ID} AND AREA_NAME='#{AREA_NAME}'
    AND LONGITUDE_BAIDU >=#{MIN_LONGITUDE_BAIDU} AND LONGITUDE_BAIDU <= #{MAX_LONGITUDE_BAIDU}
    AND LATITUDE_BAIDU >=#{MIN_LATITUDE_BAIDU} AND LATITUDE_BAIDU <= #{MAX_LATITUDE_BAIDU}
]]>
</sqlTemplate>

<sqlTemplate id="NewGuarantee_geAREA_INFO_maxId" description="获取 DM_IMPORTANT_AREA_INFO 表最大id" DB="mysql">
<![CDATA[
SELECT max(id) id FROM DM_IMPORTANT_AREA_INFO
]]>
</sqlTemplate>


<sqlTemplate id="LookEditGuarantee_getAREA_INFO" description="获取当前用户创建的重保区域" DB="mysql">
<![CDATA[
SELECT
	id,
	area_name,
	AREA_ID,
	latn_id,
	gis_data_baidu,
	BASE_STATN_2G_NUM,
	BASE_STATN_4G_NUM,
	max_longitude_baidu,
	max_latitude_baidu,
	min_longitude_baidu,
	min_latitude_baidu,
	creator,
	create_time,
	handle_time
FROM
	dm_important_area_info
WHERE
	creator = '#{CREATOR}'
ORDER BY create_time DESC
]]>
</sqlTemplate>

<sqlTemplate id="LookEditGuarantee_getAREA_INFO_ById" description="根据id获取重保区域" DB="mysql">
<![CDATA[
SELECT
id,
area_name,
AREA_ID,
latn_id,
gis_data_baidu,
BASE_STATN_2G_NUM,
BASE_STATN_4G_NUM,
max_longitude_baidu,
max_latitude_baidu,
min_longitude_baidu,
min_latitude_baidu,
creator,
create_time,
handle_time
FROM
dm_important_area_info
WHERE
id = #{ID}
]]>
</sqlTemplate>


<sqlTemplate id="LookEditGuarantee_get4GSector_INFO_ByAreaId" description="根据重保区域id获取4G基站数据" DB="mysql">
<![CDATA[
SELECT
	LATN_ID,
	FACTORY,
	eNodeBName base_statn_name,
	eNodeBID base_statn_id,
	CellName,
	CellID cell_id,
	SectorID sector_id,
	PCI,
	longitude LONGITUDE_BAIDU,
	latitude LATITUDE_BAIDU,
	District,
	AREA_NAME,
	AREA_ID,
	BRANCH_AREA_ID,
	ANT_AZIMUTH,
	CASE indoor_mapping WHEN '室外' THEN 2 WHEN '室内' THEN 1 WHEN '室外和室内' THEN 3 ELSE 0 END AS type,
	band_mapping band_order,
	RANCH_AREA_NAME
FROM
	DIM_LTE_EXPO_SECTOR
WHERE
	AREA_ID = #{AREA_ID}
]]>
</sqlTemplate>



<sqlTemplate id="LookEditGuarantee_get2GSector_INFO_ByAreaId" description="根据重保区域id获取2G基站数据" DB="mysql">
<![CDATA[
SELECT
	LATN_ID,
	BTS_NAME base_statn_name,
	BSC_ID,
	Cell_ID,
	BTS_ID base_statn_id,
	Sector_ID,
	Sector_Type,
	Sector_Longitude longitude_baidu,
	Sector_Latitude latitude_baidu,
	District,
	AREA_NAME,
	AREA_ID,
	BRANCH_AREA_ID,
	BRANCH_AREA_NAME,
	LAC,
	CI,
	is_indoor type,
	30 ant_azimuth
FROM
	DIM_2G3G_EXPO_SECTOR
WHERE
	AREA_ID = #{AREA_ID}
]]>
</sqlTemplate>

<sqlTemplate id="NewGuarantee_get4GSector_otherInfo" description="获取4G基站打基站需要的信息" DB="mysql">
<![CDATA[
    SELECT
        a.LATN_ID,
        b.bs_vendor,
        a.eNodeBName,
        a.eNodeBID,
        a.CellName,
        a.CellID,
        a.SectorID,
        b.longitude_baidu,
        b.latitude_baidu,
        a.AREA_NAME,
        a.AREA_ID,
        b.ANT_AZIMUTH,
        b.indoor_mapping,
        b.band_mapping
        FROM
        (SELECT * from dim_lte_expo_sector WHERE AREA_ID=#{AREA_ID}) a
        JOIN
        (SELECT * from dim_sector WHERE `DAY`=(SELECT MAX(`DAY`) FROM dim_sector) AND NETTYPE='4G') b
        ON
        eNodeBID=b.BASE_STATN_ID AND a.CellID=b.cell_id
        WHERE a.eNodeBID=#{eNodeBID} and a.CellID=#{CellID} and a.longitude like '#{longitude}%' and a.latitude like '#{latitude}%'
]]>
</sqlTemplate>

<sqlTemplate id="NewGuarantee_get2GSector_otherInfo" description="获取2G基站打基站需要的信息" DB="mysql">
<![CDATA[
    SELECT
        a.BSC_ID,
        a.BTS_ID,
        a.Cell_ID,
        a.SECTOR_ID,
        b.ANT_AZIMUTH,
        b.LONGITUDE_BAIDU,
        b.LATITUDE_BAIDU,
        CASE WHEN b.IS_INDOOR='室内' THEN 1 WHEN b.IS_INDOOR='室外' THEN 2 WHEN b.IS_INDOOR='室内外综合' THEN 3 ELSE 0 END indoor_mapping,
        b.band_mapping
        FROM
        (SELECT * from dim_lte_expo_sector WHERE AREA_ID=#{AREA_ID}) a
        JOIN
        (SELECT * from dim_sector WHERE `DAY`=(SELECT MAX(`DAY`) FROM dim_sector) AND NETTYPE='3G') b
        ON
        eNodeBID=b.BASE_STATN_ID AND a.CellID=b.cell_id
        WHERE a.Sector_Longitude like #{Sector_Longitude} and a.Sector_Latitude like #{Sector_Latitude} and a.BTS_ID=#{BTS_ID} and a.Cell_ID={Cell_ID}
]]>
</sqlTemplate>

<sqlTemplate id="ITE2018P1SitePerceptionSelect_getAreaInfo" description="获取重保区域下拉框信息" DB="mysql">
<![CDATA[
SELECT AREA_ID,area_name from	dm_important_area_info
]]>
</sqlTemplate>

<sqlTemplate id="ResidentUserNum_City_District" description="某市各区县常驻用户数" DB="mysql">
<![CDATA[
SELECT district,
    SUM(CASE  WHEN  Latn_id = Home_Latn_id  THEN Users_CNT ELSE 0 END) AS city,
    SUM(CASE  WHEN  Home_Province = '广东' AND Latn_id <> Home_Latn_id THEN Users_CNT ELSE 0 END) AS otherCity,
    SUM(CASE  WHEN  Home_Province <> '广东' THEN Users_CNT ELSE 0 END) AS otherProvince
FROM frt_users_cnt_dist_d
WHERE Latn_id = #{LATN_ID}
	AND district IS NOT NULL AND Home_Province <> 'null' AND district <> ''
	AND DAY = #{DAY}
GROUP BY district;
]]>
</sqlTemplate>


<sqlTemplate id="ResidentUserNum_District_otherCity" description="某区县内本省其他城市的常驻用户数" DB="mysql">
<![CDATA[
SELECT 
   Home_Latn_id,
   Users_CNT 
FROM
   frt_users_cnt_dist_d 
WHERE Latn_id = #{LATN_ID}
   AND district = #{DISTRICT} 
   AND Home_Province = '广东' 
   AND Latn_id <> Home_Latn_id 
   AND DAY = #{DAY} 
ORDER BY Users_CNT DESC
]]>
</sqlTemplate>


<sqlTemplate id="ResidentUserNum_District_otherProvince" description="某区县内其他省份的常驻用户数" DB="mysql">
<![CDATA[
SELECT 
  Home_Province,
  SUM(Users_CNT) AS Users_CNT
FROM
  frt_users_cnt_dist_d 
WHERE Latn_id = #{LATN_ID}
  AND district = #{DISTRICT} 
  AND Home_Province <> '广东' 
  AND Home_Province IS NOT NULL AND Home_Province <> 'null' AND Home_Province <> ''
  AND DAY = #{DAY} 
GROUP BY Home_Province
ORDER BY Users_CNT DESC
]]>
</sqlTemplate>


<sqlTemplate id="ResidentUserNum_District_allMarketbase" description="某区县内全部营服中心的常驻用户数" DB="mysql">
<![CDATA[
SELECT marketbase,
    SUM(CASE  WHEN  Latn_id = Home_Latn_id  THEN Users_CNT ELSE 0 END) AS city,
    SUM(CASE  WHEN  Home_Province = '广东' AND Latn_id <> Home_Latn_id  THEN Users_CNT ELSE 0 END) AS otherCity,
    SUM(CASE  WHEN  Home_Province <> '广东' THEN Users_CNT ELSE 0 END) AS otherProvince
FROM frt_users_cnt_mkt_d
WHERE Latn_id = #{LATN_ID}
AND district = #{DISTRICT}
AND marketbase IS NOT NULL AND marketbase <> 'null' AND marketbase <> ''
AND DAY = #{DAY}
GROUP BY marketbase;
]]>
</sqlTemplate>


<sqlTemplate id="ResidentUserNum_Marketbase_otherCity" description="某营服中心内本省其他城市的常驻用户数" DB="mysql">
<![CDATA[
SELECT 
   Home_Latn_id,
   Users_CNT 
FROM
   frt_users_cnt_mkt_d 
WHERE Latn_id = #{LATN_ID} 
   AND district = #{DISTRICT} 
   AND marketbase = #{MARKETBASE} 
   AND Home_Province = '广东' 
   AND Latn_id <> Home_Latn_id 
   AND DAY = #{DAY}
ORDER BY Users_CNT DESC
]]>
</sqlTemplate>


<sqlTemplate id="ResidentUserNum_Marketbase_otherProvince" description="某营服中心内其他省份的常驻用户数" DB="mysql">
<![CDATA[
SELECT 
  Home_Province,
  SUM(Users_CNT) AS Users_CNT
FROM
  frt_users_cnt_mkt_d 
WHERE Latn_id = #{LATN_ID} 
  AND district = #{DISTRICT} 
  AND marketbase = #{MARKETBASE} 
  AND Home_Province <> '广东' 
  AND Home_Province IS NOT NULL AND Home_Province <> 'null' AND Home_Province <> ''
  AND DAY = #{DAY} 
GROUP BY Home_Province
ORDER BY Users_CNT DESC
]]>
</sqlTemplate>

<sqlTemplate id="ResidentUserNum_District_ThirtyDayUsers" description="某区县30天常驻用户数" DB="mysql">
<![CDATA[
SELECT 
  DAY,
  SUM(Users_CNT) Users_CNT
FROM
  frt_users_cnt_dist_d 
WHERE Latn_id = #{LATN_ID} 
  AND district = #{DISTRICT} 
  AND DAY BETWEEN #{startDAY} AND #{endDAY}
GROUP BY DAY
]]>
</sqlTemplate>

<sqlTemplate id="ResidentUserNum_Marketbase_ThirtyDayUsers" description="某营服30天常驻用户数" DB="mysql">
<![CDATA[
SELECT 
  DAY,
  SUM(Users_CNT) Users_CNT
FROM
  frt_users_cnt_mkt_d 
WHERE Latn_id = #{LATN_ID} 
  AND district = #{DISTRICT} 
  AND marketbase = #{MARKETBASE} 
  AND DAY BETWEEN #{startDAY} AND #{endDAY}
GROUP BY DAY
]]>
</sqlTemplate>

    <!--云图的sql开始-->
   <!--
    #{DAY}: 日期，如20180109
    #{LOCATION_CONDITION} : 其他地域条件
   -->
<sqlTemplate id="IntelligentRoadTestAnalysisV6_cloundChart_getProvinceList" description="获取某天云图的广东省的列表数据（只有一条）" DB="mysql">
<![CDATA[
SELECT A.* , B.lte_to_3g , B.DWFLOW ,'全省' as CITY, '广东' as type FROM (
SELECT
	DAY,
	sum(d.SC_RSRP_140_CNT) mr_count ,
    sum(SC_RSRP_140_GRID_Cnt) grid_count ,
	round(
		sum(d.SC_RSRP_105_CNT) / sum(d.SC_RSRP_140_CNT) * 100,
		2
	) cover_rate,
	round(
		sum(d.SC_RSRP_140_SUM) / sum(d.SC_RSRP_140_CNT),
		2
	) RSRP_AVG
FROM
	FRT_MRO_ALL_MKT_D d
WHERE
	DAY = #{DAY}
AND agps_type = 1
AND CITY != ''
#{LOCATION_CONDITION}
GROUP BY
	DAY) AS A LEFT JOIN
(SELECT
		DAY,
		sum(LTE_TO_3G_SUM) lte_to_3g,
		sum(PDCH_DWFLOW) + sum(PDCH_UPFLOW) / 1000 AS DWFLOW
	FROM
		FRT_WIRELESS_KPI_STAT_D
	WHERE
		DAY =  #{DAY}
	GROUP BY
		DAY ) AS B
ON A.DAY = B.DAY
]]>
</sqlTemplate>

    <!--
    #{DAY}: 日期，如20180109
    #{LOCATION_CONDITION} : 其他地域条件
   -->
<sqlTemplate id="IntelligentRoadTestAnalysisV6_cloudChart_getCityList" description="获取某天云图的地市数据" DB="mysql">
<![CDATA[

SELECT
	f.CITY,
	cover_rate,
	rsrp_avg,
	mr_count,
	grid_count,
	f.CITY as object_name,
	c.lte_to_3g,
	-- 下切数
	c.DWFLOW,
	-- 流量
	"地市" as type,
	(d.BAIDU_MAX_LONGITUDE + d.BAIDU_MIN_LONGITUDE ) / 2  as longitude_mid_baidu,
	(d.BAIDU_MAXLATITUDE + d.BAIDU_MINLATITUDE ) / 2 as latitude_mid_baidu
	#{GIS_DATA_BAIDU}
FROM
	(
		SELECT
			CITY,
			sum(SC_RSRP_140_CNT) mr_count ,
			sum(SC_RSRP_140_GRID_Cnt) grid_count ,
			round(sum(SC_RSRP_105_CNT) / sum(SC_RSRP_140_CNT) * 100 , 2) AS cover_rate,
			round(sum(SC_RSRP_140_SUM) / sum(SC_RSRP_140_CNT) , 2) AS rsrp_avg
		FROM
			FRT_MRO_ALL_MKT_D
		WHERE
			DAY = #{DAY}
		AND CITY IS NOT NULL
		AND TRIM(CITY) <> ''
		#{CITY}
		GROUP BY
			CITY
	) f
LEFT JOIN (
	SELECT
		CITY_NAME,
		BAIDU_MAX_LONGITUDE,
		BAIDU_MIN_LONGITUDE,
		BAIDU_MAXLATITUDE,
		BAIDU_MINLATITUDE
		#{GIS_DATA_BAIDU}
	FROM
		dim_city_gis_data
	WHERE
		DAY = (
			SELECT
				max(DAY)
			FROM
				dim_city_gis_data
		)
	AND BAIDU_MAX_LONGITUDE IS NOT NULL
	AND BAIDU_MIN_LONGITUDE IS NOT NULL
	AND BAIDU_MAXLATITUDE IS NOT NULL
	AND BAIDU_MINLATITUDE IS NOT NULL
	#{CITY_NAME}
) AS d ON f.city = d.CITY_NAME
LEFT JOIN (
	SELECT
		DAY,
		city,
		sum(LTE_TO_3G_SUM) lte_to_3g,
		sum(PDCH_DWFLOW) + sum(PDCH_UPFLOW) / 1000 AS DWFLOW
	FROM
		FRT_WIRELESS_KPI_STAT_D
	WHERE
		DAY = #{DAY}
		#{CITY}
	GROUP BY
		DAY,
		city
) AS c ON f.CITY = c.city
where 1=1
#{LOCATION_CONDITION} -- 地域条件，比如我只看广州市 and f.city = '广州'
]]>
</sqlTemplate>


    <!--
   #{DAY}: 日期，如20180109
   #{LOCATION_CONDITION} : 其他地域条件
  -->
<sqlTemplate id="IntelligentRoadTestAnalysisV6_cloudChart_getCountryList" description="获取某天所选范围内的所有区县数据" DB="mysql">
<![CDATA[
SELECT
	f.CITY,
	f.COUNTRY,
	CONCAT(f.CITY , '_' , f.COUNTRY) as object_name,
	cover_rate,
	rsrp_avg,
	mr_count,
	grid_count,
	c.lte_to_3g,
	-- 下切数
	c.DWFLOW,
	-- 流量
	"区县" as type,
	(d.BAIDU_MAX_LONGITUDE + d.BAIDU_MIN_LONGITUDE ) / 2  as longitude_mid_baidu,
	(d.BAIDU_MAXLATITUDE + d.BAIDU_MINLATITUDE ) / 2 as latitude_mid_baidu
FROM
	(
		SELECT
			CITY,
			COUNTRY,
			sum(SC_RSRP_140_CNT) mr_count ,
			sum(SC_RSRP_140_GRID_Cnt) grid_count ,
			round(sum(SC_RSRP_105_CNT) / sum(SC_RSRP_140_CNT) * 100 , 2) AS cover_rate,
			round(sum(SC_RSRP_140_SUM) / sum(SC_RSRP_140_CNT) , 2) AS rsrp_avg
		FROM
			FRT_MRO_ALL_MKT_D
		WHERE
			DAY = #{DAY}
		AND CITY IS NOT NULL
		AND TRIM(COUNTRY) <> ''
		#{CITY}
		#{COUNTRY}
		GROUP BY
			CITY,
			COUNTRY
	) f
LEFT JOIN (
	SELECT
		CITY_NAME,
		DISTRICT_NAME,
		BAIDU_MAX_LONGITUDE,
		BAIDU_MIN_LONGITUDE,
		BAIDU_MAXLATITUDE,
		BAIDU_MINLATITUDE
	FROM
		dim_district_gis_data
	WHERE
		DAY = (
			SELECT
				max(DAY)
			FROM
				dim_district_gis_data
		)
	AND BAIDU_MINLATITUDE IS NOT NULL
	AND BAIDU_MIN_LONGITUDE IS NOT NULL
	AND BAIDU_MAXLATITUDE IS NOT NULL
	AND BAIDU_MINLATITUDE IS NOT NULL
	#{CITY_NAME}
	#{DISTRICT_NAME}
) AS d ON f.city = d.CITY_NAME
AND f.COUNTRY = d.DISTRICT_NAME
LEFT JOIN (
	SELECT
		DAY,
		city,
		DISTRICT,
		sum(LTE_TO_3G_SUM) lte_to_3g,
		sum(PDCH_DWFLOW) + sum(PDCH_UPFLOW) / 1000 AS DWFLOW
	FROM
		FRT_WIRELESS_KPI_STAT_D
	WHERE
		DAY = #{DAY}
		#{CITY}
		#{DISTRICT}
	GROUP BY
		DAY,
		city,
		DISTRICT
) AS c ON f.CITY = c.city
AND f.COUNTRY = c.DISTRICT
where 1 = 1
#{LOCATION_CONDITION} -- 地域条件，比如我只看广州的区县 and f.city = '广州'
]]>
</sqlTemplate>


    <!--
      #{DAY}: 日期，如20180109
      #{LOCATION_CONDITION} : 其他地域条件
     -->
<sqlTemplate id="IntelligentRoadTestAnalysisV6_cloudChart_getMktCenterList" description="获取某天所选范围内所有营服中心的数据" DB="mysql">
<![CDATA[
SELECT
	f.CITY,
	f.COUNTRY,
	f.MKTCENTER,
	CONCAT(f.CITY , '_' , f.COUNTRY ,'_' ,f.MKTCENTER) as object_name,
	cover_rate,
	rsrp_avg,
	mr_count,
	grid_count,
	c.lte_to_3g,
	-- 下切数
	c.DWFLOW,
	-- 流量
	"营服" as type,
	(d.BAIDU_MAX_LONGITUDE + d.BAIDU_MIN_LONGITUDE ) / 2  as longitude_mid_baidu,
	(d.BAIDU_MAXLATITUDE + d.BAIDU_MINLATITUDE ) / 2 as latitude_mid_baidu
FROM
	(
		SELECT
			CITY,
			COUNTRY,
			MKTCENTER,
			sum(SC_RSRP_140_CNT) mr_count ,
			sum(SC_RSRP_140_GRID_Cnt) grid_count ,
			round(sum(SC_RSRP_105_CNT) / sum(SC_RSRP_140_CNT) * 100 , 2) AS cover_rate,
			round(sum(SC_RSRP_140_SUM) / sum(SC_RSRP_140_CNT) , 2) AS rsrp_avg
		FROM
			FRT_MRO_ALL_MKT_D
		WHERE
			DAY = #{DAY}
		AND CITY IS NOT NULL
		AND TRIM(CITY) <> ''
		AND TRIM(COUNTRY) <> ''
		AND TRIM(MKTCENTER) <> ''
		#{CITY}
		#{COUNTRY}
		#{MKTCENTER}
		GROUP BY
			CITY,
			COUNTRY,
			MKTCENTER
	) f
LEFT JOIN (
	SELECT
		CITY_NAME,
		DISTRICT_NAME,
		MKTCEN_NAME,
		BAIDU_MAX_LONGITUDE,
		BAIDU_MIN_LONGITUDE,
		BAIDU_MAXLATITUDE,
		BAIDU_MINLATITUDE

	FROM
		dim_mktcenter_gis_data
	WHERE
		DAY = (
			SELECT
				max(DAY)
			FROM
				dim_mktcenter_gis_data
		)
	AND BAIDU_MINLATITUDE IS NOT NULL
	AND BAIDU_MIN_LONGITUDE IS NOT NULL
	AND BAIDU_MAXLATITUDE IS NOT NULL
	AND BAIDU_MINLATITUDE IS NOT NULL
	#{CITY_NAME}
	#{DISTRICT_NAME}
	#{MKTCEN_NAME}
) AS d ON f.city = d.CITY_NAME
AND f.COUNTRY = d.DISTRICT_NAME
AND f.MKTCENTER = d.MKTCEN_NAME
LEFT JOIN (
	SELECT
		DAY,
		city,
		DISTRICT,
		MARKETBASE,
		sum(LTE_TO_3G_SUM) lte_to_3g,
		sum(PDCH_DWFLOW) + sum(PDCH_UPFLOW) / 1000 AS DWFLOW
	FROM
		FRT_WIRELESS_KPI_STAT_D
	WHERE
		DAY = #{DAY}
		#{CITY}
	    #{DISTRICT}
	    #{MARKETBASE}
	GROUP BY
		DAY,
		city,
		DISTRICT,
		MARKETBASE
) AS c ON f.CITY = c.city
AND f.COUNTRY = c.DISTRICT
AND f.MKTCENTER = c.MARKETBASE
where 1=1
#{LOCATION_CONDITION} -- 地域条件，比如我只看广州的营服中心 and f.city = '广州'
]]>
</sqlTemplate>


    <!--
   #{STARTDAY}：开始日期 20190401
   #{ENDDAY}: 结束日期 20190407
   #{OTHERCONDITION} ： 其他限制条件 比如 country_id != '' 全省为空
  -->
<sqlTemplate id="IntelligentRoadTestAnalysisV6_cloudChart_get30DayChartData" description="取某地市30天历史覆盖情况" DB="mysql">
<![CDATA[

SELECT
	DAY as create_time,
	agps_type,
	sum(SC_RSRP_140_GRID_Cnt) grid_count, -- 栅格数
	sum(SC_RSRP_140_CNT) mr_count , -- mr记录数
	sum(SC_RSRP_105_CNT) / sum(SC_RSRP_140_CNT)  cover, -- 105覆盖率
	round(sum(SC_RSRP_140_SUM) / sum(SC_RSRP_140_CNT) , 2) rsrp, -- rsrp均值
	round(sum(
		MIN_USEREX_UPAVGRATE * USEREX_UPAVGRATE_GRID_Cnt
	) / sum(USEREX_UPAVGRATE_GRID_Cnt) , 2) MIN_USEREX_UPAVGRATE, -- 上行速率
	round(sum(
		MIN_USEREX_DWAVGRATE * USEREX_DWAVGRATE_GRID_Cnt
	) / sum(USEREX_DWAVGRATE_GRID_Cnt) , 2) MIN_USEREX_DWAVGRATE -- 下行速率
FROM
	FRT_MRO_ALL_MKT_D
WHERE
	DAY >= #{STARTDAY}
AND DAY <= #{ENDDAY}
AND CITY != ''
#{OTHERCONDITION} -- 其他限制条件
GROUP BY
	DAY,
	agps_type
order by agps_type, day  asc
]]>
</sqlTemplate>

    <!--
  #{DAY}：开始日期 20190401
  #{OTHERCONDITION} ： 其他限制条件 比如 country_id != '' 全省为空
 -->
<sqlTemplate id="IntelligentRoadTestAnalysisV6_cloudChart_getKPIData" description="获取某个云图对象的当天KPI" DB="mysql">
<![CDATA[
SELECT
	day,
	sum(LTE_TO_3G_SUM) LTE_TO_3G_SUM -- 下切数
	,
	(
		sum(PDCH_DWFLOW) + sum(PDCH_UPFLOW)
	) as flow -- 流量(MB)
FROM
	FRT_WIRELESS_KPI_STAT_D d
WHERE
	DAY = #{DAY}
	#{OTHERCONDITION}
GROUP BY
	day
]]>
</sqlTemplate>




    <sqlTemplate id="Common_05_districtJson_gid_data_baidu" description="查询某个区县轮廓" DB="mysql">
        <![CDATA[
SELECT
	CITY_NAME,
	DISTRICT_ID,
	DISTRICT_NAME,
	GIS_DATA_BAIDU,
	BAIDU_MAX_LONGITUDE,
	BAIDU_MIN_LONGITUDE,
	BAIDU_MAXLATITUDE,
	BAIDU_MINLATITUDE,
DIS_ORDER
FROM
	dim_district_gis_merge
WHERE
	DAY = (SELECT	MAX(DAY) FROM dim_district_gis_merge)
	and CITY_NAME IS NOT NULL
AND GIS_DATA_BAIDU IS NOT NULL
#{CITY}
#{DISTRICT}
]]>
    </sqlTemplate>

    <sqlTemplate id="Common_04_city_area_mkt_NameAndId_gid_data_baidu" description="取某个营服的轮廓">
        <![CDATA[
select DISTINCT city_name,DISTRICT_ID
       ,DISTRICT_NAME
       ,MKTCEN_ID,MKTCEN_NAME,
       GIS_DATA_BAIDU,
       BAIDU_MAX_LONGITUDE as max_lng,
       BAIDU_MIN_LONGITUDE as min_lng,
       BAIDU_MAXLATITUDE as max_lat,
       BAIDU_MINLATITUDE as min_lat
from noce.dim_mktcenter_gis_data
where day = (select max(day) from noce.dim_mktcenter_gis_data)
and DISTRICT_NAME is not null
and TRIM(DISTRICT_NAME)<> ''
#{CITY}
#{DISTRICT}
#{MKTCEN}
AND BAIDU_MAX_LONGITUDE IS NOT NULL
	]]>
    </sqlTemplate>

    <!--云图的sql结束-->




<sqlTemplate id="AntAdj_residentUserNum" description="智能调优常驻用户" DB="mysql">
<![CDATA[
SELECT 
  DAY,
  SUM(CASE  WHEN  Latn_id = Home_Latn_id  THEN Users_CNT ELSE 0 END) AS city,
  SUM(CASE  WHEN  Home_Province = '广东' AND Latn_id <> Home_Latn_id  THEN Users_CNT ELSE 0 END) AS otherCity,
  SUM(CASE  WHEN  Home_Province <> '广东' THEN Users_CNT ELSE 0 END) AS otherProvince
FROM
  FRT_USERS_CNT_CELL_D 
WHERE BASE_STATN_ID = #{BASE_STATN_ID}
  AND cell_sector_id = #{CELL_SECTOR_ID}
  AND DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
GROUP BY DAY 
]]>
</sqlTemplate>

<sqlTemplate id="AntAdj_flowStatistics" description="智能调优流量统计" DB="mysql">
<![CDATA[
SELECT 
  DAY,
  SUM(CASE  WHEN  Latn_id = Home_Latn_id  THEN FLOW_ALL ELSE 0 END) AS city,
  SUM(CASE  WHEN  Home_Province = '广东' AND Latn_id <> Home_Latn_id  THEN FLOW_ALL ELSE 0 END) AS otherCity,
  SUM(CASE  WHEN  Home_Province <> '广东' THEN FLOW_ALL ELSE 0 END) AS otherProvince
FROM
  FRT_FLOW_CNT_CELL_D 
WHERE eNodeb_ID = #{ENODEB_ID}
  AND Cell_ID = #{CELL_ID}
  AND DAY BETWEEN #{STARTDAY} AND #{ENDDAY}
GROUP BY DAY 
]]>
</sqlTemplate>

</xml-body>

