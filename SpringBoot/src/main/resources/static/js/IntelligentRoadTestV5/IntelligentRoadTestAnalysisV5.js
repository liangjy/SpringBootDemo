"use strict";

/**
 * 检测用户终端，识别是PC端还是移动设备端
 * @constructor
 * @author 林国友
 * @craete 20180531
 */
function IsPC() {

    var userAgentInfo = navigator.userAgent.toLowerCase();
    var Agents = new Array("android", "iphone", "symbianOS", "windows phone", "ipad", "ipod");
    var flag = true;
    for (var v = 0; v < Agents.length; v++) {
        if (userAgentInfo.indexOf(Agents[v]) > 0) {
            flag = false;
            break;
        }
    }
    return flag;

}

/**
 * ********************************
 * @funcname dealDateString
 * @funcdesc 处理日期
 * @param {String} dateString
 日期字符串 格式为：yyyyMMdd
 * @return {Date}
 * @author 林楚佳
 * @create 20170928
 * @modifier
 * @modify
 **********************************
 */
function dealDateString(dateString) {
    dateString = dateString.toString().trim();
    var year = dateString.substr(0, 4);
    var month = dateString.substr(4, 2) - 1;
    var day = dateString.substr(6, 2);
    var dt = new Date(year, month, day);
    return dt;
}

/**
 * ********************************
 * @funcname getDayBetweenTwoDate
 * @funcdesc 获取两个日期之间的间隔
 * @param {Date} date1 , date2
 两个日期
 * @return {int}
 * @author 林楚佳
 * @create 20170928
 * @modifier
 * @modify
 **********************************
 */
function getDayBetweenTwoDate(date1, date2) {
    var day = 0;
    var times = Math.abs(date2 - date1);
    day = parseInt(times / 1000 / 60 / 60 / 24)//把相差的毫秒数转换为天数
    return Math.abs(day);
}


document.addEventListener('click', function (e) {

    if (IntelligentRoadTest.isColorFirstClick == true) {
        if (e.target.className == 'flexCol selected') {
            $('.dtsquarePick').colpick({
                layout: 'rgbhex',
                color: '76ACFC',
                livePreview: 0,
                onSubmit: function onSubmit(hsb, hex, rgb, el) {
                    $(el).css('background-color', '#' + hex);
                    $(el).colpickHide();
                }
            });
            IntelligentRoadTest.isColorFirstClick = false;
        }
    }
});

/**
 * ********************************
 * @funcname isLocalStorageSupported
 * @funcdesc 判断是否支持本地存储
 * @param
 *
 * @return {boolean}
 * @author 林楚佳
 * @create
 **********************************
 */
function isLocalStorageSupported() {

    var
        testKey = 'test',
        storage = window.localStorage;
    try {
        storage.setItem(testKey, 'testValue');
        storage.removeItem(testKey);
        return true;
    } catch (error) {
        return false;
    }
}


$(function () {
    //修复iPhone手机点击两次才有反应的bug
    FastClick.attach(document.body);

    /*document.onselectstart = function(event) {
        return false;
    };*/

    IntelligentRoadTest.countryPermission_common = $("#district_common").val(); //获取当前用户是属于哪个区县的账户
    // IntelligentRoadTest.countryPermission_common = "天河"; //测试
    IntelligentRoadTest.showCurrentUserCountryPoloy(IntelligentRoadTest.cityPermission_common , IntelligentRoadTest.countryPermission_common);

    var screen = noceUtil.GetQueryString("screen");
    if (screen == "true" || screen == true) {
        $('#leftIcon').click();
        $('#topHeader').click();
        $('#downFooter').click();
        //隐藏工具、框选、对比
        $('#threeComp').hide();
        $('#BoxSelection').hide();
    }

    var isHideNav = noceUtil.GetQueryString("isHideNav");
    if (isHideNav == "1") { //隐藏菜单栏
        $("#topHeader").trigger('click');
        $("#leftIcon").trigger('click');
        $("#downFooter").trigger('click');
    }
    // 隐藏分屏
    // $('#screenComp').hide();

    // 隐藏统计页
    // $(".chartTotal").hide();
    // $("#exportData").hide();

    $(".btn-sure,.closeBtn").click(function () {
        $(".modal").hide();
    });

    /*专题扇区筛选中的MR条数筛选变化触发的方法*/
    $('#sureFilter').on('click', function () {
        var mr_count = $("#mrCount").val();
        if (mr_count == null || mr_count.toString().trim == "") {
            mr_count = 1000;
        } else {
            if (isNaN(parseInt(mr_count))) { //输入的数据有误
                $("#mrCount").val(1000);
                mr_count = 1000;
            } else {
                mr_count = parseInt(mr_count);
            }
        }
        IntelligentRoadTest.sectorFilterMrCount(mr_count); //进行过滤
        $("#sectorList").hide();
    });

    //显示隐藏左侧搜索框和列表
    $('.packList').click(function () {
        if ($(this).attr("title") == "收起列表") {  //实现收起列表的代码
            IntelligentRoadTest.isHideList = true;  //标志是否收起列表
            $(this).attr("title", "打开列表");
            // $(this).animate({height:20}, 500);
            $(this).children().removeClass('rotatePackImg');
            $(this).children().attr("src", "../js/IntelligentRoadTestV3/images/pack_down.png");
            if ($(".panelDiv").css("display") == "none") {
                if ($(".listWrap").css("display") == "block" || $(".detailList").css("display") == "block") {
                    if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {
                        $(".listInfo").css({"height": "0", "padding": "0"});
                    }
                    $(".listWrap").children().not(".searchTitle").slideUp();
                    $(".detailList").children(".detailListDiv").not(".backList").slideUp();
                }
            } else {
                $(".panelDiv").slideUp();
            }
        } else { //实现展开列表的代码
            IntelligentRoadTest.isHideList = false;
            $(this).attr("title", "收起列表");
            // $(this).animate({height:50}, 500);
            $(this).children().addClass('rotatePackImg');
            $(this).children().attr("src", "../js/IntelligentRoadTestV3/images/pack_top.png");
            $(".listWrap").children().not(".searchTitle").slideDown();
            $(".detailList").children(".detailListDiv").not(".backList").slideDown();
            if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {
                $(".listInfo").css({"height": "100%", "padding": "10px"});
            }
            if ($(".listInfo").css("display") == "none") {
                $(".panelDiv,.coordinateType").slideDown();
            } else {
                $(".panelDiv").slideUp();
            }
        }
        IntelligentRoadTest.resizeEcharts();
    });
    //右边菜单条图标
    $(".rightToolbar .toolMenu").click(function () {
        if ($(".rightToolbar ").css("width") == "50px") {
            $(this).children().addClass("rotateImg");
            $(".rightToolbar ").animate({width: 120}, 800);
        } else {
            $(this).children().removeClass("rotateImg");
            $(".rightToolbar").animate({width: 50}, 800);
        }
    });
    $(".colorBar-info .toolMenu").click(function () {
        if ($(".colorBar-info").css("width") == "36px") {
            $(this).children().addClass("rotateImg");
            $(".colorBar-info").animate({width: 120}, 800);
        } else {
            $(this).children().removeClass("rotateImg");
            $(".colorBar-info").animate({width: 36}, 800);
        }
    });

    $("#alarmInfoBack").click(function () {
        IntelligentRoadTest.isUseSearch = false;
        IntelligentRoadTest.alarmInfoCurrentResult = IntelligentRoadTest.alarmInfoResult;
        // IntelligentRoadTest.showAlarmInfoData(IntelligentRoadTest.alarmInfoCurrentResult);
        $("#alarmInfoBack").hide();
        $("#alarmInfoSort ul li.selected").trigger("click");
    });

    IntelligentRoadTest.appName = noceUtil.GetQueryString("appId");//缓存appName

    $('#colorLegen').on("mouseover", function () {
        try {
            IntelligentRoadTest.lineHighlight.clearLayers();
        } catch (e) {
        }
    });
    $('.panelWrap').on("mouseover", function () {
        IntelligentRoadTest.mapClick = false;//这句话不知道是用来干什么的，请开发者看到之后能做一下注释，好让别人知道为何要在这里设置为false
    });
    $('.panelWrap').on("mouseout", function () {
        try {
            IntelligentRoadTest.osmTableStyle();
            if(IntelligentRoadTest.index == 8){ // 高铁
                IntelligentRoadTest.roadLineUtilMouseMove([]); //移除500米高亮线段
                IntelligentRoadTest.roadContinueLineUtilMouseMove([]); //移除连片或者隧道高亮线段
            }
            $('#tip').hide();
//    		if(IntelligentRoadTest.metroIndex != 3){
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metorMkSatr);
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metorMkEnd);
//    		}
            for (var i = 0; i < IntelligentRoadTest.metroHighlightDataOverlay.length; i++) {
                IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metroHighlightDataOverlay[i]);
            }
            IntelligentRoadTest.metroHighlightDataOverlay = [];
            IntelligentRoadTest.lineHighlight.clearLayers();
            IntelligentRoadTest.hideOsmStarEndMk();

        } catch (e) {
        }

        var id = IntelligentRoadTest.getListDivId(IntelligentRoadTest.index);
        var img = "../js/IntelligentRoadTest/images/bg_num.png";
        if (IntelligentRoadTest.index == 0 || IntelligentRoadTest.index == 24 || IntelligentRoadTest.index == 25
            || IntelligentRoadTest.index == 30 || IntelligentRoadTest.index == 31 || IntelligentRoadTest.index == 32) {
            img = "../js/IntelligentRoadTest/images/markeRq.png";
        }
        for (var i = 0; i < 20; i++) {
            $("#" + id).find(".listUL > li").eq(i).find(".numSpan").css("background", "url(" + "../js/IntelligentRoadTest/images/bg_num.png" + ")");
            $("#" + id).find(".listUL > li").eq(i).find(".numSpan2").css("background", "url(" + "../js/IntelligentRoadTest/images/markeRq.png" + ")");
            $("#" + id).find(".listUL > li").eq(i).css("background", "#fff");
            try {
                IntelligentRoadTest.markerList[i].setIcon(new BMap.Icon(img, new BMap.Size(22, 32)));
            } catch (e) {
            }
        }

        if(IntelligentRoadTest.suiDaoCompOverlay != null){ //移除隧道名称的提示框
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.suiDaoCompOverlay);
            $("#cirTip").hide(); //如果上面的代码无法隐藏，只能使用这个隐藏了。
        }
    });
    showOrHideInputImage(3);//隐藏搜索框中的所有图标

    //搜索回车事件
    $('#searchText').keydown(function (e) {
        if (e.keyCode == 13) {
            $('#searchResult li').eq(0).click();
        }
    });
    // IntelligentRoadTest.loadSelectData();//全省营服名称和id
    var isShowPoor = noceUtil.GetQueryString("isShowPoor");
    if (isShowPoor) {
        IntelligentRoadTest.pageLoadIsShowPoor = true;
    } else {
        IntelligentRoadTest.pageLoadIsShowPoor = false;
    }


    IntelligentRoadTest.initOtherMap();//除了主地图外的其它地图
    IntelligentRoadTest.loadDistrictJsonData();//全省区县名称、id和轮廓
    IntelligentRoadTest.loadMktCenterData();//全省营服名称、id

    $("#date97").val(IntelligentRoadTest.day);
    $("#date98").val(IntelligentRoadTest.day);
    $("#date99").val(IntelligentRoadTest.day);
    $(".panelDiv,.panelWrap").css("max-height", $(".mapDiv").height() - 70);
    $(".listDivWrap").css("max-height", $(".mapDiv").height() - 70 - 45);
    $(".showListWrap .listDivWrap").css("max-height", $(".mapDiv").height() - 70 - 45);
    $(".showListDetail .listDivWrap").css("max-height", $(".mapDiv").height() - 70 - 45-45);
    if ($("body").height() <= 768) {
        $(".detailListDiv").css("max-height", $(".mapDiv").height() - 120 - 45);
    } else {
        $(".detailListDiv").css("max-height", $(".mapDiv").height() - 70 - 45);
    }
    infoHeight();

    $(".coverDiv").height($(".mapDiv").height() / 1.4);
    $("#mapMobile, #mapUnicom").height($(".coverDiv").height() - $(".cover-title").height());

    $(window).resize(function () {
        $(".panelDiv,.panelWrap").css("max-height", $(".mapDiv").height() - 70);
        $(".showListWrap .listDivWrap").css("max-height", $(".mapDiv").height() - 70 - 45);
        $(".showListDetail .listDivWrap").css("max-height", $(".mapDiv").height() - 70 - 45-45);
        if ($("body").height() <= 768) {
            $(".detailListDiv").css("max-height", $(".mapDiv").height() - 120 - 45);
        } else {
            $(".detailListDiv").css("max-height", $(".mapDiv").height() - 70 - 45);
        }
        infoHeight();
        $(".coverDiv").height($(".mapDiv").height() / 1.4);
        $("#mapMobile, #mapUnicom").height($(".coverDiv").height() - $(".cover-title").height());
    });

    /* 日历框组件初始化 */
    var maxDateTime = pageMaxTime().replace(/\-/g, "");
    $('#seachTime').dateRangePicker({
        format: 'YYYYMMDD',
        endDate: maxDateTime,
        autoClose: true,
        singleDate: true,
        showShortcuts: false,
        inline: true,
        container: '.dateDiv',
        duration: 2,
        getValue: function () {
            return this.innerHTML;
        },
        setValue: function (s) {
            this.innerHTML = s;
        }
    }).bind('datepicker-change', function () {
        var date = $("#seachTime").text(); //date就是选中的日期
        var startDay = new Date(dealDateString(date).getTime() - 6 * 24 * 60 * 60 * 1000).Format("yyyyMMdd"); //起始时间
        $("#weekStartTime").text(startDay);
        /*if(IntelligentRoadTest.index == 29){ //用户抱怨，日期只有一天，所以设置开始时间和结束时间相同
            $("#weekStartTime").text(date);
        }*/
        seachTimeOnpicked();
    });
    /* 点击日期文字显示日历框 */
    $("#dateWrap").click(function (evt) {
        evt.stopPropagation();
        $('#seachTime').data('dateRangePicker').open();
        $(".city-info,.layer-info").hide();
    });
    $('#seachTime').click(function (evt) {
        $(".dateCity .city-info,.layer-info").hide();
    });

    /*---点击三角形区域显示侧边栏列表信息---*/
    $('.packDiv').click(function () {
        if ($(this).children().hasClass('rotateImg')) {
            $(this).children().removeClass('rotateImg');
            $(this).parent().animate({marginLeft: 0}, 800);
        } else {
            $(this).children().addClass('rotateImg');
            var panelWidth = $(".panelWrap").width();
            $(this).parent().animate({marginLeft: -panelWidth - 10}, 800);
        }
    });
    // 工具点击显示下拉框
    $("#toolText").click(function () {
        $(".toolInfo").toggle();
    });
    // 对比点击显示下拉框
    $("#compText").click(function () {
        $(".compInfo").toggle();
    });

    // 色板点击事件
    $("#colorBar").click(function () {
        if ($(".colorBar-info").css("display") == "none") {
            $(".colorBar-info").show();
        } else {
            $(".colorBar-info").hide();
        }
        IntelligentRoadTest.editImgSrc(this);
    });
    // DT导入点击事件
    // $("#dtImport").click(function () {
    //     $(".importModal").toggle();
    //     IntelligentRoadTest.editImgSrc(this);
    // });
    /*---框选点击事件---*/
    $('#BoxSelection').click(function () {
        if (IntelligentRoadTest.isScreenCompared) {
            alert("分屏页面禁用框选");
            return;
        }

        if (IntelligentRoadTest_SystemLayerEdit.isRedrawPolygon) {//如果当前处于图层重绘状态，不可以使用框选
            alert("您正在重绘图层,不可以使用自定义框选");
            return;
        }

        if ($(this).hasClass("unClick")) {
            alert("OSM地图暂不支持框选");
            return;
        }

        if (IntelligentRoadTest.bmapDistanceTool != null && IntelligentRoadTest.bmapDistanceTool.isUseTool) {
            alert("不能同时使用鼠标测距和框选");
            return;
        }

        if (IntelligentRoadTest.isUseCoordinatePickTool) {
            alert("不能同时使用鼠标框选和坐标拾取");
            return;
        }

        if (!IntelligentRoadTest.isBoxSelecting) {
            if (IntelligentRoadTest.map.getZoom() <= 15) {
                alert("请将地图放大到200米及以下");
                return;
            }
            IntelligentRoadTest.openBoxSelection();
        } else {
            IntelligentRoadTest.closeBoxSelection();
            IntelligentRoadTest.isSelect = false;
            $("#showBoxSelectionList").hide();
        }
        IntelligentRoadTest.editImgSrc(this);
    });

    /*--分屏对比--*/
    $('#screenComp').click(function () {

        if (IntelligentRoadTest.isScreenCompared) {
            window.open('', 'IntelligentRoadTestAnalysisV5', 'resizable=yes');
            return;
        }

        if ($('#left').css("display") == "block") {
            $('#leftIcon').click();
            $('#topHeader').click();
            $('#downFooter').click();
        }
        IntelligentRoadTestScreenCompared.openComared();
    });

    /*---三网点击事件---*/
    $('#threeComp').click(function () {
        if (IntelligentRoadTest.isScreenCompared) {
            alert("分屏页面禁用三网");
            return;
        }
        if ($(this).hasClass("unClick")) {
            alert("OSM地图和非覆盖质量暂不支持三网");
            return;
        }
        if (!IntelligentRoadTest.isThreeNetStatus) {
            IntelligentRoadTest.openThreeComp();
        } else {
            IntelligentRoadTest.closeThreeComp();
        }
        IntelligentRoadTest.editImgSrc(this);
    });

    /*---测量点击事件---*/
    $("#gageDistance").click(function () {//测距测角工具
        if (IntelligentRoadTest.isScreenCompared) {
            alert("分屏页面禁用测距和框选");
            return;
        }
        if (IntelligentRoadTest.isBoxSelecting) {
            alert("不能同时使用鼠标测距和框选");
            return;
        }

        if (IntelligentRoadTest.isUseCoordinatePickTool) {
            alert("不能同时使用鼠标测距和坐标拾取");
            return;
        }


        if (IntelligentRoadTest_SystemLayerEdit.isRedrawPolygon) {//如果当前处于图层重绘状态，不可以使用框选
            alert("您正在重绘图层,不可以使用测距");
            return;
        }

        if ($(this).hasClass("unClick")) {
            if (IntelligentRoadTest.osmDistanceTool == null) {
                IntelligentRoadTest.osmDistanceTool = new osmMeasureDistance(IntelligentRoadTest.OsmMap, IntelligentRoadTest.osmMapDistanceToolFinish);
            }
            if (IntelligentRoadTest.osmDistanceTool.isUseTool) {
                IntelligentRoadTest.osmDistanceTool.removeAll();
            } else {
                IntelligentRoadTest.osmDistanceTool.openMeasure();
                IntelligentRoadTest.editImgSrc(this);
            }
        } else {
            if (IntelligentRoadTest.bmapDistanceTool == null) {
                IntelligentRoadTest.bmapDistanceTool = new measureDistance(IntelligentRoadTest.map, IntelligentRoadTest.bmapDistanceToolFinish);
            }

            if (IntelligentRoadTest.bmapDistanceTool.isUseTool) {
                IntelligentRoadTest.bmapDistanceTool.closeAll();
            } else {
                IntelligentRoadTest.bmapDistanceTool.openMeasure();
                IntelligentRoadTest.editImgSrc(this);
            }
        }
    });

    //坐标拾取工具
    $('#coordinatePick').click(function () {
        if (IntelligentRoadTest.isScreenCompared) {
            alert("分屏页面禁用坐标拾取");
            return;
        }
        if ($(this).hasClass("unClick")) {
            alert("OSM地图暂不支持坐标拾取");
            return;
        }

        if (IntelligentRoadTest.isBoxSelecting) {
            alert("不能同时使用坐标拾取和框选");
            return;
        }

        if (IntelligentRoadTest.bmapDistanceTool != null && IntelligentRoadTest.bmapDistanceTool.isUseTool) {
            alert("不能同时使用鼠标测距和坐标拾取");
            return;
        }

        if (IntelligentRoadTest_SystemLayerEdit.isRedrawPolygon) {//如果当前处于图层重绘状态，不可以使用框选
            alert("您正在重绘图层,不可以使用坐标拾取");
            return;
        }

        if (IntelligentRoadTest.coordinatePickTool == null) {
            var bMapObj = {
                map: IntelligentRoadTest.map,
            }
            IntelligentRoadTest.coordinatePickTool = new bmapConversion(bMapObj);
        }
        if (IntelligentRoadTest.isShowBaiduMap) {
            if (IntelligentRoadTest.coordinatePickTool == null) {
                var bMapObj = {
                    map: IntelligentRoadTest.map,
                }
                IntelligentRoadTest.coordinatePickTool = new bmapConversion(bMapObj);
            }

            if (IntelligentRoadTest.isUseCoordinatePickTool) {
                IntelligentRoadTest.coordinatePickTool.closeAll();
                IntelligentRoadTest.isUseCoordinatePickTool = false;
            } else {
                IntelligentRoadTest.coordinatePickTool.openMeasure();
                IntelligentRoadTest.isUseCoordinatePickTool = true;
            }
        } else {
            if (IntelligentRoadTest.coordinatePickToolForOsm == null) {
                var MapObj = {
                    map: IntelligentRoadTest.OsmMap,
                }
                IntelligentRoadTest.coordinatePickToolForOsm = new OsmMapConversion(MapObj);
            }

            if (IntelligentRoadTest.isUseCoordinatePickTool) {
                IntelligentRoadTest.coordinatePickToolForOsm.closeAll();
                IntelligentRoadTest.isUseCoordinatePickTool = false;
            } else {
                IntelligentRoadTest.coordinatePickToolForOsm.openMeasure();
                IntelligentRoadTest.isUseCoordinatePickTool = true;
            }
        }

        IntelligentRoadTest.editImgSrc(this);

    });

    $('#helpTip').click(function () {
        if ($(".rightToolbar ").css("width") == "120px") {
            setTimeout(function () {
                $(".help-info").toggle();
            }, 800);
        } else {
            $(".help-info").toggle();
        }
        IntelligentRoadTest.editImgSrc(this);
    });

    $('#searchText').on("focus", function () {
        $(this).attr("placeholder", "");
    });

    $('#searchText').on("blur", function () {
        if ($(this).val().trim() == "") {
            changeSearchPlaceholder();
        }
    });
    /*---搜索框输入文本事件---*/

    var cpLock = false;
    $('#searchText').on('compositionstart', function () {
        cpLock = true;
    })
    $('#searchText').on('compositionend', function () {
        cpLock = false;
        // if(!cpLock) console.log("compositionend事件："+this.value);
        $('#searchText').trigger('input');
    })

    $('#searchText').on('input', function () {
        if (cpLock) {
            return;
        }
        // if(!cpLock) console.log("input事件："+this.value);

        var val = $('#searchText').val().trim();
        if (IntelligentRoadTest.index == 4 || IntelligentRoadTest.index == 6) {
            $("#searchResult").hide();
        }
        if (val == "" && IntelligentRoadTest.index == 3 /*IntelligentRoadTest.index !=4 && IntelligentRoadTest.index!=6  && IntelligentRoadTest.index!=10*/) { //扇区
            $("#searchResult").hide();
        } else {
            showOrHideInputImage(2);
            if ((IntelligentRoadTest.index == null && IntelligentRoadTest.senseName == null)
                || (IntelligentRoadTest.index == 13 && IntelligentRoadTest.senseName == 'saveArea')) { //不在场景列表也不在其他列表中
                //搜索按钮，分三种情况，根据名称、根据经纬度、根据基站id_小区id进行定位
                var re2 = new RegExp('^[\u4e00-\u9fa5]{1,}');
                //var re3=new RegExp("^[0-9]+\.[0-9]+\,[0-9]+\.[0-9]+$");
                /* 1）经度和纬度之前的分隔符支持空白符和全角逗号
                2）默认为百度经纬度，增加对GPS经纬度的支持（纬度后增加“G"或”GPS“后缀表示，大小写不限）*/
                var re3 = new RegExp("(^[0-9]+\.[0-9]+(\ |\,|，)[0-9]+\.[0-9]+$)|(^[0-9]+.[0-9]+(\ |\,|，)[0-9]+.[0-9]+(G|GPS|B)$)", "i");
                var re4 = new RegExp("^[0-9]+\_[0-9]+$");
                if (re2.test(val)) {//输入的都是中文,用百度地图搜索组件
                    IntelligentRoadTest.searchNameByMap(val);
                } else if (re3.test(val)) {
                    IntelligentRoadTest.searchByLngAndLat(val);
                } else if (re4.test(val)) {
                    IntelligentRoadTest.searchByCellId(val);
                }
                if (IntelligentRoadTest.localSearch == null) {
                    IntelligentRoadTest.localSearch = new BMap.LocalSearch(IntelligentRoadTest.city, {
                        onSearchComplete: IntelligentRoadTest.localSearchSearchComplete
                    });
                }
            }
            else {
                IntelligentRoadTest.searchByCategoryIndex(val);
                if (IntelligentRoadTest.senseName == "uptown" || IntelligentRoadTest.senseName == "college" || IntelligentRoadTest.senseName == "business" || IntelligentRoadTest.senseName == "scenery"
                    || IntelligentRoadTest.senseName == "warwolf" || IntelligentRoadTest.senseName == "site" || IntelligentRoadTest.senseName == "food" || IntelligentRoadTest.senseName == "market"
                    || IntelligentRoadTest.senseName == "school" || IntelligentRoadTest.senseName == "cityVillage" || IntelligentRoadTest.senseName == "village" || IntelligentRoadTest.senseName == "factory") {
                    IntelligentRoadTest.searchSenseByCondition(IntelligentRoadTest.senseName, val); //模糊高速高铁市政路匹配场景
                }
                if (IntelligentRoadTest.senseName == "metro") {
                    IntelligentRoadTest.searchMetroByCondition(IntelligentRoadTest.senseName, val); //模糊匹配地铁场景
                }
                if (IntelligentRoadTest.index == 7 || IntelligentRoadTest.index == 8 || IntelligentRoadTest.index == 14) {
                    IntelligentRoadTest.searchLineByCondition(IntelligentRoadTest.index, val);
                }
                if (IntelligentRoadTest.index == 3) { //扇区
                    hideSearchResult(); //根据输入的内容是否为空判断是否隐藏搜索结果框
                }

            }
            showOrHideInputImage(1);
        }
    });

    /*---搜索框点击事件---*/
    $('#searchText').on('focus', function () {
        if (IntelligentRoadTest.index == null) {
            IntelligentRoadTest.gotoIndex();
        }
    });

    $('#submitForData').click(function () {
        $(".layer-info").hide();
        if ($('#layerSubmitProgressDiv').is(":hidden")) {
            $('#layerSubmitProgressDiv').show();
            $('#layerSubmitProgressDiv .closeProgress').unbind("click").bind("click", function () {
                if (IntelligentRoadTest.LayerMultiple != undefined && IntelligentRoadTest.LayerMultiple != null) {
                    IntelligentRoadTest.LayerMultiple.cancelSqlAjax();
                    $('#layerSubmitProgressDiv').hide();
                    IntelligentRoadTest.LayerMultiple = null;
                }
            });
            IntelligentRoadTest.showLayerLoading = true;
        }
        /*if(IntelligentRoadTest.showNrCover){//与附近覆盖联动
            var gridIndex=$('.gridFieldset2 input[name="grid-type"]:checked').val();//配置栅格类型
            //增加4G扇区和移动站址扇区的勾选
            if(gridIndex!=6){
                IntelligentRoadTest.currentNrCover="4G";
                $("#sector2G").prop("checked", false);
                $("#yd_sector").prop("checked", true);
                $("#sector").prop("checked", true);
                $("#sector").parents('tr').siblings().children().find('input:checkbox').prop("checked", true);
                $("#sector").parents('tr').siblings().children().find('input:checkbox').siblings('label').css("color","#3285FF");
            }else{
                IntelligentRoadTest.currentNrCover="2G";
                $("#sector2G").prop("checked", true);
                $("#yd_sector").prop("checked", false);
                $("#sector").prop("checked", false);
                $("#sector2G").parents('tr').siblings().children().find('input:checkbox').prop("checked", true);
                $("#sector2G").parents('tr').siblings().children().find('input:checkbox').siblings('label').css("color","#3285FF");
            }
            $(".NrText").text($('.NrUl li[data-nrcover="'+IntelligentRoadTest.currentNrCover+'"]').text());
            $('.NrUl li[data-nrcover="'+IntelligentRoadTest.currentNrCover+'"]').addClass("selected").siblings().removeClass("selected");
        }*/

        var timer = setTimeout(function () {
            IntelligentRoadTest.submitLayersData();
        }, 100);
        timer = null;
    });
    // $(".clearText").show();
    /*--搜索框的X图标的点击事件--*/
    $(".clearText").click(function () {
        if (IntelligentRoadTest.isHideList == true) { //如果是列表收起的状态下，点击 X 会将收起列表的状态改为下拉列表的状态
            $('.packList').click();
        }
        IntelligentRoadTest.isChangeDate = false;
        var startDay = $("#weekStartTime").text();
        var endDay = $("#seachTime").text()
        if (startDay == endDay) {
            startDay = new Date(dealDateString(endDay).getTime() - 6 * 24 * 60 * 60 * 1000).Format("yyyyMMdd");
            $("#weekStartTime").text(startDay);
        }
        IntelligentRoadTest.roadCurrentQueryCity = $("#railCityName");
        IntelligentRoadTest.hideStartEndMarker(); //如果有高铁500详情页的起止点，清除掉
        IntelligentRoadTest.hide20MStartEndMarker();//如果有高铁的连片或者隧道的起止点，清除掉
        //如果站间距的图层存在，则清除图层并将变量置空
        if (IntelligentRoadTest.sectorCircleCanvas != null) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.sectorCircleCanvas); //清除圆圈
            IntelligentRoadTest.sectorCircleCanvas = null;
        }
        /*将IntelligentRoadTest.sectorObj置为普通扇区的属性*/
        IntelligentRoadTest.sectorObj = IntelligentRoadTest.normalSector;
        IntelligentRoadTest.lastSectorObj = null; //重新置空
        IntelligentRoadTest.isFromAlarmList = false; //将这个变量设置为false。防止在场景列表中显示工单监测的信息
        //清除TA的圆形覆盖物
        IntelligentRoadTest.clearAllCircle();
        IntelligentRoadTest.clearSectorPredOverlays(); //清除预测扇区的覆盖物
        if (IntelligentRoadTest.pred_amzuith_sector != null) { //如果预测扇区不为null，需要将其清除
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.pred_amzuith_sector);
            IntelligentRoadTest.pred_amzuith_sector = null;
        }
        /*IntelligentRoadTest.refreshPoorAreaList = false; //将是否需要刷新列表的属性
        IntelligentRoadTest.refreshPoorAreaResult = [];
        IntelligentRoadTest.refreshSenseList = false;
        IntelligentRoadTest.refreshSenseResult = [];*/
        IntelligentRoadTest.isLP = false; //需要将是否是连片设置为false
        if (IntelligentRoadTest.highwayVM != null) {
            IntelligentRoadTest.highwayVM.type = false;
        }
        IntelligentRoadTest.isUseSearch = false; //是否从工单搜索中点击筛选列表的标识，这个用于控制显示隐藏工单列表的返回按钮
        IntelligentRoadTest.isPoorAreaSaveToConcern = false; //是否是弱区保存为关注区域的标识
        IntelligentRoadTest.removeEsbhPolyline(); //清除工单监测绘制出来的多边形
        IntelligentRoadTest.poorAreaCahe = null;
        IntelligentRoadTest.getPoorAreaByIdCahe = null; //为了点击返回之后再次点击之后有反应而设置的
        IntelligentRoadTest.poorToSector = false; //作为是否从弱区详情页跳转到扇区详情页
        IntelligentRoadTest.isShowAlarmInfoMessage = false; //是否是从工单跳转到其他详情页的标识
        IntelligentRoadTest.alarm_recover_time = null; //清空当前工单对象的恢复时间的标识字段
        for (var i = 0; i < IntelligentRoadTest.dtPolygon.length; i++) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.dtPolygon[i]);
        }
        IntelligentRoadTest.dtPolygon = [];
        IntelligentRoadTest.osmType = null;
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.cacheSearchMk);
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.searchMk);
        IntelligentRoadTest.isClickGrid = false;
        IntelligentRoadTest.second = false;
        if(!IntelligentRoadTest.showNrCover){//只有不在显示附近覆盖的情况下才将显示栅格的标识设置为false（林楚佳20190218修订）
            IntelligentRoadTest.isShowGrid = false;
        }
        IntelligentRoadTest.isShowDTGrid = false;
        for (var i = 0; i < IntelligentRoadTest.polygonList.length; i++) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.polygonList[i]);
        }
        IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
        IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
        IntelligentRoadTest.cleraAllZhuantiSectorAndLine();
        IntelligentRoadTest.hideCBPoorAreaNrTop5Sector();
//      清除编辑图层的多边形轮廓和线
        IntelligentRoadTest_SystemLayerEdit.clearActPolyline();
        IntelligentRoadTest_SystemLayerEdit.clearHisPolyline();
        IntelligentRoadTest_SystemLayerEdit.clearPolygon();
        IntelligentRoadTest_SystemLayerEdit.cancelSystemLayer();
        IntelligentRoadTest_SystemLayerEdit.clearAuditGisPolyline();
        IntelligentRoadTest_SystemLayerEdit.isEditPolygon = false;

        if (!IntelligentRoadTest.isBoxSelecting) {
            if (IntelligentRoadTest.SelectionOverlay != null) {
                IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.SelectionOverlay);
            }
        }

        IntelligentRoadTest.polygonList = [];
        IntelligentRoadTest.removeMk();
        IntelligentRoadTest.mkIndex = null;
        showOrHideInputImage(3);//隐藏X和加载中的图标

        //筛选条件重置
        IntelligentRoadTest.resetAllFilter(IntelligentRoadTest.index);
        //清空文本
        $("#searchText").val("");
        if (IntelligentRoadTest.index == 6) {
            IntelligentRoadTest.getMacSectorMessageByCondition();
        }
        if (IntelligentRoadTest.index == 4) {
            IntelligentRoadTest.getDTMessageByCondition();
        }
        if(IntelligentRoadTest.showNrCover){ //在显示附近覆盖的情况下，点击X不需要显示主菜单(林楚佳20190218修订)
            IntelligentRoadTest.gotoIndex(false); //这里传参是为了不让主菜单显示出来
        }else{
            IntelligentRoadTest.gotoIndex();
        }
        if (IntelligentRoadTest.index == null && IntelligentRoadTest.senseName == null) {
            // IntelligentRoadTest.gotoIndex();
            if(!IntelligentRoadTest.showNrCover){ //在显示附近覆盖的情况下，点击X不需要显示主菜单(林楚佳20190218修订)
                $(".panelDiv").slideDown().siblings(".listInfo").hide();
            }
            // $(".panelDiv").animate({marginTop: -360}, 500);
        } else {
            IntelligentRoadTest.index = null;
            IntelligentRoadTest.senseName = null;
        }
        $("#searchResult").hide();
        IntelligentRoadTest.removeMk();
        IntelligentRoadTest.legendGrid();
        $('#layerUl li').each(function () {
            var id = $(this).find('input').attr("id");
            if (id != "rail" && id != "cityRoad" && id != "metro" && id != "highWay") {
                $(this).show();
            } else {
                $(this).hide();
            }
        })
        IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
        IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
        // $(".coordinateType").hide();


    });
    /* 关闭移动、联通覆盖地图div */
    //移动、联通覆盖 拖动
    $(".dragDiv").draggable();
    /* 移动覆盖  */
    $(".li-Mobile").mouseup(function () {
        if ($(this).parents(".dragDiv").hasClass("ui-draggable-dragging") == false) {
            $(this).next(".coverDiv").show({
                effect: "scale",
                origin: "left top",
                duration: 1000
            });
        }
        IntelligentRoadTest.mobileIsHide = false;
        IntelligentRoadTest.centerAndZoomTimeout = setTimeout("IntelligentRoadTest.timeoutCenterAndZoom();", 1100);
        IntelligentRoadTest.drawPolylineTimeout = setTimeout("IntelligentRoadTest.drawPolyline();", 1200);

        setTimeout(function () {
            if (IntelligentRoadTest.isShowPoorArea) {
                IntelligentRoadTest.poorAreaCompentM.draw();
                IntelligentRoadTest.poorCompentM.draw();
                IntelligentRoadTest.covSectorCompentM.draw();
            }
        }, 1200);

        setTimeout(function () {
//            IntelligentRoadTest.GridMap.clear();
            IntelligentRoadTest.GridMapM.clear();
//            IntelligentRoadTest.GridMapU.clear();
//            IntelligentRoadTest.GridCanArrT = [];
            /* IntelligentRoadTest.GridCanArrM = [];
 //            IntelligentRoadTest.GridCanArrU = [];
             for(var i=0;i<IntelligentRoadTest.CanArr.length;i++){
                 var griddata = IntelligentRoadTest.CanArr[i];
 //                if(griddata[8]!=null){
 //                    var gridT = [griddata[0],griddata[1],griddata[2],griddata[3],griddata[8],griddata[12]];//三网电信rsrp
 //                    IntelligentRoadTest.GridCanArrT.push(gridT);
 //                }

                 if(griddata[9]!=null){
                     var gridM = [griddata[0],griddata[1],griddata[2],griddata[3],griddata[9],griddata[13]];//三网移动rsrp
                     IntelligentRoadTest.GridCanArrM.push(gridM);
                 }

 //                if(griddata[10]!=null){
 //                    var gridU = [griddata[0],griddata[1],griddata[2],griddata[3],griddata[10],griddata[14]];//三网联通rsrp
 //                    IntelligentRoadTest.GridCanArrU.push(gridU);
 //                }
             }*/


//            var CTData = IntelligentRoadTest.GridCanArrT;
            var CMData = IntelligentRoadTest.GridCanArrM;
//            var CUData = IntelligentRoadTest.GridCanArrU;
            for (var j = 0; j < IntelligentRoadTest.colorBarArr.length; j++) {
//                CTData = IntelligentRoadTest.ClearData(CTData,IntelligentRoadTest.colorBarArr[j]);
                CMData = IntelligentRoadTest.ClearData(CMData, IntelligentRoadTest.colorBarArr[j]);
//                CUData = IntelligentRoadTest.ClearData(CUData,IntelligentRoadTest.colorBarArr[j]);
            }
//            IntelligentRoadTest.GridMap.draw(CTData);
            IntelligentRoadTest.GridMapM.draw(CMData);
//            IntelligentRoadTest.GridMapU.draw(CUData);
//            CTData = null;
            CMData = null;
//            CUData = null;
//            IntelligentRoadTest.legendGrid();
//            IntelligentRoadTest.openThreeLable();
        }, 1300);


    });
    /* 联通覆盖 */
    $(".li-Unicom").mouseup(function () {
        if ($(this).parents(".dragDiv").hasClass("ui-draggable-dragging") == false) {
            $(this).next(".coverDiv").show({
                effect: "scale",
                origin: "left top",
                duration: 1000
            });
        }
        IntelligentRoadTest.unicomIsHide = false;
        IntelligentRoadTest.centerAndZoomTimeout = setTimeout("IntelligentRoadTest.timeoutCenterAndZoom();", 1100);

        IntelligentRoadTest.drawPolylineTimeout = setTimeout("IntelligentRoadTest.drawPolyline();", 1200);

        setTimeout(function () {
            if (IntelligentRoadTest.isShowPoorArea) {
                IntelligentRoadTest.poorAreaCompentM.draw();
                IntelligentRoadTest.poorCompentM.draw();
                IntelligentRoadTest.covSectorCompentM.draw();
            }
        }, 1200);

        setTimeout(function () {
//            IntelligentRoadTest.GridMap.clear();
//            IntelligentRoadTest.GridMapM.clear();
            IntelligentRoadTest.GridMapU.clear();
//            IntelligentRoadTest.GridCanArrT = [];
//            IntelligentRoadTest.GridCanArrM = [];
            /*IntelligentRoadTest.GridCanArrU = [];
            for(var i=0;i<IntelligentRoadTest.CanArr.length;i++){
                var griddata = IntelligentRoadTest.CanArr[i];
//                if(griddata[8]!=null){
//                    var gridT = [griddata[0],griddata[1],griddata[2],griddata[3],griddata[8],griddata[12]];//三网电信rsrp
//                    IntelligentRoadTest.GridCanArrT.push(gridT);
//                }

//                if(griddata[9]!=null){
//                    var gridM = [griddata[0],griddata[1],griddata[2],griddata[3],griddata[9],griddata[13]];//三网移动rsrp
//                    IntelligentRoadTest.GridCanArrM.push(gridM);
//                }

                if(griddata[10]!=null){
                    var gridU = [griddata[0],griddata[1],griddata[2],griddata[3],griddata[10],griddata[14]];//三网联通rsrp
                    IntelligentRoadTest.GridCanArrU.push(gridU);
                }
            }*/


//            var CTData = IntelligentRoadTest.GridCanArrT;
//            var CMData = IntelligentRoadTest.GridCanArrM;
            var CUData = IntelligentRoadTest.GridCanArrU;
            for (var j = 0; j < IntelligentRoadTest.colorBarArr.length; j++) {
//                CTData = IntelligentRoadTest.ClearData(CTData,IntelligentRoadTest.colorBarArr[j]);
//                CMData = IntelligentRoadTest.ClearData(CMData,IntelligentRoadTest.colorBarArr[j]);
                CUData = IntelligentRoadTest.ClearData(CUData, IntelligentRoadTest.colorBarArr[j]);
            }
//            IntelligentRoadTest.GridMap.draw(CTData);
//            IntelligentRoadTest.GridMapM.draw(CMData);
            IntelligentRoadTest.GridMapU.draw(CUData);
//            CTData = null;
//            CMData = null;
            CUData = null;
//            IntelligentRoadTest.legendGrid();
//            IntelligentRoadTest.openThreeLable();
        }, 1300);
    });
    /* 关闭移动/联通覆盖 */
    $(".close-coverDiv").click(function () {
        if ($(this).parents(".coverDiv").attr("title") == "联通覆盖") {
            IntelligentRoadTest.unicomIsHide = true;//记录联通地图是隐藏
        } else if ($(this).parents(".coverDiv").attr("title") == "移动覆盖") {
            IntelligentRoadTest.mobileIsHide = true;//记录移动地图是隐藏
            //	$(".li-Mobile").hide();
        }
        $(this).parents(".coverDiv").hide({
            effect: "scale",
            origin: "left top",
            duration: 1000
        });
        IntelligentRoadTest.centerAndZoomTimeout = setTimeout("IntelligentRoadTest.timeoutCenterAndZoom();", 1100);
        IntelligentRoadTest.drawPolylineTimeout = setTimeout("IntelligentRoadTest.drawPolyline();", 1200);
    });

    /*$(".closeImg").click(function() {
        $(this).siblings("input").attr('checked',false);
        $(this).remove();
    });*/
    /*$(".complainRadio").click(function() {
        var checkedState = $(this).attr('checked');
        var imgTag = '<img src="../js/IntelligentRoadTestV3/images/iconClose.png" class="closeImg">';
        if(checkedState == 'checked'){
            $(".closeImg").remove();
            $(this).parent().append(imgTag);
        }
        $(".closeImg").click(function() {
            $(this).siblings("input").attr('checked',false);
            $(this).remove();
        });
    });*/


    $(".layerTabTitle li").click(function () {
        $(this).addClass("active").siblings().removeClass("active");
        var index = $(".layerTabTitle li").index(this);
        $(".layerWrap1").eq(index).show().siblings().hide();
        if ($(".layerTabTitle li:first-child").hasClass("active") && IntelligentRoadTest.systemTip) {
            $(".gpsModal").show();
            IntelligentRoadTest.systemTip = false;
        }
    });
    /*DT、点、多边形导入图层*/
    $(".defined-tabTitle li").click(function () {
        $(this).addClass("active").siblings().removeClass("active");
        var index = $(".defined-tabTitle li").index(this);
        $(".definedInfo").eq(index).show().siblings().hide();
    });

//	上传文件
    $("#addFile").click(function () {
        $("#upfile").click(); //自动触发点击事件
    });
//  统计导出按钮点击事件，默认跳转到关注区域的统计列表
    $("#exportData").click(function () {
        IntelligentRoadTest.gotoChartPage("扇区");
        IntelligentRoadTest.editImgSrc($(this));
    });

    $("#cancelDealBone").click(function () {
        if (IntelligentRoadTest.wantDealBone != null) {
            IntelligentRoadTest.boneAreaDelete(IntelligentRoadTest.wantDealBone, false); //不执行更新但是恢复原有的状态
        }
        IntelligentRoadTest.wantDealBone = null;
        $("#modal-boneArea").hide();
    });

    $("#sureDeleteConcern").click(function () {
        if (IntelligentRoadTest.wantDeleteConcern != null) {
            IntelligentRoadTest.concernAreaDelete(IntelligentRoadTest.wantDeleteConcern);
        }
        $("#modal-concernArea").hide();
        IntelligentRoadTest.wantDeleteConcern = null;//删除后重置对象
    });

    $("#sureDealBone").click(function () {
        if (IntelligentRoadTest.wantDealBone != null) {
            IntelligentRoadTest.boneAreaDelete(IntelligentRoadTest.wantDealBone, true);
        }
        IntelligentRoadTest.wantDealBone = null;
        $("#modal-boneArea").hide(); //隐藏模态框
    });

    // $("#SystemLayerSelect").change(function(){
    //     if($(this).val()=='请选择'){
    //     	$("#sureSaveAsSystemLayer").hide(); //隐藏确定按钮
    //     }else{
    //     	$("#sureSaveAsSystemLayer").show(); //显示确定按钮
    //     }
    // });

    $(".modal-tabTitle li").click(function () {
        $(this).addClass("active").siblings().removeClass("active");
        var index = $(".modal-tabTitle li").index($(this));
        $(".tab-info").eq(index).show().siblings().hide();
    });
    $(".leftTabInfo li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
    });
    $(".rightTabInfo li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
    });
    $(".btn-toLeft").click(function () {
        $('.rightTabInfo li.selected').remove()
    });
    $(".btn-toRight").click(function () {
        var rightText = $(".tab-info:visible .leftTabInfo li.selected").text();
        var has = false;
        //判断右边li的值是否有重复的
        $('.tab-info:visible .rightTabInfo li').each(function () {
            if ($(this).text() == rightText) {
                has = true;
            }
        });
        if (!has) {  //如果右边li的值没有有重复的就把左边li的值添加到右边li
            var leftText = $(".tab-info:visible .leftTabInfo li.selected").text();
            $(".tab-info:visible .rightTabInfo ul").append("<li>" + leftText + "</li>")
            $(".rightTabInfo li").click(function () {
                $(this).addClass("selected").siblings().removeClass("selected");
            });
        }
    });

    // 延时加载，等待IntelligentRoadTest.handleDistrictJson方法执行，防止图层加载出来了，地图再次进行定位，导致地图中心点不在图层所在的范围
    var gogoPageTimer = setInterval(function () {
        if (IntelligentRoadTest.handleDistrictJsonIsComplete) {
            clearInterval(gogoPageTimer);
            IntelligentGoToPage.gotoPoorPage(IntelligentRoadTest);
            /*setTimeout(function(){
                IntelligentGoToPage.gotoPoorPage(IntelligentRoadTest);
            },1000)*/
        }
    }, 1000)


    $(".rowDiv li").click(function () {
        var clickElementID = $(this).attr("id");
        IntelligentRoadTest.removeMetorOverlay();
        IntelligentRoadTest.removeOsmOverlay();
        if(IntelligentRoadTest.city == "全省" || IntelligentRoadTest.cityPermission_common == "全省"){
            // IntelligentRoadTest.roadCurrentQueryCity = "广州";
            IntelligentRoadTest.city = $("#mapCity").text();
            IntelligentRoadTest.district = $("#mapDistrict").text();
        }else if(IntelligentRoadTest.cityPermission_common != '全省' && isNull(IntelligentRoadTest.countryPermission_common)){ //地市用户
            IntelligentRoadTest.city = IntelligentRoadTest.cityPermission_common;
            if($("#mapCity").text() != IntelligentRoadTest.cityPermission_common){ //当前地图不在所属地市
                IntelligentRoadTest.district = IntelligentRoadTest.cityFirstCountryObj[IntelligentRoadTest.cityPermission_common];//获取默认的区县
            }else{
                IntelligentRoadTest.district = $("#mapDistrict").text();
            }
        }else{ //区县用户只能看到自己区县的数据
            IntelligentRoadTest.city = IntelligentRoadTest.cityPermission_common;
            IntelligentRoadTest.district = IntelligentRoadTest.countryPermission_common;
        }
        //清除高铁的线路数据
        if(IntelligentRoadTest.railContinueLineUtil != null){
            IntelligentRoadTest.railContinueLineUtil.clearCanvasLayers();
        }
        //如果隧道聚合有对象，则将聚合点进行清除
        if(IntelligentRoadTest.railMarkerClusterer){
            IntelligentRoadTest.railMarkerClusterer.clearMarkers();
            IntelligentRoadTest.MarkerResultArr = [];
        }

        if(IntelligentRoadTest.railLineUtil != null){
            IntelligentRoadTest.railLineUtil.clearCanvasLayers();
        }
        if (IntelligentRoadTest.searchTxtTmp.length == 0) {
            var mapCity = $("#mapCity").text();
            var mapDistrict = $("#mapDistrict").text();

            IntelligentRoadTest.searchTxtTmp.push(mapCity);
            IntelligentRoadTest.searchTxtTmp.push(mapDistrict);
        }

        IntelligentRoadTest.showBaiduMap();//显示百度地图

        //进入类目时，如果是勾选上了显示附近覆盖，则需要去掉勾选
        if(IntelligentRoadTest.showNrCover){
            // IntelligentRoadTest.cancelNrCover();
            // IntelligentRoadTest.showNrCover = false;
            $('#showNrCheckbox').attr('checked',false);
            $('#showNrCheckbox').trigger("change");
        }


        IntelligentRoadTest.clickFlag = true;
        changeSearchPlaceholder();//改变搜索框的文本提示
        showOrHideInputImage(2);//显示加载图标
        $(".listTopUl,.listDivWrap").show();
        $(".listInfo").slideDown().siblings().hide();
        $(".searchTitle").slideUp();
        // var index = $(".rowDiv li").index($(this)); //index，表示图标的位置， 0 表示弱区 、 1表示关注区域  2表示工单  3.扇区  4表示DT列表
        // $(".listInfo .listDiv").eq(index).show().siblings().hide();
        // $(".listInfo .listDiv").eq(index).find(".listWrap").slideDown("slow").siblings(".detailList").hide();

        if (clickElementID == "poorAreaLogo" || clickElementID == "downLowSpeedLogo" || clickElementID == "upLowSpeedLogo"
            || clickElementID == "m3PoorAreaLogo" || clickElementID == "cbPoorAreaLogo" || clickElementID == "olPoorAreaLogo") {
            if (clickElementID == "poorAreaLogo") {
                IntelligentRoadTest.poorAreaObj = IntelligentRoadTest.poorArea;
            } else if (clickElementID == "downLowSpeedLogo") {
                IntelligentRoadTest.poorAreaObj = IntelligentRoadTest.dwPoorArea;
            } else if (clickElementID == "upLowSpeedLogo") {
                IntelligentRoadTest.poorAreaObj = IntelligentRoadTest.upPoorArea;
            } else if (clickElementID == "m3PoorAreaLogo") {
                IntelligentRoadTest.poorAreaObj = IntelligentRoadTest.m3PoorArea;
            } else if (clickElementID == "cbPoorAreaLogo") {
                IntelligentRoadTest.poorAreaObj = IntelligentRoadTest.cbPoorArea;
            } else if (clickElementID == "olPoorAreaLogo") {
                IntelligentRoadTest.poorAreaObj = IntelligentRoadTest.olPoorArea;
            }
            IntelligentRoadTest.searchSenceTxtTmp = IntelligentRoadTest.poorAreaObj.typeName;
            $("#poorAreaCityName").text(IntelligentRoadTest.city);
            $("#poorAreaDistrictName").text(IntelligentRoadTest.district);
            var city = $("#poorAreaCityName").text();
            var district = $("#poorAreaDistrictName").text();
            IntelligentRoadTest.goPoorAreaList();
            // $("#poorAreaCount").hide();
            IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
            if (IntelligentRoadTest.rfgCurrentSelectConditon == "") {
                showOrHideInputImage(2);
                IntelligentRoadTest.loadmktCenterAreaTableData(IntelligentRoadTest.city, IntelligentRoadTest.district, null, IntelligentRoadTest.day, null);
            } else {
                var condition = "" + IntelligentRoadTest.day + city + district + IntelligentRoadTest.poorAreaObj.type;
                if (condition == IntelligentRoadTest.rfgCurrentSelectConditon) {//无需重新查询数据
                    console.log("无需重新查询数据");
                    IntelligentRoadTest.rfgCurrentResult = IntelligentRoadTest.rfgResult;
                    var SelectName = $("#rfgListSelectName").text();
                    var flexCol = $("#rfgList  .flexRow .flexCol");
                    IntelligentRoadTest.triggleFilter(SelectName, flexCol);
                } else {
                    showOrHideInputImage(2);
                    if (IntelligentRoadTest.rfgVM != null) {
                        IntelligentRoadTest.rfgVM.poorAreaList = null;//重置
                    }
                    IntelligentRoadTest.loadmktCenterAreaTableData(IntelligentRoadTest.city, IntelligentRoadTest.district, null, IntelligentRoadTest.day, null);
                }
            }
            var timer = setInterval(function () {
                if (IntelligentRoadTest.rfgVM != null && IntelligentRoadTest.rfgVM.poorAreaList != null) {
                    // $("#poorAreaCount").html("返回上一级(" + $("#poorAreaCountMessage").text() + ")");
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.rfgVM.poorAreaList);
                    clearInterval(timer);
                    showOrHideInputImage(1);
                    if (IntelligentRoadTest.rfgVM.poorAreaList.length == 0) {
                        $(".searchTitle").slideUp();
                    }
                    IntelligentRoadTest.updateSearchTmpTxt();
                }
            }, 500);
        } else if (clickElementID == "concernAreaLogo") {
            IntelligentRoadTest.searchSenceTxtTmp = " 关注区域";
            IntelligentRoadTest.goConcernAreaList();
            $("#concernAreaCount").hide();
            $("#concernAreaCityName").text(IntelligentRoadTest.city);
            var city = $("#concernAreaCityName").text();
            if(!isNull(IntelligentRoadTest.countryPermission_common)){ //区县用户不可以看全市
                $("#concernAreaDistrictName").text(IntelligentRoadTest.countryPermission_common);
            }
            // var district = $("#poorAreaDistrictName").text();
            IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
            if (IntelligentRoadTest.concernAreaCurrentSelectConditon == "") {
                showOrHideInputImage(2);
                IntelligentRoadTest.queryAllConcernArea();
            } else {
                var condition = "" + city;
                if (condition == IntelligentRoadTest.concernAreaCurrentSelectConditon) {//无需重新查询数据
                    console.log("无需重新查询数据");
                } else {
                    showOrHideInputImage(2);
                    if (IntelligentRoadTest.concernAreaVM != null) {
                        IntelligentRoadTest.concernAreaVM.concernAreaList = null;
                    }
                    IntelligentRoadTest.queryAllConcernArea();
                }
            }
            var timer1 = setInterval(function () {
                if (IntelligentRoadTest.concernAreaVM != null && IntelligentRoadTest.concernAreaVM.concernAreaList != null) {
                    //$("#concernAreaCount").html("返回上一级(" + $("#concernAreaCountMessage").text() + ")");
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.concernAreaVM.concernAreaList, 1);
                    clearInterval(timer1);
                    showOrHideInputImage(1);
                    IntelligentRoadTest.updateSearchTmpTxt();
                }
            }, 500);

        } else if (clickElementID == "alarmInfoLogo") {
            IntelligentRoadTest.searchSenceTxtTmp = " 工单";
            IntelligentRoadTest.goAlarmInfoList();
            $("#alarmCityName").text(IntelligentRoadTest.city);
            var city = $("#alarmCityName").text();
            $("#alarmInfoCount").hide();
            IntelligentRoadTest.updateSearchTmpTxtByRowdiv();

            // IntelligentRoadTest.day = new Date().Format("yyyyMMdd");//这句谁加的？这样会导致日期与空间不一致

            if (IntelligentRoadTest.alarmInfoCurrentSelectConditon == "") {
                showOrHideInputImage(2);
                IntelligentRoadTest.loadAlarmInfoTableData(new Date(dealDateString(IntelligentRoadTest.day).getTime() - 6 * 24 * 60 * 60 * 1000).Format("yyyyMMdd")
                    , IntelligentRoadTest.day, IntelligentRoadTest.city, "", null);
            } else {
                var condition = "" + IntelligentRoadTest.day + city;
                if (condition == IntelligentRoadTest.alarmInfoCurrentSelectConditon) {//无需重新查询数据
                    console.log("无需重新查询数据");
                } else {
                    showOrHideInputImage(2);
                    if (IntelligentRoadTest.alarmInfoVM != null) {
                        IntelligentRoadTest.alarmInfoVM.alarmInfoList = null;
                    }
                    IntelligentRoadTest.loadAlarmInfoTableData(new Date(dealDateString(IntelligentRoadTest.day).getTime() - 6 * 24 * 60 * 60 * 1000).Format("yyyyMMdd")
                        , IntelligentRoadTest.day, IntelligentRoadTest.city, "", null);
                }
            }
            var timer2 = setInterval(function () {
                if (IntelligentRoadTest.alarmInfoVM != null && IntelligentRoadTest.alarmInfoVM.alarmInfoList != null) {
                    //工单打点
                    //$("#alarmInfoCount").html("返回上一级(" + $("#alarmInfoCountMessage").text() + ")");
                    IntelligentRoadTest.loadAlarmMk(IntelligentRoadTest.alarmInfoVM.alarmInfoList);
                    clearInterval(timer2);
                    showOrHideInputImage(1);
                    IntelligentRoadTest.updateSearchTmpTxt();
                }
            }, 500);

        } else if (clickElementID == "sectorLogo" || clickElementID == "MOD3InterfereLogo" || clickElementID == "acrossCoverAreaLogo"
            || clickElementID == "overlapCoverAreaLogo") {

            if (clickElementID == "MOD3InterfereLogo") {
                IntelligentRoadTest.sectorObj = IntelligentRoadTest.m3Sector;
            } else if (clickElementID == "acrossCoverAreaLogo") {
                IntelligentRoadTest.sectorObj = IntelligentRoadTest.cbSector;
            } else if (clickElementID == "overlapCoverAreaLogo") {
                IntelligentRoadTest.sectorObj = IntelligentRoadTest.olSector;
            } else {
                IntelligentRoadTest.sectorObj = IntelligentRoadTest.normalSector;
            }
            IntelligentRoadTest.searchSenceTxtTmp = IntelligentRoadTest.sectorObj.typeName;
            IntelligentRoadTest.goSectorList();
            $("#sectorCityName").text(IntelligentRoadTest.city);
            $("#sectorDistrictName").text(IntelligentRoadTest.district);
            var city = $("#sectorCityName").text();
            var district = $("#sectorDistrictName").text();
            $("#sectorCount").hide();
            IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
            if (IntelligentRoadTest.sectorCurrentSelectConditon == "") {
                showOrHideInputImage(2);
                IntelligentRoadTest.loadSectorData();
            } else {
                var condition = "" + IntelligentRoadTest.day + city + district + IntelligentRoadTest.sectorObj.typeName;
                if (condition == IntelligentRoadTest.sectorCurrentSelectConditon) {//无需重新查询数据
                    console.log("无需重新查询数据");
                } else {
                    showOrHideInputImage(2);
                    if (IntelligentRoadTest.sectorVM != null) {
                        IntelligentRoadTest.sectorVM.sectorList = null;
                    }
                    IntelligentRoadTest.loadSectorData();
                }
            }
            var timer3 = setInterval(function () {
                if (IntelligentRoadTest.sectorVM != null && IntelligentRoadTest.sectorVM.sectorList != null) {
                    // $("#sectorCount").html("返回上一级(" + $("#sectorCountMessage").text() + ")");
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.sectorVM.sectorList, 3);
                    clearInterval(timer3);
                    showOrHideInputImage(1);
                    IntelligentRoadTest.updateSearchTmpTxt();
                }
            }, 500);
        } else if (clickElementID == "dtLogo") {
            IntelligentRoadTest.searchSenceTxtTmp = " dt";
            IntelligentRoadTest.goDtList();
            $("#dtCount").hide();
            //$("#DTCityName").text(IntelligentRoadTest.city)
            var city = $("#DTCityName").text();
            IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
            if (IntelligentRoadTest.dtCurrentSelectConditon == "") {
                showOrHideInputImage(2);
                IntelligentRoadTest.initDTData();
            } else {
                var condition = "" + city;
                if (condition == IntelligentRoadTest.dtCurrentSelectConditon) {//无需重新查询数据
                    console.log("无需重新查询数据");
                } else {
                    showOrHideInputImage(2);
                    if (IntelligentRoadTest.dtVM != null) {
                        IntelligentRoadTest.dtVM.dtList = null;
                    }
                    IntelligentRoadTest.initDTData();
                }
            }
            var timer4 = setInterval(function () {
                if (IntelligentRoadTest.dtVM != null && IntelligentRoadTest.dtVM.dtList != null) {
                    // $("#dtCount").html("返回上一级(" + $("#dtCountMessage").text() + ")");
                    clearInterval(timer4);
                    showOrHideInputImage(1);
                    IntelligentRoadTest.updateSearchTmpTxt();
                }
            }, 500);

        } else if (clickElementID == "boneLogo") {
            IntelligentRoadTest.searchSenceTxtTmp = " 骨头区域";
            IntelligentRoadTest.goBoneList();
            $("#boneAreaCount").hide();
            $("#boneCityName").text(IntelligentRoadTest.city)
            var city = $("#boneCityName").text();
            if(!isNull(IntelligentRoadTest.countryPermission_common)){ //区县用户不可以看全市
                $("#boneDistrictName").text(IntelligentRoadTest.countryPermission_common);
            }
            IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
            if (IntelligentRoadTest.boneAreaCurrentSelectConditon == "") {
                showOrHideInputImage(2);
                IntelligentRoadTest.queryAllBoneArea();
            } else {
                var month = IntelligentRoadTest.day.substring(0, 6);
                var condition = "" + city + month;
                if (condition == IntelligentRoadTest.boneAreaCurrentSelectConditon) {//无需重新查询数据
                    console.log("无需重新查询数据");
                } else {
                    showOrHideInputImage(2);
                    if (IntelligentRoadTest.boneAreaVM != null) {
                        IntelligentRoadTest.boneAreaVM.boneAreaList = null;
                    }
                    IntelligentRoadTest.queryAllBoneArea();
                }
            }
            var timer5 = setInterval(function () {
                if (IntelligentRoadTest.boneAreaVM != null && IntelligentRoadTest.boneAreaVM.boneAreaList != null) {
                    // $("#boneAreaCount").html("返回上一级(" + $("#boneAreaCountMessage").text() + ")");
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.boneAreaVM.boneAreaList, 5);
                    clearInterval(timer5);
                    showOrHideInputImage(1);
                    IntelligentRoadTest.updateSearchTmpTxt();
                }
            }, 500);

        } else if (clickElementID == "macSectorLogo") {
            IntelligentRoadTest.searchSenceTxtTmp = " 宏扇区";
            IntelligentRoadTest.goMacSectorList();
            $("#macSectorCount").hide();
            $("#macSectorCityName").text(IntelligentRoadTest.city)
            var city = $("#macSectorCityName").text();
            if(!isNull(IntelligentRoadTest.countryPermission_common)){ //区县用户不可以看全市
                $("#macSectorDistrictName").text(IntelligentRoadTest.countryPermission_common);
            }
            IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
            if (IntelligentRoadTest.macSectorCurrentSelectConditon == "") {
                showOrHideInputImage(2);
                IntelligentRoadTest.loadMacSectorListData();
            } else {
                var condition = "" + IntelligentRoadTest.day + city;
                if (condition == IntelligentRoadTest.macSectorCurrentSelectConditon) {//无需重新查询数据
                    console.log("无需重新查询数据");
                } else {
                    showOrHideInputImage(2);
                    if (IntelligentRoadTest.macSectorVM != null) {
                        IntelligentRoadTest.macSectorVM.macSectorList = null;
                    }
                    IntelligentRoadTest.loadMacSectorListData();
                }
            }
            var timer6 = setInterval(function () {
                if (IntelligentRoadTest.macSectorVM != null && IntelligentRoadTest.macSectorVM.macSectorList != null) {
                    // $("#macSectorCount").html("返回上一级(" + $("#macSectorCountMessage").text() + ")");
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.macSectorVM.macSectorList, 6);
                    clearInterval(timer6);
                    showOrHideInputImage(1);
                    IntelligentRoadTest.updateSearchTmpTxt();
                }
            }, 500);

        } else if (clickElementID == "userComplainLogo") {
            // $("#weekStartTime").text($("#seachTime").text()); //进入用户抱怨列表时将时间设置为同样的日期
            IntelligentRoadTest.searchSenceTxtTmp = " 用户抱怨";
            IntelligentRoadTest.goUserComplainList();
            $("#userComplainCount").hide();
            showOrHideInputImage(2);
            IntelligentRoadTest.queryAllUserComplain(); //重查数据
            $("#userComplainCityName").text(IntelligentRoadTest.city)
            var city = $("#userComplainCityName").text();
            if(!isNull(IntelligentRoadTest.countryPermission_common)){ //区县用户不可以看全市
                $("#userComplainDistrictName").text(IntelligentRoadTest.countryPermission_common);
            }
            /*判断是否要重查数据*/
            /*if(){

            }else{
                showOrHideInputImage(1);
            }*/

        }
        // showOrHideInputImage(1);//隐藏加载中的图标
        //重设图层选项
        IntelligentRoadTest.resetLayerByIndex(IntelligentRoadTest.index);
    });

    /* 五高一地两美一场点击事件*/
    $(".rowUl li").click(function () {
        var elementId = $(this).attr("id");
        IntelligentRoadTest.removeMetorOverlay();
        IntelligentRoadTest.removeOsmOverlay();
        if(IntelligentRoadTest.city == "全省" || IntelligentRoadTest.cityPermission_common == "全省"){
            // IntelligentRoadTest.roadCurrentQueryCity = "广州";
            IntelligentRoadTest.city = $("#mapCity").text();
            IntelligentRoadTest.district = $("#mapDistrict").text();
        }else if(IntelligentRoadTest.cityPermission_common != '全省' && isNull(IntelligentRoadTest.countryPermission_common)){ //地市用户
            IntelligentRoadTest.city = IntelligentRoadTest.cityPermission_common;
            if($("#mapCity").text() != IntelligentRoadTest.cityPermission_common){ //当前地图不在所属地市
                IntelligentRoadTest.district = IntelligentRoadTest.cityFirstCountryObj[IntelligentRoadTest.cityPermission_common];//获取默认的区县
            }else{
                IntelligentRoadTest.district = $("#mapDistrict").text();
            }
        }else{ //区县用户只能看到自己区县的数据
            IntelligentRoadTest.city = IntelligentRoadTest.cityPermission_common;
            IntelligentRoadTest.district = IntelligentRoadTest.countryPermission_common;
        }
        //清除高铁的线路数据
        if(IntelligentRoadTest.railContinueLineUtil != null){
            IntelligentRoadTest.railContinueLineUtil.clearCanvasLayers();
        }
        if(IntelligentRoadTest.railLineUtil != null){
            IntelligentRoadTest.railLineUtil.clearCanvasLayers();
        }

        //如果隧道聚合有对象，则将聚合点进行清除
        if(IntelligentRoadTest.railMarkerClusterer){
            IntelligentRoadTest.railMarkerClusterer.clearMarkers();
            IntelligentRoadTest.MarkerResultArr = [];
        }

        //进入类目时，如果是勾选上了显示附近覆盖，则需要去掉勾选
        if(IntelligentRoadTest.showNrCover){
            // IntelligentRoadTest.cancelNrCover();
            // IntelligentRoadTest.showNrCover = false;
            $('#showNrCheckbox').attr('checked',false);
            $('#showNrCheckbox').trigger("change");
        }


        var index = $(".rowUl li").index($(this));
        var isContinue = true;
        if (elementId == "highwayLogo") {
            isContinue = IntelligentRoadTest.ifShowHighway;
            if (isContinue == false) {
                return;
            }
            if ($("#highwaySelectName").text() == "连片统计") { //如果列表是使用的是连片统计，则要将此属性设置为true
                IntelligentRoadTest.isLP = true;
                IntelligentRoadTest.highwayVM.type = true;
            }
            IntelligentRoadTest.osmType = 1;
//            IntelligentRoadTest.initColorBarAll();
            if (IntelligentRoadTest.isClickSector == false) {
                IntelligentRoadTest.isShowSector = false;
            } else {
                IntelligentRoadTest.isShowSector = true;
            }
        } else if (elementId == "railLogo") {
            isContinue = IntelligentRoadTest.ifShowRail;
            if (isContinue == false) {
                return;
            }
            IntelligentRoadTest.showBaiduMap();//显示百度地图
            if(IntelligentRoadTest.cityPermission_common == "全省"){ //高铁可以支持全省
                $("#railCityName").text("全省");
                IntelligentRoadTest.city = "全省";
                IntelligentRoadTest.roadCurrentQueryCity = "全省";
                IntelligentRoadTest.map.setZoom(8);
            }
            IntelligentRoadTest.osmType = 2;
            IntelligentRoadTest.isNeedCenterAndZoom = true; //是否需要缩放地图
            var textContent = $("#railListSelectName").text();// 用于判断当前列表显示的是哪个类型的高铁
            if(textContent == "<-110连片"){
                IntelligentRoadTest.roadStatus = 3;
                IntelligentRoadTest.isLP = true;
                IntelligentRoadTest.isSuiDao = false;
            }else if(textContent == "隧道"){
                IntelligentRoadTest.roadStatus = 1;
                IntelligentRoadTest.isLP = false;
                IntelligentRoadTest.isSuiDao = true;
            }else if(textContent == "非隧道"){
                IntelligentRoadTest.roadStatus = 2;
            }else{
                IntelligentRoadTest.roadStatus = 0;
            }
//            IntelligentRoadTest.initColorBarAll();
            if (IntelligentRoadTest.isClickSector == false) {
                IntelligentRoadTest.isShowSector = false;
            } else {
                IntelligentRoadTest.isShowSector = true;
            }
        } else if (elementId == "cityRoadLogo") {
            isContinue = IntelligentRoadTest.ifShowCityRoad;
            if (isContinue == false) {
                return;
            }
            IntelligentRoadTest.osmType = 3;
//            IntelligentRoadTest.initColorBarAll();
            if (IntelligentRoadTest.isClickSector == false) {
                IntelligentRoadTest.isShowSector = false;
            } else {
                IntelligentRoadTest.isShowSector = true;
            }
        } else if (elementId == "metroLogo") {
            isContinue = IntelligentRoadTest.ifShowMetro;
            if (isContinue == false) {
                return;
            }
//            IntelligentRoadTest.initColorBarAll();
            var currentCity = $("#metroCityName").text();
            $("#metroCityNameD").text(currentCity);
        }
        /*else if(elementId == 4){
            isContinue = IntelligentRoadTest.ifShowCollege;
        }else if(elementId == 5){
            isContinue = IntelligentRoadTest.ifShowSite;
        }else if(elementId == 6){
            isContinue = IntelligentRoadTest.ifShowUptown;
        }else if(index == 7){
            isContinue = IntelligentRoadTest.ifShowFood;
        }else if(elementId == 8){
            isContinue = IntelligentRoadTest.ifShowScenery;
        }else if(elementId == 9){
            isContinue = IntelligentRoadTest.ifShowBusiness;
        }else if(elementId == 10){
            isContinue = IntelligentRoadTest.ifShowWarwolf;
        }else if(elementId == 11){
            isContinue = IntelligentRoadTest.ifShowMarket;
        }*/
        if (isContinue == true) {

            if (IntelligentRoadTest.searchTxtTmp.length == 0) {
                var mapCity = $("#mapCity").text();
                var mapDistrict = $("#mapDistrict").text();

                IntelligentRoadTest.searchTxtTmp.push(mapCity);
                IntelligentRoadTest.searchTxtTmp.push(mapDistrict);
            }

            IntelligentRoadTest.clickFlag = false;
            $(".panelDiv,.coordinateType").slideUp().siblings(".listInfo").slideDown();
            var city = $("#mapCity").text().trim();

            // $(".listInfo .listDiv").eq(index+9).show().siblings().hide();
            // $(".listInfo .listDiv").eq(index+9).find(".listWrap").slideDown("slow").siblings(".detailList").hide();
            if (elementId == "highwayLogo") {

                if (IntelligentRoadTest.lineMessageOverlay) {
                    IntelligentRoadTest.lineMessageOverlay.remove();
                }
                if (IntelligentRoadTest.geoJsonLayer) {
                    IntelligentRoadTest.geoJsonLayer.clearLayers();
                }

                if (IntelligentRoadTest.splitLineGeoJsonLayer) {
                    IntelligentRoadTest.splitLineGeoJsonLayer.clearLayers();
                }
                if (IntelligentRoadTest.ContinueLineGeoJsonLayer) {
                    IntelligentRoadTest.ContinueLineGeoJsonLayer.clearLayers();
                }

                IntelligentRoadTest.searchSenceTxtTmp = " 高速";
                IntelligentRoadTest.index = 7;
                if(IntelligentRoadTest.roadCurrentQueryCity == "全省"){
                    IntelligentRoadTest.city = $("#highwayCityName").text();
                }
                IntelligentRoadTest.goHighwayFirstList();
                if (IntelligentRoadTest.highwayCurrentSelectConditon == "") {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.getRoadFirstListData(IntelligentRoadTest.city, IntelligentRoadTest.day,
                        1, false); //加载高速第一层列表
                } else {
                    var currentHighwayCity = IntelligentRoadTest.city;
                    var condition = "" + currentHighwayCity + IntelligentRoadTest.day;
                    if (condition == IntelligentRoadTest.highwayCurrentSelectConditon) {//无需重新查询数据
                        console.log("无需重新查询数据");
                    } else {
                        showOrHideInputImage(2);
                        if (IntelligentRoadTest.highwayVM != null) {
                            IntelligentRoadTest.highwayVM.highwayList = null;
                        }
                        IntelligentRoadTest.getRoadFirstListData(currentHighwayCity, IntelligentRoadTest.day,
                            1, IntelligentRoadTest.highwayVM.type); //加载高速第一层列表
                    }
                }
                $("#highwayCityName").text(IntelligentRoadTest.city);
                IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
                var timer = setInterval(function () {
                    if (IntelligentRoadTest.highwayVM != null && IntelligentRoadTest.highwayVM.highwayList != null) {
                        clearInterval(timer);
                        showOrHideInputImage(1);
                        //搜索标题更新
                        IntelligentRoadTest.searchTxtUpdate();
                    }
                }, 500);
                IntelligentRoadTest.showOsmMap();//显示osm地图
                var cityCenterPoint = OSMapUtil.getCityLocation(IntelligentRoadTest.city);
                IntelligentRoadTest.OsmMap.setView(cityCenterPoint, 11);
                // IntelligentRoadTest.OsmMap.setZoom(11);
//            IntelligentRoadTest.loadAllLineByLevel("广州",1,1000);//
//             IntelligentRoadTest.loadLineByLevelFromBounds();
            } else if (elementId == "railLogo") {

                if (IntelligentRoadTest.lineMessageOverlay) {
                    IntelligentRoadTest.lineMessageOverlay.remove();
                }
                if (IntelligentRoadTest.geoJsonLayer) {
                    IntelligentRoadTest.geoJsonLayer.clearLayers();
                }
                if (IntelligentRoadTest.splitLineGeoJsonLayer) {
                    IntelligentRoadTest.splitLineGeoJsonLayer.clearLayers();
                }
                if (IntelligentRoadTest.ContinueLineGeoJsonLayer) {
                    IntelligentRoadTest.ContinueLineGeoJsonLayer.clearLayers();
                }

                IntelligentRoadTest.searchSenceTxtTmp = " 高铁";
                IntelligentRoadTest.index = 8;
                IntelligentRoadTest.goRailFirstList();
                if (IntelligentRoadTest.railCurrentSelectConditon == "") {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.getRoadFirstListData(IntelligentRoadTest.city, IntelligentRoadTest.day,
                        2, false); //加载高铁第一层列表
                } else {
                    var currentRailCity = IntelligentRoadTest.city;
                    var condition = "" + currentRailCity + IntelligentRoadTest.day;
                    if (condition == IntelligentRoadTest.railCurrentSelectConditon) {//无需重新查询数据
                        console.log("无需重新查询数据");
                        if(IntelligentRoadTest.roadStatus == 1){
                            IntelligentRoadTest.showRoadSuiDaoData(IntelligentRoadTest.continueLineRailWayDataChe);
                        }else if(IntelligentRoadTest.roadStatus == 3){
                            IntelligentRoadTest.showRoadContinueData(IntelligentRoadTest.continueLineRailWayDataChe);
                        }
                    } else {
                        showOrHideInputImage(2);
                        if (IntelligentRoadTest.railVM != null) {
                            IntelligentRoadTest.railVM.railList = null;
                        }
                        IntelligentRoadTest.getRoadFirstListData(currentRailCity, IntelligentRoadTest.day,
                            2, IntelligentRoadTest.railVM.type); //加载高铁第一层列表
                    }
                }
                $("#railCityName").text(IntelligentRoadTest.city);
                IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
                var timer = setInterval(function () {
                    if (IntelligentRoadTest.railVM != null && IntelligentRoadTest.railVM.railList != null) {
                        clearInterval(timer);
                        showOrHideInputImage(1);

                        //搜索标题更新
                        IntelligentRoadTest.searchTxtUpdate();
                    }
                }, 500);
                // IntelligentRoadTest.showOsmMap();//显示osm地图  -------------------------------------这里暂时不显示OSM地图
                //var cityCenterPoint = OSMapUtil.getCityLocation(IntelligentRoadTest.city);
                //IntelligentRoadTest.OsmMap.panTo(cityCenterPoint);

                // IntelligentRoadTest.loadLineByLevelFromBounds();
//            IntelligentRoadTest.loadAllLineByLevel("广州",2,1000);//
            } else if (elementId == "cityRoadLogo") {
                if (IntelligentRoadTest.lineMessageOverlay) {
                    IntelligentRoadTest.lineMessageOverlay.remove();
                }
                if (IntelligentRoadTest.geoJsonLayer) {
                    IntelligentRoadTest.geoJsonLayer.clearLayers();
                }
                if (IntelligentRoadTest.splitLineGeoJsonLayer) {
                    IntelligentRoadTest.splitLineGeoJsonLayer.clearLayers();
                }
                if (IntelligentRoadTest.ContinueLineGeoJsonLayer) {
                    IntelligentRoadTest.ContinueLineGeoJsonLayer.clearLayers();
                }

                IntelligentRoadTest.searchSenceTxtTmp = " 市政路";
                IntelligentRoadTest.index = 14;
                if(IntelligentRoadTest.roadCurrentQueryCity == "全省"){
                    IntelligentRoadTest.city = $("#cityRoadCityName").text();
                }
                IntelligentRoadTest.goCityRoadFirstList();
                if (IntelligentRoadTest.cityRoadCurrentSelectConditon == "") {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.getRoadFirstListData(IntelligentRoadTest.city, IntelligentRoadTest.day,
                        3, false); //加载市政路第一层列表
                } else {
                    var currentCityRoadCity = IntelligentRoadTest.city;
                    var condition = "" + currentCityRoadCity + IntelligentRoadTest.day;
                    if (condition == IntelligentRoadTest.cityRoadCurrentSelectConditon) {//无需重新查询数据
                        console.log("无需重新查询数据");
                    } else {
                        showOrHideInputImage(2);
                        if (IntelligentRoadTest.cityRoadVM != null) {
                            IntelligentRoadTest.cityRoadVM.cityRoadList = null;
                        }
                        IntelligentRoadTest.getRoadFirstListData(currentCityRoadCity, IntelligentRoadTest.day,
                            3, IntelligentRoadTest.cityRoadVM.type); //加载市政路第一层列表
                    }
                }
                $("#cityRoadCityName").text(IntelligentRoadTest.city);
                IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
                var timer = setInterval(function () {
                    if (IntelligentRoadTest.cityRoadVM != null && IntelligentRoadTest.cityRoadVM.cityRoadList != null) {
                        clearInterval(timer);
                        showOrHideInputImage(1);

                        //搜索标题更新
                        IntelligentRoadTest.searchTxtUpdate();
                    }
                }, 500);
                IntelligentRoadTest.showOsmMap();//显示osm地图
                var cityCenterPoint = OSMapUtil.getCityLocation(IntelligentRoadTest.city);
                IntelligentRoadTest.OsmMap.panTo(cityCenterPoint);
                // IntelligentRoadTest.loadLineByLevelFromBounds();
//            IntelligentRoadTest.loadAllLineByLevel("广州",3,1000);//

            } else if (elementId == "metroLogo") {//地铁
                IntelligentRoadTest.searchSenceTxtTmp = " 地铁";
                IntelligentRoadTest.index = 15;
                IntelligentRoadTest.goMetroFirstList();
                IntelligentRoadTest.showBaiduMap();//显示百度地图
                if (IntelligentRoadTest.metroCurrentSelectConditon == "") {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.getMetroStationsData(IntelligentRoadTest.city, IntelligentRoadTest.day, true);
                    IntelligentRoadTest.getMetroFirstListData(IntelligentRoadTest.city, IntelligentRoadTest.day);
                } else {
                    var currentMetroCity = IntelligentRoadTest.city;
                    var condition = "" + currentMetroCity + IntelligentRoadTest.day;
                    if (condition == IntelligentRoadTest.metroCurrentSelectConditon) {//无需重新查询数据
                        // console.log("无需重新查询数据");
                        // IntelligentRoadTest.dealMetroStationsData(IntelligentRoadTest.metroData); //将缓存中的地铁线路的线路展示出来
                        showOrHideInputImage(2);
                        if (IntelligentRoadTest.metroVM != null) {
                            IntelligentRoadTest.metroVM.metroList = null;
                        }
                        IntelligentRoadTest.getMetroStationsData(currentMetroCity, IntelligentRoadTest.day, true);
                        IntelligentRoadTest.getMetroFirstListData(IntelligentRoadTest.city, IntelligentRoadTest.day);
                    } else {
                        showOrHideInputImage(2);
                        if (IntelligentRoadTest.metroVM != null) {
                            IntelligentRoadTest.metroVM.metroList = null;
                        }
                        IntelligentRoadTest.getMetroStationsData(currentMetroCity, IntelligentRoadTest.day, true);
                        IntelligentRoadTest.getMetroFirstListData(IntelligentRoadTest.city, IntelligentRoadTest.day);
                    }
                }
                $("#metroCityName").text(IntelligentRoadTest.city);
                IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
                var timer = setInterval(function () {
                    if (IntelligentRoadTest.metroVM != null && IntelligentRoadTest.metroVM.metroList != null) {
                        clearInterval(timer);
                        showOrHideInputImage(1);

                        //搜索标题更新
                        IntelligentRoadTest.searchTxtUpdate();
                    }
                }, 500);

            } else if (elementId == "collegeLogo") {
                IntelligentRoadTest.searchSenceTxtTmp = " 高校";
                IntelligentRoadTest.index = 10;

                IntelligentRoadTest.showBaiduMap();//显示百度地图

                IntelligentRoadTest.goCollegeList();
                $("#collegeCityName").text(IntelligentRoadTest.city);
                IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
                if (IntelligentRoadTest.collegeCurrentSelectConditon == "") {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.getSenseDataByObjectId(1, city, IntelligentRoadTest.day);
                } else {
                    var currentCollegeCity = $("#collegeCityName").text().trim();
                    var condition = "" + currentCollegeCity + IntelligentRoadTest.day;
                    if (condition == IntelligentRoadTest.collegeCurrentSelectConditon) {//无需重新查询数据
                        console.log("无需重新查询数据");
                    } else {
                        showOrHideInputImage(2);
                        if (IntelligentRoadTest.collegeVM != null) {
                            IntelligentRoadTest.collegeVM.collegeList = null;
                        }
                        IntelligentRoadTest.getSenseDataByObjectId(1, currentCollegeCity, IntelligentRoadTest.day);
                    }
                }
                var timer = setInterval(function () {
                    if (IntelligentRoadTest.collegeVM != null && IntelligentRoadTest.collegeVM.collegeList != null) {
                        IntelligentRoadTest.drawMk(IntelligentRoadTest.collegeVM.collegeList, 10);//
                        clearInterval(timer);
                        showOrHideInputImage(1);

                        //搜索标题更新
                        IntelligentRoadTest.searchTxtUpdate();
                    }
                }, 500);
            } else if (elementId == "siteLogo") {
                IntelligentRoadTest.searchSenceTxtTmp = "场馆";
                IntelligentRoadTest.goSiteList();
                IntelligentRoadTest.index = 19;

                IntelligentRoadTest.showBaiduMap();//显示百度地图

                $("#siteCityName").text(IntelligentRoadTest.city);
                IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
                if (IntelligentRoadTest.siteCurrentSelectConditon == "") {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.getSenseDataByObjectId(10, city, IntelligentRoadTest.day);
                } else {
                    var siteCity = $("#siteCityName").text().trim();
                    var condition = "" + siteCity + IntelligentRoadTest.day;
                    if (condition == IntelligentRoadTest.siteCurrentSelectConditon) {//无需重新查询数据
                        console.log("无需重新查询数据");
                    } else {
                        showOrHideInputImage(2);
                        if (IntelligentRoadTest.siteVM != null) {
                            IntelligentRoadTest.siteVM.siteList = null;
                        }
                        IntelligentRoadTest.getSenseDataByObjectId(10, siteCity, IntelligentRoadTest.day);
                    }
                }
                var timer = setInterval(function () {
                    if (IntelligentRoadTest.siteVM != null && IntelligentRoadTest.siteVM.siteList != null) {
                        IntelligentRoadTest.drawMk(IntelligentRoadTest.siteVM.siteList, 19);//
                        clearInterval(timer);
                        showOrHideInputImage(1);

                        //搜索标题更新
                        IntelligentRoadTest.searchTxtUpdate();
                    }
                }, 500);

            } else if (elementId == "uptownLogo") {
                IntelligentRoadTest.searchSenceTxtTmp = " 高密度住宅区";
                IntelligentRoadTest.goUptownList();
                IntelligentRoadTest.index = 9;

                IntelligentRoadTest.showBaiduMap();//显示百度地图

                $("#uptownCityName").text(IntelligentRoadTest.city);
                IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
                if (IntelligentRoadTest.uptownCurrentSelectConditon == "") {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.getSenseDataByObjectId(2, city, IntelligentRoadTest.day);
                } else {
                    var uptownCity = $("#uptownCityName").text().trim();
                    var condition = "" + uptownCity + IntelligentRoadTest.day;
                    if (condition == IntelligentRoadTest.uptownCurrentSelectConditon) {//无需重新查询数据
                        console.log("无需重新查询数据");
                    } else {
                        showOrHideInputImage(2);
                        if (IntelligentRoadTest.uptownVM != null) {
                            IntelligentRoadTest.uptownVM.uptownList = null;
                        }
                        IntelligentRoadTest.getSenseDataByObjectId(2, uptownCity, IntelligentRoadTest.day);
                    }
                }
                var timer = setInterval(function () {
                    if (IntelligentRoadTest.uptownVM != null && IntelligentRoadTest.uptownVM.uptownList != null) {
                        IntelligentRoadTest.drawMk(IntelligentRoadTest.uptownVM.uptownList, 9);//
                        clearInterval(timer);
                        showOrHideInputImage(1);

                        //搜索标题更新
                        IntelligentRoadTest.searchTxtUpdate();
                    }
                }, 500);
            } else if (elementId == "foodLogo") {
                IntelligentRoadTest.searchSenceTxtTmp = "美食";
                IntelligentRoadTest.goFoodList();
                IntelligentRoadTest.index = 18;

                IntelligentRoadTest.showBaiduMap();//显示百度地图

                $("#foodCityName").text(IntelligentRoadTest.city);
                IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
                if (IntelligentRoadTest.foodCurrentSelectConditon == "") {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.getSenseDataByObjectId(9, city, IntelligentRoadTest.day);
                } else {
                    var foodCity = $("#foodCityName").text().trim();
                    var condition = "" + foodCity + IntelligentRoadTest.day;
                    if (condition == IntelligentRoadTest.foodCurrentSelectConditon) {//无需重新查询数据
                        console.log("无需重新查询数据");
                    } else {
                        showOrHideInputImage(2);
                        if (IntelligentRoadTest.foodVM != null) {
                            IntelligentRoadTest.foodVM.foodList = null;
                        }
                        IntelligentRoadTest.getSenseDataByObjectId(9, foodCity, IntelligentRoadTest.day);
                    }
                }
                var timer = setInterval(function () {
                    if (IntelligentRoadTest.foodVM != null && IntelligentRoadTest.foodVM.foodList != null) {
                        IntelligentRoadTest.drawMk(IntelligentRoadTest.foodVM.foodList, 18);//
                        clearInterval(timer);
                        showOrHideInputImage(1);

                        //搜索标题更新
                        IntelligentRoadTest.searchTxtUpdate();
                    }
                }, 500);

            } else if (elementId == "sceneryLogo") {
                IntelligentRoadTest.searchSenceTxtTmp = " 美景";
                IntelligentRoadTest.index = 12;
                IntelligentRoadTest.goSceneryList();
                IntelligentRoadTest.showBaiduMap();//显示百度地图

                $("#sceneryName").text(IntelligentRoadTest.city);
                IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
                if (IntelligentRoadTest.sceneryCurrentSelectConditon == "") {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.getSenseDataByObjectId(7, city, IntelligentRoadTest.day);
                } else {
                    var currentSceneryCity = $("#sceneryName").text().trim();
                    var condition = "" + currentSceneryCity + IntelligentRoadTest.day;
                    if (condition == IntelligentRoadTest.sceneryCurrentSelectConditon) {//无需重新查询数据
                        console.log("无需重新查询数据");
                    } else {
                        showOrHideInputImage(2);
                        if (IntelligentRoadTest.sceneryVM != null) {
                            IntelligentRoadTest.sceneryVM.sceneryList = null;
                        }
                        IntelligentRoadTest.getSenseDataByObjectId(7, currentSceneryCity, IntelligentRoadTest.day);
                    }
                }

                var timer = setInterval(function () {
                    if (IntelligentRoadTest.sceneryVM != null && IntelligentRoadTest.sceneryVM.sceneryList != null) {
                        IntelligentRoadTest.drawMk(IntelligentRoadTest.sceneryVM.sceneryList, 12);//
                        clearInterval(timer);
                        showOrHideInputImage(1);

                        //搜索标题更新
                        IntelligentRoadTest.searchTxtUpdate();
                    }
                }, 500);
            } else if (elementId == "businessLogo") {
                IntelligentRoadTest.searchSenceTxtTmp = " 高流量商务区";
                IntelligentRoadTest.index = 11;
                IntelligentRoadTest.showBaiduMap();//显示百度地图
                IntelligentRoadTest.goBusinessList();

                $("#businessCityName").text(IntelligentRoadTest.city);
                IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
                if (IntelligentRoadTest.businessCurrentSelectConditon == "") {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.getSenseDataByObjectId(3, city, IntelligentRoadTest.day);
                } else {
                    var currentBusinessCity = $("#businessCityName").text().trim();
                    var condition = "" + currentBusinessCity + IntelligentRoadTest.day;
                    if (condition == IntelligentRoadTest.businessCurrentSelectConditon) {//无需重新查询数据
                        console.log("无需重新查询数据");
                    } else {
                        showOrHideInputImage(2);
                        if (IntelligentRoadTest.businessVM != null) {
                            IntelligentRoadTest.businessVM.businessList = null;
                        }
                        IntelligentRoadTest.getSenseDataByObjectId(3, currentBusinessCity, IntelligentRoadTest.day);
                    }
                }
                var timer = setInterval(function () {
                    if (IntelligentRoadTest.businessVM != null && IntelligentRoadTest.businessVM.businessList != null) {
                        IntelligentRoadTest.drawMk(IntelligentRoadTest.businessVM.businessList, 11);//
                        clearInterval(timer);
                        showOrHideInputImage(1);

                        //搜索标题更新
                        IntelligentRoadTest.searchTxtUpdate();
                    }
                }, 500);
            } else if (elementId == "warwolfLogo") {
                IntelligentRoadTest.searchSenceTxtTmp = "战狼区域";
                IntelligentRoadTest.index = 16;
                IntelligentRoadTest.showBaiduMap();//显示百度地图
                IntelligentRoadTest.goWarwolfList();

                $("#warwolfCityName").text(IntelligentRoadTest.city);
                IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
                if (IntelligentRoadTest.warwolfCurrentSelectConditon == "") {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.getWarwolfListData(IntelligentRoadTest.day, city, 3);
                } else {
                    var currentWarwolfCity = $("#warwolfCityName").text().trim();
                    var condition = "" + currentWarwolfCity + IntelligentRoadTest.day;
                    if (condition == IntelligentRoadTest.warwolfCurrentSelectConditon) {//无需重新查询数据
                        console.log("无需重新查询数据");
                    } else {
                        showOrHideInputImage(2);
                        if (IntelligentRoadTest.warwolfVM != null) {
                            IntelligentRoadTest.warwolfVM.warwolfList = null;
                        }
                        IntelligentRoadTest.getWarwolfListData(IntelligentRoadTest.day, currentWarwolfCity, 3);
                    }
                }
                var timer = setInterval(function () {
                    if (IntelligentRoadTest.warwolfVM != null && IntelligentRoadTest.warwolfVM.warwolfList != null) {
                        IntelligentRoadTest.drawMk(IntelligentRoadTest.warwolfVM.warwolfList, 11);//
                        clearInterval(timer);
                        showOrHideInputImage(1);

                        //搜索标题更新
                        IntelligentRoadTest.searchTxtUpdate();
                    }
                }, 500);
            } else if (elementId == "marketLogo") {
                IntelligentRoadTest.searchSenceTxtTmp = " 农贸市场";
                IntelligentRoadTest.index = 17;
                IntelligentRoadTest.showBaiduMap();//显示百度地图
                IntelligentRoadTest.goMarketList();

                $("#marketCityName").text(IntelligentRoadTest.city);
                IntelligentRoadTest.updateSearchTmpTxtByRowdiv();
                if (IntelligentRoadTest.marketCurrentSelectConditon == "") {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.getSenseDataByObjectId(8, city, IntelligentRoadTest.day);
                } else {
                    var currentMarketCity = $("#marketCityName").text().trim();
                    var condition = "" + currentMarketCity + IntelligentRoadTest.day;
                    if (condition == IntelligentRoadTest.marketCurrentSelectConditon) {//无需重新查询数据
                        console.log("无需重新查询数据");
                    } else {
                        showOrHideInputImage(2);
                        if (IntelligentRoadTest.marketVM != null) {
                            IntelligentRoadTest.marketVM.marketList = null;
                        }
                        IntelligentRoadTest.getSenseDataByObjectId(8, currentMarketCity, IntelligentRoadTest.day);
                    }
                }
                var timer = setInterval(function () {
                    if (IntelligentRoadTest.marketVM != null && IntelligentRoadTest.marketVM.marketList != null) {
                        IntelligentRoadTest.drawMk(IntelligentRoadTest.marketVM.marketList, 17);//
                        clearInterval(timer);
                        showOrHideInputImage(1);

                        //搜索标题更新
                        IntelligentRoadTest.searchTxtUpdate();
                    }
                }, 500);
            }

            IntelligentRoadTest.resetLayerByIndex(IntelligentRoadTest.index);
        }

        if (elementId == "cityVillagesLogo") {
            IntelligentRoadTest.searchSenceTxtTmp = "城中村";
            IntelligentRoadTest.senseObject = IntelligentRoadTest.cityVillage; //将城中村的对象赋值给senseObject
            IntelligentRoadTest.index = IntelligentRoadTest.senseObject.index;
            IntelligentRoadTest.doQuerySense(city);
            IntelligentRoadTest.resetLayerByIndex(IntelligentRoadTest.index);
        } else if (elementId == "schoolLogo") {
            IntelligentRoadTest.searchSenceTxtTmp = "中小学";
            IntelligentRoadTest.senseObject = IntelligentRoadTest.school; //将中小学的对象赋值给senseObject
            IntelligentRoadTest.index = IntelligentRoadTest.senseObject.index;
            IntelligentRoadTest.doQuerySense(city);
            IntelligentRoadTest.resetLayerByIndex(IntelligentRoadTest.index);
        } else if (elementId == "naturalVillageLogo") {
            IntelligentRoadTest.searchSenceTxtTmp = "自然村";
            IntelligentRoadTest.senseObject = IntelligentRoadTest.village; //将自然村的对象赋值给senseObject
            IntelligentRoadTest.index = IntelligentRoadTest.senseObject.index;
            IntelligentRoadTest.doQuerySense(city);
            IntelligentRoadTest.resetLayerByIndex(IntelligentRoadTest.index);
        } else if (elementId == "factoryLogo") {
            IntelligentRoadTest.searchSenceTxtTmp = "工厂";
            IntelligentRoadTest.senseObject = IntelligentRoadTest.factory; //将工厂的对象赋值给senseObject
            IntelligentRoadTest.index = IntelligentRoadTest.senseObject.index;
            IntelligentRoadTest.doQuerySense(city);
            IntelligentRoadTest.resetLayerByIndex(IntelligentRoadTest.index);
        }
    });

    //-----------------高速高铁市政路的切换500米和连片的事件开始 ------------------
    $("#highway500M").click(function () {
        var city = $("#highwayCityName").text();
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#highwaySelectName").html("500米分段统计");
        $("#highwayList").hide();
        IntelligentRoadTest.isLp = false;
        IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day, 1, false);
    });

    $("#highwayLP").click(function () {
        IntelligentRoadTest.isLp = true;
        var city = $("#highwayCityName").text();
        $("#highwaySelectName").html("连片统计");
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#highwayList").hide();
        IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day, 1, true);
    });

    $("#rail500M").click(function () {
        IntelligentRoadTest.roadStatus = 0; //高铁的场景分类，0表示综合 、 1表示隧道 、 2表示非隧道 3表示<-110连段
        IntelligentRoadTest.isLp = false;
        IntelligentRoadTest.isSuiDao = false;
        IntelligentRoadTest.railVM.type = false;
        if(IntelligentRoadTest.railContinueLineUtil != null){
            IntelligentRoadTest.railContinueLineUtil.clearCanvasLayers(); //清除连片的地图线路
        }

        //如果隧道聚合有对象，则将聚合点进行清除
        if(IntelligentRoadTest.railMarkerClusterer){
            IntelligentRoadTest.railMarkerClusterer.clearMarkers();
            IntelligentRoadTest.MarkerResultArr = [];
        }

        var city = $("#railCityName").text();
        $("#railListSelectName").html("综合");
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#railList").hide();
        IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day, 2, false);
    });

    $("#railLP").click(function () {
        IntelligentRoadTest.roadStatus = 3;
        IntelligentRoadTest.isLp = true;
        IntelligentRoadTest.isSuiDao = false;
        var city = $("#railCityName").text();
        $("#railListSelectName").html("<-110连段");
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#railList").hide();

        if(IntelligentRoadTest.railContinueLineUtil != null){
            IntelligentRoadTest.railContinueLineUtil.clearCanvasLayers(); //清除连片的地图线路
        }

        //如果隧道聚合有对象，则将聚合点进行清除
        if(IntelligentRoadTest.railMarkerClusterer){
            IntelligentRoadTest.railMarkerClusterer.clearMarkers();
            IntelligentRoadTest.MarkerResultArr = [];
        }

        //加载连片数据
        IntelligentRoadTest.queryContinueLine(city, 2, IntelligentRoadTest.day, true)


        IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day, 2, true);
    });

    $("#railSuiDao").click(function () {
        IntelligentRoadTest.roadStatus = 1;
        IntelligentRoadTest.isLp = false;
        IntelligentRoadTest.isSuiDao = true;
        IntelligentRoadTest.railVM.type = false;
        var city = $("#railCityName").text();
        $("#railListSelectName").html("隧道");
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#railList").hide();

        if(IntelligentRoadTest.railContinueLineUtil != null){
            IntelligentRoadTest.railContinueLineUtil.clearCanvasLayers(); //清除连片的地图线路
        }

        //如果隧道聚合有对象，则将聚合点进行清除
        if(IntelligentRoadTest.railMarkerClusterer){
            IntelligentRoadTest.railMarkerClusterer.clearMarkers();
            IntelligentRoadTest.MarkerResultArr = [];
        }

        //加载隧道数据
        IntelligentRoadTest.getRoadSuiDaoGisData(city,21);

        IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day, 2, false);//这个方法中有针对这个 IntelligentRoadTest.isSuiDao进行判断，并赋予真正的type
    });

    $("#railNoSuiDao").click(function () {
        IntelligentRoadTest.roadStatus = 2;
        IntelligentRoadTest.isLp = false;
        IntelligentRoadTest.isSuiDao = false;
        IntelligentRoadTest.railVM.type = false;
        var city = $("#railCityName").text();
        $("#railListSelectName").html("非隧道");
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#railList").hide();

        if(IntelligentRoadTest.railContinueLineUtil != null){
            IntelligentRoadTest.railContinueLineUtil.clearCanvasLayers(); //清除连片的地图线路
        }

        //如果隧道聚合有对象，则将聚合点进行清除
        if(IntelligentRoadTest.railMarkerClusterer){
            IntelligentRoadTest.railMarkerClusterer.clearMarkers();
            IntelligentRoadTest.MarkerResultArr = [];
        }

        //加载隧道数据
        IntelligentRoadTest.getRoadSuiDaoGisData(city,21);

        IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day, 2, false );//这个方法中有针对这个 IntelligentRoadTest.isSuiDao进行判断，并赋予真正的type
    });

    $("#cityRoad500M").click(function () {
        IntelligentRoadTest.isLp = false;
        var city = $("#cityRoadCityName").text();
        $("#cityRoadSelectName").html("500米分段统计");
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#cityRoadList").hide();
        IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day, 3, false);
    });

    $("#cityRoadLP").click(function () {
        IntelligentRoadTest.isLp = true;
        var city = $("#cityRoadCityName").text();
        $("#cityRoadSelectName").html("连片统计");
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#cityRoadList").hide();
        IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day, 3, true);
    });


    //-----------------高速高铁市政路的切换500米和连片的事件结束 ------------------


    //-----------------高速高铁市政路的返回按钮事件开始 ------------------
    $("#highwayListCount").click(function () { //高速二级列表返回按钮
        IntelligentRoadTest.second = false;
        IntelligentRoadTest.goHighwayFirstList();
        IntelligentRoadTest.osmColorLegen();
        // IntelligentRoadTest.showBoundsLineDataFromHbase(IntelligentRoadTest.osmLineData, undefined, IntelligentRoadTest.osmType);
        IntelligentRoadTest.OsmMap.setZoom(11);
        if (IntelligentRoadTest.splitLineGeoJsonLayer) {
            IntelligentRoadTest.splitLineGeoJsonLayer.clearLayers();
        }
    });

    $("#highwayCount").click(function () { //高速详情页返回按钮
        if (IntelligentRoadTest.index == 2) { //在工单则直接返回工单列表
            IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
            IntelligentRoadTest.isShowAlarmInfoMessage = false;
            IntelligentRoadTest.goAlarmInfoList();
            return;
        }
        if (IntelligentRoadTest.isSkip == false) {
            IntelligentRoadTest.goHighwaySecondList();
            IntelligentRoadTest.OsmMap.setZoom(13);
            IntelligentRoadTest.showSplitLineData(IntelligentRoadTest.splitLineData);
            var isLP = IntelligentRoadTest.highwayVM.type;
            if (isLP) {
                //过滤出该条高速的连片数据 IntelligentRoadTest.continueLineHighWayDataChe总的数据，不可改
                var highwayData = crossfilter(IntelligentRoadTest.continueLineHighWayDataChe); //创建一个crossfilter对象
                var highwayDataLineIDDim = highwayData.dimension(function (d) {
                    return d.road_id;
                }); //按照线路id创建一个维度
                var finalLineData = highwayDataLineIDDim.filter(IntelligentRoadTest.road_id);
                IntelligentRoadTest.highwaySecondListMapResult = finalLineData.top(highwayData.size());
                IntelligentRoadTest.showContinueLineData(IntelligentRoadTest.highwaySecondListMapResult);
            } else {

            }
        } else {
            IntelligentRoadTest.isSkip = false;
            IntelligentRoadTest.goHighwayFirstList();
            IntelligentRoadTest.showBoundsLineDataFromHbase(IntelligentRoadTest.osmLineData, undefined, IntelligentRoadTest.osmType);
            IntelligentRoadTest.OsmMap.setZoom(11);
            var isLP = IntelligentRoadTest.highwayVM.type;
            if (isLP) {
                //过滤出该条高速的连片数据 IntelligentRoadTest.continueLineHighWayDataChe总的数据，不可改
                var highwayData = crossfilter(IntelligentRoadTest.continueLineHighWayDataChe); //创建一个crossfilter对象
                var highwayDataLineIDDim = highwayData.dimension(function (d) {
                    return d.road_id;
                }); //按照线路id创建一个维度
                var finalLineData = highwayDataLineIDDim.filter(item.road_id);
                IntelligentRoadTest.highwaySecondListMapResult = finalLineData.top(highwayData.size());
                IntelligentRoadTest.showContinueLineData(IntelligentRoadTest.highwaySecondListMapResult);
            } else {

            }
            if (IntelligentRoadTest.splitLineGeoJsonLayer) {
                IntelligentRoadTest.splitLineGeoJsonLayer.clearLayers();
            }
        }
        IntelligentRoadTest.hideDetailsMk();
        IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
        IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
    });

    $("#railListCount").click(function () {
        IntelligentRoadTest.goRailFirstList();
        IntelligentRoadTest.roadCurrentQueryCity = $("#railCityName").text(); //返回时需要将当前查询的地市切换为列表的地市
        if(IntelligentRoadTest.map.getZoom() == 8){
            IntelligentRoadTest.loadLineByLevelFromBounds();
        }else{
            IntelligentRoadTest.map.setZoom(8);
        }

        if($("#railListSelectName").text() != $("#railSecondListSelectName").text()){ //说明第二层切换了场景
            IntelligentRoadTest.checkShowWitchType($("#railSecondListSelectName").text());
            return;
        }
        if(IntelligentRoadTest.roadStatus == 0){
            IntelligentRoadTest.osmColorLegen();
        }else{
            if(IntelligentRoadTest.roadStatus == 1 || IntelligentRoadTest.roadStatus == 2){
                IntelligentRoadTest.showRoadSuiDaoData(IntelligentRoadTest.continueLineRailWayDataChe);
            }else{
                IntelligentRoadTest.showRoadContinueData(IntelligentRoadTest.continueLineRailWayDataChe);
            }
        }
        // IntelligentRoadTest.showBoundsLineDataFromHbase(IntelligentRoadTest.osmLineData, undefined, IntelligentRoadTest.osmType);
        if (IntelligentRoadTest.splitLineGeoJsonLayer) {
            IntelligentRoadTest.splitLineGeoJsonLayer.clearLayers();
        }
    });

    $("#railCount").click(function () {
        if (IntelligentRoadTest.index == 2) { //在工单则直接返回工单列表
            IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
            IntelligentRoadTest.isShowAlarmInfoMessage = false;
            IntelligentRoadTest.goAlarmInfoList();
            return;
        }
        if (IntelligentRoadTest.isSkip == false) {
            IntelligentRoadTest.roadIndex = 2;
            IntelligentRoadTest.goRailSecondList();
            IntelligentRoadTest.map.setZoom(10);
            IntelligentRoadTest.osmColorLegen();
            // IntelligentRoadTest.showSplitLineData(IntelligentRoadTest.splitLineData);
            var isLP = IntelligentRoadTest.railVM.type;
            if(IntelligentRoadTest.roadStatus == 3){//连片
                isLP = true;
            }
            if (isLP || IntelligentRoadTest.roadStatus == 1 || IntelligentRoadTest.roadStatus == 2) {
                //过滤出该条高铁的连片数据 IntelligentRoadTest.continueLineRailWayDataChe总的数据，不可改
                var railData = crossfilter(IntelligentRoadTest.continueLineRailWayDataChe); //创建一个crossfilter对象
                var railDataLineIDDim = railData.dimension(function (d) {
                    return d.road_id;
                }); //按照线路id创建一个维度
                var finalLineData = railDataLineIDDim.filter(IntelligentRoadTest.road_id);
                IntelligentRoadTest.railSecondListMapResult = finalLineData.top(railData.size());
                // IntelligentRoadTest.showContinueLineData(IntelligentRoadTest.railSecondListMapResult);
                if(isLP){
                    IntelligentRoadTest.showRoadContinueData(IntelligentRoadTest.railSecondListMapResult);
                }else{
                    IntelligentRoadTest.showRoadSuiDaoData(IntelligentRoadTest.railSecondListMapResult);
                }
            } else {

            }
        } else {
            IntelligentRoadTest.isSkip = false
            IntelligentRoadTest.goRailFirstList();
            IntelligentRoadTest.map.setZoom(11);
            IntelligentRoadTest.osmColorLegen();
            // IntelligentRoadTest.showBoundsLineDataFromHbase(IntelligentRoadTest.osmLineData, undefined, IntelligentRoadTest.osmType);
            if (IntelligentRoadTest.splitLineGeoJsonLayer) {
                IntelligentRoadTest.splitLineGeoJsonLayer.clearLayers();
            }
        }
        IntelligentRoadTest.hideStartEndMarker();
        IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
        IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
    });

    $("#cityRoadListCount").click(function () {
        IntelligentRoadTest.showBoundsLineDataFromHbase(IntelligentRoadTest.osmLineData, undefined, IntelligentRoadTest.osmType);
        IntelligentRoadTest.OsmMap.setZoom(11);
        IntelligentRoadTest.goCityRoadFirstList();
        if (IntelligentRoadTest.splitLineGeoJsonLayer) {
            IntelligentRoadTest.splitLineGeoJsonLayer.clearLayers();
        }
    });

    $("#cityRoadCount").click(function () {
        if (IntelligentRoadTest.index == 2) { //在工单则直接返回工单列表
            IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
            IntelligentRoadTest.isShowAlarmInfoMessage = false;
            IntelligentRoadTest.goAlarmInfoList();
            return;
        }
        if (IntelligentRoadTest.isSkip == false) {
            IntelligentRoadTest.OsmMap.setZoom(13);
            IntelligentRoadTest.showSplitLineData(IntelligentRoadTest.splitLineData);
            IntelligentRoadTest.goCityRoadSecondList();
            var isLP = IntelligentRoadTest.cityRoadVM.type;
            if (isLP) {
                //过滤出该条市政路的连片数据 IntelligentRoadTest.continueLineCityRoadDataChe总的数据，不可改
                var cityRoadData = crossfilter(IntelligentRoadTest.continueLineCityRoadDataChe); //创建一个crossfilter对象
                var cityRoadDataLineIDDim = cityRoadData.dimension(function (d) {
                    return d.road_id;
                }); //按照线路id创建一个维度
                var finalLineData = cityRoadDataLineIDDim.filter(IntelligentRoadTest.road_id);
                IntelligentRoadTest.cityRoadSecondListMapResult = finalLineData.top(cityRoadData.size());
                IntelligentRoadTest.showContinueLineData(IntelligentRoadTest.cityRoadSecondListMapResult);
            } else {

            }
        } else {
            IntelligentRoadTest.isSkip == false;
            IntelligentRoadTest.goCityRoadFirstList();
            IntelligentRoadTest.showBoundsLineDataFromHbase(IntelligentRoadTest.osmLineData, undefined, IntelligentRoadTest.osmType);
            IntelligentRoadTest.OsmMap.setZoom(11);
            if (IntelligentRoadTest.splitLineGeoJsonLayer) {
                IntelligentRoadTest.splitLineGeoJsonLayer.clearLayers();
            }
        }
        IntelligentRoadTest.hideDetailsMk();
        IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
        IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
    });

    $("#highwayGridCount").click(function () { // 20米详情页点击返回
        IntelligentRoadTest.isClickGrid = false;
        if (IntelligentRoadTest.currentLocation == "highway") {
            IntelligentRoadTest.goHighwayCompleteMessage();
            var isLP = false;
            if (IntelligentRoadTest.highwayVM) {
                isLP = IntelligentRoadTest.highwayVM.type;
            }
            //再补一个查询详情页的方法
            if (IntelligentRoadTest.highwayCompleteVM != null) {
                var highwayData = IntelligentRoadTest.highwayCompleteVM.highwayData;
                IntelligentRoadTest.getRoadCompleteMessageByLineID(highwayData.line_id, IntelligentRoadTest.day, 1,
                    highwayData.city, highwayData.road_id, isLP);
                IntelligentRoadTest.getRoad30DayData(IntelligentRoadTest.road_id, highwayData.line_id, 1, isLP); //查询历史30天的数据
            }
            if (isLP == false) {
                IntelligentRoadTest.sevenLineEchart.resize();
            }

        } else if (IntelligentRoadTest.second == true) {
            IntelligentRoadTest.goHighwaySecondList();
        } else {
            IntelligentRoadTest.goHighwayFirstList();
        }
        IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
        IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
        IntelligentRoadTest.drawDetailsMk(IntelligentRoadTest.osmMkData, 1);
        IntelligentRoadTest.osmMkData = null;
    });
    $("#railGridCount").click(function () { // 20米详情页点击返回
        IntelligentRoadTest.isClickGrid = false;
        IntelligentRoadTest.hide20MStartEndMarker();//清除20米线段的起止点
        if (IntelligentRoadTest.currentLocation == "rail") {
            IntelligentRoadTest.goRailCompleteMessage();
            var isLP = IntelligentRoadTest.railVM.type;
            //再补一个查询详情页的方法
            if (IntelligentRoadTest.railCompleteVM != null) {
                var railData = IntelligentRoadTest.railCompleteVM.railData;
                IntelligentRoadTest.getRoadCompleteMessageByLineID(railData.line_id, IntelligentRoadTest.day, 2,
                    railData.city, railData.road_id, isLP);
                IntelligentRoadTest.getRoad30DayData(IntelligentRoadTest.road_id, railData.line_id, 2, isLP); //查询历史30天的数据
            }
            if (isLP == false) {
                IntelligentRoadTest.sevenLineEchart.resize();
            }

        } else if (IntelligentRoadTest.second == true) {
            IntelligentRoadTest.goRailSecondList();
        } else {
            IntelligentRoadTest.goRailFirstList();
        }
        // IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
        // IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
        // IntelligentRoadTest.drawDetailsMk(IntelligentRoadTest.osmMkData, 1);
        IntelligentRoadTest.osmMkData = null;
    });
    $("#cityRoadGridCount").click(function () { // 20米详情页点击返回
        IntelligentRoadTest.isClickGrid = false;
        if (IntelligentRoadTest.currentLocation == "cityRoad") {
            IntelligentRoadTest.goCityRoadCompleteMessage();
            var isLP = IntelligentRoadTest.cityRoadVM.type;
            //再补一个查询详情页的方法
            if (IntelligentRoadTest.cityRoadCompleteVM != null) {
                var cityRoadData = IntelligentRoadTest.cityRoadCompleteVM.cityRoadData;
                IntelligentRoadTest.getRoadCompleteMessageByLineID(cityRoadData.line_id, IntelligentRoadTest.day, 3,
                    cityRoadData.city, cityRoadData.road_id, isLP);
                IntelligentRoadTest.getRoad30DayData(IntelligentRoadTest.road_id, cityRoadData.line_id, 3, isLP); //查询历史30天的数据
            }
            if (isLP == false) {
                IntelligentRoadTest.sevenLineEchart.resize();
            }
        } else if (IntelligentRoadTest.second == true) {
            IntelligentRoadTest.goCityRoadSecondList();
        } else {
            IntelligentRoadTest.goCityRoadFirstList();
        }
        IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
        IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
        IntelligentRoadTest.drawDetailsMk(IntelligentRoadTest.osmMkData, 1);
        IntelligentRoadTest.osmMkData = null;
    });

    //-----------------高速高铁市政路的返回按钮事件结束 ------------------

    //---------------地铁切换正向反向和综合指标的事件
    $("#metroAll").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#metroType").html("综合指标");
        IntelligentRoadTest.metroType = 2;
        IntelligentRoadTest.metroClick(IntelligentRoadTest.currentMetroLineItem, 1);
        IntelligentRoadTest.metroVM.goNextList(IntelligentRoadTest.currentMetroLineItem, null);
        IntelligentRoadTest.metroColorLegen();
        $("#metroTypeList").hide();
    });

    $("#mertroZheng").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#metroType").html("正向指标");
        IntelligentRoadTest.metroType = 1;
        IntelligentRoadTest.metroClick(IntelligentRoadTest.currentMetroLineItem, 1);
        IntelligentRoadTest.metroVM.goNextList(IntelligentRoadTest.currentMetroLineItem, null);
        IntelligentRoadTest.metroColorLegen();
        $("#metroTypeList").hide();
    });

    $("#mertroFan").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#metroType").html("反向指标");
        IntelligentRoadTest.metroType = -1;
        IntelligentRoadTest.metroClick(IntelligentRoadTest.currentMetroLineItem, 1);
        IntelligentRoadTest.metroVM.goNextList(IntelligentRoadTest.currentMetroLineItem, null);
        IntelligentRoadTest.metroColorLegen();
        $("#metroTypeList").hide();
    });

    //-----------------地铁的返回按钮事件开始 ------------------
    $("#metroListCount").click(function () {
        //返回一级列表
        IntelligentRoadTest.removeMetorLineStarEndMk();
        IntelligentRoadTest.metroType = 2;
        $('.colorBar-info').show();
        IntelligentRoadTest.second = false;
        IntelligentRoadTest.goMetroFirstList();
        try {//重新绘制一级列表时的地图地铁
            IntelligentRoadTest.initColorBarAll();
            IntelligentRoadTest.metroColorLegen();
//             IntelligentRoadTest.dealMetroStationsData(IntelligentRoadTest.allMetroDataObj[IntelligentRoadTest.metroType+""] , 1);
            IntelligentRoadTest.map.centerAndZoom(IntelligentRoadTest.metorZoomAndCenter.oneLevel.center, IntelligentRoadTest.metorZoomAndCenter.oneLevel.zoom);
        } catch (e) {
        }
    });

    $("#metroCount").click(function () {
        //返回二级列表
        //清除TA的圆形覆盖物
        IntelligentRoadTest.clearAllCircle();
        IntelligentRoadTest.removeMetorLineStarEndMk();
        $('.colorBar-info').show();
        if (IntelligentRoadTest.isSkip == false) {
            IntelligentRoadTest.goMetroSecondList();
        } else {
            IntelligentRoadTest.isSkip = false;
            IntelligentRoadTest.goMetroFirstList();
        }
        if (IntelligentRoadTest.canvasTaSectorLayer != null && IntelligentRoadTest.canvasTaSectorLayer.fromSectorOption != null) {
            IntelligentRoadTest.canvasTaSectorLayer.fromSectorOption.isShow = false;
        }
        if (IntelligentRoadTest.canvasTaSectorLayer != null && IntelligentRoadTest.canvasTaSectorLayer.toSectorOption != null) {
            IntelligentRoadTest.canvasTaSectorLayer.toSectorOption.isShow = false;
        }
        try {
            //重新绘制二级级列表时的地图地铁
            IntelligentRoadTest.initColorBarAll();
            // IntelligentRoadTest.dealMetroStationsData(IntelligentRoadTest.lineData,1);
            // IntelligentRoadTest.showAll78Line(IntelligentRoadTest.lineData,IntelligentRoadTest.metroIndex,IntelligentRoadTest.metroType);
            IntelligentRoadTest.metroColorLegen();
            IntelligentRoadTest.map.centerAndZoom(IntelligentRoadTest.metorZoomAndCenter.second.center, IntelligentRoadTest.metorZoomAndCenter.second.zoom);
            for (var i = 0; i < IntelligentRoadTest.metroStationsSctionOverlay.length; i++) {
                IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metroStationsSctionOverlay[i]);
            }
            IntelligentRoadTest.metroStationsSctionOverlay = [];
        } catch (e) {
        }
    });
    //78米详情页返回
    $("#metro78LineCount").click(function () {
        IntelligentRoadTest.removeMetorLineStarEndMk();
        if(IntelligentRoadTest.metroForwardIn78MeterLine == true){
            //直接从第一层跳到78米详情页需要返回第一层
            IntelligentRoadTest.metroType = 2;
            $('.colorBar-info').show();
            IntelligentRoadTest.second = false;
            IntelligentRoadTest.goMetroFirstList();
            //重新绘制一级列表时的地图地铁
            IntelligentRoadTest.initColorBarAll();
            IntelligentRoadTest.metroColorLegen();
            IntelligentRoadTest.map.centerAndZoom(IntelligentRoadTest.metorZoomAndCenter.oneLevel.center, IntelligentRoadTest.metorZoomAndCenter.oneLevel.zoom);
        }else{
            IntelligentRoadTest.goMetroCompleteMessage();
            IntelligentRoadTest.sevenLineEchart.resize();
            IntelligentRoadTest.metorLineStarEndMk(IntelligentRoadTest.metorStarPoint, IntelligentRoadTest.metorEndPoint);
//            IntelligentRoadTest.map.setZoom(13);
            IntelligentRoadTest.map.centerAndZoom(IntelligentRoadTest.metorZoomAndCenter.threeLevel.center, IntelligentRoadTest.metorZoomAndCenter.threeLevel.zoom);
        }

    });

    //-----------------地铁的返回按钮事件结束 -----------------
    function checkGoWhere(typeName) {
        if (IntelligentRoadTest.poorToSector == true) {
            IntelligentRoadTest.goPoorAreaCompleteMessage();
            IntelligentRoadTest.poorToSector = false;
        } else {
            if (typeName == "sector") {
                IntelligentRoadTest.goAlarmInfoList();
            } else if (typeName == "poorArea") {
                IntelligentRoadTest.goPoorAreaCompleteMessage();
            } else if (typeName == "college") {
                IntelligentRoadTest.goCollegeCompleteMessage();
            } else if (typeName == "scenery") {
                IntelligentRoadTest.goSceneryCompleteMessage();
            } else if (typeName == "site") {
                IntelligentRoadTest.goSiteCompleteMessage();
            } else if (typeName == "uptown") {
                IntelligentRoadTest.goUptownCompleteMessage();
            } else if (typeName == "business") {
                IntelligentRoadTest.goBusinessCompleteMessage();
            } else if (typeName == "food") {
                IntelligentRoadTest.goFoodCompleteMessage();
            } else if (typeName == "market") {
                IntelligentRoadTest.goMarketCompleteMessage();
            } else if (typeName == "warwolf") {
                IntelligentRoadTest.goWarwolfCompleteMessage();
            } else if (typeName == "highway") {
                IntelligentRoadTest.goHighwayCompleteMessage();
            } else if (typeName == "rail") {
                IntelligentRoadTest.goRailCompleteMessage();
            } else if (typeName == "cityRoad") {
                IntelligentRoadTest.goCityRoadCompleteMessage();
            } else if (typeName == "metro") {
                IntelligentRoadTest.goMetroCompleteMessage();
            } else if (typeName == "school" || typeName == "cityVillage" || typeName == "village" || typeName == "factory") { //返回新增的场景的详情页
                IntelligentRoadTest.goSenseCompleteMessage();
            }
        }
        setTimeout(function () {
            $('.positionClass').find("img").attr("src", "../js/IntelligentRoadTest/images/hideP.png");
            $('.positionClass').removeClass("showBtn");
            try {
                IntelligentRoadTest.map.centerAndZoom(IntelligentRoadTest.messageCenterAndZoom.center, IntelligentRoadTest.messageCenterAndZoom.zoom);
            } catch (e) {
            }
            for (var i = 0; i < IntelligentRoadTest.polygon.length; i++) {
                IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.polygon[i]);
                //注销
                var itemData = {
                    obj_type: IntelligentRoadTest.polygon[i].obj_type,
                    pointsString: null,
                    type: 2,
                    decide: 1,
                    obj_id: IntelligentRoadTest.polygon[i].obj_id,
                    day: IntelligentRoadTest.polygon[i].day
                };
                IntelligentRoadTest.logOutPolygonToLayer(itemData);
            }
            IntelligentRoadTest.resizeEcharts();

        }, 500);
    }

    $(".backList").click(function () {
        var state = 1;
        $('.positionClass').find("img").attr("src", "../js/IntelligentRoadTest/images/showP.png");
        $('.positionClass').addClass("showBtn");
        IntelligentRoadTest.isBackList = false;
        IntelligentRoadTest.mkIndex = null;
        if (IntelligentRoadTest.pred_amzuith_sector != null) { //如果预测扇区不为null，需要将其清除
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.pred_amzuith_sector);
            IntelligentRoadTest.pred_amzuith_sector = null;
        }
        //如果站间距的图层存在，则清除图层并将变量置空
        if (IntelligentRoadTest.sectorCircleCanvas != null) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.sectorCircleCanvas); //清除圆圈
            IntelligentRoadTest.sectorCircleCanvas = null;
        }
        IntelligentRoadTest.hideStartEndMarker(); //如果有高铁500详情页的起止点，清除掉
        IntelligentRoadTest.hide20MStartEndMarker();//如果有高铁的连片或者隧道的起止点，清除掉
//    	IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.cacheSearchMk);
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.searchMk);
        IntelligentRoadTest.clearAllCircle();//清除地铁的所有圆形和扇形
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.highLightPolyline);
        IntelligentRoadTest.hideSectorPoorLine(3);
        $(".linkCell").attr("title", "显示连线");
        $(".linkCell").removeClass("linkCellHover");
        IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
        IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
        IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
        IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
        IntelligentRoadTest.cleraAllZhuantiSectorAndLine();
        IntelligentRoadTest.hideCBPoorAreaNrTop5Sector();
        //清除编辑图层的多边形轮廓和线
        IntelligentRoadTest_SystemLayerEdit.clearActPolyline();
        IntelligentRoadTest_SystemLayerEdit.clearHisPolyline();
        IntelligentRoadTest_SystemLayerEdit.clearPolygon();
        IntelligentRoadTest_SystemLayerEdit.cancelSystemLayer();
        IntelligentRoadTest_SystemLayerEdit.clearAuditGisPolyline();
        IntelligentRoadTest_SystemLayerEdit.isEditPolygon = false;

//    	IntelligentRoadTest.mkIndex=null;
//    	IntelligentRoadTest.currentLocation=null;
        var gridUseLocation = IntelligentRoadTest.currentLocation; //专用于栅格返回的变量
        IntelligentRoadTest.gridArr = [];
        var elementId = $(this).attr("id");
        if (elementId != 'girdCount') {
            IntelligentRoadTest.polygonList = [];
        }
        if ($(this).text().indexOf("返回上一级") < 0) { //在详细页中
            IntelligentRoadTest.mapObjClick = false;
            $(".listTopUl,.listDivWrap").show();
            if (elementId == "poorAreaCount") {
                if (IntelligentRoadTest.index == 2) {//跳回工单列表
                    if (IntelligentRoadTest.isShowAlarmInfoMessage == false || IntelligentRoadTest.isShowAlarmInfoMessage == null) {
                        IntelligentRoadTest.goAlarmInfoList();
                    } else {
                        IntelligentRoadTest.poorAreaCahe = null;
                        IntelligentRoadTest.getPoorAreaByIdCahe = null; //为了点击返回之后再次点击之后有反应而设置的
                        IntelligentRoadTest.checkWhichSenseToGo();
                    }
                } else if (IntelligentRoadTest.index == 1 && IntelligentRoadTest.concernAreaCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goConcernAreaCompleteMessage();
                    IntelligentRoadTest.concernAreaVM.showMessage(IntelligentRoadTest.concernAreaCompleteVM.concernAreaData);
                } else if (IntelligentRoadTest.index == 3 && IntelligentRoadTest.sectorCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goSectorCompleteMessage();
                    IntelligentRoadTest.sectorVM.showMessage(IntelligentRoadTest.sectorCompleteVM.sectorData);
                } else if (IntelligentRoadTest.index == 4) {
                    IntelligentRoadTest.goDtList();
                } else if (IntelligentRoadTest.index == 5 && IntelligentRoadTest.boneAreaCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goBoneAreaCompleteMessage();
                    IntelligentRoadTest.boneAreaVM.showMessage(IntelligentRoadTest.boneAreaCompleteVM.boneAreaData);
                } else if (IntelligentRoadTest.index == 6) {
                    IntelligentRoadTest.goMacSectorList();
                } else if (IntelligentRoadTest.senseName == 'college' && IntelligentRoadTest.collegeCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goCollegeCompleteMessage();
                    IntelligentRoadTest.collegeVM.showMessage(IntelligentRoadTest.collegeCompleteVM.collegeData);
                } else if (IntelligentRoadTest.senseName == 'uptown' && IntelligentRoadTest.uptownCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goUptownCompleteMessage();
                    IntelligentRoadTest.uptownVM.showMessage(IntelligentRoadTest.uptownCompleteVM.uptownData);
                } else if (IntelligentRoadTest.senseName == 'scenery' && IntelligentRoadTest.sceneryCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goSceneryCompleteMessage();
                    IntelligentRoadTest.sceneryVM.showMessage(IntelligentRoadTest.sceneryCompleteVM.sceneryData);
                } else if (IntelligentRoadTest.senseName == 'business' && IntelligentRoadTest.businessCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goBusinessCompleteMessage();
                    IntelligentRoadTest.businessVM.showMessage(IntelligentRoadTest.businessCompleteVM.businessData);
                } else if (IntelligentRoadTest.senseName == 'warwolf' && IntelligentRoadTest.warwolfCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goWarwolfCompleteMessage();
                    IntelligentRoadTest.warwolfVM.showMessage(IntelligentRoadTest.warwolfCompleteVM.warwolfData);
                } else if (IntelligentRoadTest.senseName == 'market' && IntelligentRoadTest.marketCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goMarketCompleteMessage();
                    IntelligentRoadTest.marketVM.showMessage(IntelligentRoadTest.marketCompleteVM.marketData);
                } else if (IntelligentRoadTest.senseName == 'food' && IntelligentRoadTest.foodCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goFoodCompleteMessage();
                    IntelligentRoadTest.foodVM.showMessage(IntelligentRoadTest.foodCompleteVM.foodData);
                } else if (IntelligentRoadTest.senseName == 'site' && IntelligentRoadTest.siteCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goSiteCompleteMessage();
                    IntelligentRoadTest.siteVM.showMessage(IntelligentRoadTest.siteCompleteVM.siteData);
                } else {
                    IntelligentRoadTest.goPoorAreaList();
                    var city = $("#poorAreaCityName").text();
                    var district = $("#poorAreaDistrictName").text();
                    var condition = "" + IntelligentRoadTest.day + city + district + IntelligentRoadTest.poorAreaObj.type;
                    if (condition == IntelligentRoadTest.rfgCurrentSelectConditon) {//无需重新查询数据
                        console.log("无需重新查询数据");
                    } else {
                        showOrHideInputImage(2);
                        if (IntelligentRoadTest.rfgVM != null) {
                            IntelligentRoadTest.rfgVM.poorAreaList = null;//重置
                        }
                        if(!isNull(IntelligentRoadTest.countryPermission_common)){ //区县用户区县用户
                            IntelligentRoadTest.city = IntelligentRoadTest.cityPermission_common;
                            IntelligentRoadTest.district = IntelligentRoadTest.countryPermission_common;
                        }else if(IntelligentRoadTest.cityPermission_common != "全省" && isNull(IntelligentRoadTest.countryPermission_common)){ //地市用户
                            IntelligentRoadTest.city = IntelligentRoadTest.cityPermission_common;
                            IntelligentRoadTest.district = district;
                        }
                        IntelligentRoadTest.loadmktCenterAreaTableData(IntelligentRoadTest.city, IntelligentRoadTest.district, null, IntelligentRoadTest.day, null);
                    }
                }
            } else if (elementId == "concernAreaCount") {
                if (IntelligentRoadTest.index == 2) {//跳回工单列表
                    IntelligentRoadTest.goAlarmInfoList();
                } else if (IntelligentRoadTest.index == 0 && IntelligentRoadTest.rfgCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goPoorAreaCompleteMessage();
                    IntelligentRoadTest.rfgVM.showMessage(IntelligentRoadTest.rfgCompleteVM.poorAreaData);
                } else if (IntelligentRoadTest.index == 3 && IntelligentRoadTest.sectorCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goSectorCompleteMessage();
                    IntelligentRoadTest.sectorVM.showMessage(IntelligentRoadTest.sectorCompleteVM.sectorData);
                } else if (IntelligentRoadTest.index == 4) {
                    IntelligentRoadTest.goDtList();
                } else if (IntelligentRoadTest.index == 5 && IntelligentRoadTest.boneAreaCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goBoneAreaCompleteMessage();
                    IntelligentRoadTest.boneAreaVM.showMessage(IntelligentRoadTest.boneAreaCompleteVM.boneAreaData);
                } else if (IntelligentRoadTest.index == 6) {
                    IntelligentRoadTest.goMacSectorList();
                } else if (IntelligentRoadTest.senseName == 'college' && IntelligentRoadTest.collegeCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goCollegeCompleteMessage();
                    IntelligentRoadTest.collegeVM.showMessage(IntelligentRoadTest.collegeCompleteVM.collegeData);
                } else if (IntelligentRoadTest.senseName == 'uptown' && IntelligentRoadTest.uptownCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goUptownCompleteMessage();
                    IntelligentRoadTest.uptownVM.showMessage(IntelligentRoadTest.uptownCompleteVM.uptownData);
                } else if (IntelligentRoadTest.senseName == 'scenery' && IntelligentRoadTest.sceneryCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goSceneryCompleteMessage();
                    IntelligentRoadTest.sceneryVM.showMessage(IntelligentRoadTest.sceneryCompleteVM.sceneryData);
                } else if (IntelligentRoadTest.senseName == 'business' && IntelligentRoadTest.businessCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goBusinessCompleteMessage();
                    IntelligentRoadTest.businessVM.showMessage(IntelligentRoadTest.businessCompleteVM.businessData);
                } else if (IntelligentRoadTest.senseName == 'warwolf' && IntelligentRoadTest.warwolfCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goWarwolfCompleteMessage();
                    IntelligentRoadTest.warwolfVM.showMessage(IntelligentRoadTest.warwolfCompleteVM.warwolfData);
                } else if (IntelligentRoadTest.senseName == 'market' && IntelligentRoadTest.marketCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goMarketCompleteMessage();
                    IntelligentRoadTest.marketVM.showMessage(IntelligentRoadTest.marketCompleteVM.marketData);
                } else if (IntelligentRoadTest.senseName == 'food' && IntelligentRoadTest.foodCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goFoodCompleteMessage();
                    IntelligentRoadTest.foodVM.showMessage(IntelligentRoadTest.foodCompleteVM.foodData);
                } else if (IntelligentRoadTest.senseName == 'site' && IntelligentRoadTest.siteCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goSiteCompleteMessage();
                    IntelligentRoadTest.siteVM.showMessage(IntelligentRoadTest.siteCompleteVM.siteData);
                } else {
                    IntelligentRoadTest.goConcernAreaList();
                }
            } else if (elementId == "alarmInfoCount") {
                IntelligentRoadTest.goAlarmInfoList();
            } else if (elementId == "sectorCount") {
                //如果是在查看范围内的扇区时，直接隐藏扇区详情页
                if(IntelligentRoadTest.showNrCover == true){
                    //隐藏掉详情页
                    $("#sectorCount").hide();
                    $("#showSectorList .detailList").slideUp("slow");
                    IntelligentRoadTest.currentLocation = "";
                    return;
                }
                if (IntelligentRoadTest.isClickGrid == false) {
                    if (IntelligentRoadTest.index == 5) {
                        state = 0;
                        //-----------返回到骨头区域详情页（艳萍修改）--------方法名称:IntelligentRoadTest.showSectorMessageById---------------------
                        IntelligentRoadTest.goBoneAreaCompleteMessage();
                        try {
                            IntelligentRoadTest.isBackList = true;
                            IntelligentRoadTest.drawMk(IntelligentRoadTest.boneAreaVM.boneAreaList, 5);
                            IntelligentRoadTest.boneAreaVM.showMessage(IntelligentRoadTest.boneAreaCompleteVM.boneAreaData, IntelligentRoadTest.mkIndex);
                        } catch (e) {
                            // TODO: handle exception
                        }
                    } else if (IntelligentRoadTest.index == 0 || IntelligentRoadTest.index == 24 || IntelligentRoadTest.index == 25
                        || IntelligentRoadTest.index == 30 || IntelligentRoadTest.index == 31 || IntelligentRoadTest.index == 32) {
                        state = 0;
                        //-----------返回到弱区详情页（艳萍修改）--------方法名称:IntelligentRoadTest.showSectorMessageById---------------------
                        IntelligentRoadTest.goPoorAreaCompleteMessage();
                        try {
                            IntelligentRoadTest.isBackList = true;
                            IntelligentRoadTest.drawMk(IntelligentRoadTest.rfgVM.poorAreaList);
                            IntelligentRoadTest.rfgVM.showMessage(IntelligentRoadTest.rfgCompleteVM.poorAreaData, IntelligentRoadTest.mkIndex);
                        } catch (e) {
                            // TODO: handle exception
                        }
                    } else if (IntelligentRoadTest.index == 2) {
                        checkGoWhere(IntelligentRoadTest.clickSenseName);
                    } else if (IntelligentRoadTest.index == 1) {
                        state = 0;
                        //-----------返回关注区域详情页 --------方法名称:IntelligentRoadTest.showSectorMessageById---------------------
                        IntelligentRoadTest.goConcernAreaCompleteMessage();
                        try {
                            IntelligentRoadTest.isBackList = true;
                            IntelligentRoadTest.drawMk(IntelligentRoadTest.concernAreaVM.concernAreaList, 1);
                            IntelligentRoadTest.concernAreaVM.showMessage(IntelligentRoadTest.concernAreaCompleteVM.concernAreaData, IntelligentRoadTest.mkIndex);
                        } catch (e) {
                            // TODO: handle exception
                        }
                    } else if (IntelligentRoadTest.index == 6) {
                        //-----------返回到宏站列表-------------------
//                    	/区 4dt 5骨头 6宏扇区 7高速 8高铁 9高密度 10高校  11高流量商务 12美景 13框选骨头区域 14市政路
                        IntelligentRoadTest.goMacSectorList();
                    } else if (IntelligentRoadTest.senseName == "college") {
                        state = 0;
                        IntelligentRoadTest.goCollegeCompleteMessage();
                        try {
                            IntelligentRoadTest.isBackList = true;
                            IntelligentRoadTest.drawMk(IntelligentRoadTest.collegeVM.collegeList, 10);
                            IntelligentRoadTest.collegeVM.showMessage(IntelligentRoadTest.collegeCompleteVM.collegeData, IntelligentRoadTest.mkIndex);
                        } catch (e) {
                            // TODO: handle exception
                        }

                    } else if (IntelligentRoadTest.senseName == "school" || IntelligentRoadTest.senseName == "cityVillage"
                        || IntelligentRoadTest.senseName == "village" || IntelligentRoadTest.senseName == "factory") {
                        state = 0;
                        IntelligentRoadTest.goSenseCompleteMessage();
                        var typeIndex = null;
                        if (IntelligentRoadTest.senseObject != null) {
                            typeIndex = IntelligentRoadTest.senseObject.index;
                        }
                        try {
                            IntelligentRoadTest.isBackList = true;
                            IntelligentRoadTest.drawMk(IntelligentRoadTest.senseVM.senseList, typeIndex);
                            IntelligentRoadTest.senseVM.showMessage(IntelligentRoadTest.senseCompleteVM.seenseData, IntelligentRoadTest.mkIndex);
                        } catch (e) {
                            // TODO: handle exception
                        }

                    } else if (IntelligentRoadTest.senseName == "uptown") {
                        state = 0;
                        IntelligentRoadTest.goUptownCompleteMessage();
                        try {
                            IntelligentRoadTest.isBackList = true;
                            IntelligentRoadTest.drawMk(IntelligentRoadTest.uptownVM.uptownList, 9);
                            IntelligentRoadTest.uptownVM.showMessage(IntelligentRoadTest.uptownCompleteVM.uptownData, IntelligentRoadTest.mkIndex);
                        } catch (e) {
                            // TODO: handle exception
                        }
                    } else if (IntelligentRoadTest.senseName == "business") {
                        state = 0;
                        IntelligentRoadTest.goBusinessCompleteMessage();
                        try {
                            IntelligentRoadTest.isBackList = true;
                            IntelligentRoadTest.drawMk(IntelligentRoadTest.businessVM.businessList, 11);
                            IntelligentRoadTest.businessVM.showMessage(IntelligentRoadTest.businessCompleteVM.businessData, IntelligentRoadTest.mkIndex);
                        } catch (e) {
                            // TODO: handle exception
                        }
                    } else if (IntelligentRoadTest.senseName == "warwolf") {
                        state = 0;
                        IntelligentRoadTest.goWarwolfCompleteMessage();
                        try {
                            IntelligentRoadTest.isBackList = true;
                            IntelligentRoadTest.drawMk(IntelligentRoadTest.warwolfVM.warwolfList, 16);
                            IntelligentRoadTest.warwolfVM.showMessage(IntelligentRoadTest.warwolfCompleteVM.warwolfData, IntelligentRoadTest.mkIndex);
                        } catch (e) {
                            // TODO: handle exception
                        }
                    } else if (IntelligentRoadTest.senseName == "market") {
                        state = 0;
                        IntelligentRoadTest.goMarketCompleteMessage();
                        try {
                            IntelligentRoadTest.isBackList = true;
                            IntelligentRoadTest.drawMk(IntelligentRoadTest.marketVM.marketList, 17);
                            IntelligentRoadTest.marketVM.showMessage(IntelligentRoadTest.marketCompleteVM.marketData, IntelligentRoadTest.mkIndex);
                        } catch (e) {
                            // TODO: handle exception
                        }
                    } else if (IntelligentRoadTest.senseName == "food") {
                        state = 0;
                        IntelligentRoadTest.goFoodCompleteMessage();
                        try {
                            IntelligentRoadTest.isBackList = true;
                            IntelligentRoadTest.drawMk(IntelligentRoadTest.foodVM.foodList, 18);
                            IntelligentRoadTest.foodVM.showMessage(IntelligentRoadTest.foodCompleteVM.foodData, IntelligentRoadTest.mkIndex);
                        } catch (e) {
                            // TODO: handle exception
                        }
                    } else if (IntelligentRoadTest.senseName == "site") {
                        state = 0;
                        IntelligentRoadTest.goSiteCompleteMessage();
                        try {
                            IntelligentRoadTest.isBackList = true;
                            IntelligentRoadTest.drawMk(IntelligentRoadTest.siteVM.siteList, 19);
                            IntelligentRoadTest.siteVM.showMessage(IntelligentRoadTest.siteCompleteVM.siteData, IntelligentRoadTest.mkIndex);
                        } catch (e) {
                            // TODO: handle exception
                        }
                    } else if (IntelligentRoadTest.senseName == "scenery") {
                        state = 0;
                        IntelligentRoadTest.goSceneryCompleteMessage();
                        try {
                            IntelligentRoadTest.isBackList = true;
                            IntelligentRoadTest.drawMk(IntelligentRoadTest.sceneryVM.sceneryList, 12);
                            IntelligentRoadTest.sceneryVM.showMessage(IntelligentRoadTest.sceneryCompleteVM.sceneryData, IntelligentRoadTest.mkIndex);
                        } catch (e) {
                            // TODO: handle exception
                        }
                    } else if (IntelligentRoadTest.senseName == "saveArea") {
                        IntelligentRoadTest.goSaveAreaCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "highway") {
                        IntelligentRoadTest.goHighwayCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "rail") {
                        IntelligentRoadTest.goRailCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "cityRoad") {
                        IntelligentRoadTest.goCityRoadCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "metro") {
                        IntelligentRoadTest.goMetroCompleteMessage();
                    } else {
                        if (IntelligentRoadTest.sectorVM == null) { //第一次进来就点击扇区图层
                            IntelligentRoadTest.showSectorData([]);
                        }
                        if (IntelligentRoadTest.lastSectorObj != null && IntelligentRoadTest.sectorObj.name == "sector") {
                            IntelligentRoadTest.sectorObj = IntelligentRoadTest.lastSectorObj; //重置为原来的扇区类型
                            var sectorData = IntelligentRoadTest.lastSectorObj.currentSector;
                            IntelligentRoadTest.getSectorMessageById(sectorData.enodeb_id, sectorData.cell_id, IntelligentRoadTest.day);
                            IntelligentRoadTest.lastSectorObj = null; //重新置空
                        } else {
                            IntelligentRoadTest.lastSectorObj = null;
                            IntelligentRoadTest.loadSectorData(); //查询列表数据
                            IntelligentRoadTest.goSectorList();
                            IntelligentRoadTest.clearSectorPredOverlays(); //清除预测扇区的覆盖物
                        }
                    }
                    IntelligentRoadTest.poorToSector = false; //作为是否从弱区详情页跳转到扇区详情页
                } else {
                    if (IntelligentRoadTest.senseName == null) {
                        IntelligentRoadTest.goGridCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "highway") {
                        IntelligentRoadTest.goHighwayGridCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "rail") {
                        IntelligentRoadTest.goRailGridCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "cityRoad") {
                        IntelligentRoadTest.goCityRoadGridCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "metro") {
                        IntelligentRoadTest.goMetro78LineCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "uptown") {
                        IntelligentRoadTest.goGridCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "business") {
                        IntelligentRoadTest.goGridCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "warwolf") {
                        IntelligentRoadTest.goGridCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "market") {
                        IntelligentRoadTest.goGridCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "scenery") {
                        IntelligentRoadTest.goGridCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "college") {
                        IntelligentRoadTest.goGridCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "food") {
                        IntelligentRoadTest.goGridCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "site") {
                        IntelligentRoadTest.goGridCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "school") {
                        IntelligentRoadTest.goGridCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "cityVillage") {
                        IntelligentRoadTest.goGridCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "village") {
                        IntelligentRoadTest.goGridCompleteMessage();
                    } else if (IntelligentRoadTest.senseName == "factory") {
                        IntelligentRoadTest.goGridCompleteMessage();
                    } else {
                        console.log("没有命中返回的分支!请查看代码");
                    }
                }
            } else if (elementId == "boneAreaCount") {
                if (IntelligentRoadTest.index == 2) {//跳回工单列表
                    IntelligentRoadTest.goAlarmInfoList();
                } else if (IntelligentRoadTest.index == 1 && IntelligentRoadTest.concernAreaCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goConcernAreaCompleteMessage();
                    IntelligentRoadTest.concernAreaVM.showMessage(IntelligentRoadTest.concernAreaCompleteVM.concernAreaData);
                } else if (IntelligentRoadTest.index == 3 && IntelligentRoadTest.sectorCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goSectorCompleteMessage();
                    IntelligentRoadTest.sectorVM.showMessage(IntelligentRoadTest.sectorCompleteVM.sectorData);
                } else if (IntelligentRoadTest.index == 4) {
                    IntelligentRoadTest.goDtList();
                } else if (IntelligentRoadTest.index == 0 && IntelligentRoadTest.rfgCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goPoorAreaCompleteMessage();
                    IntelligentRoadTest.rfgVM.showMessage(IntelligentRoadTest.rfgCompleteVM.poorAreaData);
                } else if (IntelligentRoadTest.index == 6) {
                    IntelligentRoadTest.goMacSectorList();
                } else if (IntelligentRoadTest.senseName == 'college' && IntelligentRoadTest.collegeCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goCollegeCompleteMessage();
                    IntelligentRoadTest.collegeVM.showMessage(IntelligentRoadTest.collegeCompleteVM.collegeData);
                } else if (IntelligentRoadTest.senseName == 'uptown' && IntelligentRoadTest.uptownCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goUptownCompleteMessage();
                    IntelligentRoadTest.uptownVM.showMessage(IntelligentRoadTest.uptownCompleteVM.uptownData);
                } else if (IntelligentRoadTest.senseName == 'scenery' && IntelligentRoadTest.sceneryCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goSceneryCompleteMessage();
                    IntelligentRoadTest.sceneryVM.showMessage(IntelligentRoadTest.sceneryCompleteVM.sceneryData);
                } else if (IntelligentRoadTest.senseName == 'business' && IntelligentRoadTest.businessCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goBusinessCompleteMessage();
                    IntelligentRoadTest.businessVM.showMessage(IntelligentRoadTest.businessCompleteVM.businessData);
                } else if (IntelligentRoadTest.senseName == 'warwolf' && IntelligentRoadTest.warwolfCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goWarwolfCompleteMessage();
                    IntelligentRoadTest.warwolfVM.showMessage(IntelligentRoadTest.warwolfCompleteVM.warwolfData);
                } else if (IntelligentRoadTest.senseName == 'market' && IntelligentRoadTest.marketCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goMarketCompleteMessage();
                    IntelligentRoadTest.marketVM.showMessage(IntelligentRoadTest.marketCompleteVM.marketData);
                } else if (IntelligentRoadTest.senseName == 'food' && IntelligentRoadTest.foodCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goFoodCompleteMessage();
                    IntelligentRoadTest.foodVM.showMessage(IntelligentRoadTest.foodCompleteVM.foodData);
                } else if (IntelligentRoadTest.senseName == 'site' && IntelligentRoadTest.siteCompleteVM != null) {
                    state = 0;
                    IntelligentRoadTest.goSiteCompleteMessage();
                    IntelligentRoadTest.siteVM.showMessage(IntelligentRoadTest.siteCompleteVM.siteData);
                } else {
                    IntelligentRoadTest.goBoneList();
                }
            } else if (elementId == "alarmCount") {
                state = 0;
                IntelligentRoadTest.goAlarmList();
            } else if (elementId == "kpiCount") {
                state = 0;
                IntelligentRoadTest.goKpiList();
            } else if (elementId == "uptownCount") {
                if (IntelligentRoadTest.index == 2) {
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.goAlarmInfoList();
                } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.goAlarmInfoList();
                } else {
                    IntelligentRoadTest.goUptownList();
                }
            } else if (elementId == "collegeCount") {
                if (IntelligentRoadTest.index == 2) {
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.goAlarmInfoList();
                } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.goAlarmInfoList();
                } else {
                    IntelligentRoadTest.goCollegeList();
                }
            } else if (elementId == "businessCount") {
                if (IntelligentRoadTest.index == 2) {
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.goAlarmInfoList();
                } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.goAlarmInfoList();
                } else {
                    IntelligentRoadTest.goBusinessList();
                }
            } else if (elementId == "sceneryCount") {
                if (IntelligentRoadTest.index == 2) {
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.goAlarmInfoList();
                } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.goAlarmInfoList();
                } else {
                    IntelligentRoadTest.goSceneryList();
                }
            } else if (elementId == "warwolfCount") {
                if (IntelligentRoadTest.index == 2) {
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.goAlarmInfoList();
                } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.goAlarmInfoList();
                } else {
                    IntelligentRoadTest.goWarwolfList();
                }
            } else if (elementId == "marketCount") {
                if (IntelligentRoadTest.index == 2) {
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.goAlarmInfoList();
                } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.goAlarmInfoList();
                } else {
                    IntelligentRoadTest.goMarketList();
                }
            } else if (elementId == "foodCount") {
                if (IntelligentRoadTest.index == 2) {
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.goAlarmInfoList();
                } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.goAlarmInfoList();
                } else {
                    IntelligentRoadTest.goFoodList();
                }
            } else if (elementId == "siteCount") {
                if (IntelligentRoadTest.index == 2) {
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.goAlarmInfoList();
                } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.goAlarmInfoList();
                } else {
                    IntelligentRoadTest.goSiteList();
                }
            } else if (elementId == "senseCount") {
                if (IntelligentRoadTest.index == 2) {
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.goAlarmInfoList();
                } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
                    IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
                    IntelligentRoadTest.isShowAlarmInfoMessage = false;
                    IntelligentRoadTest.goAlarmInfoList();
                } else {
                    IntelligentRoadTest.goSenseList();
                    var currentSenseCity = $("#senseCityName").text().trim();
                    var condition = "" + currentSenseCity + IntelligentRoadTest.day + IntelligentRoadTest.senseObject.type;
                    if (condition == IntelligentRoadTest.senseCurrentSelectConditon) {//无需重新查询数据
                        console.log("无需重新查询数据");
                    } else {
                        showOrHideInputImage(2);
                        if (IntelligentRoadTest.senseVM != null) {
                            IntelligentRoadTest.senseVM.senseList = null;
                        }
                        IntelligentRoadTest.getSenseDataByObjectId(IntelligentRoadTest.senseObject.type, currentSenseCity, IntelligentRoadTest.day);
                    }
                }
            } else if (elementId == "girdCount") {
                //如果是在查看范围内的扇区时，直接隐藏详情页
                if(IntelligentRoadTest.showNrCover == true){
                    //隐藏掉详情页
                    $("#showGridList").hide();
                    IntelligentRoadTest.currentLocation = "";
                    return;
                }
                IntelligentRoadTest.isClickGrid = false;
                if (gridUseLocation == "poorArea" || gridUseLocation == "upPoorArea" || gridUseLocation == "dwPoorArea"
                    || gridUseLocation == "m3PoorArea" || gridUseLocation == "olPoorArea" || gridUseLocation == "cbPoorArea") {
                    //当前在弱区详情页或者上行低速区详情页或者下行低速区详情页
                    state = 0;
                    IntelligentRoadTest.goPoorAreaCompleteMessage();
                } else if (gridUseLocation == "concern") {
                    state = 0;
                    IntelligentRoadTest.goConcernAreaCompleteMessage();
                } else if (gridUseLocation == "sector" || gridUseLocation == "m3Sector" || gridUseLocation == "olSector" || gridUseLocation == "cbSector") {
                    //需要判断返回的是哪个扇区的详情页
                    state = 0;
                    if (IntelligentRoadTest.lastSectorObj != null && IntelligentRoadTest.sectorObj.name == "sector") {
                        IntelligentRoadTest.sectorObj = IntelligentRoadTest.lastSectorObj; //重置为原来的扇区类型
                        var sectorData = IntelligentRoadTest.lastSectorObj.currentSector;
                        IntelligentRoadTest.getSectorMessageById(sectorData.enodeb_id, sectorData.cell_id, IntelligentRoadTest.day);
                        IntelligentRoadTest.lastSectorObj = null; //重新置空
                    } else {
                        IntelligentRoadTest.goSectorCompleteMessage();
                    }
                } else if (gridUseLocation == "boneArea") {
                    state = 0;
                    IntelligentRoadTest.goBoneAreaCompleteMessage();
                } else if (gridUseLocation == "macSector") {

                } else if (gridUseLocation == "college") {
                    state = 0;
                    IntelligentRoadTest.goCollegeCompleteMessage();
                } else if (gridUseLocation == "uptown") {
                    state = 0;
                    IntelligentRoadTest.goUptownCompleteMessage();
                } else if (gridUseLocation == "business") {
                    state = 0;
                    IntelligentRoadTest.goBusinessCompleteMessage();
                } else if (gridUseLocation == "warwolf") {
                    state = 0;
                    IntelligentRoadTest.goWarwolfCompleteMessage();
                } else if (gridUseLocation == "market") {
                    state = 0;
                    IntelligentRoadTest.goMarketCompleteMessage();
                } else if (gridUseLocation == "food") {
                    state = 0;
                    IntelligentRoadTest.goFoodCompleteMessage();
                } else if (gridUseLocation == "site") {
                    state = 0;
                    IntelligentRoadTest.goSiteCompleteMessage();
                } else if (gridUseLocation == "scenery") {
                    state = 0;
                    IntelligentRoadTest.goSceneryCompleteMessage();
                } else if (IntelligentRoadTest.index == 13) {
                    state = 0;
                    IntelligentRoadTest.goSaveAreaCompleteMessage()
                } else if (gridUseLocation == "school" || gridUseLocation == "cityVillage" || gridUseLocation == "village" || gridUseLocation == "factory") {
                    state = 0;
                    IntelligentRoadTest.goSenseCompleteMessage();
                }
            } else if (elementId == "userComplainCount") {
                // IntelligentRoadTest.getUserComplainListByOption();
                showOrHideInputImage(1);
                IntelligentRoadTest.drawMk(IntelligentRoadTest.userComplainVM.userComplainList, 29); //重新绘制水滴点
                IntelligentRoadTest.goUserComplainList();
            }
        } else {
            //告警列表的返回是返回到弱区的详情页去的
            if (elementId == "alarmBackPoor") {
                if (IntelligentRoadTest.index == 0 || IntelligentRoadTest.index == 2 || IntelligentRoadTest.index == 24 || IntelligentRoadTest.index == 25
                    || IntelligentRoadTest.index == 30 || IntelligentRoadTest.index == 31 || IntelligentRoadTest.index == 32) { //弱区跳转到告警列表
                    IntelligentRoadTest.goPoorAreaCompleteMessage();
                    state = 0;
                } else if (IntelligentRoadTest.index == 3) {
                    IntelligentRoadTest.goSectorList();
                }
            } else if (elementId == "kpiBackPoor") {
                if (IntelligentRoadTest.currentLocation == "poorArea" || IntelligentRoadTest.currentLocation == "upPoorArea" || IntelligentRoadTest.currentLocation == "dwPoorArea"
                    || IntelligentRoadTest.currentLocation == "m3PoorArea" || IntelligentRoadTest.currentLocation == "olPoorArea" || IntelligentRoadTest.currentLocation == "cbPoorArea") {
                    state = 0;
                    IntelligentRoadTest.goPoorAreaCompleteMessage();
                } else if (IntelligentRoadTest.currentLocation == "concern") {
                    state = 0;
                    IntelligentRoadTest.goConcernAreaCompleteMessage();
                } else if (IntelligentRoadTest.currentLocation == "boneArea") {
                    state = 0;
                    IntelligentRoadTest.goBoneAreaCompleteMessage();
                } else if (IntelligentRoadTest.currentLocation == "highway") {
                    state = 0;
                    IntelligentRoadTest.goHighwayCompleteMessage();
                } else if (IntelligentRoadTest.currentLocation == "rail") {
                    state = 0;
                    IntelligentRoadTest.goRailCompleteMessage();
                } else if (IntelligentRoadTest.currentLocation == "cityRoad") {
                    state = 0;
                    IntelligentRoadTest.goCityRoadCompleteMessage();
                } else if (IntelligentRoadTest.currentLocation == "metro") {
                    state = 0;
                    IntelligentRoadTest.goMetroCompleteMessage();
                } else if (IntelligentRoadTest.currentLocation == "college") {
                    state = 0;
                    IntelligentRoadTest.goCollegeCompleteMessage();
                } else if (IntelligentRoadTest.currentLocation == "uptown") {
                    state = 0;
                    IntelligentRoadTest.goUptownCompleteMessage();
                } else if (IntelligentRoadTest.currentLocation == "business") {
                    state = 0;
                    IntelligentRoadTest.goBusinessCompleteMessage();
                } else if (IntelligentRoadTest.currentLocation == "warwolf") {
                    state = 0;
                    IntelligentRoadTest.goWarwolfCompleteMessage();
                } else if (IntelligentRoadTest.currentLocation == "market") {
                    state = 0;
                    IntelligentRoadTest.goMarketCompleteMessage();
                } else if (IntelligentRoadTest.currentLocation == "food") {
                    state = 0;
                    IntelligentRoadTest.goFoodCompleteMessage();
                } else if (IntelligentRoadTest.currentLocation == "site") {
                    state = 0;
                    IntelligentRoadTest.goSiteCompleteMessage();
                } else if (IntelligentRoadTest.currentLocation == "scenery") {
                    state = 0;
                    IntelligentRoadTest.goSceneryCompleteMessage();
                } else if (IntelligentRoadTest.currentLocation == "school" || IntelligentRoadTest.currentLocation == "cityVillage"
                    || IntelligentRoadTest.currentLocation == "village" || IntelligentRoadTest.currentLocation == "factory") {
                    state = 0;
                    IntelligentRoadTest.goSenseCompleteMessage();
                }
            } else {
//            	for(var i=0;i<IntelligentRoadTest.markerList.length;i++){
//            		IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.markerList[i]);
//            	}
                IntelligentRoadTest.index = null;

                IntelligentRoadTest.removeMk();
//            	IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.circle);
//            	IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlay);
//            	$("#cirTip").hide();
//            	IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlayTwo);
//            	IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.searchMk);
//            	$("#cirTipLeft").hide();
                if (elementId == "dtCount") {
                    clearDTGridData(); //清除地图上的栅格或者描点数据
                    IntelligentRoadTest.currentResult = IntelligentRoadTest.result;
                    IntelligentRoadTest.filterDtResult = IntelligentRoadTest.currentResult;
                    IntelligentRoadTest.currentResult = IntelligentRoadTest.filterDtResult;
                    IntelligentRoadTest.isFilterDt = true;
                    $("#dtSort ul li.selected").trigger("click");
                }
                if (elementId == "macSectorCount") {
                    IntelligentRoadTest.macSectorCurrentResult = IntelligentRoadTest.macSectorResult;
                    IntelligentRoadTest.filterMacSectorResult = IntelligentRoadTest.macSectorCurrentResult;
                    IntelligentRoadTest.macSectorCurrentResult = IntelligentRoadTest.filterMacSectorResult;
                    IntelligentRoadTest.isFilterMacSector = true;

                    $("#macSectorSort ul li.selected").trigger("click");
                }
                $(".panelDiv").slideDown().siblings(".listInfo").hide();
                $(".listDiv").hide();
                $(".listTopUl,.listDivWrap").show();
            }
        }
        if (state == 1) {
            //重绘marke
            if (IntelligentRoadTest.index == 0 || IntelligentRoadTest.index == 24 || IntelligentRoadTest.index == 25) {
                if(IntelligentRoadTest.rfgVM != null){
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.rfgVM.poorAreaList);
                }
            }
            if (IntelligentRoadTest.index == 1) {
                IntelligentRoadTest.drawMk(IntelligentRoadTest.concernAreaVM.concernAreaList, 1);
            }
            if (IntelligentRoadTest.index == 2) {
                IntelligentRoadTest.loadAlarmMk(IntelligentRoadTest.alarmInfoVM.alarmInfoList);
            }
            if (IntelligentRoadTest.index == 3 || IntelligentRoadTest.index == 26 || IntelligentRoadTest.index == 27 || IntelligentRoadTest.index == 28) {
                IntelligentRoadTest.drawMk(IntelligentRoadTest.sectorVM.sectorList, 3);
            }
            if (IntelligentRoadTest.index == 5) {
                IntelligentRoadTest.drawMk(IntelligentRoadTest.boneAreaVM.boneAreaList, IntelligentRoadTest.index);
            }
            if (IntelligentRoadTest.index == 6) {
                IntelligentRoadTest.drawMk(IntelligentRoadTest.macSectorVM.macSectorList, 6);
            }
            if (IntelligentRoadTest.index == 9) {
                IntelligentRoadTest.drawMk(IntelligentRoadTest.uptownVM.uptownList, 9);
            }
            if (IntelligentRoadTest.index == 10) {
                IntelligentRoadTest.drawMk(IntelligentRoadTest.collegeVM.collegeList, 10);
            }
            if (IntelligentRoadTest.index == 11) {
                IntelligentRoadTest.drawMk(IntelligentRoadTest.businessVM.businessList, 11);
            }
            if (IntelligentRoadTest.index == 12) {
                IntelligentRoadTest.drawMk(IntelligentRoadTest.sceneryVM.sceneryList, 12);
            }
            if (IntelligentRoadTest.index == 16) {
                IntelligentRoadTest.drawMk(IntelligentRoadTest.warwolfVM.warwolfList, 16);
            }
            if (IntelligentRoadTest.index == 17) {
                IntelligentRoadTest.drawMk(IntelligentRoadTest.marketVM.marketList, 17);
            }
            if (IntelligentRoadTest.index == 18) {
                IntelligentRoadTest.drawMk(IntelligentRoadTest.foodVM.foodList, 18);
            }
            if (IntelligentRoadTest.index == 19) {
                IntelligentRoadTest.drawMk(IntelligentRoadTest.siteVM.siteList, 19);
            }
            if (IntelligentRoadTest.index >= 20 && IntelligentRoadTest.index <= 23) {
                IntelligentRoadTest.drawMk(IntelligentRoadTest.senseVM.senseList, IntelligentRoadTest.index);
            }

            if (!IntelligentRoadTest.isShowAlarmInfoMessage) {
                for (var i = 0; i < IntelligentRoadTest.polygon.length; i++) {
                    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.polygon[i]);
                    //注销
                    var itemData = {
                        obj_type: IntelligentRoadTest.polygon[i].obj_type,
                        pointsString: null,
                        type: 2,
                        decide: 1,
                        obj_id: IntelligentRoadTest.polygon[i].obj_id,
                        day: IntelligentRoadTest.polygon[i].day
                    };
                    IntelligentRoadTest.logOutPolygonToLayer(itemData);
                }
            }
            if (!IntelligentRoadTest.isShowAlarmInfoMessage) {
                for (var i = 0; i < IntelligentRoadTest.esbhPolygon.length; i++) {
                    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.esbhPolygon[i]);
                }
            }
            if (IntelligentRoadTest.circle) {
                //注销
                var itemSectorData = {
                    obj_type: IntelligentRoadTest.circle.obj_type,
                    pointsString: null,
                    type: 2,
                    decide: 1,
                    statn_id: IntelligentRoadTest.circle.statn_id,
                    cell_id: IntelligentRoadTest.circle.cell_id,
                    day: IntelligentRoadTest.circle.day
                };
                IntelligentRoadTest.logOutPolygonToLayer(itemSectorData);
            }
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.circle);

            if (IntelligentRoadTestSystemLayerV3.hLUserComplain) {
                //注销
                var itemData = {
                    obj_type: IntelligentRoadTestSystemLayerV3.hLUserComplain.obj_type,
                    pointsString: null,
                    point: null,
                    obj_id: IntelligentRoadTestSystemLayerV3.hLUserComplain.obj_id
                };
                IntelligentRoadTest.logOutPolygonToLayer(itemData);
            }
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTestSystemLayerV3.hLUserComplain);

            //删除栅格
            IntelligentRoadTest.GridMapCircleDataArr = null;
            IntelligentRoadTest.GridMapCircleDataArr = [];
            IntelligentRoadTest.GridCanArrT = null;
            IntelligentRoadTest.GridCanArrM = null;
            IntelligentRoadTest.GridCanArrU = null;
            IntelligentRoadTest.CanArr = null;
            IntelligentRoadTest.GridCanArrT = [];
            IntelligentRoadTest.GridCanArrM = [];
            IntelligentRoadTest.GridCanArrU = [];
            IntelligentRoadTest.CanArr = [];
            IntelligentRoadTest.GridMap.clear();
            IntelligentRoadTest.isShowGrid = false;
            IntelligentRoadTest.isShowDTGrid = false;
            IntelligentRoadTest.polygonList = [];
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.searchMk);
            IntelligentRoadTest.sectorPoorline;
//        	IntelligentRoadTest.hideSectorPoorLine(3);
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlayTwo);
//        	IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.circle);
            $("#cirTipLeft").hide();
            //从栅格详情页返回打印历史多边形和栅格
            if (elementId == "sectorCount" && IntelligentRoadTest.isClickGrid) {
                IntelligentRoadTest.showPolygon(IntelligentRoadTest.polygonData);
//                IntelligentRoadTest.showGrid(IntelligentRoadTest.gridData);
            }

        }
        if (IntelligentRoadTest.currentLocation == "") { //如果不是在详情页则将TO5连线隐藏
            IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
            IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
            IntelligentRoadTest.cleraAllZhuantiSectorAndLine();
            IntelligentRoadTest.hideCBPoorAreaNrTop5Sector();
        } else if (IntelligentRoadTest.index == 2) {
            IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
            IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
            IntelligentRoadTest.cleraAllZhuantiSectorAndLine();
            IntelligentRoadTest.hideCBPoorAreaNrTop5Sector();
        }
        //隐藏栅格连线
        IntelligentRoadTest.hideGridMrTop5Sector();

        IntelligentRoadTest.legendGrid();
        IntelligentRoadTest.resizeEcharts();

        if (IntelligentRoadTest.searchTxtTmp.length > 0) {
            if (IntelligentRoadTest.searchTxtTmp[0] != IntelligentRoadTest.city || IntelligentRoadTest.searchTxtTmp[1] != IntelligentRoadTest.district) {
                if(!isNull(IntelligentRoadTest.countryPermission_common)){
                    //区县用户不需要显示搜索条
                    return;
                }

                if(IntelligentRoadTest.index != 8){
                    $(".searchTitle").show();
                }
            } else {
                $(".searchTitle").hide();
            }
        }

    });
    //框选详情页的返回按钮点击事件
    $("#boxSelectionCount").click(function () {
        if (IntelligentRoadTest.isShowAlarmInfoMessage == true && (IntelligentRoadTest.isPoorAreaSaveToConcern == false || IntelligentRoadTest.isPoorAreaSaveToConcern == null)) { //在某个工单对象详情页中点击虚线框弱区的返回
            $("#boxSelectionCount").hide();
            if (IntelligentRoadTest.isFromAlarmList == true) {
                IntelligentRoadTest.index = 2;
            } else {
                IntelligentRoadTest.index = null;
            }
            IntelligentRoadTest.poorAreaCahe = null;
            IntelligentRoadTest.getPoorAreaByIdCahe = null; //为了点击返回之后再次点击之后有反应而设置的
            IntelligentRoadTest.checkWhichSenseToGo();
            IntelligentRoadTest.isPoorAreaSaveToConcern = null;
        } else {
            //在返回弱区
            $("#boxSelectionCount").hide();
            if (IntelligentRoadTest.isShowAlarmInfoMessage == true && IntelligentRoadTest.isFromAlarmList == true) {
                IntelligentRoadTest.index = 2;
            } else {
                //如果是城中村保存为关注区域则返回城中村详情页
                if (IntelligentRoadTest.senseSaveToConcern == true) {
                    IntelligentRoadTest.index = 21; //城中村
                    IntelligentRoadTest.senseSaveToConcern = false;
                    IntelligentRoadTest.poorAreaCahe = null;
                    IntelligentRoadTest.getPoorAreaByIdCahe = null;
                    IntelligentRoadTest.isPoorAreaSaveToConcern = null;
                    IntelligentRoadTest.goSenseCompleteMessage();
                    IntelligentRoadTest.senseVM.showMessage(IntelligentRoadTest.senseCompleteVM.senseData, null);
                    return;
                } else {
                    IntelligentRoadTest.index = IntelligentRoadTest.poorAreaObj.index;
                }
            }
            IntelligentRoadTest.poorAreaCahe = null;
            IntelligentRoadTest.getPoorAreaByIdCahe = null;
            IntelligentRoadTest.goPoorAreaCompleteMessage();
            IntelligentRoadTest.isPoorAreaSaveToConcern = null;
            IntelligentRoadTest.rfgVM.showMessage(IntelligentRoadTest.rfgCompleteVM.poorAreaData, IntelligentRoadTest.mkIndex);
        }
    });

    //记录数复选框按钮点击事件
    $("#showRecordCheckbox").change( function() {
        if($(this).is(':checked')){
            var index = $('.gridFieldset2 input[name="grid-type"][value="'+IntelligentRoadTest.gridTypeIndex+'"]').parent().index();
            $('.gridFieldSetInfo .gridTypeDiv:eq('+index+') input[name="legend-grid"]').eq(5).attr("checked", true);
            $('.gridFieldSetInfo .gridTypeDiv:eq('+index+') input[name="legend-grid"]').eq(5).siblings('label').css("color", "#3285FF");
            removeColorBarArrId(6);
        }else{
            var index = $('.gridFieldset2 input[name="grid-type"][value="'+IntelligentRoadTest.gridTypeIndex+'"]').parent().index();
            $('.gridFieldSetInfo .gridTypeDiv:eq('+index+') input[name="legend-grid"]').eq(5).attr("checked", false);
            $('.gridFieldSetInfo .gridTypeDiv:eq('+index+') input[name="legend-grid"]').eq(5).siblings('label').css("color", "");
            pushColorBarArrId(6);
        }
        IntelligentRoadTest.colorbarEndRedraw();//点击图例后重绘栅格或者描点
        // console.log(IntelligentRoadTest.colorBarArr);
        if (IntelligentRoadTest.index == 15) {
            IntelligentRoadTest.metroColorLegen(true);
        }
        if (IntelligentRoadTest.index == 7 || IntelligentRoadTest.index == 8 || IntelligentRoadTest.index == 14) {
            IntelligentRoadTest.osmColorLegen();
        }
    });


    //栅格图例绑定点击事件
    $(".colorLegendUl li,.colorLegend #level_6,#level_7").click(function(event){
        if(($(this).closest(".recordDiv",$(".covGridLegend")[0])).length>0){
            return;
        }
        var id = $(this).attr("id");
        if (isNull(id)) {
            return;
        }
        if($('.lineTable').css('display')=='none'){
            if(id=='level_6'){//由于区域栅格记录数前面加了复选框按钮,所以不再这里做控制
                return;
            }
            var level=id.split("_")[1];
            if ($(this).hasClass("grey")) {//判断该图例颜色是否为灰
                //灰色的时候，呈现栅格
                $(this).removeClass("grey");
                var index = $('.gridFieldset2 input[name="grid-type"][value="'+IntelligentRoadTest.gridTypeIndex+'"]').parent().index();
                $('.gridFieldSetInfo .gridTypeDiv:eq('+index+') input[name="legend-grid"]').eq(level-1).attr("checked", true);
                $('.gridFieldSetInfo .gridTypeDiv:eq('+index+') input[name="legend-grid"]').eq(level-1).siblings('label').css("color", "#3285FF");
//				console.log("呈现栅格");
                removeColorBarArrId(level);
            } else {
                //呈现该图例栅格
                $(this).addClass("grey");
                var index = $('.gridFieldset2 input[name="grid-type"][value="'+IntelligentRoadTest.gridTypeIndex+'"]').parent().index();
                $('.gridFieldSetInfo .gridTypeDiv:eq('+index+') input[name="legend-grid"]').eq(level-1).attr("checked", false);
                $('.gridFieldSetInfo .gridTypeDiv:eq('+index+') input[name="legend-grid"]').eq(level-1).siblings('label').css("color", "");
                /*if(IntelligentRoadTest.gridTypeIndex==0){//覆盖质量
                    IntelligentRoadTest.colorBarArr.push(id.split("_")[1]);
                }else if(IntelligentRoadTest.gridTypeIndex==1){//上行速率
                    IntelligentRoadTest.colorBarArrSH.push(id.split("_")[1]);
                }else if(IntelligentRoadTest.gridTypeIndex==2){//下行速率
                    IntelligentRoadTest.colorBarArrXH.push(id.split("_")[1]);
                }else if(IntelligentRoadTest.gridTypeIndex==3){//MOD3干扰
                    IntelligentRoadTest.colorBarArrM3.push(id.split("_")[1]);
                }else if(IntelligentRoadTest.gridTypeIndex==4){//越区覆盖
                    IntelligentRoadTest.colorBarArrYQ.push(id.split("_")[1]);
                }else if(IntelligentRoadTest.gridTypeIndex==5){//重叠覆盖
                    IntelligentRoadTest.colorBarArrCD.push(id.split("_")[1]);
                }else if(IntelligentRoadTest.gridTypeIndex==6){//EC/IO
                    IntelligentRoadTest.colorBarArrEC.push(id.split("_")[1]);
                }*/
                pushColorBarArrId(level);
//				console.log("清除栅格");
            }
            IntelligentRoadTest.colorbarEndRedraw();//点击图例后重绘栅格或者描点
            // console.log(IntelligentRoadTest.colorBarArr);
        }else{
            if ($(this).hasClass("grey")) {//判断该图例颜色是否为灰
                //灰色的时候，呈现栅格
                $(this).removeClass("grey");
                var index = $('.lineFieldset2 input[name="grid-type-line"][value="'+IntelligentRoadTest.lineTypeIndex+'"]').parent().index();
                $('.lineFieldSetInfo .gridTypeDiv:eq('+index+') input[name="legend-grid-line"]').eq(id.split("_")[1]-1).attr("checked", true);
                $('.lineFieldSetInfo .gridTypeDiv:eq('+index+') input[name="legend-grid-line"]').eq(id.split("_")[1]-1).siblings('label').css("color", "#3285FF");

//				console.log("呈现栅格");
                if (IntelligentRoadTest.lineTypeIndex==1) {
                    IntelligentRoadTest.colorBarArrSHLine = IntelligentRoadTest.removeId(IntelligentRoadTest.colorBarArrSHLine, id.split("_")[1]);
                } else if (IntelligentRoadTest.lineTypeIndex==2) {
                    IntelligentRoadTest.colorBarArrXHLine = IntelligentRoadTest.removeId(IntelligentRoadTest.colorBarArrXHLine, id.split("_")[1]);
                } else if (IntelligentRoadTest.lineTypeIndex==0) {
                    IntelligentRoadTest.colorBarArrLine = IntelligentRoadTest.removeId(IntelligentRoadTest.colorBarArrLine, id.split("_")[1]);
                }
            } else {
                //呈现该图例栅格
                $(this).addClass("grey");
                var index = $('.lineFieldset2 input[name="grid-type-line"][value="'+IntelligentRoadTest.lineTypeIndex+'"]').parent().index();
                $('.lineFieldSetInfo .gridTypeDiv:eq('+index+') input[name="legend-grid-line"]').eq(id.split("_")[1]-1).attr("checked", false);
                $('.lineFieldSetInfo .gridTypeDiv:eq('+index+') input[name="legend-grid-line"]').eq(id.split("_")[1]-1).siblings('label').css("color", "");
                if (IntelligentRoadTest.lineTypeIndex==1) {
                    IntelligentRoadTest.colorBarArrSHLine.push(id.split("_")[1]);
                } else if (IntelligentRoadTest.lineTypeIndex==2) {
                    IntelligentRoadTest.colorBarArrXHLine.push(id.split("_")[1]);
                } else if (IntelligentRoadTest.lineTypeIndex==0) {
                    IntelligentRoadTest.colorBarArrLine.push(id.split("_")[1]);
                }
//				console.log("清除栅格");
            }
//            IntelligentRoadTest.colorbarEndRedraw();
            // console.log(IntelligentRoadTest.colorBarArr);
            if (IntelligentRoadTest.index == 15) {
                IntelligentRoadTest.metroColorLegen(true);
            }
            if (IntelligentRoadTest.index == 7 || IntelligentRoadTest.index == 8 || IntelligentRoadTest.index == 14) {
                IntelligentRoadTest.osmColorLegen();
            }

            if (IntelligentRoadTest.index == 2) {
//                IntelligentRoadTest.clickSenseName = "highway";
//                IntelligentRoadTest.clickSenseName = "rail";
//                IntelligentRoadTest.clickSenseName = "cityRoad";
                if (IntelligentRoadTest.clickSenseName == "highway" || IntelligentRoadTest.clickSenseName == "rail" || IntelligentRoadTest.clickSenseName == "cityRoad") {
                    IntelligentRoadTest.osmColorLegen();
                }
            }
        }
        event.stopPropagation();
    });
    /*$(".colorLegen").children().each(function (i) {
       $(this).click(function () {
           var id = $(this).attr("id");
           var index = $(".map-w-i").index($(this));
           if (isNull(id)) {
               return;
           }
           if ($(this).hasClass("grey")) {//判断该图例颜色是否为灰
               //灰色的时候，呈现栅格
               $(this).removeClass("grey");
               $('input[name="legend-grid"]').eq(index).attr("checked", true);
               $('input[name="legend-grid"]').eq(index).siblings('label').css("color", "#3285FF");
//				console.log("呈现栅格");
               if (index <= 5) {
                   IntelligentRoadTest.colorBarArrSH = IntelligentRoadTest.removeId(IntelligentRoadTest.colorBarArrSH, id.split("_")[1]);
               } else if (index > 5 && index < 12) {
                   IntelligentRoadTest.colorBarArrXH = IntelligentRoadTest.removeId(IntelligentRoadTest.colorBarArrXH, id.split("_")[1]);
               } else if (index > 11 && index < 18) {
                   IntelligentRoadTest.colorBarArr = IntelligentRoadTest.removeId(IntelligentRoadTest.colorBarArr, id.split("_")[1]);
               } else if (index > 17 && index < 24) {//MOD3干扰
                   IntelligentRoadTest.colorBarArrM3 = IntelligentRoadTest.removeId(IntelligentRoadTest.colorBarArrM3, id.split("_")[1]);
               } else if (index > 23 && index < 30) {//越区覆盖
                   IntelligentRoadTest.colorBarArrYQ = IntelligentRoadTest.removeId(IntelligentRoadTest.colorBarArrYQ, id.split("_")[1]);
               } else if (index > 29 && index < 36) {//重叠覆盖
                   IntelligentRoadTest.colorBarArrCD = IntelligentRoadTest.removeId(IntelligentRoadTest.colorBarArrCD, id.split("_")[1]);
               }
           } else {
               //呈现该图例栅格
               $(this).addClass("grey");
               $('input[name="legend-grid"]').eq(index).attr("checked", false);
               $('input[name="legend-grid"]').eq(index).siblings('label').css("color", "");
               if (index <= 5) {
                   IntelligentRoadTest.colorBarArrSH.push(id.split("_")[1]);
               } else if (index > 5 && index < 12) {
                   IntelligentRoadTest.colorBarArrXH.push(id.split("_")[1]);
               } else if (index > 11 && index < 18) {
                   IntelligentRoadTest.colorBarArr.push(id.split("_")[1]);
               } else if (index > 17 && index < 24) {//MOD3干扰
                   IntelligentRoadTest.colorBarArrM3.push(id.split("_")[1]);
               } else if (index > 23 && index < 30) {//越区覆盖
                   IntelligentRoadTest.colorBarArrYQ.push(id.split("_")[1]);
               } else if (index > 29 && index < 36) {//重叠覆盖
                   IntelligentRoadTest.colorBarArrCD.push(id.split("_")[1]);
               }
//				console.log("清除栅格");
           }
           IntelligentRoadTest.colorbarEndRedraw();
           // console.log(IntelligentRoadTest.colorBarArr);
           if (IntelligentRoadTest.index == 15) {
               IntelligentRoadTest.metroColorLegen();
           }
           if (IntelligentRoadTest.index == 7 || IntelligentRoadTest.index == 8 || IntelligentRoadTest.index == 14) {
               IntelligentRoadTest.osmColorLegen();
           }
       });
   });*/

    //抱怨热点图例绑定事件
    $(".colorLegenBihuan").children().each(function (i) {
        $(this).click(function () {
            var id = $(this).attr("id");
            var index = $(".colorLegenBihuan .map-w-i").index($(this));
            if (isNull(id)) {
                return;
            }
            if ($(this).hasClass("grey")) {//判断该图例颜色是否为灰
                //灰色的时候，呈现栅格
                $(this).removeClass("grey");
                $('input[name="complain-hot"]').eq(index).attr("checked", true);
                $('input[name="complain-hot"]').eq(index).siblings('label').css("color", "#3285FF");
//				console.log("呈现栅格");
                IntelligentRoadTestSystemLayerV3.colorBarArrUC = IntelligentRoadTest.removeId(IntelligentRoadTestSystemLayerV3.colorBarArrUC, id.split("_")[1]);
            } else {
                //呈现该图例栅格
                $(this).addClass("grey");
                $('input[name="complain-hot"]').eq(index).attr("checked", false);
                $('input[name="complain-hot"]').eq(index).siblings('label').css("color", "");
                IntelligentRoadTestSystemLayerV3.colorBarArrUC.push(id.split("_")[1]);
//				console.log("清除栅格");
            }
            IntelligentRoadTestSystemLayerV3.colorbarEndRedraw();
        });
    });

    //线段图例绑定点击事件
    /*$(".colorLegenLine").children().each(function (i) {
        $(this).click(function () {
            var id = $(this).attr("id");
            var index = $(".colorLegenLine .map-w-i").index($(this));
            if (isNull(id)) {
                return;
            }
            if ($(this).hasClass("grey")) {//判断该图例颜色是否为灰
                //灰色的时候，呈现栅格
                $(this).removeClass("grey");
                $('input[name="legend-grid-line"]').eq(index).attr("checked", true);
                $('input[name="legend-grid-line"]').eq(index).siblings('label').css("color", "#3285FF");
//				console.log("呈现栅格");
                if (index <= 5) {
                    IntelligentRoadTest.colorBarArrSHLine = IntelligentRoadTest.removeId(IntelligentRoadTest.colorBarArrSHLine, id.split("_")[1]);
                } else if (index > 5 && index < 12) {
                    IntelligentRoadTest.colorBarArrXHLine = IntelligentRoadTest.removeId(IntelligentRoadTest.colorBarArrXHLine, id.split("_")[1]);
                } else if (index > 11 && index < 18) {
                    IntelligentRoadTest.colorBarArrLine = IntelligentRoadTest.removeId(IntelligentRoadTest.colorBarArrLine, id.split("_")[1]);
                }
            } else {
                //呈现该图例栅格
                $(this).addClass("grey");
                $('input[name="legend-grid-line"]').eq(index).attr("checked", false);
                $('input[name="legend-grid-line"]').eq(index).siblings('label').css("color", "");
                if (index <= 5) {
                    IntelligentRoadTest.colorBarArrSHLine.push(id.split("_")[1]);
                } else if (index > 5 && index < 12) {
                    IntelligentRoadTest.colorBarArrXHLine.push(id.split("_")[1]);
                } else if (index > 11 && index < 18) {
                    IntelligentRoadTest.colorBarArrLine.push(id.split("_")[1]);
                }
//				console.log("清除栅格");
            }
//            IntelligentRoadTest.colorbarEndRedraw();
            // console.log(IntelligentRoadTest.colorBarArr);
            if (IntelligentRoadTest.index == 15) {
                IntelligentRoadTest.metroColorLegen(true);
            }
            if (IntelligentRoadTest.index == 7 || IntelligentRoadTest.index == 8 || IntelligentRoadTest.index == 14) {
                IntelligentRoadTest.osmColorLegen();
            }

            if (IntelligentRoadTest.index == 2) {
//                IntelligentRoadTest.clickSenseName = "highway";
//                IntelligentRoadTest.clickSenseName = "rail";
//                IntelligentRoadTest.clickSenseName = "cityRoad";
                if (IntelligentRoadTest.clickSenseName == "highway" || IntelligentRoadTest.clickSenseName == "rail" || IntelligentRoadTest.clickSenseName == "cityRoad") {
                    IntelligentRoadTest.osmColorLegen();
                }
            }

        });
    });*/


    $(".listTopUl .select-name").click(function () {
        $(this).parent().siblings().find(".select-info").hide();
        $(this).siblings(".select-info").toggle();
        if ($(this).siblings(".select-info").is(":visible")) {
            $(this).parents(".listTopUl").siblings(".listDivWrap").css("min-height", $(this).siblings(".select-info").height() + 31);
        } else {
            $(this).parents(".listTopUl").siblings(".listDivWrap").css("min-height", "auto");
        }

        //城市（区县）
        var citydisTxt = $.trim($(this).text());
        //场景城市列表ul id
        var senceId = $(this).next().find("ul:first").attr("id");
        IntelligentRoadTest.cityListSelectHandler(citydisTxt, senceId);

    });
    $('#topCitySelect .selectCity-name').click(function () {
        $(this).siblings('.city-info').toggle();
        IntelligentRoadTest.allcitySelectHandler();
    });

    $(".chartTotal").click(function () {
        IntelligentRoadTest.gotoChartPage();
    });


    $("body").click(function (e) { //点击其他地方隐藏下拉列表
        if ($(e.target).closest(".modal-body").length == 0) {
            // $(".modal").hide();
        }
        ;
        if ($(e.target).closest(".selectCity-name,.city-info").length == 0) {
            $(".city-info").hide();
        }
        ;
        if ($(e.target).closest(".select-name,.select-info,.closeImg").length == 0) {
            $(".select-info").hide();
            $(".listDivWrap").css("min-height", "auto");
        }
        ;
        if ($(e.target).closest(".select-layer,.layer-info,.colpick,.layerGif").length == 0) {
            // IntelligentRoadTest.revertCheckboxSelect();
            $(".layer-info").hide();
            $(".select-layer").removeClass("iconSelect");
        }
        ;
        if ($(e.target).closest("#helpTip,.help-info").length == 0) {
            $(".help-info").hide();
            $("#helpTip").removeClass("iconSelect");
        }
        ;

        if ($(e.target).closest(".searchBox").length == 0) {
            $(".search-result").hide();
        }
        ;
        if ($(e.target).closest("#toolText,.toolInfo").length == 0) {
            $(".toolInfo").hide();
        }
        ;
        if ($(e.target).closest(".boxSelectionImg,.boxSelectionUl ").length == 0) {
            $(".boxSelectionUl ").hide();
        }
        ;

        if ($(e.target).closest(".panelWrap,.searchBox,.topDiv,.colorBar-info,.modal").length == 0) {
            if ($(".panelDiv").is(':visible')) {
                $(".panelDiv").slideUp();
                $('.packList').attr("title", "打开列表");
                // $('.packList').animate({height:20}, 500);
                $('.packList').children().removeClass('rotatePackImg');
                $('.packList').children().attr("src", "../js/IntelligentRoadTestV3/images/pack_down.png");
            }
        }
        ;

        if ($(e.target).closest("#searchText").length == 0) {
            $("#searchText").blur();
        } else {
            if (IntelligentRoadTest.index != null) {
                if ($(".panelDiv").is(':visible')) {
                    $(".panelDiv").slideUp();
                    $('.packList').attr("title", "打开列表");
                    // $('.packList').animate({height:20}, 500);
                    $('.packList').children().removeClass('rotatePackImg');
                    $('.packList').children().attr("src", "../js/IntelligentRoadTestV3/images/pack_down.png");
                }
            }
        }
    });

    //----------------增加图层上移下移置顶置底--------------------
    //置顶
    $('#layerSetTop').click(function () {
        IntelligentRoadTest.layerSetTop(this);
    });

    //上移
    $('#layerSetUp').click(function () {
        IntelligentRoadTest.layerSetUp(this);
    });

    //下移
    $('#layerSetDown').click(function () {
        IntelligentRoadTest.layerSetDown(this);
    });

    //置底
    $('#layerSetBottom').click(function () {
        IntelligentRoadTest.layerSetBottom(this);
    });

    $('#layerUl li').click(function () {
        $(this).addClass("P_current").siblings().removeClass("P_current");
    });

    $(".colseImg,.gpsModal .closeProgress,.gpsModal .btn-cancel").click(function () {
        $("#message").html("");
        $("#uploadName").val("");
        $("#fujian").val("");

        $(".modal").hide();
    });

    $(".modal-sure,.modal-cancel,.closeBtn").click(function () {
        $(".alertModal").hide();
        $(".shareModal").hide();
    });
    $("#sureShare").click(function () {
        $(".shareModal").hide();
        $(".submitModal").show().delay(1000).fadeOut();
    });

    $(".importModal .colseImg").click(function () {
        IntelligentRoadTest.editImgSrc("#dtImport");
    });

    //同步按钮点击
    $(".searchTitle").click(function () {
        IntelligentRoadTest.searchTitleClick = true;
        var txtTmp = $(this)["0"].innerText;
        var txt = "";
        if (txtTmp.indexOf('"') > -1) {
            txt = $(this)["0"].innerText.split('"')[1].split(">");
            IntelligentRoadTest.mapPositioningByDistrict2(txt[0], txt[1]);
            IntelligentRoadTest.searchTxtTmp = txt;
        } else {
            txt = $(this)["0"].innerText.split(' ')[1];
            IntelligentRoadTest.mapPositioningByDistrict2(txt, "");
            IntelligentRoadTest.searchTxtTmp[0] = txt;
        }
        // var txt = $(this)["0"].innerText.split('"')[1].split(">");
        // IntelligentRoadTest.mapPositioningByDistrict2(txt[0],txt[1]);
        // IntelligentRoadTest.searchTxtTmp = txt;
        $(".searchTitle").slideUp();
        $(".listDivWrap").css("max-height", $(".mapDiv").height() - 70 - 45);
    })
    var per = IntelligentRoadTest.cityPermission_common;
    if (per != "全省") {
        var index = jQuery.inArray(per, IntelligentRoadTest.MetroCityList);
        if (index < 0) {
            IntelligentRoadTest.ifShowMetro = false;
        }
    }
    IntelligentRoadTest.initSenseLiClass();//初始化场景的背景颜色，如果未启用则为灰色背景
    // IntelligentRoadTest.openAuditPage();
    $("#m3PoorAreaLogo").show();
    $("#olPoorAreaLogo").show();
    $("#cbPoorAreaLogo").show();
    document.onkeydown = function (e) {
        /*if( e.altKey  && e.ctrlKey && e.shiftKey && e.keyCode == 48  ){//shit + alt   + ctrl + 0
            concernAreaShare.isPass = false;
            if(IntelligentRoadTest.currentLocation == "concern"){
                var concernArea = IntelligentRoadTest.concernAreaCompleteVM.concernAreaData;
                if(concernArea != null && concernArea.id != null){
                    concernAreaShare.likeDoAudit(concernArea);
                }
            }
        }else if( e.altKey  && e.ctrlKey && e.shiftKey && e.keyCode == 49 ){//shit + alt  + ctrl + 1
            concernAreaShare.isPass = true;
            if(IntelligentRoadTest.currentLocation == "concern"){
                var concernArea = IntelligentRoadTest.concernAreaCompleteVM.concernAreaData;
                if(concernArea != null && concernArea.id != null){
                    concernAreaShare.likeDoAudit(concernArea);
                }
            }
        }else if( e.altKey  && e.ctrlKey && e.shiftKey && e.keyCode == 37 ){//ctrl + shit + alt + 左方向键
            IntelligentRoadTest.setSenseOnUse(); //设置属性
            IntelligentRoadTest.initSenseLiClass(); //重新设置样式

            //临时增加开放出分屏对比的功能
            // $('.screenClass').show();
        }*/
        //显示分屏和统计页
        if (e.altKey && e.ctrlKey && e.shiftKey && e.keyCode == 39) {//ctrl + shit + alt + 右方向键
            //临时增加开放出分屏对比的功能
            $('#screenComp').show();
            $(".chartTotal").show();
            $("#exportData").show();
        } else if (e.altKey && e.ctrlKey && e.shiftKey && e.keyCode == 37) {//ctrl + shit + alt + 左方向键
            $("#naturalVillageLogo").show();
            $("#cityVillagesLogo").show();
            $("#schoolLogo").show();
            $("#factoryLogo").show();
            $("#MOD3InterfereLogo").show();
            $("#acrossCoverAreaLogo").show();
            $("#overlapCoverAreaLogo").show();
            $("#m3PoorAreaLogo").show();
            $("#olPoorAreaLogo").show();
            $("#cbPoorAreaLogo").show();
            IntelligentRoadTest.setSenseOnUse(); //设置属性
            IntelligentRoadTest.initSenseLiClass(); //重新设置样式
        } else if (e.altKey && e.ctrlKey && e.shiftKey && e.keyCode == 49) {//ctrl + shit + alt + 1
            $("#oldPanelDiv").show();
            $("#newPanelDiv").hide();
        } else if (e.altKey && e.ctrlKey && e.shiftKey && e.keyCode == 50) {//ctrl + shit + alt + 2
            $("#newPanelDiv").show();
            $("#oldPanelDiv").hide();
            // $("#newPanelDiv li").unbind();
        }
    }
});



/**
 * ********************************
 * @funcname IntelligentRoadTest.showCurrentUserCountryPoloy
 * @funcdesc 根据用户的权限范围获取所属区县的轮廓信息
 * @param {String} city_name ： 所属地市名称
 * {String} country_name : 所属区县名称
 *
 * @return
 * @author 林楚佳
 * @create
 **********************************
 */
IntelligentRoadTest.showCurrentUserCountryPoloy = function (city_name , country_name){
    if(isNull(city_name) || isNull(country_name) || country_name == ""){
        return ;
    }
    var sqlList = [];
    var list = ["IntelligentRoadTestSimple_getCurrentCountryPoloyData" , "CITY_NAME:" + city_name , "DISTRICT_NAME:" + country_name];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealCurrentUserCountryPoloy];
    var database = [3];
    progressbarTwo.submitSql(sqlList , funcList , database);
}

/**
 * ********************************
 * @funcname IntelligentRoadTest.dealCurrentUserCountryPoloy
 * @funcdesc 处理查询返回的区县轮廓数据
 * @param
 *
 * @return
 * @author 林楚佳
 * @create
 **********************************
 */
IntelligentRoadTest.dealCurrentUserCountryPoloy = function IntelligentRoadTest_dealCurrentUserCountryPoloy(data){
    var result = callBackChangeData(data);
    console.log(result);
    if(result.length > 0){
        //地图定位到该区县去
        IntelligentRoadTest.currentUserPermissionCenterPoint = new BMap.Point((result[0].baidu_max_longitude + result[0].baidu_min_longitude)/2 , (result[0].baidu_maxlatitude + result[0].baidu_minlatitude)/2);
        IntelligentRoadTest.map.panTo(IntelligentRoadTest.currentUserPermissionCenterPoint);
        IntelligentRoadTest.drawCurrentUserCountryPoloy(result[0].gis_data_baidu);
    }

}

//绘制轮廓
IntelligentRoadTest.drawCurrentUserCountryPoloy = function(gis_data){

    if(!isNull(gis_data)){
        //将字符串进行切割
        var baiduPointArr = [];
        var gisStrArr = gis_data.split("@"); //切割得到的是一个个经纬度字符串

        //循环遍历每一个经纬度，切割出经度和纬度并封装成一个百度点对象，放入到数组中
        for(var i = 0; i < gisStrArr.length; i++){
            var lngLatArr = gisStrArr[i].split(',');
            var point = new BMap.Point(parseFloat(lngLatArr[0].trim()) ,parseFloat(lngLatArr[1].trim()));
            baiduPointArr.push(point);
        }

        var polygon = new BMap.Polygon(baiduPointArr ,
            {strokeColor:IntelligentRoadTest.objectPolylineColor, strokeWeight:4, strokeOpacity:1, fillColor :IntelligentRoadTest.objectPolylineColor ,  fillOpacity : 0.1 , enableClicking : false});  //创建多边形
        IntelligentRoadTest.map.addOverlay(polygon);   //增加多边形
    }

}
//启用禁用的li
IntelligentRoadTest.setSenseOnUse = function () {
    IntelligentRoadTest.ifShowHighway = true;
    IntelligentRoadTest.ifShowRail = true;
    IntelligentRoadTest.ifShowCityRoad = true;
    IntelligentRoadTest.ifShowMetro = true;
    IntelligentRoadTest.ifShowFood = true;
    IntelligentRoadTest.ifShowSite = true;
    IntelligentRoadTest.ifShowWarwolf = true;
    IntelligentRoadTest.ifShowMarket = true;
}

/**
 * 初始化五高一地两美一场的图标样式
 */
IntelligentRoadTest.initSenseLiClass = function () {
    var liObjArr = $(".rowUl li");
    for (var i = 0; i < liObjArr.length; i++) {
        switch (i) {
            case 0 :
                if (IntelligentRoadTest.ifShowHighway == false) {
                    $($(".rowUl li")[0]).addClass("grayBackground");
                } else {
                    $($(".rowUl li")[0]).removeClass("grayBackground");
                }
                break;
            case 1 :
                if (IntelligentRoadTest.ifShowRail == false) {
                    $($(".rowUl li")[1]).addClass("grayBackground");
                } else {
                    $($(".rowUl li")[1]).removeClass("grayBackground");
                }
                break;
            case 2 :
                if (IntelligentRoadTest.ifShowCityRoad == false) {
                    $($(".rowUl li")[2]).addClass("grayBackground");
                } else {
                    $($(".rowUl li")[2]).removeClass("grayBackground");
                }
                break;
            case 3 :
                if (IntelligentRoadTest.ifShowMetro == false) {
                    $($(".rowUl li")[3]).addClass("grayBackground");
                } else {
                    $($(".rowUl li")[3]).removeClass("grayBackground");
                }
                break;
            case 4 :
                if (IntelligentRoadTest.ifShowCollege == false) {
                    $($(".rowUl li")[4]).addClass("grayBackground");
                } else {
                    $($(".rowUl li")[4]).removeClass("grayBackground");
                }
                break;
            case 5 :
                if (IntelligentRoadTest.ifShowSite == false) {
                    $($(".rowUl li")[5]).addClass("grayBackground");
                } else {
                    $($(".rowUl li")[5]).removeClass("grayBackground");
                }
                break;
            case 6 :
                if (IntelligentRoadTest.ifShowUptown == false) {
                    $($(".rowUl li")[6]).addClass("grayBackground");
                } else {
                    $($(".rowUl li")[6]).removeClass("grayBackground");
                }
                break;
            case 7 :
                if (IntelligentRoadTest.ifShowFood == false) {
                    $($(".rowUl li")[7]).addClass("grayBackground");
                } else {
                    $($(".rowUl li")[7]).removeClass("grayBackground");
                }
                break;
            case 8 :
                if (IntelligentRoadTest.ifShowScenery == false) {
                    $($(".rowUl li")[8]).addClass("grayBackground");
                } else {
                    $($(".rowUl li")[8]).removeClass("grayBackground");
                }
                break;
            case 9 :
                if (IntelligentRoadTest.ifShowBusiness == false) {
                    $($(".rowUl li")[9]).addClass("grayBackground");
                } else {
                    $($(".rowUl li")[9]).removeClass("grayBackground");
                }
                break;
            case 10 :
                if (IntelligentRoadTest.ifShowWarwolf == false) {
                    $($(".rowUl li")[10]).addClass("grayBackground");
                } else {
                    $($(".rowUl li")[10]).removeClass("grayBackground");
                }
                break;
            case 11 :
                if (IntelligentRoadTest.ifShowMarket == false) {
                    $($(".rowUl li")[11]).addClass("grayBackground");
                } else {
                    $($(".rowUl li")[11]).removeClass("grayBackground");
                }
                break;
        }
    }
}

/**********************************
 * @funcname searchTxtUpdate
 * @funcdesc 搜索标题更新
 * @param {datatype} nameOfParameter (input/output optional)
 descriptionOfParameter
 * @return {datatype}
 * @author laijunbao
 * @create 2018/01/05 0005 15:27
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.searchTxtUpdate = function IntelligentRoadTest_searchTxtUpdate() {
    if(!isNull(IntelligentRoadTest.countryPermission_common)){ //区县用户不需要这个搜索条
        return;
    }
    var mapCity = $("#mapCity").text();
    var mapDistrict = $("#mapDistrict").text();

    if(IntelligentRoadTest.cityPermission_common != "全省" && mapCity != IntelligentRoadTest.cityPermission_common){ //当前所在的地市不是所属的地市
        return;
    }
    var metroCityTmp = ["广州", "佛山", "深圳", "东莞"];

    if (IntelligentRoadTest.searchTxtTmp.length > 0) {
        if(IntelligentRoadTest.index == 8){
            return ;
        }
        if ($.inArray(IntelligentRoadTest.index, IntelligentRoadTest.indexTmp) > -1) {
            var tmp = '"' + mapCity + ">" + mapDistrict + '"';
            if (IntelligentRoadTest.searchTxtTmp[0] != mapCity || IntelligentRoadTest.searchTxtTmp[1] != mapDistrict) {
                $(".searchTitle").slideDown();
                $(".listDivWrap").css("max-height", $(".mapDiv").height() - 70 - 45 - 50);
                if (IntelligentRoadTest.clickFlag) {
                    $(".searchTitle").text("在" + tmp + IntelligentRoadTest.searchSenceTxtTmp + "内搜索");
                }
                IntelligentRoadTest.city = mapCity;
                IntelligentRoadTest.district = mapDistrict;
            } else {
                $(".searchTitle").slideUp();
                $(".listDivWrap").css("max-height", $(".mapDiv").height() - 70 - 45);
            }
        } else {
            //地铁的，广州，深圳，东莞，佛山，地图移动时才显示同步按钮
            if (IntelligentRoadTest.index == 15) {
                if ($.inArray(mapCity, metroCityTmp) > -1) {
                    //重复代码，抽成一个方法，用于更新同步按钮
                    IntelligentRoadTest.searchTxtUpdateHandler(mapCity, mapDistrict);
                } else {
                    $(".searchTitle").slideUp();
                    $(".listDivWrap").css("max-height", $(".mapDiv").height() - 70 - 45);
                }
            } else {
                //重复代码，抽成一个方法，用于更新同步按钮
                IntelligentRoadTest.searchTxtUpdateHandler(mapCity, mapDistrict);
            }
        }
    } else {
        $(".searchTitle").slideUp();
        $(".listDivWrap").css("max-height", $(".mapDiv").height() - 70 - 45);
    }
}
/**********************************
 * @funcname searchTxtUpdateHandler
 * @funcdesc 重复代码，抽成一个方法，用于更新同步按钮
 * @param {datatype} nameOfParameter (input/output optional)
 descriptionOfParameter
 * @return {datatype}
 * @author laijunbao
 * @create 2018/02/01 0001 16:40
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.searchTxtUpdateHandler = function IntelligentRoadTest_searchTxtUpdateHandler(mapCity, mapDistrict) {
    var tmp = mapCity;
    if(!isNull(IntelligentRoadTest.countryPermission_common)){ //区县用户不需要这个搜索条
        return;
    }
    if(IntelligentRoadTest.cityPermission_common != "全省" && mapCity != IntelligentRoadTest.cityPermission_common){ //当前所在的地市不是所属的地市
        return;
    }
    if (IntelligentRoadTest.searchTxtTmp[0] != mapCity) {
        if(IntelligentRoadTest.index == 8){
            return ;
        }
        $(".searchTitle").slideDown();
        $(".showListWrap .listDivWrap").css("max-height", $(".mapDiv").height() - 70 - 45 - 40);
        $(".showListDetail .listDivWrap").css("max-height", $(".mapDiv").height() - 70 - 45 - 40 - 45);
        if (IntelligentRoadTest.clickFlag) {
            $(".searchTitle").text("在 " + tmp + IntelligentRoadTest.searchSenceTxtTmp + "内搜索");
        } else {
            $(".searchTitle").text("在 " + tmp + " " + IntelligentRoadTest.searchSenceTxtTmp + "内搜索");
        }
        IntelligentRoadTest.city = mapCity;
        IntelligentRoadTest.district = mapDistrict;
    } else {
        $(".searchTitle").slideUp();
        $(".showListWrap .listDivWrap").css("max-height", $(".mapDiv").height() - 70 - 45);
        $(".showListDetail .listDivWrap").css("max-height", $(".mapDiv").height() - 70 - 45 - 45);
    }
}

//---------------------------杨艳萍代码开始--------------------------------
function saveModal() {
    $(this).text("已保存");
    $(".saveModal").show().delay(1000).fadeOut();//显示保存成功弹框一秒后自动消失
};

function submitModal() {
    $(this).text("已提交");
    $(".submitModal").show().delay(1000).fadeOut();//显示已提交弹框一秒后自动消失
}

function revokeModal() {
    $("#revokeModal").show(); //显示撤销弹框
}

function infoHeight() {
    setTimeout(function () {
        $(".detailListDiv").each(function () {
            if ($(this).height() > 0) {

                if ($("body").height() <= 768) {
                    var detailHeight = $(".mapDiv").height() - 120 - 45;
                } else {
                    var detailHeight = $(".mapDiv").height() - 70 - 45;
                }
                var infoHeader = $(this).find(".infoHeader")[0].clientHeight;
                $(this).find(".infoBody").css("max-height", parseInt(detailHeight) - infoHeader);
            }
        });
    }, 1000);
}

/**
 *  列表上方的地市、分类、排序点击显示对应的信息
 */
IntelligentRoadTest.showSelectInfo = function IntelligentRoadTest_showSelectInfo() {
    $(event.currentTarget).parent().siblings().find(".select-info").hide();
    $(event.currentTarget).siblings(".select-info").toggle();
    if ($(event.currentTarget).siblings(".select-info").is(":visible")) {
        $(event.currentTarget).siblings(".select-info").height();
        $(event.currentTarget).parents(".listDiv").find(".listWrap").css("min-height", $(this).siblings(".select-info").height() + 20);
    } else {
        $(event.currentTarget).parents(".listDiv").find(".listWrap").css("min-height", "auto");
    }
}
/**
 *  DT导入、测量、框选、三网点击修改图片路径
 */
IntelligentRoadTest.editImgSrc = function IntelligentRoadTest_editImgSrc(imgSrc) {
    if ($(imgSrc).hasClass("iconSelect")) {
        $(imgSrc).removeClass("iconSelect");
    } else {
        $(imgSrc).addClass("iconSelect").siblings().removeClass("iconSelect");
    }

    if ($(".rightToolbar ").css("width") == "120px") {
        $(".toolMenu").children().removeClass("rotateImg");
        $(".rightToolbar").animate({width: 50}, 800);
    }
}

/**
 *  跳转到列表的首页
 */
IntelligentRoadTest.gotoIndex = function IntelligentRoadTest_gotoIndex(isSlowDown) {
    $('.packList').attr("title", "收起列表");
    // $('.packList').animate({height:50}, 500);
    $('.packList').children().addClass('rotatePackImg');
    $('.packList').children().attr("src", "../js/IntelligentRoadTestV3/images/pack_top.png");
    if(isSlowDown != null){ //在参数不为空的情况下，主菜单不显示出来 （林楚佳20190218修订）
        $(".coordinateType").slideDown().siblings(".listInfo").hide();
    }else{
        $(".panelDiv,.coordinateType").slideDown().siblings(".listInfo").hide();
    }
    showOrHideInputImage(3);
    IntelligentRoadTest.currentLocation = "";
//    IntelligentRoadTest.showBaiduMap();
}

/**
 *  跳转到弱区列表
 */
IntelligentRoadTest.goPoorAreaList = function IntelligentRoadTest_goPoorAreaList() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showPoorAreaList").show().siblings().hide();
    $("#showPoorAreaList .listWrap").slideDown("slow").siblings().hide();
    // $("#showPoorAreaList .listWrap").children().not(".backList").slideDown();
    // $("#showPoorAreaList .searchTitle").html("在“" + $("#poorAreaCityName").text() + "”区域内搜索" );
    showOrHideInputImage(1);
    IntelligentRoadTest.index = IntelligentRoadTest.poorAreaObj.index;
    IntelligentRoadTest.currentLocation = "";
    IntelligentRoadTest.indexTmp.push(IntelligentRoadTest.index);
    /*if(IntelligentRoadTest.refreshPoorAreaList == true){
        IntelligentRoadTest.rfgResult = IntelligentRoadTest.refreshPoorAreaResult;
        IntelligentRoadTest.rfgCurrentResult = IntelligentRoadTest.refreshPoorAreaResult;
        IntelligentRoadTest.isFilterRfg = false;
        IntelligentRoadTest.showPoorAreaData(IntelligentRoadTest.rfgResult);
        IntelligentRoadTest.refreshPoorAreaList = false;
        IntelligentRoadTest.refreshPoorAreaResult = [];
    }*/
}

/**
 *  跳转到弱区详情
 */
IntelligentRoadTest.goPoorAreaCompleteMessage = function IntelligentRoadTest_goPoorAreaCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showPoorAreaList").show().siblings().hide();
    $("#showPoorAreaList .detailList").slideDown("slow").siblings().hide();
    /* if(IntelligentRoadTest.rfgVM != null){
        $("#poorAreaCount").show();
    }else{
        $("#poorAreaCount").hide();
    }*/
    $("#poorAreaCount").show();
    /*if(IntelligentRoadTest.refreshPoorAreaList == true){
        IntelligentRoadTest.index = IntelligentRoadTest.poorArea.index;
        changeSearchPlaceholder();
    }*/
    if (IntelligentRoadTest.index == 0 || IntelligentRoadTest.index == 24 || IntelligentRoadTest.index == 25 || IntelligentRoadTest.index == 30 || IntelligentRoadTest.index == 31 || IntelligentRoadTest.index == 32
        || (IntelligentRoadTest.index == null && IntelligentRoadTest.senseName == null)) {
        /*if(IntelligentRoadTest.refreshPoorAreaList == true){
            $("#poorAreaCount").html("返回列表的搜索结果(" + IntelligentRoadTest.refreshPoorAreaResult.length + "条)");
        }else{*/
        $("#poorAreaCount").html("返回列表的搜索结果(" + IntelligentRoadTest.rfgTotalCount + "条)");
        // }
    } else {
        $("#poorAreaCount").html("返回");
    }
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "poorArea";
    if (IntelligentRoadTest.poorAreaObj != null) {
        IntelligentRoadTest.currentLocation = IntelligentRoadTest.poorAreaObj.name;
    }
    // IntelligentRoadTestSystemLayerV3.setGridLayerIndex(IntelligentRoadTest.currentLocation);
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到关注区域列表
 */
IntelligentRoadTest.goConcernAreaList = function IntelligentRoadTest_goConcernAreaList() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showConcernAreaList").show().siblings().hide();
    $("#showConcernAreaList .listWrap").slideDown("slow").siblings().hide();
    //$("#concernAreaCount").html("返回上一级(" + $("#concernAreaCountMessage").text() + ")");
    // $("#showConcernAreaList .searchTitle").html("在“" + $("#concernAreaCityName").text() + "”区域内搜索" );
    $("#concernAreaCount").hide();
    showOrHideInputImage(1);
    IntelligentRoadTest.index = 1;
    IntelligentRoadTest.currentLocation = "";
}

/**
 *  跳转到关注区域详情
 */
IntelligentRoadTest.goConcernAreaCompleteMessage = function IntelligentRoadTest_goConcernAreaCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showConcernAreaList").show().siblings().hide();
    $("#showConcernAreaList .detailList").slideDown("slow").siblings().hide();
    /*if(IntelligentRoadTest.concernAreaVM != null){
        $("#concernAreaCount").show();
    }else{
        $("#concernAreaCount").hide();
    }*/
    $("#concernAreaCount").show();
    if (IntelligentRoadTest.index == 1 || (IntelligentRoadTest.index == null && IntelligentRoadTest.senseName == null)) {
        $("#concernAreaCount").html("&lt; 返回“关注区域”的搜索结果 (" + IntelligentRoadTest.concernAreaTotalCount + "条)");
    } else {
        $("#concernAreaCount").html("返回");
    }
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "concern";
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到框选区域详情
 */
IntelligentRoadTest.goSaveAreaCompleteMessage = function IntelligentRoadTest_goSaveAreaCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showBoxSelectionList").show().siblings().hide();
    $("#showBoxSelectionList .detailList").slideDown().siblings().hide();
    // $("#concernAreaCount").html("&lt; 返回“关注区域”的搜索结果 (" + IntelligentRoadTest.concernAreaTotalCount + "条)" );
    showOrHideInputImage(1);

    if (IntelligentRoadTest.isShowAlarmInfoMessage == true) {
        $("#boxSelectionCount").show();
    }
    // IntelligentRoadTest.currentLocation = "concern";
    IntelligentRoadTest.resizeEcharts();
}
/**
 *  跳转到工单列表
 */
IntelligentRoadTest.goAlarmInfoList = function IntelligentRoadTest_goAlarmInfoList() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showAlarmInfoList").show().siblings().hide();
    $("#showAlarmInfoList .listWrap").slideDown("slow").siblings().hide();
    // $("#alarmInfoCount").html("返回上一级(" + $("#alarmInfoCountMessage").text() + ")");
    // $("#showAlarmInfoList .searchTitle").html("在“" + $("#alarmCityName").text() + "”区域内搜索" );
    $("#alarmInfoCount").hide();
    if (IntelligentRoadTest.isUseSearch == true) {
        $("#alarmInfoBack").show();
    } else {
        $("#alarmInfoBack").hide();
    }
    IntelligentRoadTest.currentLocation = null;
    showOrHideInputImage(1);
    IntelligentRoadTest.index = 2;
    IntelligentRoadTest.alarm_recover_time = null; //清空当前工单对象的恢复时间的标识字段
}

/**
 *  跳转到扇区列表
 */
IntelligentRoadTest.goSectorList = function IntelligentRoadTest_goSectorList() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showSectorList").show().siblings().hide();
    $("#showSectorList .listWrap").slideDown("slow").siblings().hide();
    // $("#sectorCount").html("返回上一级(" + $("#sectorCountMessage").text() + ")");
    // $("#showSectorList .searchTitle").html("在“" + $("#sectorCityName").text() + "”区域内搜索" );
    $("#sectorCount").hide();
    showOrHideInputImage(1);
    IntelligentRoadTest.index = IntelligentRoadTest.sectorObj.index;
    if (IntelligentRoadTest.sectorObj.name != "sector") { //专题扇区
        $("#isNewAddSector").show(); //显示是否新增的筛选条件
        $("#isFilterMrCount").show();//显示mr数量筛选
        $("#sectorRateFirst").show()//显示占比排序的条件
    } else {
        $("#isNewAddSector").hide(); //隐藏是否新增的筛选条件
        $("#isFilterMrCount").hide(); //隐藏mr数量筛选条件
        $("#sectorRateFirst").hide();//隐藏占比排序的条件
    }
    IntelligentRoadTest.currentLocation = "";
    IntelligentRoadTest.indexTmp.push(IntelligentRoadTest.sectorObj.index);
}

/**
 *  跳转到扇区详情
 */
IntelligentRoadTest.goSectorCompleteMessage = function IntelligentRoadTest_goSectorCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showSectorList").show().siblings().hide();
    $("#showSectorList .detailList").slideDown("slow").siblings().hide();
    if (IntelligentRoadTest.index == 3 || IntelligentRoadTest.index == 26 || IntelligentRoadTest.index == 27 ||
        IntelligentRoadTest.index == 28 || (IntelligentRoadTest.index == null && IntelligentRoadTest.senseName == null)) {

        /*if(IntelligentRoadTest.sectorVM != null){
            $("#sectorCount").show();
        }else{
            $("#sectorCount").hide();
        }*/
        $("#sectorCount").show();
        $("#sectorCount").html("&lt; 返回“扇区列表”的搜索结果(" + IntelligentRoadTest.sectorTotalCount + "条)");
        if(IntelligentRoadTest.showNrCover == true){ //如果在显示附近覆盖的状态下，不要返回条
            $("#sectorCount").hide();
        }
    } else {
        $("#sectorCount").html("返回");
        $("#sectorCount").show();
    }
    showOrHideInputImage(1);
    if (IntelligentRoadTest.isClickGrid == false) {
        IntelligentRoadTest.currentLocation = "sector";
        if (IntelligentRoadTest.sectorObj != null) { //根据当前所在的扇区类型设置不同的currentLocation
            IntelligentRoadTest.currentLocation = IntelligentRoadTest.sectorObj.name;
        }
    }else{
        if(IntelligentRoadTest.showNrCover && IntelligentRoadTest.mapClick){ //在显示附近覆盖时点击扇区
            IntelligentRoadTest.currentLocation = "sector";
            if (IntelligentRoadTest.sectorObj != null) { //根据当前所在的扇区类型设置不同的currentLocation
                IntelligentRoadTest.currentLocation = IntelligentRoadTest.sectorObj.name;
            }
        }
    }
    infoHeight();
}

/**
 *  跳转到DT列表
 */
IntelligentRoadTest.goDtList = function IntelligentRoadTest_goDtList() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showdtList").show().siblings().hide();
    $("#showdtList .listWrap").slideDown("slow").siblings().hide();
    // $("#dtCount").html("返回上一级(" + $("#dtCountMessage").text() + ")");
    // $("#showdtList .searchTitle").html("在“" + $("#DTCityName").text() + "”区域内搜索" );
    $("#dtCount").hide();
    showOrHideInputImage(1);
    IntelligentRoadTest.index = 4;
}


/**
 *  跳转到骨头区域列表
 */
IntelligentRoadTest.goBoneList = function IntelligentRoadTest_goBoneList() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showBoneList").show().siblings().hide();
    $("#showBoneList .listWrap").slideDown("slow").siblings().hide();
    // $("#boneAreaCount").html("返回上一级(" + $("#boneAreaCountMessage").text() + ")");
    // $("#showBoneList .searchTitle").html("在“" + $("#boneCityName").text() + "”区域内搜索" );
    $("#boneAreaCount").hide();
    showOrHideInputImage(1);
    IntelligentRoadTest.index = 5;
    IntelligentRoadTest.currentLocation = "";
}

/**
 *  跳转到骨头区域详情
 */
IntelligentRoadTest.goBoneAreaCompleteMessage = function IntelligentRoadTest_goBoneAreaCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showBoneList").show().siblings().hide();
    $("#showBoneList .detailList").slideDown("slow").siblings().hide();
    /*if(IntelligentRoadTest.boneAreaVM != null){
        $("#boneAreaCount").show();
    }else{
        $("#boneAreaCount").hide();
    }*/
    if (IntelligentRoadTest.index == 5 || (IntelligentRoadTest.index == null && IntelligentRoadTest.senseName == null)) {
        $("#boneAreaCount").html("&lt; 返回“骨头区域”的搜索结果 (" + IntelligentRoadTest.boneAreaTotalCount + "条)");
    } else {
        $("#boneAreaCount").html("返回");
    }
    $("#boneAreaCount").show();

    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "boneArea";
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到告警列表
 */
IntelligentRoadTest.goAlarmList = function IntelligentRoadTest_goAlarmList() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showAlarmList").show().siblings().hide();
    $("#showAlarmList .listWrap").slideDown("slow").siblings().hide();
    $("#alarmCount").hide();
    $("#alarmBackPoor").show();
    $("#alarmBackPoor").html("返回上一级");
}

/**
 *  跳转到告警详情
 */
IntelligentRoadTest.goAlarmCompleteMessage = function IntelligentRoadTest_goAlarmCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showAlarmList").show().siblings().hide();
    $("#showAlarmList .detailList").slideDown("slow").siblings().hide();
    $("#alarmBackPoor").hide();
    $("#alarmCount").show();
    $("#alarmCount").html("&lt; 返回“告警列表”的搜索结果(" + IntelligentRoadTest.alarmTotalCount + "条)");
    infoHeight();
}

/**
 *  跳转到KPI列表
 */
IntelligentRoadTest.goKpiList = function IntelligentRoadTest_goKpiList() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showkpiList").show().siblings().hide();
    $("#showkpiList .listWrap").slideDown("slow").siblings().hide();
    $("#kpiCount").hide();
    $("#kpiBackPoor").show();
    $("#kpiBackPoor").html("返回上一级");
}

/**
 *  跳转到KPI详情
 */
IntelligentRoadTest.goKPICompleteMessage = function IntelligentRoadTest_goKPICompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showkpiList").show().siblings().hide();
    $("#showkpiList .detailList").slideDown("slow").siblings().hide();
    $("#kpiBackPoor").hide();
    $("#kpiCount").show();
    $("#kpiCount").html("&lt; 返回“KPI列表”的搜索结果(" + IntelligentRoadTest.kpiTotalCount + "条)");
    infoHeight();
}

/**
 *  跳转到宏扇区坐标堪误
 */
IntelligentRoadTest.goMacSectorList = function IntelligentRoadTest_goMacSectorList() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showMacSectorList").show().siblings().hide();
    $("#showMacSectorList .listWrap").slideDown("slow").siblings().hide();
    // $("#macSectorCount").html("返回上一级(" + $("#macSectorCountMessage").text() + ")");
    // $("#showMacSectorList .searchTitle").html("在“" + $("#macSectorCityName").text() + "”区域内搜索" );
    $("#macSectorCount").hide();
    showOrHideInputImage(1);
    IntelligentRoadTest.index = 6;
    IntelligentRoadTest.currentLocation = "";
}

/**
 *  框选结束后显示详细页
 */
IntelligentRoadTest.goBoxSelection = function IntelligentRoadTest_goBoxSelection(cover, rsrp, poor_grid_count, gridCount) {
    $("#saveConcernAreaName").val("");
    $("#saveConcernAreaType").val("");
    IntelligentRoadTest.senseName = "saveArea";
    IntelligentRoadTest.index = 13;
    showOrHideInputImage(1);
    changeSearchPlaceholder();
    var city = $('#cityPermission_common').val();
    var create_user = $('#headerUserForm_a').text().trim();
    cover = (cover * 100).toFixed(2);
    //IntelligentRoadTest.concernAreaSevenLine();


    var points = IntelligentRoadTest.getMaxAndMinLatLng(IntelligentRoadTest.SelectionOverlay.getPath());//[maxLng , maxLat , minLng , minLat]
    var pointsarr = IntelligentRoadTest.SelectionOverlay.getPath();
    var midLng = (points[0] + points[2]) / 2;
    var midLat = (points[1] + points[3]) / 2;
    var centerPoints = {"midLng": midLng, "midLat": midLat};
    var list1 = ["IntelligentRoadTestV2_19_ConcernAreaRecentCell", "MIDLNG:" + midLng, "MIDLAT:" + midLat];
    var progressBarSqls = [];
    var functionlist = [function (data, centerPoints) {
        var result = callBackChangeData(data);
        if (IntelligentRoadTest.saveAreaCompleteVM == null) {

            IntelligentRoadTest.saveAreaCompleteVM = new Vue({
                el: '#saveAreaTop',
                data: {
                    nrTop5Cell: result,
                    centerPoints: centerPoints
                },
                methods: {
                    gotoShowSectorMessage: function (sectorDate) {
                        IntelligentRoadTest.clickType = 1;
                        IntelligentRoadTest.getSectorMessageById(sectorDate.base_statn_id, sectorDate.cell_id, IntelligentRoadTest.day);
                    },
                    showLinkCell: function (event, item, centerPoints) {
                        //type=1最近小区，type=2 接入扇区
                        if ($(event.currentTarget).hasClass("linkCellHover")) {
                            $(event.currentTarget).attr("title", "显示连线");
                            $(event.currentTarget).removeClass("linkCellHover");
                            // $(event.currentTarget).children().attr("src",norImg);
                            IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                        } else {
                            $(event.currentTarget).attr("title", "隐藏连线");
                            $(event.currentTarget).addClass("linkCellHover");
                            // $(event.currentTarget).children().attr("src",clickImg);
                            // var max_lng =
                            var centerPoint = new BMap.Point(centerPoints.midLng, centerPoints.midLat);
                            var top5_sector_set = "";
                            for (var i = 0; i < item.length; i++) {
                                top5_sector_set += item[i].base_statn_id + "," + item[i].cell_id + "," + item[i].dis + "," + 0 + "," + 0
                                if (i != item.length - 1) {
                                    top5_sector_set = top5_sector_set + "@"
                                }
                            }
                            IntelligentRoadTest.showNrTop5CellForMap(centerPoint, top5_sector_set);
                        }
                    },
                }
            });
        } else {
            IntelligentRoadTest.saveAreaCompleteVM.nrTop5Cell = result;
            IntelligentRoadTest.saveAreaCompleteVM.centerPoints = centerPoints;
        }


    }];
    progressBarSqls.push(list1);
    progressbarTwo.submitSql(progressBarSqls, functionlist, [3], [centerPoints], null, null, null, true);

    // var gis_data_baidu = IntelligentRoadTest.SelectionOverlay
    var area_path = "";
    for (var i = 0; i < pointsarr.length; i++) {
        var point = pointsarr[i];
        area_path += point.lng + "," + point.lat;
        if (i != pointsarr.length - 1) {
            area_path += "@";
        }
    }
    var data = {};

    data.min_longitude_baidu = points[2];
    data.max_longitude_baidu = points[0];
    data.min_latitude_baidu = points[3];
    data.max_latitude_baidu = points[1];
    data.gis_data_baidu = area_path;
    IntelligentRoadTest.isBoxSelectEchart = true;
    IntelligentRoadTest.concernAreaSevenLine(data, IntelligentRoadTest.day, 7);
    var cityUser = "";
    if (city == "全省") {
        cityUser = "省级";
    } else {
        cityUser = city;
    }
    $("#saveCreate").html(cityUser + create_user);
    $("#saveCity").html();
    $("#saveCover").html(cover);
    $("#saveRSRP").html(parseFloat(rsrp).toFixed(2));
    $("#savePoorGridCount").html(((poor_grid_count / (gridCount == 0 ? 1 : gridCount)) * 100).toFixed(2));
    $("#saveCenterLon").html(centerPoints.midLng);
    $("#saveCenterLat").html(centerPoints.midLat);

    IntelligentRoadTest.goSaveAreaCompleteMessage();

    //弱区保存为关注区域需要默认为其设置地市、区县和营服中心
    if (IntelligentRoadTest.isPoorAreaSaveToConcern == true) {
        //加上显示
        if (IntelligentRoadTest.rfgCompleteVM != null) {
            var poorAreaData = IntelligentRoadTest.rfgCompleteVM.poorAreaData;
            IntelligentRoadTest.setSaveAreaCompleteData(poorAreaData);
        }
    }
}

/**
 *  跳转到高速列表第一层列表
 */
IntelligentRoadTest.goHighwayFirstList = function IntelligentRoadTest_goHighwayFirstList() {
    IntelligentRoadTest.senseName = "highway";
    $(".listInfo").slideDown().siblings().hide();
    $("#showHighwayList").show().siblings().hide();
    $("#showHighwayList .showListWrap").show().siblings().hide();
    $("#showHighwayList .searchTitle").html("在“" + $("#highwayCityName").text() + "”区域内搜索");
    IntelligentRoadTest.roadIndex = 1;
    showOrHideInputImage(1);
    // IntelligentRoadTest.index  = 1 ;
    IntelligentRoadTest.currentLocation = "";
}

/**
 *  跳转到高速路段列表第二层列表
 */
IntelligentRoadTest.goHighwaySecondList = function IntelligentRoadTest_goHighwaySecondList() {
    IntelligentRoadTest.senseName = "highway";
    $(".listInfo").slideDown().siblings().hide();
    $("#showHighwayList").show().siblings().hide();
    $("#showHighwayList .showListDetail").show().siblings().hide();
    IntelligentRoadTest.roadIndex = 2;
    showOrHideInputImage(1);
    // IntelligentRoadTest.index  = 1 ;
    IntelligentRoadTest.currentLocation = "";
}

/**
 *  跳转到高速详情
 */
IntelligentRoadTest.goHighwayCompleteMessage = function IntelligentRoadTest_goHighwayListCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showHighwayList").show().siblings().hide();
    $("#showHighwayList .detailList").slideDown("slow").siblings().hide();
    IntelligentRoadTest.roadIndex = 3;
    if (IntelligentRoadTest.index == 2) {
        $("#highwayCount").html("&lt; 返回");
    } else {
        $("#highwayCount").html("&lt; 返回“路段列表”的搜索结果 (" + IntelligentRoadTest.highwaySecondListTotalCount + "条)");
    }
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "highway";
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到高铁列表 第一层
 */
IntelligentRoadTest.goRailFirstList = function IntelligentRoadTest_goRailFirstList() {
    IntelligentRoadTest.senseName = "rail";
    $(".listInfo").slideDown().siblings().hide();
    $("#showRailList").show().siblings().hide();
    $("#showRailList .showListWrap").show().siblings().hide();
    IntelligentRoadTest.roadIndex = 1;
    showOrHideInputImage(1);
    // IntelligentRoadTest.index  = 1 ;
    IntelligentRoadTest.currentLocation = "";
}

/**
 *  跳转到高铁路段列表 第二层
 */
IntelligentRoadTest.goRailSecondList = function IntelligentRoadTest_goRailSecondList() {
    IntelligentRoadTest.senseName = "rail";
    $(".listInfo").slideDown().siblings().hide();
    $("#showRailList").show().siblings().hide();
    $("#showRailList .showListDetail").show().siblings().hide();
    // $("#showRailList .searchTitle").html("在“" + $("#railCityName").text() + "”区域内搜索");
    IntelligentRoadTest.roadIndex = 2;
    showOrHideInputImage(1);
    // IntelligentRoadTest.index  = 1 ;
    IntelligentRoadTest.currentLocation = "";
}

/**
 *  跳转到高铁详情
 */
IntelligentRoadTest.goRailCompleteMessage = function IntelligentRoadTest_goRailCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showRailList").show().siblings().hide();
    $("#showRailList .detailList").slideDown("slow").siblings().hide();
    IntelligentRoadTest.roadIndex = 3;
    if (IntelligentRoadTest.index == 2) { //在工单列表跳转的
        $("#railCount").html("&lt; 返回");
    } else {
        $("#railCount").html("&lt; 返回“路段列表”的搜索结果 (" + IntelligentRoadTest.railSecondListTotalCount + "条)");
    }
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "rail";
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到高密度住宅区列表
 */
IntelligentRoadTest.goUptownList = function IntelligentRoadTest_goUptownList() {
    IntelligentRoadTest.senseName = "uptown";
    $(".listInfo").slideDown().siblings().hide();
    $("#showUptownList").show().siblings().hide();
    $("#showUptownList .listWrap").slideDown("slow").siblings().hide();
    // $("#showUptownList .searchTitle").html("在“" + $("#uptownCityName").text() + "”区域内搜索" );
    showOrHideInputImage(1);
    // IntelligentRoadTest.index  = 1 ;
    IntelligentRoadTest.currentLocation = "";
    IntelligentRoadTest.isShowAlarmInfoMessage = false;
    IntelligentRoadTest.removeEsbhPolyline(); //清除工单监测绘制出来的多边形
}

/**
 *  跳转到高密度住宅区详情
 */
IntelligentRoadTest.goUptownCompleteMessage = function IntelligentRoadTest_goUptownCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showUptownList").show().siblings().hide();
    $("#showUptownList .detailList").slideDown("slow").siblings().hide();
    $("#uptownCount").show();
    if (IntelligentRoadTest.index == 2) {
        $("#uptownCount").html("&lt; 返回");
    } else {
        $("#uptownCount").html("&lt; 返回“高密度住宅区”的搜索结果 (" + IntelligentRoadTest.uptownTotalCount + "条)");
    }
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "uptown";
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到高校列表
 */
IntelligentRoadTest.goCollegeList = function IntelligentRoadTest_goConcernAreaList() {
    IntelligentRoadTest.senseName = "college";
    $(".listInfo").slideDown().siblings().hide();
    $("#showCollegeList").show().siblings().hide();
    $("#showCollegeList .listWrap").slideDown("slow").siblings().hide();
    // $("#showCollegeList .searchTitle").html("在“" + $("#collegeCityName").text() + "”区域内搜索" );
    showOrHideInputImage(1);
    // IntelligentRoadTest.index  = 1 ;
    IntelligentRoadTest.currentLocation = "";
    IntelligentRoadTest.isShowAlarmInfoMessage = false;
    IntelligentRoadTest.removeEsbhPolyline(); //清除工单监测绘制出来的多边形
}

/**
 *  跳转到高校详情
 */
IntelligentRoadTest.goCollegeCompleteMessage = function IntelligentRoadTest_goCollegeCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showCollegeList").show().siblings().hide();
    $("#showCollegeList .detailList").slideDown("slow").siblings().hide();
    if (IntelligentRoadTest.index == 2) {
        $("#collegeCount").html("&lt; 返回");
    } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
        $("#collegeCount").html("&lt; 返回");
    } else {
        $("#collegeCount").html("&lt; 返回“高校”的搜索结果 (" + IntelligentRoadTest.collegeTotalCount + "条)");
    }
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "college";
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到新增场景列表
 */
IntelligentRoadTest.goSenseList = function IntelligentRoadTest_goConcernAreaList() {
    var name = IntelligentRoadTest.senseObject.name;
    IntelligentRoadTest.senseName = name;
    $(".listInfo").slideDown().siblings().hide();
    $("#showSenseList").show().siblings().hide();
    $("#showSenseList .listWrap").slideDown("slow").siblings().hide();
    // $("#showSenseList .searchTitle").html("在“" + $("#senseCityName").text() + "”区域内搜索" );
    showOrHideInputImage(1);
    // IntelligentRoadTest.index  = 1 ;
    IntelligentRoadTest.currentLocation = "";
    IntelligentRoadTest.isShowAlarmInfoMessage = false;
    IntelligentRoadTest.removeEsbhPolyline(); //清除工单监测绘制出来的多边形
    /*if(IntelligentRoadTest.refreshSenseList == true){
        IntelligentRoadTest.senseResult = IntelligentRoadTest.refreshSenseResult;
        IntelligentRoadTest.senseCurrentResult = IntelligentRoadTest.refreshSenseResult;
        var SelectName = $("#senseListSelectName").text();
        var flexCol = $("#senseList  .flexRow .flexCol");
        IntelligentRoadTest.triggleFilter(SelectName, flexCol);
        IntelligentRoadTest.refreshSenseList = false;
        IntelligentRoadTest.refreshSenseResult = [];
    }*/
    if(IntelligentRoadTest.index ==  21){//城中村
        var cityList = $("#senseSelectCityList > li");
        for(var i = 0; i < cityList.length ; i++){
            var cityName = $(cityList[i]).children().first().text();
            if(cityName != null && IntelligentRoadTest.hasCityVillageCity.indexOf(cityName) < 0){ //该地市不在八个拥有城中村的地市中
                $(cityList[i]).hide();
            }
        }
    }else{
        var cityList = $("#senseSelectCityList").children();
        for(var i = 0; i < cityList.length ; i++){
            $(cityList[i]).show();
        }
    }

}

/**
 *  跳转到新增场景详情
 */
IntelligentRoadTest.goSenseCompleteMessage = function IntelligentRoadTest_goSenseCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showSenseList").show().siblings().hide();
    $("#showSenseList .detailList").slideDown("slow").siblings().hide();
    var senseName = "";
    var name = "";
    if (IntelligentRoadTest.senseObject != null) {
        senseName = IntelligentRoadTest.senseObject.senseName;
        name = IntelligentRoadTest.senseObject.name;
    }

    /*if(IntelligentRoadTest.refreshSenseList == true){
        IntelligentRoadTest.senseName = name;
        IntelligentRoadTest.index  = IntelligentRoadTest.senseObject.index;
        changeSearchPlaceholder();
    }*/

    if (IntelligentRoadTest.index == 2) {
        $("#senseCount").html("&lt; 返回");
    } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
        $("#senseCount").html("&lt; 返回");
    } else {
        /*if(IntelligentRoadTest.refreshSenseList == true){
            $("#senseCount").html("&lt; 返回“" + senseName + "”的搜索结果 (" + IntelligentRoadTest.refreshSenseResult.length + "条)" );
        }else{*/
        $("#senseCount").html("&lt; 返回“" + senseName + "”的搜索结果 (" + IntelligentRoadTest.senseTotalCount + "条)");
        // }

    }
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = name;
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到地铁列表 第一层
 */
IntelligentRoadTest.goMetroFirstList = function IntelligentRoadTest_goMetroFirstList() {
    IntelligentRoadTest.senseName = "metro";
    IntelligentRoadTest.index = 15;
    $(".listInfo").slideDown().siblings().hide();
    $("#showMetroList").show().siblings().hide();
    $("#showMetroList .showListWrap").show().siblings().hide();
    $("#showMetroList .searchTitle").html("在“" + $("#metroCityName").text() + "”区域内搜索");
    showOrHideInputImage(1);
    IntelligentRoadTest.metroIndex = 1;
    // IntelligentRoadTest.index  = 1 ;
    IntelligentRoadTest.currentLocation = "";
}

/**
 *  跳转到地铁路段列表 第二层
 */
IntelligentRoadTest.goMetroSecondList = function IntelligentRoadTest_goMetroSecondList() {
    IntelligentRoadTest.senseName = "metro";
    $(".listInfo").slideDown().siblings().hide();
    $("#showMetroList").show().siblings().hide();
    $("#showMetroList .showListDetail").show().siblings().hide();
    showOrHideInputImage(1);
    IntelligentRoadTest.metroIndex = 2;
    // IntelligentRoadTest.index  = 1 ;
    IntelligentRoadTest.currentLocation = "";
}

/**
 *  跳转到地铁详情
 */
IntelligentRoadTest.goMetroCompleteMessage = function IntelligentRoadTest_goMetroCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showMetroList").show().siblings().hide();
    $("#showMetroList .detailList").slideDown("slow").siblings().hide();
    if (IntelligentRoadTest.index == 2) {
        $("#metroCount").html("&lt; 返回");
    } else {
        $("#metroCount").html("&lt; 返回“地铁”的搜索结果 (" + IntelligentRoadTest.metroSecondListTotalCount + "条)");
    }
    showOrHideInputImage(1);
    IntelligentRoadTest.metroIndex = 3;
    IntelligentRoadTest.currentLocation = "metro";
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到高流量商务区列表
 */
IntelligentRoadTest.goBusinessList = function IntelligentRoadTest_goBusinessList() {
    IntelligentRoadTest.senseName = "business";
    $(".listInfo").slideDown().siblings().hide();
    $("#showBusinessList").show().siblings().hide();
    $("#showBusinessList .listWrap").slideDown("slow").siblings().hide();
    // $("#showBusinessList .searchTitle").html("在“" + $("#businessCityName").text() + "”区域内搜索" );
    showOrHideInputImage(1);
    // IntelligentRoadTest.index  = 1 ;
    IntelligentRoadTest.currentLocation = "";
    IntelligentRoadTest.isShowAlarmInfoMessage = false;
    IntelligentRoadTest.removeEsbhPolyline(); //清除工单监测绘制出来的多边形
}

/**
 *  跳转到高流量商务区详情
 */
IntelligentRoadTest.goBusinessCompleteMessage = function IntelligentRoadTest_goBusinessCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showBusinessList").show().siblings().hide();
    $("#showBusinessList .detailList").slideDown("slow").siblings().hide();
    if (IntelligentRoadTest.index == 2) {
        $("#businessCount").html("&lt; 返回");
    } else if (IntelligentRoadTest.index == 13 && (IntelligentRoadTest.isShowAlarmInfoMessage == true || IntelligentRoadTest.isFromAlarmList == true)) {
        $("#businessCount").html("&lt; 返回");
    } else {
        $("#businessCount").html("&lt; 返回“高流量商务区”的搜索结果 (" + IntelligentRoadTest.businessTotalCount + "条)");
    }
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "business";
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到美食列表
 */
IntelligentRoadTest.goFoodList = function IntelligentRoadTest_goFoodList() {
    IntelligentRoadTest.senseName = "food";
    $(".listInfo").slideDown().siblings().hide();
    $("#showFoodList").show().siblings().hide();
    $("#showFoodList .listWrap").slideDown("slow").siblings().hide();
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "";
    IntelligentRoadTest.isShowAlarmInfoMessage = false;
    IntelligentRoadTest.removeEsbhPolyline(); //清除工单监测绘制出来的多边形
}

/**
 *  跳转到美食详情
 */
IntelligentRoadTest.goFoodCompleteMessage = function IntelligentRoadTest_goFoodCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showFoodList").show().siblings().hide();
    $("#showFoodList .detailList").slideDown("slow").siblings().hide();
    if (IntelligentRoadTest.index == 2) {
        $("#foodCount").html("&lt; 返回");
    } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
        $("#foodCount").html("&lt; 返回");
    } else {
        $("#foodCount").html("&lt; 返回“美食”的搜索结果 (" + IntelligentRoadTest.foodTotalCount + "条)");
    }
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "food";
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到美景列表
 */
IntelligentRoadTest.goSceneryList = function IntelligentRoadTest_goSceneryList() {
    IntelligentRoadTest.senseName = "scenery";
    $(".listInfo").slideDown().siblings().hide();
    $("#showSceneryList").show().siblings().hide();
    $("#showSceneryList .listWrap").slideDown("slow").siblings().hide();
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "";
    IntelligentRoadTest.isShowAlarmInfoMessage = false;
    IntelligentRoadTest.removeEsbhPolyline(); //清除工单监测绘制出来的多边形
}

/**
 *  跳转到美景详情
 */
IntelligentRoadTest.goSceneryCompleteMessage = function IntelligentRoadTest_goSceneryCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showSceneryList").show().siblings().hide();
    $("#showSceneryList .detailList").slideDown("slow").siblings().hide();
    if (IntelligentRoadTest.index == 2) {
        $("#sceneryCount").html("&lt; 返回");
    } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
        $("#sceneryCount").html("&lt; 返回");
    } else {
        $("#sceneryCount").html("&lt; 返回“美景”的搜索结果 (" + IntelligentRoadTest.sceneryTotalCount + "条)");
    }
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "scenery";
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到大型活动场馆列表
 */
IntelligentRoadTest.goSiteList = function IntelligentRoadTest_goSiteList() {
    IntelligentRoadTest.senseName = "site";
    $(".listInfo").slideDown().siblings().hide();
    $("#showSiteList").show().siblings().hide();
    $("#showSiteList .listWrap").slideDown("slow").siblings().hide();
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "";
    IntelligentRoadTest.isShowAlarmInfoMessage = false;
    IntelligentRoadTest.removeEsbhPolyline(); //清除工单监测绘制出来的多边形
}

/**
 *  跳转到大型活动场馆详情
 */
IntelligentRoadTest.goSiteCompleteMessage = function IntelligentRoadTest_goSiteCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showSiteList").show().siblings().hide();
    $("#showSiteList .detailList").slideDown("slow").siblings().hide();
    if (IntelligentRoadTest.index == 2) {
        $("#siteCount").html("&lt; 返回");
    } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
        $("#siteCount").html("&lt; 返回");
    } else {
        $("#siteCount").html("&lt; 返回“场馆”的搜索结果 (" + IntelligentRoadTest.siteTotalCount + "条)");
    }
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "site";
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到市政路列表 第一层
 */
IntelligentRoadTest.goCityRoadFirstList = function IntelligentRoadTest_goCityRoadFirstList() {
    IntelligentRoadTest.senseName = "cityRoad";
    $(".listInfo").slideDown().siblings().hide();
    $("#showCityRoadList").show().siblings().hide();
    $("#showCityRoadList .showListWrap").show().siblings().hide();
    $("#showCityRoadList .searchTitle").html("在“" + $("#cityRoadCityName").text() + "”区域内搜索");
    IntelligentRoadTest.roadIndex = 1;
    IntelligentRoadTest.currentLocation = "";
    showOrHideInputImage(1);
}

/**
 *  跳转到市政路路段列表 第二层
 */
IntelligentRoadTest.goCityRoadSecondList = function IntelligentRoadTest_goCityRoadSecondList() {
    IntelligentRoadTest.senseName = "cityRoad";
    $(".listInfo").slideDown().siblings().hide();
    $("#showCityRoadList").show().siblings().hide();
    $("#showCityRoadList .showListDetail").show().siblings().hide();
    IntelligentRoadTest.roadIndex = 2;
    IntelligentRoadTest.currentLocation = "";
    showOrHideInputImage(1);
}

/**
 *  跳转到市政路详情
 */
IntelligentRoadTest.goCityRoadCompleteMessage = function IntelligentRoadTest_goCityRoadCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showCityRoadList").show().siblings().hide();
    $("#showCityRoadList .detailList").slideDown("slow").siblings().hide();
    if (IntelligentRoadTest.index == 2) {
        $("#cityRoadCount").html("&lt; 返回");
    } else {
        $("#cityRoadCount").html("&lt; 返回“路段列表”的搜索结果 (" + IntelligentRoadTest.cityRoadSecondListTotalCount + "条)");
    }
    IntelligentRoadTest.currentLocation = "cityRoad";
    IntelligentRoadTest.roadIndex = 3;
    showOrHideInputImage(1);
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到栅格详情
 */
IntelligentRoadTest.goGridCompleteMessage = function IntelligentRoadTest_goGridCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showGridList").show().siblings().hide();
    $("#showGridList .detailList").slideDown("slow").siblings().hide();
    IntelligentRoadTest.isClickGrid = true; //标识进入详情页
    showOrHideInputImage(1);
    if(IntelligentRoadTest.showNrCover){
        $("#girdCount").hide();
    }
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到高速栅格详情
 */
IntelligentRoadTest.goHighwayGridCompleteMessage = function IntelligentRoadTest_goHighwayGridCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showHighwayGridList").show().siblings().hide();
    $("#showHighwayGridList .detailList").slideDown("slow").siblings().hide();
    IntelligentRoadTest.isClickGrid = true; //标识进入详情页
    IntelligentRoadTest.roadIndex = 4;
    showOrHideInputImage(1);
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到高铁栅格详情
 */
IntelligentRoadTest.goRailGridCompleteMessage = function IntelligentRoadTest_goRailGridCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showRailGridList").show().siblings().hide();
    $("#showRailGridList .detailList").slideDown("slow").siblings().hide();
    IntelligentRoadTest.isClickGrid = true; //标识进入详情页
    IntelligentRoadTest.roadIndex = 4;
    showOrHideInputImage(1);
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到市政路栅格详情
 */
IntelligentRoadTest.goCityRoadGridCompleteMessage = function IntelligentRoadTest_goCityRoadGridCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showCityRoadGridList").show().siblings().hide();
    $("#showCityRoadGridList .detailList").slideDown("slow").siblings().hide();
    IntelligentRoadTest.isClickGrid = true; //标识进入详情页
    IntelligentRoadTest.roadIndex = 4;
    showOrHideInputImage(1);
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到地铁78米路段详情
 */
IntelligentRoadTest.goMetro78LineCompleteMessage = function IntelligentRoadTest_goMetro78LineCompleteMessage(forwardIn) {
    $(".listInfo").slideDown().siblings().hide();
    $("#showMetro78LineList").show().siblings().hide();
    $("#showMetro78LineList .detailList").slideDown("slow").siblings().hide();
    IntelligentRoadTest.isClickGrid = true; //标识进入详情页
    if(forwardIn == true){
        IntelligentRoadTest.metroForwardIn78MeterLine = true;
    }else{
        IntelligentRoadTest.metroForwardIn78MeterLine = false
    }
    showOrHideInputImage(1);
    IntelligentRoadTest.metroIndex = 4;
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到战狼区域列表
 */
IntelligentRoadTest.goWarwolfList = function IntelligentRoadTest_goWarwolfList() {
    IntelligentRoadTest.senseName = "warwolf";
    $(".listInfo").slideDown().siblings().hide();
    $("#showWarwolfList").show().siblings().hide();
    $("#showWarwolfList .listWrap").slideDown("slow").siblings().hide();
    // $("#showWarwolfList .searchTitle").html("在“" + $("#warwolfCityName").text() + "”区域内搜索" );
    showOrHideInputImage(1);
    // IntelligentRoadTest.index  = 1 ;
    IntelligentRoadTest.currentLocation = "";
    IntelligentRoadTest.isShowAlarmInfoMessage = false;
    IntelligentRoadTest.removeEsbhPolyline(); //清除工单监测绘制出来的多边形
}

/**
 *  跳转到战狼区域详情
 */
IntelligentRoadTest.goWarwolfCompleteMessage = function IntelligentRoadTest_goWarwolfCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showWarwolfList").show().siblings().hide();
    $("#showWarwolfList .detailList").slideDown("slow").siblings().hide();
    if (IntelligentRoadTest.index == 2) {
        $("#warwolfCount").html("&lt; 返回");
    } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
        $("#warwolfCount").html("&lt; 返回");
    } else {
        $("#warwolfCount").html("&lt; 返回“战狼区域”的搜索结果 (" + IntelligentRoadTest.warwolfTotalCount + "条)");
    }
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "warwolf";
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  跳转到农贸市场列表
 */
IntelligentRoadTest.goMarketList = function IntelligentRoadTest_goMarketList() {
    IntelligentRoadTest.senseName = "market";
    $(".listInfo").slideDown().siblings().hide();
    $("#showMarketList").show().siblings().hide();
    $("#showMarketList .listWrap").slideDown("slow").siblings().hide();
    // $("#showMarketList .searchTitle").html("在“" + $("#marketCityName").text() + "”区域内搜索" );
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "";
    IntelligentRoadTest.isShowAlarmInfoMessage = false;
    IntelligentRoadTest.removeEsbhPolyline(); //清除工单监测绘制出来的多边形
}

/**
 *  跳转到农贸市场详情
 */
IntelligentRoadTest.goMarketCompleteMessage = function IntelligentRoadTest_goMarketCompleteMessage() {
    $(".listInfo").slideDown().siblings().hide();
    $("#showMarketList").show().siblings().hide();
    $("#showMarketList .detailList").slideDown("slow").siblings().hide();
    if (IntelligentRoadTest.index == 2) {
        $("#marketCount").html("&lt; 返回");
    } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
        $("#marketCount").html("&lt; 返回");
    } else {
        $("#marketCount").html("&lt; 返回“农贸市场”的搜索结果 (" + IntelligentRoadTest.marketTotalCount + "条)");
    }
    showOrHideInputImage(1);
    IntelligentRoadTest.currentLocation = "market";
    IntelligentRoadTest.resizeEcharts();
}

/**
 *  点击小箭头显示隐藏数据
 */
IntelligentRoadTest.showDetailInfo = function IntelligentRoadTest_showDetailInfo(ieEvent) {
    if (isIE()) {
        if ($(ieEvent.target).closest(".linkCell,.gotoListPage").length == 0) {
            $(ieEvent.currentTarget).siblings().toggle();
            $(ieEvent.currentTarget).find(".linkCell").toggle();
            $(ieEvent.currentTarget).find(".gotoListPage").toggle();
            if ($(ieEvent.currentTarget).find(".btn-showInfo img").hasClass("rotateImg")) {
                $(ieEvent.currentTarget).find(".btn-showInfo img").removeClass("rotateImg")
            } else {
                $(ieEvent.currentTarget).find(".btn-showInfo img").addClass("rotateImg")
            }
        }
        if (IntelligentRoadTest.alaramInfoLineEcharts != null) {
            IntelligentRoadTest.alaramInfoLineEcharts.resize();
        }
    } else {
        if ($(event.target).closest(".linkCell,.gotoListPage").length == 0) {
            $(event.currentTarget).siblings().toggle();
            $(event.currentTarget).find(".linkCell").toggle();
            $(event.currentTarget).find(".gotoListPage").toggle();
            if ($(event.currentTarget).find(".btn-showInfo img").hasClass("rotateImg")) {
                $(event.currentTarget).find(".btn-showInfo img").removeClass("rotateImg")
            } else {
                $(event.currentTarget).find(".btn-showInfo img").addClass("rotateImg")
            }
        }
        if (IntelligentRoadTest.alaramInfoLineEcharts != null) {
            IntelligentRoadTest.alaramInfoLineEcharts.resize();
        }
    }

    // IntelligentRoadTest.currentLocation = "macSector";
}

function isIE() { //ie?
    if (!!window.ActiveXObject || "ActiveXObject" in window)
        return true;
    else
        return false;
}

/**
 *  点击搜索框里面的统计图表的图标跳转到新的页面（IntelligentRoadTestChart.jsp）
 */
IntelligentRoadTest.gotoChartPage = function IntelligentRoadTest_gotoChartPage(type) {
    var appId = noceUtil.GetQueryString("appId");
    var menuId = noceUtil.GetQueryString("menuId");
    var perId = noceUtil.GetQueryString("perId");
    var appName = noceUtil.GetQueryString("appId");
    var startTime = $("#weekStartTime").text();
    var endTime = $("#seachTime").text();
    var mapCity = $("#mapCity").text();
    var mapDistrict = $("#mapDistrict").text();
    var searchSence = IntelligentRoadTest.searchSenceTxtTmp;
    if (type != null) {
        searchSence = type;
    }
    var url = "pages_index_Index_home.action?appId=" + appId + "&menuId=" + menuId +
        "&perId=" + perId + "&id_path=new&isRedirect=true&appName=" + appName + "&Analysis=3" +
        "&senceName=" + $.trim(searchSence) +
        "&day=" + startTime + "&endDay=" + endTime + "&mapCity=" + mapCity + "&mapDistrict=" + mapDistrict;
    url = encodeURI(url);
    window.open(url);
}

//---------------------------杨艳萍代码结束--------------------------------
//---------------------------林楚佳增加--------------------------------

/**********************************
 * @funcname changeSearchPlaceholder
 * @funcdesc 改变搜索框的提示文字
 * @author 林楚佳
 * @create 20180101
 * @modifier
 * @modify
 ***********************************/
function changeSearchPlaceholder() {
    if ((IntelligentRoadTest.index == null && IntelligentRoadTest.senseName == null) || IntelligentRoadTest.index == 13) {
        $("#searchText").attr("placeholder", "地名、经度,纬度、基站id_小区id");
    } else if (IntelligentRoadTest.index == 0) {
        $("#searchText").attr("placeholder", "弱区编号");
    } else if (IntelligentRoadTest.index == 24) {
        $("#searchText").attr("placeholder", "上行低速区编号");
    } else if (IntelligentRoadTest.index == 25) {
        $("#searchText").attr("placeholder", "下行低速区编号");
    } else if (IntelligentRoadTest.index == 30) {
        $("#searchText").attr("placeholder", "MOD3干扰区编号");
    } else if (IntelligentRoadTest.index == 31) {
        $("#searchText").attr("placeholder", "重叠覆盖区编号");
    } else if (IntelligentRoadTest.index == 32) {
        $("#searchText").attr("placeholder", "越区覆盖区编号");
    } else if (IntelligentRoadTest.index == 1) {
        $("#searchText").attr("placeholder", "关注区域名称");
    } else if (IntelligentRoadTest.index == 2) {
        $("#searchText").attr("placeholder", "告警内容");
    } else if (IntelligentRoadTest.index == 3 ||
        IntelligentRoadTest.index == 26 || IntelligentRoadTest.index == 27 || IntelligentRoadTest.index == 28) {
        $("#searchText").attr("placeholder", "扇区名称、基站id_小区id");
    } else if (IntelligentRoadTest.index == 4) {
        $("#searchText").attr("placeholder", "DT名称");
    } else if (IntelligentRoadTest.index == 5) {
        $("#searchText").attr("placeholder", "骨头区域名称");
    } else if (IntelligentRoadTest.index == 6) {
        $("#searchText").attr("placeholder", "基站名称、基站id_小区id");
    } else if (IntelligentRoadTest.senseName == "college") {
        $("#searchText").attr("placeholder", "高校名称");
    } else if (IntelligentRoadTest.senseName == "uptown") {
        $("#searchText").attr("placeholder", "高密度住宅区名称");
    } else if (IntelligentRoadTest.senseName == "business") {
        $("#searchText").attr("placeholder", "高流量商务区名称");
    } else if (IntelligentRoadTest.senseName == "warwolf") {
        $("#searchText").attr("placeholder", "战狼区域");
    } else if (IntelligentRoadTest.senseName == "market") {
        $("#searchText").attr("placeholder", "农贸市场");
    } else if (IntelligentRoadTest.senseName == "scenery") {
        $("#searchText").attr("placeholder", "美景名称");
    } else if (IntelligentRoadTest.senseName == "highway") {
        $("#searchText").attr("placeholder", "高速名称");
    } else if (IntelligentRoadTest.senseName == "rail") {
        $("#searchText").attr("placeholder", "高铁名称");
    } else if (IntelligentRoadTest.senseName == "cityRoad") {
        $("#searchText").attr("placeholder", "市政路名称");
    } else if (IntelligentRoadTest.senseName == "metro") {
        $("#searchText").attr("placeholder", "地铁");
    } else if (IntelligentRoadTest.senseName == "food") {
        $("#searchText").attr("placeholder", "美食名称");
    } else if (IntelligentRoadTest.senseName == "site") {
        $("#searchText").attr("placeholder", "场馆名称");
    } else if (IntelligentRoadTest.senseName == "school") {
        $("#searchText").attr("placeholder", "中小学名称");
    } else if (IntelligentRoadTest.senseName == "cityVillage") {
        $("#searchText").attr("placeholder", "城中村名称");
    } else if (IntelligentRoadTest.senseName == "village") {
        $("#searchText").attr("placeholder", "自然村名称");
    } else if (IntelligentRoadTest.senseName == "factory") {
        $("#searchText").attr("placeholder", "工厂名称");
    } else if (IntelligentRoadTest.index == 29) {
        $("#searchText").attr("placeholder", "工单单号/栅格编号");
    }
}

/**

 */
/**********************************
 * @funcname showOrHideInputImage
 * @funcdesc 显示搜索框的X图标或者加载中的图标
 * @param {Int} type
 type 为 1 的时候表示显示X
 type 为 2的时候表示显示loading图标
 type 为其他的时候两个都隐藏
 * @author 林楚佳
 * @create 20180101
 ***********************************/
function showOrHideInputImage(type) {
    if (type == 1) {
        if (IntelligentRoadTest.senseName != null || IntelligentRoadTest.index != null || IntelligentRoadTest.currentLocation != "" || IntelligentRoadTest.isClickGrid == true || IntelligentRoadTest.showNrCover == true) {
            $(".clearText").show();
            $(".chartTotal").show();
        }
        $(".search_loading").hide();
    } else if (type == 2) {
        $(".clearText").hide();
        $(".search_loading").show();
        $(".chartTotal").show();
    } else {
        $(".search_loading").hide();
        $(".clearText").hide();
        $(".chartTotal").hide();
    }
}

/**
 * 根据输入框的值判断是否隐藏掉搜索结果框
 */
function hideSearchResult() {
    if ($('#searchText').val().trim() != "") {
        $('#searchResult').show();
    }
}

/**
 * 返回主菜单时清除地图上的描点或者栅格数据
 */
function clearDTGridData() {
    IntelligentRoadTest.GridMap.clear(); //DT列表返回主菜单时清除图层
    //清除描点数据
    IntelligentRoadTest.GridMapCircleDataArr = null;
    IntelligentRoadTest.GridMapCircleDataArr = [];
    IntelligentRoadTest.GridCanArrT = null;
    IntelligentRoadTest.GridCanArrM = null;
    IntelligentRoadTest.GridCanArrU = null;
    IntelligentRoadTest.CanArr = null;

    IntelligentRoadTest.GridCanArrT = [];
    IntelligentRoadTest.GridCanArrM = [];
    IntelligentRoadTest.GridCanArrU = [];
    IntelligentRoadTest.CanArr = [];
}

//--------------梁杰禹增加----------------
//------------置顶上移下移置底 start----------------
//$('#layerUl').sortable();
//置顶方法
IntelligentRoadTest.layerSetTop = function IntelligentRoadTest_layerSetTop(layerA) {
    var obj = $('#layerUl').find("li.P_current");
    var list = $('#layerUl').find("li");
    if (obj.length > 0) {
        var thisLocation = list.index(obj);
        if (thisLocation < 1) {
            alert('已移到最顶端了！');
        } else {
            // console.log (thisLocation);
            obj.parent().prepend(obj);  //移动到最顶
        }
    } else {
        alert('请选择要【置顶】的列！');
    }
}

//上移方法
IntelligentRoadTest.layerSetUp = function IntelligentRoadTest_layerSetUp(layerA) {
    var obj = $('#layerUl').find("li.P_current");
    var list = $('#layerUl').find("li");
    if (obj.length > 0) {
        var thisLocation = list.index(obj);
        if (thisLocation < 1) {
            alert('已移到最顶端了！');
        } else {
            obj.prev().before(obj); //上移动
        }
    } else {
        alert('请选择要【上移】的列！');
    }
}

//下移方法
IntelligentRoadTest.layerSetDown = function IntelligentRoadTest_layerSetDown(layerA) {
    var obj = $('#layerUl').find("li.P_current");
    var list = $('#layerUl').find("li");
    if (obj.length > 0) {
        var thisLocation = list.index(obj);
        if (thisLocation >= list.length - 1) {
            alert('已移到最底端了！');
        } else {
            obj.next().after(obj); //下移动
        }
    } else {
        alert('请选择要【下移】的列！');
    }
}

//置底方法
IntelligentRoadTest.layerSetBottom = function IntelligentRoadTest_layerSetBottom(layerA) {
    var obj = $('#layerUl').find("li.P_current");
    var list = $('#layerUl').find("li");
    if (obj.length > 0) {
        var thisLocation = list.index(obj);
        if (thisLocation >= list.length - 1) {
            alert('已移到最底端了！');
        } else {
            obj.parent().append(obj);   //移动到最底
        }
    } else {
        alert('请选择要【置底】的列！');
    }
}
//------------置顶上移下移置底 end----------------
//坐标拾取工具结束事件
IntelligentRoadTest.coordinatePickToolFinish = function () {
    if (!IntelligentRoadTest.coordinatePickTool.isUseTool) {
        IntelligentRoadTest.editImgSrc($("#coordinatePick"));
    }
}

//测距测角结束触发事件
IntelligentRoadTest.bmapDistanceToolFinish = function IntelligentRoadTest_bmapDistanceToolFinish() {
    if (!IntelligentRoadTest.bmapDistanceTool.isUseTool) {
        IntelligentRoadTest.editImgSrc($("#gageDistance"));
    }
}


//测距测角结束触发事件
IntelligentRoadTest.osmMapDistanceToolFinish = function IntelligentRoadTest_osmMapDistanceToolFinish() {
    if (!IntelligentRoadTest.osmDistanceTool.isUseTool) {
        IntelligentRoadTest.editImgSrc($("#gageDistance"));
    }
}

//根据上一次点击确定保存的选项还原图层选中状态
IntelligentRoadTest.revertCheckboxSelect = function IntelligentRoadTest_revertCheckboxSelect() {
    if (IntelligentRoadTest.isShowSector) {
        if (!$('#sector').is(':checked')) {
            $('#sector').attr("checked");
        }
    } else {
        if ($('#sector').is(':checked')) {
            $('#sector').removeAttr("checked");
        }
    }

    if (IntelligentRoadTest.isShowPoorArea) {
        if (!$('#poor').is(':checked')) {
            $('#poor').attr("checked");
        }
    } else {
        if ($('#poor').is(':checked')) {
            $('#poor').removeAttr("checked");
        }
    }

    if (IntelligentRoadTest.isShowAreaGrid) {
        if (!$('#grid').is(':checked')) {
            $('#grid').attr("checked");
        }
    } else {
        if ($('#grid').is(':checked')) {
            $('#grid').removeAttr("checked");
        }
    }
}
IntelligentRoadTest.initCityList = function IntelligentRoadTest_initCityList() {
    var dtCityStr = "";
    var concernAreaStr = "";
    var boneAreaStr = "";
    var alarmStr = "";
    var macSector = "";
    var highwayStr = "";
    var railStr = "";
    var uptownStr = "";
    var collegeStr = "";
    var metroStr = "";
    var businessStr = "";
    var warwolfStr = "";
    var marketStr = "";
    var foodStr = "";
    var sceneryStr = "";
    var siteStr = "";
    var cityRoadStr = "";

    if (IntelligentRoadTest.cityPermission_common == '全省') {
        dtCityStr += '<li class="current" onclick="IntelligentRoadTest.DTChangeCity(\'全省\')"><a href="javascript:;">全省</a></li>';
        railStr += '<li class="current" onclick="IntelligentRoadTest.roadChangeCity(\'全省\' , 2)"><a href="javascript:;">全省</a></li>';
//        concernAreaStr += '<li onclick="IntelligentRoadTest.concernAreaChangeCity(\'全省\')"><a href="javascript:;">全省</a></li>';
        // alarmStr += '<li><a href="javascript:;">全省</a></li>';
//        boneAreaStr += '<li onclick="IntelligentRoadTest.boneAreaChangeCity(\'全省\')"><a href="javascript:;">全省</a></li>';
        $('#DTCityName').text("全省"); //DT列表如果是全省用户默认查询全省的数据
        $('#railCityName').text("全省"); //DT列表如果是全省用户默认查询全省的数据
        for (var i = 0; i < IntelligentRoadTest.allCity.length; i++) {
            if (IntelligentRoadTest.allCity[i] == IntelligentRoadTest.city) {
                dtCityStr += '<li  onclick="IntelligentRoadTest.DTChangeCity(\'' + IntelligentRoadTest.allCity[i] + '\')"><a href="javascript:;">' + IntelligentRoadTest.allCity[i] + '</a></li>';
//                concernAreaStr += '<li class="current" onclick="IntelligentRoadTest.concernAreaChangeCity(\''+IntelligentRoadTest.allCity[i]+'\')"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
                alarmStr += '<li class="current" onclick="IntelligentRoadTest.alarmChangeCity(\'' + IntelligentRoadTest.allCity[i] + '\')"><a href="javascript:;">' + IntelligentRoadTest.allCity[i] + '</a></li>';
//                boneAreaStr += '<li class="current" onclick="IntelligentRoadTest.boneAreaChangeCity(\''+IntelligentRoadTest.allCity[i]+'\')"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                macSector += '<li class="current" onclick="IntelligentRoadTest.macSectorChangeCity(\''+IntelligentRoadTest.allCity[i]+'\')"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                $('#concernAreaCityName').text(IntelligentRoadTest.allCity[i]);
                $('#alarmCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#boneCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#macSectorCityName').text(IntelligentRoadTest.allCity[i]);

                highwayStr += '<li class="current" onclick="IntelligentRoadTest.roadChangeCity(\'' + IntelligentRoadTest.allCity[i] + '\' , 1)"><a href="javascript:;">' + IntelligentRoadTest.allCity[i] + '</a></li>';
                railStr += '<li  onclick="IntelligentRoadTest.roadChangeCity(\'' + IntelligentRoadTest.allCity[i] + '\' , 2)"><a href="javascript:;">' + IntelligentRoadTest.allCity[i] + '</a></li>';
                cityRoadStr += '<li class="current" onclick="IntelligentRoadTest.roadChangeCity(\'' + IntelligentRoadTest.allCity[i] + '\' , 3)"><a href="javascript:;">' + IntelligentRoadTest.allCity[i] + '</a></li>';
//                uptownStr +='<li class="current" onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 2)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                collegeStr += '<li class="current" onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 1)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                businessStr +='<li class="current" onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 3)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                warwolfStr +='<li class="current" onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 3)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                marketStr +='<li class="current" onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 8)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                foodStr +='<li class="current" onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 9)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                sceneryStr +='<li class="current" onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 7)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                siteStr +='<li class="current" onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 10)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
                $('#highwayCityName').text(IntelligentRoadTest.allCity[i]);
                $('#railCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#uptownCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#collegeCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#businessCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#warwolfCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#marketCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#foodCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#sceneryCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#siteCityName').text(IntelligentRoadTest.allCity[i]);
                $('#cityRoadCityName').text(IntelligentRoadTest.allCity[i]);
            } else {
                dtCityStr += '<li onclick="IntelligentRoadTest.DTChangeCity(\'' + IntelligentRoadTest.allCity[i] + '\')"><a href="javascript:;">' + IntelligentRoadTest.allCity[i] + '</a></li>';
//                concernAreaStr +='<li onclick="IntelligentRoadTest.concernAreaChangeCity(\''+IntelligentRoadTest.allCity[i]+'\')"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
                alarmStr += '<li onclick="IntelligentRoadTest.alarmChangeCity(\'' + IntelligentRoadTest.allCity[i] + '\')"><a href="javascript:;">' + IntelligentRoadTest.allCity[i] + '</a></li>';
//                boneAreaStr +='<li onclick="IntelligentRoadTest.boneAreaChangeCity(\''+IntelligentRoadTest.allCity[i]+'\')"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                macSector +='<li onclick="IntelligentRoadTest.macSectorChangeCity(\''+IntelligentRoadTest.allCity[i]+'\')"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';

                highwayStr += '<li onclick="IntelligentRoadTest.roadChangeCity(\'' + IntelligentRoadTest.allCity[i] + '\' , 1)"><a href="javascript:;">' + IntelligentRoadTest.allCity[i] + '</a></li>';
                railStr += '<li  onclick="IntelligentRoadTest.roadChangeCity(\'' + IntelligentRoadTest.allCity[i] + '\' , 2)"><a href="javascript:;">' + IntelligentRoadTest.allCity[i] + '</a></li>';
                cityRoadStr += '<li  onclick="IntelligentRoadTest.roadChangeCity(\'' + IntelligentRoadTest.allCity[i] + '\' , 3)"><a href="javascript:;">' + IntelligentRoadTest.allCity[i] + '</a></li>';
//                uptownStr +='<li  onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 2)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                collegeStr += '<li  onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 1)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                businessStr +='<li  onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 3)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                warwolfStr +='<li  onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 3)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                marketStr +='<li  onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 8)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                foodStr +='<li  onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 9)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                sceneryStr +='<li  onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 7)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                siteStr +='<li  onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 10)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
            }

        }
    } else {
        for (var i = 0; i < IntelligentRoadTest.allCity.length; i++) {
            if (IntelligentRoadTest.allCity[i] == IntelligentRoadTest.city) {
                dtCityStr += '<li class="current" onclick="IntelligentRoadTest.DTChangeCity(\'' + IntelligentRoadTest.allCity[i] + '\')"><a href="javascript:;">' + IntelligentRoadTest.allCity[i] + '</a></li>';
//                concernAreaStr += '<li class="current" onclick="IntelligentRoadTest.concernAreaChangeCity(\''+IntelligentRoadTest.allCity[i]+'\')"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
                alarmStr += '<li class="current" onclick="IntelligentRoadTest.alarmChangeCity(\'' + IntelligentRoadTest.allCity[i] + '\')"><a href="javascript:;">' + IntelligentRoadTest.allCity[i] + '</a></li>';
//                boneAreaStr += '<li class="current" onclick="IntelligentRoadTest.boneAreaChangeCity(\''+IntelligentRoadTest.allCity[i]+'\')"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                macSector += '<li class="current" onclick="IntelligentRoadTest.macSectorChangeCity(\''+IntelligentRoadTest.allCity[i]+'\')"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';

                highwayStr += '<li class="current" onclick="IntelligentRoadTest.roadChangeCity(\'' + IntelligentRoadTest.allCity[i] + '\' , 1)"><a href="javascript:;">' + IntelligentRoadTest.allCity[i] + '</a></li>';
                railStr += '<li class="current" onclick="IntelligentRoadTest.roadChangeCity(\'' + IntelligentRoadTest.allCity[i] + '\' , 2)"><a href="javascript:;">' + IntelligentRoadTest.allCity[i] + '</a></li>';
                cityRoadStr += '<li class="current" onclick="IntelligentRoadTest.roadChangeCity(\'' + IntelligentRoadTest.allCity[i] + '\' , 3)"><a href="javascript:;">' + IntelligentRoadTest.allCity[i] + '</a></li>';

//                uptownStr +='<li class="current" onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 2)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                collegeStr += '<li class="current" onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 1)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                businessStr +='<li class="current" onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 3)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                warwolfStr +='<li class="current" onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 3)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                marketStr +='<li class="current" onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 8)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                foodStr +='<li class="current" onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 9)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                sceneryStr +='<li class="current" onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 7)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';
//                siteStr +='<li class="current" onclick="IntelligentRoadTest.senseChangeCity(\''+IntelligentRoadTest.allCity[i]+'\' , 10)"><a href="javascript:;">'+IntelligentRoadTest.allCity[i]+'</a></li>';


//                $('#concernAreaCityName').text(IntelligentRoadTest.allCity[i]);
                $('#alarmCityName').text(IntelligentRoadTest.allCity[i]);
                $('#DTCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#boneCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#macSectorCityName').text(IntelligentRoadTest.allCity[i]);
                $('#highwayCityName').text(IntelligentRoadTest.allCity[i]);
                $('#railCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#uptownCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#collegeCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#businessCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#warwolfCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#marketCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#foodCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#sceneryCityName').text(IntelligentRoadTest.allCity[i]);
//                $('#siteCityName').text(IntelligentRoadTest.allCity[i]);
                $('#cityRoadCityName').text(IntelligentRoadTest.allCity[i]);
            }
        }
    }

    //地铁地市列表初始化，全省用户和有地铁的地市才可以进行选择
    if (IntelligentRoadTest.cityPermission_common == '全省') {
        for (var i = 0; i < IntelligentRoadTest.MetroCityList.length; i++) {
            if (IntelligentRoadTest.MetroCityList[i] == IntelligentRoadTest.city) {
                metroStr += '<li class="current" onclick="IntelligentRoadTest.metroChangeCity(\'' + IntelligentRoadTest.MetroCityList[i] + '\')"><a href="javascript:;">' + IntelligentRoadTest.MetroCityList[i] + '</a></li>';
                $('#metroCityName').text(IntelligentRoadTest.MetroCityList[i]);
            } else {
                metroStr += '<li  onclick="IntelligentRoadTest.metroChangeCity(\'' + IntelligentRoadTest.MetroCityList[i] + '\')"><a href="javascript:;">' + IntelligentRoadTest.MetroCityList[i] + '</a></li>';
            }
        }
    } else {
        for (var i = 0; i < IntelligentRoadTest.MetroCityList.length; i++) {
            if (IntelligentRoadTest.MetroCityList[i] == IntelligentRoadTest.city) {
                metroStr += '<li class="current" onclick="IntelligentRoadTest.metroChangeCity(\'' + IntelligentRoadTest.MetroCityList[i] + '\')"><a href="javascript:;">' + IntelligentRoadTest.MetroCityList[i] + '</a></li>';
                $('#metroCityName').text(IntelligentRoadTest.MetroCityList[i]);
            }
        }
    }


//    $('#concernAreaSelectCityList').html(concernAreaStr);
    $('#alarmSelectCityList').html(alarmStr);
    $('#DTCitySelectList').html(dtCityStr);
//    $('#boneCitySelectList').html(boneAreaStr);
//    $('#macSectorCitySelectList').html(macSector);
    $('#highwaySelectCityList').html(highwayStr);
    $('#railSelectCityList').html(railStr);
    $('#railSecondSelectCityList').html(railStr); //高铁第二层也增加一个这样的地市选择框
//    $('#uptownSelectCityList').html(uptownStr);
//    $('#collegeSelectCityList').html(collegeStr);
    $('#metroSelectCityList').html(metroStr);
//    $('#businessSelectCityList').html(businessStr);
//    $('#warwolfSelectCityList').html(warwolfStr);
//    $('#marketSelectCityList').html(marketStr);
//    $('#foodSelectCityList').html(foodStr);
//    $('#scenerySelectCityList').html(sceneryStr);
//    $('#siteSelectCityList').html(siteStr);
    $('#cityRoadSelectCityList').html(cityRoadStr);

    // 城市列表点击事件
    $(".city-list > li").unbind("click").bind("click", function () {
        $(this).addClass("current").siblings().removeClass("current");
        // $(".select-name").removeClass("selectName");
        // $(this).parents(".selectCity").find(".city-selected").text($(this).text()+"市");
        $(this).parents(".selectCity").find(".city-selected").text($(this).children('a').text());
        $(this).parents(".city-info").hide();
    });
    /*$("#metroSelectCityList > li > a").each(function(i){
        var ciset#metroSelectCityList > li > a").eq(i).text();
        $("#metroSelectCityList > li").attr("onclick",IntelligentRoadTest.metroChangeCity('东莞'))
        if(cityText == "广州" || cityText == "深圳" || cityText == "东莞" || cityText == "佛山"){
            //
        }else {
            $(this).parent().addClass("unClick");
            $(this).parent().removeAttr('onclick');
            $(this).parent().unbind('click');
        }
    });*/
}

//查询区县名称、id和轮廓
IntelligentRoadTest.loadDistrictJsonData = function IntelligentRoadTest_loadDistrictJsonData() {
    var isSuppottLocalStorage = isLocalStorageSupported(); //判断是否可以使用localStorage
    if (isSuppottLocalStorage) {//检查浏览器是否支持localStorage，不支持则乖乖的去查询
        var districtGisData = JSON.parse(localStorage.getItem("NOCEDistrictGisData"));
        var isSaveForLocalStorage = false;

        if (districtGisData == undefined) {//如果本地没有存储，则需要将数据进行存储
            isSaveForLocalStorage = true;
            var list = ["Common_05_districtJson"];
            var progressBarSqls = [];
            progressBarSqls.push(list);
            var functionlist = [IntelligentRoadTest.handleDistrictJson];
            progressbarTwo.submitSql(progressBarSqls, functionlist, [3], [isSaveForLocalStorage], null, null, null, true);
        } else {
            if (districtGisData.version == noceUtil.districtGisDataVersion) {
                IntelligentRoadTest.handleDistrictJson(districtGisData.data);
            } else {
                isSaveForLocalStorage = true;
                var list = ["Common_05_districtJson"];
                var progressBarSqls = [];
                progressBarSqls.push(list);
                var functionlist = [IntelligentRoadTest.handleDistrictJson];
                progressbarTwo.submitSql(progressBarSqls, functionlist, [3], [isSaveForLocalStorage], null, null, null, true);
            }

        }
    } else {
        var list = ["Common_05_districtJson"];
        var progressBarSqls = [];
        progressBarSqls.push(list);
        var functionlist = [IntelligentRoadTest.handleDistrictJson];
        progressbarTwo.submitSql(progressBarSqls, functionlist, [3], null, null, null, true);
    }


};
//对区县名称、id和轮廓数据进行处理
IntelligentRoadTest.handleDistrictJson = function IntelligentRoadTest_handleDistrictJson(data, isSaveForLocalStorage) {
    var result = callBackChangeData(data);

    if (isSaveForLocalStorage) {//需要将数据存储到localStorage中，将gis_data的数据进行重构，只保留小数点后4位
        var newResult = [];
        for (var i = 0; i < result.length; i++) {
            var gis_data = result[i].gis_data_baidu;
            var gisPoints = gis_data.split("|");
            var districtPoints = [];
            for (var k = 0; k < gisPoints.length; k++) {
                var PointArr = [];
                var points = gisPoints[k].split("@");
                for (var j = 0; j < points.length; j++) {
                    var point = points[j].split(",");
                    var lng = parseFloat(point[0]).toFixed(4);
                    var lat = parseFloat(point[1]).toFixed(4);
                    var p = lng + "," + lat;
                    PointArr.push(p);
                }
                var pointArrString = PointArr.join("@");
                districtPoints.push(pointArrString);
//                console.log(pointArrString);
            }
            var new_gis_data = districtPoints.join("|");
            result[i].gis_data_baidu = new_gis_data;
        }

        var reverseData = reverseDataForCallBackDataUtil(result);
//
        var saveData = {};
        saveData.version = noceUtil.districtGisDataVersion;
        saveData.data = reverseData;
//		console.log(JSON.stringify(saveData));

        if (IsPC()) {
            localStorage.setItem("NOCEDistrictGisData", JSON.stringify(saveData));
        }
        saveData = null;
        reverseData = null;
    }

    var districtJson = {};
    var districtLngAndLat = {};
    //{"广州":{"天河":"","白云":"",...},...}
    var city_name = "";
    var positionEnd = true;
    for (var i = 0; i < result.length; i++) {
        if (i == 0) {
            city_name = result[i].city_name;
            districtJson[city_name] = {};
            districtLngAndLat[city_name] = {};
        }

        if (city_name == result[i].city_name) {
            districtJson[city_name][result[i].district_name] = result[i].gis_data_baidu;
            districtLngAndLat[city_name][result[i].district_name] = {};
            districtLngAndLat[city_name][result[i].district_name]["max_lng"] = result[i].baidu_max_longitude;
            districtLngAndLat[city_name][result[i].district_name]["min_lng"] = result[i].baidu_min_longitude;
            districtLngAndLat[city_name][result[i].district_name]["max_lat"] = result[i].baidu_maxlatitude;
            districtLngAndLat[city_name][result[i].district_name]["min_lat"] = result[i].baidu_minlatitude;
            districtLngAndLat[city_name][result[i].district_name]["id"] = result[i].district_id;
        } else {
            city_name = result[i].city_name;
            districtJson[city_name] = {};
            districtJson[city_name][result[i].district_name] = result[i].gis_data_baidu;

            districtLngAndLat[city_name] = {};
            districtLngAndLat[city_name][result[i].district_name] = {};
            districtLngAndLat[city_name][result[i].district_name]["max_lng"] = result[i].baidu_max_longitude;
            districtLngAndLat[city_name][result[i].district_name]["min_lng"] = result[i].baidu_min_longitude;
            districtLngAndLat[city_name][result[i].district_name]["max_lat"] = result[i].baidu_maxlatitude;
            districtLngAndLat[city_name][result[i].district_name]["min_lat"] = result[i].baidu_minlatitude;
            districtLngAndLat[city_name][result[i].district_name]["id"] = result[i].district_id;
        }
        if (!positionEnd) {
            if (city_name == IntelligentRoadTest.city) {
                if (IntelligentRoadTest.district != null) {
                    if (result[i].district_name == IntelligentRoadTest.district) {
                        var mid_lng = parseFloat((result[i].baidu_max_longitude + result[i].baidu_min_longitude) / 2).toFixed(6);
                        var mid_lat = parseFloat((result[i].baidu_maxlatitude + result[i].baidu_minlatitude) / 2).toFixed(6);
                        IntelligentRoadTest.map.panTo(new BMap.Point(mid_lng, mid_lat), {noAnimation: false});
                        positionEnd = true;
                        $('#mapCity').text(IntelligentRoadTest.city);
                        $('#mapDistrict').text(IntelligentRoadTest.district);

                        $('#poorAreaCityName').text(IntelligentRoadTest.city);
                        $('#poorAreaDistrictName').text(IntelligentRoadTest.district);

                        $('#sectorCityName').text(IntelligentRoadTest.city);
                        $('#sectorDistrictName').text(IntelligentRoadTest.district);
                    }
                } else {
                    var mid_lng = (result[i].baidu_max_longitude + result[i].baidu_min_longitude) / 2;
                    var mid_lat = (result[i].baidu_maxlatitude + result[i].baidu_minlatitude) / 2;
                    IntelligentRoadTest.map.panTo(new BMap.Point(mid_lng, mid_lat), {noAnimation: false});
                    positionEnd = true;
                    IntelligentRoadTest.district = result[i].district_name;
                    $('#mapCity').text(IntelligentRoadTest.city);
                    $('#mapDistrict').text(IntelligentRoadTest.district);

                    $('#poorAreaCityName').text(IntelligentRoadTest.city);
                    $('#poorAreaDistrictName').text(IntelligentRoadTest.district);

                    $('#sectorCityName').text(IntelligentRoadTest.city);
                    $('#sectorDistrictName').text(IntelligentRoadTest.district);

                }

            }
        }


    }


    // IntelligentRoadTest.districtJson = districtJson;
    //{"广州":{"天河":{"max_lng":"","min_lng":"","max_lat":"","min_lat":"","id":""}},......}
    IntelligentRoadTest.districtLngAndLat = districtLngAndLat;
    IntelligentRoadTest.initDistrictSelectList(districtLngAndLat);
    IntelligentRoadTest.initDistrictPolygon(districtJson);//将区县生成多边形，用于地图在拖拽后更新页面顶部中间的位置

    data = null;
    districtJson = null;
    districtLngAndLat = null;
    IntelligentRoadTest.initCityList();//初始化地市列表  关注区域、dt列表、工单
    IntelligentRoadTest.handleDistrictJsonIsComplete = true;
}
//对地市区县选择进行初始化
IntelligentRoadTest.initDistrictSelectList = function IntelligentRoadTest_initDistrictSelectList(districtLngAndLat) {
    // var city='';
    var str = '';
    var poorAreaStr = '';
    var sectorStr = '';
    for (var currentCity in districtLngAndLat) {
        var districtObj = districtLngAndLat[currentCity];
        str += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
        for (var currentCountry in districtObj) {
            str += '<li onclick="IntelligentRoadTest.mapPositioningByDistrict(\'' + currentCity + '\',\'' + currentCountry + '\')"><a href="javascript:;">' + currentCountry + '</a></li>';
        }
        str += '</ul></li>';
        if (IntelligentRoadTest.cityPermission_common == '全省') {
            // str += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            poorAreaStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            sectorStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            //{"广州":{"天河":{"max_lng":"","min_lng":"","max_lat":"","min_lat":"","id":""}},......}
            // var districtObj = districtLngAndLat[currentCity];
            for (var currentCountry in districtObj) {
                // str += '<li onclick="IntelligentRoadTest.mapPositioningByDistrict(\'' + currentCity + '\',\'' + currentCountry + '\')"><a href="javascript:;">' + currentCountry + '</a></li>';
                poorAreaStr += '<li onclick="IntelligentRoadTest.poorAreaChangeDistrict(\'' + currentCity + '\',\'' + currentCountry + '\')"><a href="javascript:;">' + currentCountry + '</a></li>';
                sectorStr += '<li onclick="IntelligentRoadTest.sectorChangeDistrict(\'' + currentCity + '\',\'' + currentCountry + '\')"><a href="javascript:;">' + currentCountry + '</a></li>';
            }
            // str += '</ul></li>';
            poorAreaStr += '</ul></li>';
            sectorStr += '</ul></li>';
        } else {
            if (currentCity == IntelligentRoadTest.cityPermission_common) {
                // str += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
                poorAreaStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
                sectorStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
                //{"广州":{"天河":{"max_lng":"","min_lng":"","max_lat":"","min_lat":"","id":""}},......}
                // var districtObj = districtLngAndLat[currentCity];
                for (var currentCountry in districtObj) {
                    // str += '<li onclick="IntelligentRoadTest.mapPositioningByDistrict(\'' + currentCity + '\',\'' + currentCountry + '\')"><a href="javascript:;">' + currentCountry + '</a></li>';
                    poorAreaStr += '<li onclick="IntelligentRoadTest.poorAreaChangeDistrict(\'' + currentCity + '\',\'' + currentCountry + '\')"><a href="javascript:;">' + currentCountry + '</a></li>';
                    sectorStr += '<li onclick="IntelligentRoadTest.sectorChangeDistrict(\'' + currentCity + '\',\'' + currentCountry + '\')"><a href="javascript:;">' + currentCountry + '</a></li>';
                }
                // str += '</ul></li>';
                poorAreaStr += '</ul></li>';
                sectorStr += '</ul></li>';
            }
        }


    }
    $('#allcity').html(str);
    $('#poorAreaSelectCityList').html(poorAreaStr);
    $('#sectorCitySelectList').html(sectorStr);

    IntelligentRoadTest.districtSelectBindEvent("topCitySelect");
    IntelligentRoadTest.districtSelectBindEvent("poorAreaSelectCity");
    IntelligentRoadTest.districtSelectBindEvent("sectorCitySelect");

    //默认加载弱区轮廓
    //从概览页进来默认加载弱区图层

    /*if(IntelligentRoadTest.pageLoadIsShowPoor){
        $('#poor').attr('checked',true);
        IntelligentRoadTest.submitLayersData();
    }*/
//
}
//根据传入的id绑定事件
IntelligentRoadTest.districtSelectBindEvent = function IntelligentRoadTest_districtSelectBindEvent(selectId) {
    /*地市列表*/
    $("#" + selectId + " .cityName > li").on("mouseover", function () {
        $(this).addClass("selectedCity").siblings().removeClass("selectedCity");
        $("#" + selectId + " .districtName").hide();
        $(this).children(".districtName").show();
    });

    // 区县列表
    $("#" + selectId + " .cityName .districtName li").on("click", function () {
        $("#" + selectId + " .districtName li").removeClass("selected");
        $(this).addClass("selected");
        $(this).parents("li").addClass("selectedCity").siblings().removeClass("selectedCity");
        $("#" + selectId + " .districtName").hide();
        $(this).parent().show();
        $("#" + selectId + " .city-selected").text($(this).parent().siblings().text());
        $("#" + selectId + " .district-selected").text($(this).children().text());
        $("#" + selectId + " .mktcenter-selected").text();
        $("#" + selectId + " .city-selected").show();
        $("#" + selectId + " .city-selected-gt").show();
        $("#" + selectId + " .mktcenter-selected").hide();
        $("#" + selectId + " .mktcenter-selected-gt").hide();
        $("#" + selectId + " .city-info").hide();
    });

    /*三级地市列表点击*/
    $("#" + selectId + " .threeLevel > li").on("click", function () {
        $(".selectedCity").removeClass("selectedCity");
        $(this).addClass("selectedCity");
        var cityName = $(this).children().text();
        if (cityName == '全省') {
            $("#" + selectId + " .city-selected").text(cityName);
            $("#" + selectId + " .district-selected").text(cityName);
            $("#" + selectId + " .mktcenter-selected").text('');
            $("#" + selectId + " .city-selected-gt").show();
            $("#" + selectId + " .city-selected").show();
            $("#" + selectId + " .mktcenter-selected-gt").hide();
            $("#" + selectId + " .mktcenter-selected").hide();
            $("#" + selectId + " .city-info").hide();
        }

        $("#" + selectId + " .districtName").hide();
        $(this).children(".districtName").show();
    });

    /*三级区县*/
    $("#" + selectId + " .threeLevel .districtName > li > a").on("mouseover click", function (e) {
        $("#" + selectId + " .districtName > li a").removeClass("selected");
        $(this).addClass("selected");
        $("#" + selectId + " .yfcenterName").hide();
        $(this).siblings(".yfcenterName").show();
        e.stopPropagation();
    });

    // 三级营服中心
    $("#" + selectId + " .yfcenterName li").on("click", function (e) {
        $("#" + selectId + " .yfcenterName li").removeClass("selected");
        $(this).addClass("selected");
        $(this).parents("li").addClass("selectedCity").siblings().removeClass("selectedCity");
        $("#" + selectId + " .yfcenterName").hide();
        $(this).parent().show();
        e.stopPropagation();
        var city = $("#" + selectId + " .threeLevel").children('.selectedCity').children('a').text();
        $("#" + selectId + " .city-selected").text(city);
        var districtName = $(this).parent().siblings().text();
        var mktName = $(this).children().text();
        if (districtName.length > 3) {
            districtName = districtName.substring(0, 1) + "..." + districtName.substring(districtName.length - 1);
        }
        if (mktName.length > 3) {
            mktName = mktName.substring(0, 1) + "..." + mktName.substring(mktName.length - 1);
        }
        $("#" + selectId + " .district-selected").text(districtName);
        $("#" + selectId + " .mktcenter-selected").text(mktName);
        if ($(this).children().text() == '全区') {
            $("#" + selectId + " .city-selected-gt").show();
            $("#" + selectId + " .city-selected").show();
            $("#" + selectId + " .mktcenter-selected-gt").hide();
            $("#" + selectId + " .mktcenter-selected").hide();
            $("#" + selectId + " .city-info").hide();
        } else if ($(this).children().text() == '全市') {//将营服设置为全区
            $("#" + selectId + " .district-selected").text('全市');
            $("#" + selectId + " .city-selected-gt").show();
            $("#" + selectId + " .city-selected").show();
            $("#" + selectId + " .mktcenter-selected-gt").hide();
            $("#" + selectId + " .mktcenter-selected").hide();
            $("#" + selectId + " .mktcenter-selected").text('全区');
            $("#" + selectId + " .city-info").hide();
        } else {
            $("#" + selectId + " .city-selected-gt").hide();
            $("#" + selectId + " .city-selected").hide();
            $("#" + selectId + " .mktcenter-selected-gt").show();
            $("#" + selectId + " .mktcenter-selected").show();
            $("#" + selectId + " .city-info").hide();
        }
    });


}

//查询全省的营服进行缓存，（不查询轮廓）
IntelligentRoadTest.loadMktCenterData = function IntelligentRoadTest_loadMktCenterData() {
    /*if (window.localStorage) {//检查浏览器是否支持localStorage，不支持则乖乖的去查询
        var mkcenterData = JSON.parse(localStorage.getItem("NOCEMktcenterData"));
        var isSaveForLocalStorage = false;

        if (mkcenterData == undefined) {//如果本地没有存储，则需要将数据进行存储
            isSaveForLocalStorage = true;
            var list = ["Common_04_city_area_mkt_NameAndId"];
            var progressBarSqls = [];
            progressBarSqls.push(list);
            var functionlist = [IntelligentRoadTest.handleMktcenterJson];
            progressbarTwo.submitSql(progressBarSqls, functionlist, [3], [isSaveForLocalStorage], null, null, null, true);
        } else {
            if (mkcenterData.version == noceUtil.districtGisDataVersion) {
                IntelligentRoadTest.handleMktcenterJson(mkcenterData.data);
            } else {
                isSaveForLocalStorage = true;
                var list = ["Common_04_city_area_mkt_NameAndId"];
                var progressBarSqls = [];
                progressBarSqls.push(list);
                var functionlist = [IntelligentRoadTest.handleMktcenterJson];
                progressbarTwo.submitSql(progressBarSqls, functionlist, [3], [isSaveForLocalStorage], null, null, null, true);
            }

        }
    } else {*/
        var list = ["Common_04_city_area_mkt_NameAndId"];
        var progressBarSqls = [];
        progressBarSqls.push(list);
        var functionlist = [IntelligentRoadTest.handleMktcenterJson];
        progressbarTwo.submitSql(progressBarSqls, functionlist, [3], null, null, null, true);
    // }
}


IntelligentRoadTest.handleMktcenterJson = function IntelligentRoadTest_handleMktcenterJson(data, isSaveForLocalStorage) {
    var result = callBackChangeData(data);
    /*if (isSaveForLocalStorage) {
        var saveData = {};
        saveData.version = noceUtil.districtGisDataVersion;
        saveData.data = data;
//		console.log(JSON.stringify(saveData));
        localStorage.setItem("NOCEMktcenterData", JSON.stringify(saveData));
        saveData = null;
    }*/

    var mktcenterDataChe = {};
    var city = "", district_id = "", marketbase = "";
    var districtArr = [];
    var districtObj = {};
    for (var i = 0; i < result.length; i++) {
        city = result[i].city_name;
        district_id = result[i].district_id + "_" + result[i].district_name;
        marketbase = {
            "id": result[i].mktcen_id,
            "name": result[i].mktcen_name,
            "max_lng": result[i].max_lng,
            "max_lat": result[i].max_lat,
            "min_lng": result[i].min_lng,
            "min_lat": result[i].min_lat
        };
        if (null == mktcenterDataChe[city]) {//city缓存的数据为null
            districtObj = {};
            var marketbaseArr = [];
            marketbaseArr.push(marketbase);//营服中心数组
            districtObj[district_id] = marketbaseArr;//区县对象
            mktcenterDataChe[city] = districtObj;//缓存区县营服中心数据
        } else {//city缓存的数据不为null
            districtObj = mktcenterDataChe[city];//从缓存取该city的区县对象
            if (null == districtObj[district_id]) {//如果区县对象为空，定义营服中心数组并加值，否则给区县对象的营服中心数据加值
                var marketbaseArr = [];
                marketbaseArr.push(marketbase);//营服中心数组
                districtObj[district_id] = marketbaseArr;
            } else {
                districtObj[district_id].push(marketbase);
            }
        }
    }
//	console.log(mktcenterDataChe);
    IntelligentRoadTest.mktcenterLngAndLat = mktcenterDataChe;
    mktcenterDataChe = null;

    IntelligentRoadTest.initMktcenterSelect();
}

/**
 * 初始化带有营服中心的地市列表
 */
IntelligentRoadTest.initMktcenterSelect = function IntelligentRoadTest_initMktcenterSelect() {
    var poorAreaStr = '';
    var sectorStr = '';
    var concernAreaStr = "";
    var boneAreaStr = "";
    var macSector = "";
    var uptownStr = "";
    var collegeStr = "";
    var businessStr = "";
    var warwolfStr = "";
    var marketStr = "";
    var foodStr = "";
    var sceneryStr = "";
    var siteStr = "";
    var senseStr = "";
    var userComplainStr = "";
    //poorAreaSelectCityList
    if (IntelligentRoadTest.cityPermission_common == '全省') {
        concernAreaStr += '<li onclick="IntelligentRoadTest.concernAreaChangeCity(\'全省\')"><a href="javascript:;">全省</a></li>';
        boneAreaStr += '<li onclick="IntelligentRoadTest.boneAreaChangeCity(\'全省\')"><a href="javascript:;">全省</a></li>';
        for (var currentCity in IntelligentRoadTest.mktcenterLngAndLat) {
            poorAreaStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            sectorStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            concernAreaStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            boneAreaStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            macSector += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            uptownStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            collegeStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            businessStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            warwolfStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            marketStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            foodStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            sceneryStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            siteStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            senseStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            userComplainStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
            var districtObj = IntelligentRoadTest.mktcenterLngAndLat[currentCity];
            var isAllCountry = true;
            for (var currentCountry in districtObj) {
                var country_id = currentCountry.split('_')[0];
                var country_name = currentCountry.split('_')[1];
                if (isAllCountry) {
                    poorAreaStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.poorAreaChangeDistrict(\'' + currentCity + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                    concernAreaStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.concernAreaChangeCity(\'' + currentCity + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                    boneAreaStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.boneAreaChangeCity(\'' + currentCity + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                    macSector += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.macSectorChangeCity(\'' + currentCity + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                    uptownStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',2,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                    collegeStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',1,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                    businessStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',3,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                    warwolfStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',3,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                    marketStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',8,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                    foodStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',9,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                    sceneryStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',7,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                    siteStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',10,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                    senseStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',11,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                    userComplainStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.userComplainChangeCity(\'' + currentCity + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                    isAllCountry = false;
                }
                //currentCountry:id_name
                poorAreaStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
                sectorStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
                concernAreaStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
                boneAreaStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
                macSector += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
                uptownStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
                collegeStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
                businessStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
                warwolfStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
                marketStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
                foodStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
                sceneryStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
                siteStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
                senseStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
                userComplainStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层

                var mktcenter = districtObj[currentCountry];//营服数组
                for (var i = 0; i < mktcenter.length; i++) {
                    if (i == 0) {
                        poorAreaStr += '<li onclick="IntelligentRoadTest.poorAreaChangeDistrict(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                        sectorStr += '<li onclick="IntelligentRoadTest.sectorChangeDistrict(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                        concernAreaStr += '<li onclick="IntelligentRoadTest.concernAreaChangeCity(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                        boneAreaStr += '<li onclick="IntelligentRoadTest.boneAreaChangeCity(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                        macSector += '<li onclick="IntelligentRoadTest.macSectorChangeCity(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                        uptownStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',2,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                        collegeStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',1,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                        businessStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',3,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                        warwolfStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',3,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                        marketStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',8,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                        foodStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',9,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                        sceneryStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',7,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                        siteStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',10,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                        senseStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',11,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                        userComplainStr += '<li onclick="IntelligentRoadTest.userComplainChangeCity(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                    }
                    poorAreaStr += '<li onclick="IntelligentRoadTest.poorAreaChangeDistrict(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                    sectorStr += '<li onclick="IntelligentRoadTest.sectorChangeDistrict(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                    concernAreaStr += '<li onclick="IntelligentRoadTest.concernAreaChangeCity(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                    boneAreaStr += '<li onclick="IntelligentRoadTest.boneAreaChangeCity(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                    macSector += '<li onclick="IntelligentRoadTest.macSectorChangeCity(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                    uptownStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',2,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                    collegeStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',1,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                    businessStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',3,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                    warwolfStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',3,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                    marketStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',8,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                    foodStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',9,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                    sceneryStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',7,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                    siteStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',10,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                    senseStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',11,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                    userComplainStr += '<li onclick="IntelligentRoadTest.userComplainChangeCity(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                }
                poorAreaStr += '</ul></li>';//结束营服层
                sectorStr += '</ul></li>';//结束营服层
                concernAreaStr += '</ul></li>';//结束营服层
                boneAreaStr += '</ul></li>';//结束营服层
                macSector += '</ul></li>';//结束营服层
                uptownStr += '</ul></li>';//结束营服层
                collegeStr += '</ul></li>';//结束营服层
                businessStr += '</ul></li>';//结束营服层
                warwolfStr += '</ul></li>';//结束营服层
                marketStr += '</ul></li>';//结束营服层
                foodStr += '</ul></li>';//结束营服层
                sceneryStr += '</ul></li>';//结束营服层
                siteStr += '</ul></li>';//结束营服层
                senseStr += '</ul></li>';//结束营服层
                userComplainStr += '</ul></li>';//结束营服层
            }
            poorAreaStr += '</ul></li>';//结束区县层
            sectorStr += '</ul></li>';//结束区县层
            concernAreaStr += '</ul></li>';//结束区县层
            boneAreaStr += '</ul></li>';//结束区县层
            macSector += '</ul></li>';//结束区县层
            uptownStr += '</ul></li>';//结束区县层
            collegeStr += '</ul></li>';//结束区县层
            businessStr += '</ul></li>';//结束区县层
            warwolfStr += '</ul></li>';//结束区县层
            marketStr += '</ul></li>';//结束区县层
            foodStr += '</ul></li>';//结束区县层
            sceneryStr += '</ul></li>';//结束区县层
            siteStr += '</ul></li>';//结束区县层
            senseStr += '</ul></li>';//结束区县层
            userComplainStr += '</ul></li>';//结束区县层
        }
    } else {
        var districtObj = IntelligentRoadTest.mktcenterLngAndLat[IntelligentRoadTest.cityPermission_common];
        var currentCity = IntelligentRoadTest.cityPermission_common;
        poorAreaStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
        sectorStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
        concernAreaStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
        boneAreaStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
        macSector += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
        uptownStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
        collegeStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
        businessStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
        warwolfStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
        marketStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
        foodStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
        sceneryStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
        siteStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
        senseStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
        userComplainStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="districtName">';
        var isAllCountry = true;
        for (var currentCountry in districtObj) {
            var country_id = currentCountry.split('_')[0];
            var country_name = currentCountry.split('_')[1];
            //currentCountry:id_name
            if(!isNull(IntelligentRoadTest.countryPermission_common) && country_name != IntelligentRoadTest.countryPermission_common){
                continue;
            }
            if (isAllCountry && isNull(IntelligentRoadTest.countryPermission_common)) {
                poorAreaStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.poorAreaChangeDistrict(\'' + currentCity + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                concernAreaStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.concernAreaChangeCity(\'' + currentCity + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                boneAreaStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.boneAreaChangeCity(\'' + currentCity + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                macSector += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.macSectorChangeCity(\'' + currentCity + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                uptownStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',2,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                collegeStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',1,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                businessStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',3,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                warwolfStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',3,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                marketStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',8,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                foodStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',9,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                sceneryStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',7,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                siteStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',10,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                senseStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',11,\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                userComplainStr += '<li><a href="javascript:;">' + currentCity + '</a><ul class="yfcenterName"><li onclick="IntelligentRoadTest.userComplainChangeCity(\'' + currentCity + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全市</a></li></ul></li>';
                isAllCountry = false;
            }

            poorAreaStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
            sectorStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
            concernAreaStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
            boneAreaStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
            macSector += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
            uptownStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
            collegeStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
            businessStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
            warwolfStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
            marketStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
            foodStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
            sceneryStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
            siteStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
            senseStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
            userComplainStr += '<li><a href="javascript:;">' + country_name + '</a><ul class="yfcenterName">';//区县层//营服层
            var mktcenter = districtObj[currentCountry];//营服数组
            for (var i = 0; i < mktcenter.length; i++) {
                if (i == 0) {
                    poorAreaStr += '<li onclick="IntelligentRoadTest.poorAreaChangeDistrict(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                    sectorStr += '<li onclick="IntelligentRoadTest.sectorChangeDistrict(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                    concernAreaStr += '<li onclick="IntelligentRoadTest.concernAreaChangeCity(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                    boneAreaStr += '<li onclick="IntelligentRoadTest.boneAreaChangeCity(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                    macSector += '<li onclick="IntelligentRoadTest.macSectorChangeCity(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                    uptownStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',2,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                    collegeStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',1,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                    businessStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',3,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                    warwolfStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',3,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                    marketStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',8,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                    foodStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',9,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                    sceneryStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',7,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                    siteStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',10,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                    senseStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',11,\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                    userComplainStr += '<li onclick="IntelligentRoadTest.userComplainChangeCity(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + null + '\',\'' + null + '\')"><a href="javascript:;">全区</a></li>';
                }
                poorAreaStr += '<li onclick="IntelligentRoadTest.poorAreaChangeDistrict(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                sectorStr += '<li onclick="IntelligentRoadTest.sectorChangeDistrict(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                concernAreaStr += '<li onclick="IntelligentRoadTest.concernAreaChangeCity(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                boneAreaStr += '<li onclick="IntelligentRoadTest.boneAreaChangeCity(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                macSector += '<li onclick="IntelligentRoadTest.macSectorChangeCity(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                uptownStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',2,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                collegeStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',1,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                businessStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',3,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                warwolfStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',3,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                marketStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',8,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                foodStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',9,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                sceneryStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',7,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                siteStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',10,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                senseStr += '<li onclick="IntelligentRoadTest.senseChangeCity(\'' + currentCity + '\',11,\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
                userComplainStr += '<li onclick="IntelligentRoadTest.userComplainChangeCity(\'' + currentCity + '\',\'' + country_id + '\',\'' + country_name + '\',\'' + mktcenter[i].id + '\',\'' + mktcenter[i].name + '\')"><a href="javascript:;">' + mktcenter[i].name + '</a></li>';
            }
            poorAreaStr += '</ul></li>';//结束营服层
            sectorStr += '</ul></li>';//结束营服层
            concernAreaStr += '</ul></li>';//结束营服层
            boneAreaStr += '</ul></li>';//结束营服层
            macSector += '</ul></li>';//结束营服层
            uptownStr += '</ul></li>';//结束营服层
            collegeStr += '</ul></li>';//结束营服层
            businessStr += '</ul></li>';//结束营服层
            warwolfStr += '</ul></li>';//结束营服层
            marketStr += '</ul></li>';//结束营服层
            foodStr += '</ul></li>';//结束营服层
            sceneryStr += '</ul></li>';//结束营服层
            siteStr += '</ul></li>';//结束营服层
            senseStr += '</ul></li>';//结束营服层
            userComplainStr += '</ul></li>';//结束营服层
        }
        concernAreaStr += '</ul></li>';//结束区县层
        boneAreaStr += '</ul></li>';//结束区县层
        macSector += '</ul></li>';//结束区县层
        uptownStr += '</ul></li>';//结束区县层
        collegeStr += '</ul></li>';//结束区县层
        businessStr += '</ul></li>';//结束区县层
        warwolfStr += '</ul></li>';//结束区县层
        marketStr += '</ul></li>';//结束区县层
        foodStr += '</ul></li>';//结束区县层
        sceneryStr += '</ul></li>';//结束区县层
        siteStr += '</ul></li>';//结束区县层
        senseStr += '</ul></li>';//结束区县层
        userComplainStr += '</ul></li>';//结束区县层

    }

    $('#poorAreaSelectCityList').html(poorAreaStr);
    $('#sectorCitySelectList').html(sectorStr);
    $('#concernAreaSelectCityList').html(concernAreaStr);
    $('#boneCitySelectList').html(boneAreaStr);
    $('#macSectorCitySelectList').html(macSector);
    $('#uptownSelectCityList').html(uptownStr);
    $('#collegeSelectCityList').html(collegeStr);
    $('#businessSelectCityList').html(businessStr);
    $('#warwolfSelectCityList').html(warwolfStr);
    $('#marketSelectCityList').html(marketStr);
    $('#foodSelectCityList').html(foodStr);
    $('#scenerySelectCityList').html(sceneryStr);
    $('#siteSelectCityList').html(siteStr);
    $('#senseSelectCityList').html(senseStr);
    $('#userComplainCitySelectList').html(userComplainStr);

    IntelligentRoadTest.districtSelectBindEvent("poorAreaSelectCity");
    IntelligentRoadTest.districtSelectBindEvent("sectorCitySelect");

    IntelligentRoadTest.districtSelectBindEvent("concernAreaSelectCity");
    IntelligentRoadTest.districtSelectBindEvent("boneCitySelect");
    IntelligentRoadTest.districtSelectBindEvent("macSectorCitySelect");
    IntelligentRoadTest.districtSelectBindEvent("uptownSelectCity");
    IntelligentRoadTest.districtSelectBindEvent("collegeSelectCity");
    IntelligentRoadTest.districtSelectBindEvent("businessSelectCity");
    IntelligentRoadTest.districtSelectBindEvent("warwolfSelectCity");
    IntelligentRoadTest.districtSelectBindEvent("marketSelectCity");
    IntelligentRoadTest.districtSelectBindEvent("foodSelectCity");
    IntelligentRoadTest.districtSelectBindEvent("scenerySelectCity");
    IntelligentRoadTest.districtSelectBindEvent("siteSelectCity");
    IntelligentRoadTest.districtSelectBindEvent("senseSelectCity");
    IntelligentRoadTest.districtSelectBindEvent("userComplainCitySelect");

}


//生成区县轮廓的多边形，用于判断地图拖拽结束后中心点所在的区县，更新页面顶部中间的区域状态
IntelligentRoadTest.initDistrictPolygon = function IntelligentRoadTest_initDistrictPolygon(districtJson) {
    for (var city in districtJson) {
        var districtObj = districtJson[city];
        for (var district in districtObj) {
            var gis = districtObj[district];
            var id = IntelligentRoadTest.districtLngAndLat[city][district]["id"];
            var name = district;
            var max_lng = IntelligentRoadTest.districtLngAndLat[city][district].max_lng;
            var max_lat = IntelligentRoadTest.districtLngAndLat[city][district].max_lat;
            var min_lng = IntelligentRoadTest.districtLngAndLat[city][district].min_lng;
            var min_lat = IntelligentRoadTest.districtLngAndLat[city][district].min_lat;
            var gisPoints = gis.split("|");
            for (var i = 0; i < gisPoints.length; i++) {
                var PointArr = [];
                var points = gisPoints[i].split("@");
                for (var j = 0; j < points.length; j++) {
                    var point = points[j].split(",");
                    var p = new BMap.Point(point[0], point[1]);
                    PointArr.push(p);
                }

                var districtPolygon = new BMap.Polygon(PointArr); //建立多边形覆盖物
                var points = districtPolygon.getPath();
                var bounds = districtPolygon.getBounds();
                var districtObject = {};
                districtObject.id = id;
                districtObject.city = city;
                districtObject.name = name;
                districtObject.bounds = bounds;
                districtObject.points = points;
                districtPolygon = null;
//				districtPolygon.max_lng = max_lng;
//				districtPolygon.max_lat = max_lat;
//				districtPolygon.min_lng = min_lng;
//				districtPolygon.min_lat = min_lat;
                IntelligentRoadTest.DistrictPolygon.push(districtObject);
            }
        }
    }

    //补充调用一次定位所在的区县
    IntelligentRoadTest.locationCityAndDirict();//定位用户当前所在的地市和区县，将地市和区县按照定位进行更新
}



/**********************************
 * @funcname mapPositioningByDistrict2
 * @funcdesc 点击搜索标题
 * @param {datatype} nameOfParameter (input/output optional)
 descriptionOfParameter
 * @return {datatype}
 * @author laijunbao
 * @create 2018/01/07 0007 9:50
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.mapPositioningByDistrict2 = function IntelligentRoadTest_mapPositioningByDistrict2(city, district) {

    var tmp = '"' + city + ">" + district + '"';
    // $(".searchTitle").text("在" + tmp + "内搜索");

    //上部分
    if (IntelligentRoadTest.clickFlag) {
        //表示图标的位置， 0 表示弱区 、 1表示关注区域  2表示工单  3.扇区  4表示DT列表
        if (IntelligentRoadTest.index == 0 || IntelligentRoadTest.index == 24 || IntelligentRoadTest.index == 25 || IntelligentRoadTest.index == 30 || IntelligentRoadTest.index == 31 || IntelligentRoadTest.index == 32) {
            $('#poorAreaCityName').text(city);
            $('#poorAreaDistrictName').text(district);
            $('#poorAreaMktName').text('全区');
            $('#poorAreaSelectCity .city-selected').show();
            $('#poorAreaSelectCity .city-selected-gt').show();
            $('#poorAreaSelectCity .mktcenter-selected-gt').hide();
            $('#poorAreaSelectCity .mktcenter-selected').hide();
            IntelligentRoadTest.loadmktCenterAreaTableData(city, district, null, IntelligentRoadTest.day, null);
        } else if (IntelligentRoadTest.index == 1) {
            $('#concernAreaCityName').text(city);
            $('#concernAreaDistrictName').text('全市');
            $('#concernAreaMktName').text('全区');
            $('#concernAreaSelectCity .city-selected').show();
            $('#concernAreaSelectCity .city-selected-gt').show();
            $('#concernAreaSelectCity .mktcenter-selected-gt').hide();
            $('#concernAreaSelectCity .mktcenter-selected').hide();
            IntelligentRoadTest.queryAllConcernArea();
        } else if (IntelligentRoadTest.index == 2) {
            $('#alarmCityName').text(city);
            var startTime = $('#weekStartTime').text().trim();
            var endTime = IntelligentRoadTest.day;
            IntelligentRoadTest.loadAlarmInfoTableData(startTime, endTime, city, "", null);
        } else if (IntelligentRoadTest.index == 3 ||
            IntelligentRoadTest.index == 26 || IntelligentRoadTest.index == 27 || IntelligentRoadTest.index == 28) {
            $('#sectorCityName').text(city);
            $('#sectorDistrictName').text(district);
            $('#sectorMktName').text('全区');
            $('#sectorCitySelect .city-selected').show();
            $('#sectorCitySelect .city-selected-gt').show();
            $('#sectorCitySelect .mktcenter-selected-gt').hide();
            $('#sectorCitySelect .mktcenter-selected').hide();
            IntelligentRoadTest.loadSectorData();
        } else if (IntelligentRoadTest.index == 4) {
            $('#DTCityName').text(city);
            IntelligentRoadTest.initDTData();
        } else if (IntelligentRoadTest.index == 5) {
            $('#boneCityName').text(city);
            $('#boneDistrictName').text('全市');
            $('#boneMktName').text('全区');
            $('#boneCitySelect .city-selected').show();
            $('#boneCitySelect .city-selected-gt').show();
            $('#boneCitySelect .mktcenter-selected-gt').hide();
            $('#boneCitySelect .mktcenter-selected').hide();
            IntelligentRoadTest.queryAllBoneArea();
        } else if (IntelligentRoadTest.index == 6) {
            $('#macSectorCityName').text(city);
            $('#macSectorDistrictName').text('全市');
            $('#macSectorMktName').text('全区');
            $('#macSectorCitySelect .city-selected').show();
            $('#macSectorCitySelect .city-selected-gt').show();
            $('#macSectorCitySelect .mktcenter-selected-gt').hide();
            $('#macSectorCitySelect .mktcenter-selected').hide();
            IntelligentRoadTest.loadMacSectorListData();
        }
    }
    //五高那部分
    else {
        IntelligentRoadTest.city = city;
        if (IntelligentRoadTest.senseName == "highway") {
            //高速
            $('#highwayCityName').text(city);
            IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day, 1
                , IntelligentRoadTest.highwayVM.type);
            // IntelligentRoadTest.loadLineByLevelFromBounds();
            IntelligentRoadTest.goHighwayFirstList();
        } else if (IntelligentRoadTest.senseName == "rail") {
            //高铁
            $('#railCityName').text(city);
            IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day, 2
                , IntelligentRoadTest.railVM.type);
            // IntelligentRoadTest.loadLineByLevelFromBounds();
            IntelligentRoadTest.goRailFirstList();
        } else if (IntelligentRoadTest.senseName == "cityRoad") {
            //市政路
            $('#cityRoadCityName').text(city);
            IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day, 3
                , IntelligentRoadTest.cityRoadVM.type);
            // IntelligentRoadTest.loadLineByLevelFromBounds();
            IntelligentRoadTest.goCityRoadFirstList();
        } else if (IntelligentRoadTest.senseName == "uptown") {
            //住宅区
            IntelligentRoadTest.goUptownList();
            $('#uptownDistrictName').text('全市');
            $('#uptownMktName').text('全区');
            $('#uptownSelectCity .city-selected').show();
            $('#uptownSelectCity .city-selected-gt').show();
            $('#uptownSelectCity .mktcenter-selected-gt').hide();
            $('#uptownSelectCity .mktcenter-selected').hide();
            // var city = $("#uptownCityName").text();
            if (IntelligentRoadTest.uptownCurrentSelectConditon == "") {
                showOrHideInputImage(2);
                IntelligentRoadTest.getSenseDataByObjectId(2, IntelligentRoadTest.city, IntelligentRoadTest.day);
            } else {
                var condition = "" + city + IntelligentRoadTest.day;
                if (condition == IntelligentRoadTest.uptownCurrentSelectConditon) {//无需重新查询数据
                    console.log("无需重新查询数据");
                } else {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.uptownVM.uptownList = null;
                    $('#uptownCityName').text(city);
                    IntelligentRoadTest.getSenseDataByObjectId(2, IntelligentRoadTest.city, IntelligentRoadTest.day);
                }
            }
            var timer = setInterval(function () {
                if (IntelligentRoadTest.uptownVM != null && IntelligentRoadTest.uptownVM.uptownList != null) {
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.uptownVM.uptownList, 9);//
                    clearInterval(timer);
                    showOrHideInputImage(1);

                    //搜索标题更新
                    // IntelligentRoadTest.searchTxtUpdate();
                }
            }, 500);
        } else if (IntelligentRoadTest.senseName == "college") {
            //高校
            IntelligentRoadTest.goCollegeList();
            $('#collegeDistrictName').text('全市');
            $('#collegeMktName').text('全区');
            $('#collegeSelectCity .city-selected').show();
            $('#collegeSelectCity .city-selected-gt').show();
            $('#collegeSelectCity .mktcenter-selected-gt').hide();
            $('#collegeSelectCity .mktcenter-selected').hide();
            // var city = $("#collegeCityName").text();
            if (IntelligentRoadTest.collegeCurrentSelectConditon == "") {
                showOrHideInputImage(2);
                IntelligentRoadTest.getSenseDataByObjectId(1, IntelligentRoadTest.city, IntelligentRoadTest.day);
            } else {
                var condition = "" + city + IntelligentRoadTest.day;
                if (condition == IntelligentRoadTest.collegeCurrentSelectConditon) {//无需重新查询数据
                    console.log("无需重新查询数据");
                } else {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.collegeVM.collegeList = null;
                    $('#collegeCityName').text(city);
                    IntelligentRoadTest.getSenseDataByObjectId(1, IntelligentRoadTest.city, IntelligentRoadTest.day);
                }
            }
            var timer = setInterval(function () {
                if (IntelligentRoadTest.collegeVM != null && IntelligentRoadTest.collegeVM.collegeList != null) {
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.collegeVM.collegeList, 10);//
                    clearInterval(timer);
                    showOrHideInputImage(1);

                    //搜索标题更新
                    // IntelligentRoadTest.searchTxtUpdate();
                }
            }, 500);
        } else if (IntelligentRoadTest.senseName == "metro") {
            //地铁
            $("#metroCityName").text(city);
            IntelligentRoadTest.getMetroFirstListData(city, IntelligentRoadTest.day);
            IntelligentRoadTest.getMetroStationsData(city, IntelligentRoadTest.day, true);
        } else if (IntelligentRoadTest.senseName == "business") {
            //商务区
            IntelligentRoadTest.goBusinessList();
            $('#businessDistrictName').text('全市');
            $('#businessMktName').text('全区');
            $('#businessSelectCity .city-selected').show();
            $('#businessSelectCity .city-selected-gt').show();
            $('#businessSelectCity .mktcenter-selected-gt').hide();
            $('#businessSelectCity .mktcenter-selected').hide();
            // var city = $("#businessCityName").text();
            if (IntelligentRoadTest.businessCurrentSelectConditon == "") {
                showOrHideInputImage(2);
                IntelligentRoadTest.getSenseDataByObjectId(3, IntelligentRoadTest.city, IntelligentRoadTest.day);
            } else {
                var condition = "" + city + IntelligentRoadTest.day;
                if (condition == IntelligentRoadTest.businessCurrentSelectConditon) {//无需重新查询数据
                    console.log("无需重新查询数据");
                } else {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.businessVM.businessList = null;
                    $("#businessCityName").text(city);
                    IntelligentRoadTest.getSenseDataByObjectId(3, IntelligentRoadTest.city, IntelligentRoadTest.day);
                }
            }
            var timer = setInterval(function () {
                if (IntelligentRoadTest.businessVM != null && IntelligentRoadTest.businessVM.businessList != null) {
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.businessVM.businessList, 11);//
                    clearInterval(timer);
                    showOrHideInputImage(1);

                    //搜索标题更新
                    IntelligentRoadTest.searchTxtUpdate();
                }
            }, 500);
        } else if (IntelligentRoadTest.senseName == "warwolf") {
            //战狼区域
            IntelligentRoadTest.goWarwolfList();
            $('#warwolfDistrictName').text('全市');
            $('#warwolfMktName').text('全区');
            $('#warwolfSelectCity .city-selected').show();
            $('#warwolfSelectCity .city-selected-gt').show();
            $('#warwolfSelectCity .mktcenter-selected-gt').hide();
            $('#warwolfSelectCity .mktcenter-selected').hide();
            if (IntelligentRoadTest.warwolfCurrentSelectConditon == "") {
                showOrHideInputImage(2);
                IntelligentRoadTest.getWarwolfListData(IntelligentRoadTest.day, IntelligentRoadTest.city, 3);
            } else {
                var condition = "" + city + IntelligentRoadTest.day;
                if (condition == IntelligentRoadTest.warwolfCurrentSelectConditon) {//无需重新查询数据
                    console.log("无需重新查询数据");
                } else {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.warwolfVM.warwolfList = null;
                    $("#warwolfCityName").text(city);
                    IntelligentRoadTest.getWarwolfListData(IntelligentRoadTest.day, IntelligentRoadTest.city, 3);
                }
            }
            var timer = setInterval(function () {
                if (IntelligentRoadTest.warwolfVM != null && IntelligentRoadTest.warwolfVM.warwolfList != null) {
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.warwolfVM.warwolfList, 16);//
                    clearInterval(timer);
                    showOrHideInputImage(1);

                    //搜索标题更新
                    IntelligentRoadTest.searchTxtUpdate();
                }
            }, 500);
        } else if (IntelligentRoadTest.senseName == "market") {
            //农贸市场
            IntelligentRoadTest.goMarketList();
            $('#marketDistrictName').text('全市');
            $('#marketMktName').text('全区');
            $('#marketSelectCity .city-selected').show();
            $('#marketSelectCity .city-selected-gt').show();
            $('#marketSelectCity .mktcenter-selected-gt').hide();
            $('#marketSelectCity .mktcenter-selected').hide();
            if (IntelligentRoadTest.marketCurrentSelectConditon == "") {
                showOrHideInputImage(2);
                IntelligentRoadTest.getSenseDataByObjectId(8, IntelligentRoadTest.city, IntelligentRoadTest.day);
            } else {
                var condition = "" + city + IntelligentRoadTest.day;
                if (condition == IntelligentRoadTest.marketCurrentSelectConditon) {//无需重新查询数据
                    console.log("无需重新查询数据");
                } else {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.marketVM.marketList = null;
                    $("#marketCityName").text(city);
                    IntelligentRoadTest.getSenseDataByObjectId(8, IntelligentRoadTest.city, IntelligentRoadTest.day);
                }
            }
            var timer = setInterval(function () {
                if (IntelligentRoadTest.marketVM != null && IntelligentRoadTest.marketVM.marketList != null) {
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.marketVM.marketList, 17);//
                    clearInterval(timer);
                    showOrHideInputImage(1);

                    //搜索标题更新
                    IntelligentRoadTest.searchTxtUpdate();
                }
            }, 500);
        } else if (IntelligentRoadTest.senseName == "food") {
            //美食
            IntelligentRoadTest.goFoodList();
            $('#foodDistrictName').text('全市');
            $('#foodMktName').text('全区');
            $('#foodSelectCity .city-selected').show();
            $('#foodSelectCity .city-selected-gt').show();
            $('#foodSelectCity .mktcenter-selected-gt').hide();
            $('#foodSelectCity .mktcenter-selected').hide();
            if (IntelligentRoadTest.foodCurrentSelectConditon == "") {
                showOrHideInputImage(2);
                IntelligentRoadTest.getSenseDataByObjectId(9, IntelligentRoadTest.city, IntelligentRoadTest.day);
            } else {
                var condition = "" + city + IntelligentRoadTest.day;
                if (condition == IntelligentRoadTest.foodCurrentSelectConditon) {//无需重新查询数据
                    console.log("无需重新查询数据");
                } else {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.foodVM.foodList = null;
                    $("#foodCityName").text(city);
                    IntelligentRoadTest.getSenseDataByObjectId(9, IntelligentRoadTest.city, IntelligentRoadTest.day);
                }
            }
            var timer = setInterval(function () {
                if (IntelligentRoadTest.foodVM != null && IntelligentRoadTest.foodVM.foodList != null) {
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.foodVM.foodList, 18);//
                    clearInterval(timer);
                    showOrHideInputImage(1);

                    //搜索标题更新
                    IntelligentRoadTest.searchTxtUpdate();
                }
            }, 500);
        } else if (IntelligentRoadTest.senseName == "scenery") {
            //美景
            IntelligentRoadTest.goSceneryList();
            $('#sceneryDistrictName').text('全市');
            $('#sceneryMktName').text('全区');
            $('#scenerySelectCity .city-selected').show();
            $('#scenerySelectCity .city-selected-gt').show();
            $('#scenerySelectCity .mktcenter-selected-gt').hide();
            $('#scenerySelectCity .mktcenter-selected').hide();
            // var city = $("#sceneryName").text();
            if (IntelligentRoadTest.sceneryCurrentSelectConditon == "") {
                showOrHideInputImage(2);
                IntelligentRoadTest.getSenseDataByObjectId(7, IntelligentRoadTest.city, IntelligentRoadTest.day);
            } else {
                var condition = "" + city + IntelligentRoadTest.day;
                if (condition == IntelligentRoadTest.sceneryCurrentSelectConditon) {//无需重新查询数据
                    console.log("无需重新查询数据");
                } else {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.sceneryVM.sceneryList = null;
                    $("#sceneryName").text(city);
                    IntelligentRoadTest.getSenseDataByObjectId(7, IntelligentRoadTest.city, IntelligentRoadTest.day);
                }
            }
            var timer = setInterval(function () {
                if (IntelligentRoadTest.sceneryVM != null && IntelligentRoadTest.sceneryVM.sceneryList != null) {
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.sceneryVM.sceneryList, 12);//
                    clearInterval(timer);
                    showOrHideInputImage(1);

                    //搜索标题更新
                    IntelligentRoadTest.searchTxtUpdate();
                }
            }, 500);

        } else if (IntelligentRoadTest.senseName == "site") {
            //场馆
            IntelligentRoadTest.goSiteList();
            $('#siteCityDistrictName').text('全市');
            $('#siteCityMktName').text('全区');
            $('#siteSelectCity .city-selected').show();
            $('#siteSelectCity .city-selected-gt').show();
            $('#siteSelectCity .mktcenter-selected-gt').hide();
            $('#siteSelectCity .mktcenter-selected').hide();
            if (IntelligentRoadTest.siteCurrentSelectConditon == "") {
                showOrHideInputImage(2);
                IntelligentRoadTest.getSenseDataByObjectId(10, IntelligentRoadTest.city, IntelligentRoadTest.day);
            } else {
                var condition = "" + city + IntelligentRoadTest.day;
                if (condition == IntelligentRoadTest.siteCurrentSelectConditon) {//无需重新查询数据
                    console.log("无需重新查询数据");
                } else {
                    showOrHideInputImage(2);
                    IntelligentRoadTest.siteVM.siteList = null;
                    $("#siteCityName").text(city);
                    IntelligentRoadTest.getSenseDataByObjectId(10, IntelligentRoadTest.city, IntelligentRoadTest.day);
                }
            }
            var timer = setInterval(function () {
                if (IntelligentRoadTest.siteVM != null && IntelligentRoadTest.siteVM.siteList != null) {
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.siteVM.siteList, 19);//
                    clearInterval(timer);
                    showOrHideInputImage(1);

                    //搜索标题更新
                    IntelligentRoadTest.searchTxtUpdate();
                }
            }, 500);
        }
    }

    if (IntelligentRoadTest.senseName == "cityVillage") {
        IntelligentRoadTest.searchSenceTxtTmp = "城中村";
        $('#senseDistrictName').text('全市');
        $('#senseMktName').text('全区');
        IntelligentRoadTest.senseObject = IntelligentRoadTest.cityVillage; //将城中村的对象赋值给senseObject
        IntelligentRoadTest.index = IntelligentRoadTest.senseObject.index;
        IntelligentRoadTest.doQuerySense(city);
        IntelligentRoadTest.resetLayerByIndex(IntelligentRoadTest.index);
    } else if (IntelligentRoadTest.senseName == "school") {
        $('#senseDistrictName').text('全市');
        $('#senseMktName').text('全区');
        IntelligentRoadTest.searchSenceTxtTmp = "中小学";
        IntelligentRoadTest.senseObject = IntelligentRoadTest.school; //将中小学的对象赋值给senseObject
        IntelligentRoadTest.index = IntelligentRoadTest.senseObject.index;
        IntelligentRoadTest.doQuerySense(city);
        IntelligentRoadTest.resetLayerByIndex(IntelligentRoadTest.index);
    }

    if (IntelligentRoadTest.index == 29) { //用户抱怨
        $("#userComplainCityName").text(city);
        $("#userComplainDistrictName").text("全市");
        $("#userComplainMktName").text("全区");
        IntelligentRoadTest.getUserComplainListByOption(); //重新筛选显示
    }

    IntelligentRoadTest.resetLayerByIndex(IntelligentRoadTest.index);


}

IntelligentRoadTest.mapPositioningByDistrict = function IntelligentRoadTest_mapPositioningByDistrict(city, district) {
    // if(IntelligentRoadTest.isScreenCompared){
    //     alert("分屏页面禁用区县切换");
    //     return;
    // }
    IntelligentRoadTest.requery = true;
    if(IntelligentRoadTest.cityPermission_common=="全省"){//只有省级用户切换地市和区县的时候才会重新查询
        IntelligentRoadTest.submitLayersData(city);
    }
    var max_lng = IntelligentRoadTest.districtLngAndLat[city][district].max_lng;
    var max_lat = IntelligentRoadTest.districtLngAndLat[city][district].max_lat;
    var min_lng = IntelligentRoadTest.districtLngAndLat[city][district].min_lng;
    var min_lat = IntelligentRoadTest.districtLngAndLat[city][district].min_lat;
    var mid_lng = (max_lng + min_lng) / 2;
    var mid_lat = (max_lat + min_lat) / 2;
    IntelligentRoadTest.map.panTo(new BMap.Point(mid_lng, mid_lat), {noAnimation: false});
    IntelligentRoadTest.OsmMap.setView(new L.latLng(mid_lat, mid_lng));
    var tmp = '"' + city + ">" + district + '"';
    // $(".searchTitle").text("在" + tmp + "内搜索");

    IntelligentRoadTest.city = city;
    IntelligentRoadTest.district = district;
}

IntelligentRoadTest.initOtherMap = function IntelligentRoadTest_initOtherMap() {
    var point = null;
    if (IntelligentRoadTest.city == "全省") {
        point = BMapUtil.getCityLocation("广州");
    } else {
        point = BMapUtil.getCityLocation(IntelligentRoadTest.city);
    }
    var zoom = 13;
    if (IntelligentRoadTest.isScreenCompared) {//分屏页面需要根据主屏的中心经纬度进行初始化
        if (IntelligentRoadTestScreenCompared.initLng != null && IntelligentRoadTestScreenCompared.initLat != null) {
            point = new BMap.Point(IntelligentRoadTestScreenCompared.initLng, IntelligentRoadTestScreenCompared.initLat);
        }
        if (IntelligentRoadTestScreenCompared.initZoom != null) {
            zoom = IntelligentRoadTestScreenCompared.initZoom;
        }
    }

    /*IntelligentRoadTest.map = new BMap.Map("baiduMap", {enableMapClick: false, minZoom: 8, maxZoom: 20});          // 创建地图实例
    // map.centerAndZoom(IntelligentRoadTest.city,15);
    IntelligentRoadTest.map.centerAndZoom(point, zoom);
    IntelligentRoadTest.map.addEventListener("tilesloaded", doSubmitAndRemove);

    IntelligentRoadTest.map.enableScrollWheelZoom(); // 允许滚轮缩放
    IntelligentRoadTest.map.enableDragging();
    IntelligentRoadTest.map.disableDoubleClickZoom();
    // IntelligentRoadTest.map.disableContinuousZoom();//禁用连续缩放
    IntelligentRoadTest.map.enableAutoResize();
    IntelligentRoadTest.map.disableInertialDragging();//禁用惯性拖拽
    var exhibition = noceUtil.GetQueryString("exhibition");
    if (exhibition == "true" || exhibition == true) {
        IntelligentRoadTest.map.setMapStyle({styleJson: IntelligentRoadTest.baidumapExhibitionStyle});
    } else {
        IntelligentRoadTest.map.setMapStyle({style: IntelligentRoadTest.baimapStyle});
    }*/


    //移动地图
    IntelligentRoadTest.mapMobile = new BMap.Map("mapMobile", {enableMapClick: false, minZoom: 10, maxZoom: 20});          // 创建地图实例
    IntelligentRoadTest.mapMobile.centerAndZoom(point, 12);

    IntelligentRoadTest.mapMobile.disableDragging();// 禁止拖拽
    IntelligentRoadTest.mapMobile.disableDoubleClickZoom();
    IntelligentRoadTest.mapMobile.enableAutoResize();
    IntelligentRoadTest.mapMobile.setMapStyle({styleJson: IntelligentRoadTest.mapStyle});
    IntelligentRoadTest.mapMobile.addEventListener("resize", function (e) {
        if (IntelligentRoadTest.isThreeNetStatus) {
            IntelligentRoadTest.centerAndZoomTimeout = setTimeout("IntelligentRoadTest.timeoutCenterAndZoom();", 200);
            IntelligentRoadTest.drawPolylineTimeout = setTimeout("IntelligentRoadTest.drawPolyline();", 1000);
        }
    });

    //联通地图
    IntelligentRoadTest.mapUnicom = new BMap.Map("mapUnicom", {enableMapClick: false, minZoom: 10, maxZoom: 20});          // 创建地图实例
    IntelligentRoadTest.mapUnicom.centerAndZoom(point, 12);

    IntelligentRoadTest.mapUnicom.disableDragging();// 禁止拖拽
    IntelligentRoadTest.mapUnicom.disableDoubleClickZoom();//不使用双击放大
    IntelligentRoadTest.mapUnicom.enableAutoResize();//地图自适应大小
    IntelligentRoadTest.mapUnicom.setMapStyle({styleJson: IntelligentRoadTest.mapStyle});

    /*IntelligentRoadTest.map.addEventListener('zoomend', IntelligentRoadTest.GridMapZoomEnd);
    IntelligentRoadTest.map.addEventListener('dragend', function () {
        $('#cirTipLeft').hide();
    });
    IntelligentRoadTest.map.addEventListener('moveend', IntelligentRoadTest.GridMapMoveEnd);
    IntelligentRoadTest.map.addEventListener("mousemove", IntelligentRoadTest.mousemoveEvent);
    IntelligentRoadTest.map.addEventListener('click', IntelligentRoadTest.MapClickEvent);

    var top_right_control = new BMap.ScaleControl(
        {
            anchor: BMAP_ANCHOR_BOTTOM_RIGHT,
            offset: {width: 50, height: 50}
        });// 右下角，添加比例尺
    var top_right_navigation = new BMap.NavigationControl(
        {anchor: BMAP_ANCHOR_BOTTOM_RIGHT, type: BMAP_NAVIGATION_CONTROL_ZOOM, offset: {width: 0, height: 30}}); //右下角，添加缩放控件

    IntelligentRoadTest.map.addControl(top_right_control);
    IntelligentRoadTest.map.addControl(top_right_navigation);

    var mapType2 = new myBMapTypeControl({anchor: BMAP_ANCHOR_TOP_RIGHT, offset: new BMap.Size(10, 55)});
//	var mapType2 = new BMap.MapTypeControl({anchor: BMAP_ANCHOR_TOP_RIGHT,mapTypes: [BMAP_NORMAL_MAP,BMAP_HYBRID_MAP]});
    IntelligentRoadTest.map.addControl(mapType2);//添加地图类型控件*/


    var bMapObj = {
        map: IntelligentRoadTest.map,
        useSelectTimeQuerySector: true,
        isShowFactoryIcon: false,
        showHighStatn: false,
        sectorColor: IntelligentRoadTest.sectorColor,
        circleColor: IntelligentRoadTest.sectorColor,
        opacity: 0.7,
//			selectTime:IntelligentRoadTest.day,
        selectCity: IntelligentRoadTest.city,
        ifShowLodingImage: true,
        senes: 0,
        sectorZindex: 1,
        queryOtherTable: true,
        queryCondition: "AND nb_flag = 0",
        // useOptionColor:true,
        // optionColor:{field:'bs_vendor',
        //     option:[{level:'0',color:'#000000'},
        //         {level:'1',color:'#990000'},
        //         {level:'2',color:'#3333CC'},
        //         {level:'3',color:'#00FFFF'}]
        // },
        // optionChangeFunc:IntelligentRoadTest.factoryLevel,
    };
    IntelligentRoadTest.sectorCompent = new SectorUtilForBaidu(bMapObj);


    var bMap2gObj = {
        map: IntelligentRoadTest.map,
        useSelectTimeQuerySector: true,
        isShowFactoryIcon: false,
        showHighStatn: false,
        sectorColor: "#f57dad",
        circleColor: "#f57dad",
        opacity: 0.7,
//			selectTime:IntelligentRoadTest.day,
        selectCity: IntelligentRoadTest.city,
        selectNetType: "2G",
        ifShowLodingImage: true,
        senes: 0,
        sectorZindex: 1,
        queryOtherTable: false,
        queryCondition: " ",
        // useOptionColor:true,
        // optionColor:{field:'bs_vendor',
        //     option:[{level:'0',color:'#000000'},
        //         {level:'1',color:'#990000'},
        //         {level:'2',color:'#3333CC'},
        //         {level:'3',color:'#00FFFF'}]
        // },
        // optionChangeFunc:IntelligentRoadTest.factoryLevel,
    };
    IntelligentRoadTest.sector2GCompent = new SectorUtilForBaidu(bMap2gObj);

    //移动地图弱区
    var bMapObjM = {
        map: IntelligentRoadTest.mapMobile,
        sectorColor: "white",
        circleColor: "white",
        lineColor: IntelligentRoadTest.poorAreaLineColor,
        opacity: 0.3,
        lineOpacity: 1,
        lineWidth: 2,
        sectorZindex: 1,
    };
    IntelligentRoadTest.poorAreaCompentM = new SectorUtilForBaidu(bMapObjM);
    IntelligentRoadTest.poorCompentM = new SectorUtilForBaidu(bMapObjM);
    IntelligentRoadTest.covSectorCompentM = new SectorUtilForBaidu(bMapObjM);

    //联通地图弱区
    var bMapObjU = {
        map: IntelligentRoadTest.mapUnicom,
        sectorColor: "white",
        circleColor: "white",
        lineColor: IntelligentRoadTest.poorAreaLineColor,
        opacity: 0.3,
        lineOpacity: 1,
        lineWidth: 2,
        sectorZindex: 1,
    };
    IntelligentRoadTest.poorAreaCompentU = new SectorUtilForBaidu(bMapObjU);
    IntelligentRoadTest.poorCompentU = new SectorUtilForBaidu(bMapObjU);
    IntelligentRoadTest.covSectorCompentU = new SectorUtilForBaidu(bMapObjU);

    //栅格组件
    IntelligentRoadTest.GridMap = new GridMap(IntelligentRoadTest.map, {
        readTileData: null,//瓦片获取数据事件
        opacity: 0.6,//$('#opacity').val(),//透明度
        colorMode: 'range',//gradient:渐变的方式呈现颜色；range:按区间匹配颜色
        divZindex: 10,
    });
    IntelligentRoadTest.GridMap.setThresholds(IntelligentRoadTest.gridThresholds);

    //移动地图栅格组件
    IntelligentRoadTest.GridMapM = new GridMap(IntelligentRoadTest.mapMobile, {
        readTileData: null,//瓦片获取数据事件
        opacity: 0.6,//$('#opacity').val(),//透明度
        colorMode: 'range',//gradient:渐变的方式呈现颜色；range:按区间匹配颜色
        divZindex: 10,
    });
    IntelligentRoadTest.GridMapM.setThresholds(IntelligentRoadTest.gridThresholds);

    //联通地图栅格组件
    IntelligentRoadTest.GridMapU = new GridMap(IntelligentRoadTest.mapUnicom, {
        readTileData: null,//瓦片获取数据事件
        opacity: 0.6,//$('#opacity').val(),//透明度
        colorMode: 'range',//gradient:渐变的方式呈现颜色；range:按区间匹配颜色
        divZindex: 10,
    });
    IntelligentRoadTest.GridMapU.setThresholds(IntelligentRoadTest.gridThresholds);


    //栅格组件
    IntelligentRoadTest.GridMapArea = new GridMap(IntelligentRoadTest.map, {
        readTileData: null,//瓦片获取数据事件
        opacity: 0.8,//$('#opacity').val(),//透明度
        colorMode: 'range',//gradient:渐变的方式呈现颜色；range:按区间匹配颜色
    });
    IntelligentRoadTest.GridMapArea.setThresholds(IntelligentRoadTest.gridThresholds);

    //移动地图栅格组件
    IntelligentRoadTest.GridMapAreaM = new GridMap(IntelligentRoadTest.mapMobile, {
        readTileData: null,//瓦片获取数据事件
        opacity: 0.8,//$('#opacity').val(),//透明度
        colorMode: 'range',//gradient:渐变的方式呈现颜色；range:按区间匹配颜色
        divZindex: 1,
    });
    IntelligentRoadTest.GridMapAreaM.setThresholds(IntelligentRoadTest.gridThresholds);

    //联通地图栅格组件
    IntelligentRoadTest.GridMapAreaU = new GridMap(IntelligentRoadTest.mapUnicom, {
        readTileData: null,//瓦片获取数据事件
        opacity: 0.8,//$('#opacity').val(),//透明度
        colorMode: 'range',//gradient:渐变的方式呈现颜色；range:按区间匹配颜色
        divZindex: 1,
    });
    IntelligentRoadTest.GridMapAreaU.setThresholds(IntelligentRoadTest.gridThresholds);


    //--------------------------增加初始化osm地图
    var pointOsm = null;
    if (IntelligentRoadTest.city == "全省") {
        pointOsm = OSMapUtil.getCityLocation("广州");
    } else {
        pointOsm = OSMapUtil.getCityLocation(IntelligentRoadTest.city);
    }

    if (pointOsm == null) {
        pointOsm = new L.LatLng(23.135541, 113.270667);
    }
    //初始化osm地图
    IntelligentRoadTest.OsmMap = new L.Map('OsmMap', {
        center: pointOsm,
        zoom: 10,
        zoomControl: false,
        doubleClickZoom: false,
        renderer: L.canvas(),
    });

    var osmscale = new L.control.scale({imperial: false, position: "bottomright"}).addTo(IntelligentRoadTest.OsmMap);

//	OpersComp.wmsLayer = L.tileLayer(OpersComp.getUrl() + ':8099/{z}/{x}/{y}.png', {
//     http://www.google.cn/maps/vt?lyrs=s&x={x}&y={y}&z={z}
    IntelligentRoadTest.wmsLayer = L.tileLayer(commonOsmUrl + '/styles/positron/{z}/{x}/{y}.png', {
//     IntelligentRoadTest.wmsLayer = L.tileLayer('http://www.google.cn/maps/vt?lyrs=s&x={x}&y={y}&z={z}', {
        minZoom: 7,
        maxZoom: 19,
        tileSize: 256,
    })
    IntelligentRoadTest.wmsLayer.addTo(IntelligentRoadTest.OsmMap);

    IntelligentRoadTest.MyOSMMapTypeControl = new L.Control.Legend({position: 'topright'},IntelligentRoadTest.wmsLayer);
    IntelligentRoadTest.MyOSMMapTypeControl.addTo(IntelligentRoadTest.OsmMap);
    IntelligentRoadTest.OsmMap.on('moveend', function (e) {
        var zoom = IntelligentRoadTest.OsmMap.getZoom();
        var centerPoint = IntelligentRoadTest.OsmMap.getCenter(); // 获取中心点

        if (IntelligentRoadTest.isScreenCompared && !IntelligentRoadTestScreenCompared.sendSetCenter) {//分屏页发送页面同步信息
            var messageObj = {}
            messageObj.type = "osmmaponmoveend";
            messageObj.point = IntelligentRoadTest.OsmMap.getCenter();
            messageObj.zoom = IntelligentRoadTest.OsmMap.getZoom();
            messageObj.sendSetCenter = true;
            window.opener.postMessage(JSON.stringify(messageObj), "*");
        } else {
            if (IntelligentRoadTest.isAddMessageEvent && !IntelligentRoadTestScreenCompared.sendSetCenter) {// 主屏时，往分屏页发送信息
                var messageObj = {}
                messageObj.type = "osmmaponmoveend";
                messageObj.point = IntelligentRoadTest.OsmMap.getCenter();
                messageObj.zoom = IntelligentRoadTest.OsmMap.getZoom();
                messageObj.sendSetCenter = true;
                windowScreeen.postMessage(JSON.stringify(messageObj), "*");
            }
        }

        //基站渲染
        if (IntelligentRoadTest.isShowSector && IntelligentRoadTest.sectorCompentForOsm != null) {
            IntelligentRoadTest.sectorCompentForOsm.MapZoomAndDragEnd(e, IntelligentRoadTest.sectorCompentForOsm);
        }

        if (IntelligentRoadTest.isShowOsmMapEnd) {
            //高速、高铁、市政路只有在第一层列表或者连片时才需要查询视野内线段数据

            if (IntelligentRoadTest.index == 7 || IntelligentRoadTest.index == 8 || IntelligentRoadTest.index == 14) {
                if (IntelligentRoadTest.roadIndex == 1) {
                    IntelligentRoadTest.loadLineByLevelFromBounds();
                } else {
                    if (IntelligentRoadTest.geoJsonLayer) {
                        IntelligentRoadTest.geoJsonLayer.clearLayers();
                    }
                }

            }

        }

        var centerPoint = IntelligentRoadTest.OsmMap.getCenter();
        var district = IntelligentRoadTest.getCenterPointDistrict(centerPoint);
        if (district != null) {
            if (IntelligentRoadTest.cityPermission_common == "全省") {
                //地图拖拽完毕后，将搜索地市进行限制
                // IntelligentRoadTest.localSearch.setLocation(district.city);
                //更新页面中间的区域列表
                $('#mapCity').text(district.city);
                $('#mapDistrict').text(district.name);

            } else {
                if (district.city == IntelligentRoadTest.cityPermission_common) {
                    $('#mapCity').text(district.city);
                    $('#mapDistrict').text(district.name);
                }
            }
            IntelligentRoadTest.city = district.city;
            IntelligentRoadTest.district = district.name;
            // IntelligentRoadTest.updateSearchTmpTxt();
            IntelligentRoadTest.searchTxtUpdate();

        }

    });

    var bMapObj = {
        map: IntelligentRoadTest.OsmMap,
        useSelectTimeQuerySector: true,
        isShowFactoryIcon: false,
        showHighStatn: false,
        sectorColor: IntelligentRoadTest.sectorColor,
        circleColor: IntelligentRoadTest.sectorColor,
        opacity: 0.6,
        selectCity: IntelligentRoadTest.city,
        ifShowLodingImage: true,
        senes: 0,
        sectorZindex: 1,
        queryCondition: "AND nb_flag = 0",
        // useOptionColor:true,
        // optionColor:{field:'bs_vendor',
        //     option:[{level:'0',color:'#000000'},
        //         {level:'1',color:'#990000'},
        //         {level:'2',color:'#3333CC'},
        //         {level:'3',color:'#00FFFF'}]
        // },
        // optionChangeFunc:IntelligentRoadTest.factoryLevel,
    };
    IntelligentRoadTest.sectorCompentForOsm = new SectorUtilForOsm(bMapObj);

}

//百度地图根据名称搜索回调函数，根据结果进行定位
IntelligentRoadTest.localSearchSearchComplete = function IntelligentRoadTest_localSearchSearchComplete(result) {
    var resultLength = 0;
    if (result.getNumPois() > 0) {
        if (result.getNumPois() <= 10) {
            resultLength = result.getNumPois();
        } else {
            resultLength = 10;
        }
    }
    var resultList = [];
    var resultStr = '';
    for (var i = 0; i < resultLength; i++) {
        var res = {};
        if (result.getPoi(i) != undefined) {
            res.id = i;
            res.title = result.getPoi(i).title;
            res.point = result.getPoi(i).point;
            res.address = result.getPoi(i).address;
            res.city = result.getPoi(i).city;
            resultStr += '<li type="address" clickId="' + res.id + '"><span>' + res.address + '</span><span>' + res.title + '</span><span>' + res.city + '</span></li>';
            resultList.push(res);
        }

    }

    IntelligentRoadTest.seachResult = {type: "address", result: resultList};

    if (resultStr != '') {
        $('#searchResult').html(resultStr);
        setTimeout(function () {
            if ($('#searchText').val().trim() != "") {
                $('#searchResult').show();
            }
        }, 100);
    } else {
        $('#searchResult').html('无结果');
        setTimeout(function () {
            if ($('#searchText').val().trim() != "") {
                $('#searchResult').show();
            }
        }, 100);
    }

    $('#searchResult li').unbind('click').bind('click', function () {
        var type = $(this).attr('type');
        var clickId = $(this).attr('clickId');
        if (IntelligentRoadTest.seachResult.type == type) {
            for (var i = 0; i < IntelligentRoadTest.seachResult.result.length; i++) {
                if (clickId == IntelligentRoadTest.seachResult.result[i].id) {
                    var localPoint = IntelligentRoadTest.seachResult.result[i].point;
                    IntelligentRoadTest.map.panTo(localPoint, {noAnimation: false});
                    if (IntelligentRoadTest.positioningMarker != null) {
                        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.positioningMarker);
                    }
                    var myIcon = new BMap.Icon("../js/IntelligentRoadTest/images/mapPositioning.png", new BMap.Size(25, 25));
                    IntelligentRoadTest.positioningMarker = new BMap.Marker(localPoint, {icon: myIcon});
                    IntelligentRoadTest.positioningMarker.setZIndex(-1);
                    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.positioningMarker);
                    if(IntelligentRoadTest.showNrCover){
                        //加载显示附近覆盖的内容
                        IntelligentRoadTest.loadNrCoverData(true);
                    }

                    break;
                }
            }
        }
        $('#searchResult').hide();
    });


    // if(result.getPoi(0)==undefined){
    //     alert("当前地图所在地市搜索不到你输入的地址");
    //     return;
    // }else{
    //     localPoint = result.getPoi(0).point;
    // }

    // IntelligentRoadTest.map.panTo(localPoint);
    //
    // if(IntelligentRoadTest.positioningMarker!=null){
    //     IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.positioningMarker);
    // }
    // var myIcon = new BMap.Icon("../js/IntelligentRoadTest/images/mapPositioning.png", new BMap.Size(23,23));
    // IntelligentRoadTest.positioningMarker = new BMap.Marker(localPoint,{icon:myIcon});
    // IntelligentRoadTest.positioningMarker.setZIndex(-1);
    // // IntelligentRoadTest.positioningMarker.setOffset(new BMap.Size(0,-12));
    // IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.positioningMarker);

}
//开启框选栅格
IntelligentRoadTest.openBoxSelection = function IntelligentRoadTest_openBoxSelection() {
    if (IntelligentRoadTest.index != 13) {
        IntelligentRoadTest.lastBoxSelectingIndex = IntelligentRoadTest.index;
    }
    IntelligentRoadTest.isSelect = true;
    //开始框选栅格
    // $(this).text('取消框选');
    if (IntelligentRoadTest.myDrawingManagerObject == null) {
        var styleOptions = {
            strokeColor: "red",    //边线颜色。
            //fillColor:"red",      //填充颜色
            strokeWeight: 1,       //边线的宽度，以像素为单位。
            strokeOpacity: 0.8,	   //边线透明度，取值范围0 - 1。
            fillOpacity: 0.3,      //填充的透明度，取值范围0 - 1。
            strokeStyle: 'dashed' //边线的样式，solid或dashed。
        }
        IntelligentRoadTest.myDrawingManagerObject = new BMapLib.DrawingManager(IntelligentRoadTest.map, {
            isOpen: true,
            enableDrawingTool: true, //drawingType: BMAP_DRAWING_POLYGON,
            enableCalculate: false,
            drawingToolOptions: {
                anchor: BMAP_ANCHOR_TOP_RIGHT,
                offset: new BMap.Size(5, 5),
                drawingModes: [
                    BMAP_DRAWING_POLYGON
                ]
            },
            polygonOptions: styleOptions,
        });
        IntelligentRoadTest.myDrawingManagerObject.setDrawingMode(BMAP_DRAWING_POLYGON);
//				alert(IntelligentRoadTest.myDrawingManagerObject.getDrawingMode());
        IntelligentRoadTest.myDrawingManagerObject.addEventListener('overlaycomplete', IntelligentRoadTest.overlaycomplete);
    } else {
        IntelligentRoadTest.myDrawingManagerObject.open();
    }
    //锁定地图
    IntelligentRoadTest.map.disableDragging();//禁用拖拽
    IntelligentRoadTest.map.disableScrollWheelZoom();// 禁用滚轮缩放
    IntelligentRoadTest.map.setMinZoom(16);
    // IntelligentRoadTest.map.enableScrollWheelZoom(); // 允许滚轮缩放
    // IntelligentRoadTest.map.enableDragging();
    IntelligentRoadTest.isBoxSelecting = true;

}

//关闭框选栅格
IntelligentRoadTest.closeBoxSelection = function IntelligentRoadTest_closeBoxSelection() {

//清除框选
//     $(this).text('框选栅格');
    IntelligentRoadTest.map.enableScrollWheelZoom(); // 允许滚轮缩放
    IntelligentRoadTest.map.enableDragging();
    IntelligentRoadTest.map.setMinZoom(8);
    if (IntelligentRoadTest.myDrawingManagerObject != null) {
        IntelligentRoadTest.myDrawingManagerObject.close(true);
    }
    if (IntelligentRoadTest.SelectionOverlay != null) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.SelectionOverlay);
    }

    if (IntelligentRoadTest.selectBoxMarker != null) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.selectBoxMarker);
    }

    if (IntelligentRoadTest.SelectionOverlayM != null) {
        IntelligentRoadTest.mapMobile.removeOverlay(IntelligentRoadTest.SelectionOverlayM);
    }

    if (IntelligentRoadTest.SelectionOverlayU != null) {
        IntelligentRoadTest.mapUnicom.removeOverlay(IntelligentRoadTest.SelectionOverlayU);
    }

    if (IntelligentRoadTest.index == 13) {
        $("#cirTipLeft").hide();
    }
    IntelligentRoadTest.SelectionOverlay = null;
    IntelligentRoadTest.SelectionOverlayM = null;
    IntelligentRoadTest.SelectionOverlayU = null;

    IntelligentRoadTest.GridCanArrT = null;
    IntelligentRoadTest.GridCanArr = null;
    IntelligentRoadTest.CanArr = null;

    IntelligentRoadTest.GridCanArrT = [];
//			IntelligentRoadTest.GridCanArr = [];
    IntelligentRoadTest.CanArr = [];
    IntelligentRoadTest.GridMap.clear();

    IntelligentRoadTest.GridCanArrM = null;
    IntelligentRoadTest.GridCanArrM = [];
    IntelligentRoadTest.GridMapM.clear();

    IntelligentRoadTest.GridCanArrU = null;
    IntelligentRoadTest.GridCanArrU = [];
    IntelligentRoadTest.GridMapU.clear();

    IntelligentRoadTest.isBoxSelecting = false;
    IntelligentRoadTest.isShowGrid = false;
    IntelligentRoadTest.isShowDTGrid = false;


    IntelligentRoadTest.legendGrid();

    // $(".clearText").trigger("click");
    if (IntelligentRoadTest.lastBoxSelectingIndex == null) {
        //$("#showBoxSelectionList").hide();
        // $(".listInfo").slideDown().siblings(".panelDiv").show();
        //  IntelligentRoadTest.gotoIndex();
        IntelligentRoadTest.index = null;
        IntelligentRoadTest.senseName = null
        $("#showGridList").hide();
        // $("#showBoxSelectionList").hide().siblings().show();
    } else {
        IntelligentRoadTest.lastSelectionList(IntelligentRoadTest.lastBoxSelectingIndex);
        // $("#showBoxSelectionList").hide().siblings().show();
    }

    //  将多边形从图层对象中注销
    var itemData = {
        obj_type: "boxSelect",
        pointsString: null,//存放
        type: 2,
        decide: 1,
        obj_id: "0",
        day: IntelligentRoadTest.day,
        name: '自定义框选'
    };
    IntelligentRoadTest.logOutPolygonToLayer(itemData);
}
//框选结束后派发接口方法
IntelligentRoadTest.overlaycomplete = function IntelligentRoadTest_overlaycomplete(e, registerPolygon) {
    IntelligentRoadTest.isSelect = false;
    if (IntelligentRoadTest.myDrawingManagerObject != null) {
        IntelligentRoadTest.myDrawingManagerObject.close();
    }
    IntelligentRoadTest.map.enableScrollWheelZoom(); // 允许滚轮缩放
    IntelligentRoadTest.map.enableDragging();
    IntelligentRoadTest.map.setMinZoom(8);
    if (IntelligentRoadTest.SelectionOverlay != null) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.SelectionOverlay);
    }

    if (IntelligentRoadTest.SelectionOverlayM != null) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.SelectionOverlayM);
    }
    if (IntelligentRoadTest.SelectionOverlayU != null) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.SelectionOverlayU);
    }

    IntelligentRoadTest.SelectionOverlay = null;
    IntelligentRoadTest.SelectionE = null;
    IntelligentRoadTest.SelectionOverlayM = null;
    IntelligentRoadTest.SelectionOverlayU = null;
//	e.overlay.type = "boxSelect";
    IntelligentRoadTest.SelectionOverlay = e.overlay;
    IntelligentRoadTest.SelectionE = e;
    var overlayPointArr = e.overlay.getPath();
    var endPoint = overlayPointArr[overlayPointArr.length - 1];
    IntelligentRoadTest.SelectionOverlay.addEventListener("click", function (e) {//框选框绑定点击事件
        // if(IntelligentRoadTest.gridData!=null&&IntelligentRoadTest.gridData!=undefined){
        // 	IntelligentRoadTest.showGridByCanv(IntelligentRoadTest.gridData);
        // }
        setTimeout(function () {
            $("#cirTipLeft").show();
            IntelligentRoadTest.resizeInfoWindow();
        }, 100)
    });

    var polygonContour = "";//缓存多边形的轮廓点提供给hbase sql查询
    for (var k = 0; k < overlayPointArr.length; k++) {
        var point = overlayPointArr[k];
        if (k < overlayPointArr.length - 1) {
            polygonContour += point.lng + "," + point.lat + "@";
        } else {
            polygonContour += point.lng + "," + point.lat;
        }

    }
    IntelligentRoadTest.polygonContour = polygonContour;

    var styleOptions = {
        strokeColor: "red",    //边线颜色。
        //fillColor:"red",      //填充颜色
        strokeWeight: 1,       //边线的宽度，以像素为单位。
        strokeOpacity: 0.8,	   //边线透明度，取值范围0 - 1。
        fillOpacity: 0.3,      //填充的透明度，取值范围0 - 1。
        strokeStyle: 'dashed' //边线的样式，solid或dashed。
    }
    // var overlayM = new BMap.Polygon(overlayPointArr,styleOptions);
    // var overlayU = new BMap.Polygon(overlayPointArr,styleOptions);
    IntelligentRoadTest.SelectionOverlayM = new BMap.Polygon(overlayPointArr, styleOptions);
    IntelligentRoadTest.SelectionOverlayU = new BMap.Polygon(overlayPointArr, styleOptions);
    IntelligentRoadTest.mapMobile.addOverlay(IntelligentRoadTest.SelectionOverlayM);
    IntelligentRoadTest.mapUnicom.addOverlay(IntelligentRoadTest.SelectionOverlayU);

    var maxAndMinLngLat = IntelligentRoadTest.getMaxAndMinLatLng(overlayPointArr);//[maxLng , maxLat , minLng , minLat]

    var mid_lng = (maxAndMinLngLat[0] + maxAndMinLngLat[2]) / 2;
    var mid_lat = (maxAndMinLngLat[1] + maxAndMinLngLat[3]) / 2;
    var city_id = noceUtil.city_LATN_ID[IntelligentRoadTest.city];
//    var listRecentCell = ["IntelligentRoadTest_19_ConcernAreaRecentCell","MIDLNG:"+mid_lng,"MIDLAT:"+mid_lat,"CITYID:"+city_id];
//    var progressBarSqlsList=[];
//    progressBarSqlsList.push(listRecentCell);
//    var concernAreaList = [IntelligentRoadTest.concernAreaRecentCell];
//    var concernAreaDataBase = [3];
//    progressbarTwo.submitSql(progressBarSqlsList, concernAreaList,concernAreaDataBase,[IntelligentRoadTest.SelectionOverlay],null,null,null,true);
    var maxlng_maxlat_minlng_minlat = maxAndMinLngLat[0] + "," + maxAndMinLngLat[1] + "," + maxAndMinLngLat[2] + "," + maxAndMinLngLat[3];
    //maxlng,minlng,maxlat,minlat
    IntelligentRoadTest.maxlnglat_minlnglat = [maxAndMinLngLat[0], maxAndMinLngLat[2], maxAndMinLngLat[1], maxAndMinLngLat[3]];
    var progressBarSqls = [];
    var functionlist = [];
    var dataBase = [];

    if (IntelligentRoadTest.isFirstGotoNew == false) {
        if (IntelligentRoadTest.isThreeNetStatus) {//框选三网
            var ajaxThreeObj = IntelligentRoadTestSystemLayerV3.loadThreeBoxGrid(maxlng_maxlat_minlng_minlat);
            progressBarSqls.push(ajaxThreeObj.progressBarSqls);
            functionlist.push(ajaxThreeObj.functionlist);
            dataBase.push(ajaxThreeObj.dataBase);
        }
        var ajaxAreaObj = IntelligentRoadTestSystemLayerV3.loadAreaBoxGrid(maxlng_maxlat_minlng_minlat);
        progressBarSqls.push(ajaxAreaObj.progressBarSqls);
        functionlist.push(ajaxAreaObj.functionlist);
        dataBase.push(ajaxAreaObj.dataBase);

        progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase);
    }


    //提供给关注区域三网覆盖率的提示信息
    var item = {};
    item.max_longitude_baidu = maxAndMinLngLat[0];
    item.max_latitude_baidu = maxAndMinLngLat[1];
    item.min_longitude_baidu = maxAndMinLngLat[2];
    item.min_latitude_baidu = maxAndMinLngLat[3];
    item.longitude_mid_baidu = mid_lng;
    item.latitude_mid_baidu = mid_lat;
    IntelligentRoadTest.boxItem = item;
    //图例全部呈现
    IntelligentRoadTest.initColorBarAll();

    if (!registerPolygon == false) {
        //  将多边形注册到图层对象
        var itemData = {
            obj_type: "boxSelect",
            pointsString: polygonContour,//存放
            type: 2,
            decide: 1,
            obj_id: "0",//为什么要设值，不设值的话会导致在鼠标移入结果列表时匹配不到
            day: IntelligentRoadTest.day,
            name: '自定义框选'
        };
        IntelligentRoadTest.registeredPolygonToLayer(itemData);
    }


    //营服下拉框初始化
//  IntelligentRoadTest.isInitBoxCitySelect = false;
    var centerPoint = new BMap.Point(mid_lng, mid_lat);
    var district = IntelligentRoadTest.getCenterPointDistrict(centerPoint);
    if (!IntelligentRoadTest.isInitBoxCitySelect) {
        if (district != null) {
            if (IntelligentRoadTest.cityPermission_common == "全省") {
                //地图拖拽完毕后，将搜索地市进行限制
                // IntelligentRoadTest.localSearch.setLocation(district.city);
                var optionCityStr = '';
                for (var i = 0; i < IntelligentRoadTest.allCity.length; i++) {
                    if (IntelligentRoadTest.allCity[i] == district.city) {
                        optionCityStr += '<option value="' + IntelligentRoadTest.allCity[i] + '" selected>' + IntelligentRoadTest.allCity[i] + '</option>'
                    } else {
                        optionCityStr += '<option value="' + IntelligentRoadTest.allCity[i] + '">' + IntelligentRoadTest.allCity[i] + '</option>'
                    }
                }

                $('#boxCitySelect').html(optionCityStr);
                //地市切换，初始化区县和营服
                $('#boxCitySelect').unbind('change').bind('change', function () {
                    var citySelected = $(this).find('option:selected').val();
                    var optionDistrictStr = '';
                    var districtObj = IntelligentRoadTest.districtLngAndLat[citySelected];
                    for (var districtKey in districtObj) {
                        var district_id = districtObj[districtKey]["id"];
                        var district_name = districtKey;
                        optionDistrictStr += '<option value="' + district_id + '">' + district_name + '</option>';
                    }
                    $('#boxCountrySelect').html(optionDistrictStr);

                    var id = $('#boxCountrySelect option:selected').val();
                    var mktObjDistrict = IntelligentRoadTest.mktcenterLngAndLat[citySelected];
                    var mktDistrictObj = null;
                    for (var district in mktObjDistrict) {
                        var district_id = district.split("_")[0];
                        if (district_id == id) {
                            mktDistrictObj = mktObjDistrict[district];
                            break;
                        }
                    }

                    var mktOptionStr = '';
                    for (var i = 0; i < mktDistrictObj.length; i++) {
                        mktOptionStr += '<option value="' + mktDistrictObj[i].id + '">' + mktDistrictObj[i].name + '</option>'
                    }

                    $('#boxMktcenterSelect').html(mktOptionStr);

                });
                //根据当前地市初始化区县下拉框
                var optionDistrictStr = '';
                var districtObj = IntelligentRoadTest.districtLngAndLat[district.city];
                for (var districtKey in districtObj) {
                    var district_id = districtObj[districtKey]["id"];
                    var district_name = districtKey;
                    if (district_name == district.name) {
                        optionDistrictStr += '<option value="' + district_id + '" selected>' + district_name + '</option>';
                    } else {
                        optionDistrictStr += '<option value="' + district_id + '">' + district_name + '</option>';
                    }

                }

                $('#boxCountrySelect').html(optionDistrictStr);
                //区县下拉框切换，初始化营服下拉框
                $('#boxCountrySelect').unbind('change').bind('change', function () {
                    var id = $(this).find('option:selected').val();
                    var citySelected = $('#boxCitySelect').find('option:selected').val();
                    var mktObjDistrict = IntelligentRoadTest.mktcenterLngAndLat[citySelected];
                    var mktDistrictObj = null;
                    for (var district in mktObjDistrict) {
                        var district_id = district.split("_")[0];
                        if (district_id == id) {
                            mktDistrictObj = mktObjDistrict[district];
                            break;
                        }
                    }

                    var mktOptionStr = '';
                    for (var i = 0; i < mktDistrictObj.length; i++) {
                        mktOptionStr += '<option value="' + mktDistrictObj[i].id + '">' + mktDistrictObj[i].name + '</option>'
                    }

                    $('#boxMktcenterSelect').html(mktOptionStr);
                });

                //舒适化营服下拉
                var districtSelected = $('#boxCountrySelect option:selected').val();
                var mktObjDistrict = IntelligentRoadTest.mktcenterLngAndLat[district.city];
                var mktDistrictObj = null
                for (var districtkey in mktObjDistrict) {
                    var district_id = districtkey.split("_")[0];
                    if (district_id == districtSelected) {
                        mktDistrictObj = mktObjDistrict[districtkey];
                        break;
                    }
                }

                var mktOptionStr = '';
                for (var i = 0; i < mktDistrictObj.length; i++) {
                    mktOptionStr += '<option value="' + mktDistrictObj[i].id + '">' + mktDistrictObj[i].name + '</option>'
                }

                $('#boxMktcenterSelect').html(mktOptionStr);
                IntelligentRoadTest.isInitBoxCitySelect = true;
            } else {
                if (district.city == IntelligentRoadTest.cityPermission_common) {

                } else {
                    district.city = IntelligentRoadTest.cityPermission_common;
                    var districtObjS = IntelligentRoadTest.districtLngAndLat[IntelligentRoadTest.cityPermission_common];
                    if (districtObjS) {
                        var isChooseFirst = false;
                        for (var districtSKey in districtObjS) {
                            if (!isChooseFirst) {
                                district.name = districtSKey;
                                isChooseFirst = true;
                                break;
                            }
                        }
                    }

                }
//	           		 如果匹配到的地市和用户归属地市一样，则取对应的区县和对应区县默认的第一个营服
//	            	如果匹配到的地市和用户归属地市不一样，则取第一个区县和对应区县的第一个营服

                var optionCityStr = '<option value="' + district.city + '">' + district.city + '</option>';
                $('#boxCitySelect').html(optionCityStr);
                //地市切换，初始化区县和营服
                $('#boxCitySelect').unbind('change').bind('change', function () {
                    var citySelected = $(this).find('option:selected').val();
                    var optionDistrictStr = '';
                    var districtObj = IntelligentRoadTest.districtLngAndLat[citySelected];
                    for (var districtKey in districtObj) {
                        var district_id = districtObj[districtKey]["id"];
                        var district_name = districtKey;
                        optionDistrictStr += '<option value="' + district_id + '">' + district_name + '</option>';
                    }
                    $('#boxCountrySelect').html(optionDistrictStr);

                    var id = $('#boxCountrySelect option:selected').val();
                    var mktObjDistrict = IntelligentRoadTest.mktcenterLngAndLat[citySelected];
                    var mktDistrictObj = null;
                    for (var district in mktObjDistrict) {
                        var district_id = district.split("_")[0];
                        if (district_id == id) {
                            mktDistrictObj = mktObjDistrict[district];
                            break;
                        }
                    }

                    var mktOptionStr = '';
                    for (var i = 0; i < mktDistrictObj.length; i++) {
                        mktOptionStr += '<option value="' + mktDistrictObj[i].id + '">' + mktDistrictObj[i].name + '</option>'
                    }

                    $('#boxMktcenterSelect').html(mktOptionStr);

                });
                //根据当前地市初始化区县下拉框
                var optionDistrictStr = '';
                var districtObj = IntelligentRoadTest.districtLngAndLat[district.city];
                for (var districtKey in districtObj) {
                    var district_id = districtObj[districtKey]["id"];
                    var district_name = districtKey;
                    if (district_name == district.name) {
                        optionDistrictStr += '<option value="' + district_id + '" selected>' + district_name + '</option>';
                    } else {
                        optionDistrictStr += '<option value="' + district_id + '">' + district_name + '</option>';
                    }

                }

                $('#boxCountrySelect').html(optionDistrictStr);
                //区县下拉框切换，初始化营服下拉框
                $('#boxCountrySelect').unbind('change').bind('change', function () {
                    var id = $(this).find('option:selected').val();
                    var citySelected = $('#boxCitySelect').find('option:selected').val();
                    var mktObjDistrict = IntelligentRoadTest.mktcenterLngAndLat[citySelected];
                    var mktDistrictObj = null;
                    for (var district in mktObjDistrict) {
                        var district_id = district.split("_")[0];
                        if (district_id == id) {
                            mktDistrictObj = mktObjDistrict[district];
                            break;
                        }
                    }

                    var mktOptionStr = '';
                    for (var i = 0; i < mktDistrictObj.length; i++) {
                        mktOptionStr += '<option value="' + mktDistrictObj[i].id + '">' + mktDistrictObj[i].name + '</option>'
                    }

                    $('#boxMktcenterSelect').html(mktOptionStr);
                });

                //舒适化营服下拉
                var districtSelected = $('#boxCountrySelect option:selected').val();
                var mktObjDistrict = IntelligentRoadTest.mktcenterLngAndLat[district.city];
                var mktDistrictObj = null
                for (var districtkey in mktObjDistrict) {
                    var district_id = districtkey.split("_")[0];
                    if (district_id == districtSelected) {
                        mktDistrictObj = mktObjDistrict[districtkey];
                        break;
                    }
                }

                var mktOptionStr = '';
                for (var i = 0; i < mktDistrictObj.length; i++) {
                    mktOptionStr += '<option value="' + mktDistrictObj[i].id + '">' + mktDistrictObj[i].name + '</option>'
                }

                $('#boxMktcenterSelect').html(mktOptionStr);
                //每次都要执行一次，否则无法需要手工切换
                IntelligentRoadTest.isInitBoxCitySelect = true;
            }

        }
    } else {
        $('#boxCitySelect').val(district.city);
        $('#boxCitySelect').trigger("change");
        var district_id = IntelligentRoadTest.districtLngAndLat[district.city][district.name]["id"];
        $('#boxCountrySelect').val(district_id);
        $('#boxCountrySelect').trigger("change");

        $('#SystemLayerSelect').val('请选择');
    }
    //只有审核员才能看到保存为系统图层
    if (IntelligentRoadTest.user_role.indexOf('审核员') > -1) {
//		  $('#saveBoxSelection .auditSelect').show();
//		  $('#saveBoxSelection .auditSave').show();
        if (!IntelligentRoadTest.isInitBoxSceneSelect) {
            var sceneSelectStr = '<option value=\"高校\">高校</option>' +
                '<option value=\"场馆\">场馆</option>' +
                '<option value=\"美食\">美食</option>' +
                '<option value=\"美景\">美景</option>' +
                '<option value=\"农贸市场\">农贸市场</option>' +
                '<option value=\"高密度住宅区\">高密度住宅区</option>' +
                '<option value=\"高流量商务区\">高流量商务区</option>' +
                '<option value=\"城中村\">城中村</option>' +
                '<option value=\"中小学\">中小学</option>' +
                '<option value=\"自然村\">自然村</option>' +
                '<option value=\"工厂\">工厂</option>';
            $('#SystemLayerSelect').append(sceneSelectStr);
            IntelligentRoadTest.isInitBoxSceneSelect = true;
        }
    } else {
//		  $('#saveBoxSelection .auditSelect').hide();
//		  $('#saveBoxSelection .auditSave').hide();
    }

}

//根据经纬度集合的字符串来构建一个带有百度地图的多边形对象的Object
IntelligentRoadTest.getBaiduPolygonObj = function (pointArrStr) {
    var obj = {};
    obj.overlay = {};
    if (pointArrStr != null && pointArrStr.length > 0) {
        var baiduPointArr = [];
        var pointStrList = pointArrStr.split("@"); //截取出每一个经纬度字符串出来
        for (var i = 0; i < pointStrList.length; i++) {
            if (pointStrList[i].length > 0) {
                var lng_latList = pointStrList[i].split(",");
                var point = new BMap.Point(lng_latList[0], lng_latList[1]); //创建百度的点对象
                baiduPointArr.push(point);
            }
        }
        var polygon = new BMap.Polygon(baiduPointArr);
        obj.overlay = polygon;
        return obj;
    } else {
        return null;
    }
}

/**********************************
 * @funcname intelligentRoadTest.getDetailsItem
 * @funcdesc 获取当前详情页对象
 * @return {null}
 * @author 郑文彬
 * @create 20180417
 ***********************************/
IntelligentRoadTest.getDetailsItem = function getDetailsItem() {
    var item = null; //获取lable的中心经纬度
    if (IntelligentRoadTest.currentLocation == "poorArea") {
        item = IntelligentRoadTest.rfgCompleteVM.poorAreaData;
    } else if (IntelligentRoadTest.currentLocation == "concern") {
        item = IntelligentRoadTest.concernAreaCompleteVM.concernAreaData;
    } else if (IntelligentRoadTest.currentLocation == "sector") {
        item = IntelligentRoadTest.sectorCompleteVM.sectorData;
    } else if (IntelligentRoadTest.currentLocation == "boneArea") {
        item = IntelligentRoadTest.boneAreaCompleteVM.boneAreaData;
    } else if (IntelligentRoadTest.currentLocation == "macSector") {
        item = null;
    } else if (IntelligentRoadTest.currentLocation == "college") {
        item = IntelligentRoadTest.collegeCompleteVM.collegeData;
    } else if (IntelligentRoadTest.currentLocation == "uptown") {
        item = IntelligentRoadTest.uptownCompleteVM.uptownData;
    } else if (IntelligentRoadTest.currentLocation == "business") {
        item = IntelligentRoadTest.businessCompleteVM.businessData;
    } else if (IntelligentRoadTest.currentLocation == "warwolf") {
        item = IntelligentRoadTest.warwolfCompleteVM.warwolfData;
    } else if (IntelligentRoadTest.currentLocation == "market") {
        item = IntelligentRoadTest.marketCompleteVM.marketData;
    } else if (IntelligentRoadTest.currentLocation == "scenery") {
        item = IntelligentRoadTest.sceneryCompleteVM.sceneryData;
    } else if (IntelligentRoadTest.currentLocation == "food") {
        item = IntelligentRoadTest.foodCompleteVM.foodData;
    } else if (IntelligentRoadTest.currentLocation == "site") {
        item = IntelligentRoadTest.siteCompleteVM.siteData;
    }

    return item;
}
//三网对比lable增加显示覆盖率 ceshi
/**********************************
 * @funcname IntelligentRoadTest.openThreeLable
 * @funcdesc 三网对比lable增加显示覆盖率和平均值提示
 * @param {null} (input optional)
 * @return {null}
 * @create 20171017
 ***********************************/
IntelligentRoadTest.openThreeLable = function openThreeLable() {
//	 var test = noceUtil.GetQueryString("test");
//	 if(test!=1){
//		 return;
//	 }
    try {
        var item = null;
        if (!$("#saveBoxSelection").is(":hidden")) {
            item = IntelligentRoadTest.boxItem;
        } else {
            //item=IntelligentRoadTest.getDetailsItem();
            item = IntelligentRoadTest.cacheItem;
        }
        if (item == null) {
            return;
        }
        var dx_cover = 0;
        var yd_cover = 0;
        var lt_cover = 0;
        var lng = null;
        var lat = null;
        var idObj = {};
        /*{"key":"弱区编号","val":item.object_id};*/
        var nameObj = {};
        /*{"key":"最近扇区","val":item.cell_name};*/

        //获取lable的中心经纬度
        if (!$("#saveBoxSelection").is(":hidden")) {//框选
            lng = item.longitude_mid_baidu;
            lat = item.latitude_mid_baidu;
            idObj = {"key": "区域名称", "val": item.esbh_name};
            nameObj = {"key": "区域编号", "val": item.esbh_id};

        } else if (IntelligentRoadTest.currentLocation == "poorArea") {
            lng = item.longitude_mid_baidu;
            lat = item.latitude_mid_baidu;
            idObj = {"key": "弱区编号", "val": item.object_id};
            nameObj = {"key": "最近扇区", "val": item.cell_name};
        } else if (IntelligentRoadTest.currentLocation == "upPoorArea" || IntelligentRoadTest.currentLocation == "dwPoorArea"
            || IntelligentRoadTest.currentLocation == "m3PoorArea" || IntelligentRoadTest.currentLocation == "cbPoorArea" || IntelligentRoadTest.currentLocation == "olPoorArea") {
            lng = item.longitude_mid_baidu;
            lat = item.latitude_mid_baidu;
            idObj = {"key": "区域编号", "val": item.object_id};
            nameObj = {"key": "最近扇区", "val": item.cell_name};
        } else if (IntelligentRoadTest.currentLocation == "concern") {
            lng = (item.max_longitude_baidu + item.min_longitude_baidu) / 2;
            lat = (item.max_latitude_baidu + item.min_latitude_baidu) / 2;
            idObj = {"key": "区域名称", "val": item.area_name};
            nameObj = {"key": "区域编号", "val": item.id};
            /*}else if(IntelligentRoadTest.index==2){
                lng=item.longitude_mid_baidu;
                lat=item.latitude_mid_baidu;*/
        } else if (IntelligentRoadTest.currentLocation == "sector" || IntelligentRoadTest.currentLocation == "m3Sector" || IntelligentRoadTest.currentLocation == "cbSector" || IntelligentRoadTest.currentLocation == "olSector") {
            idObj = {"key": "扇区名称", "val": item.cell_name};
            nameObj = {"key": "基站扇区编号", "val": item.enodeb_id + "_" + item.cell_id};
            lng = item.longitude_mid_baidu;
            lat = item.latitude_mid_baidu;
            var obj = IntelligentRoadTest.getSectorXYZ(item.band_mapping);
            var pointArr = IntelligentRoadTest.add_sector(new BMap.Point(lng, lat), obj.xy, obj.xy, obj.z, item.ant_azimuth);
//			  var pointArr=IntelligentRoadTest.add_sector(new BMap.Point(lng,lat),0.0003,0.0003,3.5,list[i].ant_azimuth)
            lng = (pointArr[2].lng + pointArr[3].lng) / 2;
            lat = (pointArr[2].lat + pointArr[3].lat) / 2;
            if (item.is_indoor == '室内') {
                lng = item.longitude_mid_baidu;
                lat = item.latitude_mid_baidu;
            }
            /*if(IntelligentRoadTest.gridTypeIndex==3){//MOD3干扰
                IntelligentRoadTest.mrRate=item.m3_mrrat;
            }else if(IntelligentRoadTest.gridTypeIndex==4){//越区覆盖
                IntelligentRoadTest.mrRate=item.cb_mrrat;
            }else if(IntelligentRoadTest.gridTypeIndex==5){//重叠覆盖
                IntelligentRoadTest.mrRate=item.ol_mrrat;
            }*/

//			  if(list[i].ant_azimuth==null||list[i].band_mapping==null){
//				  lng=list[i].longitude_mid_baidu;
//				  lat=list[i].latitude_mid_baidu;
//			  }
        } else if (IntelligentRoadTest.currentLocation == "boneArea") {
            lng = item.longitude_mid;
            lat = item.latitude_mid;
            idObj = {"key": "区域名称", "val": item.object_name};
            nameObj = {"key": "区域编号", "val": item.id};
        } else if (IntelligentRoadTest.currentLocation == "macSector") {
//			  lng=item.longitude_mid_baidu;
//			  lat=item.latitude_mid_baidu;
//			  idObj={"key":"区域名称","val":item.esbh_name};
// 			  nameObj={"key":"区域编号","val":item.esbh_id};
//			  var obj= IntelligentRoadTest.getSectorXYZ(item.band_mapping);
//			  var pointArr=IntelligentRoadTest.add_sector(new BMap.Point(lng,lat),obj.xy,obj.xy,obj.z,item.ant_azimuth);
////			  var pointArr=IntelligentRoadTest.add_sector(new BMap.Point(lng,lat),0.0003,0.0003,3.5,list[i].ant_azimuth)
//			  lng=(pointArr[2].lng+pointArr[3].lng)/2;
//			  lat=(pointArr[2].lat+pointArr[3].lat)/2;
//			  if(item.is_indoor=='室内'){
//				  lng=item.longitude_mid_baidu;
//				  lat=item.latitude_mid_baidu;
//			  }

            //五高一地
        } else if (IntelligentRoadTest.currentLocation == "uptown" || IntelligentRoadTest.currentLocation == "college" || IntelligentRoadTest.currentLocation == "business" || IntelligentRoadTest.currentLocation == "scenery") {
            lng = item.longitude_mid_baidu;
            lat = item.latitude_mid_baidu;
            idObj = {"key": "区域名称", "val": item.esbh_name};
            nameObj = {"key": "区域编号", "val": item.esbh_id};
        } else if (IntelligentRoadTest.currentLocation == "warwolf" || IntelligentRoadTest.currentLocation == "market" || IntelligentRoadTest.currentLocation == "food" || IntelligentRoadTest.currentLocation == "site"
            || IntelligentRoadTest.currentLocation == "cityVillage" || IntelligentRoadTest.currentLocation == "school" || IntelligentRoadTest.currentLocation == "village" || IntelligentRoadTest.currentLocation == "factory") {
            lng = item.longitude_mid_baidu;
            lat = item.latitude_mid_baidu;
            idObj = {"key": "区域名称", "val": item.esbh_name};
            nameObj = {"key": "区域编号", "val": item.esbh_id};
        } else if (IntelligentRoadTest.isScreenCompared && IntelligentRoadTestScreenCompared.messageObject.type == 'poor') {
            var gis_data = IntelligentRoadTestScreenCompared.messageObject.item.gis_data.replace(/;/g, '|');
            if (gis_data == IntelligentRoadTest.polygonContour) {
                lng = IntelligentRoadTestScreenCompared.messageObject.item.longitude_mid_baidu;
                lat = IntelligentRoadTestScreenCompared.messageObject.item.latitude_mid_baidu;
                idObj = {"key": "弱区编号", "val": item.object_id};
                nameObj = {"key": "日期", "val": IntelligentRoadTestScreenCompared.messageObject.day};
            }
        } else if (IntelligentRoadTest.currentLocation == "userComplain") {
            lng = item.longitude;
            lat = item.latitude;
        }


        if (IntelligentRoadTest.currentLocation != null && IntelligentRoadTest.currentLocation != "" && IntelligentRoadTest.isThreeNetStatus) {
            IntelligentRoadTest.threeLabel = [lng, lat, [idObj, nameObj]];
            IntelligentRoadTest.openInfoWindowTwo(lng, lat,
                [
                    idObj,
                    nameObj,
                    {"key": "", "val": IntelligentRoadTest.month_relate_three + "三网RSRP均值对比"},
                    {"key": "电信", "val": IntelligentRoadTest.dx_rsrp_three},
                    {"key": "移动", "val": IntelligentRoadTest.yd_rsrp_three},
                    {"key": "联通", "val": IntelligentRoadTest.lt_rsrp_three},
                    {"key": "", "val": IntelligentRoadTest.month_relate_three + "三网覆盖率对比"},
                    {"key": "电信", "val": IntelligentRoadTest.dx_cover_three + "%"},
                    {"key": "移动", "val": IntelligentRoadTest.yd_cover_three + "%"},
                    {"key": "联通", "val": IntelligentRoadTest.lt_cover_three + "%"}
                ]
            );
            if (IntelligentRoadTest.index == 13) {
                IntelligentRoadTest.searchShowMkLable(lng, lat, '', true);
            }
        } else if (IntelligentRoadTest.index == 13 && IntelligentRoadTest.isThreeNetStatus && IntelligentRoadTest.currentLocation == "") {
            IntelligentRoadTest.threeLabel = [lng, lat, [idObj, nameObj]];
            IntelligentRoadTest.openInfoWindowTwo(lng, lat,
                [
                    idObj,
                    nameObj,
                    {"key": "", "val": IntelligentRoadTest.month_relate_three + "三网RSRP均值对比"},
                    {"key": "电信", "val": IntelligentRoadTest.dx_rsrp_three},
                    {"key": "移动", "val": IntelligentRoadTest.yd_rsrp_three},
                    {"key": "联通", "val": IntelligentRoadTest.lt_rsrp_three},
                    {"key": "", "val": IntelligentRoadTest.month_relate_three + "三网覆盖率对比"},
                    {"key": "电信", "val": IntelligentRoadTest.dx_cover_three + "%"},
                    {"key": "移动", "val": IntelligentRoadTest.yd_cover_three + "%"},
                    {"key": "联通", "val": IntelligentRoadTest.lt_cover_three + "%"}
                ]
            );
            IntelligentRoadTest.searchShowMkLable(lng, lat, '', true);

        } else if (IntelligentRoadTest.isShowGrid && IntelligentRoadTest.currentLocation != "macSector") {
            var rateObj = [];
            var gridTime = IntelligentRoadTest.gridTime == "week" ? "周·" : "天·";
            if (IntelligentRoadTest.gridTypeIndex == 0) {//覆盖质量
                rateObj = [
                    idObj,
                    nameObj,
                    {"key": gridTime + "指标类型", "val": IntelligentRoadTest.zhibiao},
                    {"key": "RSRP均值", "val": IntelligentRoadTest.rsrpAvg},
                    {"key": "覆盖率", "val": IntelligentRoadTest.coverRate + "%"},
                    {"key": "弱栅格占比", "val": IntelligentRoadTest.poorRate + "%"}
                ];
            } else if (IntelligentRoadTest.gridTypeIndex == 1) {//上行速率
                rateObj = [
                    idObj,
                    nameObj,
                    {"key": gridTime + "指标类型", "val": IntelligentRoadTest.zhibiao},
                    {"key": "KPI感知上行速率", "val": IntelligentRoadTest.shRate + "Mbps"},
                    {"key": "KPI感知下行速率", "val": IntelligentRoadTest.xhRate + "Mbps"}
                ];
            } else if (IntelligentRoadTest.gridTypeIndex == 2) {//下行速率
                rateObj = [
                    idObj,
                    nameObj,
                    {"key": gridTime + "指标类型", "val": IntelligentRoadTest.zhibiao},
                    {"key": "KPI感知下行速率", "val": IntelligentRoadTest.xhRate + "Mbps"},
                    {"key": "平均CQI", "val": IntelligentRoadTest.xhCqi},
                    {"key": "平均Rank", "val": IntelligentRoadTest.xhRank},
                    {"key": "平均RSRP", "val": IntelligentRoadTest.rsrpAvg + "dBm"}
                ];
            } else if (IntelligentRoadTest.gridTypeIndex == 3 || IntelligentRoadTest.gridTypeIndex == 4 || IntelligentRoadTest.gridTypeIndex == 5) {
                if (IntelligentRoadTest.currentLocation == "m3PoorArea" || IntelligentRoadTest.currentLocation == "cbPoorArea" || IntelligentRoadTest.currentLocation == "olPoorArea") {
                    rateObj = [
                        idObj,
                        nameObj,
                        {"key": gridTime + "指标类型", "val": IntelligentRoadTest.zhibiao},
                        {"key": "RSRP均值", "val": IntelligentRoadTest.rsrpAvg},
                        {"key": "覆盖率", "val": IntelligentRoadTest.coverRate + "%"},
                        {
                            "key": IntelligentRoadTestSystemLayerV3.getGridName(IntelligentRoadTest.gridTypeIndex)["name"] + "栅格占比",
                            "val": IntelligentRoadTest.mrRate + "%"
                        }
                    ];
                } else {
                    rateObj = [
                        idObj,
                        nameObj,
                        {"key": gridTime + "指标类型", "val": IntelligentRoadTest.zhibiao},
                        {
                            "key": IntelligentRoadTestSystemLayerV3.getGridName(IntelligentRoadTest.gridTypeIndex)["name"] + "栅格占比",
                            "val": IntelligentRoadTest.mrRate + "%"
                        }
                    ];
                }
            }else if(IntelligentRoadTest.gridTypeIndex == 6){
                rateObj = [
                    idObj,
                    nameObj,
                    {"key": gridTime + "指标类型", "val": IntelligentRoadTest.zhibiao},
                    {"key": "CDR记录数", "val": IntelligentRoadTest.cdr2g},
                    {"key": "EC/IO", "val": IntelligentRoadTest.ecio2g}
                ];
            }else if(IntelligentRoadTest.gridTypeIndex == 7){
                rateObj = [
                    idObj,
                    nameObj,
                    {"key": gridTime + "指标类型", "val": IntelligentRoadTest.zhibiao}
                ];
            }
            IntelligentRoadTest.threeLabel = [lng, lat, rateObj];
            IntelligentRoadTest.openInfoWindowTwo(lng, lat, rateObj);

        } else if (IntelligentRoadTest.currentLocation == "userComplain") {
            var rateObj = [];
            if (item.type == "越级工单") {
                rateObj = [
                    {"key": "工单编号", "val": item.workorder_id},
                    {"key": "受理时间", "val": item.accept_time},
                    {"key": "服务类别", "val": item.service_type},
                    {"key": "原因定性", "val": item.position},
                    {"key": "区县", "val": item.complaint_county},
                    {"key": "营服中心", "val": item.mktcenter},
                    {"key": "经纬度", "val": "(" + lng.toFixed(6) + "," + lat.toFixed(6) + ")"}
                ];
            } else if (item.type == "全量工单") {
                rateObj = [
                    {"key": "工单编号", "val": item.workorder_id},
                    {"key": "受理时间", "val": item.accept_time},
                    {"key": "服务类别", "val": item.service_type},
                    {"key": "原因定性", "val": item.position},
                    {"key": "区县", "val": item.complaint_county},
                    {"key": "营服中心", "val": item.mktcenter},
                    {"key": "经纬度", "val": "(" + lng.toFixed(6) + "," + lat.toFixed(6) + ")"}
                ];
            } else if (item.type == "抱怨热点") {
                rateObj = [
                    {"key": "ID", "val": item.id},
                    {"key": "栅格编号", "val": item.workorder_id},
                    {"key": "持续周期", "val": item.continued_cycle},
                    {"key": "营服中心", "val": item.mktcenter},
                    {"key": "是否闭环", "val": (item.close_loop == 1) ? "是" : "否"}
                ];
            }
            IntelligentRoadTest.threeLabel = [lng, lat, rateObj];
            IntelligentRoadTest.openInfoWindowTwo(lng, lat, rateObj);

        }
    } catch (e) {
        // TODO: handle exception
    }
}
//打开三网
/**********************************
 * @funcname IntelligentRoadTest.openThreeComp
 * @funcdesc 打开三网
 * @param {null} (input optional)
 * @return {null}
 * @create 20171017
 ***********************************/
IntelligentRoadTest.openThreeComp = function IntelligentRoadTest_openThreeComp() {
    // $(".clickOpersComp").show();
    $("input#fgzl-type").click();
    $(".fieldsetInfo .gridTypeDiv:not(:first) input , input[name='grid-type']:not(:first)").attr("disabled", true);
    $(".fieldsetInfo .gridTypeDiv:not(:first) input , input[name='grid-type']:not(:first)").siblings('label').addClass("greyColor");
    $(".clickOpersComp").toggle();
    IntelligentRoadTest.isThreeNetStatus = true;
    //增加移动和联通地图的多边形和标记点覆盖物
    /**
     for(var i=0;i<IntelligentRoadTest.badPolygonMarkerArrM.length;i++){
        IntelligentRoadTest.mapMobile.addOverlay(IntelligentRoadTest.badPolygonMarkerArrM[i]);
    }

     for(var i=0;i<IntelligentRoadTest.badPolygonMarkerArrU.length;i++){
        IntelligentRoadTest.mapUnicom.addOverlay(IntelligentRoadTest.badPolygonMarkerArrU[i]);
    }**/

    setTimeout(function () {
        IntelligentRoadTest.timeoutCenterAndZoom();
        IntelligentRoadTest.drawPolylineTimeout = setTimeout("IntelligentRoadTest.drawPolyline();", 100);
        if (IntelligentRoadTest.isShowPoorArea) {
            IntelligentRoadTest.poorAreaCompentM.draw();
            IntelligentRoadTest.poorAreaCompentU.draw();
            IntelligentRoadTest.poorCompentM.draw();
            IntelligentRoadTest.poorCompentU.draw();
            IntelligentRoadTest.covSectorCompentM.draw();
            IntelligentRoadTest.covSectorCompentU.draw();

        }

    }, 200);

    setTimeout(function () {
        /*IntelligentRoadTest.GridMap.clear();
        IntelligentRoadTest.GridMapM.clear();
        IntelligentRoadTest.GridMapU.clear();
//				var dataChe = [minLng,minLat,maxLng,maxLat,rsrp_avg,grid_num,agps_count,sector_set,
//				               dxrsrpAvg,rsrp_avgM,rsrp_avgU,monthrelate,dx_cover,yd_cover,lt_cover];
        IntelligentRoadTest.GridCanArrT = [];
        IntelligentRoadTest.GridCanArrM = [];
        IntelligentRoadTest.GridCanArrU = [];
        for(var i=0;i<IntelligentRoadTest.CanArr.length;i++){
            var griddata = IntelligentRoadTest.CanArr[i];
            if(griddata[8]!=null){
                var gridT = [griddata[0],griddata[1],griddata[2],griddata[3],griddata[8],griddata[12]];//三网电信rsrp
                IntelligentRoadTest.GridCanArrT.push(gridT);
            }

            if(griddata[9]!=null){
                var gridM = [griddata[0],griddata[1],griddata[2],griddata[3],griddata[9],griddata[13]];//三网移动rsrp
                IntelligentRoadTest.GridCanArrM.push(gridM);
            }

            if(griddata[10]!=null){
                var gridU = [griddata[0],griddata[1],griddata[2],griddata[3],griddata[10],griddata[14]];//三网联通rsrp
                IntelligentRoadTest.GridCanArrU.push(gridU);
            }
        }



        var CTData = IntelligentRoadTest.GridCanArrT;
        var CMData = IntelligentRoadTest.GridCanArrM;
        var CUData = IntelligentRoadTest.GridCanArrU;
        for(var j=0;j<IntelligentRoadTest.colorBarArr.length;j++){
            CTData = IntelligentRoadTest.ClearData(CTData,IntelligentRoadTest.colorBarArr[j]);
            CMData = IntelligentRoadTest.ClearData(CMData,IntelligentRoadTest.colorBarArr[j]);
            CUData = IntelligentRoadTest.ClearData(CUData,IntelligentRoadTest.colorBarArr[j]);
        }
        IntelligentRoadTest.GridMap.draw(CTData);
        IntelligentRoadTest.GridMapM.draw(CMData);
        IntelligentRoadTest.GridMapU.draw(CUData);
        CTData = null;
        CMData = null;
        CUData = null;
        IntelligentRoadTest.legendGrid();
        IntelligentRoadTest.openThreeLable();*/


        if (IntelligentRoadTest.isShowGrid && !IntelligentRoadTest.isShowDTGrid) {
            var progressBarSqls = [];
            var functionlist = [];
            var dataBase = [];
            var ajaxObj = {};
            if (IntelligentRoadTest.index == 13) {//框选三网的栅格
                var maxlng_maxlat_minlng_minlat = IntelligentRoadTest.maxlnglat_minlnglat[0] + "," + IntelligentRoadTest.maxlnglat_minlnglat[2] + "," + IntelligentRoadTest.maxlnglat_minlnglat[1] + "," + IntelligentRoadTest.maxlnglat_minlnglat[3];
                if (maxlng_maxlat_minlng_minlat + getPreMonth(IntelligentRoadTest.day) == IntelligentRoadTest.maxlng_maxlat_minlng_minlatThree) {
                    if (IntelligentRoadTest.gridThreeData) {
                        IntelligentRoadTestSystemLayerV3.filterThreeGridData(IntelligentRoadTest.gridThreeData);
                    }
                } else {
                    ajaxObj = IntelligentRoadTestSystemLayerV3.loadThreeBoxGrid(maxlng_maxlat_minlng_minlat);
                }
            } else {
                if (IntelligentRoadTest.currentLocation.toLowerCase().endsWith("sector")) {//重新查询栅格图层的数据
                    var item = IntelligentRoadTest.cacheItem;
                    var object_id = item.enodeb_id * 256 + item.cell_id;
                    IntelligentRoadTest.loadPoorAreaGrid(IntelligentRoadTest.day, item.city_id, item.country_id, object_id, 1, item.enodeb_id, item.cell_id);
                } else {
                    var maxlng_maxlat_minlng_minlat = IntelligentRoadTest.maxlnglat_minlnglat[0] + "," + IntelligentRoadTest.maxlnglat_minlnglat[2] + "," + IntelligentRoadTest.maxlnglat_minlnglat[1] + "," + IntelligentRoadTest.maxlnglat_minlnglat[3];
                    if (maxlng_maxlat_minlng_minlat + getPreMonth(IntelligentRoadTest.day) == IntelligentRoadTest.maxlng_maxlat_minlng_minlatThree) {
                        if (IntelligentRoadTest.gridThreeData) {
                            IntelligentRoadTestSystemLayerV3.showThreeGrid(IntelligentRoadTest.gridThreeData);
                        }
                    } else {
                        ajaxObj = IntelligentRoadTestSystemLayerV3.loadThreeGrid(maxlng_maxlat_minlng_minlat);
                    }
                }

            }
            if (ajaxObj.progressBarSqls != undefined && ajaxObj.functionlist != undefined && ajaxObj.dataBase != undefined) {
                progressBarSqls.push(ajaxObj.progressBarSqls);
                functionlist.push(ajaxObj.functionlist);
                dataBase.push(ajaxObj.dataBase);
            }
            if (progressBarSqls.length > 0 && functionlist.length > 0 && dataBase.length > 0) {
                progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase);
            }

        }
    }, 300);
}
//关闭三网
IntelligentRoadTest.closeThreeComp = function IntelligentRoadTest_closeThreeComp() {
    $(".fieldsetInfo .gridTypeDiv:not(:first) input , input[name='grid-type']:not(:first)").attr("disabled", false);
    $(".fieldsetInfo .gridTypeDiv:not(:first) input , input[name='grid-type']:not(:first)").siblings('label').removeClass("greyColor");
    $(".clickOpersComp").hide();
    IntelligentRoadTest.isThreeNetStatus = false;
    for (var i = 0; i < IntelligentRoadTest.linkImgPoints.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.linkImgPoints[i]);
    }

    IntelligentRoadTest.linkImgPoints = [];
    if (IntelligentRoadTest.focusPolyline != null) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.focusPolyline);
    }
    //清除移动和联通地图的多边形和标记点覆盖物
    /**
     for(var i=0;i<IntelligentRoadTest.badPolygonMarkerArrM.length;i++){
        IntelligentRoadTest.mapMobile.removeOverlay(IntelligentRoadTest.badPolygonMarkerArrM[i]);
    }
     for(var i=0;i<IntelligentRoadTest.badPolygonMarkerArrU.length;i++){
        IntelligentRoadTest.mapUnicom.removeOverlay(IntelligentRoadTest.badPolygonMarkerArrU[i]);
    }**/

    IntelligentRoadTest.poorAreaCompentM.clear();
    IntelligentRoadTest.poorAreaCompentU.clear();
    IntelligentRoadTest.poorCompentM.clear();
    IntelligentRoadTest.poorCompentU.clear();
    IntelligentRoadTest.covSectorCompentM.clear();
    IntelligentRoadTest.covSectorCompentU.clear();

    IntelligentRoadTest.GridMapM.clear();
    IntelligentRoadTest.GridMapU.clear();
    IntelligentRoadTest.GridMap.clear();


    IntelligentRoadTest.GridCanArrT = null;
    IntelligentRoadTest.GridCanArrM = null;
    IntelligentRoadTest.GridCanArrU = null;

    IntelligentRoadTest.GridCanArrT = [];
    IntelligentRoadTest.GridCanArrM = [];
    IntelligentRoadTest.GridCanArrU = [];

    /* var CTData = IntelligentRoadTest.CanArr;
     for(var j=0;j<IntelligentRoadTest.colorBarArr.length;j++){
         CTData = IntelligentRoadTest.ClearData(CTData,IntelligentRoadTest.colorBarArr[j]);
     }
     IntelligentRoadTest.GridMap.draw(CTData);
     CTData = null;*/
    if (IntelligentRoadTest.isShowGrid && !IntelligentRoadTest.isShowDTGrid) {
        var progressBarSqls = [];
        var functionlist = [];
        var dataBase = [];
        var ajaxObj = {};
        if (IntelligentRoadTest.index == 13) {//框选的栅格
            var maxlng_maxlat_minlng_minlat = IntelligentRoadTest.maxlnglat_minlnglat[0] + "," + IntelligentRoadTest.maxlnglat_minlnglat[2] + "," + IntelligentRoadTest.maxlnglat_minlnglat[1] + "," + IntelligentRoadTest.maxlnglat_minlnglat[3];
            if (maxlng_maxlat_minlng_minlat + IntelligentRoadTest.day + IntelligentRoadTest.gridType + IntelligentRoadTestSystemLayerV3.getCloumnsList() == IntelligentRoadTest.maxlng_maxlat_minlng_minlat) {
                if (IntelligentRoadTest.gridDataV2) {
                    IntelligentRoadTestSystemLayerV3.filterAreaGridData(IntelligentRoadTest.gridDataV2);
                }
            } else {
                ajaxObj = IntelligentRoadTestSystemLayerV3.loadAreaBoxGrid(maxlng_maxlat_minlng_minlat);
            }
        } else {
            if (IntelligentRoadTest.currentLocation.toLowerCase().endsWith("sector")) {//重新查询栅格图层的数据
                var item = IntelligentRoadTest.cacheItem;
                var object_id = item.enodeb_id * 256 + item.cell_id;
                IntelligentRoadTest.loadPoorAreaGrid(IntelligentRoadTest.day, item.city_id, item.country_id, object_id, 1, item.enodeb_id, item.cell_id);
            } else {
                var maxlng_maxlat_minlng_minlat = IntelligentRoadTest.maxlnglat_minlnglat[0] + "," + IntelligentRoadTest.maxlnglat_minlnglat[2] + "," + IntelligentRoadTest.maxlnglat_minlnglat[1] + "," + IntelligentRoadTest.maxlnglat_minlnglat[3];
                if (maxlng_maxlat_minlng_minlat + IntelligentRoadTest.day + IntelligentRoadTest.gridType + IntelligentRoadTestSystemLayerV3.getCloumnsList() == IntelligentRoadTest.maxlng_maxlat_minlng_minlat) {
                    if (IntelligentRoadTest.gridDataV2) {
                        IntelligentRoadTestSystemLayerV3.showGridV2(IntelligentRoadTest.gridDataV2);
                    }
                } else {
                    ajaxObj = IntelligentRoadTestSystemLayerV3.loadAreaGrid(maxlng_maxlat_minlng_minlat);
                }
            }
        }
        if (ajaxObj.progressBarSqls != undefined && ajaxObj.functionlist != undefined && ajaxObj.dataBase != undefined) {
            progressBarSqls.push(ajaxObj.progressBarSqls);
            functionlist.push(ajaxObj.functionlist);
            dataBase.push(ajaxObj.dataBase);
        }

        if (progressBarSqls.length > 0 && functionlist.length > 0 && dataBase.length > 0) {
            progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase);
        }
    }


    if (!$("#cirTipLeft").is(':hidden') && IntelligentRoadTest.threeLabel != null) {
        if (IntelligentRoadTest.threeLabel[2][1].val == undefined) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlayTwo);
            $("#cirTipLeft").hide();
        } else {
            IntelligentRoadTest.openInfoWindowTwo(IntelligentRoadTest.threeLabel[0], IntelligentRoadTest.threeLabel[1], IntelligentRoadTest.threeLabel[2]);
        }
    }
}
//使用百度接口进行名称搜索定位
IntelligentRoadTest.searchNameByMap = function IntelligentRoadTest_searchNameByMap(searchText) {
    if (IntelligentRoadTest.localSearch == undefined) {
        IntelligentRoadTest.localSearch = new BMap.LocalSearch(IntelligentRoadTest.city, {
            onSearchComplete: IntelligentRoadTest.localSearchSearchComplete
        });
    } else {
        IntelligentRoadTest.localSearch.clearResults();
    }
    IntelligentRoadTest.localSearch.search(searchText);

}
//根据经纬度进行定位
IntelligentRoadTest.searchByLngAndLat = function IntelligentRoadTest_searchByLngAndLat(searchText) {
    var lng = "";//经度
    var lat = "";//纬度
    if (IntelligentRoadTest.isShowBaiduMap) {
        if (searchText.toUpperCase().lastIndexOf("G") > -1 || searchText.toUpperCase().lastIndexOf("GPS") > -1) {//GPS
            searchText = searchText.replace(/gps|g/i, "").replace(/\ |\,|，/g, ",");
            var baiduPoint = GPSUtil.gps84_To_bd09(Number(searchText.split(",")[1]), Number(searchText.split(",")[0]));
            lng = baiduPoint[1];
            lat = baiduPoint[0];
        } else if (searchText.toUpperCase().lastIndexOf("B") > -1) {//baidu
            searchText = searchText.replace(/b/i, "").replace(/\ |\,|，/g, ",");
            lng = searchText.split(",")[0];
            lat = searchText.split(",")[1];
        } else {//没有添加任何后缀，则通过单选框确定radioGPS radioBaidu
            searchText = searchText.replace(/\ |\,|，/g, ",");
            if ($("#radioGPS").is(":checked")) {
                var baiduPoint = GPSUtil.gps84_To_bd09(Number(searchText.split(",")[1]), Number(searchText.split(",")[0]));
                lng = baiduPoint[1];
                lat = baiduPoint[0];
            } else {
                lng = searchText.split(",")[0];
                lat = searchText.split(",")[1];
            }
        }

        var polyPoint = new BMap.Point(Number(lng), Number(lat))
        IntelligentRoadTest.map.panTo(polyPoint, {noAnimation: false});

        if (IntelligentRoadTest.positioningMarker != null) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.positioningMarker);
        }
        var myIcon = new BMap.Icon("../js/IntelligentRoadTest/images/mapPositioning.png", new BMap.Size(23, 23));
        IntelligentRoadTest.positioningMarker = new BMap.Marker(polyPoint, {icon: myIcon});
        IntelligentRoadTest.positioningMarker.setZIndex(-1);
        IntelligentRoadTest.positioningMarker.setOffset(new BMap.Size(0, -12));
        IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.positioningMarker);
        if(IntelligentRoadTest.showNrCover){
            //加载显示附近覆盖的内容
            IntelligentRoadTest.loadNrCoverData(true);
        }
        //是否还需要增加定位点所在地市数据加载？新版本没有区县轮廓进行判断，因此不能根据定位点所在地市进行数据呈现
    } else {
        if (searchText.toUpperCase().lastIndexOf("G") > -1 || searchText.toUpperCase().lastIndexOf("GPS") > -1) {//GPS
            searchText = searchText.replace(/gps|g/i, "").replace(/\ |\,|，/g, ",");
            lng = searchText.split(",")[0];
            lat = searchText.split(",")[1];
        } else if (searchText.toUpperCase().lastIndexOf("B") > -1) {//baidu
            searchText = searchText.replace(/b|B/i, "").replace(/\ |\,|，/g, ",");
            var gpsPoint = GPSUtil.bd09_To_gps84(Number(searchText.split(",")[1]), Number(searchText.split(",")[0]));
            lng = gpsPoint[1];
            lat = gpsPoint[0];
        } else {//没有添加任何后缀，则通过单选框确定radioGPS radioBaidu
            searchText = searchText.replace(/\ |\,|，/g, ",");
            if ($("#radioGPS").is(":checked")) {
                lng = searchText.split(",")[0];
                lat = searchText.split(",")[1];
            } else {
                var gpsPoint = GPSUtil.bd09_To_gps84(Number(searchText.split(",")[1]), Number(searchText.split(",")[0]));
                lng = gpsPoint[1];
                lat = gpsPoint[0];
            }

        }
        var point = new L.latLng(lat, lng);
        IntelligentRoadTest.OsmMap.panTo(point);
        if (IntelligentRoadTest.positioningMarkerOSM != null) {
            IntelligentRoadTest.positioningMarkerOSM.remove();
        }
        var myIcon = L.icon({iconUrl: "../js/IntelligentRoadTest/images/mapPositioning.png", iconSize: [23, 23]});
        IntelligentRoadTest.positioningMarkerOSM = L.marker(point, {icon: myIcon}).addTo(IntelligentRoadTest.OsmMap);

    }


}
//根据用户所输入的基站id和小区id进行定位
IntelligentRoadTest.searchByCellId = function IntelligentRoadTest_searchByCellId(searchText) {
    var tex = searchText.split('_');
    var city = "";
    if ($("#cityPermission_common").val() != "全省") { //只有全省用户可以搜索全省的基站小区
        city = "and city_name = '" + $("#cityPermission_common").val() + "'";
    }
    var list = ["IntelligentRoadTest_17_cellPositioning", "DAY:" + IntelligentRoadTest.day, "BSTID:" + tex[0], "CELLID:" + tex[1], "CITY:" + city];
    var progressBarSqls = [];
    progressBarSqls.push(list);
    var functionlist = [IntelligentRoadTest.cellPositioning];
    var dataBase = [3];
    progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase);
}
//根据基站id和小区id进行定位，查询小区位置回调函数
IntelligentRoadTest.cellPositioning = function IntelligentRoadTest_cellPositioning(data) {
    var result = callBackChangeData(data);
    if (result.length > 0) {
        var point = new BMap.Point(result[0].longitude_baidu, result[0].latitude_baidu);
//		IntelligentRoadTest.map.centerAndZoom(point,17);
        IntelligentRoadTest.map.panTo(point, {noAnimation: false});
        IntelligentRoadTest.map.setZoom(18);

        if (IntelligentRoadTest.isThreeNetStatus) {
            IntelligentRoadTest.mapMobile.panTo(point, {noAnimation: false});
            IntelligentRoadTest.mapUnicom.panTo(point, {noAnimation: false});
        }

        if (IntelligentRoadTest.positioningMarker != null) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.positioningMarker);
        }
        var myIcon = new BMap.Icon("../js/IntelligentRoadTest/images/mapPositioning.png", new BMap.Size(23, 23));

        //画一个扇区
        IntelligentRoadTest.drawSectorAfterSearch(result[0]);

        if(IntelligentRoadTest.showNrCover){
            //加载显示附近覆盖的内容
            IntelligentRoadTest.loadNrCoverData(true);
        }

        // IntelligentRoadTest.positioningMarker = new BMap.Marker(point,{icon:myIcon});
        // IntelligentRoadTest.positioningMarker.setZIndex(-1);
        // IntelligentRoadTest.positioningMarker.setOffset(new BMap.Size(0,-12));
        // IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.positioningMarker);
        /**
         for(var i=0;i<IntelligentRoadTest.badPolygonMarkerArr.length;i++){
            //如果弱区的图标是定位图标，则换回弱区图标
            var markerImg = IntelligentRoadTest.badPolygonMarkerArr[i].getIcon();
            if(markerImg.imageUrl.indexOf("mapPositioning.png")>=0){
                markerImg.setImageUrl("../js/IntelligentRoadTest/images/markeRq.png");
                markerImg.setSize(new BMap.Size(23,32));
                IntelligentRoadTest.badPolygonMarkerArr[i].setIcon(markerImg);
            }
        }
         **/
//是否还需要增加定位点所在地市区县数据加载？新版本没有区县轮廓进行判断，因此不能根据定位点所在地市进行数据呈现

    } else {
        alert(IntelligentRoadTest.day + "查询不到该扇区");
    }
}

//根据列表类目进行搜索
IntelligentRoadTest.searchByCategoryIndex = function (val) {

    if (IntelligentRoadTest.index == 0 || IntelligentRoadTest.index == 24 || IntelligentRoadTest.index == 25
        || IntelligentRoadTest.index == 30 || IntelligentRoadTest.index == 31 || IntelligentRoadTest.index == 32) {//0弱区 , 24上行低速区 ， 25下行低速区 30MOD3干扰区  31重叠覆盖区 32越区覆盖区
        IntelligentRoadTest.getPoorAreaMessageByCondition();
    } else if (IntelligentRoadTest.index == 1) {// 1关注区域
        IntelligentRoadTest.getConcernAreaMessageByCondition();
    } else if (IntelligentRoadTest.index == 2) {//2工单
        IntelligentRoadTest.getAlarmInfoMessageByCondition();
    } else if (IntelligentRoadTest.index == 3 ||
        IntelligentRoadTest.index == 26 || IntelligentRoadTest.index == 27 || IntelligentRoadTest.index == 28) {//3扇区
        IntelligentRoadTest.getSectorMessageByCondition();
    } else if (IntelligentRoadTest.index == 4) {//4 DT
        IntelligentRoadTest.getDTMessageByCondition();
    } else if (IntelligentRoadTest.index == 5) {//5骨头
        IntelligentRoadTest.getBoneAreaMessageByCondition();
    } else if (IntelligentRoadTest.index == 6) {//6 宏扇区
        IntelligentRoadTest.getMacSectorMessageByCondition();
    } else if (IntelligentRoadTest.index == 7) {

    } else if (IntelligentRoadTest.index == 8) {

    } else if (IntelligentRoadTest.index == 29) { //用户抱怨
        IntelligentRoadTest.getUserComplainListByOption();
    }

}

/**********************************
 * @funcname IntelligentRoadTest.searchMetroByCondition
 * @funcdesc 根据地铁的名称来实现搜索功能
 * @param {String} senseName 场景名称
 * @param {String} val 搜索的内容
 * @return
 * @author 戴岭南
 * @create 2018/4/10 10:18
 * @modifier
 * @modify
 ***********************************/
//根据地铁的名称来实现搜索功能
IntelligentRoadTest.searchMetroByCondition = function IntelligentRoadTest_searchMetroByCondition(senseName, val) {
    // return;
    console.log("地铁搜索");
    if (IntelligentRoadTest.metroIndex == 1) {
        IntelligentRoadTest.seachMetroFirstListData(IntelligentRoadTest.city, IntelligentRoadTest.day, val);
    } else if (IntelligentRoadTest.metroIndex == 2) {
        IntelligentRoadTest.seachMetroSecondListData(IntelligentRoadTest.city, IntelligentRoadTest.day, val);
    }
    // IntelligentRoadTest.dealMetroSeachResult();

}

/**********************************
 * @funcname IntelligentRoadTest.searchSenseByCondition
 * @funcdesc 根据场景的名称来实现搜索功能
 * @param {String} senseName 场景名称
 * @param {String} val 搜索的内容
 * @return
 * @author  戴岭南
 * @create 2018/4/10 10:18
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.searchSenseByCondition = function IntelligentRoadTest_searchSenseByCondition(senseName, val) {
    $('#searchResult').hide();
    var allResult = [];
    if (senseName == "college") {
        allResult = IntelligentRoadTest.collegeResult;
    } else if (senseName == "uptown") {
        allResult = IntelligentRoadTest.uptownResult;
    } else if (senseName == "scenery") {
        allResult = IntelligentRoadTest.sceneryResult;
    } else if (senseName == "business") {
        allResult = IntelligentRoadTest.businessResult;
    } else if (senseName == "warwolf") {
        allResult = IntelligentRoadTest.warwolfResult;
    } else if (senseName == "food") {
        allResult = IntelligentRoadTest.foodResult;
    } else if (senseName == "market") {
        allResult = IntelligentRoadTest.marketResult;
    } else if (senseName == "site") {
        allResult = IntelligentRoadTest.siteResult;
    } else {
        allResult = IntelligentRoadTest.senseResult;
    }
    var condition;
    IntelligentRoadTest.collegeCrossFliterObj = crossfilter([]);
    IntelligentRoadTest.collegeCrossFliterObj.add(allResult);
    var collegeByNameFilter = IntelligentRoadTest.collegeCrossFliterObj.dimension(function (d) {
        return d
    });
    // console.log(dtByNameFilter.top(IntelligentRoadTest.dtCrossFliterObj.size()));
    if ($("#searchText").val().trim() != "") {
        condition = $("#searchText").val().trim();
        collegeByNameFilter.filter(function (d) {
            if (d.esbh_name.indexOf(condition) != -1) {
                return d;
            }
        });
        var result = collegeByNameFilter.top(IntelligentRoadTest.collegeCrossFliterObj.size());
    } else {
        var result = allResult;
    }
    //过滤后回显数据
    if (senseName == "college") {
        IntelligentRoadTest.filterCollegeResult = result;
        IntelligentRoadTest.collegeCurrentResult = IntelligentRoadTest.filterCollegeResult;
        IntelligentRoadTest.isFilterCollege = true;
        if ($("#searchText").val().trim() != "") {
            IntelligentRoadTest.showCollegeData(IntelligentRoadTest.filterCollegeResult);
        } else {
            $("#collegeSort ul li.selected").trigger("click");
        }
        // IntelligentRoadTest.seachResult ={type:"college",result:result};
    } else if (senseName == "uptown") {
        IntelligentRoadTest.filterUptownResult = result;
        IntelligentRoadTest.uptownCurrentResult = IntelligentRoadTest.filterUptownResult;
        IntelligentRoadTest.isFilterUptown = true;
        if ($("#searchText").val().trim() != "") {
            IntelligentRoadTest.showUptownData(IntelligentRoadTest.filterUptownResult);
        } else {
            $("#uptownSort ul li.selected").trigger("click");
        }
        // IntelligentRoadTest.seachResult ={type:"uptown",result:result};
    } else if (senseName == "scenery") {
        IntelligentRoadTest.filterSceneryResult = result;
        IntelligentRoadTest.sceneryCurrentResult = IntelligentRoadTest.filterSceneryResult;
        IntelligentRoadTest.isFilterScenery = true;
        if ($("#searchText").val().trim() != "") {
            IntelligentRoadTest.showSceneryData(IntelligentRoadTest.filterSceneryResult);
        } else {
            $("#scenerySort ul li.selected").trigger("click");
        }
        // IntelligentRoadTest.seachResult ={type:"scenery",result:result};
    } else if (senseName == "business") {
        IntelligentRoadTest.filterBusinessResult = result;
        IntelligentRoadTest.businessCurrentResult = IntelligentRoadTest.filterBusinessResult;
        IntelligentRoadTest.isFilterBusiness = true;
        if ($("#searchText").val().trim() != "") {
            IntelligentRoadTest.showBusinessData(IntelligentRoadTest.filterBusinessResult);
        } else {
            $("#businessSort ul li.selected").trigger("click");
        }
        // IntelligentRoadTest.seachResult ={type:"business",result:result};
    } else if (senseName == "warwolf") {
        IntelligentRoadTest.filterWarwolfResult = result;
        IntelligentRoadTest.warwolfCurrentResult = IntelligentRoadTest.filterWarwolfResult;
        IntelligentRoadTest.isFilterWarwolf = true;
        if ($("#searchText").val().trim() != "") {
            IntelligentRoadTest.showWarwolfData(IntelligentRoadTest.filterWarwolfResult);
        } else {
            $("#warwolfSort ul li.selected").trigger("click");
        }
        // IntelligentRoadTest.seachResult ={type:"warwolf",result:result};
    } else if (senseName == "food") {
        IntelligentRoadTest.filterFoodResult = result;
        IntelligentRoadTest.foodCurrentResult = IntelligentRoadTest.filterFoodResult;
        IntelligentRoadTest.isFilterFood = true;
        if ($("#searchText").val().trim() != "") {
            IntelligentRoadTest.showFoodData(IntelligentRoadTest.filterFoodResult);
        } else {
            $("#foodSort ul li.selected").trigger("click");
        }
        // IntelligentRoadTest.seachResult ={type:"food",result:result};
    } else if (senseName == "site") {
        IntelligentRoadTest.filterSiteResult = result;
        IntelligentRoadTest.siteCurrentResult = IntelligentRoadTest.filterSiteResult;
        IntelligentRoadTest.isFilterSite = true;
        if ($("#searchText").val().trim() != "") {
            IntelligentRoadTest.showSiteData(IntelligentRoadTest.filterSiteResult);
        } else {
            $("#siteSort ul li.selected").trigger("click");
        }
        // IntelligentRoadTest.seachResult ={type:"site",result:result};
    } else if (senseName == "market") {
        IntelligentRoadTest.filterMarketResult = result;
        IntelligentRoadTest.marketCurrentResult = IntelligentRoadTest.filterMarketResult;
        IntelligentRoadTest.isFilterMarket = true;
        if ($("#searchText").val().trim() != "") {
            IntelligentRoadTest.showMarketData(IntelligentRoadTest.filterMarketResult);
        } else {
            $("#marketSort ul li.selected").trigger("click");
        }
        // IntelligentRoadTest.seachResult ={type:"market",result:result};
    } else {
        IntelligentRoadTest.filterSenseResult = result;
        IntelligentRoadTest.senseCurrentResult = IntelligentRoadTest.filterSenseResult;
        IntelligentRoadTest.isFilterSense = true;
        if ($("#searchText").val().trim() != "") {
            IntelligentRoadTest.showSenseData(IntelligentRoadTest.filterSenseResult);
        } else {
            $("#senseSort ul li.selected").trigger("click");
        }
    }

    $('#searchResult').hide();
}


/**********************************
 * @funcname IntelligentRoadTest.searchLineByCondition
 * @funcdesc 根据线路（高速、高铁、地铁）的索引来实现搜索功能
 * @param {String} index 场景索引
 * @param {String} val 搜索的内容
 * @return
 * @author 戴岭南
 * @create 2018/4/10 10:18
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.searchLineByCondition = function IntelligentRoadTest_searchSenseByCondition(index, val) {
    var lineType;
    var selectName;
    var isLp;
    if (index == 7) {
        lineType = 1;
        selectName = $("#highwaySelectName").text();
    } else if (index == 8) {
        lineType = 2;
        selectName = $("#railListSelectName").text();
    } else if (index == 14) {
        lineType = 3;
        selectName = $("#cityRoadSelectName").text();
    }

    if(IntelligentRoadTest.index == 8){
        if (selectName == "综合") {
            isLp = false;
        } else {
            isLp = true;
        }
    }else{
        if (selectName == "500米分段统计") {
            isLp = false;
        } else {
            isLp = true;
        }
    }
    if (IntelligentRoadTest.roadIndex == 1) {
        IntelligentRoadTest.seachRoadFirstListData(IntelligentRoadTest.city, IntelligentRoadTest.day, lineType, isLp, val);
    } else if (IntelligentRoadTest.roadIndex == 2) {
        IntelligentRoadTest.seachRoadSecondListData(IntelligentRoadTest.city, IntelligentRoadTest.day, lineType, isLp, val);
    }
    // IntelligentRoadTest.dealSeachResult();

}
/**********************************
 * @funcname IntelligentRoadTest.dealMetroSeachResult
 * @funcdesc 处理地铁搜索结果（第一二层结果集）
 * @param
 * @return
 * @author 戴岭南
 * @create 2018/4/10 10:25
 * @modifier
 * @modify
 ***********************************/

IntelligentRoadTest.dealMetroSeachResult = function IntelligentRoadTest_dealMetroSeachResult() {
    var resultStr = '';
    if (IntelligentRoadTest.LineFirstSeachResult.length != 0) {
        for (var i = 0; i < IntelligentRoadTest.LineFirstSeachResult.length; i++) {
            resultStr += '<li type="firstLine" clickId="' + IntelligentRoadTest.LineFirstSeachResult[i].line_id + '"><span></span><span>' + IntelligentRoadTest.LineFirstSeachResult[i].line_name + '</span><span>线路</span></li>';
        }
    }
    if (IntelligentRoadTest.LineSecondSeachResult.length != 0) {
        for (var i = 0; i < IntelligentRoadTest.LineSecondSeachResult.length; i++) {
            resultStr += '<li type="secondLine" clickId="' + IntelligentRoadTest.LineSecondSeachResult[i].from_station_id + '"><span>' + IntelligentRoadTest.LineSecondSeachResult[i].line_name + '</span><span>' + IntelligentRoadTest.LineSecondSeachResult[i].from_station_name + '</span><span>站点</span></li>';
        }
    }

    if (resultStr != '') {
        $('#searchResult').html(resultStr);
        setTimeout(function () {
            if ($('#searchText').val().trim() != "") {
                $('#searchResult').show();
            }
        }, 100);
    } else {
        $('#searchResult').html('无结果');
        setTimeout(function () {
            if ($('#searchText').val().trim() != "") {
                $('#searchResult').show();
            }
        }, 100);
    }

    $('#searchResult li').unbind('click').bind('click', function () {
        var type = $(this).attr('type');
        var clickId = $(this).attr('clickId');
        if ("firstLine" == type) {
            for (var i = 0; i < IntelligentRoadTest.LineFirstSeachResult.length; i++) {
                if (clickId == IntelligentRoadTest.LineFirstSeachResult[i].line_id) {
                    //调用进入详情页方法
                    //第二层
//                	IntelligentRoadTest.metroClick();
                    IntelligentRoadTest.metroVM.goNextList(IntelligentRoadTest.LineFirstSeachResult[i], 1);
                    // break;
                }
            }
        } else if ("secondLine" == type) {
            for (var i = 0; i < IntelligentRoadTest.LineSecondSeachResult.length; i++) {
                if (clickId == IntelligentRoadTest.LineSecondSeachResult[i].from_station_id) {
                    //调用进入详情页方法
                    //第层
                    if(IntelligentRoadTest.metroCompleteVM == null){
                        IntelligentRoadTest.showMetroSecondList([]);
                    }
                    // IntelligentRoadTest.initMetroSecondVM();
                    IntelligentRoadTest.isSkip = true;
                    IntelligentRoadTest.metroSecondVM.showMessage(IntelligentRoadTest.LineSecondSeachResult[i], 1);
                    // break;
                }
            }

        }
        $('#searchResult').hide();
    });
}

/**********************************
 * @funcname IntelligentRoadTest.dealSeachResult
 * @funcdesc 处理一二层线路搜索结果
 * @param
 * @return
 * @author 戴岭南
 * @create 2018/4/10 10:34
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.dealSeachResult = function IntelligentRoadTest_dealSeachResult() {
    var resultStr = '';
    for (var i = 0; i < IntelligentRoadTest.LineFirstSeachResult.length; i++) {
        resultStr += '<li type="firstLine" clickId="' + IntelligentRoadTest.LineFirstSeachResult[i].road_id + '"><span></span><span>' + IntelligentRoadTest.LineFirstSeachResult[i].road_name + '</span><span>线路</span></li>';
    }
    for (var i = 0; i < IntelligentRoadTest.LineSecondSeachResult.length; i++) {
        resultStr += '<li type="secondLine" clickId="' + IntelligentRoadTest.LineSecondSeachResult[i].line_id + '"><span></span><span>' + IntelligentRoadTest.LineSecondSeachResult[i].line_id + '</span><span>路段</span></li>';
    }
    if (resultStr != '') {
        $('#searchResult').html(resultStr);
        setTimeout(function () {
            if ($('#searchText').val().trim() != "") {
                $('#searchResult').show();
            }
        }, 100);
    } else {
        $('#searchResult').html('无结果');
        setTimeout(function () {
            if ($('#searchText').val().trim() != "") {
                $('#searchResult').show();
            }
        }, 100);
    }

    $('#searchResult li').unbind('click').bind('click', function () {
        var type = $(this).attr('type');
        var clickId = $(this).attr('clickId');
        if ("firstLine" == type) {
            for (var i = 0; i < IntelligentRoadTest.LineFirstSeachResult.length; i++) {
                if (clickId == IntelligentRoadTest.LineFirstSeachResult[i].road_id) {
                    //调用进入详情页方法
                    if (IntelligentRoadTest.index == 7) {

                        IntelligentRoadTest.highwayVM.goNextList(IntelligentRoadTest.LineFirstSeachResult[i]);
                    } else if (IntelligentRoadTest.index == 8) {

                        IntelligentRoadTest.railVM.goNextList(IntelligentRoadTest.LineFirstSeachResult[i]);
                    } else if (IntelligentRoadTest.index == 14) {

                        IntelligentRoadTest.cityRoadVM.goNextList(IntelligentRoadTest.LineFirstSeachResult[i]);
                    }
                    // break;
                }
            }
        } else if ("secondLine" == type) {
            for (var i = 0; i < IntelligentRoadTest.LineSecondSeachResult.length; i++) {
                if (clickId == IntelligentRoadTest.LineSecondSeachResult[i].line_id) {
                    //调用进入详情页方法
                    if (IntelligentRoadTest.index == 7) {
                        IntelligentRoadTest.initHighwaySecondVM();
                        IntelligentRoadTest.isSkip = true;
                        IntelligentRoadTest.highwaySecondVM.showMessage(IntelligentRoadTest.LineSecondSeachResult[i]);
                    } else if (IntelligentRoadTest.index == 8) {
                        IntelligentRoadTest.initRailSecondVM();
                        IntelligentRoadTest.isSkip = true;
                        IntelligentRoadTest.railSecondVM.showMessage(IntelligentRoadTest.LineSecondSeachResult[i]);
                    } else if (IntelligentRoadTest.index == 14) {
                        IntelligentRoadTest.initCityRoadSecondVM();
                        IntelligentRoadTest.isSkip = true;
                        IntelligentRoadTest.cityRoadSecondVM.showMessage(IntelligentRoadTest.LineSecondSeachResult[i]);
                    }
                    // break;
                }
            }

        }
        $('#searchResult').hide();
    });
}


/**********************************
 * @funcname IntelligentRoadTest.seachMetroFirstListData
 * @funcdesc 地铁一级列表搜索
 * @param {String} cityName 地市名称
 * @param {String} day 查询时间
 * @param {String} val 搜索的内容
 * @return
 * @author 戴岭南
 * @create 2018/4/10 10:21
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.seachMetroFirstListData = function IntelligentRoadTest_seachMetroFirstListData(cityName, day, val) {
    $('#searchResult').hide();
    var result = [];
    IntelligentRoadTest.metroFirstSearchFilter = crossfilter(IntelligentRoadTest.metroFirstListResult);
    var metroFirstFilter = IntelligentRoadTest.metroFirstSearchFilter.dimension(function (d) {
        return d
    });
    if ($("#searchText").val().trim() != "") {
        var selectCondition = IntelligentRoadTest.dealSelectConditionString($("#searchText").val().trim());
        metroFirstFilter.filter(function (d) {
            if (d.line_name.toString().indexOf(selectCondition) != -1) {
                return d;
            }
        });
        result = metroFirstFilter.top(IntelligentRoadTest.metroFirstListResult.length);
    } else {
        result = IntelligentRoadTest.metroFirstListResult;
        $('#searchResult').hide();
    }

    IntelligentRoadTest.metroFirstSearchFilter.remove();//移除
    //过滤后回显数据
    IntelligentRoadTest.filterMetroFirstResult = result;
    IntelligentRoadTest.LineFirstSeachResult = result;
    IntelligentRoadTest.metroFirstListCurrentResult = IntelligentRoadTest.filterMetroFirstResult;
    // IntelligentRoadTest.isFilterConcernArea = true;
    if ($("#searchText").val().trim() != "") {
        IntelligentRoadTest.showMetroFirstList(result);
    } else {
        $("#metroSort ul li").trigger('click');
    }
}


/**********************************
 * @funcname IntelligentRoadTest.seachMetroSecondListData
 * @funcdesc 地铁二级列表搜索
 * @param {String} cityName 地市名称
 * @param {String} day 查询时间
 * @param {String} val 搜索的内容
 * @return
 * @author 戴岭南
 * @create 2018/4/10 10:21
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.seachMetroSecondListData = function IntelligentRoadTest_seachMetroSecondListData(cityName, day, val) {

    $('#searchResult').hide();
    var result = [];
    IntelligentRoadTest.metroSecondSearchFilter = crossfilter(IntelligentRoadTest.metroSecondListResult);
    var metroSecondFilter = IntelligentRoadTest.metroSecondSearchFilter.dimension(function (d) {
        return d
    });
    if ($("#searchText").val().trim() != "") {
        var selectCondition = IntelligentRoadTest.dealSelectConditionString($("#searchText").val().trim());
        metroSecondFilter.filter(function (d) {
            if (d.from_station_name.toString().indexOf(selectCondition) != -1 || d.to_station_name.toString().indexOf(selectCondition) != -1) {
                return d;
            }
        });
        result = metroSecondFilter.top(IntelligentRoadTest.metroSecondListResult.length);
    } else {
        result = IntelligentRoadTest.metroSecondListResult;
        $('#searchResult').hide();
    }

    IntelligentRoadTest.metroSecondSearchFilter.remove();//移除
    //过滤后回显数据
    IntelligentRoadTest.filterMetroSecondResult = result;
    IntelligentRoadTest.LineSecondSeachResult = result;
    IntelligentRoadTest.metroSecondListCurrentResult = IntelligentRoadTest.filterMetroSecondResult;

    if ($("#searchText").val().trim() != "") {
        IntelligentRoadTest.showMetroSecondList(result);
    } else {
        $("#metroSortD ul li").trigger('click');
    }
}


/**********************************
 * @funcname IntelligentRoadTest.seachRoadFirstListData
 * @funcdesc 搜索道路（高速、高铁、地铁）一级列表
 * @param {String} cityName 地市名称
 * @param {String} day 查询时间
 * @param {int} typeID 线路类型id
 * @param {boolean} isLP 是否连片
 * @param {String} val 搜索内容
 * @return
 * @author 戴岭南
 * @create 2018/4/10 10:21
 * @modifier
 * @modify
 ***********************************/

IntelligentRoadTest.seachRoadFirstListData = function IntelligentRoadTest_seachRoadFirstListData(cityName, day, typeID, isLP, val) {
    $('#searchResult').hide();
    var result = [];
    if (typeID == 1) { //高速
        IntelligentRoadTest.highwayFirstSearchFilter = crossfilter(IntelligentRoadTest.highwayFirstListResult);
        var highwayFirstFilter = IntelligentRoadTest.highwayFirstSearchFilter.dimension(function (d) {
            return d
        });
        if ($("#searchText").val().trim() != "") {
            var selectCondition = IntelligentRoadTest.dealSelectConditionString($("#searchText").val().trim());
            highwayFirstFilter.filter(function (d) {
                if (d.road_name.toString().indexOf(selectCondition) != -1) {
                    return d;
                }
            });
            result = highwayFirstFilter.top(IntelligentRoadTest.highwayFirstListResult.length);
        } else {
            result = IntelligentRoadTest.highwayFirstListResult;
            $('#searchResult').hide();
        }

        IntelligentRoadTest.highwayFirstSearchFilter.remove();//移除
        //过滤后回显数据
        IntelligentRoadTest.filterHighwayFirstResult = result;
        IntelligentRoadTest.LineFirstSeachResult = result;
        IntelligentRoadTest.highwayFirstListCurrentResult = IntelligentRoadTest.filterHighwayFirstResult;
        if ($("#searchText").val().trim() != "") {
            IntelligentRoadTest.showRoadFirstList(result, typeID, isLP);
        } else {
            $("#highwaySort ul li").trigger('click');
        }
    } else if (typeID == 2) { //高铁
        IntelligentRoadTest.railFirstSearchFilter = crossfilter(IntelligentRoadTest.railFirstListResult);
        var railFirstFilter = IntelligentRoadTest.railFirstSearchFilter.dimension(function (d) {
            return d
        });
        if ($("#searchText").val().trim() != "") {
            var selectCondition = IntelligentRoadTest.dealSelectConditionString($("#searchText").val().trim());
            railFirstFilter.filter(function (d) {
                if (d.road_name.toString().indexOf(selectCondition) != -1) {
                    return d;
                }
            });
            result = railFirstFilter.top(IntelligentRoadTest.railFirstListResult.length);
        } else {
            result = IntelligentRoadTest.railFirstListResult;
            $('#searchResult').hide();
        }

        IntelligentRoadTest.railFirstSearchFilter.remove();//移除
        //过滤后回显数据
        IntelligentRoadTest.filterRailFirstResult = result;
        IntelligentRoadTest.LineFirstSeachResult = result;
        IntelligentRoadTest.railFirstListCurrentResult = IntelligentRoadTest.filterRailFirstResult;

        if ($("#searchText").val().trim() != "") {
            IntelligentRoadTest.showRoadFirstList(result, typeID, isLP);
        } else {
            $("#railSort ul li").trigger('click');
        }
    } else if (typeID == 3) {
        IntelligentRoadTest.cityRoadFirstSearchFilter = crossfilter(IntelligentRoadTest.cityRoadFirstListResult);
        var cityRoadFirstFilter = IntelligentRoadTest.cityRoadFirstSearchFilter.dimension(function (d) {
            return d
        });
        if ($("#searchText").val().trim() != "") {
            var selectCondition = IntelligentRoadTest.dealSelectConditionString($("#searchText").val().trim());
            cityRoadFirstFilter.filter(function (d) {
                if (d.road_name.toString().indexOf(selectCondition) != -1) {
                    return d;
                }
            });
            result = cityRoadFirstFilter.top(IntelligentRoadTest.cityRoadFirstListResult.length);
        } else {
            result = IntelligentRoadTest.cityRoadFirstListResult;
            $('#searchResult').hide();
        }

        IntelligentRoadTest.cityRoadFirstSearchFilter.remove();//移除
        //过滤后回显数据
        IntelligentRoadTest.filterCityRoadFirstResult = result;
        IntelligentRoadTest.LineFirstSeachResult = result;
        IntelligentRoadTest.cityRoadFirstListCurrentResult = IntelligentRoadTest.filterCityRoadFirstResult;

        if ($("#searchText").val().trim() != "") {
            IntelligentRoadTest.showRoadFirstList(result, typeID, isLP);
        } else {
            $("#cityRoadSort ul li").trigger('click');
        }
    }

}


/**********************************
 * @funcname IntelligentRoadTest.seachRoadSecondListData
 * @funcdesc 搜索道路（高速、高铁、地铁）二级列表
 * @param {String} cityName 地市名称
 * @param {String} day 查询时间
 * @param {int} typeID 线路类型id
 * @param {boolean} isLP 是否连片
 * @param {String} val 搜索内容
 * @return
 * @author 戴岭南
 * @create 2018/4/10 10:21
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.seachRoadSecondListData = function IntelligentRoadTest_seachRoadSecondListData(cityName, day, typeID, isLP, val) {

    $('#searchResult').hide();
    var result = [];
    if (typeID == 1) { //高速
        IntelligentRoadTest.highwaySecondSearchFilter = crossfilter(IntelligentRoadTest.highwaySecondListResult);
        var highwaySecondFilter = IntelligentRoadTest.highwaySecondSearchFilter.dimension(function (d) {
            return d
        });
        if ($("#searchText").val().trim() != "") {
            var selectCondition = IntelligentRoadTest.dealSelectConditionString($("#searchText").val().trim());
            highwaySecondFilter.filter(function (d) {
                if (d.line_id.toString().indexOf(selectCondition) != -1) {
                    return d;
                }
            });
            result = highwaySecondFilter.top(IntelligentRoadTest.highwaySecondListResult.length);
        } else {
            result = IntelligentRoadTest.highwaySecondListResult;
            $('#searchResult').hide();
        }

        IntelligentRoadTest.highwaySecondSearchFilter.remove();//移除
        //过滤后回显数据
        IntelligentRoadTest.filterHighwaySecondResult = result;
        IntelligentRoadTest.LineSecondSeachResult = result;
        IntelligentRoadTest.highwaySecondListCurrentResult = IntelligentRoadTest.filterHighwaySecondResult;

        if ($("#searchText").val().trim() != "") {
            IntelligentRoadTest.showRoadSecondList(result, typeID, isLP);
        } else {
            $("#highwaySortD ul li").trigger('click');
        }
    } else if (typeID == 2) { //高铁
        IntelligentRoadTest.railSecondSearchFilter = crossfilter(IntelligentRoadTest.railSecondListResult);
        var railSecondFilter = IntelligentRoadTest.railSecondSearchFilter.dimension(function (d) {
            return d
        });
        if ($("#searchText").val().trim() != "") {
            var selectCondition = IntelligentRoadTest.dealSelectConditionString($("#searchText").val().trim());
            railSecondFilter.filter(function (d) {
                if (d.line_id.toString().indexOf(selectCondition) != -1) {
                    return d;
                }
            });
            result = railSecondFilter.top(IntelligentRoadTest.railSecondListResult.length);
        } else {
            result = IntelligentRoadTest.railSecondListResult;
            $('#searchResult').hide();
        }

        IntelligentRoadTest.railSecondSearchFilter.remove();//移除
        //过滤后回显数据
        IntelligentRoadTest.filterRailSecondResult = result;
        IntelligentRoadTest.LineSecondSeachResult = result;
        IntelligentRoadTest.railSecondListCurrentResult = IntelligentRoadTest.filterRailSecondResult;
        if ($("#searchText").val().trim() != "") {
            IntelligentRoadTest.showRoadSecondList(result, typeID, isLP);
        } else {
            $("#railSortD ul li").trigger('click');
        }
    } else if (typeID == 3) {
        IntelligentRoadTest.cityRoadSecondSearchFilter = crossfilter(IntelligentRoadTest.cityRoadSecondListResult);
        var cityRoadSecondFilter = IntelligentRoadTest.cityRoadSecondSearchFilter.dimension(function (d) {
            return d
        });
        if ($("#searchText").val().trim() != "") {
            var selectCondition = IntelligentRoadTest.dealSelectConditionString($("#searchText").val().trim());
            cityRoadSecondFilter.filter(function (d) {
                if (d.line_id.toString().indexOf(selectCondition) != -1) {
                    return d;
                }
            });
            result = cityRoadSecondFilter.top(IntelligentRoadTest.cityRoadSecondListResult.length);
        } else {
            result = IntelligentRoadTest.cityRoadSecondListResult;
            $('#searchResult').hide();
        }

        IntelligentRoadTest.cityRoadSecondSearchFilter.remove();//移除
        //过滤后回显数据
        IntelligentRoadTest.filterCityRoadSecondResult = result;
        IntelligentRoadTest.LineSecondSeachResult = result;
        IntelligentRoadTest.cityRoadSecondListCurrentResult = IntelligentRoadTest.filterCityRoadSecondResult;

        if ($("#searchText").val().trim() != "") {
            IntelligentRoadTest.showRoadSecondList(result, typeID, isLP);
        } else {
            $("#cityRoadSortD ul li").trigger('click');
        }
    }

}


//加载用户选择的图层数据
/***********************
 * @funcname IntelligentRoadTest_submitLayersData
 * @funcdesc 加载用户选择的图层数据
 * @param {String} (input optional) cityname 当前地图移动到的地市名称
 * @return {null}
 ************************/
IntelligentRoadTest.submitLayersData = function IntelligentRoadTest_submitLayersData(cityname) {
    console.log("=============加载图层方法执行============");
    var systemLayerOld = IntelligentRoadTest.systemLayer;
    var city = $('#topCitySelect .city-selected').text();
    if(IntelligentRoadTest.cityPermission_common!="全省"){//地市用户进来只能查看自己地市的图层
        city=IntelligentRoadTest.cityPermission_common;
    }
    if (cityname != null && cityname != undefined) {
        city = cityname;
        IntelligentRoadTest.requery = true;
    }

    //需要将图层透明度进行记录（）
    var sectorOpacity = parseFloat($('#sectorOpacity').val());
    var sector2GOpacity = parseFloat($('#sector2GOpacity').val());
    var poorOpacity = parseFloat($('#poorOpacity').val());
    var gridOpacity = parseFloat($('#gridOpacity').val());
    var sceneOpacity = parseFloat($('#sceneOpacity').val());
    var userOpacity = parseFloat($('#userOpacity').val());
    var lineOpacity = parseFloat($('#lineOpacity').val());
    let sectorYDOpacity = parseFloat($('#yd_SectorOpacity').val());
    let sectorYDZindex = 8 - ($('.layerTabCon table').index($('#yd_sector').parents('table.ui-sortable-handle')) + 1);
    //需要将图层顺序进行记录
    var sectorZindex = 8 - ($('.layerTabCon table').index($('#sector').parents('table.ui-sortable-handle')) + 1);
    var sector2GZindex = 8 - ($('.layerTabCon table').index($('#sector2G').parents('table.ui-sortable-handle')) + 1);
    var poorAreaZindex = 8 - ($('.layerTabCon table').index($('#poorArea').parents('table.ui-sortable-handle')) + 1);
    var gridZindex = 8 - ($('.layerTabCon table').index($('#grid').parents('table.ui-sortable-handle')) + 1);
    var sceneZindex = 8 - ($('.layerTabCon table').index($('#scene').parents('table.ui-sortable-handle')) + 1);
    var userZindex = 8 - ($('.layerTabCon table').index($('#userComplain').parents('table.ui-sortable-handle')) + 1);
    var lineZindex = 8 - ($('.layerTabCon table').index($('#lineArea').parents('table.ui-sortable-handle')) + 1);
    /*var concernAreaZindex = 5-($('#layerUl li').index($('#concernArea').parent())+1);
    var boneAreaZindex = 5-($('#layerUl li').index($('#boneArea').parent())+1);*/

    /*缓存用户选择的图层数据start*/
    //扇区类型
    var sectorType = [];
    $('input:checkbox[name="type-sector"]:checked').each(function (i) {
        sectorType.push($(this).val());
    });
    //扇区使用频段
    var sectorBand = [];
    $('input:checkbox[name="band-sector"]:checked').each(function (i) {
        sectorBand.push($(this).val());
    });
    //扇区设备厂家
    var sectorFactory = [];
    var factoryArr = [];
    $('input:checkbox[name="factory-sector"]').each(function (i) {
        if($(this).is(':checked')){
            var factory = $(this).val();
            var color = $(this).next().css('background-color');
            factoryArr.push(factory);
            sectorFactory.push({type: factory, color: color});
        }
    });
    //扇区专题扇区
    var sectorCov = [];
    $('input:checkbox[name="cov-sector"]:checked').each(function (i) {
        sectorCov.push($(this).val());
    });

    /*2G扇区图层start*/
    //2G扇区设备厂家
    var sector2GFactory = [];
    var factory2GArr = [];
    $('input:checkbox[name="factory-sector-2g"]').each(function (i) {
        if($(this).is(':checked')){
            var factory = $(this).val();
            var color = $(this).next().css('background-color');
            factory2GArr.push(factory);
            sector2GFactory.push({type: factory, color: color});
        }
    });
    /*2G扇区图层end*/

    /*移动站址图层 start*/
    var sectorYDFactory = [];
    $('input:checkbox[name="factory-sector-yd"]:checked').each(function (i) {
        var factory = $(this).val();
        var color = $(this).next().css('background-color');
        sectorYDFactory.push({type: factory, color: color});
    });
    /*移动站址图层 end*/

    //栅格覆盖频段
    var gridBandIndex = $('input:radio[name="band-radio"]:checked').val();//不分频段、区分频段下标
    var gridBand = [];
    if (gridBandIndex == 0) {
        if($('input:radio[name="chq-grid"]:checked').length==1){
            gridBand.push($('input:radio[name="chq-grid"]:checked').val());
        }
    } else {
        $('input:checkbox[name="band-grid"]:checked').each(function (i) {
            gridBand.push($(this).val());
        });
    }
    //栅格数据
    var gridType = $('input:radio[name="gridNum"]:checked').val();
    // 栅格时间粒度
    var gridTime = $('input:radio[name="gridTime"]:checked').val();
    //栅格覆盖质量
    var gridTypeIndex = $('input:radio[name="grid-type"]:checked').val();//覆盖质量-0、上行速率-1、下行速率-2、MOD3干扰扇区-3、越区覆盖扇区-4、重叠覆盖扇区-5、EC/IO-6           ------MOD3干扰弱区-6、越区覆盖弱区-7、重叠覆盖弱区-8
    var gridThresholds = IntelligentRoadTestSystemLayerV3.getGridThresholds(gridTypeIndex, gridOpacity);
    var gridNum = $('.gridFieldset2 input[name="grid-type"][value="'+gridTypeIndex+'"]').parent().index();
    var [ ...gridThresholdsEnd ] = gridThresholds; //深克隆
    gridThresholdsEnd.push({ "color": null, "gradient": gridOpacity, "selected":$('.gridFieldSetInfo .gridTypeDiv:eq('+gridNum+') input[value="6"]').is(':checked'),"level":6});
    var lineTypeIndex = $('input:radio[name="grid-type-line"]:checked').val();//覆盖质量-0、上行速率-1、下行速率-2
    var lineThresholds = IntelligentRoadTestSystemLayerV3.getLineThresholds(lineTypeIndex, lineOpacity);

    //弱区弱覆盖区==> 专题图层
    var poorValue = [];
    $('input[name="type-quyu"]:checked').each(function (i) {//区域边界
        poorValue.push({color: $(this).next().css('background-color'), value: $(this).val(), id: $(this).attr("id")});
    });
    var minGridNum = $("#minGridNum").val();
    var maxGridNum = $("#maxGridNum").val();
    var poorCover = {"poorValue": poorValue, "minGridNum": minGridNum, "maxGridNum": maxGridNum};

    //场景边界
    var sceneColor = $('input:radio[name="sceneRadio"]:checked').next().css('background-color');
    var scenevalue = $('input:radio[name="sceneRadio"]:checked').val();
    var sceneName = $('input:radio[name="sceneRadio"]:checked').siblings('label').text();
    var sceneArea = {"color": sceneColor, "value": scenevalue, "name": sceneName};

    //全量工单
    var fullOrder = [], full = [];
    $('input[name="full-order"]:checked').each(function (i) {//区域边界
        fullOrder.push({color: $(this).next().css('background-color'), value: $(this).val(), id: $(this).attr("id")});
        full.push($(this).val());
    });

    //抱怨热点
    var complainHot = [], hot = [];
    $('input[name="complain-hot"]:checked').each(function (i) {//区域边界
        complainHot.push({color: $(this).next().css('background-color'), value: $(this).val(), id: $(this).attr("id")});
        hot.push($(this).val());
    });

    //越级工单
    var overOrder = [], over = [];
    $('input[name="over-order"]:checked').each(function (i) {//区域边界
        overOrder.push({color: $(this).next().css('background-color'), value: $(this).val(), id: $(this).attr("id")});
        over.push($(this).val());
    });

    var systemLayer = {
        "version": 0.9,
        "zIndex": [
            {"name": "sector", "index": sectorZindex},
            {"name": "sector2G", "index": sector2GZindex},
            {"name": "yd_sector", "index": sectorYDZindex},
            {"name": "poorArea", "index": poorAreaZindex},
            {"name": "grid", "index": gridZindex},
            {"name": "scene", "index": sceneZindex},
            {"name": "userComplain", "index": userZindex},
            {"name": "lineArea", "index": lineZindex}
        ],
        "sector": {
            "selected": $('#sector').is(':checked'),
            "zIndex": sectorZindex,
            "opacity": sectorOpacity,
            "type": sectorType,
            "band": sectorBand,
            "factory": sectorFactory,
            "covSector": sectorCov
        },
        "sector2G": {
            "selected": $('#sector2G').is(':checked'),
            "zIndex": sector2GZindex,
            "opacity": sector2GOpacity,
            "factory": sector2GFactory,
        },
        "yd_sector": {
            "selected": $('#yd_sector').is(':checked'),
            "zIndex": sectorYDZindex,
            "opacity":sectorYDOpacity,
            "factory": sectorYDFactory,
        },
        "poorArea": {
            "selected": $('#poorArea').is(':checked'),
            "zIndex": poorAreaZindex,
            "opacity": poorOpacity,
            "poorCover": poorCover
        },
        "grid": {
            "selected": true,
            "zIndex": gridZindex,
            "opacity": gridOpacity,
            "band": {"gridBandIndex": gridBandIndex, "gridBand": gridBand},
            "type": gridType,
            "time": gridTime,
            "thresholds": {"gridTypeIndex": gridTypeIndex, "gridThresholds": gridThresholdsEnd},
        },
        "scene": {
            "selected": $('#scene').is(':checked'),
            "zIndex": sceneZindex,
            "opacity": sceneOpacity,
            "area": sceneArea
        },
        "userComplain": {
            "selected": $('#userComplain').is(':checked'),
            "zIndex": userZindex,
            "opacity": userOpacity,
            "fullOrder": fullOrder,
            "complainHot": complainHot,
            "overOrder": overOrder
        },
        "lineArea": {
            "selected": true,
            "zIndex": lineZindex,
            "opacity": lineOpacity,
            "thresholds": {"lineTypeIndex": lineTypeIndex, "lineThresholds": lineThresholds},
        }
    };

    IntelligentRoadTest.gridBand = gridBand;//栅格频段
    IntelligentRoadTest.gridType = gridType;//栅格数据 1--AGPS-MR、0--全量MR综合、3--全量MR室外、2--全量MR室内
    IntelligentRoadTest.gridTime = gridTime;//栅格时间粒度
    IntelligentRoadTest.gridBandIndex = gridBandIndex;//栅格频段下标 0--不分频段  1--区分频段
    IntelligentRoadTest.gridTypeIndex = gridTypeIndex;//栅格类型下标 0--覆盖质量  1--上行速率  2--下行速率
    IntelligentRoadTest.gridThresholds = gridThresholds;//栅格图例（图层）
    IntelligentRoadTest.poorLineColor = $("#poorColor").css('background-color');//弱覆盖颜色
    IntelligentRoadTest.poorAreaLineColor = $('input:radio[name="type-quyu"]:checked').next().css('background-color');//其它弱覆盖颜色

    IntelligentRoadTest.lineTypeIndex = lineTypeIndex;//类型下标 0--覆盖质量  1--上行速率  2--下行速率
    IntelligentRoadTest.lineThresholds = lineThresholds;//线段图例
    IntelligentRoadTest.lineOpacity = lineOpacity;//线段透明度

    IntelligentRoadTest.gridOpacity = gridOpacity;//栅格透明度
    // IntelligentRoadTest.gridDivZindex=gridZindex;//栅格层级

    IntelligentRoadTest.GridMap.divZindex = gridZindex;
    IntelligentRoadTest.GridMapM.divZindex = gridZindex;
    IntelligentRoadTest.GridMapU.divZindex = gridZindex;

    IntelligentRoadTest.GridMap.opacity = gridOpacity;
    IntelligentRoadTest.GridMapM.opacity = gridOpacity;
    IntelligentRoadTest.GridMapU.opacity = gridOpacity;
    /*缓存用户选择的图层数据end*/



    if (gridTypeIndex == 0) {//上下行速率禁用三网
        if ($('#threeComp').hasClass("unClick")) {
            $('#threeComp').removeClass("unClick");
        }
    } else {
        if (!$('#threeComp').hasClass("unClick")) {
            $('#threeComp').addClass("unClick");
        }
    }

    IntelligentRoadTestSystemLayerV3.initLegendGrid();//初始化图例

    IntelligentRoadTest.loadLayerNum = 0;//需要加载图层的方法（用来控制“加载中”弹框动画的显示隐藏）
    IntelligentRoadTest.currentLayerNum = 0;//当前执行到的方法（用来控制“加载中”弹框动画的显示隐藏）


    /*4g基站渲染*/
    IntelligentRoadTestSystemLayerV3.sectorLayerData(city,sectorZindex,sectorOpacity,factoryArr,systemLayerOld,systemLayer);

    /*2g基站渲染*/
    IntelligentRoadTestSystemLayerV3.sector2GLayerData(city,sector2GZindex,sector2GOpacity,factory2GArr,systemLayerOld,systemLayer);

    /*移动站址渲染*/
    IntelligentRoadTestSystemLayerV3.sectorYDLayerData(city,sectorYDZindex,sectorYDOpacity);

    var sqlList = [];
    var functionList = [];
    var database = [];
    var para = [];
    if ($('#poorArea').is(':checked')) {//是否需要加载弱区数据
        //弱覆盖区为多选，所以需要新增一个图层对象
        if (IntelligentRoadTest.poorCompent == null) {
            var bMapObjPoor = {
                map: IntelligentRoadTest.map,
                sectorColor: "white",
                circleColor: "white",
                lineColor: IntelligentRoadTest.poorLineColor,
                opacity: poorOpacity,
                lineOpacity: 1,
                lineWidth: 2,
                sectorZindex: poorAreaZindex,

            };
            IntelligentRoadTest.poorCompent = new SectorUtilForBaidu(bMapObjPoor);
        } else {
            IntelligentRoadTest.poorCompent.opacity = poorOpacity;
            IntelligentRoadTest.poorCompentM.opacity = poorOpacity;
            IntelligentRoadTest.poorCompentU.opacity = poorOpacity;
            IntelligentRoadTest.poorCompent.lineColor = IntelligentRoadTest.poorLineColor;
            IntelligentRoadTest.poorCompentM.lineColor = IntelligentRoadTest.poorLineColor;
            IntelligentRoadTest.poorCompentU.lineColor = IntelligentRoadTest.poorLineColor;
            IntelligentRoadTest.poorCompent.sectorZindex = poorAreaZindex;
        }
        //上下行速率/MOD3干扰弱区/越区覆盖弱区/重叠覆盖弱区图层对象
        if (IntelligentRoadTest.poorAreaCompent == null) {
            var bMapObjU = {
                map: IntelligentRoadTest.map,
                sectorColor: "white",
                circleColor: "white",
                lineColor: IntelligentRoadTest.poorAreaLineColor,
                opacity: poorOpacity,
                lineOpacity: 1,
                lineWidth: 2,
                sectorZindex: poorAreaZindex,

            };
            IntelligentRoadTest.poorAreaCompent = new SectorUtilForBaidu(bMapObjU);
        } else {
            IntelligentRoadTest.poorAreaCompent.opacity = poorOpacity;
            IntelligentRoadTest.poorAreaCompentM.opacity = poorOpacity;
            IntelligentRoadTest.poorAreaCompentU.opacity = poorOpacity;
            IntelligentRoadTest.poorAreaCompent.lineColor = IntelligentRoadTest.poorAreaLineColor;
            IntelligentRoadTest.poorAreaCompentM.lineColor = IntelligentRoadTest.poorAreaLineColor;
            IntelligentRoadTest.poorAreaCompentU.lineColor = IntelligentRoadTest.poorAreaLineColor;
            IntelligentRoadTest.poorAreaCompent.sectorZindex = poorAreaZindex;
        }

        //专题扇区图层对象 mod3/重叠/越区
        if (IntelligentRoadTest.covSectorCompent == null) {
            var bMapObjU = {
                map: IntelligentRoadTest.map,
                sectorColor: IntelligentRoadTest.poorAreaLineColor,
                circleColor: IntelligentRoadTest.poorAreaLineColor,
                opacity: poorOpacity,
                lineOpacity: 1,
                // lineWidth:2,
                sectorZindex: poorAreaZindex,

            };
            IntelligentRoadTest.covSectorCompent = new SectorUtilForBaidu(bMapObjU);
        } else {
            IntelligentRoadTest.covSectorCompent.opacity = poorOpacity;
            IntelligentRoadTest.covSectorCompentM.opacity = poorOpacity;
            IntelligentRoadTest.covSectorCompentU.opacity = poorOpacity;
            IntelligentRoadTest.covSectorCompent.sectorColor = IntelligentRoadTest.poorAreaLineColor;
            IntelligentRoadTest.covSectorCompentM.sectorColor = IntelligentRoadTest.poorAreaLineColor;
            IntelligentRoadTest.covSectorCompentU.sectorColor = IntelligentRoadTest.poorAreaLineColor;
            IntelligentRoadTest.covSectorCompent.circleColor = IntelligentRoadTest.poorAreaLineColor;
            IntelligentRoadTest.covSectorCompentM.circleColor = IntelligentRoadTest.poorAreaLineColor;
            IntelligentRoadTest.covSectorCompentU.circleColor = IntelligentRoadTest.poorAreaLineColor;
            IntelligentRoadTest.covSectorCompent.sectorZindex = poorAreaZindex;
        }

        IntelligentRoadTest.isShowPoorArea = true;
        if (IntelligentRoadTest.requery || !systemLayerOld.poorArea.selected || JSON.stringify(systemLayerOld.poorArea.poorCover) != JSON.stringify(systemLayer.poorArea.poorCover)) {//条件发生改变，需要重新查数
            var POOR_GRID_NUMS = "";
            if (!noceUtil.isUndefined(minGridNum) && !noceUtil.isUndefined(maxGridNum)) {
                POOR_GRID_NUMS = "and POOR_GRID_NUMS between " + minGridNum + "  and " + maxGridNum;
            } else if (!noceUtil.isUndefined(minGridNum) && noceUtil.isUndefined(maxGridNum)) {
                POOR_GRID_NUMS = "and POOR_GRID_NUMS >= " + minGridNum;
            }
            var type = [];//存储弱区、上下行速率  mod3弱区、重叠弱区、越区弱区
            var covType = [];//存储专题扇区 mod3、重叠、越区
            var covId = "";//专题扇区的id m3Sector、olSector、cbSector
            //0表示弱区，4表示上行低速率 5表示下行低速率  6、表示“MOD3干扰” 7、表示“重叠覆盖”； 8、表示“越区覆盖”//
            $.each(poorValue, function (index, value) {
                if (value["value"] == "26" || value["value"] == "27" || value["value"] == "28") {
                    covType.push(IntelligentRoadTestSystemLayerV3.poorArea[value["id"]]["type"]);
                    covId = value["id"];
                } else {
                    type.push(IntelligentRoadTestSystemLayerV3.poorArea[value["id"]]["type"]);
                }
            });
            if (type.length > 0) {//查询弱区、上下行速率、mod3弱区、重叠弱区、越区弱区多边形回调函数
                var list1 = ["IntelligentRoadTestV2_08_polygonGis", "CITY:" + city, "DAY:" + IntelligentRoadTest.day, "POORGRIDNUMS:" + POOR_GRID_NUMS, "TYPE:" + type.join(',')];
                //区县级用户只能查看自己区县的轮廓
                if(IntelligentRoadTest.countryPermission_common){
                    list1.push("COUNTRY:" + " AND COUNTRY = '" + IntelligentRoadTest.countryPermission_common + "'");
                }
                sqlList.push(list1);
                functionList.push(IntelligentRoadTest.handlePoorAreaData);
                database.push(3);
                para.push("poor");
                IntelligentRoadTest.loadLayerNum += 1;
            } else {
                if (IntelligentRoadTest.poorAreaCompent != null) {
                    IntelligentRoadTest.poorAreaCompent.clear();
                    IntelligentRoadTest.poorAreaCompent.polygonCanvasArr = [];
                    IntelligentRoadTest.poorCompent.clear();
                    IntelligentRoadTest.poorCompent.polygonCanvasArr = [];
                }
                if (IntelligentRoadTest.isThreeNetStatus) {
                    IntelligentRoadTest.poorAreaCompentM.clear();
                    IntelligentRoadTest.poorAreaCompentU.clear();
                    IntelligentRoadTest.poorAreaCompentM.polygonCanvasArr = [];
                    IntelligentRoadTest.poorAreaCompentU.polygonCanvasArr = [];
                    IntelligentRoadTest.poorCompentM.clear();
                    IntelligentRoadTest.poorCompentU.clear();
                    IntelligentRoadTest.poorCompentM.polygonCanvasArr = [];
                    IntelligentRoadTest.poorCompentU.polygonCanvasArr = [];
                }
            }
            if (covType.length > 0) {//查询专题扇区数据的回调函数
                var list1_1 = ["IntelligentRoadTestV2_08_1_polygonGis", "CITY:" + city, "DAY:" + IntelligentRoadTest.day, "TYPE:" + covType + "=1"];
                //区县级用户只能查看自己区县的轮廓
                if(IntelligentRoadTest.countryPermission_common){
                    list1_1.push("COUNTRY:" + " AND COUNTRY = '" + IntelligentRoadTest.countryPermission_common + "'");
                }
                sqlList.push(list1_1);
                functionList.push(IntelligentRoadTest.handleAlarmAreaData);
                database.push(3);
                para.push(covId);
                IntelligentRoadTest.loadLayerNum += 1;
            } else {
                if (IntelligentRoadTest.covSectorCompent != null) {
                    IntelligentRoadTest.covSectorCompent.clear();
                    IntelligentRoadTest.covSectorCompent.polygonCanvasArr = [];
                }
                if (IntelligentRoadTest.isThreeNetStatus) {
                    IntelligentRoadTest.covSectorCompentM.clear();
                    IntelligentRoadTest.covSectorCompentU.clear();
                    IntelligentRoadTest.covSectorCompentM.polygonCanvasArr = [];
                    IntelligentRoadTest.covSectorCompentU.polygonCanvasArr = [];
                }
            }
            if (type.length == 0 && covType.length == 0) {
                IntelligentRoadTest.isShowPoorArea = false;
            }
        } else {//直接读取数据绘制
            IntelligentRoadTest.poorAreaCompent.draw();
            IntelligentRoadTest.poorCompent.draw();
            IntelligentRoadTest.covSectorCompent.draw();
            if (IntelligentRoadTest.isThreeNetStatus) {
                IntelligentRoadTest.poorAreaCompentM.draw();
                IntelligentRoadTest.poorAreaCompentU.draw();
                IntelligentRoadTest.poorCompentM.draw();
                IntelligentRoadTest.poorCompentU.draw();
                IntelligentRoadTest.covSectorCompentM.draw();
                IntelligentRoadTest.covSectorCompentU.draw();
            }
        }

    } else {
        IntelligentRoadTest.isShowPoorArea = false;
        if (IntelligentRoadTest.poorAreaCompent != null) {
            IntelligentRoadTest.poorAreaCompent.clear();
            IntelligentRoadTest.poorAreaCompent.polygonCanvasArr = [];
            IntelligentRoadTest.poorCompent.clear();
            IntelligentRoadTest.poorCompent.polygonCanvasArr = [];
            IntelligentRoadTest.covSectorCompent.clear();
            IntelligentRoadTest.covSectorCompent.polygonCanvasArr = [];
        }
        if (IntelligentRoadTest.isThreeNetStatus) {
            IntelligentRoadTest.poorAreaCompentM.clear();
            IntelligentRoadTest.poorAreaCompentU.clear();
            IntelligentRoadTest.poorAreaCompentM.polygonCanvasArr = [];
            IntelligentRoadTest.poorAreaCompentU.polygonCanvasArr = [];
            IntelligentRoadTest.poorCompentM.clear();
            IntelligentRoadTest.poorCompentU.clear();
            IntelligentRoadTest.poorCompentM.polygonCanvasArr = [];
            IntelligentRoadTest.poorCompentU.polygonCanvasArr = [];
            IntelligentRoadTest.covSectorCompentM.clear();
            IntelligentRoadTest.covSectorCompentU.clear();
            IntelligentRoadTest.covSectorCompentM.polygonCanvasArr = [];
            IntelligentRoadTest.covSectorCompentU.polygonCanvasArr = [];
        }
    }
    if ($('#scene').is(':checked')) {
        var city_id = noceUtil.city_LATN_ID[city]; //获取地市ID
        if (IntelligentRoadTest.SceneAreaCompent == null) {
            var bMapObj = {
                map: IntelligentRoadTest.map,
                sectorColor: "white",
                circleColor: "white",
                lineColor: sceneColor,
                opacity: sceneOpacity,
                lineOpacity: 1,
                lineWidth: 2,
                sectorZindex: sceneZindex,

            };
            IntelligentRoadTest.SceneAreaCompent = new SectorUtilForBaidu(bMapObj);
        } else {
            IntelligentRoadTest.SceneAreaCompent.opacity = sceneOpacity;
            IntelligentRoadTest.SceneAreaCompent.sectorZindex = sceneZindex;
            IntelligentRoadTest.SceneAreaCompent.lineColor = sceneColor;
            // IntelligentRoadTest.SceneAreaCompent.clear();
            // IntelligentRoadTest.SceneAreaCompent.polygonCanvasArr = [];

//            for(var i=0;i<IntelligentRoadTest.polygon.length;i++){
//                IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.polygon[i]);
//            }
//            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.cacheSearchMk);
//            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.searchMk);
        }
        IntelligentRoadTest.isShowSceneArea = true;


        var list2 = [];
        var sceneId = $('input:radio[name="sceneRadio"]:checked').attr("id");
        IntelligentRoadTest.showSceneAreaId = sceneId;
        if (sceneId == "concern") {//关注区域
            //普通用户只能看到自己创建或者别人共享出来的关注区域
            if (concernAreaShare.isManager == true) {//系统管理员可以查看整个地市的关注区域(图层暂不支持查看全省的关注区域)
                list2 = ["IntelligentRoadTestV2_18_CityConcernArea", "CITY: and city='" + city + "'"];
            } else {
                list2 = ["IntelligentRoadTestV2_getAllConcernAreaByNormalUser_layer"];
                list2.push("CITY:" + " AND CITY = '" + city + "'");
                if(IntelligentRoadTest.countryPermission_common){
                    list2.push("COUNTRY:" + " AND COUNTRY = '" + IntelligentRoadTest.countryPermission_common + "'");
                }
            }

            list2.push("USERNAME:" + IntelligentRoadTest.currentUser);
            list2.push("NODE_ID:" + concernAreaShare.user_nodeId);

            if (IntelligentRoadTest.index != 1) {
                IntelligentRoadTest.queryAllConcernArea();
            }
        } else if (sceneId == "bone") {//骨头区域
            var month = IntelligentRoadTest.day.substring(0, 6);
            list2 = ["IntelligentRoadTestV2_18_CityBoneArea", "CITY: and city='" + city + "'", "MONTH:" + month];
            if (IntelligentRoadTest.index != 5) {
                IntelligentRoadTest.queryAllBoneArea();
            }
        } else if (sceneId == "highColleges") {//高校
            list2 = ["IntelligentRoadTestAnalysi_v2_getSenecsAreaDataV2", "CITY_ID:" + city_id, "ESBHTYPE:" + 1, "DAY:" + IntelligentRoadTest.day, "OTHERCONDITION: "];
            if (IntelligentRoadTest.index != 10) {
                IntelligentRoadTest.getSenseDataByObjectId(1, city, IntelligentRoadTest.day);
            }
        } else if (sceneId == "venues") {//场馆
            list2 = ["IntelligentRoadTestAnalysi_v2_getSenecsAreaDataV2", "CITY_ID:" + city_id, "ESBHTYPE:" + 10, "DAY:" + IntelligentRoadTest.day, "OTHERCONDITION: "];
            if (IntelligentRoadTest.index != 19) {
                IntelligentRoadTest.getSenseDataByObjectId(10, city, IntelligentRoadTest.day);
            }
        } else if (sceneId == "beautyFood") {//美食
            list2 = ["IntelligentRoadTestAnalysi_v2_getSenecsAreaDataV2", "CITY_ID:" + city_id, "ESBHTYPE:" + 9, "DAY:" + IntelligentRoadTest.day, "OTHERCONDITION: "];
            if (IntelligentRoadTest.index != 18) {
                IntelligentRoadTest.getSenseDataByObjectId(9, city, IntelligentRoadTest.day);
            }
        } else if (sceneId == "beautyScenery") {//美景
            list2 = ["IntelligentRoadTestAnalysi_v2_getSenecsAreaDataV2", "CITY_ID:" + city_id, "ESBHTYPE:" + 7, "DAY:" + IntelligentRoadTest.day, "OTHERCONDITION: "];
            if (IntelligentRoadTest.index != 12) {
                IntelligentRoadTest.getSenseDataByObjectId(7, city, IntelligentRoadTest.day);
            }
        } else if (sceneId == "wolfArea") {//战狼区域
            list2 = ["IntelligentRoadTestAnalysi_v2_getSenecsAreaDataV2", "CITY_ID:" + city_id, "ESBHTYPE:" + 3, "DAY:" + IntelligentRoadTest.day, "OTHERCONDITION: and zlqy_flag = 1", "USERNAME:" + IntelligentRoadTest.currentUser];
            if (IntelligentRoadTest.index != 16) {
                IntelligentRoadTest.getWarwolfListData(IntelligentRoadTest.day, city, 3);
            }
        } else if (sceneId == "farmerMarket") {//农贸市场
            list2 = ["IntelligentRoadTestAnalysi_v2_getSenecsAreaDataV2", "CITY_ID:" + city_id, "ESBHTYPE:" + 8, "DAY:" + IntelligentRoadTest.day, "OTHERCONDITION: "];
            if (IntelligentRoadTest.index != 17) {
                IntelligentRoadTest.getSenseDataByObjectId(8, city, IntelligentRoadTest.day);
            }
        } else if (sceneId == "highResidence") {//高密度住宅区
            list2 = ["IntelligentRoadTestAnalysi_v2_getSenecsAreaDataV2", "CITY_ID:" + city_id, "ESBHTYPE:" + 2, "DAY:" + IntelligentRoadTest.day, "OTHERCONDITION: "];
            if (IntelligentRoadTest.index != 9) {
                IntelligentRoadTest.getSenseDataByObjectId(2, city, IntelligentRoadTest.day);
            }
        } else if (sceneId == "highBusiness") {//高流量商务区
            list2 = ["IntelligentRoadTestAnalysi_v2_getSenecsAreaDataV2", "CITY_ID:" + city_id, "ESBHTYPE:" + 3, "DAY:" + IntelligentRoadTest.day, "OTHERCONDITION: "];
            if (IntelligentRoadTest.index != 11) {
                IntelligentRoadTest.getSenseDataByObjectId(3, city, IntelligentRoadTest.day);
            }
        } else if (sceneId == "village") {//自然村
            list2 = ["IntelligentRoadTestAnalysi_v2_getSenecsAreaDataV2", "CITY_ID:" + city_id, "ESBHTYPE:" + 13, "DAY:" + IntelligentRoadTest.day, "OTHERCONDITION: "];
            if (IntelligentRoadTest.index != 22) {
                // IntelligentRoadTest.refreshSenseList = true;
                // IntelligentRoadTest.getSenseDataByObjectId(13 , city , IntelligentRoadTest.day);
            }
        } else if (sceneId == "cityVillage") {//城中村
            list2 = ["IntelligentRoadTestAnalysi_v2_getSenecsAreaDataV2", "CITY_ID:" + city_id, "ESBHTYPE:" + 12, "DAY:" + IntelligentRoadTest.day, "OTHERCONDITION: "];
            if (IntelligentRoadTest.index != 21) {
                // IntelligentRoadTest.refreshSenseList = true;
                // IntelligentRoadTest.getSenseDataByObjectId(12 , city , IntelligentRoadTest.day);
            }
        } else if (sceneId == "school") {//中小学
            list2 = ["IntelligentRoadTestAnalysi_v2_getSenecsAreaDataV2", "CITY_ID:" + city_id, "ESBHTYPE:" + 11, "DAY:" + IntelligentRoadTest.day, "OTHERCONDITION: "];
            if (IntelligentRoadTest.index != 20) {
                // IntelligentRoadTest.refreshSenseList = true;
                // IntelligentRoadTest.getSenseDataByObjectId(11 , city , IntelligentRoadTest.day);
            }
        } else if (sceneId == "factory") {//工厂
            list2 = ["IntelligentRoadTestAnalysi_v2_getSenecsAreaDataV2", "CITY_ID:" + city_id, "ESBHTYPE:" + 14, "DAY:" + IntelligentRoadTest.day, "OTHERCONDITION: "];
            if (IntelligentRoadTest.index != 23) {
                // IntelligentRoadTest.refreshSenseList = true;
                // IntelligentRoadTest.getSenseDataByObjectId(14 , city , IntelligentRoadTest.day);
            }
        }
        if(sceneId != "concern" && IntelligentRoadTest.countryPermission_common){
            list2.push("COUNTRY:" + " AND COUNTRY = '" + IntelligentRoadTest.countryPermission_common + "'");
        }
        if (IntelligentRoadTest.requery || !systemLayerOld.scene.selected || JSON.stringify(systemLayerOld.scene.area) != JSON.stringify(systemLayer.scene.area)) {//需要重新查数
            sqlList.push(list2);
            functionList.push(IntelligentRoadTest.handleSceneAreaData);
            database.push(3);
            para.push(IntelligentRoadTest.senceObjName[sceneId]);
            IntelligentRoadTest.loadLayerNum += 1;
        } else {
            IntelligentRoadTest.SceneAreaCompent.draw();
        }


    } else {
        IntelligentRoadTest.isShowSceneArea = false;
        if (IntelligentRoadTest.SceneAreaCompent != null) {
            IntelligentRoadTest.SceneAreaCompent.clear();
            IntelligentRoadTest.SceneAreaCompent.polygonCanvasArr = [];
        }
    }
    //加载用户抱怨图层
    IntelligentRoadTestSystemLayerV3.queryUserComplainData(city, userZindex, userOpacity, full, hot, over);

    var country = $('#topCitySelect .district-selected').text();
    //当用户切换栅格图层的选项后点击确定需要触发下面的代码
    if(!IntelligentRoadTest.showNrCover){
        IntelligentRoadTestSystemLayerV3.gridLayerData();
    }

    //显示附近覆盖栅格
    IntelligentRoadTestSystemLayerV3.drawNrCoverGrid();



    /*if($('#highWay').is(':checked')){//是否需要加载高速第一层数据
        IntelligentRoadTest.isShowHighwayLine = true;
    }else{
        IntelligentRoadTest.isShowHighwayLine = false;
    }

    if($('#rail').is(':checked')){//是否需要加载高铁第一层数据
        IntelligentRoadTest.isShowRailwayLine = true;
    }else{
        IntelligentRoadTest.isShowRailwayLine = false;
    }

    if($('#cityRoad').is(':checked')){//是否需要加载市政路第一层数据
        IntelligentRoadTest.isShowCityRoadLine = true;
    }else{
        IntelligentRoadTest.isShowCityRoadLine = false;
    }*/

    //是否需要加载线段数据，加上了工单情况下的加载,
    if (IntelligentRoadTest.index == 7 || IntelligentRoadTest.index == 8 || IntelligentRoadTest.index == 14
        || (IntelligentRoadTest.index == 2 && (IntelligentRoadTest.clickSenseName == "highway" || IntelligentRoadTest.clickSenseName == "rail" || IntelligentRoadTest.clickSenseName == "cityRoad"))) {
        IntelligentRoadTest.legendGrid();
        //地铁先不做，先把高速、高铁 、市政路做完
        var isLP = false;
        var city = null;
        var line_type = 1;
        if (IntelligentRoadTest.index == 7 || (IntelligentRoadTest.index == 2 && IntelligentRoadTest.clickSenseName == "highway")) {
            if (IntelligentRoadTest.highwayVM) {
                isLP = IntelligentRoadTest.highwayVM.type;
            }
            if (IntelligentRoadTest.index == 7) {
                city = $("#highwayCityName").text().trim();
            } else {
                city = $("#alarmCityName").text().trim();
            }
            line_type = 1;
        } else if (IntelligentRoadTest.index == 8 || (IntelligentRoadTest.index == 2 && IntelligentRoadTest.clickSenseName == "rail")) {
            if (IntelligentRoadTest.railVM) {
                isLP = IntelligentRoadTest.railVM.type;
            }
            if (IntelligentRoadTest.index == 8) {
                city = $('#railCityName').text().trim();
            } else {
                city = $("#alarmCityName").text().trim();
            }

            line_type = 2;
        } else if (IntelligentRoadTest.index == 14 || (IntelligentRoadTest.index == 2 && IntelligentRoadTest.clickSenseName == "cityRoad")) {
            if (IntelligentRoadTest.cityRoadVM) {
                isLP = IntelligentRoadTest.cityRoadVM.type;
            }
            if (IntelligentRoadTest.index == 8) {
                city = $('#cityRoadCityName').text().trim();
            } else {
                city = $("#alarmCityName").text().trim();
            }

            line_type = 3;
        }

        if (IntelligentRoadTest.roadIndex == 1) { //在第一层,查询整个地市的线段数据
            IntelligentRoadTest.loadLineByLevelFromBounds();
        } else if (IntelligentRoadTest.roadIndex == 2) {
            //高铁在第二层的时候，依然需要根据视野进行呈现，但是需要限制了是某条线段的数据
            if(line_type == 2){
                IntelligentRoadTest.loadLineByLevelFromBounds();
            }else{
                if (isLP) {
                    //查询连片的数据,暂不做-
//                IntelligentRoadTest.queryContinueLine(city,line_type,IntelligentRoadTest.day , false);
//                IntelligentRoadTest.queryContinueLineByRoadId(city,line_type , IntelligentRoadTest.day , IntelligentRoadTest.road_id);
                    IntelligentRoadTest.osmColorLegen();
                } else {
                    IntelligentRoadTest.loadSplitLineByRoadId(IntelligentRoadTest.road_id, city, line_type, 500);
                }
            }
        } else if (IntelligentRoadTest.roadIndex == 3 || IntelligentRoadTest.roadIndex == 4) {//第三层，在某个500米或者连片线段的详情页，或者在某个20米线段详情页
            var wayData = null;
            if (IntelligentRoadTest.index == 7 || (IntelligentRoadTest.index == 2 && IntelligentRoadTest.clickSenseName == "highway")) {
                wayData = IntelligentRoadTest.highwayCompleteVM.highwayData;
            } else if (IntelligentRoadTest.index == 8 || (IntelligentRoadTest.index == 2 && IntelligentRoadTest.clickSenseName == "rail")) {
                wayData = IntelligentRoadTest.railCompleteVM.railData;
            } else if (IntelligentRoadTest.index == 14 || (IntelligentRoadTest.index == 2 && IntelligentRoadTest.clickSenseName == "cityRoad")) {
                wayData = IntelligentRoadTest.cityRoadCompleteVM.cityRoadData;
            }
            if (isLP) {
                //连片的暂不做
//                IntelligentRoadTest.queryContinueLine(city,line_type,IntelligentRoadTest.day , true);
                //连片线段点击时，查询该连片线段所有20米线段
//                IntelligentRoadTest.loadContinueLineMeterData(IntelligentRoadTest.day,line_type,city_id,wayData.road_id,wayData.contain_ids);
            } else {
                var city_id = noceUtil.city_LATN_ID[city];
                if(wayData!=null){
                    //加载500米分段的全部20米线段数据
                    IntelligentRoadTest.loadSplitLineSmallLine(wayData.road_id, wayData.line_id, city_id,
                        IntelligentRoadTest.day, line_type);
                }

            }
        }

    }
    //地铁,地铁的分段和高速高铁的不一样，因此需要修改分段值
    // 地铁暂时还没有工单，如果有了工单，则需要加上工单情况下查看地铁线段的情况
    if (IntelligentRoadTest.index == 15) {
        IntelligentRoadTest.legendGrid();
        IntelligentRoadTest.metroColorLegen();
    }

    /**
     if(IntelligentRoadTest.isShowCityRoadLine || IntelligentRoadTest.isShowRailwayLine || IntelligentRoadTest.isShowHighwayLine){
    	IntelligentRoadTest.loadLineByLevelFromBounds();
    }else{
//    	if(IntelligentRoadTest.lineMessageOverlay){
//        	IntelligentRoadTest.lineMessageOverlay.remove();
//        }
        if (IntelligentRoadTest.geoJsonLayer) {
            IntelligentRoadTest.geoJsonLayer.clearLayers();
        }
    }*/
    if (sqlList.length > 0 && functionList.length > 0) {
        progressbarTwo.submitSql(sqlList, functionList, database, para);
    }

    if(!IntelligentRoadTest.showNrCover){//勾选了附近区域不会进行缓存
        localStorage.setItem("systemLayer", JSON.stringify(systemLayer));
        IntelligentRoadTestSystemLayerV3.systemLayerObj=systemLayer;
    }
    IntelligentRoadTest.systemLayer = systemLayer;
    IntelligentRoadTest.requery = false;
    if (IntelligentRoadTest.showLayerLoading == true) {
        //定时器判断图层是否已经加载完成，加载完成则取消“加载中动画”
        IntelligentRoadTestSystemLayerV3.cancelLoading();
    }

}

//弱区、上、下行速率的回调函数，获取轮廓的集合点，传入对应的图层对象渲染多边形
IntelligentRoadTest.handlePoorAreaData = function IntelligentRoadTest_handlePoorAreaData(data, param) {
    var result = callBackChangeData(data);
    var poorArea = [];
    var poor = [];
    for (var i = 0; i < result.length; i++) {
        var object_id = result[i].object_id;
        var gis_data = result[i].gis_data;
        var type = result[i].type;
        var gisPointArr = gis_data.split("@");
        var pointArr = [];
        for (var j = 0; j < gisPointArr.length; j++) {
            var gisPoint = gisPointArr[j].split(",");
            var point = new BMap.Point(gisPoint[0], gisPoint[1]);
            pointArr.push(point);
        }
        var plyM = {type: 2, points: pointArr, decide: 1, object_id: object_id, scene: type};
        if (type == "poor") {
            poor.push(plyM);
        } else {
            poorArea.push(plyM);
        }
    }

    //上下行速率 MOD3干扰弱区、越区覆盖弱区、重叠覆盖弱区
    IntelligentRoadTest.poorAreaCompent.polygonCanvasArr = poorArea;
    IntelligentRoadTest.poorAreaCompentM.polygonCanvasArr = poorArea;
    IntelligentRoadTest.poorAreaCompentU.polygonCanvasArr = poorArea;
    IntelligentRoadTest.poorAreaCompent.draw();
    //弱区
    IntelligentRoadTest.poorCompent.polygonCanvasArr = poor;
    IntelligentRoadTest.poorCompentM.polygonCanvasArr = poor;
    IntelligentRoadTest.poorCompentU.polygonCanvasArr = poor;
    IntelligentRoadTest.poorCompent.draw();
    if (IntelligentRoadTest.isThreeNetStatus) {
        IntelligentRoadTest.poorAreaCompentM.draw();
        IntelligentRoadTest.poorAreaCompentU.draw();
        IntelligentRoadTest.poorCompentM.draw();
        IntelligentRoadTest.poorCompentU.draw();
    }
    IntelligentRoadTest.currentLayerNum += 1;
}

//mod3、重叠、覆盖的回调函数，通过基站小区的经纬度，方位角、频段等获取集合点，传入图层对象绘制扇区
IntelligentRoadTest.handleAlarmAreaData = function IntelligentRoadTest_handleAlarmAreaData(data, param) {
    var result = callBackChangeData(data);
    var poorArea = [];
    for (var i = 0; i < result.length; i++) {
        var lng = result[i].longitude_mid_baidu;
        var lat = result[i].latitude_mid_baidu;
        var point = new BMap.Point(lng, lat);
        var ant_azimuth = result[i].ant_azimuth;//方位角
        var is_indoor = result[i].is_indoor;//室内外   2为室外 1为不为室外的
//		var band = result[i].band==null?"":result[i].band;//频段
        var band_order = result[i].band_mapping == null ? 2 : result[i].band_mapping;//频段自定义排序字段
        var bandLevel = 2;
        if ("室外" == is_indoor) {///室外，叶子形状的那些扇区
            //根据频段，扇区的高矮肥瘦不同   point.band==1.8GH时为默认
            var xy = 0.0008;
            var z = 3.5;
            var r = 6;
            //case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 0 end as band_order
            if (band_order == 4) {
                xy = 0.0004;
                z = 0.8;
                r = 2;
                bandLevel = 4;
            } else if (band_order == 3) {
                xy = 0.0006;
                z = 1.8;
                r = 4;
                bandLevel = 3;
            } else if (band_order == 1) {
                xy = 0.001;
                z = 5.5;
                r = 8;
                bandLevel = 1;
            }

            var assemble = {};
            assemble.points = IntelligentRoadTest.covSectorCompent.add_sector(point, xy, xy, z, ant_azimuth);//得到扇形的点集合
            assemble.type = 2;
            assemble.bandLevel = bandLevel;
            assemble.statn_id = null == result[i].enodeb_id ? "" : result[i].enodeb_id;//基站编号
            assemble.cell_id = result[i].cell_id == null ? "" : result[i].cell_id;//小区编码
            assemble.city_id = result[i].city_id == null ? "200" : result[i].city_id;//city_id
            assemble.scene = param;
            poorArea.push(assemble);//将扇形点集合进行存储
            assemble = null;
        } else {//室内，圆形的那些扇区
            //case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 0 end as band_order
            var radiusL = 15;
            var radiusS = 12;
            if (band_order == 4) {
                radiusL = 8;
                radiusS = 5;
                bandLevel = 4;
            } else if (band_order == 3) {
                radiusL = 12;
                radiusS = 9;
                bandLevel = 3;
            } else if (band_order == 1) {
                radiusL = 18;
                radiusS = 15;
                bandLevel = 1;
            }

            var assemble = {};
            assemble.radiusL = radiusL;
            assemble.radiusS = radiusS;
            assemble.type = 1;
            assemble.point = point;
            assemble.bandLevel = bandLevel;
            assemble.statn_id = null == result[i].enodeb_id ? "" : result[i].enodeb_id;//基站编号
            assemble.cell_id = result[i].cell_id == null ? "" : result[i].cell_id;//小区编码
            assemble.city_id = result[i].city_id;//city_id
            assemble.scene = param;
            poorArea.push(assemble);
            assemble = null;
        }
    }
    IntelligentRoadTest.covSectorCompent.polygonCanvasArr = poorArea;
    IntelligentRoadTest.covSectorCompentM.polygonCanvasArr = poorArea;
    IntelligentRoadTest.covSectorCompentU.polygonCanvasArr = poorArea;
    IntelligentRoadTest.covSectorCompent.draw();
    if (IntelligentRoadTest.isThreeNetStatus) {
        IntelligentRoadTest.covSectorCompentM.draw();
        IntelligentRoadTest.covSectorCompentU.draw();
    }
    IntelligentRoadTest.currentLayerNum += 1;
}

IntelligentRoadTest.handleConcernAreaData = function IntelligentRoadTest_handleConcernAreaData(data, userSetOpacity) {
    var result = callBackChangeData(data);
    var concernArea = [];
    for (var i = 0; i < result.length; i++) {
        var id = result[i].id;
        var name = result[i].area_name;
        var gis_data = result[i].gis_data_baidu;
        var gisPointArr = gis_data.split("@");
        var pointArr = [];
        for (var j = 0; j < gisPointArr.length; j++) {
            var gisPoint = gisPointArr[j].split(",");
            var point = new BMap.Point(gisPoint[0], gisPoint[1]);
            pointArr.push(point);
        }
        var plyM = {type: 2, points: pointArr, decide: 1, id: id, name: name};
        concernArea.push(plyM);
    }

    // IntelligentRoadTest.ConcernAreaCompent.opacity = userSetOpacity;
    IntelligentRoadTest.ConcernAreaCompent.polygonCanvasArr = concernArea;
    // IntelligentRoadTest.ConcernAreaCompentM.polygonCanvasArr = concernArea;
    // IntelligentRoadTest.ConcernAreaCompentU.polygonCanvasArr = concernArea;
    IntelligentRoadTest.ConcernAreaCompent.draw();
    // if(IntelligentRoadTest.isThreeNetStatus){
    //     IntelligentRoadTest.ConcernAreaCompentM.draw();
    //     IntelligentRoadTest.ConcernAreaCompentU.draw();
    // }
}

/**
 * 绘制场景图层的回调函数 解析数据获取场景多边形的集合点传入图层对象渲染
 * @param data 查询场景多边形的回调数据
 * @param sceneId 具体场景的标识
 */
IntelligentRoadTest.handleSceneAreaData = function IntelligentRoadTest_handleSceneAreaData(data, sceneId) {
    var result = callBackChangeData(data);
    var sceneArea = [];
    for (var i = 0; i < result.length; i++) {
        var id = "";
        var name = "";
        var gis_data = "";
        if (sceneId == "concern") {//关注区域
            id = result[i].id;
            name = result[i].area_name;
            var gis_data = result[i].gis_data_baidu;
        } else if (sceneId == "boneArea") { //骨头区域
            id = result[i].id;
            name = result[i].object_name;
            gis_data = result[i].gis_data;
        } else {//场景
            id = result[i].esbh_id;
            name = result[i].esbh_name;
            gis_data = result[i].gis_data;
        }
        if (gis_data == null) {
            return;
        }
        var gisPointArray = gis_data.split(";");
        for (var k = 0; k < gisPointArray.length; k++) {
            var gisPointArr = gisPointArray[k].split("@");
            var pointArr = [];
            for (var j = 0; j < gisPointArr.length; j++) {
                var gisPoint = gisPointArr[j].split(",");
                var point = new BMap.Point(gisPoint[0], gisPoint[1]);
                pointArr.push(point);
            }
            var plyM = {type: 2, points: pointArr, decide: 1, id: id, name: name, scene: sceneId};
            sceneArea.push(plyM);
        }
    }

    IntelligentRoadTest.SceneAreaCompent.polygonCanvasArr = sceneArea;
    IntelligentRoadTest.SceneAreaCompent.draw();

    IntelligentRoadTest.currentLayerNum += 1;
}

//多边形点击呈现栅格回调函数
IntelligentRoadTest.showGridByCanv = function IntelligentRoadTest_showGridByCanv(data) {
    //重新设置颜色区间
    var gridOpacity = parseFloat($('#gridOpacity').val());
    //栅格覆盖质量
    IntelligentRoadTest.gridThresholds = [
        {
            "threshold": "<=-115",
            "text": "(-∞,-115]",
            "color": $("#jichaColor").css('background-color'),
            "gradient": gridOpacity,
            "selected": $('#jichaLegend').is(':checked')
        },
        {
            "threshold": "<=-105",
            "text": "(-115,-105]",
            "color": $("#chaColor").css('background-color'),
            "gradient": gridOpacity,
            "selected": $('#chaLegend').is(':checked')
        },
        {
            "threshold": "<=-95",
            "text": "(-105,-95]",
            "color": $("#zhongColor").css('background-color'),
            "gradient": gridOpacity,
            "selected": $('#zhongLegend').is(':checked')
        },
        {
            "threshold": "<=-85",
            "text": "(-95,-85]",
            "color": $("#liangColor").css('background-color'),
            "gradient": gridOpacity,
            "selected": $('#liangLegend').is(':checked')
        },
        {
            "threshold": "<0",
            "text": "(-85,0)",
            "color": $("#youColor").css('background-color'),
            "gradient": gridOpacity,
            "selected": $('#youLegend').is(':checked')
        },
        {"threshold": "200", "text": "(-85,0)", "color": "#0070C0", "gradient": 0.33}
    ];
    IntelligentRoadTest.GridMap.setThresholds(IntelligentRoadTest.gridThresholds);
    IntelligentRoadTest.GridMapM.setThresholds(IntelligentRoadTest.gridThresholds);
    IntelligentRoadTest.GridMapU.setThresholds(IntelligentRoadTest.gridThresholds);

    var result = callBackChangeData(data);
    data = null;
    IntelligentRoadTest.GridMap.clear();
    IntelligentRoadTest.GridMapM.clear();
    IntelligentRoadTest.GridMapU.clear();
    IntelligentRoadTest.isShowGrid = true;
    IntelligentRoadTest.isShowDTGrid = false;
    //清除描点数据
//	IntelligentRoadTest.GridMapCircle.clear();
    IntelligentRoadTest.GridMapCircleDataArr = null;
    IntelligentRoadTest.GridMapCircleDataArr = [];


//	IntelligentRoadTest.GridCanArr = [];
//	IntelligentRoadTest.GridCanArr = null;
    IntelligentRoadTest.GridCanArrT = null;
    IntelligentRoadTest.GridCanArrM = null;
    IntelligentRoadTest.GridCanArrU = null;
    IntelligentRoadTest.CanArr = null;

    IntelligentRoadTest.GridCanArrT = [];
    IntelligentRoadTest.GridCanArrM = [];
    IntelligentRoadTest.GridCanArrU = [];
    IntelligentRoadTest.CanArr = [];


    for (var i = 0; i < result.length; i++) {
        var maxLng = result[i]["i:a15"];// 最大经度
        var maxLat = result[i]["i:a16"];// 最大纬度
        var minLng = result[i]["i:a11"];// 最小经度
        var minLat = result[i]["i:a12"];// 最小纬度
        var grid_num = result[i]["i:a1"];// 栅格号
        var sector_set = result[i]["i:a18"];// 主小区集合
        var agps_count = result[i]["i:a28"];// AGPS记录数
        var rsrp_avg = result[i]["i:a27"];// rsrp均值

        var dxrsrpCount = result[i]["i:a29"];//DX_RSRP_COUNT
        var dxrsrp105Count = result[i]["i:a30"];//DX_RSRP_105_COUNT
        var dxrsrpsum = result[i]["i:a31"];//DX_RSRP_SUM
        var ydrsrpCount = result[i]["i:a32"];//YD_RSRP_COUNT
        var ydrsrp105Count = result[i]["i:a33"];//YD_RSRP_105_COUNT
        var ydrsrpsum = result[i]["i:a34"];//YD_RSRP_SUM
        var ltrsrpCount = result[i]["i:a35"];//LT_RSRP_COUNT
        var ltrsrp105Count = result[i]["i:a36"];//LT_RSRP_105_COUNT
        var ltrsrpsum = result[i]["i:a37"];//LT_RSRP_SUM
        var monthrelate = result[i]["i:a38"];//MONTH_RELATE

        var dxrsrpAvg = null;
        var rsrp_avgM = null;
        var rsrp_avgU = null;
        var dx_cover = null;
        var yd_cover = null;
        var lt_cover = null;

        if (dxrsrpCount != null && dxrsrpsum != null) {
            dxrsrpAvg = dxrsrpsum / dxrsrpCount;
        }
        if (ydrsrpCount != null && ydrsrpsum != null) {
            rsrp_avgM = ydrsrpsum / ydrsrpCount;// rsrp均值
        }
        if (ltrsrpCount != null && ltrsrpsum != null) {
            rsrp_avgU = ltrsrpsum / ltrsrpCount;// rsrp均值
        }

        if (dxrsrpCount != null && dxrsrp105Count != null) {
            dx_cover = dxrsrp105Count / dxrsrpCount;
        }
        if (ydrsrpCount != null && ydrsrp105Count != null) {
            yd_cover = ydrsrp105Count / ydrsrpCount;
        }
        if (ltrsrpCount != null && ltrsrp105Count != null) {
            lt_cover = ltrsrp105Count / ltrsrpCount;
        }

        if (rsrp_avg != null) {
            var dataChe = [minLng, minLat, maxLng, maxLat, rsrp_avg, grid_num, agps_count, sector_set,
                dxrsrpAvg, rsrp_avgM, rsrp_avgU, monthrelate, dx_cover, yd_cover, lt_cover];
            IntelligentRoadTest.CanArr.push(dataChe);
        }

        if (IntelligentRoadTest.isThreeNetStatus) {
            if (dxrsrpAvg != null) {
                var gridData = [minLng, minLat, maxLng, maxLat, dxrsrpAvg, dx_cover, null];
                IntelligentRoadTest.GridCanArrT.push(gridData);
            }
            if (rsrp_avgM != null) {
                var gridData = [minLng, minLat, maxLng, maxLat, rsrp_avgM, yd_cover, null];
                IntelligentRoadTest.GridCanArrM.push(gridData);
            }

            if (rsrp_avgU != null) {
                var gridData = [minLng, minLat, maxLng, maxLat, rsrp_avgU, lt_cover, null];
                IntelligentRoadTest.GridCanArrU.push(gridData);
            }
        }


    }

    if (IntelligentRoadTest.isThreeNetStatus) {
        var CTData = IntelligentRoadTest.GridCanArrT;
        var CMData = IntelligentRoadTest.GridCanArrM;
        var CUData = IntelligentRoadTest.GridCanArrU;
        for (var j = 0; j < IntelligentRoadTest.colorBarArr.length; j++) {
            CTData = IntelligentRoadTest.ClearData(CTData, IntelligentRoadTest.colorBarArr[j]);
            CMData = IntelligentRoadTest.ClearData(CMData, IntelligentRoadTest.colorBarArr[j]);
            CUData = IntelligentRoadTest.ClearData(CUData, IntelligentRoadTest.colorBarArr[j]);
        }
        IntelligentRoadTest.GridMap.draw(CTData);
        IntelligentRoadTest.GridMapM.draw(CMData);
        IntelligentRoadTest.GridMapU.draw(CUData);
        CTData = null;
        CMData = null;
        CUData = null;
    } else {
        var CTData = IntelligentRoadTest.CanArr;
        for (var j = 0; j < IntelligentRoadTest.colorBarArr.length; j++) {
            CTData = IntelligentRoadTest.ClearData(CTData, IntelligentRoadTest.colorBarArr[j]);
        }
        IntelligentRoadTest.GridMap.draw(CTData);
        CTData = null;
    }
    IntelligentRoadTest.legendGrid();

    IntelligentRoadTest.openThreeLable();
}

//弱区栅格回调函数
IntelligentRoadTest.showAreaGridByCanv = function IntelligentRoadTest_showAreaGridByCanv(data, userSetOpacity) {
    var result = callBackChangeData(data);
    data = null;

    IntelligentRoadTest.GridMapArea.clear();
    IntelligentRoadTest.GridMapAreaM.clear();
    IntelligentRoadTest.GridMapAreaU.clear();
    IntelligentRoadTest.GridAreaCanArrT = null;
    IntelligentRoadTest.GridAreaCanArrM = null;
    IntelligentRoadTest.GridAreaCanArrU = null;
    IntelligentRoadTest.CanArrArea = null;

    IntelligentRoadTest.GridAreaCanArrT = [];
    IntelligentRoadTest.GridAreaCanArrM = [];
    IntelligentRoadTest.GridAreaCanArrU = [];
    IntelligentRoadTest.CanArrArea = [];


    for (var i = 0; i < result.length; i++) {
        var maxLng = result[i]["i:a15"];// 最大经度
        var maxLat = result[i]["i:a16"];// 最大纬度
        var minLng = result[i]["i:a11"];// 最小经度
        var minLat = result[i]["i:a12"];// 最小纬度
        var grid_num = result[i]["i:a1"];// 栅格号
        var sector_set = result[i]["i:a18"];// 主小区集合
        var agps_count = result[i]["i:a28"];// AGPS记录数
        var rsrp_avg = result[i]["i:a27"];// rsrp均值

        var dxrsrpCount = result[i]["i:a29"];//DX_RSRP_COUNT
        var dxrsrp105Count = result[i]["i:a30"];//DX_RSRP_105_COUNT
        var dxrsrpsum = result[i]["i:a31"];//DX_RSRP_SUM
        var ydrsrpCount = result[i]["i:a32"];//YD_RSRP_COUNT
        var ydrsrp105Count = result[i]["i:a33"];//YD_RSRP_105_COUNT
        var ydrsrpsum = result[i]["i:a34"];//YD_RSRP_SUM
        var ltrsrpCount = result[i]["i:a35"];//LT_RSRP_COUNT
        var ltrsrp105Count = result[i]["i:a36"];//LT_RSRP_105_COUNT
        var ltrsrpsum = result[i]["i:a37"];//LT_RSRP_SUM
        var monthrelate = result[i]["i:a38"];//MONTH_RELATE

        var dxrsrpAvg = null;
        var rsrp_avgM = null;
        var rsrp_avgU = null;
        var dx_cover = null;
        var yd_cover = null;
        var lt_cover = null;

        if (dxrsrpCount != null && dxrsrpsum != null) {
            dxrsrpAvg = dxrsrpsum / dxrsrpCount;
        }
        if (ydrsrpCount != null && ydrsrpsum != null) {
            rsrp_avgM = ydrsrpsum / ydrsrpCount;// rsrp均值
        }
        if (ltrsrpCount != null && ltrsrpsum != null) {
            rsrp_avgU = ltrsrpsum / ltrsrpCount;// rsrp均值
        }

        if (dxrsrpCount != null && dxrsrp105Count != null) {
            dx_cover = dxrsrp105Count / dxrsrpCount;
        }
        if (ydrsrpCount != null && ydrsrp105Count != null) {
            yd_cover = ydrsrp105Count / ydrsrpCount;
        }
        if (ltrsrpCount != null && ltrsrp105Count != null) {
            lt_cover = ltrsrp105Count / ltrsrpCount;
        }

        if (rsrp_avg != null) {
            var dataChe = [minLng, minLat, maxLng, maxLat, rsrp_avg, grid_num, agps_count, sector_set,
                dxrsrpAvg, rsrp_avgM, rsrp_avgU, monthrelate, dx_cover, yd_cover, lt_cover];
            IntelligentRoadTest.CanArrArea.push(dataChe);
        }

        if (IntelligentRoadTest.isThreeNetStatus) {
            if (dxrsrpAvg != null) {
                var gridData = [minLng, minLat, maxLng, maxLat, dxrsrpAvg];
                IntelligentRoadTest.GridAreaCanArrT.push(gridData);
            }
            if (rsrp_avgM != null) {
                var gridData = [minLng, minLat, maxLng, maxLat, rsrp_avgM];
                IntelligentRoadTest.GridAreaCanArrM.push(gridData);
            }

            if (rsrp_avgU != null) {
                var gridData = [minLng, minLat, maxLng, maxLat, rsrp_avgU];
                IntelligentRoadTest.GridAreaCanArrU.push(gridData);
            }
        }


    }

    if (IntelligentRoadTest.isThreeNetStatus) {
        IntelligentRoadTest.GridMapArea.clear();
        IntelligentRoadTest.GridMapAreaM.clear();
        IntelligentRoadTest.GridMapAreaU.clear();
        var CTData = IntelligentRoadTest.GridAreaCanArrT;
        var CMData = IntelligentRoadTest.GridAreaCanArrM;
        var CUData = IntelligentRoadTest.GridAreaCanArrU;
        for (var j = 0; j < IntelligentRoadTest.colorBarArr.length; j++) {
            CTData = IntelligentRoadTest.ClearData(CTData, IntelligentRoadTest.colorBarArr[j]);
            CMData = IntelligentRoadTest.ClearData(CMData, IntelligentRoadTest.colorBarArr[j]);
            CUData = IntelligentRoadTest.ClearData(CUData, IntelligentRoadTest.colorBarArr[j]);
        }
        IntelligentRoadTest.GridMapArea.draw(CTData);
        IntelligentRoadTest.GridMapAreaM.draw(CMData);
        IntelligentRoadTest.GridMapAreaU.draw(CUData);
        CTData = null;
        CMData = null;
        CUData = null;
    } else {
        IntelligentRoadTest.GridMapArea.clear();
        IntelligentRoadTest.GridMapAreaM.clear();
        IntelligentRoadTest.GridMapAreaU.clear();
        var CTData = IntelligentRoadTest.CanArrArea;
        for (var j = 0; j < IntelligentRoadTest.colorBarArr.length; j++) {
            CTData = IntelligentRoadTest.ClearData(CTData, IntelligentRoadTest.colorBarArr[j]);
        }
        IntelligentRoadTest.GridMapArea.draw(CTData);
        CTData = null;
    }
    IntelligentRoadTest.legendGrid();


}


//过滤框选区域栅格
IntelligentRoadTest.filterGridData = function IntelligentRoadTest_filterGridData(data) {
//	var result = callBackChangeData(data);
    var result = data.result;
    var polygonGridData = [];
    //将不在框选多边形内的栅格去掉
    // for(var j=0;j<IntelligentRoadTest.SelectionOverlayList.length;j++){
    if (IntelligentRoadTest.SelectionOverlay != null) {
        var avgSum = 0;
        var allSum = 0;
        var cnt = 0;
        var count = 0;
        var gridCount = 0;
        var grid_dx_count = 0;
        var grid_dx_sum = 0;
        var grid_dx_105_count = 0;
        var grid_yd_count = 0;
        var grid_yd_sum = 0;
        var grid_yd_105_count = 0;
        var grid_lt_count = 0;
        var grid_lt_sum = 0;
        var grid_lt_105_count = 0;
        var poor_grid_count = 0;
        var month_relate = null;
        for (var i = 0; i < result.length; i++) {
            var gridMidLng = result[i][3];// i:a1,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a18,i:a19,i:a22,i:a26,i:a27,i:a28,i:a29,i:a30,i:a31,i:a32,i:a33,i:a34,i:a35,i:a36,i:a37,i:a38
            var gridMidLat = result[i][4];
            var point = new BMap.Point(gridMidLng, gridMidLat);
            if (BMapLib.GeoUtils.isPointInPolygon(point, IntelligentRoadTest.SelectionOverlay)) {
                polygonGridData.push(result[i]);
                count++;
                avgSum += parseFloat(result[i][11]); // rsrp_140_0_avg
                allSum += parseFloat(result[i][8]); // rsrp_140_0_cnt
                cnt += parseInt(result[i][9]); // rsrp_105_cnt
                gridCount += parseInt(result[i][12]); //Grid_Rec_Cnt,agps记录数
                if (parseFloat(result[i][11]) <= -105) {
                    poor_grid_count++;
                }
                //增加三网计算
                grid_dx_count += parseInt(result[i][13] == null ? 0 : result[i][13]);//DX_RSRP_COUNT
                grid_dx_105_count += parseInt(result[i][14] == null ? 0 : result[i][14]);//DX_RSRP_105_COUNT
                grid_dx_sum += parseFloat(result[i][15] == null ? 0 : result[i][15]);//DX_RSRP_SUM
                grid_yd_count += parseInt(result[i][16] == null ? 0 : result[i][16]);//YD_RSRP_COUNT
                grid_yd_105_count += parseInt(result[i][17] == null ? 0 : result[i][17]);//YD_RSRP_105_COUNT
                grid_yd_sum += parseFloat(result[i][18] == null ? 0 : result[i][18]);//YD_RSRP_SUM
                grid_lt_count += parseInt(result[i][19] == null ? 0 : result[i][19]);//LT_RSRP_COUNT
                grid_lt_105_count += parseInt(result[i][20] == null ? 0 : result[i][20]);//LT_RSRP_105_COUNT
                grid_lt_sum += parseFloat(result[i][21] == null ? 0 : result[i][21]);//LT_RSRP_SUM
                if (result[i][22] != null) {//month_relate
                    if (month_relate == null) {
                        month_relate = result[i][22];
                    } else if (month_relate != result[i][22] && month_relate.indexOf(result[i][22]) < 0) {
                        month_relate = month_relate + "_" + result[i][22];
                    }

                }
            }
        }
        var rsrpAvg = avgSum / count;
        var cover = cnt / allSum;
        var dx_rsrp = grid_dx_sum / grid_dx_count;
        var yd_rsrp = grid_yd_sum / grid_yd_count;
        var lt_rsrp = grid_lt_sum / grid_lt_count;
        var dx_cover = grid_dx_105_count / grid_dx_count;
        var yd_cover = grid_yd_105_count / grid_yd_count;
        var lt_cover = grid_lt_105_count / grid_lt_count;

        if (grid_dx_sum == 0 || grid_dx_count == 0) {
            dx_rsrp = null;
        }
        if (grid_yd_sum == 0 || grid_yd_count == 0) {
            yd_rsrp = null;
        }
        if (grid_lt_sum == 0 || grid_lt_count == 0) {
            lt_rsrp = null;
        }
        if (grid_dx_105_count == 0 || grid_dx_count == 0) {
            dx_cover = null;
        }
        if (grid_yd_105_count == 0 || grid_yd_count == 0) {
            yd_cover = null;
        }
        if (grid_lt_105_count == 0 || grid_lt_count == 0) {
            lt_cover = null;
        }

        if (count == 0) {
            rsrpAvg = null;
            cover = null;
            dx_rsrp = null;
            yd_rsrp = null;
            lt_rsrp = null;
            dx_cover = null;
            yd_cover = null;
            lt_cover = null;
        }

        IntelligentRoadTest.SelectionOverlay.type = "boxSelect";
        IntelligentRoadTest.SelectionOverlay.rsrpAvg = rsrpAvg;//parseFloat(rsrpAvg).toFixed(2);
        IntelligentRoadTest.SelectionOverlay.cover = cover;//parseFloat(cover).toFixed(4);
        IntelligentRoadTest.SelectionOverlay.count = count;

        IntelligentRoadTest.SelectionOverlay.dx_rsrp = dx_rsrp;
        IntelligentRoadTest.SelectionOverlay.yd_rsrp = yd_rsrp;
        IntelligentRoadTest.SelectionOverlay.lt_rsrp = lt_rsrp;
        IntelligentRoadTest.SelectionOverlay.dx_cover = dx_cover;
        IntelligentRoadTest.SelectionOverlay.yd_cover = yd_cover;
        IntelligentRoadTest.SelectionOverlay.lt_cover = lt_cover;
        IntelligentRoadTest.SelectionOverlay.month_relate = month_relate;

        IntelligentRoadTest.SelectionOverlay.gridCount = gridCount;//agps记录数
        IntelligentRoadTest.SelectionOverlay.poor_grid_count = poor_grid_count;

    }
    IntelligentRoadTest.goBoxSelection(IntelligentRoadTest.SelectionOverlay.cover, IntelligentRoadTest.SelectionOverlay.rsrpAvg, IntelligentRoadTest.SelectionOverlay.poor_grid_count, count);
    data.result = polygonGridData;

    IntelligentRoadTest.showGridByCanv(data);
    data = null;
    if (IntelligentRoadTest.selectBoxMarker != null) {
        IntelligentRoadTest.selectBoxMarker.show();
    }
}
//框选结束后保存图标的点击事件
IntelligentRoadTest.areaMarkerClick = function IntelligentRoadTest_areaMarkerClick(e) {

    if (IntelligentRoadTest.SelectionOverlay.rsrpAvg == undefined || IntelligentRoadTest.SelectionOverlay.cover == undefined) {
        alert("框选区域的rsrp均值或者覆盖率还未查询结束，请等查询结束后再点击保存");
        return;
    }

    //打开编辑框

    $('#saveConcernArea').show();
    $('#userName').text($('#headerUserForm_a').text().trim());
    $('#concernAreaName').val('');
    $('#concernAreaType').val('');
    if ($('#isSaveToBoneArea').is(':checked')) {
        $('#isSaveToBoneArea').removeAttr('checked');
    }
    $('#concernAreaType').val('');
    //编辑框的确定按钮，调用IntelligentRoadTest.saveConcernArea方法进行存储多边形

    $('#ConcernAreaSaveButton').unbind('click').bind('click', function () {
        var concernName = $('#concernAreaName').val();
        var create_user = $('#userName').text();
        var concernAreaType = $('#concernAreaType').val();
        if (concernName == '') {
            alert("您未输入框选区域的名称");
            return;
        }

        IntelligentRoadTest.SelectionOverlay.area_name = concernName;
        IntelligentRoadTest.SelectionOverlay.create_user = create_user;
        IntelligentRoadTest.SelectionOverlay.area_type = concernAreaType;
        //
        if ($('#isSaveToBoneArea').is(':checked')) {
            IntelligentRoadTest.saveBoneArea(IntelligentRoadTest.SelectionOverlay);
        }
        IntelligentRoadTest.saveConcernArea(IntelligentRoadTest.SelectionOverlay);

        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.selectBoxMarker);
        $('#saveConcernArea').hide();

    });
}

//保存骨头区域
IntelligentRoadTest.saveBoneArea = function IntelligentRoadTest_saveBoneArea(areaOverlay) {
    var overlayPointArr = areaOverlay.getPath();
    var maxAndMinLngLat = IntelligentRoadTest.getMaxAndMinLatLng(overlayPointArr);//[maxLng , maxLat , minLng , minLat]
    var max_lng = maxAndMinLngLat[0];
    var min_lng = maxAndMinLngLat[2];
    var mid_lng = (maxAndMinLngLat[0] + maxAndMinLngLat[2]) / 2;
    var mid_lat = (maxAndMinLngLat[1] + maxAndMinLngLat[3]) / 2;
    var max_lat = maxAndMinLngLat[1];
    var min_lat = maxAndMinLngLat[3];
    var area_name = areaOverlay.area_name;
    var area_path = "";
    var area_type = areaOverlay.area_type;
//	var handle_time = "";
//	var handle_description = "";
    var create_user = areaOverlay.create_user;
    var city = $('#mapCity').text().replace('市', '');
    var rsrp = areaOverlay.rsrpAvg;
    var cover = areaOverlay.cover;
    var bst_id = areaOverlay.bst_id;
    var cell_id = areaOverlay.cell_id;
    var cell_name = areaOverlay.cell_name;
    var city_select = areaOverlay.city_select;
    var district_id = areaOverlay.district_id;
    var district_name = areaOverlay.district_name;
    var mktcenter_id = areaOverlay.mktcenter_id;
    var mktcenter_name = areaOverlay.mktcenter_name;
    var city_id = areaOverlay.city_id;

    for (var i = 0; i < overlayPointArr.length; i++) {
        var point = overlayPointArr[i];
        area_path += point.lng + "," + point.lat;
        if (i != overlayPointArr.length - 1) {
            area_path += "@";
        }
    }

    var ajaxData = {
        "object_name": area_name,
        "city": city,
        "creator": create_user,
        "gis_data": area_path,
        "longitude_max": max_lng,
        "latitude_max": max_lat,
        "longitude_mid": mid_lng,
        "latitude_mid": mid_lat,
        "longitude_min": min_lng,
        "latitude_min": min_lat,
        "area_type": area_type,
        "rsrp_avg": rsrp,
        "rsrp_cov": cover,
        "enodeb_id": bst_id,
        "cell_id": cell_id,
        "cell_name": cell_name,
        "city_select": city_select,
        "district_id": district_id,
        "district_name": district_name,
        "mktcenter_id": mktcenter_id,
        "mktcenter_name": mktcenter_name,
        "city_id": city_id,
//			"handle_time":handle_time,
//			"handle_description":handle_description,
    };
    var $ajax = $.ajax({
        type: 'post',
        data: ajaxData,
        url: 'pages_boneArea_BoneArea_saveArea.action',
        cache: false,
        dataType: 'json',
        success: function (data) {
            // console.log(data);
            IntelligentRoadTest.queryAllBoneArea();
            $("#showBoxSelectionList").hide();
            IntelligentRoadTest.getBoneAreaMessageById(data);
            $('#BoxSelection').trigger("click");

        },
        error: function (data, textStatus) {
            alert("保存骨头区域失败")
        }
    });
}

//保存关注区域
IntelligentRoadTest.saveConcernArea = function IntelligentRoadTest_saveConcernArea(areaOverlay) {
    var overlayPointArr = areaOverlay.getPath();
    var maxAndMinLngLat = IntelligentRoadTest.getMaxAndMinLatLng(overlayPointArr);//[maxLng , maxLat , minLng , minLat]
    var max_lng = maxAndMinLngLat[0];
    var min_lng = maxAndMinLngLat[2];
    var max_lat = maxAndMinLngLat[1];
    var min_lat = maxAndMinLngLat[3];
    var area_name = areaOverlay.area_name;
    var area_type = areaOverlay.area_type;
    var area_path = "";
//	var handle_time = "";
//	var handle_description = "";
    var create_user = areaOverlay.create_user;
    var city = $('#mapCity').text().replace('市', '');
    var rsrp = areaOverlay.rsrpAvg;
    var cover = areaOverlay.cover;
    var bst_id = areaOverlay.bst_id;
    var cell_id = areaOverlay.cell_id;
    var cell_name = areaOverlay.cell_name;
    var poor_grid_count = areaOverlay.poor_grid_count;
    var grid_count = areaOverlay.gridCount;
    var city_select = areaOverlay.city_select;
    var district_id = areaOverlay.district_id;
    var district_name = areaOverlay.district_name;
    var mktcenter_id = areaOverlay.mktcenter_id;
    var mktcenter_name = areaOverlay.mktcenter_name;
    var city_id = areaOverlay.city_id;
    for (var i = 0; i < overlayPointArr.length; i++) {
        var point = overlayPointArr[i];
        area_path += point.lng + "," + point.lat;
        if (i != overlayPointArr.length - 1) {
            area_path += "@";
        }
    }

    var ajaxData = {
        "area_name": area_name,
        "city": city,
        "create_user": create_user,
        "gis_data_baidu": area_path,
        "max_longitude_baidu": max_lng,
        "min_longitude_baidu": min_lng,
        "max_latitude_baidu": max_lat,
        "min_latitude_baidu": min_lat,
        "area_type": area_type,
        "rsrp": rsrp,
        "cover": cover,
        "grid_count": grid_count,
        "poor_grid_count": poor_grid_count,
        "bst_id": bst_id,
        "cell_id": cell_id,
        "cell_name": cell_name,
        "city_select": city_select,
        "district_id": district_id,
        "district_name": district_name,
        "mktcenter_id": mktcenter_id,
        "mktcenter_name": mktcenter_name,
        "city_id": city_id,
//			"handle_time":handle_time,
//			"handle_description":handle_description,
    };
    var $ajax = $.ajax({
        type: 'post',
        data: ajaxData,
        url: 'pages_concernArea_ConcernArea_saveArea.action',
        cache: false,
        dataType: 'json',
        success: function (data) {
            // console.log(data);
            IntelligentRoadTest.queryAllConcernArea();
            $("#showBoxSelectionList").hide();
            IntelligentRoadTest.getConcernAreaMessageById(data);
            if (IntelligentRoadTest.isSelect == true) {
                $('#BoxSelection').trigger("click");
            }
            IntelligentRoadTest.isPoorAreaSaveToConcern = false;
        },
        error: function (data, textStatus) {
            alert("保存关注区域失败")
        }
    });
}
//编辑关注区域
IntelligentRoadTest.concernAreaEdit = function IntelligentRoadTest_concernAreaEdit(data) {
    data.edit_description = String($('#concernHandleDescribe').val());
    $('#concernHandleDescribe').val(data.edit_description);
    $('#concernHandleDescribe').removeAttr('readonly');
    $('#editButton').hide();
    $('#sureButton,#cancelButton').show();
    $(".handle_description textarea").addClass("edit");
    $('#sureButton').unbind('click').bind('click', function () {
        data.edit_description = String($('#concernHandleDescribe').val());
        // IntelligentRoadTest.concernAreaData[8] = String($('#concernHandleDescribe').val());
//		.replace(/\n/g,"#");
//         IntelligentRoadTest.updateConcernArea(IntelligentRoadTest.concernAreaData);
        data.edit_description = String($('#concernHandleDescribe').val());
        IntelligentRoadTest.updateConcernArea(data);

        $('#concernHandleDescribe').attr('readonly', 'true');
        $('#editButton').show();
        $('#sureButton,#cancelButton').hide();
        $(".handle_description textarea").removeClass("edit");
        //重新查询数据
        //IntelligentRoadTest.queryAllConcernArea();
    });
    $('#cancelButton').unbind('click').bind('click', function () {
        $('#concernHandleDescribe').attr('readonly', 'true');
        $('#editButton').show();
        $('#sureButton,#cancelButton').hide();
        $(".handle_description textarea").removeClass("edit");
        $('#concernHandleDescribe').val(data.edit_description);
    });
}

//更新关注区域
IntelligentRoadTest.updateConcernArea = function IntelligentRoadTest_updateConcernArea(data) {
//	编号,名称,类型,创建者,创建时间,地市,经纬度集合,调优日志,RSRP均值7天变化,最大经度,最大纬度,最小经度,最小纬度,操作
    var id = data.id;
    var area_name = data.area_name;
    var gis_data_baidu = data.gis_data_baidu;
    var max_lng = data.max_longitude_baidu;
    var min_lng = data.min_longitude_baidu;
    var max_lat = data.max_latitude_baidu;
    var min_lat = data.min_latitude_baidu;
    var create_user = data.creator;
    var area_type = data.area_type;
    var create_time = data.create_time;
    var handle_time = data.handle_time;
    var edit_description = data.edit_description;
    var handle_description = data.handle_description;
    var city = data.city;
    var bst_id = data.recent_base_statn_id;
    var cell_id = data.recent_cell_id;
    var cell_name = data.recent_cell_name;
    var rsrp = data.rsrp;
    var cover = data.cover;
    var city_id = data.city_id;
    var country_id = data.country_id;
    var country = data.country;
    var mktcenter_id = data.mktcenter_id;
    var mktcenter = data.mktcenter;
    var ajaxData = {
        "id": id,
        "area_name": area_name,
        "city": city,
        "gis_data_baidu": gis_data_baidu,
        "max_longitude_baidu": max_lng,
        "min_longitude_baidu": min_lng,
        "max_latitude_baidu": max_lat,
        "min_latitude_baidu": min_lat,
        "area_type": area_type,
        "create_user": create_user,
        "create_time": create_time,
        "handle_time": handle_time,
        "handle_description": edit_description,
        "rsrp": rsrp,
        "cover": cover,
        "bst_id": bst_id,
        "cell_id": cell_id,
        "cell_name": cell_name,
        "city_id": city_id,
        "district_id": country_id,
        "district_name": country,
        "mktcenter_name": mktcenter,
        "mktcenter_id": mktcenter_id,
    };
    var $ajax = $.ajax({
        type: 'post',
        data: ajaxData,
        url: 'pages_concernArea_ConcernArea_updateArea.action',
        cache: false,
        dataType: 'json',
        success: function (data) {
//			console.log(data.status);
            IntelligentRoadTest.queryAllConcernArea();
            // IntelligentRoadTest.goConcernAreaList();
        },
        error: function (data, textStatus) {
            alert("更新关注区域失败");
            $('#concernHandleDescribe').val(data.handle_description);
        }
    });
}


IntelligentRoadTest.concernAreaDelete = function IntelligentRoadTest_concernAreaDelete(data) {
    var ajaxData = {
        "id": data.id,
    };

    // if(confirm("确定删除此条数据吗")){
    var $ajax = $.ajax({
        type: 'post',
        data: ajaxData,
        url: 'pages_concernArea_ConcernArea_deleteArea.action',
        cache: false,
        dataType: 'json',
        success: function (data) {
//	        	console.log(data);
//	        	console.log(data.status);
            IntelligentRoadTest.queryAllConcernArea();
            IntelligentRoadTest.goConcernAreaList();
            for (var i = 0; i < IntelligentRoadTest.polygon.length; i++) {
                IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.polygon[i]);
                //注销
                var itemData = {
                    obj_type: IntelligentRoadTest.polygon[i].obj_type,
                    pointsString: null,
                    type: 2,
                    decide: 1,
                    obj_id: IntelligentRoadTest.polygon[i].obj_id,
                    day: IntelligentRoadTest.polygon[i].day
                };
                IntelligentRoadTest.logOutPolygonToLayer(itemData);
            }

        },
        error: function (data, textStatus) {

        }
    });
    // }
}

//调优日志点击，查看调优日志
IntelligentRoadTest.concernAreaLog = function IntelligentRoadTest_concernAreaLog(data) {
    $('#concernHandleDescribe').val(data.handle_description);
    $('#concernHandleDescribe').attr('readonly', 'readonly');

    $('#sureButton').hide();
    $('#editButton').show();
}

//7天rsrp均值点击，查看7天rsrp均值变化 关注区域的7天变化
IntelligentRoadTest.concernAreaSevenLine = function IntelligentRoadTest_concernAreaSevenLine(data, endDateStr, dayCount) {
    showOrHideInputImage(2);//显示加载中的图标
    var minLngNum = gridLngNum(data.min_longitude_baidu, 20);
    var maxLngNum = gridLngNum(data.max_longitude_baidu, 20);
    var minLatNum = gridLatNum(data.min_latitude_baidu, 20);
    var maxLatNum = gridLatNum(data.max_latitude_baidu, 20);
    var maxlng_maxlat_minlng_minlat = data.max_longitude_baidu + "," + data.max_latitude_baidu + "," + data.min_longitude_baidu + "," + data.min_latitude_baidu;

    var endDate = dealDateString(endDateStr);
    IntelligentRoadTest.sevenIndex = 0;
    IntelligentRoadTest.sevenLineData = null;
    IntelligentRoadTest.sevenLineData = [];
    var tableName=(IntelligentRoadTest.gridTime=="week") ? "DSI_MRO_ALL_GRID_TOT_W" : "DSI_MRO_ALL_GRID_TOT_D";
    for (var p = 0; p < dayCount; p++) {
        var date = new Date(endDate.getTime() - p * 1000 * 60 * 60 * 24);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        if (month < 10) {
            month = "0" + String(month);
        } else {
            month = String(month);
        }

        if (day < 10) {
            day = "0" + String(day);
        } else {
            day = String(day);
        }
        var time = year + month + day;
        var type=IntelligentRoadTest.gridType;
        if(IntelligentRoadTest.gridTypeIndex == 6){
            type=0;
        }
        var keyprefix = getddmm(time) + "_" + type + "_";
        var cloumnsList = IntelligentRoadTestSystemLayerV3.getCloumnsList();
        var list = ["IntelligentRoadTestV2_getGridDataV2", "TABLENAME:NOCE:"+tableName, "GRIDKEYPREFIX:" + keyprefix, "GRIDLEVEL:20",
            "POLYGONCONTOUR:" + data.gis_data_baidu, "COLUMNLIST:" + cloumnsList, "PARTITIONMOD:" + " "];//partitionmod 1
        var progressBarSqls = [];
        progressBarSqls.push(list);
        var functionlist = [IntelligentRoadTest.filterAreaGridDataForSevenLine];
        var dataBase = [7];
        progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase, [[data, time, dayCount]]);
    }

}

//7天rsrp均值点击，查看7天rsrp均值变化 骨头区域的7天变化
IntelligentRoadTest.boneAreaSevenLine = function IntelligentRoadTest_boneAreaSevenLine(data, endDateStr, dayCount) {
    showOrHideInputImage(2);//显示正在加载中的图标
    // var minLngNum = gridLngNum(data.longitude_min,20);
    // var maxLngNum = gridLngNum(data.longitude_max,20);
    // var minLatNum = gridLatNum(data.latitude_min,20);
    // var maxLatNum = gridLatNum(data.latitude_max,20);
    var maxlng_maxlat_minlng_minlat = data.longitude_max + "," + data.latitude_max + "," + data.longitude_min + "," + data.latitude_min;
    var endDate = dealDateString(endDateStr);
    IntelligentRoadTest.sevenIndex = 0;
    IntelligentRoadTest.sevenLineData = null;
    IntelligentRoadTest.sevenLineData = [];
    for (var p = 0; p < dayCount; p++) {
        var date = new Date(endDate.getTime() - p * 1000 * 60 * 60 * 24);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        if (month < 10) {
            month = "0" + String(month);
        } else {
            month = String(month);
        }

        if (day < 10) {
            day = "0" + String(day);
        } else {
            day = String(day);
        }
        var time = year + month + day;
        var type = IntelligentRoadTest.gridType;
        var keyprefix = getddmm(time) + "_" + type + "_";
        var cloumnsList = IntelligentRoadTestSystemLayerV3.getCloumnsList();
        var list = ["IntelligentRoadTestV2_getGridDataV2", "TABLENAME:NOCE:DSI_MRO_ALL_GRID_TOT_W", "GRIDKEYPREFIX:" + keyprefix, "GRIDLEVEL:20",
            "POLYGONCONTOUR:" + data.gis_data, "COLUMNLIST:" + cloumnsList, "PARTITIONMOD:" + " "];//partitionmod 1
        var progressBarSqls = [];
        progressBarSqls.push(list);
        var functionlist = [IntelligentRoadTest.filterAreaGridDataForSevenLine];
        var dataBase = [7];
        progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase, [[data, time, dayCount]]);
    }

}

IntelligentRoadTest.filterAreaGridDataForSevenLine = function (data, paraArr) {
    var polygonData = paraArr[0];
    var time = paraArr[1];
    var gis_data = [];
    var divID = IntelligentRoadTest.sevenLineEchartDiv;
    if (polygonData.gis_data_baidu != null) {
        gis_data = polygonData.gis_data_baidu.split("@");
    } else if (polygonData.gis_data_baidu == null && polygonData.gis_data != null) {
        gis_data = polygonData.gis_data.split("@");
        divID = IntelligentRoadTest.boneSevenLineEchartDiv;
    }
    if (IntelligentRoadTest.isBoxSelectEchart == true) {
        IntelligentRoadTest.count++;
        if (IntelligentRoadTest.count == 7) {
            IntelligentRoadTest.isBoxSelectEchart = false;
            IntelligentRoadTest.count = 0;
        }
        divID = IntelligentRoadTest.saveSevenLineEchartDiv;
    }
    var pointArr = [];
    for (var i = 0; i < gis_data.length; i++) {
        var pointA = gis_data[i].split(",");
        var point = new BMap.Point(pointA[0], pointA[1]);
        pointArr.push(point);
    }
    var styleOptions = {
        strokeColor: "red",    //边线颜色。
        //fillColor:"red",      //填充颜色
        strokeWeight: 1,       //边线的宽度，以像素为单位。
        strokeOpacity: 0.8,	   //边线透明度，取值范围0 - 1。
        fillOpacity: 0.3,      //填充的透明度，取值范围0 - 1。
        strokeStyle: 'dashed' //边线的样式，solid或dashed。
    }

    var result = data.result;
    //将不在框选多边形内的栅格去掉
    var avgSum = 0;
    var allSum = 0;
    var cnt = 0;
    var count = 0;
    var gridCount = 0;
    var poor_grid_count = 0;
    for (var i = 0; i < result.length; i++) {
        var rowKey = result[i][0];
        var gridLngLatArray = gridLngLat(rowKey.split("_")[2], 20, 100000);
        var gridMidLng = gridLngLatArray[2];
        var gridMidLat = gridLngLatArray[3];
        var point = new BMap.Point(gridMidLng, gridMidLat);
        var polygon = {};
        polygon.points = pointArr;
        if (BMapLib.GeoUtils.isPointInPolygonForNOCE(point, polygon)) {
            if (IntelligentRoadTest.gridBand.length == 1) {//主接入、最优、单个频段
                if (!isNull(result[i][1])) {
                    var reData = result[i][1].split("#");
                    if (parseFloat(formatValue(reData[0])) > 3 && !isNull(reData[9])) {//把小于等于3条记录数和rsrp均值为null过滤掉 不参与计算
                        count++;
                        avgSum += parseFloat(formatValue(reData[8])); // _RSRP_140_Sum
                        allSum += parseFloat(formatValue(reData[0])); // _RSRP_140_Cnt
                        cnt += parseInt(formatValue(reData[4])); // _RSRP_105_Cnt
                        if (parseFloat(reData[9]) <= -105) {
                            poor_grid_count++;
                        }
                    }
                }
            } else if(IntelligentRoadTest.gridBand.length > 1){
                //组合频段取最优rsrp
                var flag = false;
                var maxAvg = null;
                var maxAll = null;
                var maxCnt = null;
                var maxSum = null;
                for (var k = 1; k < result[i].length; k++) {
                    if (IntelligentRoadTest.gridTypeIndex != 0 && k == result[i].length - 1) {
                        break;
                    }
                    var reData = formatArray(result[i][k]).split("#");
                    if (!isNull(reData[9]) && parseFloat(formatValue(reData[0])) > 3) {
                        if (!flag) {
                            maxAvg = parseFloat(formatValue(reData[9]));// rsrp均值
                            maxAll = parseFloat(formatValue(reData[0]));//140记录数
                            maxCnt = parseFloat(formatValue(reData[4]));//105记录数
                            maxSum = parseFloat(formatValue(reData[8]));//140频段之和
                            flag = true;
                        } else {
                            if (reData[9] > maxAvg) {
                                maxAvg = parseFloat(formatValue(reData[9]));// rsrp均值
                                maxAll = parseFloat(formatValue(reData[0]));//140记录数
                                maxCnt = parseFloat(formatValue(reData[4]));//105记录数
                                maxSum = parseFloat(formatValue(reData[8]));//140频段之和
                            }
                        }
                    }
                }
                if (maxAvg != null) {
                    avgSum += maxSum; // _RSRP_140_Avg
                    allSum += maxAll; // _RSRP_140_Cnt
                    cnt += maxCnt; // _RSRP_105_Cnt
                    if (maxAvg <= -105) {
                        poor_grid_count++;
                    }
                    count++;
                }
            }else{
                //2G栅格
                let GridFiled2G = result[i][result[i].length-1]//这里得到的应该是b10
                let GridFiled2GData = GridFiled2G.split('#');
                if(!isNull(GridFiled2GData[0]) && !isNull(GridFiled2GData[1])){
                    //这个字段只有两个值
                    cnt += parseInt(GridFiled2GData[0]);//cdr记录数
                    avgSum += parseFloat(GridFiled2GData[1]);//EC/IO的均值
                    if(parseFloat(GridFiled2GData[1]) < -10){
                        poor_grid_count++;
                    }
                    count++;
                }
            }
        }
    }
    var rsrpAvg = null;//parseFloat(avgSum/count).toFixed(2);
    var cover = null;//parseFloat(cnt/allSum*100).toFixed(2);
    var poor_grid_radio = null;//parseFloat(poor_grid_count/count * 100).toFixed(2)
    if (count == 0) {
        rsrpAvg = '-';
        cover = '-';
        poor_grid_radio = '-';
    } else {
        if(IntelligentRoadTest.gridBand.length > 0){
            rsrpAvg = parseFloat(avgSum / allSum).toFixed(2);
            cover = parseFloat(cnt / allSum * 100).toFixed(2);
            poor_grid_radio = parseFloat(poor_grid_count / count * 100).toFixed(2);
        }else{
            /*
            CDR记录数：sum(CDR_2G_STR_Cnt)
            EC/IO：avg(CDR_2G_STR_Avg)
            弱栅格占比：CDR_2G_STR_Avg<-10个数/总栅格数
            覆盖率：CDR_2G_STR_Avg>=-10个数/总栅格数
            */
            rsrpAvg = parseFloat(avgSum / count).toFixed(2);
            cover = parseFloat((count- poor_grid_count)/ count * 100).toFixed(2);
            poor_grid_radio = parseFloat(poor_grid_count / count * 100).toFixed(2);
        }

    }
    var da = {};
    da['time'] = time;
    da['avg'] = rsrpAvg;
    da['cover'] = cover;
    da['poor_grid_radio'] = poor_grid_radio;
    IntelligentRoadTest.sevenLineData.push(da);

    IntelligentRoadTest.sevenIndex++;
    data = null;
    if (IntelligentRoadTest.sevenIndex == paraArr[2]) {
        IntelligentRoadTest.sevenLineData.sort(function (a, b) {
            return parseInt(a.time) - parseInt(b.time);
        });
        var xAxisData = [];
        var seriesData = [];
        var coverData = [];
        var poor_grid_radioData = [];
        for (var i = 0; i < IntelligentRoadTest.sevenLineData.length; i++) {
            xAxisData.push(IntelligentRoadTest.sevenLineData[i].time.substring(4));
            seriesData.push(IntelligentRoadTest.sevenLineData[i].avg);
            coverData.push(IntelligentRoadTest.sevenLineData[i].cover);
            poor_grid_radioData.push(IntelligentRoadTest.sevenLineData[i].poor_grid_radio);
        }
        // $('#sevenLineLi').toggle();
        // document.getElementById(divID);
        IntelligentRoadTest.sevenLineEchart = echarts.init(document.getElementById(divID));
        var option = {

            legend: {
                left: 'center',
                top: '7%',
                data: ['RSRP', '覆盖率', '弱栅格占比'],
            },
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow'
                },
            },
            grid: { //图表在div的布局控制
                top: '15%',
                left: '3%',
                right: '4%',
                bottom: '3%',
                containLabel: true
            },
            xAxis: [{ //X轴样式
                type: 'category',
                boundaryGap: true,
                axisLabel: {
                    interval: 0,
//					rotate:10,
                    align: 'center'
                },
                axisLine: {
                    show: true,
                    lineStyle: {
                        color: '#686c78',
                    }
                },
                axisTick: {
                    show: true,
                    alignWithLabel: true,
                },
                data: xAxisData,
            }],
            yAxis: [{ //Y轴样式
                type: 'value',
                name: 'dBm',
                scale: true,
                axisLine: {
                    show: true,
                    lineStyle: {
                        color: '#686c78',
                    },
                },
                axisTick: {
                    show: false
                },
                splitLine: {
                    show: false,
                    lineStyle: {
                        color: '#EAEEF7',
                    }
                }
            },
                { //Y轴样式
                    type: 'value',
                    name: '%',
                    scale: true,
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#686c78',
                        },
                    },
                    axisTick: {
                        show: false,
                    },
                    max: 100,
                    // min : 0,
                    splitLine: {
                        show: false,
                        lineStyle: {
                            color: '#EAEEF7',
                        }
                    }
                }
            ],
            series: [{ //图表数据样式
                type: 'line',
                symbolSize: 6,
                name: "RSRP",
                smooth: true,
                lineStyle: {
                    normal: {
                        color: '#55b7f1',
                        width: 2,
                    }
                },
                itemStyle: {
                    normal: {
                        color: "#55b7f1",
                        borderColor: "#55b7f1",
                    }
                },
                areaStyle: {
                    normal: {
                        color: {
                            type: 'linear',
                            x: 0,
                            y: 0,
                            x2: 0,
                            y2: 1,
                            colorStops: [{
                                offset: 0,
                                color: '#D5ECFA' // 0% 处的颜色
                            },
                                {
                                    offset: 1,
                                    color: '#FFFFFF' // 100% 处的颜色
                                }
                            ],
                            globalCoord: false // 缺省为 false
                        }
                    },
                },
                data: seriesData
            },
                { //图表数据样式
                    type: 'line',
                    symbolSize: 6,
                    name: "覆盖率",
                    smooth: true,
                    yAxisIndex: 1,
                    data: coverData
                },
                {
                    type: 'line',
                    symbolSize: 6,
                    name: "弱栅格占比",
                    smooth: true,
                    lineStyle: {
                        normal: {
                            color: '#f18a1c',
                            width: 2,
                        }
                    },
                    itemStyle: {
                        normal: {
                            color: "#f18a1c",
                            borderColor: "#f18a1c",
                        }
                    },
                    yAxisIndex: 1,
                    data: poor_grid_radioData
                }
            ]
        };
        IntelligentRoadTest.sevenLineEchart.setOption(option);
        IntelligentRoadTest.sevenLineEchart.resize();
    }
    if (IntelligentRoadTest.index != 13) {
        showOrHideInputImage(1);
    } else {
        if (IntelligentRoadTest.lastBoxSelectingIndex != null) {
            showOrHideInputImage(1);
        } else {
            showOrHideInputImage(1);
        }
    }

}

/**********************************
 * @funcname getEchartData
 * @funcdesc 将数据将进行处理并返回处理后的数据
 * @param {Array} result
 result表示需要处理的数据
 * @author 林楚佳
 * @create 20180101
 ***********************************/
IntelligentRoadTest.getEchartData = function (result) {
    var objResult = []; //对象数组，用于显示echart图的数据
    if (result.length > 0) {
        for (var i = 30; i > 0; i--) {
            var obj = {};
            if (result[0].create_time.toString().indexOf("-") > -1) {
                obj.create_time = new Date(dealDateString(IntelligentRoadTest.day).getTime() - (i - 1) * 24 * 60 * 60 * 1000).Format("yyyy-MM-dd");
            } else {
                obj.create_time = new Date(dealDateString(IntelligentRoadTest.day).getTime() - (i - 1) * 24 * 60 * 60 * 1000).Format("yyyyMMdd");
            }
            obj.cover = 0;
            obj.rsrp = 0;
            objResult.push(obj);
        }
        for (var k = 0; k < objResult.length; k++) {
            for (var h = 0; h < result.length; h++) {
                if (result[h].create_time.toString() == objResult[k].create_time) { //数据中存在这一天的数据
                    objResult[k] = result[h];
                }
            }
            if (objResult[k].create_time.toString().indexOf("-") < 0) {
                objResult[k].create_time = dealDateString(objResult[k].create_time.toString()).Format("yyyy-MM-dd");
            }
        }
        return objResult;
    } else {
        return [];
    }

}

/**********************************
 * @funcname IntelligentRoadTest.getConcernArea30DayData
 * @funcdesc 获取关注区域和骨头区域的30天的折线图数据
 * @param {int} pid  {int}  type
 * pid表示区域的id  type是用来区分关注区域和骨头区域的
 * @author 林楚佳
 * @create 20180101
 ***********************************/
IntelligentRoadTest.getConcernArea30DayData = function IntelligentRoadTest_getArea30DayData(pid, type) {
    showOrHideInputImage(2);
    var startDay = "";
    var endDay = "";
    endDay = dealDateString(IntelligentRoadTest.day).Format("yyyy-MM-dd");
    startDay = new Date(dealDateString(IntelligentRoadTest.day).getTime() - 29 * 24 * 60 * 60 * 1000).Format("yyyy-MM-dd");
    var sqlList = [];
    var list = ["IntelligentRoadTestAnalysi_v2_getConcernArea30DayData", "PID:" + pid, "TYPE:" + type,
        "STARTDAY:" + startDay, "ENDDAY:" + endDay];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealConcernArea30DayData];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);
}

/**********************************
 * @funcname IntelligentRoadTest.dealConcernArea30DayData
 * @funcdesc 获取关注区域和骨头区域的30天的折线图数据的回调函数
 * @param {Object}  data
 * data表示查询返回的数据
 * @author 林楚佳
 * @create 20180101
 ***********************************/
IntelligentRoadTest.dealConcernArea30DayData = function IntelligentRoadTest_dealConcernArea30DayData(data) {
    var result = callBackChangeData(data);
//    console.log(result);
    var objResult = IntelligentRoadTest.getEchartData(result);
    if (IntelligentRoadTest.currentLocation == "concern") {
        IntelligentRoadTest.show30DayEcharts(objResult, IntelligentRoadTest.sevenLineEchartDiv);
        IntelligentRoadTest.showSecondEchart(result, "concernAreaSecondChart");
    } else if (IntelligentRoadTest.currentLocation == "boneArea") {
        IntelligentRoadTest.show30DayEcharts(objResult, IntelligentRoadTest.boneSevenLineEchartDiv);
        IntelligentRoadTest.showSecondEchart(result, "boneAreaSecondChart");
    }
}

/**********************************
 * @funcname IntelligentRoadTest.show30DayEcharts
 * @funcdesc 显示30天的数据的echarts图
 * @param {Array}  result {String} divID
 * result表示需要展示的数据 ， divID表示echarts图所在的div的id
 * @author 林楚佳
 * @create 20180101
 ***********************************/
IntelligentRoadTest.show30DayEcharts = function IntelligentRoadTest_show30DayEcharts(result, divID) {
    if (IntelligentRoadTest.sevenLineEchart != null) {
        IntelligentRoadTest.sevenLineEchart.dispose();
    }
    IntelligentRoadTest.sevenLineEchart = echarts.init(document.getElementById(divID));
    var option = null;
    if (IntelligentRoadTest.currentLocation == "concern" || IntelligentRoadTest.index == 13) {
        var xAxisData = [];
        var seriesData = [];
        var coverData = [];
        var poor_grid_radioData = []; //弱栅格占比的数据列表
        if (result != null && result.length > 0) {
            for (var i = 0; i < result.length; i++) {
                var day = result[i].create_time.toString().substring(5);
                xAxisData[i] = day;
                seriesData[i] = parseFloat(result[i].rsrp).toFixed(2);
                if (result[i].cover != null) {
                    coverData[i] = (result[i].cover * 100).toFixed(2);
                } else {
                    coverData[i] = result[i].cover;
                }
                poor_grid_radioData[i] = result[i].poor_grid_radio;
                // poor_grid_radioData[i] = 20.88;假数据
            }
        }
        IntelligentRoadTest.concernAreaExportObj = { //创建一个用于导出关注区域覆盖率的数据对象
            day : xAxisData,
            rsrp : seriesData,
            cover : coverData,
            poor_radio : poor_grid_radioData
        };
        option = {
            legend: {
                left: 'center',
                top: '2%',
                data: ['RSRP', '覆盖率', '弱栅格占比'],
            },
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow'
                },
            },
            grid: { //图表在div的布局控制
                top: '10%',
                left: '3%',
                right: '4%',
                bottom: '15%',
                containLabel: true
            },
            dataZoom: {//实现缩放功能
                type: "slider",
                show: true,
                // realtime : true,
                start: 0,
                bottom: '1%'

            },
            xAxis: [{ //X轴样式
                type: 'category',
                boundaryGap: true,
                axisLabel: {
                    /*interval:0,*/
//					rotate:10,
                    align: 'center',
                },
                axisLine: {
                    show: true,
                    lineStyle: {
                        color: '#686c78',
                    }
                },
                axisTick: {
                    show: true,
                    alignWithLabel: true,
                },
                data: xAxisData,
            }],
            yAxis: [{ //Y轴样式
                type: 'value',
                name: 'dBm',
                scale: true,
                axisLine: {
                    show: true,
                    lineStyle: {
                        color: '#686c78',
                    },
                },
                axisTick: {
                    show: false
                },
                splitLine: {
                    show: false,
                    lineStyle: {
                        color: '#EAEEF7',
                    }
                }
            },
                { //Y轴样式
                    type: 'value',
                    name: '%',
                    scale: true,
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#686c78',
                        },
                    },
                    axisTick: {
                        show: false,
                    },
                    max: 100,
                    // min : 0 ,
                    splitLine: {
                        show: false,
                        lineStyle: {
                            color: '#EAEEF7',
                        }
                    }
                }
            ],
            series: [{ //图表数据样式
                type: 'line',
                symbolSize: 6,
                name: "RSRP",
                smooth: true,
                lineStyle: {
                    normal: {
                        color: '#55b7f1',
                        width: 2,
                    }
                },
                itemStyle: {
                    normal: {
                        color: "#55b7f1",
                        borderColor: "#55b7f1",
                    }
                },
                areaStyle: {
                    normal: {
                        color: {
                            type: 'linear',
                            x: 0,
                            y: 0,
                            x2: 0,
                            y2: 1,
                            colorStops: [{
                                offset: 0,
                                color: '#D5ECFA' // 0% 处的颜色
                            },
                                {
                                    offset: 1,
                                    color: '#FFFFFF' // 100% 处的颜色
                                }
                            ],
                            globalCoord: false // 缺省为 false
                        }
                    },
                },
                data: seriesData
            },
                { //图表数据样式
                    type: 'line',
                    symbolSize: 6,
                    name: "覆盖率",
                    smooth: true,
                    yAxisIndex: 1,
                    data: coverData
                }, { //图表数据样式
                    type: 'line',
                    symbolSize: 6,
                    name: "弱栅格占比",
                    smooth: true,
                    lineStyle: {
                        normal: {
                            color: '#f18a1c',
                            width: 2,
                        }
                    },
                    itemStyle: {
                        normal: {
                            color: "#f18a1c",
                            borderColor: "#f18a1c",
                        }
                    },
                    yAxisIndex: 1,
                    data: poor_grid_radioData
                }]
        };
    } else {
        var xAxisData = [];
        var seriesData = [];
        var coverData = [];
        var gteq110Data = [];
        if (result != null && result.length > 0) {
            for (var i = 0; i < result.length; i++) {
                var day = result[i].create_time.toString().substring(5);
                xAxisData[i] = day;
                seriesData[i] = parseFloat(result[i].rsrp).toFixed(2);
                if(IntelligentRoadTest.index == 8){ //高铁不显示覆盖率了，要显示>=-110里程
                    if(result[i].gteq110_length != null){
                        gteq110Data[i] = (result[i].gteq110_length/1000).toFixed(2);
                    }else{
                        gteq110Data[i] = result[i].gteq110_length;
                    }
                }else{
                    if (result[i].cover != null) {
                        coverData[i] = (result[i].cover * 100).toFixed(2);
                    } else {
                        coverData[i] = result[i].cover;
                    }
                }
            }
        }

        var option = {
            legend: {
                left: 'center',
                top: '2%',
                data: ['RSRP', '覆盖率'],
            },
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow'
                },
            },
            grid: { //图表在div的布局控制
                top: '10%',
                left: '3%',
                right: '4%',
                bottom: '15%',
                containLabel: true
            },
            dataZoom: {//实现缩放功能
                type: "slider",
                show: true,
                // realtime : true,
                start: 0,
                bottom: '1%'

            },
            xAxis: [{ //X轴样式
                type: 'category',
                boundaryGap: true,
                axisLabel: {
                    /*interval:0,*/
//					rotate:10,
                    align: 'center',
                },
                axisLine: {
                    show: true,
                    lineStyle: {
                        color: '#686c78',
                    }
                },
                axisTick: {
                    show: true,
                    alignWithLabel: true,
                },
                data: xAxisData,
            }],
            yAxis: [{ //Y轴样式
                type: 'value',
                name: 'dBm',
                scale: true,
                axisLine: {
                    show: true,
                    lineStyle: {
                        color: '#686c78',
                    },
                },
                axisTick: {
                    show: false
                },
                splitLine: {
                    show: false,
                    lineStyle: {
                        color: '#EAEEF7',
                    }
                }
            },
                { //Y轴样式
                    type: 'value',
                    name: '%',
                    scale: true,
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#686c78',
                        },
                    },
                    axisTick: {
                        show: false,
                    },
                    max: 100,
                    splitLine: {
                        show: false,
                        lineStyle: {
                            color: '#EAEEF7',
                        }
                    }
                }
            ],
            series: [{ //图表数据样式
                type: 'line',
                symbolSize: 6,
                name: "RSRP",
                smooth: true,
                lineStyle: {
                    normal: {
                        color: '#55b7f1',
                        width: 2,
                    }
                },
                itemStyle: {
                    normal: {
                        color: "#55b7f1",
                        borderColor: "#55b7f1",
                    }
                },
                areaStyle: {
                    normal: {
                        color: {
                            type: 'linear',
                            x: 0,
                            y: 0,
                            x2: 0,
                            y2: 1,
                            colorStops: [{
                                offset: 0,
                                color: '#D5ECFA' // 0% 处的颜色
                            },
                                {
                                    offset: 1,
                                    color: '#FFFFFF' // 100% 处的颜色
                                }
                            ],
                            globalCoord: false // 缺省为 false
                        }
                    },
                },
                data: seriesData
            },
                { //图表数据样式
                    type: 'line',
                    symbolSize: 6,
                    name: "覆盖率",
                    smooth: true,
                    yAxisIndex: 1,
                    data: coverData
                }]
        };

        if(IntelligentRoadTest.index == 8){ //高铁要显示其他的指标，不显示覆盖率了
            var maxLength = Math.max.apply(null, gteq110Data) + 1;
            option = {
                legend: {
                    left: 'center',
                    top: '2%',
                    data: ['RSRP', '>=-110'],
                },
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'shadow'
                    },
                },
                grid: { //图表在div的布局控制
                    top: '10%',
                    left: '3%',
                    right: '4%',
                    bottom: '15%',
                    containLabel: true
                },
                dataZoom: {//实现缩放功能
                    type: "slider",
                    show: true,
                    // realtime : true,
                    start: 0,
                    bottom: '1%'

                },
                xAxis: [{ //X轴样式
                    type: 'category',
                    boundaryGap: true,
                    axisLabel: {
                        /*interval:0,*/
//					rotate:10,
                        align: 'center',
                    },
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#686c78',
                        }
                    },
                    axisTick: {
                        show: true,
                        alignWithLabel: true,
                    },
                    data: xAxisData,
                }],
                yAxis: [{ //Y轴样式
                    type: 'value',
                    name: 'dBm',
                    scale: true,
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#686c78',
                        },
                    },
                    axisTick: {
                        show: false
                    },
                    splitLine: {
                        show: false,
                        lineStyle: {
                            color: '#EAEEF7',
                        }
                    }
                },
                    { //Y轴样式
                        type: 'value',
                        name: 'km',
                        // max:maxLength,
                        scale: true,
                        axisLine: {
                            show: true,
                            lineStyle: {
                                color: '#686c78',
                            },
                        },
                        axisTick: {
                            show: false,
                        },
                        splitLine: {
                            show: false,
                            lineStyle: {
                                color: '#EAEEF7',
                            }
                        }
                    }
                ],
                series: [{ //图表数据样式
                    type: 'line',
                    symbolSize: 6,
                    name: "RSRP",
                    smooth: true,
                    lineStyle: {
                        normal: {
                            color: '#55b7f1',
                            width: 2,
                        }
                    },
                    itemStyle: {
                        normal: {
                            color: "#55b7f1",
                            borderColor: "#55b7f1",
                        }
                    },
                    areaStyle: {
                        normal: {
                            color: {
                                type: 'linear',
                                x: 0,
                                y: 0,
                                x2: 0,
                                y2: 1,
                                colorStops: [{
                                    offset: 0,
                                    color: '#D5ECFA' // 0% 处的颜色
                                },
                                    {
                                        offset: 1,
                                        color: '#FFFFFF' // 100% 处的颜色
                                    }
                                ],
                                globalCoord: false // 缺省为 false
                            }
                        },
                    },
                    data: seriesData
                },
                    { //图表数据样式
                        type: 'line',
                        symbolSize: 6,
                        name: ">=-110",
                        smooth: true,
                        yAxisIndex: 1,
                        data: gteq110Data
                    }]
            };

        }
    }
    IntelligentRoadTest.sevenLineEchart.setOption(option);
    IntelligentRoadTest.sevenLineEchart.resize();
    showOrHideInputImage(1);

}


/**********************************
 * @funcname IntelligentRoadTest.showGridSevenDayEcharts
 * @funcdesc 显示7天的数据的echarts图
 * @param {Array}  result {String} divID
 * result表示需要展示的数据 ， divID表示echarts图所在的div的id
 * @author 林楚佳
 * @create 20180101
 ***********************************/
IntelligentRoadTest.showGridSevenDayEcharts = function IntelligentRoadTest_showGridSevenDayEcharts(result, divID) {
    if (IntelligentRoadTest.gridSevenLineEchart != null) {
        IntelligentRoadTest.gridSevenLineEchart.dispose();
    }
    IntelligentRoadTest.gridSevenLineEchart = echarts.init(document.getElementById(divID));
    var xAxisData = [];
    var seriesData = [];
    var coverData = [];
    for (var k = 6; k >= 0; k--) {
        var newDay = new Date(dealDateString(IntelligentRoadTest.day).getTime() - k * 24 * 60 * 60 * 1000).Format("yyyy-MM-dd").substr(5);
        xAxisData.push(newDay);
        seriesData.push(null);
        coverData.push(null);
    }
    if (result != null && result.length > 0) {
        for (var i = 0; i < result.length; i++) {
            var day = result[i].create_time.toString().substring(5);
            var index = xAxisData.indexOf(day);
            seriesData[index] = parseFloat(result[i].rsrp).toFixed(2);
            if (result[i].cover != null) {
                coverData[index] = (result[i].cover * 100).toFixed(2);
            } else {
                coverData[index] = result[i].cover;
            }

        }
    } else { //防止echarts报错
        seriesData[0] = 0;
        coverData[0] = 0;
    }

    var option = {
        legend: {
            left: 'center',
            top: '2%',
            data: ['RSRP', '覆盖率'],
        },
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'shadow'
            },
        },
        grid: { //图表在div的布局控制
            top: '10%',
            left: '3%',
            right: '4%',
            bottom: '15%',
            containLabel: true
        },
        dataZoom: {//实现缩放功能
            type: "slider",
            show: true,
            // realtime : true,
            start: 0,
            bottom: '1%'

        },
        xAxis: [{ //X轴样式
            type: 'category',
            boundaryGap: true,
            axisLabel: {
                /*interval:0,*/
//					rotate:10,
                align: 'center',
            },
            axisLine: {
                show: true,
                lineStyle: {
                    color: '#686c78',
                }
            },
            axisTick: {
                show: true,
                alignWithLabel: true,
            },
            data: xAxisData,
        }],
        yAxis: [{ //Y轴样式
            type: 'value',
            name: 'dBm',
            scale: true,
            axisLine: {
                show: true,
                lineStyle: {
                    color: '#686c78',
                },
            },
            axisTick: {
                show: false
            },
            splitLine: {
                show: false,
                lineStyle: {
                    color: '#EAEEF7',
                }
            }
        },
            { //Y轴样式
                type: 'value',
                name: '%',
                scale: true,
                axisLine: {
                    show: true,
                    lineStyle: {
                        color: '#686c78',
                    },
                },
                axisTick: {
                    show: false,
                },
                max: 100,
                splitLine: {
                    show: false,
                    lineStyle: {
                        color: '#EAEEF7',
                    }
                }
            }
        ],
        series: [{ //图表数据样式
            type: 'line',
            symbolSize: 6,
            name: "RSRP",
            smooth: true,
            lineStyle: {
                normal: {
                    color: '#55b7f1',
                    width: 2,
                }
            },
            itemStyle: {
                normal: {
                    color: "#55b7f1",
                    borderColor: "#55b7f1",
                }
            },
            areaStyle: {
                normal: {
                    color: {
                        type: 'linear',
                        x: 0,
                        y: 0,
                        x2: 0,
                        y2: 1,
                        colorStops: [{
                            offset: 0,
                            color: '#D5ECFA' // 0% 处的颜色
                        },
                            {
                                offset: 1,
                                color: '#FFFFFF' // 100% 处的颜色
                            }
                        ],
                        globalCoord: false // 缺省为 false
                    }
                },
            },
            data: seriesData
        },
            { //图表数据样式
                type: 'line',
                symbolSize: 6,
                name: "覆盖率",
                smooth: true,
                yAxisIndex: 1,
                data: coverData
            }]
    };
    IntelligentRoadTest.gridSevenLineEchart.setOption(option);
    IntelligentRoadTest.gridSevenLineEchart.resize();
    showOrHideInputImage(1);

}

//关注区域查看，需要加载栅格
IntelligentRoadTest.concernAreaPositiong = function IntelligentRoadTest_concernAreaPositiong(data, isShowPolygon) {
    if (isShowPolygon == undefined || isShowPolygon == null) {
        isShowPolygon = true;
    }

    IntelligentRoadTest.hideConcernArea();

    var gis_data = data.gis_data_baidu.split("@");
    var pointArr = [];
    for (var i = 0; i < gis_data.length; i++) {
        var pointA = gis_data[i].split(",");
        var point = new BMap.Point(pointA[0], pointA[1]);
        pointArr.push(point);
    }
    var styleOptions = {
        strokeColor: "red",    //边线颜色。
        //fillColor:"red",      //填充颜色
        strokeWeight: 1,       //边线的宽度，以像素为单位。
        strokeOpacity: 0.8,	   //边线透明度，取值范围0 - 1。
        fillOpacity: 0.3,      //填充的透明度，取值范围0 - 1。
        strokeStyle: 'dashed' //边线的样式，solid或dashed。
    }

    var mid_lng = (data.min_longitude_baidu + data.max_longitude_baidu) / 2;
    var mid_lat = (data.min_latitude_baidu + data.max_latitude_baidu) / 2;

    IntelligentRoadTest.concernPolygon = new BMap.Polygon(pointArr, styleOptions);
    IntelligentRoadTest.concernPolygonM = new BMap.Polygon(pointArr, styleOptions);
    IntelligentRoadTest.concernPolygonU = new BMap.Polygon(pointArr, styleOptions);
    IntelligentRoadTest.concernPolygon.id = data.id;
    IntelligentRoadTest.concernPolygon.area_name = data.area_name;
    IntelligentRoadTest.concernPolygon.gis_data_baidu = data.gis_data_baidu;
    IntelligentRoadTest.concernPolygon.max_lng = data.max_longitude_baidu;
    IntelligentRoadTest.concernPolygon.min_lng = data.min_longitude_baidu;
    IntelligentRoadTest.concernPolygon.max_lat = data.max_latitude_baidu;
    IntelligentRoadTest.concernPolygon.min_lat = data.min_latitude_baidu;
    IntelligentRoadTest.concernPolygon.create_user = data.creator;
    IntelligentRoadTest.concernPolygon.create_time = data.create_time;
    IntelligentRoadTest.concernPolygon.handle_time = data.handle_time;
    IntelligentRoadTest.concernPolygon.handle_description = data.handle_description;
    IntelligentRoadTest.concernPolygon.city = data.city;
    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.concernPolygon);

    IntelligentRoadTest.mapMobile.addOverlay(IntelligentRoadTest.concernPolygonM);
    IntelligentRoadTest.mapUnicom.addOverlay(IntelligentRoadTest.concernPolygonU);


    if (!isShowPolygon) {//点击地图得到的区域时，不需要定位，而且也不需要呈现轮廓
        IntelligentRoadTest.concernPolygon.hide();
        // IntelligentRoadTest.map.panTo(new BMap.Point(mid_lng,mid_lat));
    } else {
        IntelligentRoadTest.map.panTo(new BMap.Point(mid_lng, mid_lat), {noAnimation: false});
    }
    IntelligentRoadTest.centerAndZoomTimeout = setTimeout("IntelligentRoadTest.timeoutCenterAndZoom()", 100);
    IntelligentRoadTest.drawPolylineTimeout = setTimeout("IntelligentRoadTest.drawPolyline()", 200);
    if (IntelligentRoadTest.isThreeNetStatus) {
        setTimeout(function () {
            IntelligentRoadTest.sectorCompentM.clear();
            IntelligentRoadTest.sectorCompentM.draw();
            IntelligentRoadTest.sectorCompentU.clear();
            IntelligentRoadTest.sectorCompentU.draw();
        }, 300);
    }

    var maxlng_maxlat_minlng_minlat = data.max_longitude_baidu + "," + data.max_latitude_baidu + "," + data.min_longitude_baidu + "," + data.min_latitude_baidu;
    var keyprefix = IntelligentRoadTest.day + "_" + "20_0_";

    var cloumnsList = "i:a1,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a18,i:a19,i:a22,i:a26,i:a27,i:a28,i:a29,i:a30,i:a31,i:a32,i:a33,i:a34,i:a35,i:a36,i:a37,i:a38";
    var list = ["IntelligentRoadTestV2_getGridData", "GRIDKEYPREFIX:" + keyprefix, "MAXLNG_MAXLAT_MINLNG_MINLAT:" + maxlng_maxlat_minlng_minlat, "COLUMNLIST:" + cloumnsList];
    var progressBarSqls = [];
    progressBarSqls.push(list);
    var functionlist = [IntelligentRoadTest.filterAreaGridData];
    var dataBase = [7];
    progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase);
//	$('#BoxSelection').text('框选栅格');
    //图例全部呈现
    IntelligentRoadTest.initColorBarAll();
    IntelligentRoadTest.concerningArea = true;

}
//对关注区域栅格进行过滤
IntelligentRoadTest.filterAreaGridData = function IntelligentRoadTest_filterAreaGridData(data) {
//	var result = callBackChangeData(data);
    var result = data.result;
    var polygonGridData = [];
    //将不在框选多边形内的栅格去掉
    var avgSum = 0;
    var allSum = 0;
    var cnt = 0;
    var count = 0;
    var gridCount = 0;
    var grid_dx_count = 0;
    var grid_dx_sum = 0;
    var grid_dx_105_count = 0;
    var grid_yd_count = 0;
    var grid_yd_sum = 0;
    var grid_yd_105_count = 0;
    var grid_lt_count = 0;
    var grid_lt_sum = 0;
    var grid_lt_105_count = 0;
    var month_relate = null;

    for (var i = 0; i < result.length; i++) {
        var gridMidLng = result[i][3];// i:a1,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a18,i:a19(8),i:a22,i:a26,i:a27,i:a28,i:a29(13),i:a30
        //,i:a31(15),i:a32,i:a33,i:a34,i:a35,i:a36,i:a37,i:a38
        var gridMidLat = result[i][4];
        var point = new BMap.Point(gridMidLng, gridMidLat);
        if (BMapLib.GeoUtils.isPointInPolygon(point, IntelligentRoadTest.concernPolygon)) {
            polygonGridData.push(result[i]);
            count++;
            avgSum += parseFloat(result[i][11]); // rsrp_140_0_avg
            allSum += parseFloat(result[i][8]); // rsrp_140_0_cnt
            cnt += parseInt(result[i][9]); // rsrp_105_cnt
            gridCount += parseInt(result[i][12]); //Grid_Rec_Cnt

            grid_dx_count += parseInt(result[i][13] == null ? 0 : result[i][13]);
            grid_dx_105_count += parseInt(result[i][14] == null ? 0 : result[i][14]);
            grid_dx_sum += parseFloat(result[i][15] == null ? 0 : result[i][15]);
            grid_yd_count += parseInt(result[i][16] == null ? 0 : result[i][16]);
            grid_yd_105_count += parseInt(result[i][17] == null ? 0 : result[i][17]);
            grid_yd_sum += parseFloat(result[i][18] == null ? 0 : result[i][18]);
            grid_lt_count += parseInt(result[i][19] == null ? 0 : result[i][19]);
            grid_lt_105_count += parseInt(result[i][20] == null ? 0 : result[i][20]);
            grid_lt_sum += parseFloat(result[i][21] == null ? 0 : result[i][21]);
            if (result[i][22] != null) {//month_relate
                if (month_relate == null) {
                    month_relate = result[i][22];
                } else if (month_relate != result[i][22] && month_relate.indexOf(result[i][22]) < 0) {
                    month_relate = month_relate + "_" + result[i][22];
                }

            }
        }
    }
    var rsrpAvg = avgSum / count;
    var cover = cnt / allSum;
    var dx_rsrp = grid_dx_sum / grid_dx_count;
    var yd_rsrp = grid_yd_sum / grid_yd_count;
    var lt_rsrp = grid_lt_sum / grid_lt_count;
    var dx_cover = grid_dx_105_count / grid_dx_count;
    var yd_cover = grid_yd_105_count / grid_yd_count;
    var lt_cover = grid_lt_105_count / grid_lt_count;

    if (grid_dx_sum == 0 || grid_dx_count == 0) {
        dx_rsrp = null;
    }
    if (grid_yd_sum == 0 || grid_yd_count == 0) {
        yd_rsrp = null;
    }
    if (grid_lt_sum == 0 || grid_lt_count == 0) {
        lt_rsrp = null;
    }
    if (grid_dx_105_count == 0 || grid_dx_count == 0) {
        dx_cover = null;
    }
    if (grid_yd_105_count == 0 || grid_yd_count == 0) {
        yd_cover = null;
    }
    if (grid_lt_105_count == 0 || grid_lt_count == 0) {
        lt_cover = null;
    }

    if (count == 0) {
        rsrpAvg = null;
        cover = null;
        dx_rsrp = null;
        yd_rsrp = null;
        lt_rsrp = null;
        dx_cover = null;
        yd_cover = null;
        lt_cover = null;
    }

    IntelligentRoadTest.concernPolygon.type = "boxConcernSelect";
    IntelligentRoadTest.concernPolygon.rsrpAvg = rsrpAvg;//parseFloat(rsrpAvg).toFixed(2);
    IntelligentRoadTest.concernPolygon.cover = cover;//parseFloat(cover).toFixed(2);
    IntelligentRoadTest.concernPolygon.count = count;
    IntelligentRoadTest.concernPolygon.dx_rsrp = dx_rsrp;
    IntelligentRoadTest.concernPolygon.yd_rsrp = yd_rsrp;
    IntelligentRoadTest.concernPolygon.lt_rsrp = lt_rsrp;
    IntelligentRoadTest.concernPolygon.dx_cover = dx_cover;
    IntelligentRoadTest.concernPolygon.yd_cover = yd_cover;
    IntelligentRoadTest.concernPolygon.lt_cover = lt_cover;
    IntelligentRoadTest.concernPolygon.month_relate = month_relate;
    IntelligentRoadTest.concernPolygon.gridCount = gridCount;

    data.result = polygonGridData;
    IntelligentRoadTest.showGridByCanv(data);
    data = null;

}

IntelligentRoadTest.clearConcernArea = function IntelligentRoadTest_clearConcernArea() {
    IntelligentRoadTest.hideConcernArea();
}
//加载关注区域新日期的栅格数据
IntelligentRoadTest.loadConcenrnAreaNewData = function IntelligentRoadTest_loadConcenrnAreaNewData(data) {
    var gis_data = data.gis_data_baidu.split("@");
    var pointArr = [];
    for (var i = 0; i < gis_data.length; i++) {
        var pointA = gis_data[i].split(",");
        var point = new BMap.Point(pointA[0], pointA[1]);
        pointArr.push(point);
    }
    var mid_lng = (data.max_lng + data.min_lng) / 2;
    var mid_lat = (data.max_lat + data.min_lat) / 2;
    IntelligentRoadTest.map.panTo(new BMap.Point(mid_lng, mid_lat), {noAnimation: false});

    var maxlng_maxlat_minlng_minlat = data.max_lng + "," + data.max_lat + "," + data.min_lng + "," + data.min_lat;
    var keyprefix = IntelligentRoadTest.day + "_" + "20_0_";
    var cloumnsList = "i:a1,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a18,i:a19,i:a22,i:a26,i:a27,i:a28,i:a29,i:a30,i:a31,i:a32,i:a33,i:a34,i:a35,i:a36,i:a37,i:a38";
    // var list = ["IntelligentRoadTest_06_boxSelectGrid","KEYLIST:"+keyListStr,"COLUMNLIST:"+cloumnsList];
    var list = ["IntelligentRoadTestV2_getGridData", "GRIDKEYPREFIX:" + keyprefix, "MAXLNG_MAXLAT_MINLNG_MINLAT:" + maxlng_maxlat_minlng_minlat, "COLUMNLIST:" + cloumnsList];
    var progressBarSqls = [];
    progressBarSqls.push(list);
    var functionlist = [IntelligentRoadTest.filterAreaGridData];
    var dataBase = [7];
    progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase);
//	$('#BoxSelection').text('框选栅格');
    if (IntelligentRoadTest.colorBarArr.length > 0) {
        //图例全部呈现
        IntelligentRoadTest.initColorBarAll();
    }

    IntelligentRoadTest.concerningArea = true;
}
//清除关注区域
IntelligentRoadTest.hideConcernArea = function IntelligentRoadTest_hideConcernArea() {
    IntelligentRoadTest.concerningArea = false;
    if (IntelligentRoadTest.concernPolygon != null) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.concernPolygon);
        IntelligentRoadTest.GridMap.clear();
        IntelligentRoadTest.GridCanArrT = null;
        IntelligentRoadTest.GridCanArrT = [];
        IntelligentRoadTest.CanArr = null;
        IntelligentRoadTest.CanArr = [];
    }

    if (IntelligentRoadTest.concernPolygonM != null) {
        IntelligentRoadTest.mapMobile.removeOverlay(IntelligentRoadTest.concernPolygonM);
        IntelligentRoadTest.GridMapM.clear();
        IntelligentRoadTest.GridCanArrM = null;
        IntelligentRoadTest.GridCanArrM = [];
    }

    if (IntelligentRoadTest.concernPolygonU != null) {
        IntelligentRoadTest.mapUnicom.removeOverlay(IntelligentRoadTest.concernPolygonU);
        IntelligentRoadTest.GridMapU.clear();
        IntelligentRoadTest.GridCanArrU = null;
        IntelligentRoadTest.GridCanArrU = [];
    }


}

//框选区域最近小区
IntelligentRoadTest.concernAreaRecentCell = function IntelligentRoadTest_concernAreaRecentCell(data, overlayList) {
    var result = callBackChangeData(data);
    if (overlayList != null && result.length > 0) {
        overlayList.bst_id = result[0].base_statn_id;
        overlayList.cell_id = result[0].cell_id;
        overlayList.cell_name = result[0].cell_name;
    }
}

/*
//地图缩放、拖拽结束事件
IntelligentRoadTest.GridMapZoomEnd = function IntelligentRoadTest_GridMapZoomEnd(e) {
    IntelligentRoadTest.resizeInfoWindow(IntelligentRoadTest.infoWindowPoint);
    //缩放时不会触发地图移动moveend事件，因此要做一个触发
    if (e.type == "onzoomend") {
        //console.log("zoomend",IntelligentRoadTest.map.getZoom());
        IntelligentRoadTest.GridMapMoveEnd(e);
    }
    //高铁需要在10公里级别做分层，如果大于10公里，使用聚合打点的方式，小于10公里，使用画框的方式
    if(IntelligentRoadTest.index == 8 && (IntelligentRoadTest.roadStatus == 3 || IntelligentRoadTest.roadStatus == 1 || IntelligentRoadTest.roadStatus == 2)){
        if(IntelligentRoadTest.map.getZoom() > IntelligentRoadTest.markarClusterZoom){
            if(IntelligentRoadTest.railMarkerClusterer){
                IntelligentRoadTest.railMarkerClusterer.clearMarkers();
            }

            if(IntelligentRoadTest.railContinueLineUtil){
                IntelligentRoadTest.railContinueLineUtil.draw();
            }
        }else{
            if(IntelligentRoadTest.railMarkerClusterer){
                if(IntelligentRoadTest.railMarkerClusterer.getMarkers().length != IntelligentRoadTest.MarkerResultArr.length){
                    IntelligentRoadTest.railMarkerClusterer.clearMarkers();
                    IntelligentRoadTest.railMarkerClusterer.addMarkers(IntelligentRoadTest.MarkerResultArr);
                }
            }

            if(IntelligentRoadTest.railContinueLineUtil){
                IntelligentRoadTest.railContinueLineUtil.clearCanvasLayers();
            }
        }
    }

    if (IntelligentRoadTest.metroStationsMarkerOverlay.length > 0) {
        if (IntelligentRoadTest.map.getZoom() < 14) {
            for (var i = 0; i < IntelligentRoadTest.metroStationsMarkerOverlay.length; i++) {
                var markerPoint = IntelligentRoadTest.metroStationsMarkerOverlay[i];
                var icon = markerPoint.getIcon();
                icon.setImageSize(new BMap.Size(9, 9));
                markerPoint.setIcon(icon);
                if (markerPoint.isVisible()) {
                    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metroStationsMarkerOverlay[i]);  //移除覆盖物
                    IntelligentRoadTest.metroStationsMarkerOverlay[i] = markerPoint;
                    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.metroStationsMarkerOverlay[i]);  //添加覆盖物
                } else {
                    IntelligentRoadTest.metroStationsMarkerOverlay[i] = markerPoint;
                }

            }

            for (var i = 0; i < IntelligentRoadTest.metroStationsOverlay.length; i++) {
                if (IntelligentRoadTest.metroStationsOverlay[i].type == "LineDivide") {
                    if (IntelligentRoadTest.metroStationsOverlay[i].index % 2 != 0 && IntelligentRoadTest.metroStationsOverlay[i].isVisible()) {
                        IntelligentRoadTest.metroStationsOverlay[i].hide();
                    }
                }
            }

        } else {
            for (var i = 0; i < IntelligentRoadTest.metroStationsMarkerOverlay.length; i++) {
                var markerPoint = IntelligentRoadTest.metroStationsMarkerOverlay[i];
                var icon = markerPoint.getIcon();
                icon.setImageSize(new BMap.Size(18, 18));
                markerPoint.setIcon(icon);
                if (markerPoint.isVisible()) {
                    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metroStationsMarkerOverlay[i]);  //移除覆盖物
                    IntelligentRoadTest.metroStationsMarkerOverlay[i] = markerPoint;
                    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.metroStationsMarkerOverlay[i]);  //添加覆盖物
                } else {
                    IntelligentRoadTest.metroStationsMarkerOverlay[i] = markerPoint;
                }
            }

            for (var i = 0; i < IntelligentRoadTest.metroStationsOverlay.length; i++) {
                if (IntelligentRoadTest.metroStationsOverlay[i].type == "LineDivide") {
                    if (!IntelligentRoadTest.metroStationsOverlay[i].isVisible()) {
                        IntelligentRoadTest.metroStationsOverlay[i].show();
                    }
                }
            }

        }
    }
}
*/

/**********************************
 * @funcname IntelligentRoadTest.getGridDataByGridId
 * @funcdesc 查询某个栅格某天的详细数据
 * @param {Array} grid_data
 * grid_id表示栅格的id
 * @author 林楚佳
 * @create 20180101
 ***********************************/
IntelligentRoadTest.getGridDataByGridId = function (grid_data) {
    //0-最小经度 1-最小纬度 2—最大经度 3-最大纬度 4-rsrp均值/电信RSRP[-140，0)记录数 5-栅格号 6-记录数<=n||记录数>n 7-电信RSRP[-105，0)记录数 8-电信RSRP[-140，0)记录数 9-覆盖率（6/7） 10-rsrp均值
    var grid_id = grid_data[5];
    var gridType = IntelligentRoadTest.gridType;
    // var keyList=grid_id.substr(grid_id.length-2,2)+"_"+gridType+"_20_"+IntelligentRoadTest.day+"_"+grid_id;
    var keyList = getddmm(IntelligentRoadTest.day) + "_" + gridType + "_" + grid_id;
    var cloumnsList = IntelligentRoadTestSystemLayerV3.getGridCloumnsList();
    var list = ["IntelligentRoadTestV2_getGridDataByGridIDV2", "TABLENAME:" + "NOCE:DSI_MRO_ALL_GRID_TOT_W", "KEYLIST:" + keyList, "COLUMNLIST:" + cloumnsList];
    var progressBarSqls = [];
    progressBarSqls.push(list);
    var functionlist = [IntelligentRoadTest.dealGridDataByGridId];
    var dataBase = [7];
    progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase, [grid_data]);
}

/**********************************
 * @funcname IntelligentRoadTest.dealGridDataByGridId
 * @funcdesc 查询某个栅格某天的详细数据的回调函数
 * @param {Object}  data表示查询返回的数据
 * @param {String}  param表示查询场景的栅格还是扇区的栅格
 * @author 林楚佳
 * @create 20180101
 ***********************************/
IntelligentRoadTest.dealGridDataByGridId = function IntelligentRoadTest_dealGridDataByGridId(data, param) {
    var obj = {};
    var result = isNull(data.result) ? [] : data.result;
    var grid_data = param;
    if (result.length > 0) {
        var dataArray = result[0];
        obj.grid_id = dataArray[1].split("#")[0]; //grid_num
        obj.city = dataArray[1].split("#")[1];//city
        obj.country = dataArray[1].split("#")[3];//country
        obj.longitude_mid = dataArray[1].split("#")[11];//longitude_mid
        obj.latitude_mid = dataArray[1].split("#")[12];//latitude_mid
        if (dataArray[dataArray.length - 2] != null) {
            obj.min_userex_upavgrate = dataArray[dataArray.length - 2].split("#")[0]; //kpi上行速率
            obj.min_userex_dwavgrate = dataArray[dataArray.length - 2].split("#")[1]; //kpi下行速率
        } else {
            obj.min_userex_upavgrate = null; //kpi上行速率
            obj.min_userex_dwavgrate = null; //kpi下行速率
        }
        obj.nrCellStr = dataArray[dataArray.length - 1] == null?null:dataArray[dataArray.length - 1].split("#")[4];//邻小区集合
        var bandLength = IntelligentRoadTest.gridBand.length;
        if (IntelligentRoadTest.gridBand.length == 1) {
            var reData = formatArray(dataArray[2]).split("#");
            obj.rsrp_avg = reData[9];// rsrp均值
            if (!isNull(reData[4]) && !isNull(reData[0])) {
                obj.cover_avg = reData[4] / reData[0];//覆盖率
            }
            obj.gridCount = reData[0]//栅格MR条数
            obj.sector_set = dataArray[3];// 主小区集合
        } else {//组合频段取最优rsrp
            var flag = false;
            for (var k = 2; k < dataArray.length - bandLength - 1; k++) {//
                var reData = formatArray(dataArray[k]).split("#");
                if (!isNull(reData[9])) {
                    if (!flag) {
                        obj.rsrp_avg = reData[9];// rsrp均值
                        if (!isNull(reData[4]) && !isNull(reData[0])) {
                            obj.cover_avg = reData[4] / reData[0];//覆盖率
                        }
                        obj.gridCount = reData[0];//栅格MR条数
                        obj.sector_set += dataArray[k + bandLength] + "@";// 主小区集合
                        flag = true;
                    } else {
                        if (parseFloat(reData[9]) > parseFloat(obj.rsrp_avg)) {
                            obj.rsrp_avg = reData[9];// rsrp均值
                            if (!isNull(reData[4]) && !isNull(reData[0])) {
                                obj.cover_avg = reData[4] / reData[0];//覆盖率
                            }
                            obj.gridCount = reData[0];//栅格MR条数
                        }
                        obj.sector_set += dataArray[k + bandLength] + "@";// 主小区集合
                    }
                }
            }
        }
        //0-最小经度 1-最小纬度 2—最大经度 3-最大纬度 4-rsrp均值/电信RSRP[-140，0)记录数 5-栅格号 6-记录数<=n||记录数>n 7-电信RSRP[-105，0)记录数 8-电信RSRP[-140，0)记录数 9-覆盖率（6/7） 10-rsrp均值
        if (grid_data.length == 11) {
            obj.rsrp_avg = grid_data[10];
            obj.cover_avg = grid_data[9];
            obj.gridCount = grid_data[8];
        }
    }

    IntelligentRoadTest.showGridCompleteMessage(obj);
}

/**********************************
 * @funcname IntelligentRoadTest.getSeventDayDataByGridId
 * @funcdesc 查询某个栅格历史7天的数据
 * @param {String}  grid_id
 * grid_id表示栅格的id
 * @author 林楚佳
 * @create 20180101
 ***********************************/
IntelligentRoadTest.getSeventDayDataByGridId = function (grid_id) {
    var keyList = [];
    var dateList = [];
    //MOD_AGPS_TYPE_Grid_Type_DAY_GRID_NUM 17_1_20_20180205_23206417
    // var rowKey=grid_id.substr(grid_id.length-2,2)+"_1_20";
    var rowKey = IntelligentRoadTest.gridType;
    for (var i = 7; i > 0; i--) {
        var day = new Date(dealDateString(IntelligentRoadTest.day).getTime() - (i - 1) * 24 * 60 * 60 * 1000).Format("ddMM");
        keyList.push(day + "_" + rowKey + "_" + grid_id);
        dateList.push(day);
    }
    var keyListStr = keyList.join(",");
    var cloumnsList = [];
    //覆盖质量
    for (var gridBand in IntelligentRoadTest.gridBand) {
        switch (IntelligentRoadTest.gridBand[gridBand]) {
            case "最优场强":
                cloumnsList.push("i:a2");
            case "主接入场强":
                cloumnsList.push("i:a7");
            case "800M":
                cloumnsList.push("i:a3");
            case "1.8G":
                cloumnsList.push("i:a4");
            case "2.1G":
                cloumnsList.push("i:a5");
            case "2.6G":
                cloumnsList.push("i:a6");
        }
        ;
    }
    var cloumns = cloumnsList.join(",");
    var list = ["IntelligentRoadTestV2_getGridDataByGridIDV2", "TABLENAME: " + "NOCE:DSI_MRO_ALL_GRID_TOT_W", "KEYLIST:" + keyListStr, "COLUMNLIST:" + cloumns];
    var progressBarSqls = [];
    progressBarSqls.push(list);
    var functionlist = [IntelligentRoadTest.dealSeventDayDataByGridId];
    var dataBase = [7];
    progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase, [dateList]);
}
/**********************************
 * @funcname IntelligentRoadTest.dealSeventDayDataByGridId
 * @funcdesc 查询某个栅格历史7天的数据的回调函数
 * @param {Object}  data {Array or Other} params
 * data表示查询返回的结果  params表示传递过来的参数
 * @author 林楚佳
 * @create 20180101
 ***********************************/
IntelligentRoadTest.dealSeventDayDataByGridId = function IntelligentRoadTest_dealSeventDayDataByGridId(data, params) {
    var result = isNull(data.result) ? [] : data.result;//查询结果的result
    var gridBand = IntelligentRoadTest.gridBand;//栅格频段
    // console.log(result);
    // console.log(params);
    var objResult = [];
    for (var k = 7; k > 0; k--) {
        var tempObj = {
            create_time: new Date(dealDateString(IntelligentRoadTest.day).getTime() - (k - 1) * 24 * 60 * 60 * 1000).Format("yyyy-MM-dd"),
            rsrp: null,
            cover: null
        }
        if(k == 1){
            tempObj.rsrp = 0;
            tempObj.cover = 0; //防止echarts报错
        }
        objResult.push(tempObj);
    }
    if (result.length > 0) {
        for (var i = 0; i < result.length; i++) {
            var dataArr = result[i];
            var time = new Date().getFullYear() + "" + dataArr[0].substr(2, 2) + "" + dataArr[0].substr(0, 2); //rowKey中获取日期
            var create_time = dealDateString(time).Format("yyyy-MM-dd");
            for (var h = 0; h < objResult.length; h++) {
                if (create_time == objResult[h].create_time) {
                    if (IntelligentRoadTest.gridBand.length == 1) {//主接入、最优、单个频段
                        var reData = formatArray(dataArr[1]).split("#");
                        objResult[h].rsrp = parseFloat(reData[9]).toFixed(2);//RSRP均值
                        if (!isNull(reData[4]) && !isNull(reData[0])) {
                            objResult[h].cover = reData[4] / reData[0];//覆盖率
                        }
                    } else {//组合频段取最优rsrp
                        var flag = false;
                        for (var k = 1; k < result[i].length; k++) {
                            var reData = formatArray(dataArr[k]).split("#");
                            if (!isNull(reData[9])) {
                                if (!flag) {
                                    objResult[h].rsrp = parseFloat(reData[9]).toFixed(2);// rsrp均值
                                    if (!isNull(reData[4]) && !isNull(reData[0])) {
                                        objResult[h].cover = reData[4] / reData[0];//覆盖率
                                    }
                                    flag = true;
                                } else {
                                    if (parseFloat(reData[9]) > parseFloat(objResult[h].rsrp)) {
                                        objResult[h].rsrp = parseFloat(reData[9]).toFixed(2);// rsrp均值
                                        if (!isNull(reData[4]) && !isNull(reData[0])) {
                                            objResult[h].cover = reData[4] / reData[0];//覆盖率
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //objResult[h].rsrp = parseFloat(dataArr["i:a27"]).toFixed(2);
                    //objResult[h].cover = dataArr["i:a22"] / dataArr["i:a19"];
                }
            }
        }

    } else { //如果查询返回的数据为空，需要将处理的数据中添加一个数据不为null，如果全部为null会导致echart报错
        objResult[0].cover = 0;
        objResult[0].rsrp = 0;
    }
    IntelligentRoadTest.showGridSevenDayEcharts(objResult, "gridLineChart");
    showOrHideInputImage(1);
}


/*
//地图移动结束事件
IntelligentRoadTest.GridMapMoveEnd = function IntelligentRoadTest_GridMapMoveEnd(e) {
    $('#cirTipLeft').hide();
    if (e.gH) {//当使用centerAndZoom方法进行设置中心点时，该属性会为字符串"CenterAndZoom"

        return;
    }
    if (IntelligentRoadTest.isScreenCompared && !IntelligentRoadTestScreenCompared.sendSetCenter) {//分屏页发送页面同步信息
        var messageObj = {}
        messageObj.type = "bdmaponmoveend";
        messageObj.point = IntelligentRoadTest.map.getCenter();
        messageObj.zoom = IntelligentRoadTest.map.getZoom();
        messageObj.sendSetCenter = true;
        window.opener.postMessage(JSON.stringify(messageObj), "*");
    } else {
        if (IntelligentRoadTest.isAddMessageEvent && !IntelligentRoadTestScreenCompared.sendSetCenter) {// 主屏时，往分屏页发送信息
            var messageObj = {}
            messageObj.type = "bdmaponmoveend";
            messageObj.point = IntelligentRoadTest.map.getCenter();
            messageObj.zoom = IntelligentRoadTest.map.getZoom();
            messageObj.sendSetCenter = true;
            windowScreeen.postMessage(JSON.stringify(messageObj), "*");
        }
    }
    var centerPoint = IntelligentRoadTest.map.getCenter();
    if (IntelligentRoadTest.isThreeNetStatus) {
        var zoom = IntelligentRoadTest.map.getZoom();
        IntelligentRoadTest.mapMobile.setCenter(centerPoint);
        IntelligentRoadTest.mapMobile.setZoom(zoom);

        IntelligentRoadTest.mapUnicom.setCenter(centerPoint);
        IntelligentRoadTest.mapUnicom.setZoom(zoom);

        //聚焦框
        IntelligentRoadTest.drawPolylineTimeout = setTimeout("IntelligentRoadTest.drawPolyline();", 100);
    }

    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlay);
    $("#cirTip").hide();
    if (IntelligentRoadTest.isThreeNetStatus) {
        IntelligentRoadTest.poorAreaCompentM.clear();
        IntelligentRoadTest.poorAreaCompentM.draw();
        IntelligentRoadTest.poorAreaCompentU.clear();
        IntelligentRoadTest.poorAreaCompentU.draw();
    }


    if (IntelligentRoadTest.isShowSceneArea && IntelligentRoadTest.SceneAreaCompent != null) {
        IntelligentRoadTest.SceneAreaCompent.MapZoomAndDragEnd(e, IntelligentRoadTest.SceneAreaCompent);
    }

    if (IntelligentRoadTest.isShowPoorArea && IntelligentRoadTest.poorAreaCompent != null) {
        // console.log("重绘上行、下行。。。。");
        IntelligentRoadTest.poorAreaCompent.MapZoomAndDragEnd(e, IntelligentRoadTest.poorAreaCompent);
    }

    if (IntelligentRoadTest.isShowPoorArea && IntelligentRoadTest.poorCompent != null) {
        // console.log("重绘弱区。。。。");
        IntelligentRoadTest.poorCompent.MapZoomAndDragEnd(e, IntelligentRoadTest.poorCompent);
    }
    if (IntelligentRoadTest.isShowPoorArea && IntelligentRoadTest.covSectorCompent != null) {
        // console.log("重绘MOD3、越区、重叠。。。。");
        IntelligentRoadTest.covSectorCompent.MapZoomAndDragEnd(e, IntelligentRoadTest.covSectorCompent);
    }

    if (IntelligentRoadTest.isShowSector && IntelligentRoadTest.sectorCompent != null) {
        // console.log("重绘扇区。。。。");
        IntelligentRoadTest.sectorCompent.MapZoomAndDragEnd(e, IntelligentRoadTest.sectorCompent);
    }
    if (IntelligentRoadTestSystemLayerV3.isShowUserComplain && IntelligentRoadTestSystemLayerV3.userComplainCompent != null) {
        // console.log("重绘用户抱怨图层。。。。");
        IntelligentRoadTestSystemLayerV3.userComplainCompent.MapZoomAndDragEnd(e, IntelligentRoadTestSystemLayerV3.userComplainCompent);
    }


    //呈现的是栅格
    if (IntelligentRoadTest.isShowGrid) {
        if (IntelligentRoadTest.isShowDTGrid) {
            IntelligentRoadTest.GridMap.clear();
            var CTData = IntelligentRoadTest.CanArr;
            var colorBarArr = [];
            if (IntelligentRoadTest.gridTypeIndex == 1) {
                colorBarArr = IntelligentRoadTest.colorBarArrSH;
            } else if (IntelligentRoadTest.gridTypeIndex == 2) {
                colorBarArr = IntelligentRoadTest.colorBarArrXH;
            } else if (IntelligentRoadTest.gridTypeIndex == 0) {
                colorBarArr = IntelligentRoadTest.colorBarArr;
            } else if (IntelligentRoadTest.gridTypeIndex == 3) {
                colorBarArr = IntelligentRoadTest.colorBarArrM3;
            } else if (IntelligentRoadTest.gridTypeIndex == 4) {
                colorBarArr = IntelligentRoadTest.colorBarArrYQ;
            } else if (IntelligentRoadTest.gridTypeIndex == 5) {
                colorBarArr = IntelligentRoadTest.colorBarArrCD;
            }

            for (var j = 0; j < colorBarArr.length; j++) {
                CTData = IntelligentRoadTest.ClearData(CTData, colorBarArr[j]);
            }
            if (CTData.length > 0) {
                IntelligentRoadTest.GridMap.draw(CTData);
            }
            CTData = null;
        } else {
            //三网时，还需要增加移动和联通的清除
            //增加移动联通地图栅格重绘
            if (IntelligentRoadTest.isThreeNetStatus) {
                IntelligentRoadTest.GridMap.clear();
                IntelligentRoadTest.GridMapM.clear();
                IntelligentRoadTest.GridMapU.clear();
                var CTData = IntelligentRoadTest.GridCanArrT;
                var CMData = IntelligentRoadTest.GridCanArrM;
                var CUData = IntelligentRoadTest.GridCanArrU;
                for (var j = 0; j < IntelligentRoadTest.colorBarArr.length; j++) {
                    CTData = IntelligentRoadTest.ClearData(CTData, IntelligentRoadTest.colorBarArr[j]);
                    CMData = IntelligentRoadTest.ClearData(CMData, IntelligentRoadTest.colorBarArr[j]);
                    CUData = IntelligentRoadTest.ClearData(CUData, IntelligentRoadTest.colorBarArr[j]);
                }
                if (CTData.length > 0) {
                    IntelligentRoadTest.GridMap.draw(CTData);
                }
                IntelligentRoadTest.GridMapM.draw(CMData);
                IntelligentRoadTest.GridMapU.draw(CUData);
                CTData = null;
                CMData = null;
                CUData = null;
            } else {
                IntelligentRoadTest.GridMap.clear();
                var CTData = IntelligentRoadTest.CanArr;
                var colorBarArr = [];
                if (IntelligentRoadTest.gridTypeIndex == 1) {
                    colorBarArr = IntelligentRoadTest.colorBarArrSH;
                } else if (IntelligentRoadTest.gridTypeIndex == 2) {
                    colorBarArr = IntelligentRoadTest.colorBarArrXH;
                } else if (IntelligentRoadTest.gridTypeIndex == 0) {
                    colorBarArr = IntelligentRoadTest.colorBarArr;
                } else if (IntelligentRoadTest.gridTypeIndex == 3) {
                    colorBarArr = IntelligentRoadTest.colorBarArrM3;
                } else if (IntelligentRoadTest.gridTypeIndex == 4) {
                    colorBarArr = IntelligentRoadTest.colorBarArrYQ;
                } else if (IntelligentRoadTest.gridTypeIndex == 5) {
                    colorBarArr = IntelligentRoadTest.colorBarArrCD;
                }
                for (var j = 0; j < colorBarArr.length; j++) {
                    CTData = IntelligentRoadTest.ClearData(CTData, colorBarArr[j]);
                }
                try {
                    if (CTData.length > 0) {
                        IntelligentRoadTest.GridMap.draw(CTData);
                    }
                } catch (e) {
                    // TODO: handle exception
                }
                CTData = null;
            }

        }

    } else {
        IntelligentRoadTest.GridMap.clear();
        //呈现的是描点
        var DTData = IntelligentRoadTest.GridMapCircleDataArr;
        for (var j = 0; j < IntelligentRoadTest.colorBarArr.length; j++) {
            DTData = IntelligentRoadTest.ClearDtData(DTData, IntelligentRoadTest.colorBarArr[j]);
        }
        if (DTData.length > 0) {
            IntelligentRoadTest.GridMap.drawCircle(DTData);
        }

        DTData = null;
    }

    if (IntelligentRoadTest.isShowAreaGrid) {
        //三网时，还需要增加移动和联通的清除
        //增加移动联通地图栅格重绘
        if (IntelligentRoadTest.isThreeNetStatus) {
            IntelligentRoadTest.GridMapArea.clear();
            IntelligentRoadTest.GridMapAreaM.clear();
            IntelligentRoadTest.GridMapAreaU.clear();
            var CTData = IntelligentRoadTest.GridAreaCanArrT;
            var CMData = IntelligentRoadTest.GridAreaCanArrM;
            var CUData = IntelligentRoadTest.GridAreaCanArrU;
            for (var j = 0; j < IntelligentRoadTest.colorBarArr.length; j++) {
                CTData = IntelligentRoadTest.ClearData(CTData, IntelligentRoadTest.colorBarArr[j]);
                CMData = IntelligentRoadTest.ClearData(CMData, IntelligentRoadTest.colorBarArr[j]);
                CUData = IntelligentRoadTest.ClearData(CUData, IntelligentRoadTest.colorBarArr[j]);
            }
            if (CTData.length > 0) {
                IntelligentRoadTest.GridMapArea.draw(CTData);
            }
            IntelligentRoadTest.GridMapAreaM.draw(CMData);
            IntelligentRoadTest.GridMapAreaU.draw(CUData);
            CTData = null;
            CMData = null;
            CUData = null;
        } else {
            IntelligentRoadTest.GridMapArea.clear();
            var CTData = IntelligentRoadTest.CanArrArea;
            for (var j = 0; j < IntelligentRoadTest.colorBarArr.length; j++) {
                CTData = IntelligentRoadTest.ClearData(CTData, IntelligentRoadTest.colorBarArr[j]);
            }
            if (CTData.length > 0) {
                IntelligentRoadTest.GridMapArea.draw(CTData);
            }
            CTData = null;
        }
    } else {
        IntelligentRoadTest.GridMapArea.clear();
        IntelligentRoadTest.GridMapAreaM.clear();
        IntelligentRoadTest.GridMapAreaU.clear();
    }
    //由于高速、高铁、市政路需要迁移到百度地图，因此加入在第一层和第二层时地图缩放等事件结束后重新加载地图数据
    if (IntelligentRoadTest.index == 7 || IntelligentRoadTest.index == 8 || IntelligentRoadTest.index == 14) {
        if(e.type == "onzoomend"){
            if (IntelligentRoadTest.roadIndex < 3){
                if(IntelligentRoadTest.lastLoadBoundsLineTimeout != null) {
                    clearTimeout(IntelligentRoadTest.lastLoadBoundsLineTimeout);
                    IntelligentRoadTest.lastLoadBoundsMapZoom = IntelligentRoadTest.map.getZoom();
                    //延迟时间执行查询
                    IntelligentRoadTest.lastLoadBoundsLineTimeout = setTimeout(IntelligentRoadTest.jugeIsNeedLoadBoundsLineData,IntelligentRoadTest.loadBoundsLineTimeInterval);
                }else{
                    IntelligentRoadTest.lastLoadBoundsMapZoom = IntelligentRoadTest.map.getZoom();
                    IntelligentRoadTest.lastLoadBoundsLineTimeout = setTimeout(IntelligentRoadTest.jugeIsNeedLoadBoundsLineData,IntelligentRoadTest.loadBoundsLineTimeInterval);
                }
            } else {
                //还需要看是否需要将高速、高铁、市政路的画线组件的数据清除掉
            }
        }else{
            if(IntelligentRoadTest.roadIndex < 3){
                if(IntelligentRoadTest.lastLoadBoundsLineByCenterTimeout != null) {
                    clearTimeout(IntelligentRoadTest.lastLoadBoundsLineByCenterTimeout);
                    IntelligentRoadTest.lastLoadBoundsMapCenter = IntelligentRoadTest.map.getCenter();
                    //延迟时间执行查询
                    IntelligentRoadTest.lastLoadBoundsLineByCenterTimeout = setTimeout(IntelligentRoadTest.jugeIsNeedLoadBoundsLineDataByCenter,IntelligentRoadTest.loadBoundsLineTimeInterval);
                }else{
                    IntelligentRoadTest.lastLoadBoundsMapCenter = IntelligentRoadTest.map.getCenter();
                    IntelligentRoadTest.lastLoadBoundsLineByCenterTimeout = setTimeout(IntelligentRoadTest.jugeIsNeedLoadBoundsLineDataByCenter,IntelligentRoadTest.loadBoundsLineTimeInterval);
                }
            }else{

            }
        }
    }

    var centerPoint = IntelligentRoadTest.map.getCenter();
    var district = IntelligentRoadTest.getCenterPointDistrict(centerPoint);
    if (district != null) {
        if (IntelligentRoadTest.cityPermission_common == "全省") {
            //地图拖拽完毕后，将搜索地市进行限制
            // IntelligentRoadTest.localSearch.setLocation(district.city);
            //更新页面中间的区域列表

            $('#mapCity').text(district.city);
            $('#mapDistrict').text(district.name);
            if(IntelligentRoadTest.city == "全省"){
                return;
            }
            IntelligentRoadTest.city = district.city;
            IntelligentRoadTest.district = district.name;
            // IntelligentRoadTest.updateSearchTmpTxt();
            IntelligentRoadTest.searchTxtUpdate();
        } else {
            if (district.city == IntelligentRoadTest.cityPermission_common) {
                $('#mapCity').text(district.city);
                $('#mapDistrict').text(district.name);
                IntelligentRoadTest.city = district.city;
                IntelligentRoadTest.district = district.name;
                // IntelligentRoadTest.updateSearchTmpTxt();
                IntelligentRoadTest.searchTxtUpdate();
            }
        }
    }

    // IntelligentRoadTest.legendGrid();
    // IntelligentRoadTest.GridMap.draw(IntelligentRoadTest.gridArr);
}
*/

/*
//地图鼠标移动事件
IntelligentRoadTest.mousemoveEvent = function IntelligentRoadTest_mousemoveEvent(e) {
    if (IntelligentRoadTest.index == 4) {
        if (!IntelligentRoadTest.isShowGrid) {
            var position = e.point;
            var x = e.offsetX;
            var y = e.offsetY;
            if (IntelligentRoadTest.lastPos == null) {
                IntelligentRoadTest.lastPos = position;
            }
            else if (IntelligentRoadTest.lastPos.lng != position.lng && IntelligentRoadTest.lastPos.lat != position.lat) {
                IntelligentRoadTest.lastPos = position;
                if (IntelligentRoadTest.lastMousemove != null) {
                    clearTimeout(IntelligentRoadTest.lastMousemove);
                }
                $('#tip').hide();
            }

            IntelligentRoadTest.lastMousemove = setTimeout(function () {
                IntelligentRoadTest.getPosData(position, x, y, e);
            }, 300);
        }
    }
}
*/

IntelligentRoadTest.getPosData = function IntelligentRoadTest_getPosData(position, x, y, e) {
    if (IntelligentRoadTest.lastPos.lng != position.lng && IntelligentRoadTest.lastPos.lat != position.lat) {
        $('#lblTip').html("");
        $('#tip').hide();
        return;
    }

    var lng = position.lng;
    var lat = position.lat;

    //--从缓存数据中获取---
    //描点
    var result = $.grep(IntelligentRoadTest.GridMapCircleDataArr, function (arr) {
        var lng = arr[0];
        var lat = arr[1];
        var circleCenter = IntelligentRoadTest.map.pointToPixel(new BMap.Point(lng, lat));
        var pointPixel = IntelligentRoadTest.map.pointToPixel(e.point);//鼠标所在的像素位置
        //判断两个点的距离是否在5像素内

        var distince = Math.sqrt((pointPixel.x - circleCenter.x) * (pointPixel.x - circleCenter.x) + (pointPixel.y - circleCenter.y) * (pointPixel.y - circleCenter.y));
        if (distince <= 5) {
            return true;
        }
    });
    if (result && result.length > 0) {
        var infoStr = "";
        //[lng,lat,rsrp,dtObject.dt_name,sector];
        for (var i = 0; i < result.length; i++) {
            if (i > 0) {
                infoStr += "<br>";
            }
            //路测名称、RSRP（描点显示RSRP，栅格显示RSRP均值）
            if (result[i][2] != 200) {
                infoStr += "名称:" + result[i][3] + "<br>";
                infoStr += "主小区信息:" + result[i][4] + "<br>";
                infoStr += "RSRP:" + result[i][2] + "<br>";
                infoStr += "备注:" + result[i][5] + "<br>";
            } else {
                infoStr += "名称:" + result[i][3] + "<br>";
                infoStr += "Value:" + result[i][4] + "<br>";
                infoStr += "备注:" + result[i][5] + "<br>";
            }

        }
        $('#lblTip').html(infoStr);
        $('#tip').css("left", x + 5 + "px").css("top", y + 10 + "px").show();
        return;
    }
    $('#tip').hide();
    return;
}

/*
//地图点击事件
IntelligentRoadTest.MapClickEvent = function IntelligentRoadTest_MapClickEvent(e) {
    IntelligentRoadTest.mapClick = true;
    if (IntelligentRoadTest.isSelect) {//正在框选的时候
        return;
    }

    if (IntelligentRoadTest.bmapDistanceTool) {//正在使用测距工具
        if (IntelligentRoadTest.bmapDistanceTool.isUseTool) {
            return;
        }
    }

    if (IntelligentRoadTest.isUseCoordinatePickTool) {//正在使用坐标拾取工具
        return;
    }

    //处于图层编辑和重绘状态时
    if (IntelligentRoadTest_SystemLayerEdit.isEditPolygon || IntelligentRoadTest_SystemLayerEdit.isRedrawPolygon) {
        return;
    }

    //判断是否点击到了TA扇形区域
    if (IntelligentRoadTest.checkIfShowTaSectorMessage() == true) {
        IntelligentRoadTest.checkInWhichTASector(e);
        IntelligentRoadTest.checkInWhichTACircle(e);
    } else {
        if (IntelligentRoadTest.highLightTASectorOption != null) {
            IntelligentRoadTest.highLightTASectorOption.isShow = false;
            IntelligentRoadTest.drawCirCle();
        }

        if (IntelligentRoadTest.highLightTACircleOption != null) {
            IntelligentRoadTest.highLightTACircleOption.isShow = false;
            IntelligentRoadTest.drawCirCle();
        }
    }

//    if(IntelligentRoadTest.isShowNrPoorArea == true){
//        IntelligentRoadTest.isShowNrPoorArea = false;
//        return;
//    }

    //不可以使用覆盖物做判断，否则多边形内的栅格无法点击
//    if(e.overlay!=null){
//    	IntelligentRoadTest.mapClick=false;
//    	return;
//    }

    var clickType = e.target.ze;
    if (clickType != undefined && clickType != null) {
        if (clickType.length > 1) {
            IntelligentRoadTest.mapClick = false;
            return;
        }
    }
    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlayTwo);
    $("#cirTipLeft").hide();

    var clickPoint = e.point;

    //隐藏栅格连线
    IntelligentRoadTest.hideGridMrTop5Sector();

    var clickSector = [];
    if (IntelligentRoadTest.isShowSector) {
        clickSector = IntelligentRoadTest.sectorCompent.getSectorPolygonByPoint(clickPoint);
    }

    var clickpoorArea = [];
    var clickPoor = [];
    var clickCovSector = [];
    if (IntelligentRoadTest.isShowPoorArea) {//专题图层是否有图层
        clickpoorArea = IntelligentRoadTest.poorAreaCompent.getSectorPolygonByPoint(clickPoint);//上、下行、mod3弱区、重叠弱区、越区弱区
        clickPoor = IntelligentRoadTest.poorCompent.getSectorPolygonByPoint(clickPoint);//弱区
        clickCovSector = IntelligentRoadTest.covSectorCompent.getSectorPolygonByPoint(clickPoint);//mod3扇区、重叠扇区、越区扇区
    }


    var clickSceneArea = [];
    if (IntelligentRoadTest.isShowSceneArea) {
        clickSceneArea = IntelligentRoadTest.SceneAreaCompent.getSectorPolygonByPoint(clickPoint);
    }

    var clickGrid = [];
    if (IntelligentRoadTest.isShowAreaGrid) {
        //获取栅格对应的数据
        clickGrid = $.grep(IntelligentRoadTest.CanArrArea, function (arr) {
            var minLng = arr[0];
            var minLat = arr[1];
            var maxLng = arr[2];
            var maxLat = arr[3];
            return (minLat <= clickPoint.lat && maxLat >= clickPoint.lat) && (minLng <= clickPoint.lng && maxLng >= clickPoint.lng);
        });
    }

    var clickObjectGrid = [];
    if (IntelligentRoadTest.isShowGrid && !IntelligentRoadTest.isShowDTGrid) {
        /!*if(IntelligentRoadTest.isThreeNetStatus){
            //获取栅格对应的数据
            clickObjectGrid = $.grep(IntelligentRoadTest.GridCanArrT, function (arr) {
                var minLng = arr[0];
                var minLat = arr[1];
                var maxLng = arr[2];
                var maxLat = arr[3];
                return (minLat <= clickPoint.lat && maxLat >= clickPoint.lat) && (minLng <= clickPoint.lng && maxLng >= clickPoint.lng);
            });
        }else{*!/
        //获取栅格对应的数据
        clickObjectGrid = $.grep(IntelligentRoadTest.CanArr, function (arr) {
            var minLng = arr[0];
            var minLat = arr[1];
            var maxLng = arr[2];
            var maxLat = arr[3];
            return (minLat <= clickPoint.lat && maxLat >= clickPoint.lat) && (minLng <= clickPoint.lng && maxLng >= clickPoint.lng);
        });
//    	}
    }

    var polygonLayer = [];
    if (IntelligentRoadTest.polygonToLayerComponents) {
        polygonLayer = IntelligentRoadTest.polygonToLayerComponents.getSectorPolygonByPoint(clickPoint);
    }
    IntelligentRoadTest.clickResultChe = {
        "sector": clickSector,//扇区
        "poorArea": clickpoorArea,//上、下行、MOD3干扰弱区、越区覆盖弱区、重叠覆盖弱区
        "poor": clickPoor,//弱区
        "covSector": clickCovSector,//MOD3/重叠、越区
        "scene": clickSceneArea,//场景
        "grid": clickGrid,//栅格
        "objectGrid": clickObjectGrid,//对象栅格
        "polygonLayer": polygonLayer
    };

    if (clickSector.length + clickCovSector.length + clickpoorArea.length + clickPoor.length + clickSceneArea.length + clickGrid.length + clickObjectGrid.length > 0) {
//    	IntelligentRoadTest.mkIndex=null;
        IntelligentRoadTest.mapObjClick = true;
        for (var i = 0; i < IntelligentRoadTest.polygonList.length; i++) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.polygonList[i]);
        }
    }
    //如果只匹配到一个结果，则直接进入进行该结果的操作，不需要用户再次点击
    if (clickSector.length + clickCovSector.length + clickpoorArea.length + clickPoor.length + clickSceneArea.length + clickGrid.length + clickObjectGrid.length + polygonLayer.length == 1) {
        //如果站间距的图层存在，则清除图层并将变量置空
        if (IntelligentRoadTest.sectorCircleCanvas != null) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.sectorCircleCanvas); //清除圆圈
            IntelligentRoadTest.sectorCircleCanvas = null;
        }
        IntelligentRoadTest.cleraAllZhuantiSectorAndLine();
        IntelligentRoadTest.hideCBPoorAreaNrTop5Sector();
        if (clickSector.length == 1) {
            /!* IntelligentRoadTest.loadPoorAreaGrid("20180725","757",null,null,1,clickSector[0].statn_id,clickSector[0].cell_id);
             return;*!/
            //如果是当前正在查看的扇区，不执行查询
            if (clickSector[0].type == 2) {//室外基站
                var p = clickSector[0].points[0];
                var pointsArr = clickSector[0].points;
                pointsArr.push(p);
                IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(pointsArr, 2, 'sector');//高亮扇区轮廓
            } else {//室内基站
                IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(clickSector[0], 1, 'sector');//高亮扇区轮廓
            }
            IntelligentRoadTestSystemLayerV3.setPoorAreaObj(3);//初始化当前查看的扇区详情页标识
            if (IntelligentRoadTest.index == 3 && IntelligentRoadTest.currentLocation == "sector"
                && IntelligentRoadTest.sectorCompleteVM.sectorData.enodeb_id == clickSector[0].statn_id
                && IntelligentRoadTest.sectorCompleteVM.sectorData.cell_id == clickSector[0].cell_id && IntelligentRoadTest.isClickGrid == false) {
                IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
                return;
            } else if (IntelligentRoadTest.index == 3 && IntelligentRoadTest.currentLocation == "sector"
                && IntelligentRoadTest.sectorCompleteVM.sectorData.enodeb_id == clickSector[0].statn_id
                && IntelligentRoadTest.sectorCompleteVM.sectorData.cell_id == clickSector[0].cell_id && IntelligentRoadTest.isClickGrid == true) {
                IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
                IntelligentRoadTest.isClickGrid = true;
                IntelligentRoadTest.getSectorMessageById(clickSector[0].statn_id, clickSector[0].cell_id, IntelligentRoadTest.day);//跳转到扇区详情页
            } else {
                IntelligentRoadTest.getSectorMessageById(clickSector[0].statn_id, clickSector[0].cell_id, IntelligentRoadTest.day);//跳转到扇区详情页
            }

        } else if (clickCovSector.length == 1) {
            //如果是当前正在查看的MOD3/越区/重叠，不执行查询
            if (clickCovSector[0].type == 2) {//室外基站
                var p = clickCovSector[0].points[0];
                var pointsArr = clickCovSector[0].points;
                pointsArr.push(p);
                IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(pointsArr, 2, 'sector');//高亮多边形
            } else {//室内基站
                IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(clickCovSector[0], 1, 'sector');//高亮多边形
            }
            //跳转到越区、mod3、重叠的详情页数据
            var clickCovObj = IntelligentRoadTestSystemLayerV3.poorArea[clickCovSector[0].scene];
            IntelligentRoadTestSystemLayerV3.setPoorAreaObj(clickCovObj.index);//初始化当前查看的专题扇区详情页标识
            if (IntelligentRoadTest.index == clickCovObj.index && IntelligentRoadTest.currentLocation == clickCovSector[0].scene
                && IntelligentRoadTest.sectorCompleteVM.sectorData.enodeb_id == clickCovSector[0].statn_id
                && IntelligentRoadTest.sectorCompleteVM.sectorData.cell_id == clickCovSector[0].cell_id && IntelligentRoadTest.isClickGrid == false) {
                IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);//当前正在查看专题扇区详情页，不需要跳转
                return;
            } else if (IntelligentRoadTest.index == clickCovObj.index && IntelligentRoadTest.currentLocation == clickCovSector[0].scene
                && IntelligentRoadTest.sectorCompleteVM.sectorData.enodeb_id == clickCovSector[0].statn_id
                && IntelligentRoadTest.sectorCompleteVM.sectorData.cell_id == clickCovSector[0].cell_id && IntelligentRoadTest.isClickGrid == true) {
                IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
                IntelligentRoadTest.isClickGrid = true;
                IntelligentRoadTest.getSectorMessageById(clickCovSector[0].statn_id, clickCovSector[0].cell_id, IntelligentRoadTest.day);
            } else {
                IntelligentRoadTest.getSectorMessageById(clickCovSector[0].statn_id, clickCovSector[0].cell_id, IntelligentRoadTest.day);
            }

        } else if (clickpoorArea.length == 1 || clickPoor.length == 1) {
            var clickpoorArray = clickpoorArea;
            if (clickPoor.length == 1) {
                clickpoorArray = clickPoor;
            }
            //如果是当前正在查看的弱区，不执行查询
            var clickpoorAreaObj = IntelligentRoadTestSystemLayerV3.poorArea[clickpoorArray[0].scene];
            IntelligentRoadTestSystemLayerV3.setPoorAreaObj(clickpoorAreaObj.index);
            if (IntelligentRoadTest.index == clickpoorAreaObj.index && IntelligentRoadTest.currentLocation == clickpoorArray[0].scene
                && IntelligentRoadTest.rfgCompleteVM.poorAreaData.object_id == clickpoorArray[0].object_id && IntelligentRoadTest.isClickGrid == false) {
                IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
                return;
            } else if (IntelligentRoadTest.index == clickpoorAreaObj.index && IntelligentRoadTest.currentLocation == clickpoorArray[0].scene
                && IntelligentRoadTest.rfgCompleteVM.poorAreaData.object_id == clickpoorArray[0].object_id && IntelligentRoadTest.isClickGrid == true) {
                IntelligentRoadTest.isClickGrid = false;
                //弱区点击，呈现栅格,跳转到详细信息
                IntelligentRoadTest.getPoorAreaMessageById(clickpoorArray[0].object_id, IntelligentRoadTest.day);
            } else {
                //弱区点击，呈现栅格,跳转到详细信息
                IntelligentRoadTest.getPoorAreaMessageById(clickpoorArray[0].object_id, IntelligentRoadTest.day);
            }

        } else if (clickSceneArea.length == 1) {
            if (IntelligentRoadTest.showSceneAreaId == "concern") {
                //如果是当前正在查看的关注区域，不执行查询
                if (IntelligentRoadTest.index == 1 && IntelligentRoadTest.currentLocation == "concern"
                    && IntelligentRoadTest.concernAreaCompleteVM.concernAreaData.id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == false) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 1 && IntelligentRoadTest.currentLocation == "concern"
                    && IntelligentRoadTest.concernAreaCompleteVM.concernAreaData.id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getConcernAreaMessageById(clickSceneArea[0].id);
                    // IntelligentRoadTest.index = 1;
                } else {
                    //关注区域点击，呈现栅格,需要跳转到详细页
                    IntelligentRoadTest.getConcernAreaMessageById(clickSceneArea[0].id);
                }
            }
            if (IntelligentRoadTest.showSceneAreaId == "bone") {
                //如果是当前正在查看的骨头区域，不执行查询
                if (IntelligentRoadTest.index == 5 && IntelligentRoadTest.currentLocation == "boneArea"
                    && IntelligentRoadTest.boneAreaCompleteVM.boneAreaData.id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 5 && IntelligentRoadTest.currentLocation == "boneArea"
                    && IntelligentRoadTest.boneAreaCompleteVM.boneAreaData.id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getBoneAreaMessageById(clickSceneArea[0].id);
                } else {
                    //骨头区域点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getBoneAreaMessageById(clickSceneArea[0].id);
                }
            }

            if (IntelligentRoadTest.showSceneAreaId == "highColleges") {
                //如果是当前正在查看的高校，不执行查询
                if (IntelligentRoadTest.index == 10 && IntelligentRoadTest.currentLocation == "college"
                    && IntelligentRoadTest.collegeCompleteVM.collegeData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 10 && IntelligentRoadTest.currentLocation == "college"
                    && IntelligentRoadTest.collegeCompleteVM.collegeData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(1, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');//表示通过地图图层点击过去
                } else {
                    //高校点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(1, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                }
            }
            if (IntelligentRoadTest.showSceneAreaId == "venues") {
                //如果是当前正在查看的场馆，不执行查询
                if (IntelligentRoadTest.index == 19 && IntelligentRoadTest.currentLocation == "site"
                    && IntelligentRoadTest.siteCompleteVM.siteData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 19 && IntelligentRoadTest.currentLocation == "site"
                    && IntelligentRoadTest.siteCompleteVM.siteData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(10, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                } else {
                    //场馆点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(10, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                }
            }
            if (IntelligentRoadTest.showSceneAreaId == "beautyFood") {
                //如果是当前正在查看的美食，不执行查询
                if (IntelligentRoadTest.index == 18 && IntelligentRoadTest.currentLocation == "food"
                    && IntelligentRoadTest.foodCompleteVM.foodData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 18 && IntelligentRoadTest.currentLocation == "food"
                    && IntelligentRoadTest.foodCompleteVM.foodData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(9, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                } else {
                    //美食点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(9, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                }
            }
            if (IntelligentRoadTest.showSceneAreaId == "beautyScenery") {
                //如果是当前正在查看的美景，不执行查询
                if (IntelligentRoadTest.index == 12 && IntelligentRoadTest.currentLocation == "scenery"
                    && IntelligentRoadTest.sceneryCompleteVM.sceneryData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 12 && IntelligentRoadTest.currentLocation == "scenery"
                    && IntelligentRoadTest.sceneryCompleteVM.sceneryData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(7, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                } else {
                    //美景点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(7, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                }
            }
            if (IntelligentRoadTest.showSceneAreaId == "wolfArea") {
                //如果是当前正在查看的战狼区域，不执行查询
                if (IntelligentRoadTest.index == 16 && IntelligentRoadTest.currentLocation == "warwolf"
                    && IntelligentRoadTest.warwolfCompleteVM.warwolfData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 16 && IntelligentRoadTest.currentLocation == "warwolf"
                    && IntelligentRoadTest.warwolfCompleteVM.warwolfData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(3, clickSceneArea[0].id, IntelligentRoadTest.day, 'map', true);
                } else {
                    //战狼区域点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(3, clickSceneArea[0].id, IntelligentRoadTest.day, 'map', true);
                }
            }
            if (IntelligentRoadTest.showSceneAreaId == "farmerMarket") {
                //如果是当前正在查看的农贸市场，不执行查询
                if (IntelligentRoadTest.index == 17 && IntelligentRoadTest.currentLocation == "market"
                    && IntelligentRoadTest.marketCompleteVM.marketData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 17 && IntelligentRoadTest.currentLocation == "market"
                    && IntelligentRoadTest.marketCompleteVM.marketData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(8, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                } else {
                    //农贸市场点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(8, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                }
            }
            if (IntelligentRoadTest.showSceneAreaId == "highResidence") {
                //如果是当前正在查看的高密度住宅区，不执行查询
                if (IntelligentRoadTest.index == 9 && IntelligentRoadTest.currentLocation == "uptown"
                    && IntelligentRoadTest.uptownCompleteVM.uptownData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 9 && IntelligentRoadTest.currentLocation == "uptown"
                    && IntelligentRoadTest.uptownCompleteVM.uptownData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(2, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                } else {
                    //高密度住宅区点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(2, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                }
            }
            if (IntelligentRoadTest.showSceneAreaId == "highBusiness") {
                //如果是当前正在查看的高流量商务区，不执行查询
                if (IntelligentRoadTest.index == 11 && IntelligentRoadTest.currentLocation == "business"
                    && IntelligentRoadTest.businessCompleteVM.businessData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 11 && IntelligentRoadTest.currentLocation == "business"
                    && IntelligentRoadTest.businessCompleteVM.businessData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(3, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                } else {
                    //高流量商务区点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(3, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                }
            }
            if (IntelligentRoadTest.showSceneAreaId == "cityVillage") {
                //如果是当前正在查看的城中村，不执行查询
                if (IntelligentRoadTest.index == 21 && IntelligentRoadTest.currentLocation == "cityVillage"
                    && IntelligentRoadTest.senseCompleteVM.senseData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 21 && IntelligentRoadTest.currentLocation == "cityVillage"
                    && IntelligentRoadTest.senseCompleteVM.senseData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(12, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                } else {
                    //城中村点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(12, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                }
            }
            if (IntelligentRoadTest.showSceneAreaId == "school") {
                //如果是当前正在查看的中小学，不执行查询
                if (IntelligentRoadTest.index == 20 && IntelligentRoadTest.currentLocation == "school"
                    && IntelligentRoadTest.senseCompleteVM.senseData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 20 && IntelligentRoadTest.currentLocation == "school"
                    && IntelligentRoadTest.senseCompleteVM.senseData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(11, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                } else {
                    //中小学点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(11, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                }
            }
            if (IntelligentRoadTest.showSceneAreaId == "village") {
                //如果是当前正在查看的自然村，不执行查询
                if (IntelligentRoadTest.index == 22 && IntelligentRoadTest.currentLocation == "village"
                    && IntelligentRoadTest.senseCompleteVM.senseData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 22 && IntelligentRoadTest.currentLocation == "village"
                    && IntelligentRoadTest.senseCompleteVM.senseData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(13, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                } else {
                    //自然村点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(13, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                }
            }
            if (IntelligentRoadTest.showSceneAreaId == "factory") {
                //如果是当前正在查看的工厂，不执行查询
                if (IntelligentRoadTest.index == 23 && IntelligentRoadTest.currentLocation == "factory"
                    && IntelligentRoadTest.senseCompleteVM.senseData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 23 && IntelligentRoadTest.currentLocation == "factory"
                    && IntelligentRoadTest.senseCompleteVM.senseData.esbh_id == clickSceneArea[0].id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(14, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                } else {
                    //工厂点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(14, clickSceneArea[0].id, IntelligentRoadTest.day, 'map');
                }
            }


        } else if (clickGrid.length == 1) {
            var maxLng = clickGrid[0][2];
            var maxLat = clickGrid[0][3];
            var minLng = clickGrid[0][0];
            var minLat = clickGrid[0][1];
            var midLng = (parseFloat(maxLng) + parseFloat(minLng)) / 2;
            var midLat = (parseFloat(maxLat) + parseFloat(minLat)) / 2;
            var centerPoint = new BMap.Point(midLng, midLat);
            // IntelligentRoadTest.showGridMrNrTop5CellForMap(centerPoint,clickGrid[0][7]);//centerPoint,sector_set
            var points = [
                new BMap.Point(minLng, minLat),
                new BMap.Point(maxLng, minLat),
                new BMap.Point(maxLng, maxLat),
                new BMap.Point(minLng, maxLat),
                new BMap.Point(minLng, minLat)];
            IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(points, 2, 'grid');
            if (IntelligentRoadTest.isClickGrid && IntelligentRoadTest.gridVM.gridData.grid_id == clickGrid[0][5]) {
                IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
                return;
            } else {
                IntelligentRoadTest.getGridDataByGridId(clickGrid[0]);//获取栅格的详细数据
                IntelligentRoadTest.getSeventDayDataByGridId(clickGrid[0][5]);//获取栅格历史7天的覆盖率
                IntelligentRoadTest.goGridCompleteMessage();
            }

        } else if (clickObjectGrid.length == 1) {
            var maxLng = clickObjectGrid[0][2];
            var maxLat = clickObjectGrid[0][3];
            var minLng = clickObjectGrid[0][0];
            var minLat = clickObjectGrid[0][1];
            var midLng = (parseFloat(maxLng) + parseFloat(minLng)) / 2;
            var midLat = (parseFloat(maxLat) + parseFloat(minLat)) / 2;
            var centerPoint = new BMap.Point(midLng, midLat);
            // IntelligentRoadTest.showGridMrNrTop5CellForMap(centerPoint,clickObjectGrid[0][7]);//centerPoint,sector_set
            var points = [
                new BMap.Point(minLng, minLat),
                new BMap.Point(maxLng, minLat),
                new BMap.Point(maxLng, maxLat),
                new BMap.Point(minLng, maxLat),
                new BMap.Point(minLng, minLat)];
            IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(points, 2, 'grid');
            if (IntelligentRoadTest.isClickGrid && IntelligentRoadTest.gridVM.gridData.grid_id == clickObjectGrid[0][5]) {
                IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
                return;
            } else {
                IntelligentRoadTest.getGridDataByGridId(clickObjectGrid[0]);//获取栅格的详细数据
                IntelligentRoadTest.getSeventDayDataByGridId(clickObjectGrid[0][5]);//获取栅格历史7天的覆盖率
                IntelligentRoadTest.goGridCompleteMessage();
            }

        } else if (polygonLayer.length == 1) {
            if (polygonLayer[0].obj_type == "concern") {
                //如果是当前正在查看的关注区域，不执行查询
                if (IntelligentRoadTest.index == 1 && IntelligentRoadTest.currentLocation == "concern"
                    && IntelligentRoadTest.concernAreaCompleteVM.concernAreaData.id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == false) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 1 && IntelligentRoadTest.currentLocation == "concern"
                    && IntelligentRoadTest.concernAreaCompleteVM.concernAreaData.id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getConcernAreaMessageById(polygonLayer[0].obj_id);
                } else {
                    //关注区域点击，呈现栅格,需要跳转到详细页
                    IntelligentRoadTest.getConcernAreaMessageById(polygonLayer[0].obj_id);
                }
            }

            if (polygonLayer[0].obj_type == "boneArea") {
                //如果是当前正在查看的骨头区域，不执行查询
                if (IntelligentRoadTest.index == 5 && IntelligentRoadTest.currentLocation == "boneArea"
                    && IntelligentRoadTest.boneAreaCompleteVM.boneAreaData.id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 5 && IntelligentRoadTest.currentLocation == "boneArea"
                    && IntelligentRoadTest.boneAreaCompleteVM.boneAreaData.id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getBoneAreaMessageById(polygonLayer[0].obj_id);
                    // IntelligentRoadTest.index =  5;
                } else {
                    //骨头区域点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getBoneAreaMessageById(polygonLayer[0].obj_id);
                }
            }

            if (polygonLayer[0].obj_type == "college") {
                //如果是当前正在查看的高校，不执行查询
                if (IntelligentRoadTest.index == 10 && IntelligentRoadTest.currentLocation == "college"
                    && IntelligentRoadTest.collegeCompleteVM.collegeData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 10 && IntelligentRoadTest.currentLocation == "college"
                    && IntelligentRoadTest.collegeCompleteVM.collegeData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(1, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');//表示通过地图图层点击过去
                } else {
                    //高校点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(1, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                }
            }

            if (polygonLayer[0].obj_type == "site") {
                //如果是当前正在查看的场馆，不执行查询
                if (IntelligentRoadTest.index == 19 && IntelligentRoadTest.currentLocation == "site"
                    && IntelligentRoadTest.siteCompleteVM.siteData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 19 && IntelligentRoadTest.currentLocation == "site"
                    && IntelligentRoadTest.siteCompleteVM.siteData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(10, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                } else {
                    //场馆点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(10, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                }
            }

            if (polygonLayer[0].obj_type == "food") {
                //如果是当前正在查看的美食，不执行查询
                if (IntelligentRoadTest.index == 18 && IntelligentRoadTest.currentLocation == "food"
                    && IntelligentRoadTest.foodCompleteVM.foodData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 18 && IntelligentRoadTest.currentLocation == "food"
                    && IntelligentRoadTest.foodCompleteVM.foodData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(9, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                } else {
                    //美食点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(9, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                }
            }

            if (polygonLayer[0].obj_type == "scenery") {
                //如果是当前正在查看的美景，不执行查询
                if (IntelligentRoadTest.index == 12 && IntelligentRoadTest.currentLocation == "scenery"
                    && IntelligentRoadTest.sceneryCompleteVM.sceneryData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 12 && IntelligentRoadTest.currentLocation == "scenery"
                    && IntelligentRoadTest.sceneryCompleteVM.sceneryData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(7, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                } else {
                    //美景点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(7, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                }
            }

            if (polygonLayer[0].obj_type == "warwolf") {
                //如果是当前正在查看的战狼区域，不执行查询
                if (IntelligentRoadTest.index == 16 && IntelligentRoadTest.currentLocation == "warwolf"
                    && IntelligentRoadTest.warwolfCompleteVM.warwolfData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 16 && IntelligentRoadTest.currentLocation == "warwolf"
                    && IntelligentRoadTest.warwolfCompleteVM.warwolfData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(3, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map', true);
                } else {
                    //战狼区域点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(3, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map', true);
                }
            }

            if (polygonLayer[0].obj_type == "market") {
                //如果是当前正在查看的农贸市场，不执行查询
                if (IntelligentRoadTest.index == 17 && IntelligentRoadTest.currentLocation == "market"
                    && IntelligentRoadTest.marketCompleteVM.marketData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 17 && IntelligentRoadTest.currentLocation == "market"
                    && IntelligentRoadTest.marketCompleteVM.marketData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(8, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                } else {
                    //农贸市场点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(8, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                }
            }

            if (polygonLayer[0].obj_type == "uptown") {
                //如果是当前正在查看的高密度住宅区，不执行查询
                if (IntelligentRoadTest.index == 9 && IntelligentRoadTest.currentLocation == "uptown"
                    && IntelligentRoadTest.uptownCompleteVM.uptownData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 9 && IntelligentRoadTest.currentLocation == "uptown"
                    && IntelligentRoadTest.uptownCompleteVM.uptownData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(2, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                } else {
                    //高密度住宅区点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(2, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                }
            }

            if (polygonLayer[0].obj_type == "business") {
                //如果是当前正在查看的高流量商务区，不执行查询
                if (IntelligentRoadTest.index == 11 && IntelligentRoadTest.currentLocation == "business"
                    && IntelligentRoadTest.businessCompleteVM.businessData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 11 && IntelligentRoadTest.currentLocation == "business"
                    && IntelligentRoadTest.businessCompleteVM.businessData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(3, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                } else {
                    //高流量商务区点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(3, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                }
            }

            if (polygonLayer[0].obj_type == "cityVillage") {
                //如果是当前正在查看的城中村，不执行查询
                if (IntelligentRoadTest.index == 21 && IntelligentRoadTest.currentLocation == "cityVillage"
                    && IntelligentRoadTest.businessCompleteVM.businessData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 21 && IntelligentRoadTest.currentLocation == "cityVillage"
                    && IntelligentRoadTest.businessCompleteVM.businessData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(12, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                } else {
                    //城中村点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(12, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                }
            }

            if (polygonLayer[0].obj_type == "school") {
                //如果是当前正在查看的中小学，不执行查询
                if (IntelligentRoadTest.index == 20 && IntelligentRoadTest.currentLocation == "school"
                    && IntelligentRoadTest.businessCompleteVM.businessData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 20 && IntelligentRoadTest.currentLocation == "school"
                    && IntelligentRoadTest.businessCompleteVM.businessData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(11, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                } else {
                    //中小学点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(11, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                }
            }

            if (polygonLayer[0].obj_type == "village") {
                //如果是当前正在查看的自然村，不执行查询
                if (IntelligentRoadTest.index == 22 && IntelligentRoadTest.currentLocation == "village"
                    && IntelligentRoadTest.senseCompleteVM.senseData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 22 && IntelligentRoadTest.currentLocation == "village"
                    && IntelligentRoadTest.senseCompleteVM.senseData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(13, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                } else {
                    //自然村点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(13, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                }
            }
            if (polygonLayer[0].obj_type == "factory") {
                //如果是当前正在查看的工厂，不执行查询
                if (IntelligentRoadTest.index == 23 && IntelligentRoadTest.currentLocation == "factory"
                    && IntelligentRoadTest.senseCompleteVM.senseData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    return;
                } else if (IntelligentRoadTest.index == 23 && IntelligentRoadTest.currentLocation == "factory"
                    && IntelligentRoadTest.senseCompleteVM.senseData.esbh_id == polygonLayer[0].obj_id
                    && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
                    IntelligentRoadTest.isClickGrid = false;
                    IntelligentRoadTest.getSenseDataByESBHID(14, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                } else {
                    //工厂点击，呈现栅格，需要跳转到详细页
                    IntelligentRoadTest.getSenseDataByESBHID(14, polygonLayer[0].obj_id, IntelligentRoadTest.day, 'map');
                }
            }

            if (polygonLayer[0].obj_type == "sector" /!*||polygonLayer[0].obj_type=='m3Sector'
                ||polygonLayer[0].obj_type=='olSector'||polygonLayer[0].obj_type=='cbSector'*!/) {
                //由于扇区已经绑定了事件，因此这里不需要出发进入详情页
                return;
                //如果是当前正在查看的扇区，不执行查询
                if (polygonLayer[0].type == 2) {//室外基站
                    var p = polygonLayer[0].points[0];
                    var pointsArr = polygonLayer[0].points;
                    pointsArr.push(p);
                    IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(pointsArr, 2, 'sector');
                } else {//室内基站
                    IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(polygonLayer[0], 1, 'sector');
                }
                var sceneString = polygonLayer[0].obj_type;
                var clickSectorObj = IntelligentRoadTestSystemLayerV3.poorArea[sceneString];
                if (IntelligentRoadTest.index == clickSectorObj.index && IntelligentRoadTest.currentLocation == sceneString
                    && IntelligentRoadTest.sectorCompleteVM.sectorData.enodeb_id == polygonLayer[0].statn_id
                    && IntelligentRoadTest.sectorCompleteVM.sectorData.cell_id == polygonLayer[0].cell_id && IntelligentRoadTest.isClickGrid == false) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
                    return;
                } else if (IntelligentRoadTest.index == clickSectorObj.index && IntelligentRoadTest.currentLocation == sceneString
                    && IntelligentRoadTest.sectorCompleteVM.sectorData.enodeb_id == polygonLayer[0].statn_id
                    && IntelligentRoadTest.sectorCompleteVM.sectorData.cell_id == polygonLayer[0].cell_id && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
                    IntelligentRoadTest.isClickGrid = true;
                    IntelligentRoadTest.getSectorMessageById(polygonLayer[0].statn_id, polygonLayer[0].cell_id, IntelligentRoadTest.day);
                } else {
                    IntelligentRoadTest.getSectorMessageById(polygonLayer[0].statn_id, polygonLayer[0].cell_id, IntelligentRoadTest.day);
                }
            }
            if (polygonLayer[0].obj_type == 'm3Sector' || polygonLayer[0].obj_type == 'olSector' || polygonLayer[0].obj_type == 'cbSector') {
                //如果是当前正在查看的扇区，不执行查询
                if (polygonLayer[0].type == 2) {//室外基站
                    var p = polygonLayer[0].points[0];
                    var pointsArr = polygonLayer[0].points;
                    pointsArr.push(p);
                    IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(pointsArr, 2, 'sector');
                } else {//室内基站
                    IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(polygonLayer[0], 1, 'sector');
                }
                var sceneString = polygonLayer[0].obj_type;
                var clickSectorObj = IntelligentRoadTestSystemLayerV3.poorArea[sceneString];
                if (IntelligentRoadTest.index == clickSectorObj.index && IntelligentRoadTest.currentLocation == sceneString
                    && IntelligentRoadTest.sectorCompleteVM.sectorData.enodeb_id == polygonLayer[0].statn_id
                    && IntelligentRoadTest.sectorCompleteVM.sectorData.cell_id == polygonLayer[0].cell_id && IntelligentRoadTest.isClickGrid == false) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
                    return;
                } else if (IntelligentRoadTest.index == clickSectorObj.index && IntelligentRoadTest.currentLocation == sceneString
                    && IntelligentRoadTest.sectorCompleteVM.sectorData.enodeb_id == polygonLayer[0].statn_id
                    && IntelligentRoadTest.sectorCompleteVM.sectorData.cell_id == polygonLayer[0].cell_id && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
                    IntelligentRoadTest.isClickGrid = true;
                    IntelligentRoadTest.getSectorMessageById(polygonLayer[0].statn_id, polygonLayer[0].cell_id, IntelligentRoadTest.day);
                } else {
                    IntelligentRoadTest.getSectorMessageById(polygonLayer[0].statn_id, polygonLayer[0].cell_id, IntelligentRoadTest.day);
                }
            }

            if (polygonLayer[0].obj_type == "poorArea" || polygonLayer[0].obj_type == 'upPoorArea'
                || polygonLayer[0].obj_type == 'dwPoorArea' || polygonLayer[0].obj_type == 'm3Sector'
                || polygonLayer[0].obj_type == 'olSector' || polygonLayer[0].obj_type == 'cbSector') {//是否会出现不同天，但弱区编号是一样的情况？待处理
                var sceneString = polygonLayer[0].obj_type;
                if (polygonLayer[0].obj_type == "poorArea") {
                    sceneString = "poor";
                }
                //如果是当前正在查看的弱区，不执行查询
                var clickpoorAreaObj = IntelligentRoadTestSystemLayerV3.poorArea[sceneString];
                IntelligentRoadTestSystemLayerV3.setPoorAreaObj(clickpoorAreaObj.index);
                if (IntelligentRoadTest.index == clickpoorAreaObj.index && IntelligentRoadTest.currentLocation == polygonLayer[0].obj_type
                    && IntelligentRoadTest.rfgCompleteVM.poorAreaData.object_id == polygonLayer[0].obj_id && IntelligentRoadTest.isClickGrid == false) {
                    IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
                    return;
                } else if (IntelligentRoadTest.index == clickpoorAreaObj.index && IntelligentRoadTest.currentLocation == polygonLayer[0].obj_type
                    && IntelligentRoadTest.rfgCompleteVM.poorAreaData.object_id == polygonLayer[0].obj_id && IntelligentRoadTest.isClickGrid == true) {
                    IntelligentRoadTest.isClickGrid = false;
                    //弱区点击，呈现栅格,跳转到详细信息
                    IntelligentRoadTest.getPoorAreaMessageById(polygonLayer[0].obj_id, IntelligentRoadTest.day);
                } else {
                    //弱区点击，呈现栅格,跳转到详细信息
                    IntelligentRoadTest.getPoorAreaMessageById(polygonLayer[0].obj_id, IntelligentRoadTest.day);
                }
            }
            if (polygonLayer[0].signs == "addComplainHot" || polygonLayer[0].signs == "addUserComplain") {
                //跳转到【用户抱怨】图层详情页 || 跳转到【抱怨热点】栅格详情页
                if (IntelligentRoadTest.index == 29 && IntelligentRoadTest.currentLocation == "userComplain"
                    && IntelligentRoadTest.userComplainCompleteVM.userComplain.workorder_id == polygonLayer[0].id) {
                    console.log("已经在工单或抱怨热点详情页");
                    return;
                } else {
                    if (IntelligentRoadTest.userComplainVM == null) {
                        IntelligentRoadTest.dealQueryAllUserComplain([]);
                        IntelligentRoadTest.userComplainVM.showMessage(polygonLayer[0].val, null);
                    } else {
                        IntelligentRoadTest.userComplainVM.showMessage(polygonLayer[0].val, null);
                    }
                    IntelligentRoadTest.index = 29;
                }
            }

            if (polygonLayer[0].obj_type == "poorAreaDashed") {//虚线框弱区，暂时不包含分屏对比中的虚线弱区，只做工单中的虚线弱区
                if (!polygonLayer[0].isDashLine) {//是虚框的时候，说明当前的弱区虚框不是生成的时间
                    IntelligentRoadTest.getPoorAreaMessageById(polygonLayer[0].obj_id, IntelligentRoadTest.day, true);
                } else {
                    var obj = {};
                    obj.overlay = {};
                    obj.overlay = new BMap.Polygon(polygonLayer[0].points);
//                    var obj = IntelligentRoadTest.getBaiduPolygonObj(poorAreaData.gis_data);
                    IntelligentRoadTest.overlaycomplete(obj, false);
                    IntelligentRoadTest.goSaveAreaCompleteMessage();
                }
            }

            if (polygonLayer[0].obj_type == "boxSelect") {//自定义框选，点击时，需要进入框选详情页
                if (IntelligentRoadTest.SelectionE) {
                    IntelligentRoadTest.overlaycomplete(IntelligentRoadTest.SelectionE, false);
                }
                if (IntelligentRoadTest.SelectionOverlay) {
                    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.SelectionOverlay);
                }
            }
        }

        $('.packList').attr("title", "收起列表");
        $('.packList').children().addClass('rotatePackImg');
        $('.packList').children().attr("src", "../js/IntelligentRoadTestV3/images/pack_top.png");

        $(".listDiv .detailList").each(function () {
            if ($(this).is(":visible")) {
                $(this).slideUp();
                $(this).slideDown();
            }
        });

        IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
        return;
    }

    var clickResultStr = '';
    if (clickSector.length > 0) {
        IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
        for (var i = 0; i < clickSector.length; i++) {
            var clickid = clickSector[i].statn_id + '_' + clickSector[i].cell_id;
            clickResultStr += '<li type="sector" clickid="' + clickid + '"><span></span><span >' + clickSector[i].statn_id + '_' + clickSector[i].cell_id + '</span><span>扇区</span></li>';
        }
    }

    if (clickCovSector.length > 0) {//匹配到多个专题扇区
        IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
        for (var i = 0; i < clickCovSector.length; i++) {
            var clickid = clickCovSector[i].statn_id + '_' + clickCovSector[i].cell_id;
            var clickCovObj = IntelligentRoadTestSystemLayerV3.poorArea[clickCovSector[i].scene];
            var lable = clickCovObj.name;
            clickResultStr += '<li name="' + clickCovSector[i].scene + '" type="covSector" clickid="' + clickid + '"><span></span><span >' + clickCovSector[i].statn_id + '_' + clickCovSector[i].cell_id + '</span><span>' + lable + '</span></li>';
        }
    }

    if (clickpoorArea.length > 0) {
        IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
        for (var i = 0; i < clickpoorArea.length; i++) {
            //  // var plyM = {type:2,points:pointArr,decide:1,object_id:object_id};
            var clickid = clickpoorArea[i].object_id;
            var clickpoorAreaObj = IntelligentRoadTestSystemLayerV3.poorArea[clickpoorArea[i].scene];
            var lable = clickpoorAreaObj.name;
            clickResultStr += '<li name="' + clickpoorArea[i].scene + '" type="poorArea" clickid="' + clickid + '"><span></span><span>' + clickpoorArea[i].object_id + '</span><span>' + lable + '</span></li>';
        }
    }

    if (clickPoor.length > 0) {
        IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
        for (var i = 0; i < clickPoor.length; i++) {
            //  // var plyM = {type:2,points:pointArr,decide:1,object_id:object_id};
            var clickid = clickPoor[i].object_id;
            var clickpoorAreaObj = IntelligentRoadTestSystemLayerV3.poorArea[clickPoor[i].scene];
            var lable = clickpoorAreaObj.name;
            clickResultStr += '<li name="' + clickPoor[i].scene + '" type="poor" clickid="' + clickid + '"><span></span><span>' + clickPoor[i].object_id + '</span><span>' + lable + '</span></li>';
        }
    }

    if (clickSceneArea.length > 0) {
        IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
        var clickIds = [];
        for (var i = 0; i < clickSceneArea.length; i++) {
            var flag = true;
            var clickid = clickSceneArea[i].id;
            var lable = IntelligentRoadTestScreenCompared.getObjTypeByString(clickSceneArea[i].scene);
            for (var k = 0; k < clickIds.length; k++) {
                if (clickid == clickIds[k]) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                clickIds.push(clickid);
                //var plyM = {type:2,points:pointArr,decide:1,id:id,name:name,scene:scene};
                clickResultStr += '<li name="' + clickSceneArea[i].scene + '" type="scene" clickid="' + clickid + '"><span>' + clickSceneArea[i].name + '</span><span>' + clickSceneArea[i].id + '</span><span>' + lable + '</span></li>';
            }
        }
    }

    if (clickGrid.length > 0) {
        IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
        for (var i = 0; i < clickGrid.length; i++) {
            //var dataChe = [minLng,minLat,maxLng,maxLat,rsrp_avg,grid_num,agps_count,sector_set,
            // dxrsrpAvg,rsrp_avgM,rsrp_avgU,monthrelate,dx_cover,yd_cover,lt_cover];
            var clickid = clickGrid[i][5];
            clickResultStr += '<li type="grid" clickid="' + clickid + '"><span></span><span>' + clickGrid[i][5] + '</span><span>弱区栅格</span></li>';
        }
    }

    if (clickObjectGrid.length > 0) {
        IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', true);
        for (var i = 0; i < clickObjectGrid.length; i++) {
            //var dataChe = [minLng,minLat,maxLng,maxLat,rsrp_avg,grid_num,agps_count,sector_set,
            // dxrsrpAvg,rsrp_avgM,rsrp_avgU,monthrelate,dx_cover,yd_cover,lt_cover];
            var clickid = clickObjectGrid[i][5];
            clickResultStr += '<li type="objectGrid" clickid="' + clickid + '"><span></span><span>' + clickObjectGrid[i][5] + '</span><span>对象栅格</span></li>';
        }
    }

    if (polygonLayer.length > 0) {
        IntelligentRoadTest.searchShowMkLable(e.point.lng, e.point.lat, '', 3);
        var clickIds = [];
        for (var i = 0; i < polygonLayer.length; i++) {
            var lable = IntelligentRoadTestScreenCompared.getObjTypeByString(polygonLayer[i].obj_type);
            if (polygonLayer[i].obj_type == 'sector') {
                var polygonLayersSectorHasAdd = false;//当前的这个扇区是否已经在扇区图层添加了点击命中
                for (var j = 0; j < clickSector.length; j++) {
                    if (polygonLayer[i].statn_id == clickSector[j].statn_id && polygonLayer[i].cell_id == clickSector[j].cell_id) {
                        polygonLayersSectorHasAdd = true;
                    }
                }
                //当前的这个扇区没有在扇区图层命中
                if(!polygonLayersSectorHasAdd){
                    //当前点击的扇区和图层匹配到的扇区相同，当前注册的不需要进行列表显示
                    var clickid = polygonLayer[i].statn_id + '_' + polygonLayer[i].cell_id;
                    clickResultStr += '<li type="sector" clickid="' + clickid + '"><span></span><span >' + polygonLayer[i].statn_id + '_' + polygonLayer[i].cell_id + '</span><span>扇区</span></li>';
                }

            } else if (polygonLayer[i].obj_type == 'm3Sector'
                || polygonLayer[i].obj_type == 'olSector' || polygonLayer[i].obj_type == 'cbSector') {
                for (var j = 0; j < clickCovSector.length; j++) {
                    if (polygonLayer[i].statn_id != clickCovSector[j].statn_id && polygonLayer[i].cell_id != clickCovSector[j].cell_id) {
                        //当前点击的扇区和图层匹配到的扇区相同，当前注册的不需要进行列表显示
                        var clickid = polygonLayer[i].statn_id + '_' + polygonLayer[i].cell_id;
                        clickResultStr += '<li name="' + polygonLayer[i].obj_type + '" type="polygonLayer" clickid="' + clickid + '"><span></span><span >' + polygonLayer[i].statn_id + '_' + polygonLayer[i].cell_id + '</span><span>' + lable + '</span></li>';
                    }
                }
            } else if (polygonLayer[i].obj_type == 'poorArea') {
                for (var j = 0; j < clickPoor.length; j++) {
                    if (clickPoor[j].object_id != polygonLayer[i].obj_id) {
                        clickResultStr += '<li name="' + polygonLayer[i].obj_type + '" type="polygonLayer" clickid="' + clickid + '"><span>' + polygonLayer[i].name + '</span><span>' + polygonLayer[i].obj_id + '</span><span>' + lable + '</span></li>';
                    }
                }
            } else if (polygonLayer[i].obj_type == 'upPoorArea'
                || polygonLayer[i].obj_type == 'dwPoorArea' || polygonLayer[i].obj_type == 'm3PoorArea'
                || polygonLayer[i].obj_type == 'olPoorArea' || polygonLayer[i].obj_type == 'cbPoorArea') {
                for (var j = 0; j < clickpoorArea.length; j++) {
                    if (clickpoorArea[j].object_id != polygonLayer[i].obj_id && clickpoorArea[j].scene != polygonLayer[i].obj_type) {
                        clickResultStr += '<li name="' + polygonLayer[i].obj_type + '" type="polygonLayer" clickid="' + clickid + '"><span>' + polygonLayer[i].name + '</span><span>' + polygonLayer[i].obj_id + '</span><span>' + lable + '</span></li>';
                    }
                }
            } else if (polygonLayer[i].signs == 'addUserComplain' || polygonLayer[i].signs == 'addComplainHot') {
                clickResultStr += '<li name="' + polygonLayer[i].signs + '" type="polygonLayer" clickid="' + polygonLayer[i].id + '"><span>' + polygonLayer[i].workOrder + '</span><span>' + polygonLayer[i].id + '</span><span>' + polygonLayer[i].workType + '</span></li>';
            } else {
                /!**
                 for(var j=0;j<clickSceneArea.length;j++){
        			if(clickSceneArea[j].scene!=polygonLayer[i].obj_type){//将地图图层匹配到的结果和注册的进行去重
        				var flag=true;
                        var clickid = polygonLayer[i].obj_id;
                        for(var k=0;k<clickIds.length;k++){
                        	if(clickid==clickIds[k]){
                        		flag=false;
                        		break;
                        	}
                        }
                        if(flag){
                        	clickIds.push(clickid);
            	            //var plyM = {type:2,points:pointArr,decide:1,id:id,name:name,scene:scene};
            	            clickResultStr += '<li name="'+polygonLayer[i].obj_type+'" type="polygonLayer" clickid="'+clickid+'"><span>'+polygonLayer[i].name+'</span><span>'+polygonLayer[i].obj_id+'</span><span>'+lable+'</span></li>';
                        }
        			}
        		}*!/

                var flag = true;
                var clickid = polygonLayer[i].obj_id;
                if (polygonLayer[i].obj_type == "userComplain") {
                    flag = false;
                } else {
                    for (var k = 0; k < clickIds.length; k++) {
                        if (clickid == clickIds[k]) {
                            flag = false;
                            break;
                        }
                    }
                }

                if (flag) {
                    clickIds.push(clickid);
                    //var plyM = {type:2,points:pointArr,decide:1,id:id,name:name,scene:scene};
                    clickResultStr += '<li name="' + polygonLayer[i].obj_type + '" type="polygonLayer" clickid="' + clickid + '"><span>' + polygonLayer[i].name + '</span><span>' + polygonLayer[i].obj_id + '</span><span>' + lable + '</span></li>';
                }
            }

        }
    }


    if (clickResultStr == '') {
        $('#mapClickResult').html('点击位置匹配不到数据');
        $('#mapClickResult').hide();
    } else {
        //如果站间距的图层存在，则清除图层并将变量置空
        if (IntelligentRoadTest.sectorCircleCanvas != null) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.sectorCircleCanvas); //清除圆圈
            IntelligentRoadTest.sectorCircleCanvas = null;
        }
        $('#mapClickResult').html(clickResultStr);
        setTimeout(function () {
            if ($('#mapClickResult li').length > 1) {
                $('#mapClickResult').show();
                $(".listDiv .detailList").each(function () {
                    if ($(this).is(":visible")) {
                        $(this).slideUp();
                        $('.packList').attr("title", "打开列表");
                        $('.packList').children().removeClass('rotatePackImg');
                        $('.packList').children().attr("src", "../js/IntelligentRoadTestV3/images/pack_down.png");
                    }
                });
            }
        }, 100);

    }


    $('#mapClickResult li').unbind("mouseover").bind("mouseover", function () {
        var type = $(this).attr('type');
        var liClickid = $(this).attr('clickid');
        var resultList = IntelligentRoadTest.clickResultChe[type];
        if (type == "sector") {
            var bst_id = liClickid.split('_')[0];
            var cell_id = liClickid.split('_')[1];
            for (var i = 0; i < resultList.length; i++) {
                //扇区着重提示
                if (resultList[i].statn_id == bst_id && resultList[i].cell_id == cell_id) {
                    if (resultList[i].type == 2) {//室外基站
                        var p = resultList[i].points[0];
                        var pointsArr = [].concat(resultList[i].points);
                        pointsArr.push(p);
                        IntelligentRoadTest.showClickObjectPolyline(pointsArr, 2);
                    } else {//室内基站
                        IntelligentRoadTest.showClickObjectPolyline(resultList[i], 1);
                    }

                    break;
                }
            }

            // IntelligentRoadTest.sectorCompent.MapClickEvent(e,IntelligentRoadTest.sectorCompent);
        } else if (type == "covSector") {//mod3、重叠、越区
            for (var i = 0; i < resultList.length; i++) {
                //扇区着重提示
                if ((resultList[i].statn_id + '_' + resultList[i].cell_id) == liClickid) {
                    if (resultList[i].type == 2) {//室外基站
                        var p = resultList[i].points[0];
                        var pointsArr = [].concat(resultList[i].points);
                        pointsArr.push(p);
                        IntelligentRoadTest.showClickObjectPolyline(pointsArr, 2);
                    } else {//室内基站
                        IntelligentRoadTest.showClickObjectPolyline(resultList[i], 1);
                    }

                    break;
                }
            }
        } else if (type == "poor" || type == "poorArea") {
            for (var i = 0; i < resultList.length; i++) {
                if (resultList[i].object_id == liClickid) {
                    //弱区着重提示
                    IntelligentRoadTest.showClickObjectPolyline(resultList[i].points, 2);
                    break;
                }
            }

        } else if (type == "scene") {
            for (var i = 0; i < resultList.length; i++) {
                if (resultList[i].id == liClickid) {
                    //场景着重提示
                    var p = resultList[i].points[0];
                    var pointsArr = resultList[i].points
                    pointsArr.push(p);
                    IntelligentRoadTest.showClickObjectPolyline(pointsArr, 2);
                    break;
                }
            }

        } else if (type == "grid" || type == "objectGrid") {
            for (var i = 0; i < resultList.length; i++) {
                if (resultList[i][5] == liClickid) {
                    //栅格着重提示
                    //var dataChe = [minLng,minLat,maxLng,maxLat,rsrp_avg,grid_num,agps_count,sector_set,
                    // dxrsrpAvg,rsrp_avgM,rsrp_avgU,monthrelate,dx_cover,yd_cover,lt_cover];
                    var maxLng = resultList[i][2];
                    var maxLat = resultList[i][3];
                    var minLng = resultList[i][0];
                    var minLat = resultList[i][1];
                    var points = [
                        new BMap.Point(minLng, minLat),
                        new BMap.Point(maxLng, minLat),
                        new BMap.Point(maxLng, maxLat),
                        new BMap.Point(minLng, maxLat),
                        new BMap.Point(minLng, minLat)];
                    IntelligentRoadTest.showClickObjectPolyline(points, 2);
                    break;
                }
            }
        } else if (type == "polygonLayer") {
            var obj_type = $(this).attr('name');
            for (var i = 0; i < resultList.length; i++) {
                if (obj_type == 'sector' || obj_type == 'm3Sector' || obj_type == 'olSector' || obj_type == 'cbSector') {
                    if (obj_type == resultList[i].obj_type) {
                        var bst_id = liClickid.split('_')[0];
                        var cell_id = liClickid.split('_')[1];
                        for (var i = 0; i < resultList.length; i++) {
                            //扇区着重提示
                            if (resultList[i].statn_id == bst_id && resultList[i].cell_id == cell_id) {
                                if (resultList[i].type == 2) {//室外基站
                                    var p = resultList[i].points[0];
                                    var pointsArr = [].concat(resultList[i].points);
                                    pointsArr.push(p);
                                    IntelligentRoadTest.showClickObjectPolyline(pointsArr, 2);
                                } else {//室内基站
                                    IntelligentRoadTest.showClickObjectPolyline(resultList[i], 1);
                                }

                                break;
                            }
                        }
                    }
                } else if (obj_type == "addUserComplain" && obj_type == resultList[i].signs && resultList[i].id == liClickid) {//全量工单、越级工单
                    IntelligentRoadTest.showClickObjectPolyline(resultList[i], 3);
                    break;
                } else if (obj_type == "addComplainHot" && obj_type == resultList[i].signs && resultList[i].id == liClickid) {//抱怨热点
                    var p = resultList[i].points[0];
                    var pointsArr = [].concat(resultList[i].points);
                    pointsArr.push(p);
                    IntelligentRoadTest.showClickObjectPolyline(pointsArr, 2);
                    break;
                } else {
                    if (resultList[i].obj_id == liClickid && resultList[i].obj_type == obj_type) {
                        var p = resultList[i].points[0];
                        var pointsArr = [].concat(resultList[i].points);
                        pointsArr.push(p);
                        IntelligentRoadTest.showClickObjectPolyline(pointsArr, 2);
                        break;
                    }
                }

            }
        }

        // console.log("鼠标移入类型:"+type);
    });

    $('#mapClickResult li').unbind("mouseout").bind("mouseout", function () {
        var type = $(this).attr('type');
        if (IntelligentRoadTest.objectPolyline != null) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.objectPolyline);
        }
        // console.log("鼠标移出类型:"+type);
    });

    $('#mapClickResult li').unbind("click").bind("click", function () {
        var type = $(this).attr('type');
        var liClickid = $(this).attr('clickid');
        var resultList = IntelligentRoadTest.clickResultChe[type];
        if (type == "sector") {
            var bst_id = liClickid.split('_')[0];
            var cell_id = liClickid.split('_')[1];
            for (var i = 0; i < resultList.length; i++) {
                //扇区点击，跳转到详细页，需要加载栅格
                if (resultList[i].statn_id == bst_id && resultList[i].cell_id == cell_id) {
                    if (resultList[i].type == 2) {//室外基站
                        var p = resultList[i].points[0];
                        var pointsArr = resultList[i].points
                        pointsArr.push(p);
                        IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(pointsArr, 2, 'sector');
                    } else {//室内基站
                        IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(resultList[i], 1, 'sector');
                    }
                    IntelligentRoadTestSystemLayerV3.setPoorAreaObj(3);
                    IntelligentRoadTest.getSectorMessageById(resultList[i].statn_id, resultList[i].cell_id, IntelligentRoadTest.day);
                    IntelligentRoadTest.index == 3;
                    break;
                }
            }

            // IntelligentRoadTest.sectorCompent.MapClickEvent(e,IntelligentRoadTest.sectorCompent);
        } else if (type == "covSector") {
            for (var i = 0; i < resultList.length; i++) {
                //mod3/重叠/越区点击，跳转到详细页，需要加载栅格
                if ((resultList[i].statn_id + '_' + resultList[i].cell_id) == liClickid) {
                    if (resultList[i].type == 2) {//室外基站
                        var p = resultList[i].points[0];
                        var pointsArr = resultList[i].points
                        pointsArr.push(p);
                        IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(pointsArr, 2, 'sector');
                    } else {//室内基站
                        IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(resultList[i], 1, 'sector');
                    }
                    var clickCovObj = IntelligentRoadTestSystemLayerV3.poorArea[resultList[i].scene];
                    IntelligentRoadTestSystemLayerV3.setPoorAreaObj(clickCovObj.index);//给通用的扇区对象赋值
                    IntelligentRoadTest.getSectorMessageById(resultList[i].statn_id, resultList[i].cell_id, IntelligentRoadTest.day);
                    IntelligentRoadTest.index == clickCovObj.index;
                    break;
                }
            }
        } else if (type == "poor" || type == "poorArea") {
            for (var i = 0; i < resultList.length; i++) {
                if (resultList[i].object_id == liClickid) {
                    //弱区点击，呈现栅格,跳转到详细信息
//                    IntelligentRoadTest.loadClickPoorAreaGrid(resultList[i]);
//                     IntelligentRoadTestSystemLayerV3.setPoorAreaObj(resultList[i]);
                    var clickPoorAreaObj = IntelligentRoadTestSystemLayerV3.poorArea[resultList[i].scene];
                    IntelligentRoadTestSystemLayerV3.setPoorAreaObj(clickPoorAreaObj.index);//给通用的弱区对象赋值
                    IntelligentRoadTest.getPoorAreaMessageById(resultList[i].object_id, IntelligentRoadTest.day);
                    IntelligentRoadTest.index == clickPoorAreaObj.index;
                    break;
                }
            }


        } else if (type == "scene") {
            // var sceneId = $(this).attr('type');
            for (var i = 0; i < resultList.length; i++) {
                if (resultList[i].id == liClickid) {
                    if (IntelligentRoadTest.showSceneAreaId == "concern") {//关注区域点击，呈现栅格,需要跳转到详细页
                        IntelligentRoadTest.getConcernAreaMessageById(resultList[i].id);
                        IntelligentRoadTest.index == 1;
                    } else if (IntelligentRoadTest.showSceneAreaId == "bone") {//骨头区域点击，呈现栅格，是否需要跳转到详细页
                        IntelligentRoadTest.getBoneAreaMessageById(resultList[i].id);
                        IntelligentRoadTest.index == 5;
                    } else if (IntelligentRoadTest.showSceneAreaId == "highColleges") {//高校点击，呈现栅格，是否需要跳转到详细页
                        IntelligentRoadTest.getSenseDataByESBHID(1, resultList[i].id, IntelligentRoadTest.day, 'true');
                        IntelligentRoadTest.index == 10;
                    } else if (IntelligentRoadTest.showSceneAreaId == "venues") {//场馆点击，呈现栅格，是否需要跳转到详细页
                        IntelligentRoadTest.getSenseDataByESBHID(10, resultList[i].id, IntelligentRoadTest.day);
                        IntelligentRoadTest.index == 19;
                    } else if (IntelligentRoadTest.showSceneAreaId == "beautyFood") {//美食点击，呈现栅格，是否需要跳转到详细页
                        IntelligentRoadTest.getSenseDataByESBHID(9, resultList[i].id, IntelligentRoadTest.day);
                        IntelligentRoadTest.index == 18;
                    } else if (IntelligentRoadTest.showSceneAreaId == "beautyScenery") {//美景点击，呈现栅格，是否需要跳转到详细页
                        IntelligentRoadTest.getSenseDataByESBHID(7, resultList[i].id, IntelligentRoadTest.day);
                        IntelligentRoadTest.index == 12;
                    } else if (IntelligentRoadTest.showSceneAreaId == "wolfArea") {//战狼区域点击，呈现栅格，是否需要跳转到详细页
                        IntelligentRoadTest.getSenseDataByESBHID(3, resultList[i].id, IntelligentRoadTest.day, 'true', true);
                        IntelligentRoadTest.index == 16;
                    } else if (IntelligentRoadTest.showSceneAreaId == "farmerMarket") {//农贸市场点击，呈现栅格，是否需要跳转到详细页
                        IntelligentRoadTest.getSenseDataByESBHID(8, resultList[i].id, IntelligentRoadTest.day);
                        IntelligentRoadTest.index == 17;
                    } else if (IntelligentRoadTest.showSceneAreaId == "highResidence") {//高密度住宅区点击，呈现栅格，是否需要跳转到详细页
                        IntelligentRoadTest.getSenseDataByESBHID(2, resultList[i].id, IntelligentRoadTest.day, 'true');
                        IntelligentRoadTest.index == 9;
                    } else if (IntelligentRoadTest.showSceneAreaId == "highBusiness") {//高流量商务区点击，呈现栅格，是否需要跳转到详细页
                        IntelligentRoadTest.getSenseDataByESBHID(3, resultList[i].id, IntelligentRoadTest.day, 'true');
                        IntelligentRoadTest.index == 11;
                    } else if (IntelligentRoadTest.showSceneAreaId == "cityVillage") {//城中村点击，呈现栅格，是否需要跳转到详细页
                        IntelligentRoadTest.getSenseDataByESBHID(12, resultList[i].id, IntelligentRoadTest.day, 'true');
                        IntelligentRoadTest.index == 21;
                    } else if (IntelligentRoadTest.showSceneAreaId == "school") {//中小学点击，呈现栅格，是否需要跳转到详细页
                        IntelligentRoadTest.getSenseDataByESBHID(11, resultList[i].id, IntelligentRoadTest.day, 'true');
                        IntelligentRoadTest.index == 20;
                    } else if (IntelligentRoadTest.showSceneAreaId == "village") {//自然村点击，呈现栅格，是否需要跳转到详细页
                        IntelligentRoadTest.getSenseDataByESBHID(13, resultList[i].id, IntelligentRoadTest.day, 'true');
                        IntelligentRoadTest.index == 22;
                    } else if (IntelligentRoadTest.showSceneAreaId == "factory") {//工厂点击，呈现栅格，是否需要跳转到详细页
                        IntelligentRoadTest.getSenseDataByESBHID(14, resultList[i].id, IntelligentRoadTest.day, 'true');
                        IntelligentRoadTest.index == 23;
                    }
                    break;
                }
            }

        } else if (type == "grid" || type == "objectGrid") {
            for (var i = 0; i < resultList.length; i++) {
                if (resultList[i][5] == liClickid) {
                    //栅格点击出现连线
                    //var dataChe = [minLng,minLat,maxLng,maxLat,rsrp_avg,grid_num,agps_count,sector_set,
                    // dxrsrpAvg,rsrp_avgM,rsrp_avgU,monthrelate,dx_cover,yd_cover,lt_cover];
                    var maxLng = resultList[i][2];
                    var maxLat = resultList[i][3];
                    var minLng = resultList[i][0];
                    var minLat = resultList[i][1];
                    var midLng = (parseFloat(maxLng) + parseFloat(minLng)) / 2;
                    var midLat = (parseFloat(maxLat) + parseFloat(minLat)) / 2;
                    var centerPoint = new BMap.Point(midLng, midLat);
                    // IntelligentRoadTest.showGridMrNrTop5CellForMap(centerPoint,resultList[i][7]);//centerPoint,sector_set
                    //此处添加显示栅格详情页的方法
//                    $(".linkCell").attr("title","显示连线");
//                    $(".linkCell").removeClass("linkCellHover");
//                    IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                    var points = [
                        new BMap.Point(minLng, minLat),
                        new BMap.Point(maxLng, minLat),
                        new BMap.Point(maxLng, maxLat),
                        new BMap.Point(minLng, maxLat),
                        new BMap.Point(minLng, minLat)];
                    IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(points, 2, 'grid');

                    showOrHideInputImage(2);
                    IntelligentRoadTest.getGridDataByGridId(resultList[i]);//获取栅格的详细数据
                    IntelligentRoadTest.getSeventDayDataByGridId(resultList[i][5]);//获取栅格历史7天的覆盖率
                    IntelligentRoadTest.goGridCompleteMessage();
                    break;
                }
            }
        } else if (type == "polygonLayer") {
            var obj_type = $(this).attr('name');
            if (obj_type == 'sector' || obj_type == 'm3Sector' || obj_type == 'olSector' || obj_type == 'cbSector') {
                var bst_id = liClickid.split('_')[0];
                var cell_id = liClickid.split('_')[1];
                for (var i = 0; i < resultList.length; i++) {
                    if (resultList[i].obj_type == 'sector' || resultList[i].obj_type == 'm3Sector' || resultList[i].obj_type == 'olSector' || resultList[i].obj_type == 'cbSector') {
                        //扇区点击，跳转到详细页，需要加载栅格
                        if (resultList[i].statn_id == bst_id && resultList[i].cell_id == cell_id) {
                            if (resultList[i].type == 2) {//室外基站
                                var p = resultList[i].points[0];
                                var pointsArr = resultList[i].points
                                pointsArr.push(p);
                                IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(pointsArr, 2, 'sector');
                            } else {//室内基站
                                IntelligentRoadTestSystemLayerV3.showHighLightedPolyline(resultList[i], 1, 'sector');
                            }
                            var clickCovObj = IntelligentRoadTestSystemLayerV3.poorArea[resultList[i].obj_type];
                            IntelligentRoadTestSystemLayerV3.setPoorAreaObj(clickCovObj.index);//给通用的扇区对象赋值
//                            IntelligentRoadTest.loadMainSectorGrid(resultList[i]);
                            IntelligentRoadTest.getSectorMessageById(resultList[i].statn_id, resultList[i].cell_id, IntelligentRoadTest.day);
                            IntelligentRoadTest.index = clickCovObj.index;
                            break;
                        }
                    }
                }
            } else if (obj_type == "addUserComplain" || obj_type == "addComplainHot") {
                for (var i = 0; i < resultList.length; i++) {
                    if (resultList[i].signs == obj_type && resultList[i].id == liClickid) {
                        //跳转到全量工单、越级工单详情//跳转到抱怨热点详情
                        if (IntelligentRoadTest.userComplainVM == null) {
                            IntelligentRoadTest.dealQueryAllUserComplain([]);
                            IntelligentRoadTest.userComplainVM.showMessage(resultList[i].val, null);
                        } else {
                            IntelligentRoadTest.userComplainVM.showMessage(resultList[i].val, null);
                        }
                        IntelligentRoadTest.index = 29;
                        break;
                    }
                }

            } else {
                for (var i = 0; i < resultList.length; i++) {
                    if (resultList[i].obj_id == liClickid && obj_type == resultList[i].obj_type) {
                        if (resultList[i].obj_type == "concern") {//关注区域点击，呈现栅格,需要跳转到详细页
                            IntelligentRoadTest.getConcernAreaMessageById(resultList[i].obj_id);
                            IntelligentRoadTest.index == 1;
                        } else if (resultList[i].obj_type == "boneArea") {//骨头区域点击，呈现栅格，是否需要跳转到详细页
                            IntelligentRoadTest.getBoneAreaMessageById(resultList[i].obj_id);
                            IntelligentRoadTest.index == 5;
                        } else if (resultList[i].obj_type == "colleges") {//高校点击，呈现栅格，是否需要跳转到详细页
                            IntelligentRoadTest.getSenseDataByESBHID(1, resultList[i].obj_id, IntelligentRoadTest.day, 'true');
                            IntelligentRoadTest.index == 10;
                        } else if (resultList[i].obj_type == "site") {//场馆点击，呈现栅格，是否需要跳转到详细页
                            IntelligentRoadTest.getSenseDataByESBHID(10, resultList[i].obj_id, IntelligentRoadTest.day);
                            IntelligentRoadTest.index == 19;
                        } else if (resultList[i].obj_type == "food") {//美食点击，呈现栅格，是否需要跳转到详细页
                            IntelligentRoadTest.getSenseDataByESBHID(9, resultList[i].obj_id, IntelligentRoadTest.day);
                            IntelligentRoadTest.index == 18;
                        } else if (resultList[i].obj_type == "scenery") {//美景点击，呈现栅格，是否需要跳转到详细页
                            IntelligentRoadTest.getSenseDataByESBHID(7, resultList[i].obj_id, IntelligentRoadTest.day);
                            IntelligentRoadTest.index == 12;
                        } else if (resultList[i].obj_type == "warwolf") {//战狼区域点击，呈现栅格，是否需要跳转到详细页
                            IntelligentRoadTest.getSenseDataByESBHID(3, resultList[i].obj_id, IntelligentRoadTest.day, 'true', true);
                            IntelligentRoadTest.index == 16;
                        } else if (resultList[i].obj_type == "market") {//农贸市场点击，呈现栅格，是否需要跳转到详细页
                            IntelligentRoadTest.getSenseDataByESBHID(8, resultList[i].obj_id, IntelligentRoadTest.day);
                            IntelligentRoadTest.index == 17;
                        } else if (resultList[i].obj_type == "uptown") {//高密度住宅区点击，呈现栅格，是否需要跳转到详细页
                            IntelligentRoadTest.getSenseDataByESBHID(2, resultList[i].obj_id, IntelligentRoadTest.day, 'true');
                            IntelligentRoadTest.index == 9;
                        } else if (resultList[i].obj_type == "business") {//高流量商务区点击，呈现栅格，是否需要跳转到详细页
                            IntelligentRoadTest.getSenseDataByESBHID(3, resultList[i].obj_id, IntelligentRoadTest.day, 'true');
                            IntelligentRoadTest.index == 11;
                        } else if (resultList[i].obj_type == "cityVillage") {//城中村点击，呈现栅格，是否需要跳转到详细页
                            IntelligentRoadTest.getSenseDataByESBHID(12, resultList[i].obj_id, IntelligentRoadTest.day, 'true');
                            IntelligentRoadTest.index == 21;
                        } else if (resultList[i].obj_type == "school") {//中小学点击，呈现栅格，是否需要跳转到详细页
                            IntelligentRoadTest.getSenseDataByESBHID(11, resultList[i].obj_id, IntelligentRoadTest.day, 'true');
                            IntelligentRoadTest.index == 20;
                        } else if (resultList[i].obj_type == "village") {//自然村点击，呈现栅格，是否需要跳转到详细页
                            IntelligentRoadTest.getSenseDataByESBHID(13, resultList[i].obj_id, IntelligentRoadTest.day, 'true');
                            IntelligentRoadTest.index == 22;
                        } else if (resultList[i].obj_type == "factory") {//工厂点击，呈现栅格，是否需要跳转到详细页
                            IntelligentRoadTest.getSenseDataByESBHID(14, resultList[i].obj_id, IntelligentRoadTest.day, 'true');
                            IntelligentRoadTest.index == 23;
                        } else if (resultList[i].obj_type == "poorArea") {//弱区，呈现栅格，是否需要跳转到详细页
                            IntelligentRoadTest.getPoorAreaMessageById(resultList[i].obj_id, IntelligentRoadTest.day);
                            IntelligentRoadTest.index == 0;
                        } else if (resultList[i].obj_type == 'upPoorArea' || resultList[i].obj_type == 'dwPoorArea') { //删除||resultList[i].obj_type=='m3Sector'||resultList[i].obj_type=='olSector'||resultList[i].obj_type=='cbSector'
                            var clickPoorAreaObj = IntelligentRoadTestSystemLayerV3.poorArea[resultList[i].obj_type];
                            IntelligentRoadTestSystemLayerV3.setPoorAreaObj(clickPoorAreaObj.index);
                            IntelligentRoadTest.getPoorAreaMessageById(resultList[i].obj_id, IntelligentRoadTest.day);
                            IntelligentRoadTest.index == clickPoorAreaObj.index;
                        } else if (resultList[i].obj_type == "boxSelect") {//自定义框选，呈现栅格，是否需要跳转到详细页
                            if (IntelligentRoadTest.SelectionE) {
                                IntelligentRoadTest.overlaycomplete(IntelligentRoadTest.SelectionE, false);
                            }
                            if (IntelligentRoadTest.SelectionOverlay) {
                                IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.SelectionOverlay);
                            }
                        } else if (resultList[i].obj_type == "poorAreaDashed") {//虚线弱区，呈现栅格，是否需要跳转到详细页
                            if (!resultList[i].isDashLine) {//是虚框的时候，说明当前的弱区虚框不是生成的时间
                                IntelligentRoadTest.getPoorAreaMessageById(resultList[i].obi_id, IntelligentRoadTest.day, true);
                            } else {
                                var obj = {};
                                obj.overlay = {};
                                obj.overlay = new BMap.Polygon(resultList[i].points);
                                IntelligentRoadTest.overlaycomplete(obj, false);
                                IntelligentRoadTest.goSaveAreaCompleteMessage();
                            }
                        }
                        break;
                    }
                }
            }
        }
        $(this).parent().hide();
    });

}
*/

//对匹配出来的结果鼠标移入时进行高亮显示
IntelligentRoadTest.showClickObjectPolyline = function IntelligentRoadTest_showClickObjectPolyline(pointArr, type) {
    if (type == 2) {//室外
        if (IntelligentRoadTest.objectPolyline == null) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.objectPolyline);
        }
        IntelligentRoadTest.objectPolyline = new BMap.Polyline(pointArr);
        IntelligentRoadTest.objectPolyline.setStrokeColor(IntelligentRoadTest.objectPolylineColor);
        IntelligentRoadTest.objectPolyline.setStrokeOpacity(1);
        IntelligentRoadTest.objectPolyline.setStrokeWeight(6);
        IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.objectPolyline);
    } else if (type == 3) {//不随地图改变大小的圆
        if (IntelligentRoadTest.objectPolyline == null) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.objectPolyline);
        }
        var circlePoint = pointArr.point;
        //转换成像素点，X+1,，算出当前地图下，1像素=多少米
        /*var circlePixel=IntelligentRoadTest.map.pointToPixel(circlePoint);
        var endPoint=IntelligentRoadTest.map.pixelToPoint(new BMap.Pixel(circlePixel.x+1,circlePixel.y));
        var meter=IntelligentRoadTest.map.getDistance(circlePoint,endPoint);
        */
        var meter = IntelligentRoadTestSystemLayerV3.getMeterOnMap();
        var radius = pointArr.radius * meter;
        IntelligentRoadTest.objectPolyline = new BMap.Circle(circlePoint, radius);
        IntelligentRoadTest.objectPolyline.setStrokeColor(IntelligentRoadTest.objectPolylineColor);
        IntelligentRoadTest.objectPolyline.setStrokeOpacity(1);
        IntelligentRoadTest.objectPolyline.setStrokeWeight(6);
        IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.objectPolyline);

    } else {//室内
        if (IntelligentRoadTest.objectPolyline == null) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.objectPolyline);
        }
        var circlePoint = pointArr.point;
        var radius = pointArr.radiusL;
        IntelligentRoadTest.objectPolyline = new BMap.Circle(circlePoint, radius);
        IntelligentRoadTest.objectPolyline.setStrokeColor(IntelligentRoadTest.objectPolylineColor);
        IntelligentRoadTest.objectPolyline.setStrokeOpacity(1);
        IntelligentRoadTest.objectPolyline.setStrokeWeight(6);
        IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.objectPolyline);
    }

}

/**********************************
 * @funcname IntelligentRoadTest.showGridCompleteMessage
 * @funcdesc 初始化栅格详情页的方法
 * @param {Object}  data {
 * data表示栅格的数据
 * @author 林楚佳
 * @create 20180101
 ***********************************/
IntelligentRoadTest.showGridCompleteMessage = function IntelligentRoadTest_showGridCompleteMessage(data) {
    /*var nearTOP5 = [];
    if(item.ne_sector_set != null && item.ne_sector_set != ""){
        var to5DataArr = item.ne_sector_set.split("@");
        for(var i =  0 ; i < to5DataArr.length; i++){
            nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
        }
    }*/
    IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
    IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
    IntelligentRoadTest.cleraAllZhuantiSectorAndLine();
    IntelligentRoadTest.hideCBPoorAreaNrTop5Sector();
    if ($('#showGridCompleteMessage .linkCell').hasClass("linkCellHover")) {
        var centerPoint = new BMap.Point(data.longitude_mid, data.latitude_mid);
        IntelligentRoadTest.showMrNrTop5CellForMap(centerPoint, data.sector_set);
    }
    IntelligentRoadTest.hideSectorPoorLine(3);
    IntelligentRoadTest.isShowGridMessage = true;
    IntelligentRoadTest.isGridMessage = true;
    var nrCellList = [];
    if (!isNull(data.nrCellStr)) {
        nrCellList = IntelligentRoadTest.getNCCellList(data.nrCellStr); //获取到邻区列表数据
    }
    var isShowNrCellList = false; //是否显示邻区列表，只有点击专题扇区的栅格时显示
    if (data.nrCellStr != null) { //只有这个不为null的情况下才是点击专题扇区栅格
        isShowNrCellList = true;
    }
    var mrNearTOP5 = [];
    if (data.sector_set != null && data.sector_set != "") {
        var mrTo5DataArr = data.sector_set.split("@");
        var num = 0
        for (var k = 0; k < mrTo5DataArr.length; k++) {
            if (!isNull(mrTo5DataArr[k])) {
                mrNearTOP5[num] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
                num++;
            }

        }
    }
    var anotherRateName = ""; //另外一个简洁的名称
    if (IntelligentRoadTest.sectorObj.name == "m3Sector") {
        //rateName = "MOD3干扰";
        anotherRateName = "MOD3";
    } else if (IntelligentRoadTest.sectorObj.name == "olSector") {
        //rateName = "重叠覆盖";
        anotherRateName = "重叠";
    } else if (IntelligentRoadTest.sectorObj.name == "cbSector") {
        //rateName = "越区覆盖";
        anotherRateName = "越区";
    }
    var echartTitle = "历史7天覆盖率趋势";
    if (IntelligentRoadTest.gridVM == null) {
        IntelligentRoadTest.gridVM = new Vue({
            el: '#showGridCompleteMessage',
            data: {
                gridData: data,
                title: echartTitle,
                mrTop5Cell: mrNearTOP5,
                anotherRateName: anotherRateName,
                isShowNrCellList: isShowNrCellList,//是否显示邻区列表
                nrCellList: nrCellList //邻区列表
            },
            methods: {
                showDetailInfo: function (event) {
                    IntelligentRoadTest.showDetailInfo(event);
                },
                showLinkCell: function (event, item, type) {
                    IntelligentRoadTest.isGridMessage = true;
                    //type=1最近小区，type=2 接入扇区
                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                        $(event.currentTarget).attr("title", "显示连线");
                        $(event.currentTarget).removeClass("linkCellHover");
                        // $(event.currentTarget).children().attr("src",norImg);
                        if (type == 1) {
                            IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                        } else if (type == 2) {
                            IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                        }
                    } else {
                        $(event.currentTarget).attr("title", "隐藏连线");
                        $(event.currentTarget).addClass("linkCellHover");
                        // $(event.currentTarget).children().attr("src",clickImg);
                        // var max_lng =
                        var centerPoint = new BMap.Point(item.longitude_mid, item.latitude_mid);
                        if (type == 1) {
                            IntelligentRoadTest.showNrTop5CellForMap(centerPoint, item.top5_sector_set);
                        } else if (type == 2) {
                            IntelligentRoadTest.showMrNrTop5CellForMap(centerPoint, item.sector_set);
                        }
                    }
                },
                gotoAlarmList: function (item) {
                    if (item.sector_set != null) {
                        var sectorArr = item.sector_set.split("@");
                        IntelligentRoadTest.loadAlarmListData(sectorArr);
                        $("#alarmBackPoor").html("返回上一级");
                    }
                },
                gotoKPIList: function (item) {
                    if (item.sector_set != null) {
                        var sectorArr = item.sector_set.split("@");
                        showOrHideInputImage(2);
                        IntelligentRoadTest.loadKPIListData(sectorArr);
                        $("#kpiBackPoor").html("返回上一级");
                    }
                },
                gotoShowSectorMessage: function (sectorDate) {
                    // console.log(sectorDate);
                    if (IntelligentRoadTest.sectorObj.name != "sector") { //位于专题扇区的栅格详情页
                        IntelligentRoadTest.lastSectorObj = IntelligentRoadTest.sectorObj;
                        var item = IntelligentRoadTest.sectorCompleteVM.sectorData;
                        IntelligentRoadTest.lastSectorObj.currentSector = item;
                        IntelligentRoadTest.sectorObj = IntelligentRoadTest.normalSector;
                    }
                    IntelligentRoadTest.clickType = 1;
                    IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                },
                showNRLinkCell: function (event, item, nrCellList, type) {
                    //type=1最近小区，type=2 接入扇区
                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                        $(event.currentTarget).attr("title", "显示连线");
                        $(event.currentTarget).removeClass("linkCellHover");
                        // $(event.currentTarget).children().attr("src",norImg);
                        if (type == 1) {
                            IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                        } else if (type == 2) {
                            IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                        }
                    } else {
                        $(event.currentTarget).attr("title", "隐藏连线");
                        $(event.currentTarget).addClass("linkCellHover");
                        // $(event.currentTarget).children().attr("src",clickImg);
                        // var max_lng =
                        var centerPoint = new BMap.Point(item.longitude_mid, item.latitude_mid);
                        var enodebid_cellidArr = [];
                        for (var i = 0; i < nrCellList.length; i++) {
                            if (nrCellList[i].enodebid != null && nrCellList[i].enodebid != "" &&
                                nrCellList[i].cellid != null && nrCellList[i].cellid != "") { //做一下容错，不将基站ID和小区ID 为空的扇区拼进去
                                enodebid_cellidArr.push(nrCellList[i].enodebid + "," + nrCellList[i].cellid); //将基站ID和扇区ID用逗号拼在一起
                            }
                        }
                        var sector_set = enodebid_cellidArr.join("@"); //拼成一个以@符号切割扇区的字符串
                        if (type == 1) {
                            IntelligentRoadTest.showNrTop5CellForMap(centerPoint, sector_set);
                        } else if (type == 2) {
                            // IntelligentRoadTest.showMrNrTop5CellForMap(centerPoint,sector_set);
                        }
                    }
                },
                showErrorMessage: function (pin_pci) {
                    if (pin_pci != null) {
                        var list = pin_pci.split("_");
                    }
                    alert("在3公里内找不到PCI为" + list[1] + "、频点为" + list[0] + "对应的小区")
                }
            }
        });
    } else {
        IntelligentRoadTest.gridVM.gridData = data;
        IntelligentRoadTest.gridVM.title = echartTitle;
        IntelligentRoadTest.gridVM.mrTop5Cell = mrNearTOP5;
        IntelligentRoadTest.gridVM.anotherRateName = anotherRateName;
        IntelligentRoadTest.gridVM.nrCellList = nrCellList;
        IntelligentRoadTest.gridVM.isShowNrCellList = isShowNrCellList;
    }
}

//查询主服务小区栅格
IntelligentRoadTest.loadMainSectorGrid = function IntelligentRoadTest_loadMainSectorGrid(clickPolygon) {
    var sector = clickPolygon;
    var object_id = parseInt(sector.statn_id) * 256 + parseInt(sector.cell_id);
    var startRow = IntelligentRoadTest.day + "_" + "20_1_" + object_id + "_";
    var endRow = IntelligentRoadTest.day + "_" + "20_1_" + object_id + "_~";
    var cloumnsList = "i:a1,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a18,i:a19,i:a22,i:a26,i:a27,i:a28,i:a29,i:a30,i:a31,i:a32,i:a33,i:a34,i:a35,i:a36,i:a37,i:a38";
    var list = ["IntelligentRoadTest_06_grid", "STARTROW:" + startRow, "ENDROW:" + endRow, "COLUMNLIST:" + cloumnsList];
    var progressBarSqls = [];
    progressBarSqls.push(list);
    var functionlist = [IntelligentRoadTest.showGridByCanv];
    var dataBase = [7];
    progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase);
    IntelligentRoadTest.initColorBarAll();
}

IntelligentRoadTest.loadClickPoorAreaGrid = function IntelligentRoadTest_loadClickPoorAreaGrid(clickPolygon) {
    // var plyM = {type:2,points:pointArr,decide:1,object_id:object_id};

    var poorarea = clickPolygon;
    var object_id = poorarea.object_id;
    var sql = [["IntelligentRoadTestAnalysisV2_poorArea_detil", "OBJECT_ID:" + object_id, "DAY:" + IntelligentRoadTest.day]];
    var funcList = [IntelligentRoadTest.handlePoorAreaCityId]
    var queryDataType = [3];
    progressbarTwo.submitSql(sql, funcList, queryDataType);


}
//根据查询返回的地市id、区县id和弱区id查询该弱区的栅格
IntelligentRoadTest.handlePoorAreaCityId = function IntelligentRoadTest_handlePoorAreaCityId(data) {
    var result = callBackChangeData(data);
    if (result.length > 0) {
        var city_id = result[0].city_id;
        var country_id = result[0].country_id;
        var object_id = result[0].object_id;
        var startRow = IntelligentRoadTest.day + "_" + "20_2_" + city_id + "_" + country_id + "_" + object_id + "_";
        var endRow = IntelligentRoadTest.day + "_" + "20_2_" + city_id + "_" + country_id + "_" + object_id + "_~";
        var cloumnsList = "i:a1,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a18,i:a19,i:a22,i:a26,i:a27,i:a28,i:a29,i:a30,i:a31,i:a32,i:a33,i:a34,i:a35,i:a36,i:a37,i:a38";
        var list = ["IntelligentRoadTest_06_grid", "STARTROW:" + startRow, "ENDROW:" + endRow, "COLUMNLIST:" + cloumnsList];
        var progressBarSqls = [];
        progressBarSqls.push(list);
        var functionlist = [IntelligentRoadTest.showGridByCanv];
        var dataBase = [7];
        progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase);
    }

}

//查询单个关注区域的信息，并加载栅格
IntelligentRoadTest.loadClickConcernAreaGrid = function IntelligentRoadTest_loadClickConcernAreaGrid(clickPolygon) {
    // var plyM = {type:2,points:pointArr,decide:1,id:id,name:name};
    var concernArea_id = clickPolygon.id;
    var list = ["IntelligentRoadTestAnalysisV2_concernArea_detil", "ID:" + concernArea_id];
    var progressBarSqls = [];
    progressBarSqls.push(list);
    var functionlist = [IntelligentRoadTest.handleConcernAreaQueryData];

    var dataBase = [3];
    progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase);
}
//处理查询回来的关注区域，调用关注区域名称点击触发的方法进行关注区域的呈现
IntelligentRoadTest.handleConcernAreaQueryData = function IntelligentRoadTest_handleConcernAreaQueryData(data) {
    var result = callBackChangeData(data);
    if (result.length > 0) {
        IntelligentRoadTest.concernAreaPositiong(result[0], false);
    }

}

//查询单个骨头区域的信息，并加载栅格
IntelligentRoadTest.loadClickBoneAreaGrid = function IntelligentRoadTest_loadClickBoneAreaGrid(clickPolygon) {
    // var plyM = {type:2,points:pointArr,decide:1,id:id,name:name};
    var boneArea_id = clickPolygon.id;
    var month = IntelligentRoadTest.day.substring(0, 6);
    var list = ["IntelligentRoadTestAnalysisV2_boneArea_detil", "ID:" + boneArea_id, "MONTH:" + month];
    var progressBarSqls = [];
    progressBarSqls.push(list);
    var functionlist = [IntelligentRoadTest.handleBoneAreaQueryData];

    var dataBase = [3];
    progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase);
}

//对查询结果进行格式化，再调用骨头区域详细信息中点击名称触发的方法进行呈现
IntelligentRoadTest.handleBoneAreaQueryData = function IntelligentRoadTest_handleBoneAreaQueryData(data) {
    var result = callBackChangeData(data);
    if (result.length > 0) {
        IntelligentRoadTest.boneAreaPositiong(result[0], false);
    }

}

//弱区区县切换
IntelligentRoadTest.poorAreaChangeDistrict = function IntelligentRoadTest_poorAreaChangeDistrict(city, district_id, district, mktcenter_id, mktcenter_name) {
    showOrHideInputImage(2);
    if(mktcenter_name == "null" || mktcenter_name == "" || mktcenter_name == "全区"){
        $("#poorAreaMktName").text("全区");
    }
    IntelligentRoadTest.loadmktCenterAreaTableData(city, district, null, IntelligentRoadTest.day, null, mktcenter_id, mktcenter_name);
    IntelligentRoadTest.searchTxtTmp[0] = city;
    IntelligentRoadTest.searchTxtTmp[1] = district;
    IntelligentRoadTest.submitLayersData(city);
}

//扇区区县切换
IntelligentRoadTest.sectorChangeDistrict = function IntelligentRoadTest_sectorChangeDistrict(city, district_id, district, mktcenter_id, mktcenter_name) {
    showOrHideInputImage(2);
    $('#sectorCityName').text(city);
    $('#sectorDistrictName').text(district);
    $('#mapCity').text(city);
    $('#mapDistrict').text(district);
    $("#sectorMktName").text(mktcenter_name);
    IntelligentRoadTest.loadSectorData(district_id, mktcenter_id, mktcenter_name);
    IntelligentRoadTest.searchTxtTmp[0] = city;
    IntelligentRoadTest.searchTxtTmp[1] = district;
    IntelligentRoadTest.submitLayersData(city);
}

//dt列表的地市切换
IntelligentRoadTest.DTChangeCity = function IntelligentRoadTest_DTChangeCity(city) {
    $('#DTCityName').text(city);
    IntelligentRoadTest.initDTData();
    IntelligentRoadTest.searchTxtTmp[0] = city;
    IntelligentRoadTest.submitLayersData(city);
}

//关注区域列表的地市切换
IntelligentRoadTest.concernAreaChangeCity = function IntelligentRoadTest_concenrnAreaChangeCity(city, district_id, district_name, mktcenter_id, mktcenter_name) {
    showOrHideInputImage(2);
    $('#concernAreaCityName').text(city);
    if(district_name == "null" || district_name == "" || district_name == "全市"){
        $("#concernAreaDistrictName").text("全市");
    }
    if(mktcenter_name == "null" || mktcenter_name == "" || mktcenter_name == "全区"){
        $("#concernAreaMktName").text("全区");
    }
    IntelligentRoadTest.queryAllConcernArea(city, district_name, mktcenter_name);
    IntelligentRoadTest.searchTxtTmp[0] = city;
    IntelligentRoadTest.submitLayersData(city);
}

//场景列表的地市切换
IntelligentRoadTest.senseChangeCity = function IntelligentRoadTest_senseChangeCity(city, type, district_id, district_name, mktcenter_id, mktcenter_name) {
    if (type == 1) {
        $('#collegeCityName').text(city);
    } else if (type == 2) {
        $('#uptownCityName').text(city);
    } else if (type == 3) {
        if (IntelligentRoadTest.senseName == "warwolf") {
            $('#warwolfCityName').text(city);
        } else {
            $('#businessCityName').text(city);
        }
    } else if (type == 7) {
        $('#sceneryName').text(city);
    } else if (type == 8) {
        $("#marketCityName").text(city);
    } else if (type == 9) {
        $("#foodCityName").text(city);
    } else if (type == 10) {
        $("#siteCityName").text(city);
    } else if (type == 11) {
        $("#senseCityName").text(city);
    }

    if(district_name == "null" || district_name == "" || district_name == "全市"){
        if (type == 1) {
            $('#collegeDistrictName').html(district_name);
        } else if (type == 2) {
            $('#uptownDistrictName').text(district_name);
        } else if (type == 3) {
            if (IntelligentRoadTest.senseName == "warwolf") {
                $('#warwolfDistrictName').text(district_name);
            } else {
                $('#businessDistrictName').text(district_name);
            }
        } else if (type == 7) {
            $('#sceneryDistrictName').text(district_name);
        } else if (type == 8) {
            $("#marketDistrictName").text(district_name);
        } else if (type == 9) {
            $("#foodDistrictName").text(district_name);
        } else if (type == 10) {
            $("#siteCityDistrictName").text(district_name);
        } else if (type == 11) {
            $("#senseDistrictName").text(district_name);
        }
    }

    if(mktcenter_name == "null" || mktcenter_name == "" || mktcenter_name == "全区"){
        if (type == 1) {
            $('#collegeMktName').html(mktcenter_name);
        } else if (type == 2) {
            $('#uptownMktName').text(mktcenter_name);
        } else if (type == 3) {
            if (IntelligentRoadTest.senseName == "warwolf") {
                $('#warwolfMktName').text(mktcenter_name);
            } else {
                $('#businessMktName').text(mktcenter_name);
            }
        } else if (type == 7) {
            $('#sceneryMktName').text(mktcenter_name);
        } else if (type == 8) {
            $("#marketMktName").text(mktcenter_name);
        } else if (type == 9) {
            $("#foodMktName").text(mktcenter_name);
        } else if (type == 10) {
            $("#siteCityMktName").text(mktcenter_name);
        } else if (type == 11) {
            $("#senseMktName").text(mktcenter_name);
        }
    }

    if(type == 11){ //11表示是中小学、城中村那些场景的，这里要将type真正对应的值进行赋值
        type = IntelligentRoadTest.senseObject.type;
    }

    showOrHideInputImage(2);
    if (IntelligentRoadTest.senseName == "warwolf") {
        IntelligentRoadTest.getWarwolfListData(IntelligentRoadTest.day, city, 3, district_id, mktcenter_id, district_name, mktcenter_name);
    } else {
        IntelligentRoadTest.getSenseDataByObjectId(type, city, IntelligentRoadTest.day, district_id, mktcenter_id, district_name, mktcenter_name);
    }
    IntelligentRoadTest.searchTxtTmp[0] = city;
    IntelligentRoadTest.submitLayersData(city);
}

//高速高铁和市政路的地市切换
IntelligentRoadTest.roadChangeCity = function (city, type) {
    IntelligentRoadTest.searchTxtTmp[0] = city;
    if (type == 1) { //高速
        IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day,
            1, IntelligentRoadTest.highwayVM.type); //加载高速第一层列表
        var centerPoint = OSMapUtil.getCityLocation(city);
        IntelligentRoadTest.isShowOsmMapEnd = false;
        IntelligentRoadTest.OsmMap.panTo(centerPoint);
        setTimeout(function () {
            IntelligentRoadTest.loadLineByLevelFromBounds();
            IntelligentRoadTest.isShowOsmMapEnd = true;
        }, 200)
        $("#highwayCityNameD").text(city);
    } else if (type == 2) { //高铁
        IntelligentRoadTest.roadCurrentQueryCity = city;
        if(IntelligentRoadTest.roadIndex == 1){
            var isLP = false;
            if(IntelligentRoadTest.roadStatus == 3){
                isLP = true;
            }
            IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day,
                2, isLP); //加载高铁第一层列表
            $("#railCityNameD").text(city);
        }else{
            $("#railSecondCityNameD").text(city);
            var type = false;
            var isPoor = false;
            if(IntelligentRoadTest.roadStatus == 3){ //连片
                type = true;
                isPoor = true;
            }
            IntelligentRoadTest.getRoadSecondListData(IntelligentRoadTest.road_id, city, IntelligentRoadTest.day, 2, type, isPoor);
            //高铁的场景分类，0表示综合 、 1表示隧道 、 2表示非隧道 3表示<-110连段
            if(IntelligentRoadTest.roadStatus == 0){
                //综合

            }else if(IntelligentRoadTest.roadStatus == 1){
                IntelligentRoadTest.getRoadSuiDaoGisData(IntelligentRoadTest.roadCurrentQueryCity,21);
            }else if(IntelligentRoadTest.roadStatus == 2){
                IntelligentRoadTest.getRoadSuiDaoGisData(IntelligentRoadTest.roadCurrentQueryCity,21);
            }else if(IntelligentRoadTest.roadStatus == 3){
                IntelligentRoadTest.queryContinueLine(IntelligentRoadTest.roadCurrentQueryCity, 2, IntelligentRoadTest.day, true)
            }

        }
        var centerPoint = BMapUtil.getCityLocation("广州");
        if(city != '全省'){
            centerPoint = BMapUtil.getCityLocation(city);
        }
        IntelligentRoadTest.isShowOsmMapEnd = false;
        // IntelligentRoadTest.OsmMap.panTo(centerPoint);
        if(city != '全省'){
            IntelligentRoadTest.map.panTo(centerPoint);
        }else{
            IntelligentRoadTest.map.centerAndZoom(centerPoint,8);
        }

        setTimeout(function () {
            IntelligentRoadTest.loadLineByLevelFromBounds();
            IntelligentRoadTest.isShowOsmMapEnd = true;
        }, 200)

    } else if (type == 3) {//市政路
        IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day,
            3, IntelligentRoadTest.cityRoadVM.type); //加载市政路第一层列表
        var centerPoint = OSMapUtil.getCityLocation(city);
        IntelligentRoadTest.isShowOsmMapEnd = false;
        IntelligentRoadTest.OsmMap.panTo(centerPoint);
        setTimeout(function () {
            IntelligentRoadTest.loadLineByLevelFromBounds();
            IntelligentRoadTest.isShowOsmMapEnd = true;
        }, 200)
    }
    IntelligentRoadTest.searchTxtTmp[0] = city;
    $("#cityRoadCityNameD").text(city);
}

//地铁地市切换的方法
IntelligentRoadTest.metroChangeCity = function IntelligentRoadTest_metroChangeCity(city) {
    IntelligentRoadTest.searchTxtTmp[0] = city;
    $('#metroCityName').text(city);
    IntelligentRoadTest.getMetroFirstListData(city, IntelligentRoadTest.day);
    IntelligentRoadTest.getMetroStationsData(city, IntelligentRoadTest.day, true);
    IntelligentRoadTest.map.panTo(BMapUtil.getCityLocation(city));
    $("#metroCityNameD").text(city);
}
//工单列表的地市切换
IntelligentRoadTest.alarmChangeCity = function IntelligentRoadTest_alarmChangeCity(city) {
    $('#alarmCityName').text(city);
    var startTime = $('#weekStartTime').text().trim();
    var endTime = IntelligentRoadTest.day;
    IntelligentRoadTest.loadAlarmInfoTableData(startTime, endTime, city, "", null);
    IntelligentRoadTest.searchTxtTmp[0] = city;
    IntelligentRoadTest.submitLayersData(city);
}

//骨头区域列表的地市切换
IntelligentRoadTest.boneAreaChangeCity = function (city, district_id, district_name, mktcenter_id, mktcenter_name) {
    showOrHideInputImage(2);
    $('#boneCityName').text(city);
    if(district_name == "null" || district_name == "" || district_name == "全市"){
        $("#boneDistrictName").text("全市");
    }
    if(mktcenter_name == "null" || mktcenter_name == "" || mktcenter_name == "全区"){
        $("#boneMktName").text("全区");
    }
    IntelligentRoadTest.queryAllBoneArea(district_id, mktcenter_id, district_name, mktcenter_name);
    IntelligentRoadTest.searchTxtTmp[0] = city;
    IntelligentRoadTest.submitLayersData(city);
}

//宏扇区的地市切换
IntelligentRoadTest.macSectorChangeCity = function (city, district_id, district_name, mktcenter_id, mktcenter_name) {
    showOrHideInputImage(2);
    $('#macSectorCityName').text(city);
    if(district_name == "null" || district_name == "" || district_name == "全市"){
        $("#macSectorDistrictName").text("全市");
    }
    if(mktcenter_name == "null" || mktcenter_name == "" || mktcenter_name == "全区"){
        $("#macSectorMktName").text("全区");
    }
    IntelligentRoadTest.loadMacSectorListData(district_id, mktcenter_id, district_name, mktcenter_name);
    IntelligentRoadTest.searchTxtTmp[0] = city;
    IntelligentRoadTest.submitLayersData(city);
}


//点击图例后重绘栅格或者描点
IntelligentRoadTest.colorbarEndRedraw = function IntelligentRoadTest_colorbarEndRedraw() {

    if (IntelligentRoadTest.isShowAreaGrid) {
        if (IntelligentRoadTest.isThreeNetStatus) {
            IntelligentRoadTest.GridMapArea.clear();
            IntelligentRoadTest.GridMapAreaM.clear();
            IntelligentRoadTest.GridMapAreaU.clear();
            var CTData = IntelligentRoadTest.GridAreaCanArrT;
            var CMData = IntelligentRoadTest.GridAreaCanArrM;
            var CUData = IntelligentRoadTest.GridAreaCanArrU;
            for (var j = 0; j < IntelligentRoadTest.colorBarArr.length; j++) {
                CTData = IntelligentRoadTest.ClearData(CTData, IntelligentRoadTest.colorBarArr[j]);
                CMData = IntelligentRoadTest.ClearData(CMData, IntelligentRoadTest.colorBarArr[j]);
                CUData = IntelligentRoadTest.ClearData(CUData, IntelligentRoadTest.colorBarArr[j]);
            }
            IntelligentRoadTest.GridMapArea.draw(CTData);
            IntelligentRoadTest.GridMapAreaM.draw(CMData);
            IntelligentRoadTest.GridMapAreaU.draw(CUData);
            CTData = null;
            CMData = null;
            CUData = null;
        } else {
            IntelligentRoadTest.GridMapArea.clear();
            var CTData = IntelligentRoadTest.CanArrArea;
            for (var j = 0; j < IntelligentRoadTest.colorBarArr.length; j++) {
                CTData = IntelligentRoadTest.ClearData(CTData, IntelligentRoadTest.colorBarArr[j]);
            }
            IntelligentRoadTest.GridMapArea.draw(CTData);
            CTData = null;
        }
    }


    if (IntelligentRoadTest.isShowGrid) {
        if (IntelligentRoadTest.isShowDTGrid) {
            IntelligentRoadTest.GridMap.clear();
            var CTData = IntelligentRoadTest.CanArr;
            var colorBarArr = [];
            if (IntelligentRoadTest.gridTypeIndex == 1) {
                colorBarArr = IntelligentRoadTest.colorBarArrSH;
            } else if (IntelligentRoadTest.gridTypeIndex == 2) {
                colorBarArr = IntelligentRoadTest.colorBarArrXH;
            } else if (IntelligentRoadTest.gridTypeIndex == 0) {
                colorBarArr = IntelligentRoadTest.colorBarArr;
            } else if (IntelligentRoadTest.gridTypeIndex == 3) {
                colorBarArr = IntelligentRoadTest.colorBarArrM3;
            } else if (IntelligentRoadTest.gridTypeIndex == 4) {
                colorBarArr = IntelligentRoadTest.colorBarArrYQ;
            } else if (IntelligentRoadTest.gridTypeIndex == 5) {
                colorBarArr = IntelligentRoadTest.colorBarArrCD;
            }else if (IntelligentRoadTest.gridTypeIndex == 6) {
                colorBarArr = IntelligentRoadTest.colorBarArrEC;
            }else if (IntelligentRoadTest.gridTypeIndex == 7) {
                colorBarArr = IntelligentRoadTest.colorBarArrNB;
            }
            for (var j = 0; j < colorBarArr.length; j++) {
                CTData = IntelligentRoadTest.ClearData(CTData, colorBarArr[j]);
            }
            IntelligentRoadTest.GridMap.draw(CTData);
            CTData = null;
        } else {
            //增加移动联通地图栅格重绘
            if (IntelligentRoadTest.isThreeNetStatus) {//三网不需要查看上下行速率
                IntelligentRoadTest.GridMap.clear();
                IntelligentRoadTest.GridMapM.clear();
                IntelligentRoadTest.GridMapU.clear();
                var CTData = IntelligentRoadTest.GridCanArrT;
                var CMData = IntelligentRoadTest.GridCanArrM;
                var CUData = IntelligentRoadTest.GridCanArrU;
                for (var j = 0; j < IntelligentRoadTest.colorBarArr.length; j++) {
                    CTData = IntelligentRoadTest.ClearData(CTData, IntelligentRoadTest.colorBarArr[j]);
                    CMData = IntelligentRoadTest.ClearData(CMData, IntelligentRoadTest.colorBarArr[j]);
                    CUData = IntelligentRoadTest.ClearData(CUData, IntelligentRoadTest.colorBarArr[j]);
                }
                IntelligentRoadTest.GridMap.draw(CTData);
                IntelligentRoadTest.GridMapM.draw(CMData);
                IntelligentRoadTest.GridMapU.draw(CUData);
                CTData = null;
                CMData = null;
                CUData = null;
            } else {
                IntelligentRoadTest.GridMap.clear();
                var CTData = IntelligentRoadTest.CanArr;
                var colorBarArr = [];
                if (IntelligentRoadTest.gridTypeIndex == 1) {
                    colorBarArr = IntelligentRoadTest.colorBarArrSH;
                } else if (IntelligentRoadTest.gridTypeIndex == 2) {
                    colorBarArr = IntelligentRoadTest.colorBarArrXH;
                } else if (IntelligentRoadTest.gridTypeIndex == 0) {
                    colorBarArr = IntelligentRoadTest.colorBarArr;
                } else if (IntelligentRoadTest.gridTypeIndex == 3) {
                    colorBarArr = IntelligentRoadTest.colorBarArrM3;
                } else if (IntelligentRoadTest.gridTypeIndex == 4) {
                    colorBarArr = IntelligentRoadTest.colorBarArrYQ;
                } else if (IntelligentRoadTest.gridTypeIndex == 5) {
                    colorBarArr = IntelligentRoadTest.colorBarArrCD;
                }else if (IntelligentRoadTest.gridTypeIndex == 6) {
                    colorBarArr = IntelligentRoadTest.colorBarArrEC;
                }else if (IntelligentRoadTest.gridTypeIndex == 7) {
                    colorBarArr = IntelligentRoadTest.colorBarArrNB;
                }
                for (var j = 0; j < colorBarArr.length; j++) {
                    CTData = IntelligentRoadTest.ClearData(CTData, colorBarArr[j]);
                }
                IntelligentRoadTest.GridMap.draw(CTData);
                CTData = null;
            }
        }
    } else {
        IntelligentRoadTest.GridMap.clear();
        var DTData = IntelligentRoadTest.GridMapCircleDataArr;
        for (var j = 0; j < IntelligentRoadTest.colorBarArr.length; j++) {
            DTData = IntelligentRoadTest.ClearDtData(DTData, IntelligentRoadTest.colorBarArr[j]);
        }
//				IntelligentRoadTest.GridMapCircle.drawCircle(DTData);
        IntelligentRoadTest.GridMap.drawCircle(DTData);
        DTData = null;
    }
    if ($(".colorBar-info").css("display") != "none") {
        IntelligentRoadTest.legendGrid();
    }


}

//将移动地图和联通地图中心点设为主要地图的中心点
IntelligentRoadTest.timeoutCenterAndZoom = function IntelligentRoadTest_timeoutCenterAndZoom() {
    var zoom = IntelligentRoadTest.map.getZoom();
    IntelligentRoadTest.mapMobile.setZoom(zoom);//设置地图级别
    IntelligentRoadTest.mapUnicom.setZoom(zoom);//设置地图级别

    var centerPoint = IntelligentRoadTest.map.getCenter();
    IntelligentRoadTest.mapMobile.setCenter(centerPoint);//设置中心点坐标
    IntelligentRoadTest.mapUnicom.setCenter(centerPoint);//设置中心点坐标
    clearTimeout(IntelligentRoadTest.centerAndZoomTimeout);
}

/*******************************************************************************
 * @funcname drawPolyline
 * @funcdesc 地图画虚框
 * @return {null}
 * @author 梁杰禹
 * @create 20170319
 ******************************************************************************/
IntelligentRoadTest.drawPolyline = function IntelligentRoadTest_drawPolyline() {

    for (var i = 0; i < IntelligentRoadTest.linkImgPoints.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.linkImgPoints[i]);
    }

    IntelligentRoadTest.linkImgPoints = [];
    if (IntelligentRoadTest.focusPolyline != null) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.focusPolyline);
        IntelligentRoadTest.focusPolyline = null;
    }
    //正在三网的状态时，画出聚焦框
    if (IntelligentRoadTest.isThreeNetStatus) {
        var bs = null;
        if (!IntelligentRoadTest.mobileIsHide) {
            bs = IntelligentRoadTest.mapMobile.getBounds(); // 获取可视区域
        } else {
            bs = IntelligentRoadTest.mapUnicom.getBounds(); // 获取可视区域
        }

        if (bs != null) {
            var bssw = bs.getSouthWest(); // 可视区域左下角
            var bsne = bs.getNorthEast(); // 可视区域右上角
            var minLng = bssw.lng;
            var minLat = bssw.lat;
            var maxLng = bsne.lng;
            var maxLat = bsne.lat;
            if (minLng == maxLng) {

                IntelligentRoadTest.drawPolylineTimeout = setTimeout("IntelligentRoadTest.drawPolyline();", 200);
                return;
            }
            var pStart = [{"lng": minLng, "lat": minLat}, {"lng": maxLng, "lat": minLat}, {
                "lng": maxLng,
                "lat": maxLat
            }, {"lng": minLng, "lat": maxLat}];
            IntelligentRoadTest.focusPolyline = new BMap.Polyline([
                new BMap.Point(minLng, minLat), new BMap.Point(maxLng, minLat),
                new BMap.Point(maxLng, maxLat), new BMap.Point(minLng, maxLat),
                new BMap.Point(minLng, minLat)], {
                strokeColor: "red",
                strokeStyle: 'dashed',
                strokeWeight: 2,
                strokeOpacity: 0.5
            });
            IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.focusPolyline);
            IntelligentRoadTest.linkImg(pStart);
            clearTimeout(IntelligentRoadTest.drawPolylineTimeout);
        }
    }

}

//聚焦对比框四个角的图标
IntelligentRoadTest.linkImg = function IntelligentRoadTest_linkImg(pStart) {
    var points = [
        // 四个点的坐标
        new BMap.Point(pStart[0].lng, pStart[0].lat),
        new BMap.Point(pStart[1].lng, pStart[1].lat),
        new BMap.Point(pStart[2].lng, pStart[2].lat),
        new BMap.Point(pStart[3].lng, pStart[3].lat)
    ];
    //opersComp   IntelligentRoadTest
    var images = [
        "../js/opersComp/images/com_4.png",
        "../js/opersComp/images/com_3.png",
        "../js/opersComp/images/com_2.png",
        "../js/opersComp/images/com_1.png"
    ];
    var icons = [];
    for (var k = 0; k < images.length; k++) {
        icons[k] = new BMap.Icon(images[k], new BMap.Size(48, 50));
    }
    for (var i = 0; i < points.length; i++) {
        var marker = new BMap.Marker(points[i], {icon: icons[i]});
        IntelligentRoadTest.linkImgPoints.push(marker);
        IntelligentRoadTest.map.addOverlay(marker);
    }

}

//根据点集合计算出最大最小经纬度进行返回
IntelligentRoadTest.getMaxAndMinLatLng = function IntelligentRoadTest_getMaxAndMinLatLng(array) { //array是一组存放中百度地图的point对象的数组
    var resultArr = [];
    var maxLng = null;
    var maxLat = null;
    var minLng = null;
    var minLat = null;
    // console.log(maxLng == null);
    if (array.length > 0) {
        for (var i = 0; i < array.length; i++) {
            if (maxLng == null) {
                maxLng = array[i].lng;
            }
            if (maxLat == null) {
                maxLat = array[i].lat;
            }
            if (minLat == null) {
                minLat = array[i].lat;
            }
            if (minLng == null) {
                minLng = array[i].lng;
            }
            if (maxLat < array[i].lat) {
                maxLat = array[i].lat;
            }
            if (maxLng < array[i].lng) {
                maxLng = array[i].lng;
            }
            if (minLat > array[i].lat) {
                minLat = array[i].lat;
            }
            if (minLng > array[i].lng) {
                minLng = array[i].lng;
            }
        }
        resultArr = [maxLng, maxLat, minLng, minLat];
    }
    return resultArr;
}

//时间选择结束触发事件
function seachTimeOnpicked() {
    IntelligentRoadTest.mapZoom = 0;
    var startDate = new Date();
    try {
        IntelligentRoadTest.lineHighlight.clearLayers();
    } catch (e) {
    }
    if (IntelligentRoadTest.circle) {
        //注销
        var itemSectorData = {
            obj_type: IntelligentRoadTest.circle.obj_type,
            pointsString: null,
            type: 2,
            decide: 1,
            statn_id: IntelligentRoadTest.circle.statn_id,
            cell_id: IntelligentRoadTest.circle.cell_id,
            day: IntelligentRoadTest.circle.day
        };
        IntelligentRoadTest.logOutPolygonToLayer(itemSectorData);
    }

    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.circle);
//    for(var i=0;i<IntelligentRoadTest.markerList.length;i++){
//        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.markerList[i]);
//    }
//    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.circle);
//    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlay);
//    $("#cirTip").hide();
//    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlayTwo);
//    $("#cirTipLeft").hide();
    IntelligentRoadTest.removeMk();
    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.searchMk);
    IntelligentRoadTest.markerList = [];
    IntelligentRoadTest.myCompOverlay = null;
    IntelligentRoadTest.myCompOverlayTwo = null;
    IntelligentRoadTest.day = $("#seachTime").text().replace(/-/g, "");

    var poorAreaSelectCity = $('#poorAreaCityName').text().trim();
    var poorAreaSelectDistrict = $('#poorAreaDistrictName').text().trim();
    var city = $("#alarmCityName").text();
    var index = IntelligentRoadTest.index;
    if (index == 0 || index == 24 || index == 25 || index == 30 || index == 31 || index == 32) {
        if (IntelligentRoadTest.currentLocation == "poorArea" || IntelligentRoadTest.currentLocation == "upPoorArea" || IntelligentRoadTest.currentLocation == "dwPoorArea"
            || IntelligentRoadTest.currentLocation == "m3PoorArea" || IntelligentRoadTest.currentLocation == "olPoorArea" || IntelligentRoadTest.currentLocation == "cbPoorArea") { //在弱区详情页，直接关闭左侧的div，不需要重新查询
            $(".clearText").trigger("click");
//        	$(".clearText").click();
            $(".panelDiv").hide();
            showOrHideInputImage(3);
        } else {
            showOrHideInputImage(2);
            IntelligentRoadTest.rfgVM.poorAreaList = null;
            IntelligentRoadTest.loadmktCenterAreaTableData(poorAreaSelectCity, poorAreaSelectDistrict, null, IntelligentRoadTest.day, null);
            var timer = setInterval(function () {
                if (IntelligentRoadTest.rfgVM.poorAreaList != null) {
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.rfgVM.poorAreaList);
                    clearInterval(timer);
                    showOrHideInputImage(1);
                }
            }, 500);
        }
    } else if (index == null && (IntelligentRoadTest.currentLocation == "poorArea" || IntelligentRoadTest.currentLocation == "upPoorArea" ||
        IntelligentRoadTest.currentLocation == "dwPoorArea" || IntelligentRoadTest.currentLocation == "m3PoorArea" || IntelligentRoadTest.currentLocation == "olPoorArea"
        || IntelligentRoadTest.currentLocation == "cbPoorArea")) {
        IntelligentRoadTest.index = 0;
        $(".clearText").trigger("click");
        $(".panelDiv").hide();
        showOrHideInputImage(3);
    } else if (index == 1) {
        showOrHideInputImage(2);
        // IntelligentRoadTest.concernAreaVM.concernAreaList = null;
        // IntelligentRoadTest.queryAllConcernArea();
        var timer1 = setInterval(function () {
            if (IntelligentRoadTest.concernAreaVM.concernAreaList != null) {
                //$("#concernAreaCount").html("返回上一级(" + $("#concernAreaCountMessage").text() + ")");
                IntelligentRoadTest.drawMk(IntelligentRoadTest.concernAreaVM.concernAreaList, 1);
                clearInterval(timer1);
                showOrHideInputImage(1);
            }
        }, 500);
    } else if (index == 2) {
        /*showOrHideInputImage(2);
        IntelligentRoadTest.alarmInfoVM.alarmInfoList = null;
        IntelligentRoadTest.loadAlarmInfoTableData(new Date(dealDateString(IntelligentRoadTest.day).getTime() - 6 * 24 * 60 * 60 * 1000).Format("yyyyMMdd")
            ,IntelligentRoadTest.day,city,"",null);
        var timer2 = setInterval(function(){
            if(IntelligentRoadTest.alarmInfoVM.alarmInfoList != null){
                //工单打点
                // $("#alarmInfoCount").html("返回上一级(" + $("#alarmInfoCountMessage").text() + ")");
                IntelligentRoadTest.loadAlarmMk(IntelligentRoadTest.alarmInfoVM.alarmInfoList);
                clearInterval(timer2);
                showOrHideInputImage(1);
            }
        },500);*/
    } else if (index == 3 || index == 26 || index == 27 || index == 28) { //扇区和专题扇区
        showOrHideInputImage(2);
        if (IntelligentRoadTest.sectorVM) {
            IntelligentRoadTest.sectorVM.sectorList = null;
        }

        IntelligentRoadTest.loadSectorData();
        var timer3 = setInterval(function () {
            if (IntelligentRoadTest.sectorVM) {
                if (IntelligentRoadTest.sectorVM.sectorList != null) {
                    // $("#sectorCount").html("返回上一级(" + $("#sectorCountMessage").text() + ")");
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.sectorVM.sectorList, index);
                    clearInterval(timer3);
                    showOrHideInputImage(1);
                }
            }

        }, 500);
    } else if (index == 4) {
        showOrHideInputImage(2);
        IntelligentRoadTest.dtVM.dtList = null;
        IntelligentRoadTest.initDTData();
        var timer4 = setInterval(function () {
            if (IntelligentRoadTest.dtVM.dtList != null) {
                // $("#dtCount").html("返回上一级(" + $("#dtCountMessage").text() + ")");
                clearInterval(timer4);
                showOrHideInputImage(1);
            }
        }, 500);
    } else if (index == 5) {
        showOrHideInputImage(2);
        IntelligentRoadTest.boneAreaVM.boneAreaList = null;
        IntelligentRoadTest.queryAllBoneArea();
        var timer5 = setInterval(function () {
            if (IntelligentRoadTest.boneAreaVM.boneAreaList != null) {
                // $("#boneAreaCount").html("返回上一级(" + $("#boneAreaCountMessage").text() + ")");
                IntelligentRoadTest.drawMk(IntelligentRoadTest.boneAreaVM.boneAreaList, 5);
                clearInterval(timer5);
                showOrHideInputImage(1);
            }
        }, 500);
    } else if (index == 6) {
        showOrHideInputImage(2);
        IntelligentRoadTest.isMacSectorChangeDay = true;
        IntelligentRoadTest.macSectorVM.macSectorList = null;
        IntelligentRoadTest.loadMacSectorListData();
        var timer6 = setInterval(function () {
            if (IntelligentRoadTest.macSectorVM.macSectorList != null) {
                // $("#macSectorCount").html("返回上一级(" + $("#macSectorCountMessage").text() + ")");
                IntelligentRoadTest.drawMk(IntelligentRoadTest.macSectorVM.macSectorList, 6);
                clearInterval(timer6);
                showOrHideInputImage(1);
            }
        }, 500);
    } else if (index == 13) {
        IntelligentRoadTest.overlaycomplete(IntelligentRoadTest.SelectionE, false);
        IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.SelectionOverlay);
    } else if (index == 29) {
        showOrHideInputImage(2);
        IntelligentRoadTestSystemLayerV3.initUC();
        IntelligentRoadTest.userComplainVM.userComplainList = null;
        IntelligentRoadTest.queryAllUserComplain();
        var timer6 = setInterval(function () {
            if (IntelligentRoadTest.userComplainVM.userComplainList != null) {
                // $("#boneAreaCount").html("返回上一级(" + $("#boneAreaCountMessage").text() + ")");
                IntelligentRoadTest.drawMk(IntelligentRoadTest.userComplainVM.userComplainList, 29);
                clearInterval(timer6);
                showOrHideInputImage(1);
            }
        }, 500);
    }
    console.log(new Date().getTime() - startDate.getTime());
    if (!IntelligentRoadTest.isBoxSelecting) {
        //如果在详情页还需要重新查询详情页的信息
        if (IntelligentRoadTest.currentLocation == "poorArea") {
            //当前在弱区详情页
            // IntelligentRoadTest.getPoorAreaMessageById(IntelligentRoadTest.rfgCompleteVM.poorAreaData.object_id ,
            //     IntelligentRoadTest.day);
        } else if (IntelligentRoadTest.currentLocation == "concern") {
            IntelligentRoadTest.isChangeDate = true;
            IntelligentRoadTest.getConncernAreaHisMessageById(IntelligentRoadTest.concernAreaCompleteVM.concernAreaData.id,
                IntelligentRoadTest.day);
        } else if (IntelligentRoadTest.currentLocation == "sector" || IntelligentRoadTest.currentLocation == "m3Sector" || IntelligentRoadTest.currentLocation == "olSector" ||
            IntelligentRoadTest.currentLocation == "cbSector") {
            IntelligentRoadTest.isChangeDate = true;
            IntelligentRoadTest.getSectorMessageById(IntelligentRoadTest.sectorCompleteVM.sectorData.enodeb_id,
                IntelligentRoadTest.sectorCompleteVM.sectorData.cell_id, IntelligentRoadTest.day);
        } else if (IntelligentRoadTest.currentLocation == "boneArea") {
            IntelligentRoadTest.isChangeDate = true;
            IntelligentRoadTest.getBoneAreaHisById(IntelligentRoadTest.boneAreaCompleteVM.boneAreaData.id,
                IntelligentRoadTest.day);
        } else if (IntelligentRoadTest.currentLocation == "macSector") {

        } else if (IntelligentRoadTest.currentLocation == "college") {
            IntelligentRoadTest.isChangeDate = true;
            IntelligentRoadTest.getSenseDataByESBHID(1, IntelligentRoadTest.collegeCompleteVM.collegeData.esbh_id,
                IntelligentRoadTest.day, 'true');
            console.log(new Date().getTime() - startDate.getTime());
        } else if (IntelligentRoadTest.currentLocation == "uptown") {
            IntelligentRoadTest.isChangeDate = true;
            IntelligentRoadTest.getSenseDataByESBHID(2, IntelligentRoadTest.uptownCompleteVM.uptownData.esbh_id,
                IntelligentRoadTest.day, 'true');
        } else if (IntelligentRoadTest.currentLocation == "business") {
            IntelligentRoadTest.isChangeDate = true;
            IntelligentRoadTest.getSenseDataByESBHID(3, IntelligentRoadTest.businessCompleteVM.businessData.esbh_id,
                IntelligentRoadTest.day, 'true');
        } else if (IntelligentRoadTest.currentLocation == "warwolf") {
            IntelligentRoadTest.isChangeDate = true;
            IntelligentRoadTest.getSenseDataByESBHID(3, IntelligentRoadTest.warwolfCompleteVM.warwolfData.esbh_id,
                IntelligentRoadTest.day, 'true', true);
        } else if (IntelligentRoadTest.currentLocation == "market") {
            IntelligentRoadTest.isChangeDate = true;
            IntelligentRoadTest.getSenseDataByESBHID(8, IntelligentRoadTest.marketCompleteVM.marketData.esbh_id,
                IntelligentRoadTest.day);
        } else if (IntelligentRoadTest.currentLocation == "scenery") {
            IntelligentRoadTest.isChangeDate = true;
            IntelligentRoadTest.getSenseDataByESBHID(7, IntelligentRoadTest.sceneryCompleteVM.sceneryData.esbh_id,
                IntelligentRoadTest.day);
        } else if (IntelligentRoadTest.currentLocation == "food") {
            IntelligentRoadTest.isChangeDate = true;
            IntelligentRoadTest.getSenseDataByESBHID(9, IntelligentRoadTest.foodCompleteVM.foodData.esbh_id,
                IntelligentRoadTest.day);
        } else if (IntelligentRoadTest.currentLocation == "site") {
            IntelligentRoadTest.isChangeDate = true;
            IntelligentRoadTest.getSenseDataByESBHID(10, IntelligentRoadTest.siteCompleteVM.siteData.esbh_id,
                IntelligentRoadTest.day);
        } else if (IntelligentRoadTest.currentLocation == "school" || IntelligentRoadTest.currentLocation == "cityVillage"
            || IntelligentRoadTest.currentLocation == "village" || IntelligentRoadTest.currentLocation == "factory") {
            IntelligentRoadTest.isChangeDate = true;
            IntelligentRoadTest.getSenseDataByESBHID(IntelligentRoadTest.senseObject.type, IntelligentRoadTest.senseCompleteVM.senseData.esbh_id,
                IntelligentRoadTest.day);
        }
    }
    //五高一地两美一场的时间切换逻辑
    var name = IntelligentRoadTest.senseName;
    if (name == "highway") { //高速
        var road_id = null;
        var isLP = IntelligentRoadTest.highwayVM.type;
        var city = $("#highwayCityName").text().trim();
        showOrHideInputImage(2);

        if (IntelligentRoadTest.roadIndex == 2) { //在第二层
            IntelligentRoadTest.highwaySecondVM.highwayList = null;
            IntelligentRoadTest.getRoadSecondListData(IntelligentRoadTest.road_id, city, IntelligentRoadTest.day,
                1, isLP, IntelligentRoadTest.highwayIsPoor);
            IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day,
                1, isLP);
            if (isLP) {
                IntelligentRoadTest.queryContinueLine(city, 1, IntelligentRoadTest.day, false);
                IntelligentRoadTest.queryContinueLineByRoadId(city, 1, IntelligentRoadTest.day, IntelligentRoadTest.road_id);
            } else {
                //增加查询某条高速所有500米分段数据，并呈现
                IntelligentRoadTest.loadSplitLineByRoadId(IntelligentRoadTest.road_id, city, 1, 500);
            }
            var timer = setInterval(function () {
                if (IntelligentRoadTest.highwaySecondVM.highwayList != null) {
                    clearInterval(timer);
                    showOrHideInputImage(1);
                }
            }, 500);
        } else if (IntelligentRoadTest.roadIndex == 3) {
            IntelligentRoadTest.highwaySecondVM.highwayList = null;
            var highwayData = IntelligentRoadTest.highwayCompleteVM.highwayData;
            //增加控制，否则切换时间时还是会显示该线段的详情页
            if (!(IntelligentRoadTest.isScreenCompared && IntelligentRoadTestScreenCompared.messageObject.type == 'highway')) {
                IntelligentRoadTest.getRoadSecondListData(highwayData.road_id, city, IntelligentRoadTest.day,
                    1, isLP, IntelligentRoadTest.highwayIsPoor);
                IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day,
                    1, isLP);
            }

            if (isLP) {
                if (IntelligentRoadTest.isScreenCompared && IntelligentRoadTestScreenCompared.messageObject.type == 'highway') {
                    console.log("分屏页当前同步对象为高速连片");
                    $(".clearText").trigger("click");
//                	$(".clearText").click();
                    $(".panelDiv").hide();
                    showOrHideInputImage(3);
                } else {
                    IntelligentRoadTest.goHighwayFirstList();
                    IntelligentRoadTest.queryContinueLine(city, 1, IntelligentRoadTest.day, true);
                }

            } else {
                var city_id = noceUtil.city_LATN_ID[city];
                //再补一个查询详情页的方法
                IntelligentRoadTest.getRoadCompleteMessageByLineID(highwayData.line_id, IntelligentRoadTest.day, 1,
                    highwayData.city, highwayData.road_id, isLP);
                IntelligentRoadTest.getRoad30DayData(highwayData.road_id, highwayData.line_id, 1, isLP); //查询历史30天的数据
                //加载500米分段的全部20米线段数据
                IntelligentRoadTest.loadSplitLineSmallLine(highwayData.road_id, highwayData.line_id, city_id,
                    IntelligentRoadTest.day, 1);
            }
        } else if (IntelligentRoadTest.roadIndex == 1) { //在第一层
            isLP = IntelligentRoadTest.highwayVM.type;
            IntelligentRoadTest.highwayVM.highwayList = null;
            IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day,
                1, isLP);
            var timer = setInterval(function () {
                if (IntelligentRoadTest.highwayVM.highwayList != null) {
                    clearInterval(timer);
                    showOrHideInputImage(1);
                }
            }, 500);
        } else if (IntelligentRoadTest.roadIndex == 4) { //在20米详情页
//DA       // DAY_`LINE_LEVEL`_`LINE_TYPE`_`CITY_ID`_`ROAD_ID`_`LINE_ID`
            var city_id = noceUtil.city_LATN_ID[city];
            var line_id = IntelligentRoadTest.highwayVueObj.line_id;
            var rowkey = [IntelligentRoadTest.day, 20, 1, city_id, IntelligentRoadTest.road_id, line_id];
            IntelligentRoadTest.getSeventDayDataByLineId(rowkey);
            IntelligentRoadTest.getRoad20MData(rowkey);
            IntelligentRoadTest.highwaySecondVM.highwayList = null;
            IntelligentRoadTest.getRoadSecondListData(IntelligentRoadTest.road_id, city, IntelligentRoadTest.day,
                1, isLP, IntelligentRoadTest.highwayIsPoor);
            IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day,
                1, isLP);
            if (isLP) {
                IntelligentRoadTest.queryContinueLine(city, 2, IntelligentRoadTest.day, true);
            } else {
                //加载500米分段的全部20米线段数据
                IntelligentRoadTest.loadSplitLineSmallLine(IntelligentRoadTest.road_id, highwayData.line_id, city_id,
                    IntelligentRoadTest.day, 1);
            }
        }
        IntelligentRoadTest.loadLineByLevelFromBounds();
    } else if (name == "rail") { //高铁
        var road_id = null;
        var isLP = IntelligentRoadTest.railVM.type;
        if(IntelligentRoadTest.roadStatus == 3){
            isLP = true;
        }else{
            isLP = false;
        }
        var secondListCity = $("#railSecondCityNameD").text().trim(); //第二级列表的地市名称
        var firstListCity = $("#railCityName").text().trim();//第一级列表的地市名称
        IntelligentRoadTest.isNeedCenterAndZoom = true; //是否需要缩放地图
        showOrHideInputImage(2)
        if (IntelligentRoadTest.roadIndex == 2) { //在第二层
            IntelligentRoadTest.railSecondVM.railList = null;
            IntelligentRoadTest.getRoadSecondListData(IntelligentRoadTest.road_id, secondListCity, IntelligentRoadTest.day,
                2, isLP, IntelligentRoadTest.railIsPoor);
            IntelligentRoadTest.getRoadFirstListData(firstListCity, IntelligentRoadTest.day,
                2, isLP);
            if (isLP) {
                IntelligentRoadTest.queryContinueLine(secondListCity, 2, IntelligentRoadTest.day, false);
                IntelligentRoadTest.queryContinueLineByRoadId(secondListCity, 2, IntelligentRoadTest.day, IntelligentRoadTest.road_id);
            } else {
                //增加查询某条高铁所有500米分段数据，并呈现
                //不显示500米分段，直接20米
                IntelligentRoadTest.loadSplitLineByRoadId(IntelligentRoadTest.road_id, city, 2, 20);
            }
            var timer = setInterval(function () {
                if (IntelligentRoadTest.railSecondVM.railList != null) {
                    clearInterval(timer);
                    showOrHideInputImage(1);
                }
            }, 500);
        } else if (IntelligentRoadTest.roadIndex == 3) {
            IntelligentRoadTest.railSecondVM.railList = null;
            var railData = IntelligentRoadTest.railCompleteVM.railData;
            //增加控制，否则切换时间时还是会显示该线段的详情页
            if (!(IntelligentRoadTest.isScreenCompared && IntelligentRoadTestScreenCompared.messageObject.type == 'railway')) {
                IntelligentRoadTest.getRoadSecondListData(railData.road_id, secondListCity, IntelligentRoadTest.day,
                    2, isLP, IntelligentRoadTest.railIsPoor);
                IntelligentRoadTest.getRoadFirstListData(firstListCity, IntelligentRoadTest.day,
                    2, isLP);
            }

            if (isLP) {
                if (IntelligentRoadTest.isScreenCompared && IntelligentRoadTestScreenCompared.messageObject.type == 'railway') {
                    console.log("分屏页当前同步对象为高铁连片");
                    $(".clearText").trigger("click");
//                	$(".clearText").click();
                    $(".panelDiv").hide();
                    showOrHideInputImage(3);
                } else {
                    IntelligentRoadTest.queryContinueLine(firstListCity, 2, IntelligentRoadTest.day, true);
                    IntelligentRoadTest.goRailFirstList();
                }

            } else {
                var city_id = noceUtil.city_LATN_ID[secondListCity];
                //再补一个查询详情页的方法

                IntelligentRoadTest.getRoadCompleteMessageByLineID(railData.line_id, IntelligentRoadTest.day, 2,
                    railData.city, railData.road_id, isLP);
                IntelligentRoadTest.getRoad30DayData(railData.road_id, railData.line_id, 2, isLP); //查询历史30天的数据
                //加载500米分段的全部20米线段数据
                IntelligentRoadTest.loadSplitLineSmallLine(IntelligentRoadTest.road_id, railData.road_id, city_id,
                    IntelligentRoadTest.day, 2);
            }
        } else if (IntelligentRoadTest.roadIndex == 1) { //在第一层
            isLP = IntelligentRoadTest.railVM.type;
            if(IntelligentRoadTest.roadStatus == 3){
                isLP = true;
            }else{
                isLP = false;
            }
            IntelligentRoadTest.railVM.railList = null;
            IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day,
                2, isLP);
            var timer = setInterval(function () {
                if (IntelligentRoadTest.railVM.railList != null) {
                    clearInterval(timer);
                    showOrHideInputImage(1);
                }
            }, 500);
        } else if (IntelligentRoadTest.roadIndex == 4) { //在20米详情页
            //DAY_`LINE_LEVEL`_`LINE_TYPE`_`CITY_ID`_`ROAD_ID`_`LINE_ID`
            var city_id = noceUtil.city_LATN_ID[secondListCity];
            var line_id = IntelligentRoadTest.railVueObj.line_id;
            var rowkey = [IntelligentRoadTest.day, 20, 2, city_id, IntelligentRoadTest.road_id, line_id];
            IntelligentRoadTest.getSeventDayDataByLineId(rowkey);
            IntelligentRoadTest.getRoad20MData(rowkey);
            IntelligentRoadTest.railSecondVM.railList = null;
            IntelligentRoadTest.getRoadSecondListData(IntelligentRoadTest.road_id, secondListCity, IntelligentRoadTest.day,
                2, isLP, IntelligentRoadTest.railIsPoor);
            IntelligentRoadTest.getRoadFirstListData(firstListCity, IntelligentRoadTest.day,
                2, isLP);
            if (isLP) {
                IntelligentRoadTest.queryContinueLine(secondListCity, 3, IntelligentRoadTest.day, true);
            } else {
                //加载500米分段的全部20米线段数据
                IntelligentRoadTest.loadSplitLineSmallLine(IntelligentRoadTest.road_id, railData.line_id, city_id,
                    IntelligentRoadTest.day, 2);
            }
        }
        IntelligentRoadTest.loadLineByLevelFromBounds();
    } else if (name == "cityRoad") { //市政路
        var road_id = null;
        var isLP = IntelligentRoadTest.cityRoadVM.type;
        var city = $("#cityRoadCityName").text().trim();
        showOrHideInputImage(2)
        if (IntelligentRoadTest.roadIndex == 2) { //在第二层
            IntelligentRoadTest.cityRoadSecondVM.cityRoadList = null;
            IntelligentRoadTest.getRoadSecondListData(IntelligentRoadTest.road_id, city, IntelligentRoadTest.day,
                3, isLP, IntelligentRoadTest.cityRoadIsPoor);
            IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day,
                3, isLP);
            if (isLP) {
                IntelligentRoadTest.queryContinueLine(city, 3, IntelligentRoadTest.day, false);
                IntelligentRoadTest.queryContinueLineByRoadId(city, 3, IntelligentRoadTest.day, IntelligentRoadTest.road_id);
            } else {
                //增加查询某条市政路所有500米分段数据，并呈现
                IntelligentRoadTest.loadSplitLineByRoadId(IntelligentRoadTest.road_id, city, 3, 500);
            }
            var timer = setInterval(function () {
                if (IntelligentRoadTest.cityRoadSecondVM.cityRoadList != null) {
                    clearInterval(timer);
                    showOrHideInputImage(1);
                }
            }, 500);
        } else if (IntelligentRoadTest.roadIndex == 3) {
            IntelligentRoadTest.cityRoadSecondVM.cityRoadList = null;
            var cityRoadData = IntelligentRoadTest.cityRoadCompleteVM.cityRoadData;
            //增加控制，否则切换时间时还是会显示该线段的详情页
            if (!(IntelligentRoadTest.isScreenCompared && IntelligentRoadTestScreenCompared.messageObject.type == 'cityRoad')) {
                IntelligentRoadTest.getRoadSecondListData(cityRoadData.road_id, city, IntelligentRoadTest.day,
                    3, isLP, IntelligentRoadTest.cityRoadIsPoor);
                IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day,
                    3, isLP);
            }


            if (isLP) {
                if (IntelligentRoadTest.isScreenCompared && IntelligentRoadTestScreenCompared.messageObject.type == 'cityRoad') {
                    console.log("分屏页当前同步对象为市政路连片");
                    $(".clearText").trigger("click");
//                	$(".clearText").click();
                    $(".panelDiv").hide();
                    showOrHideInputImage(3);
                } else {
                    IntelligentRoadTest.queryContinueLine(city, 3, IntelligentRoadTest.day, true);
                    IntelligentRoadTest.goCityRoadFirstList();
                }

            } else {
                var city_id = noceUtil.city_LATN_ID[city];
                //再补一个查询详情页的方法

                IntelligentRoadTest.getRoadCompleteMessageByLineID(cityRoadData.line_id, IntelligentRoadTest.day, 3,
                    cityRoadData.city, cityRoadData.road_id, isLP);
                IntelligentRoadTest.getRoad30DayData(cityRoadData.road_id, cityRoadData.line_id, 3, isLP); //查询历史30天的数据
                //加载500米分段的全部20米线段数据
                IntelligentRoadTest.loadSplitLineSmallLine(cityRoadData.road_id, cityRoadData.line_id, city_id,
                    IntelligentRoadTest.day, 3);
            }
        } else if (IntelligentRoadTest.roadIndex == 1) { //在第一层
            isLP = IntelligentRoadTest.cityRoadVM.type;
            IntelligentRoadTest.cityRoadVM.cityRoadList = null;
            IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day,
                3, isLP);
            var timer = setInterval(function () {
                if (IntelligentRoadTest.cityRoadVM.cityRoadList != null) {
                    clearInterval(timer);
                    showOrHideInputImage(1);
                }
            }, 500);
        } else if (IntelligentRoadTest.roadIndex == 4) { //在20米详情页
            var city_id = noceUtil.city_LATN_ID[city];
            var line_id = IntelligentRoadTest.cityRoadVueObj.line_id;
            var rowkey = [IntelligentRoadTest.day, 20, 3, city_id, IntelligentRoadTest.road_id, line_id];
            IntelligentRoadTest.getSeventDayDataByLineId(rowkey);
            IntelligentRoadTest.getRoad20MData(rowkey);
            //DAY_`LINE_LEVEL`_`LINE_TYPE`_`CITY_ID`_`ROAD_ID`_`LINE_ID`
            IntelligentRoadTest.cityRoadSecondVM.cityRoadList = null;
            IntelligentRoadTest.getRoadSecondListData(IntelligentRoadTest.road_id, city, IntelligentRoadTest.day,
                3, isLP, IntelligentRoadTest.cityRoadIsPoor);
            IntelligentRoadTest.getRoadFirstListData(city, IntelligentRoadTest.day,
                3, isLP);
            if (isLP) {

            } else {
                //加载500米分段的全部20米线段数据
                IntelligentRoadTest.loadSplitLineSmallLine(IntelligentRoadTest.road_id, cityRoadData.line_id, city_id,
                    IntelligentRoadTest.day, 1);
            }
        }
        IntelligentRoadTest.loadLineByLevelFromBounds();
    } else if (name == "uptown") { //住宅区
        showOrHideInputImage(2)
        IntelligentRoadTest.uptownVM.uptownList = null;
        IntelligentRoadTest.getSenseDataByObjectId(2, IntelligentRoadTest.city, IntelligentRoadTest.day);
        var timer = setInterval(function () {
            if (IntelligentRoadTest.uptownVM.uptownList != null) {
                // $("#macSectorCount").html("返回上一级(" + $("#macSectorCountMessage").text() + ")");
                // IntelligentRoadTest.drawMk(IntelligentRoadTest.macSectorVM.macSectorList,6);
                clearInterval(timer);
                showOrHideInputImage(1);
            }
        }, 500);
    } else if (name == "college") { //高校
        showOrHideInputImage(2);
        IntelligentRoadTest.collegeVM.collegeList = null;
        IntelligentRoadTest.getSenseDataByObjectId(1, IntelligentRoadTest.city, IntelligentRoadTest.day);
        var timer = setInterval(function () {
            if (IntelligentRoadTest.collegeVM.collegeList != null) {
                // $("#macSectorCount").html("返回上一级(" + $("#macSectorCountMessage").text() + ")");
                // IntelligentRoadTest.drawMk(IntelligentRoadTest.macSectorVM.macSectorList,6);
                clearInterval(timer);
                showOrHideInputImage(1);
            }
        }, 500);
    } else if (name == "school" || name == "cityVillage" || name == "village" || name == "factory") { //新增场景
        showOrHideInputImage(2);
        IntelligentRoadTest.senseVM.senseList = null;
        IntelligentRoadTest.getSenseDataByObjectId(IntelligentRoadTest.senseObject.type, IntelligentRoadTest.city, IntelligentRoadTest.day);
        var timer = setInterval(function () {
            if (IntelligentRoadTest.senseVM.senseList != null) {
                // $("#macSectorCount").html("返回上一级(" + $("#macSectorCountMessage").text() + ")");
                // IntelligentRoadTest.drawMk(IntelligentRoadTest.macSectorVM.macSectorList,6);
                clearInterval(timer);
                showOrHideInputImage(1);
            }
        }, 500);
    } else if (name == "metro") { //地铁
        var cityName = $("#metroCityName").text().trim();
        showOrHideInputImage(2);
        IntelligentRoadTest.metroData = null;
        IntelligentRoadTest.getMetroStationsData(cityName, IntelligentRoadTest.day, true);
        if (IntelligentRoadTest.metroIndex == 1) {
            IntelligentRoadTest.getMetroFirstListData(cityName, IntelligentRoadTest.day);
        } else if (IntelligentRoadTest.metroIndex == 2) {
            IntelligentRoadTest.getMetroFirstListData(cityName, IntelligentRoadTest.day);
            var metroTimer = setInterval(function () {
                if (IntelligentRoadTest.metroData != null) {
                    IntelligentRoadTest.metroVM.goNextList(IntelligentRoadTest.currentMetroLineItem);
                    clearInterval(metroTimer);
                }
            }, 1000);
        } else if (IntelligentRoadTest.metroIndex == 3) {
            IntelligentRoadTest.getMetroFirstListData(cityName, IntelligentRoadTest.day);
            //补充一个地铁详情页查询
            var from_id = IntelligentRoadTest.metroCompleteVM.metroData.from_station_id;
            var to_id = IntelligentRoadTest.metroCompleteVM.metroData.to_station_id;
            IntelligentRoadTest.getMetroStationDataByID(from_id, to_id, IntelligentRoadTest.day,IntelligentRoadTest.metroCompleteVM.metroData.city_id);
        } else if (IntelligentRoadTest.metroIndex == 4) {
            IntelligentRoadTest.getMetroFirstListData(cityName, IntelligentRoadTest.day);
            //补充一个地铁详情页查询
            if (IntelligentRoadTest.metroCompleteVM != null) {
                var from_id = IntelligentRoadTest.metroCompleteVM.metroData.from_station_id;
                var to_id = IntelligentRoadTest.metroCompleteVM.metroData.to_station_id;
                IntelligentRoadTest.getMetroStationDataByID(from_id, to_id, IntelligentRoadTest.day,IntelligentRoadTest.metroCompleteVM.metroData.city_id);
            }
            var section_id = IntelligentRoadTest.metroVueObj.objData.section_id;
            IntelligentRoadTest.getMetro78MData(section_id);
            IntelligentRoadTest.getMetro78MSevenDayData(section_id);
        }
        // IntelligentRoadTest.getMetroStationsData(cityName , IntelligentRoadTest.day);
    } else if (name == "business") { //商务区
        showOrHideInputImage(2);
        IntelligentRoadTest.businessVM.businessList = null;
        IntelligentRoadTest.getSenseDataByObjectId(3, IntelligentRoadTest.city, IntelligentRoadTest.day);
        var timer = setInterval(function () {
            if (IntelligentRoadTest.businessVM.businessList != null) {
                // $("#macSectorCount").html("返回上一级(" + $("#macSectorCountMessage").text() + ")");
                // IntelligentRoadTest.drawMk(IntelligentRoadTest.macSectorVM.macSectorList,6);
                clearInterval(timer);
                showOrHideInputImage(1);
            }
        }, 500);
    } else if (name == "warwolf") { //战狼区域
        showOrHideInputImage(2);
        IntelligentRoadTest.warwolfVM.warwolfList = null;
        IntelligentRoadTest.getWarwolfListData(IntelligentRoadTest.day, IntelligentRoadTest.city, 3);
        var timer = setInterval(function () {
            if (IntelligentRoadTest.warwolfVM.warwolfList != null) {
                clearInterval(timer);
                showOrHideInputImage(1);
            }
        }, 500);
    } else if (name == "market") { //农贸市场
        showOrHideInputImage(2);
        IntelligentRoadTest.marketVM.marketList = null;
        IntelligentRoadTest.getSenseDataByObjectId(8, IntelligentRoadTest.city, IntelligentRoadTest.day);
        var timer = setInterval(function () {
            if (IntelligentRoadTest.marketVM.marketList != null) {
                clearInterval(timer);
                showOrHideInputImage(1);
            }
        }, 500);
    } else if (name == "food") {  //美食
        showOrHideInputImage(2);
        IntelligentRoadTest.foodVM.foodList = null;
        IntelligentRoadTest.getSenseDataByObjectId(9, IntelligentRoadTest.city, IntelligentRoadTest.day);
        var timer = setInterval(function () {
            if (IntelligentRoadTest.foodVM.foodList != null) {
                clearInterval(timer);
                showOrHideInputImage(1);
            }
        }, 500);
    } else if (name == "scenery") { //美景
        showOrHideInputImage(2);
        IntelligentRoadTest.sceneryVM.sceneryList = null;
        IntelligentRoadTest.getSenseDataByObjectId(7, IntelligentRoadTest.city, IntelligentRoadTest.day);
        var timer = setInterval(function () {
            if (IntelligentRoadTest.sceneryVM.sceneryList != null) {
                clearInterval(timer);
                showOrHideInputImage(1);
            }
        }, 500);
    } else if (name == "site") { //场馆
        showOrHideInputImage(2);
        IntelligentRoadTest.siteVM.siteList = null;
        IntelligentRoadTest.getSenseDataByObjectId(10, IntelligentRoadTest.city, IntelligentRoadTest.day);
        var timer = setInterval(function () {
            if (IntelligentRoadTest.siteVM.siteList != null) {
                clearInterval(timer);
                showOrHideInputImage(1);
            }
        }, 500);
    }

//  在分屏页，并且存储的对象类型为弱区，并且存储的查询多边形和当前记录的多边形一致，则帮画出该多边形
    if ((index == null || index == 0) && IntelligentRoadTest.isScreenCompared
        && IntelligentRoadTestScreenCompared.messageObject.type == 'poor') {
        var gis_data = IntelligentRoadTestScreenCompared.messageObject.item.gis_data.replace(/;/g, '|');
        if (gis_data == IntelligentRoadTest.polygonContour) {
            IntelligentRoadTest.isShowGrid = true;
            IntelligentRoadTest.showPolygon(IntelligentRoadTestScreenCompared.messageObject.item.gis_data, true);
        }
    }

    if ((index == null || index == 7 || index == 8 || index == 14) && IntelligentRoadTest.isScreenCompared
        && (IntelligentRoadTestScreenCompared.messageObject.type == 'highway'
            || IntelligentRoadTestScreenCompared.messageObject.type == 'railway'
            || IntelligentRoadTestScreenCompared.messageObject.type == 'cityRoad') && IntelligentRoadTestScreenCompared.messageObject.item.isLP) {
        if (IntelligentRoadTestScreenCompared.messageObject.type == 'highway') {
            IntelligentRoadTest.hideOsmStarEndMk();
            var city_id = noceUtil.city_LATN_ID[IntelligentRoadTestScreenCompared.messageObject.item.city];
            IntelligentRoadTest.loadContinueLineMeterData(IntelligentRoadTest.day, 1, city_id, IntelligentRoadTestScreenCompared.messageObject.item.road_id, IntelligentRoadTestScreenCompared.messageObject.item.contain_ids);
        } else if (IntelligentRoadTestScreenCompared.messageObject.type == 'railway') {
            IntelligentRoadTest.hideOsmStarEndMk();
            var city_id = noceUtil.city_LATN_ID[IntelligentRoadTestScreenCompared.messageObject.item.city];
            IntelligentRoadTest.loadContinueLineMeterData(IntelligentRoadTest.day, 2, city_id, IntelligentRoadTestScreenCompared.messageObject.item.road_id, IntelligentRoadTestScreenCompared.messageObject.item.contain_ids);
        } else if (IntelligentRoadTestScreenCompared.messageObject.type == 'cityRoad') {
            IntelligentRoadTest.hideOsmStarEndMk();
            var city_id = noceUtil.city_LATN_ID[IntelligentRoadTestScreenCompared.messageObject.item.city];
            IntelligentRoadTest.loadContinueLineMeterData(IntelligentRoadTest.day, 3, city_id, IntelligentRoadTestScreenCompared.messageObject.item.road_id, IntelligentRoadTestScreenCompared.messageObject.item.contain_ids);
        }
    }

    //移动一下位置
    //加载图层数据
    setTimeout(function () {
        if(!IntelligentRoadTest.showNrCover){ //未开启显示附近覆盖
            IntelligentRoadTest.requery = true;
            IntelligentRoadTest.submitLayersData();
        }else{ //开启显示附近覆盖
            if(IntelligentRoadTest.map.getZoom() >= IntelligentRoadTest.nrCoverMaxZoom){
                IntelligentRoadTest.requery = true;
                IntelligentRoadTest.submitLayersData();
            }
        }

    }, 100);
    IntelligentRoadTest.seachTime = true;
    setTimeout(function () {
        IntelligentRoadTest.seachTime = false;
    }, 1200);
//切换日期后重新绘制多边形和栅格
//    setTimeout(function(){
//    	var i=IntelligentRoadTest.mkIndex;
//    	IntelligentRoadTest.mapClick=true;
//	  	setTimeout(function(){
//			IntelligentRoadTest.mapClick=false;
//	  	},1200);
//	  	if(IntelligentRoadTest.currentLocation != ""){
//            if(IntelligentRoadTest.index==0){
//                IntelligentRoadTest.rfgVM.showMessage(IntelligentRoadTest.rfgVM.poorAreaList[i],IntelligentRoadTest.mkIndex);
//            }
//            if(IntelligentRoadTest.index==1){
//                IntelligentRoadTest.concernAreaVM.showMessage(IntelligentRoadTest.concernAreaVM.concernAreaList[i],IntelligentRoadTest.mkIndex);
//            }
//            if(IntelligentRoadTest.index==3){
//                IntelligentRoadTest.sectorVM.showMessage(IntelligentRoadTest.sectorVM.sectorList[i],IntelligentRoadTest.mkIndex);
//            }
//            if(IntelligentRoadTest.index==5){
//                IntelligentRoadTest.boneAreaVM.showMessage(IntelligentRoadTest.boneAreaVM.boneAreaList[i],IntelligentRoadTest.mkIndex)
//            }
//            if(IntelligentRoadTest.index==6){
//                $('#showMacSectorDiv .listUL .cellName').eq(i).click();
//                IntelligentRoadTest.macSectorVM.showMessage(IntelligentRoadTest.macSectorVM.macSectorList[i],IntelligentRoadTest.mkIndex)
//            }
//            if(IntelligentRoadTest.index==9){
//                IntelligentRoadTest.uptownVM.showMessage(IntelligentRoadTest.uptownVM.uptownList[i],IntelligentRoadTest.mkIndex)
//            }
//            if(IntelligentRoadTest.index==10){
//                IntelligentRoadTest.collegeVM.showMessage(IntelligentRoadTest.collegeVM.collegeList[i],IntelligentRoadTest.mkIndex)
//            }
//            if(IntelligentRoadTest.index==11){
//                IntelligentRoadTest.businessVM.showMessage(IntelligentRoadTest.businessVM.businessList[i],IntelligentRoadTest.mkIndex)
//            }
//            if(IntelligentRoadTest.index==12){
//                IntelligentRoadTest.sceneryVM.showMessage(IntelligentRoadTest.sceneryVM.sceneryList[i],IntelligentRoadTest.mkIndex)
//            }
//        }
//    	  setTimeout(function(){
//    			  $('#mapClickResult').hide();
//          },200);
//    },3000)
}

//搜索输入绑定回车
function searchenter(event) {
    event = event || window.event;
    if (event.keyCode == 13 && IntelligentRoadTest.index == null) {
        $("#searchButton").click();
    }
}


//从数组中移除需要隐藏图例id
IntelligentRoadTest.removeId = function IntelligentRoadTest_removeId(idArr, id) {
    var NewId = [];
    if (idArr.length > 0) {
        for (var i = 0; i < idArr.length; i++) {
            if (idArr[i] != id) {
                NewId.push(idArr[i]);
            }
        }
    }
    return NewId;
};
//根据图例id过滤栅格rsrp数据，一般用户图例点击或者需要重绘的时候
/**********************************
 * @funcname IntelligentRoadTest.ClearData
 * @funcdesc //根据图例id过滤栅格rsrp数据，一般用户图例点击或者需要重绘的时候
 * @param {Array} data 栅格数组
 * @return {String} id 需要过滤的区间下标
 * @author 陈小芳
 * @create 20181120
 ***********************************/
IntelligentRoadTest.ClearData = function IntelligentRoadTest_ClearData(data, id) {
    //0-最小经度	1-最小纬度	2-最大经度	3-最小纬度	4-rsrp平均值	5-栅格号	6-rsrp覆盖率	7-mr栅格条数	8-接入扇区	9-地市	10-区县	11-中心经度	12-中心纬度  13-mr数量（多选相加）   14-上行速率   15-下行速率
    var gridInterval=IntelligentRoadTest.gridInterval;
    var newTileData = [];
    if (IntelligentRoadTest.gridTypeIndex == 0 || IntelligentRoadTest.gridTypeIndex == 6 || IntelligentRoadTest.gridTypeIndex == 7) {//覆盖质量,EO/IO,NB栅格
        for (var i = 0; i < data.length; i++) {
            if (id == "1") {//去掉大于等于-85的 (-85,0]
                if (gridInterval.you.min >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.you.max) {
                    newTileData.push(data[i]);
                }
            } else if (id == "2") {//去掉大于等于-95  小于-85的 (-95,-85]
                if (gridInterval.liang.min >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.liang.max) {
                    newTileData.push(data[i]);
                }
            } else if (id == "3") {//去掉大于等于-105  小于-95的 (-105,-95]
                if (gridInterval.zhong.min >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.zhong.max) {
                    newTileData.push(data[i]);
                }
            } else if (id == "4") {//去掉大于等于-115  小于-105的 (-115,-105]
                if (gridInterval.cha.min >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.cha.max) {
                    newTileData.push(data[i]);
                }
            } else if (id == "5") {//去掉 小于-115的 (-140,-115]
                if (gridInterval.jicha.min >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.jicha.max) {
                    newTileData.push(data[i]);
                }
            } else if (id == "6") {//去掉 小于等于0 记录数≤3
                /*if (0 >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.notCount.value) {
                    newTileData.push(data[i]);
                }*/
                if(data[i][6]!="<=n"){
                    newTileData.push(data[i]);
                }
            }
        }
    } else if (IntelligentRoadTest.gridTypeIndex == 1) {//上行
        for (var i = 0; i < data.length; i++) {
            if (id == "1") {//(5,40]
                if (gridInterval.you.min >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.you.max) {
                    newTileData.push(data[i]);
                }
            } else if (id == "2") {//(3,5]
                if (gridInterval.liang.min >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.liang.max) {
                    newTileData.push(data[i]);
                }
            } else if (id == "3") {//(1,3]
                if (gridInterval.zhong.min >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.zhong.max) {
                    newTileData.push(data[i]);
                }
            } else if (id == "4") {//(0.25,1]
                if (gridInterval.cha.min >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.cha.max) {
                    newTileData.push(data[i]);
                }
            } else if (id == "5") {//(0,0.25]
                if (gridInterval.jicha.min >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.jicha.max) {
                    newTileData.push(data[i]);
                }
            } else if (id == "6") {//过滤记录数
                /*if (-2 > parseFloat(data[i][4]) || parseFloat(data[i][4]) > 0) {
                    newTileData.push(data[i]);
                }*/
                if(data[i][6]!="<=n"){
                    newTileData.push(data[i]);
                }
            }
        }

    } else if (IntelligentRoadTest.gridTypeIndex == 2) {//下行
        for (var i = 0; i < data.length; i++) {
            if (id == "1") {//(12,150]
                if (gridInterval.you.min >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.you.max) {
                    newTileData.push(data[i]);
                }
            } else if (id == "2") {//(8,12]
                if (gridInterval.liang.min >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.liang.max) {
                    newTileData.push(data[i]);
                }
            } else if (id == "3") {//(5,8]
                if (gridInterval.zhong.min >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.zhong.max) {
                    newTileData.push(data[i]);
                }
            } else if (id == "4") {//(2,5]
                if (gridInterval.cha.min >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.cha.max) {
                    newTileData.push(data[i]);
                }
            } else if (id == "5") {//(0,2]
                if (gridInterval.jicha.min >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.jicha.max) {
                    newTileData.push(data[i]);
                }
            } else if (id == "6") {
                /*if (-2 > parseFloat(data[i][4]) || parseFloat(data[i][4]) > 0) {
                    newTileData.push(data[i]);
                }*/
                if(data[i][6]!="<=n"){
                    newTileData.push(data[i]);
                }
            }
        }
    } else if (IntelligentRoadTest.gridTypeIndex == 3 || IntelligentRoadTest.gridTypeIndex == 4 || IntelligentRoadTest.gridTypeIndex == 5) {//MOD3 越区 重叠
        for (var i = 0; i < data.length; i++) {
            if (id == "1") {//(0,5]
                if (gridInterval.you.min > parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.you.max/100) {
                    newTileData.push(data[i]);
                }
            } else if (id == "2") {//(5,15]
                if (gridInterval.liang.min/100 >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.liang.max/100) {
                    newTileData.push(data[i]);
                }
            } else if (id == "3") {//(15,25]
                if (gridInterval.zhong.min/100 >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.zhong.max/100) {
                    newTileData.push(data[i]);
                }
            } else if (id == "4") {//(25,35]
                if (gridInterval.cha.min/100 >= parseFloat(data[i][4]) || parseFloat(data[i][4]) > gridInterval.cha.max/100) {
                    newTileData.push(data[i]);
                }
            } else if (id == "5") {//(35,100]
                if (gridInterval.jicha.min/100 >= parseFloat(data[i][4])) {
                    newTileData.push(data[i]);
                }
            } else if (id == "6") {
                /*if (-3 != parseFloat(data[i][4])) {
                    newTileData.push(data[i]);
                }*/
                if(data[i][6]!="<=n"){
                    newTileData.push(data[i]);
                }
            }
        }
    }


    return newTileData;
}
//根据图例id过滤描点rsrp数据，一般用户图例点击或者需要重绘的时候
IntelligentRoadTest.ClearDtData = function IntelligentRoadTest_ClearDtData(data, id) {
    var newTileData = [];
    for (var i = 0; i < data.length; i++) {
        if (id == "1") {//去掉大于等于-85的
            if (data[i][2] <= -85) {
                newTileData.push(data[i]);
            }
        } else if (id == "2") {//去掉大于等于-95  小于等于-85的
            if (-95 >= data[i][2] || data[i][2] > -85) {
                newTileData.push(data[i]);
            }
        } else if (id == "3") {//去掉大于等于-105  小于等于-95的
            if (-105 >= data[i][2] || data[i][2] > -95) {
                newTileData.push(data[i]);
            }
        } else if (id == "4") {//去掉大于等于-115  小于等于-105的
            if (-115 >= data[i][2] || data[i][2] > -105) {
                newTileData.push(data[i]);
            }
        } else if (id == "5") {//去掉 小于等于-115的
            if (data[i][2] > -115) {
                newTileData.push(data[i]);
            }
        } else {
            newTileData.push(data[i]);
        }
    }

    return newTileData;
}
//将图例恢复为全部显示
IntelligentRoadTest.initColorBarAll = function IntelligentRoadTest_initColorBarAll() {
    //图例重设
    $("#colorLegenOther").children().each(function () {
        if ($(this).hasClass("grey")) {
            $(this).removeClass("grey");
        }
    });
    /*$(".fieldsetInfo .gridTypeDiv:eq(2) input[name='legend-grid']").each(function(){
        $(this).attr("checked", true);
        $(this).siblings('label').css("color","#3285FF");
    });*/
    /* //记录数<=3默认不显示
     $("#level_6").addClass("grey");
     $("#notCountLegend").attr("checked", false);
     $("#notCountLegend").siblings('label').css("color","");
     IntelligentRoadTest.colorBarArr.push(6);*/
}
//-------------------------  DT列表开始   -------------------------
/*根据传入的数据集和页码来获取到该页的数据集*/
IntelligentRoadTest.getDataListByPage = function IntelligentRoadTest_getDataListByPage(allData, page) {
    var dataList = [];
    if (allData != null && allData.length > 0) {
        for (var i = 0; i < IntelligentRoadTest.pageSize; i++) {
            if ((page - 1) * IntelligentRoadTest.pageSize + i >= allData.length) {
                IntelligentRoadTest.lastIndex = allData.length;
                break;
            } else {
                dataList[i] = allData[(page - 1) * IntelligentRoadTest.pageSize + i];
                if (i == 0) {
                    IntelligentRoadTest.startIndex = (page - 1) * IntelligentRoadTest.pageSize + i + 1;
                }
                if (i == IntelligentRoadTest.pageSize - 1) {
                    IntelligentRoadTest.lastIndex = (page - 1) * IntelligentRoadTest.pageSize + i + 1;
                }
            }
        }
    } else {
        IntelligentRoadTest.startIndex = 0;
        IntelligentRoadTest.lastIndex = 0;
    }
    //IntelligentRoadTest.drawMk(dataList);
    return dataList;
}

IntelligentRoadTest.dealInitData = function IntelligentRoadTest_dealInitData(data) {
    var result = callBackChangeData(data);
    // console.log(result);
    IntelligentRoadTest.result = result;
    IntelligentRoadTest.currentResult = result;
    IntelligentRoadTest.dtCrossFliterObj.remove();
    IntelligentRoadTest.dtCrossFliterObj.add(result);
    //IntelligentRoadTest.showDTData(result);
    // $("#dtList .flexRow ").eq(0).children(".selected").trigger("click");
    var SelectName = $("#dtListSelectName").text();
    var flexCol = $("#dtList  .flexRow .flexCol");
    IntelligentRoadTest.triggleFilter(SelectName, flexCol);
}

IntelligentRoadTest.showDTData = function IntelligentRoadTest_showDTData(result) {
    IntelligentRoadTest.dtCurrentPage = 1;
    IntelligentRoadTest.dtTotalCount = result.length;
    var pageCount = result.length / IntelligentRoadTest.pageSize;
    if ((result.length % IntelligentRoadTest.pageSize) != 0) {
        IntelligentRoadTest.dtTotalPage = parseInt(pageCount) + 1; //总页数，没有整除时加上1
    } else {
        IntelligentRoadTest.dtTotalPage = pageCount;  //整除不用加1
    }
    if (IntelligentRoadTest.dtVM == null) {
        IntelligentRoadTest.dtVM = new Vue({
            el: '#dtShowDiv',
            data: {
                dtList: IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.currentResult, IntelligentRoadTest.dtCurrentPage),
                totalPages: IntelligentRoadTest.dtTotalPage,
                totalCounts: IntelligentRoadTest.dtTotalCount,
                currentPageNum: IntelligentRoadTest.dtCurrentPage,
                startIndex: IntelligentRoadTest.startIndex,
                lastIndex: IntelligentRoadTest.lastIndex,
                uname: IntelligentRoadTest.currentUser
            },
            methods: {
                dtColorPick : function(){
                    $('.dtsquarePick').colpick({
                        layout: 'rgbhex',
                        color: '76ACFC',
                        livePreview: 0,
                        onSubmit: function onSubmit(hsb, hex, rgb, el) {
                            $(el).css('background-color', '#' + hex);
                            $(el).colpickHide();
                        }
                    });
                },
                dtCircle: function (item) {
                    IntelligentRoadTest.dtCircle(item);
//                    IntelligentRoadTest.loadCustomPolygon(item,'blue');
                },
                dtGrid: function (item) {
                    IntelligentRoadTest.dtGrid(item);
                },
                dtShow: function (item, event) {
                    //进入时先将前面加载过的进行清除
                    for (var i = 0; i < IntelligentRoadTest.dtPolygon.length; i++) {
                        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.dtPolygon[i]);
                    }
                    IntelligentRoadTest.dtPolygon = [];

                    IntelligentRoadTest.GridMap.clear();
                    IntelligentRoadTest.GridMapCircleDataArr = null;
                    IntelligentRoadTest.GridMapCircleDataArr = [];
                    var color = "rgb(254, 133, 134)";
                    if (event != null) {
                        color = $(event.currentTarget).parents(".element").find(".dtsquarePick").css("background-color");
                    }
//                    if(event!=null){
//                    	var color = $(event.currentTarget).parents(".element").find(".dtsquarePick").css("background-color");
//                    }else{
//                    	var color = "rgb(254, 133, 134)";
//                    }
                    if (color != "rgb(254, 133, 134)") {
                        item.color = color;
                    }

                    if (item.type == 1) {
                        //dt共享
                        IntelligentRoadTest.dtCircle(item);
                    } else {
                        //点图层和多边形图层共享
                        if (item.custom_area_style == 1) {
                            //object_type = "点图层";
                            IntelligentRoadTest.dmCircle(item);
                        } else {
                            // object_type = "多边形图层";
                            IntelligentRoadTest.loadCustomPolygon(item, item.color);
                        }
                        //IntelligentRoadTest.dmShareUpdate(shareType,item);
                    }
                },
                dtShare: function (item, event) {
                    //非审核员分支
                    if (!concernAreaShare.isAuditor) {
                        if ($(event.currentTarget).attr("title") == "共享") {
                            // $(event.currentTarget).attr("title","取消共享");
                            // $(event.currentTarget).children().attr("src","../js/IntelligentRoadTest/images/dtUnShare.png");
                            $(".submitModal").show().delay(1000).fadeOut();
                            IntelligentRoadTest.dmShare(item, 1);
                        } else if ($(event.currentTarget).attr("title") == "取消共享") {
                            // $(event.currentTarget).attr("title","共享");
                            // $(event.currentTarget).children().attr("src","../js/IntelligentRoadTest/images/dtShare.png");
                            IntelligentRoadTest.dmCancelShare(item, 1);
                        } else if ($(event.currentTarget).attr("title") == "撤销申请") {
                            // $(event.currentTarget).attr("title","共享");
                            // $(event.currentTarget).children().attr("src","../js/IntelligentRoadTest/images/dtShare.png");
                            IntelligentRoadTest.dmCancel(item);
                        }
                    } else {//审核员分支
                        if ($(event.currentTarget).attr("title") == "共享") {
                            $(event.currentTarget).attr("title", "取消共享");
                            $(event.currentTarget).children().attr("src", "../js/IntelligentRoadTest/images/dtUnShare.png");
                            IntelligentRoadTest.dmShare(item, 2);
                        } else if ($(event.currentTarget).attr("title") == "取消共享") {
                            $(event.currentTarget).attr("title", "共享");
                            $(event.currentTarget).children().attr("src", "../js/IntelligentRoadTest/images/dtShare.png");
                            IntelligentRoadTest.dmCancelShare(item, 2);
                        }
                    }
                },
                dtFileDownload: function (item) {

                    if (item.type == 1) {
                        //dt共享
                        IntelligentRoadTest.dtFileDownload(item);
                    } else {
                        //点图层和多边形图层共享
                        if (item.custom_area_style == 1) {
                            IntelligentRoadTest.pointFileDownload(item);
                        } else {
                            IntelligentRoadTest.polygonFileDownload(item);
                        }

                    }
                },
                dtDelete: function (item) {
                    if (item.type == 1) {
                        //dt共享
                        IntelligentRoadTest.dtDelete(item);
                    } else {
                        //点图层和多边形图层删除
                        if (item.custom_area_style == 1) {
                            IntelligentRoadTest.pointDelete(item);
                        } else {
                            IntelligentRoadTest.polygonDelete(item);
                        }
                        //IntelligentRoadTest.dmShareUpdate(shareType,item);
                    }
                },
                viewAudit: function (event, audit_option) {
                    var top = event.pageY;
                    $("#dtAuditOption").html(audit_option);
                    $(".dtAuditTip").css("top", top - 70);
                    $(".dtAuditTip").show();
                    $(".dtAuditTip").mouseover(function () {
                        $(".dtAuditTip").show();
                    }).mouseout(function () {
                        $(".dtAuditTip").hide();
                    })
                },
                hideAudit: function () {
                    $(".dtauditTip").hide();
                },
                lastOrNext: function (type) {
                    if (type == 0) {
                        //上一页
                        if (IntelligentRoadTest.dtCurrentPage > 1) {
                            IntelligentRoadTest.dtCurrentPage = IntelligentRoadTest.dtCurrentPage - 1;
                            IntelligentRoadTest.dtVM.dtList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.currentResult, IntelligentRoadTest.dtCurrentPage);
                            IntelligentRoadTest.dtVM.currentPageNum = IntelligentRoadTest.dtCurrentPage;
                            IntelligentRoadTest.dtVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.dtVM.lastIndex = IntelligentRoadTest.lastIndex;
                        } else {
                            alert("当前页是第一页");
                        }
                    } else {
                        if (IntelligentRoadTest.dtCurrentPage < IntelligentRoadTest.dtTotalPage) {
                            IntelligentRoadTest.dtCurrentPage = IntelligentRoadTest.dtCurrentPage + 1;
                            IntelligentRoadTest.dtVM.dtList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.currentResult, IntelligentRoadTest.dtCurrentPage);
                            IntelligentRoadTest.dtVM.currentPageNum = IntelligentRoadTest.dtCurrentPage;
                            IntelligentRoadTest.dtVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.dtVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                    }
                    // $("#dtCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.dtTotalCount +"条数据)");
                },
                gotoPage: function () {
                    var page = $("#dtPage").val();
                    page = parseInt(page);
                    if (page > 0 && page <= IntelligentRoadTest.dtTotalPage) {
                        IntelligentRoadTest.dtCurrentPage = page;
                        IntelligentRoadTest.dtVM.dtList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.currentResult, IntelligentRoadTest.dtCurrentPage);
                        IntelligentRoadTest.dtVM.currentPageNum = IntelligentRoadTest.dtCurrentPage;
                        IntelligentRoadTest.dtVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.dtVM.lastIndex = IntelligentRoadTest.lastIndex;
                    }
                    // $("#dtCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.dtTotalCount +"条数据)");
                },
                goLast: function () {
                    IntelligentRoadTest.dtCurrentPage = IntelligentRoadTest.dtTotalPage;
                    IntelligentRoadTest.dtVM.dtList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.currentResult, IntelligentRoadTest.dtCurrentPage);
                    IntelligentRoadTest.dtVM.currentPageNum = IntelligentRoadTest.dtCurrentPage;
                    IntelligentRoadTest.dtVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.dtVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // $("#dtCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.dtTotalCount +"条数据)");
                },
                goFirst: function () {
                    IntelligentRoadTest.dtCurrentPage = 1;
                    IntelligentRoadTest.dtVM.dtList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.currentResult, IntelligentRoadTest.dtCurrentPage);
                    IntelligentRoadTest.dtVM.currentPageNum = IntelligentRoadTest.dtCurrentPage;
                    IntelligentRoadTest.dtVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.dtVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // $("#dtCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.dtTotalCount +"条数据)");
                }
            }
        });
    } else {
        IntelligentRoadTest.dtVM.dtList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.currentResult, IntelligentRoadTest.dtCurrentPage);
        IntelligentRoadTest.dtVM.totalPages = IntelligentRoadTest.dtTotalPage;
        IntelligentRoadTest.dtVM.totalCounts = IntelligentRoadTest.dtTotalCount;
        IntelligentRoadTest.dtVM.currentPageNum = IntelligentRoadTest.dtCurrentPage;
        IntelligentRoadTest.dtVM.startIndex = IntelligentRoadTest.startIndex;
        IntelligentRoadTest.dtVM.lastIndex = IntelligentRoadTest.lastIndex;
        // $("#dtCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
        //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.dtTotalCount +"条数据)");
    }


}

IntelligentRoadTest.initDTData = function IntelligentRoadTest_initDTData() {
    var sqlList = [];
    var list = ["IntelligentRoadTestV2_19_dtTableList"];
    var city = $('#DTCityName').text().trim();
    var date = IntelligentRoadTest.day;
    var formatDate = date.substring(0, 4) + "-" + date.substring(4, 6) + "-" + date.substring(6, 8);
    if (city != "全省") {
        list.push("CITY: and city = '" + city + "'");
    }
    //去掉时间限制
    // list.push("DATE: and dt_time < '"+formatDate+"'");
    var username = $('#headerUserForm_a').text().trim();
    list.push("USERNAME:" + username);
    if (!concernAreaShare.isManager) {

        var Condition = "AND (creator =\'" + username + "\' OR share_status = \"已共享\" or share_status = \"取消共享审核中\")";
        list.push("Condition:" + Condition);

    }

    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealInitData];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);
    //记录查询条件,用于下次判断
    IntelligentRoadTest.dtCurrentSelectConditon = "" + city;
}

//-------------------------  DT列表结束   -------------------------

//描点
IntelligentRoadTest.dtCircle = function IntelligentRoadTest_dtCircle(data) {
//	console.log(data);
    var dt_id = data.id;
    // var mid_lng = data.center_longitude_baidu;
    // var mid_lat = data.center_latgitude_baidu;
    // IntelligentRoadTest.map.panTo(new BMap.Point(mid_lng,mid_lat));

    var list = ["IntelligentRoadTest_19_dtDetailCircle", "DTID:" + dt_id];
    var progressBarSqls = [];
    progressBarSqls.push(list);
    var functionlist = [IntelligentRoadTest.dtCircleDraw];
    var dataBase = [3];
    progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase, [data]);
}

//点图层
IntelligentRoadTest.dmCircle = function IntelligentRoadTest_dmCircle(data) {
    var custom_area_id = data.id;
    var list = ["IntelligentRoadTest_19_dmPointDetailCircle", "DMID:" + custom_area_id];
    var progressBarSqls = [];
    progressBarSqls.push(list);
    var functionlist = [IntelligentRoadTest.dmPointCircleDraw];
    var dataBase = [3];
    progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase, [data]);
}


//点数据描点
IntelligentRoadTest.dmPointCircleDraw = function IntelligentRoadTest_dmPointCircleDraw(data, dtObject) {
    var result = callBackChangeData(data);
    for (var i = 0; i < IntelligentRoadTest.gridThresholds.length; i++) {
        IntelligentRoadTest.gridThresholds[i]["color"] = dtObject.color;
    }
    IntelligentRoadTest.GridMap.setThresholds(IntelligentRoadTest.gridThresholds);
    data = null;
    IntelligentRoadTest.isShowGrid = false;
    IntelligentRoadTest.isShowDTGrid = false;//正在查看路测栅格,(进入到路测栅格数据回调方法内)
//	console.log(result);
    IntelligentRoadTest.GridMap.clear();
    if (IntelligentRoadTest.isThreeNetStatus) {
        IntelligentRoadTest.GridMapM.clear();
        IntelligentRoadTest.GridMapU.clear();
    }

//	IntelligentRoadTest.GridMapCircle.clear();
    IntelligentRoadTest.GridMapCircleDataArr = null;
    IntelligentRoadTest.GridMapCircleDataArr = [];
    var minLng = null;
    var maxLng = null;
    var minLat = null;
    var maxLat = null;
    for (var i = 0; i < result.length; i++) {

        if (maxLng == null) {
            maxLng = result[i].longitude_baidu;
        }
        if (maxLat == null) {
            maxLat = result[i].latitude_baidu;
        }
        if (minLat == null) {
            minLat = result[i].latitude_baidu;
        }
        if (minLng == null) {
            minLng = result[i].longitude_baidu;
        }
        if (maxLat < result[i].latitude_baidu) {
            maxLat = result[i].latitude_baidu;
        }
        if (maxLng < result[i].longitude_baidu) {
            maxLng = result[i].longitude_baidu;
        }
        if (minLat > result[i].latitude_baidu) {
            minLat = result[i].latitude_baidu;
        }
        if (minLng > result[i].longitude_baidu) {
            minLng = result[i].longitude_baidu;
        }

        var lng = result[i].longitude_baidu;
        var lat = result[i].latitude_baidu;
        var rsrp = result[i].main_rsrp;
        // var circleData = [lng,lat,rsrp];
        var circleArr = [lng, lat, "200", dtObject.dt_name, result[i]["value"], result[i]["remark"]];
        IntelligentRoadTest.GridMapCircleDataArr.push(circleArr);
    }

    if (minLng != null && maxLng != null && minLat != null && maxLat != null) {
        var mid_lng = (minLng + maxLng) / 2;
        var mid_lat = (minLat + maxLat) / 2;
        var zoom = getZoom(maxLng, minLng, maxLat, minLat);
        IntelligentRoadTest.map.setZoom(zoom);
        IntelligentRoadTest.map.setCenter(new BMap.Point(mid_lng, mid_lat));
    }
    IntelligentRoadTest.GridMap.clear();
    var DTData = IntelligentRoadTest.GridMapCircleDataArr;
    /*for(var j=0;j<IntelligentRoadTest.colorBarArr.length;j++){
        DTData = IntelligentRoadTest.ClearDtData(DTData,IntelligentRoadTest.colorBarArr[j]);
    }*/
//	IntelligentRoadTest.GridMapCircle.drawCircle(DTData);
    if (DTData.length > 0) {
        IntelligentRoadTest.GridMap.drawCircle(DTData);
    }
    IntelligentRoadTest.legendGrid();
    DTData = null;


}

//栅格
IntelligentRoadTest.dtGrid = function IntelligentRoadTest_dtGrid(data) {
//	console.log(data);
    var dt_id = data.id;
    // var mid_lng = data.center_longitude_baidu;
    // var mid_lat = data.center_latgitude_baidu;
    // IntelligentRoadTest.map.panTo(new BMap.Point(mid_lng,mid_lat));

    var list = ["IntelligentRoadTest_20_dtDetailGrid", "DTID:" + dt_id];
    var progressBarSqls = [];
    progressBarSqls.push(list);
    var functionlist = [IntelligentRoadTest.dtGridDraw];
    var dataBase = [3];
    progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase, [data]);
}

/**********************************
 * @funcname IntelligentRoadTest.dtFileDownload
 * @funcdesc  dt文件下载
 * @param {object} item  列表项数据
 * @return
 * @author  戴岭南
 * @create 2018/4/8 14:24
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.dtFileDownload = function IntelligentRoadTest_dtFileDownload(item) {
//	console.log(data);
    var form = $("<form>");   //定义一个form表单
    form.attr('style', 'display:none');   //在form表单中添加查询参数
    form.attr('target', '');
    form.attr('method', 'post');
    form.attr('action', 'pages_dtUpload_DtUpload_downloadFileFromDb.action');
    // creator = '<textarea name="creator">'+item["creator"]+'</textarea>';
    // createTime = '<textarea name="createTime">'+item["create_time"]+'</textarea>';
    let id = '<textarea name="id">' + item["id"] + '</textarea>';

    // form.append(creator);
    // form.append(createTime);
    form.append(id);

    $('body').append(form);  //将表单放置在web中
    form.submit();
    form.remove();
}

/**********************************
 * @funcname IntelligentRoadTest.dtDelete
 * @funcdesc  dt文件删除
 * @param {object} item  列表项数据
 * @return
 * @author  戴岭南
 * @create 2018/4/8 14:26
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.dtDelete = function IntelligentRoadTest_dtDelete(item) {
//	console.log(data);
    //只有上传者才能删除文件
    if (item.iscandelete != 1) {
        return;
    }
//	console.log(data["id"]+""+data["create_time"]+""+data["creator"]);
    var ajaxData = {
        "id": item["id"],
        // "createTime":item["create_time"],
        // "creator":item["creator"],
    };
    if (confirm("确定删除此条数据？")) {
        var $ajax = $.ajax({
            type: 'post',
            data: ajaxData,
            url: 'pages_dtUpload_DtUpload_deleteFileFromDB.action',
            cache: false,
            dataType: 'json',
            success: function (data) {
//		        	console.log(data);
                IntelligentRoadTest.initDTData();
//		        	console.log("成功");

            },
            error: function (data, textStatus) {
                console.log("删除dt文件失败");
            }
        });
    } else {

    }
}

/**********************************
 * @funcname IntelligentRoadTest.pointFileDownload
 * @funcdesc  点图层文件下载
 * @param {object} item  列表项数据
 * @return
 * @author  戴岭南
 * @create 2018/4/8 14:24
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.pointFileDownload = function IntelligentRoadTest_pointFileDownload(item) {
//	console.log(data);
    var form = $("<form>");   //定义一个form表单
    form.attr('style', 'display:none');   //在form表单中添加查询参数
    form.attr('target', '');
    form.attr('method', 'post');
    form.attr('action', 'pages_dmCustom_Point_download.action');
    // creator = '<textarea name="creator">'+item["creator"]+'</textarea>';
    // createTime = '<textarea name="createTime">'+item["create_time"]+'</textarea>';
    let id = '<textarea name="id">' + item["id"] + '</textarea>';

    // form.append(creator);
    // form.append(createTime);
    form.append(id);

    $('body').append(form);  //将表单放置在web中
    form.submit();
    form.remove();
}

/**********************************
 * @funcname IntelligentRoadTest.polygonFileDownload
 * @funcdesc  多边形图层文件下载
 * @param {object} item  列表项数据
 * @return
 * @author  戴岭南
 * @create 2018/4/8 14:24
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.polygonFileDownload = function IntelligentRoadTest_polygonFileDownload(item) {
//	console.log(data);
    var form = $("<form>");   //定义一个form表单
    form.attr('style', 'display:none');   //在form表单中添加查询参数
    form.attr('target', '');
    form.attr('method', 'post');
    form.attr('action', 'pages_dmCustom_Polygon_download.action');
    // creator = '<textarea name="creator">'+item["creator"]+'</textarea>';
    // createTime = '<textarea name="createTime">'+item["create_time"]+'</textarea>';
    var id = '<textarea name="id">' + item["id"] + '</textarea>';

    // form.append(creator);
    // form.append(createTime);
    form.append(id);

    $('body').append(form);  //将表单放置在web中
    form.submit();
    form.remove();
}

/**********************************
 * @funcname IntelligentRoadTest.pointDelete
 * @funcdesc  点图层文件删除
 * @param {object} item  列表项数据
 * @return
 * @author  戴岭南
 * @create 2018/4/8 14:26
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.pointDelete = function IntelligentRoadTest_pointDelete(item) {
//	console.log(data);
    //只有上传者才能删除文件
    if (item.iscandelete != 1) {
        return;
    }
    // if(item.share_status=="已共享"||item.share_status=="共享审核中"||item.share_status=="取消共享审核中"){
    if (item.share_status == "已共享") {
        alert("处于" + item.share_status + "状态的文件请先取消分享再删除！");
        return;
    } else if (item.share_status == "共享审核中") {
        alert("处于" + item.share_status + "状态的文件请先撤销申请再删除！");
        return;
    } else if (item.share_status == "取消共享审核中") {
        alert("处于" + item.share_status + "状态的文件须等待审核通过后才能删除！");
        return;
    }


    // }
//	console.log(data["id"]+""+data["create_time"]+""+data["creator"]);
    var ajaxData = {
        "id": item["id"],
        // "createTime":item["create_time"],
        // "creator":item["creator"],
    };
    if (confirm("确定删除此条数据？")) {
        var $ajax = $.ajax({
            type: 'post',
            data: ajaxData,
            url: 'pages_dmCustom_Point_delete.action',
            cache: false,
            dataType: 'json',
            success: function (data) {
//		        	console.log(data);
                IntelligentRoadTest.initDTData();
//		        	console.log("成功");

            },
            error: function (data, textStatus) {
                console.log("删除dt文件失败");
            }
        });
    } else {

    }
}

/**********************************
 * @funcname IntelligentRoadTest.polygonDelete
 * @funcdesc  多边形图层文件删除
 * @param {object} item  列表项数据
 * @return
 * @author  戴岭南
 * @create 2018/4/8 14:26
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.polygonDelete = function IntelligentRoadTest_polygonDelete(item) {
//	console.log(data);
    //只有上传者才能删除文件
    if (item.iscandelete != 1) {
        return;
    }
    if (item.share_status == "已共享") {
        alert("处于" + item.share_status + "状态的文件请先取消分享在删除！");
        return;
    } else if (item.share_status == "共享审核中" || item.share_status == "取消共享审核中") {
        alert("处于" + item.share_status + "状态的文件请先撤销申请在删除！");
        return;
    }
//	console.log(data["id"]+""+data["create_time"]+""+data["creator"]);
    var ajaxData = {
        "id": item["id"],
        // "createTime":item["create_time"],
        // "creator":item["creator"],
    };
    if (confirm("确定删除此条数据？")) {
        var $ajax = $.ajax({
            type: 'post',
            data: ajaxData,
            url: 'pages_dmCustom_Polygon_delete.action',
            cache: false,
            dataType: 'json',
            success: function (data) {
//		        	console.log(data);
                IntelligentRoadTest.initDTData();
//		        	console.log("成功");

            },
            error: function (data, textStatus) {
                console.log("删除dt文件失败");
            }
        });
    } else {

    }
}

/**********************************
 * @funcname IntelligentRoadTest.dmShare
 * @funcdesc 自定义图层分享功能(生成审核单)
 * @param {object} item 列表项数据
 * @param {int} type 传入类型（1.非审核员。 2.审核员）
 * @return
 * @author  戴岭南
 * @create 2018/4/8 14:32
 * @modifier
 * @modify
 ***********************************/
//自定义图层分享功能(生成审核单)
IntelligentRoadTest.dmShare = function IntelligentRoadTest_dmShare(item, type) {
    var object_type = "";
    var shareType = "共享";
    // type=2;
    if (item.type == 1) {
        //dt共享
        object_type = "dt图层";
        IntelligentRoadTest.dmShareUpdate(shareType, item, type);
    } else {
        //点图层和多边形图层共享
        if (item.custom_area_style == 1) {
            object_type = "点图层";
        } else {
            object_type = "多边形图层";
        }
        IntelligentRoadTest.dmShareUpdate(shareType, item, type);
    }
    if (type == 1) {//非审核员，生成审核单
        var audit = {

            "apply_time": new Date().Format("yyyy-MM-dd HH:mm:ss"),
            "audit_style": "共享",
            "city": item.city,
            "object_id": item.id,
            "object_type": object_type,
            "audit_stat": "待审核",
            "audit_content": "将自定义图层共享给本地网用户",
            "share_scope": $("#DTCityName").text()
        };
        var ajaxData = ShareObject.changeAuditParamsName(audit); //将对象属性名称转成带前
        ajaxData.type = 1; //设计
        ajaxData.operate = "add";
        // ShareObject.createAudit(ajaxData);
        ShareObject.operateEntity(ajaxData);
    } else {
        //审核员，生成操作记录
        var share_scope = $("#DTCityName").text(); //这里还要获取分享范围
        var audit_status = ""; //共享状态
        var audit_style = "共享"; //审核类型
        var object_id = item.id;
        var audit_content = "将" + object_type + "共享给本地网的用户";
        var operateHistory = ShareObject.createOperateObject(audit_style, audit_status, object_id, object_type, audit_content, share_scope);
        ShareObject.createOperateHistory(operateHistory);
    }

}

//自定义图层取消分享
/**********************************
 * @funcname IntelligentRoadTest.dmCancelShare
 * @funcdesc 自定义图层取消分享
 * @param {object} item 列表项数据
 * @param {int} type 传入类型（1.dt图层。 2.点或者多边形图层）
 * @return
 * @author 戴岭南
 * @create 2018/4/8 14:32
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.dmCancelShare = function IntelligentRoadTest_dmShare(item, type) {
    var object_type = "";
    // type=2;
    var shareType = "取消共享";
    if (item.type == 1) {
        //dt共享
        object_type = "dt图层";
        IntelligentRoadTest.dmShareUpdate(shareType, item, type);
    } else {
        //点图层和多边形图层共享
        if (item.custom_area_style == 1) {
            object_type = "点图层";
        } else {
            object_type = "多边形图层";
        }
        IntelligentRoadTest.dmShareUpdate(shareType, item, type);
    }

    if (type == 1) {//非审核员修改审核状态
        var sqlList = [];
        var list = ["ShareObject_getAuditByObject", "OBJECT_TYPE:" + object_type, "OBJECT_ID:" + item.id]
        sqlList.push(list);
        var funcList = [IntelligentRoadTest.dealAuditData];
        var database = [3];
        progressbarTwo.submitSql(sqlList, funcList, database, [1]);
    } else {//审核员生成历史记录
        var share_scope = $("#DTCityName").text(); //这里还要获取分享范围
        var audit_status = ""; //共享状态
        var audit_style = "取消共享"; //审核类型
        var object_id = item.id;
        var audit_content = "取消共享" + object_type;
        var operateHistory = ShareObject.createOperateObject(audit_style, audit_status, object_id, object_type, audit_content, share_scope);
        ShareObject.createOperateHistory(operateHistory);
    }


}

/**********************************
 * @funcname IntelligentRoadTest.dmCancelShare
 * @funcdesc 自定义图层撤销审核
 * @param {object} item 列表项数据
 * @return
 * @author 戴岭南
 * @create 2018/4/8 14:32
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.dmCancel = function IntelligentRoadTest_dmCancel(item) {
    var object_type = "";
    var shareType = "撤销申请";
    if (item.type == 1) {
        //dt共享
        object_type = "dt图层";
        IntelligentRoadTest.dmShareUpdate(shareType, item);
    } else {
        //点图层和多边形图层共享
        if (item.custom_area_style == 1) {
            object_type = "点图层";
        } else {
            object_type = "多边形图层";
        }
        IntelligentRoadTest.dmShareUpdate(shareType, item);
    }

    var sqlList = [];
    var list = ["ShareObject_getAuditByObject", "OBJECT_TYPE:" + object_type, "OBJECT_ID:" + item.id]
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealAuditData];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database, [2]);


}

IntelligentRoadTest.dealAuditData = function IntelligentRoadTest_dealAuditData(data, type) {
    var result = callBackChangeData(data);
    if (result.length > 0) {
        var audit = result[0];
        if (type == 1) {
            audit.audit_content = "取消共享自定义图层";
            audit.audit_stat = "待审核";
            audit.audit_style = "取消共享";
        } else {
            audit.audit_stat = "已撤销";
            var operateHistory = audit;
            ShareObject.createOperateHistory(operateHistory, null);//生成历史记录
        }
    }
    var ajaxData = ShareObject.changeAuditParamsName(audit); //将对象属性名称转成带前
    ShareObject.createOrUpdateAudit(audit, "update", null);

}

/**********************************
 * @funcname IntelligentRoadTest.dmCancelShare
 * @funcdesc 自定义图层表状态审核状态更新
 * @param {object} item 列表项数据
 * @param {String} shareType 分享类型
 * @param {int} type 是否审核员
 * @return
 * @author 戴岭南
 * @create 2018/4/8 14:32
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.dmShareUpdate = function IntelligentRoadTest_dtShareUpdate(shareType, item, type) {
    var url = "";
    var share_status = "";
    var audit_option = "";

    if (shareType == "共享") {
        share_status = "共享审核中";
        if (type == 2) {
            share_status = "已共享";
        }
    } else if (shareType == "取消共享") {
        share_status = "取消共享审核中";
        if (type == 2) {
            share_status = "";
        }
    } else if (shareType == "撤销申请" && item.share_status == "取消共享审核中") {
        share_status = "已共享";
    } else if (shareType == "撤销申请") {
        share_status = "";
    }

    if (item.type == 2) {//自定义图层
        if (item.custom_area_style == 2) {
            url = "pages_dmCustom_Polygon_updateShare.action";
        } else {
            url = "pages_dmCustom_Point_updateShare.action";
        }
        var ajaxData = {
            "customAreaList.id": item["id"],
            "customAreaList.share_status": share_status,
            "customAreaList.share_scope": item["city"],
        };
    } else {//dt图层
        url = "pages_dtUpload_DtUpload_updateShare.action";
        var ajaxData = {
            "dtListData.id": item["id"],
            "dtListData.share_status": share_status,
            "dtListData.share_scope": item["city"],
        };
    }

    var $ajax = $.ajax({
        type: 'post',
        data: ajaxData,
        url: url,
        cache: false,
        dataType: 'json',
        success: function (data) {
//		        	console.log(data);
            // IntelligentRoadTest.initDTData();
//		        	console.log("成功");
            IntelligentRoadTest.initDTData();
        },
        error: function (data, textStatus) {
            console.log("更新状态失败");
        }
    });
}


//路测数据描点
IntelligentRoadTest.dtCircleDraw = function IntelligentRoadTest_dtCircleDraw(data, dtObject) {
    var result = callBackChangeData(data);
    data = null;
    IntelligentRoadTest.isShowGrid = false;
    IntelligentRoadTest.isShowDTGrid = true;
//	console.log(result);
    IntelligentRoadTest.GridMap.clear();
    if (IntelligentRoadTest.isThreeNetStatus) {
        IntelligentRoadTest.GridMapM.clear();
        IntelligentRoadTest.GridMapU.clear();
    }

//	IntelligentRoadTest.GridMapCircle.clear();
    IntelligentRoadTest.GridMapCircleDataArr = null;
    IntelligentRoadTest.GridMapCircleDataArr = [];
    var minLng = null;
    var maxLng = null;
    var minLat = null;
    var maxLat = null;
    for (var i = 0; i < result.length; i++) {

        if (maxLng == null) {
            maxLng = result[i].longitude_baidu;
        }
        if (maxLat == null) {
            maxLat = result[i].latitude_baidu;
        }
        if (minLat == null) {
            minLat = result[i].latitude_baidu;
        }
        if (minLng == null) {
            minLng = result[i].longitude_baidu;
        }
        if (maxLat < result[i].latitude_baidu) {
            maxLat = result[i].latitude_baidu;
        }
        if (maxLng < result[i].longitude_baidu) {
            maxLng = result[i].longitude_baidu;
        }
        if (minLat > result[i].latitude_baidu) {
            minLat = result[i].latitude_baidu;
        }
        if (minLng > result[i].longitude_baidu) {
            minLng = result[i].longitude_baidu;
        }

        var lng = result[i].longitude_baidu;
        var lat = result[i].latitude_baidu;
        var rsrp = result[i].main_rsrp;
        var sector = result[i].sector;
        var remark = result[i].remark;
        // var circleData = [lng,lat,rsrp];
        var circleArr = [lng, lat, rsrp, dtObject.dt_name, sector, remark];
        IntelligentRoadTest.GridMapCircleDataArr.push(circleArr);
    }

    if (minLng != null && maxLng != null && minLat != null && maxLat != null) {
        var mid_lng = (minLng + maxLng) / 2;
        var mid_lat = (minLat + maxLat) / 2;
        var zoom = getZoom(maxLng, minLng, maxLat, minLat);
        IntelligentRoadTest.map.setZoom(zoom);
        IntelligentRoadTest.map.setCenter(new BMap.Point(mid_lng, mid_lat));
    }
    IntelligentRoadTest.GridMap.clear();
    var DTData = IntelligentRoadTest.GridMapCircleDataArr;
    for (var j = 0; j < IntelligentRoadTest.colorBarArr.length; j++) {
        DTData = IntelligentRoadTest.ClearDtData(DTData, IntelligentRoadTest.colorBarArr[j]);
    }
//	IntelligentRoadTest.GridMapCircle.drawCircle(DTData);
    if (DTData.length > 0) {
        IntelligentRoadTest.GridMap.drawCircle(DTData);
    }
    IntelligentRoadTest.legendGrid();
    DTData = null;


}

//路测数据栅格
IntelligentRoadTest.dtGridDraw = function IntelligentRoadTest_dtCircleDraw(data, dtObject) {
    var result = callBackChangeData(data);
//	console.log(result);
    data = null;
    IntelligentRoadTest.isShowGrid = true;
    IntelligentRoadTest.isShowDTGrid = true;
    //清除描点数据
    IntelligentRoadTest.GridMapCircleDataArr = null;
    IntelligentRoadTest.GridMapCircleDataArr = [];

    IntelligentRoadTest.GridMap.clear();
    // IntelligentRoadTest.GridMapM.clear();
    // IntelligentRoadTest.GridMapU.clear();

    IntelligentRoadTest.GridCanArrT = null;
    IntelligentRoadTest.GridCanArrM = null;
    IntelligentRoadTest.GridCanArrU = null;
    IntelligentRoadTest.CanArr = null;

    IntelligentRoadTest.GridCanArrT = [];
    IntelligentRoadTest.GridCanArrM = [];
    IntelligentRoadTest.GridCanArrU = [];
    IntelligentRoadTest.CanArr = [];

    var minLng = null;
    var maxLng = null;
    var minLat = null;
    var maxLat = null;

    for (var i = 0; i < result.length; i++) {
        var gridNum = result[i].grid_num;
        var rsrp_avg = result[i].main_rsrp;
        var lngAndLat = gridLngLat(gridNum, 20, 100000);//[minLng, minLat, midLng, midLat, maxLng, maxLat];

        if (maxLng == null) {
            maxLng = lngAndLat[2];
        }
        if (maxLat == null) {
            maxLat = lngAndLat[3];
        }
        if (minLat == null) {
            minLat = lngAndLat[3];
        }
        if (minLng == null) {
            minLng = lngAndLat[2];
        }
        if (maxLat < lngAndLat[3]) {
            maxLat = lngAndLat[3];
        }
        if (maxLng < lngAndLat[2]) {
            maxLng = lngAndLat[2];
        }
        if (minLat > lngAndLat[3]) {
            minLat = lngAndLat[3];
        }
        if (minLng > lngAndLat[2]) {
            minLng = lngAndLat[2];
        }


//		var gridData = [lngAndLat[0],lngAndLat[1],lngAndLat[4],lngAndLat[5],rsrp_avg];
        var dataChe = [lngAndLat[0], lngAndLat[1], lngAndLat[4], lngAndLat[5], rsrp_avg, gridNum, dtObject.dt_name];
//		IntelligentRoadTest.GridCanArr.push(gridData);
        IntelligentRoadTest.CanArr.push(dataChe);
    }
    if (minLng != null && maxLng != null && minLat != null && maxLat != null) {
        var mid_lng = (minLng + maxLng) / 2;
        var mid_lat = (minLat + maxLat) / 2;
        var zoom = getZoom(maxLng, minLng, maxLat, minLat);
        IntelligentRoadTest.map.setZoom(zoom);
        IntelligentRoadTest.map.panTo(new BMap.Point(mid_lng, mid_lat), {noAnimation: false});
    }

    IntelligentRoadTest.GridMap.clear();
    var CTData = IntelligentRoadTest.CanArr;
    for (var j = 0; j < IntelligentRoadTest.colorBarArr.length; j++) {
        CTData = IntelligentRoadTest.ClearData(CTData, IntelligentRoadTest.colorBarArr[j]);
    }
    IntelligentRoadTest.GridMap.draw(CTData);
    CTData = null;
    IntelligentRoadTest.legendGrid();

}


//-----------------------------------绘制弱区开始-------------------------------
/**********************************
 * @funcname IntelligentRoadTest.drawPolygon
 * @funcdesc 绘制轮廓线
 * @param {object} data (input optional)
 *轮廓数据
 * @return {null}
 * @author 郑文彬
 * @create 20171017
 ***********************************/
IntelligentRoadTest.drawPolygon = function IntelligentRoadTest_drawPolygon(data) {
    var sumLon = 0;
    var sumLat = 0;
    var coordinate = {lon: [], lat: []};
    for (var i = 0; i < data.length; i++) {
        var varr = [];
        var gis_data = data[i].gis_data;
        var sp = gis_data.split('@');
        for (var j = 0; j < sp.length; j++) {
            var v = sp[j].split(',');
            varr.push(new BMap.Point(v[0], v[1]));
            if (j == 0) {
                sumLon = sumLon + parseFloat(v[0]);
                sumLat = sumLat + parseFloat(v[1]);
                coordinate.lon.push(v[0]);
                coordinate.lat.push(v[1]);
            }
        }
        var polygon = new BMap.Polygon(varr, {
            strokeColor: "#FF9900",
            strokeWeight: 2,
            strokeOpacity: 0.6,
            fillOpacity: 0.1
        });  //创建多边形
        //设置多边形边框为虚线
//		polygon.setStrokeStyle("dashed");
        polygon.str = "day=" + $('#seachTime').text() + "&city=" + data[i].city + "&country=" + data[i].country + "&mktcenter=" + data[i].mktcenter + "&object_id=" + data[i].object_id
        polygon.addEventListener("click", function (e) {
            doFx(this.str);
        });
//		polygon.setZIndex(90000);
        IntelligentRoadTest.map.addOverlay(polygon);   //增加多边形
        //$(".progressBox").hide();
    }
    IntelligentRoadTest.lng = sumLon / data.length;
    IntelligentRoadTest.lat = sumLat / data.length;
//		IntelligentRoadTest.zoom=getZoom (Math.max.apply( Math, coordinate.lon ), Math.min.apply( Math, coordinate.lon ), Math.max.apply( Math, coordinate.lat ), Math.min.apply( Math, coordinate.lat ));
    IntelligentRoadTest.zoom = 14;
    if (IntelligentRoadTest.zoom <= 11) {
        IntelligentRoadTest.zoom = IntelligentRoadTest.zoom + 1;
    }
    IntelligentRoadTest.map.centerAndZoom(new BMap.Point(IntelligentRoadTest.lng, IntelligentRoadTest.lat), IntelligentRoadTest.zoom);

}

//-----------------------------------绘制弱区结束-------------------------------


//-------------------------------弱覆盖区域开始---------------------------------


//排序
IntelligentRoadTest.sortMRTopCell = function (arr) {
    var temp;//临时变量
    for (var i = 0; i < arr.length - 1; i++) {   //表示趟数，一共arr.length-1次。
        for (var j = arr.length - 1; j > i; j--) {
            if (arr[j].counts > arr[j - 1].counts) {
                temp = arr[j];
                arr[j] = arr[j - 1];
                arr[j - 1] = temp;
            }
        }
    }
    return arr;
}

IntelligentRoadTest.sortNRTopCell = function (arr) {
    var temp;//临时变量
    for (var i = 0; i < arr.length - 1; i++) {   //表示趟数，一共arr.length-1次。
        for (var j = arr.length - 1; j > i; j--) {
            if (parseInt(arr[j].distance) < parseInt(arr[j - 1].distance)) {
                temp = arr[j];
                arr[j] = arr[j - 1];
                arr[j - 1] = temp;
            }
        }
    }
    return arr;
}

//截取接入扇区字段
IntelligentRoadTest.dealTop5CellData = function IntelligentRoadTest_dealTop5CellData(dataStr) {
    var obj = {
        enodebid: "",
        cellid: "",
        counts: "",
        rsrpAvg: "",
        number: "",
        distance: "",
        recent_cell_name: "",
    };
    if (dataStr != null && dataStr != "") {
        var proArr = dataStr.split(",");//将基站的信息切割开来
        obj = {
            enodebid: proArr[0], //基站id
            cellid: proArr[1], //小区id
            counts: Math.ceil(parseFloat(proArr[2])), //rsrp条数
            rsrpAvg: proArr[3], //rsrp均值
            number: proArr[4], //排名序号
            distance: parseInt(proArr[5]) //距离
        };
        if (!isNaN(parseInt(proArr[5]))) {
            obj.distance = parseInt(proArr[5]);
        } else {
            obj.distance = "-";
        }
        if (proArr.length > 6) {
            obj.recent_cell_name = proArr[6]; //扇区名称
        }
    }
    return obj;
}
//截取最近TOP5小区
IntelligentRoadTest.dealAnotherTop5CellData = function IntelligentRoadTest_dealAnotherTop5CellData(dataStr) {
    var obj = {
        enodebid: "",
        cellid: "",
        counts: "",
        rsrpAvg: "",
        number: "",
        distance: "",
        recent_cell_name: ""
    };
    if (dataStr != null && dataStr != "") {
        var proArr = dataStr.split(",");//将基站的信息切割开来
        var obj = {
            enodebid: proArr[0], //基站id
            cellid: proArr[1], //扇区id
            distance: parseInt(proArr[2]), //距离
            counts: Math.ceil(parseFloat(proArr[3])), //rsrp条数
            rsrpAvg: proArr[4], //rsrp均值
            number: proArr[5] //排名序号
        };
        if (!isNaN(parseInt(proArr[2]))) {
            obj.distance = parseInt(proArr[2]);
        } else {
            obj.distance = "-";
        }
        if (proArr.length > 6) {
            obj.recent_cell_name = proArr[6]; //扇区名称
        }
    }
    return obj;
}

IntelligentRoadTest.dealmktCenterAreaTableData = function IntelligentRoadTest_dealmktCenterAreaTableData(data) {

    var result = callBackChangeData(data);
    //添加数据集
    IntelligentRoadTest.rfgpayments.remove();
    IntelligentRoadTest.rfgpayments.add(result);

    /*if(IntelligentRoadTest.refreshPoorAreaList == true){
        IntelligentRoadTest.refreshPoorAreaResult = result;
    }else{*/
    // console.log(result);
    IntelligentRoadTest.rfgResult = result;
    IntelligentRoadTest.rfgCurrentResult = result;
    //IntelligentRoadTest.showPoorAreaData(result);

    var SelectName = $("#rfgListSelectName").text();
    var flexCol = $("#rfgList  .flexRow .flexCol");
    IntelligentRoadTest.triggleFilter(SelectName, flexCol);
    // }
    // for(var i=0;i<flexCol.length;i++){
    //     var text = flexCol.eq(i).text();
    //     if(text == SelectName){
    //         flexCol.eq(i).siblings(".selected").trigger("click");
    //     }
    // }

}

IntelligentRoadTest.showPoorAreaData = function IntelligentRoadTest_showPoorAreaData(result) {
    IntelligentRoadTest.rfgCurrentPage = 1;
    IntelligentRoadTest.rfgTotalCount = result.length;
    var pageCount = result.length / IntelligentRoadTest.pageSize;
    if ((result.length % IntelligentRoadTest.pageSize) != 0) {
        IntelligentRoadTest.rfgTotalPage = parseInt(pageCount) + 1; //总页数，没有整除时加上1
    } else {
        IntelligentRoadTest.rfgTotalPage = pageCount;  //整除不用加1
    }
    var typeName = "弱区";
    if (IntelligentRoadTest.poorAreaObj != null) {
        typeName = IntelligentRoadTest.poorAreaObj.typeName;
    }
    var list = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.rfgCurrentResult, IntelligentRoadTest.rfgCurrentPage);
    //IntelligentRoadTest.drawMk(list);
    if (IntelligentRoadTest.rfgVM == null) {
        IntelligentRoadTest.rfgVM = new Vue({
            el: '#showPoorListDiv',
            data: {
                poorAreaList: list,
                totalPages: IntelligentRoadTest.rfgTotalPage,
                totalCounts: IntelligentRoadTest.rfgTotalCount,
                currentPageNum: IntelligentRoadTest.rfgCurrentPage,
                startIndex: IntelligentRoadTest.startIndex,
                lastIndex: IntelligentRoadTest.lastIndex,
                typeName: typeName
            },
            methods: {
                showMessage: function (item, index) {
                    var areaTypeString = IntelligentRoadTest.getAreaTypeByData(item);
                    IntelligentRoadTest.cleraAllZhuantiSectorAndLine();
                    IntelligentRoadTest.hideCBPoorAreaNrTop5Sector();
                    IntelligentRoadTest.showPolygon(item.gis_data, undefined, areaTypeString, item.object_id, IntelligentRoadTest.day, '');
                    // IntelligentRoadTest.paCell={};
                    IntelligentRoadTest.mkIndex = index;
                    IntelligentRoadTest.cacheItem = item;
                    //获取弱栅格占比
                    IntelligentRoadTest.weakAreaGrid(item);
                    //跳转到弱区详情
                    IntelligentRoadTest.goPoorAreaCompleteMessage();
                    //获取天数
                    // IntelligentRoadTest.getByLatLot(item.longitude_mid_baidu,item.latitude_mid_baidu);
                    IntelligentRoadTest.openInfoWindowTwo(item.longitude_mid_baidu, item.latitude_mid_baidu,
                        [
                            {"key": typeName + "编号", "val": item.object_id},
                            {"key": "最近扇区", "val": item.cell_name},
                        ]
                    );
                    if (IntelligentRoadTest.mapClick) {
                        IntelligentRoadTest.mapClick = false;
                    } else {
                        if (!isNull(item.longitude_mid_baidu) && !isNull(item.latitude_mid_baidu)) {
                            var zoom = getZoom(item.longitude_max_baidu, item.longitude_min_baidu, item.latitude_max_baidu, item.latitude_min_baidu);
                            IntelligentRoadTest.map.centerAndZoom(new BMap.Point(item.longitude_mid_baidu, item.latitude_mid_baidu), zoom);
                        }
                    }
//                    IntelligentRoadTest.loadPoorAreaGrid(IntelligentRoadTest.day,item.city_id,item.country_id,item.object_id);
                    IntelligentRoadTest.loadGrid(item.longitude_max_baidu, item.longitude_min_baidu, item.latitude_max_baidu, item.latitude_min_baidu);

                    if (!IntelligentRoadTest.isScreenCompared && IntelligentRoadTest.isAddMessageEvent) {//不是在分屏页，并且点击过分屏
                        if (!windowScreeen.closed) {//如果窗口没有关闭，需要进行同步信息，如果已经关闭，什么都不用做
                            // windowScreeen.focus();
                            IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'poor');
                        }
                    }

                    var RecentCellImg = $("#poorAreaCompleteMessage").find('.linkCell').children('img');
                    $(RecentCellImg).each(function () {
                        var srcText = $(this).attr('src');
                        var clickImg = srcText.replace("nor", "click");
                        var norImg = srcText.replace("click", "nor");
                        if (srcText == clickImg) {
                            $(this).attr('src', norImg);
                        }
                    });
                    IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                    IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                    var nearTOP5 = [];
                    if (item.top5_sector_set != null && item.top5_sector_set != "") {
                        var to5DataArr = item.top5_sector_set.split("@");
                        for (var i = 0; i < to5DataArr.length; i++) {
                            nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
                        }
                    }
                    var mrNearTOP5 = [];
                    if (item.sector_set != null && item.sector_set != "") {
                        var mrTo5DataArr = item.sector_set.split("@");
                        for (var k = 0; k < mrTo5DataArr.length; k++) {
                            mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
                        }
                    }
                    if (IntelligentRoadTest.checkIfHasSameSector(nearTOP5, mrNearTOP5)) {
                        item.isHasSameSector = true;
                    }
                    if (item.day != null && item.day.toString().indexOf("-") < 0) { //转换日期格式
                        item.day = dealDateString(item.day.toString()).Format("yyyy-MM-dd");
                    }
                    $(".linkCell").attr("title", "显示连线");
                    $(".linkCell").removeClass("linkCellHover");
                    var zhuantiName = "";
                    var type = null;
                    if (IntelligentRoadTest.poorAreaObj.name == "m3PoorArea") {
                        zhuantiName = "MOD3干扰";
                        type = 6;
                    } else if (IntelligentRoadTest.poorAreaObj.name == "cbPoorArea") {
                        zhuantiName = "越区覆盖"
                        type = 8;
                    } else if (IntelligentRoadTest.poorAreaObj.name == "olPoorArea") {
                        zhuantiName = "重叠覆盖";
                        type = 7;
                    }

                    //查询弱区的专题邻区数据
                    if (type != null) {
                        IntelligentRoadTest.getPoorAreaNearSectorData(item.city_id, item.object_id, type, IntelligentRoadTest.day);
                    }

                    if (IntelligentRoadTest.rfgCompleteVM == null) {
                        IntelligentRoadTest.rfgCompleteVM = new Vue({
                            el: '#poorAreaCompleteMessage',
                            data: {
                                poorAreaData: item,
                                nrTop5Cell: nearTOP5,
                                mrNrTop5Cell: mrNearTOP5,
                                zhuantiName: zhuantiName,
                                typeName: IntelligentRoadTest.poorAreaObj.typeName,
                                zhuantiNRSectorList: [],
                                nrCellList: [] //越区和重叠覆盖的邻区列表数据
                            },
                            methods: {
                                poorPosition: function (item) {
                                    if (!isNull(item.longitude_mid_baidu) && !isNull(item.latitude_mid_baidu)) {
                                        var zoom = getZoom(item.longitude_max_baidu, item.longitude_min_baidu, item.latitude_max_baidu, item.latitude_min_baidu);
                                        IntelligentRoadTest.map.centerAndZoom(new BMap.Point(item.longitude_mid_baidu, item.latitude_mid_baidu), zoom);
                                    }
                                },
                                showDetailInfo: function (event) {
                                    IntelligentRoadTest.showDetailInfo(event);
                                },
                                showLinkCell: function (event, item, type) {
                                    //type=1最近小区，type=2 接入扇区
                                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                                        $(event.currentTarget).attr("title", "显示连线");
                                        $(event.currentTarget).removeClass("linkCellHover");
                                        // $(event.currentTarget).children().attr("src",norImg);
                                        if (type == 1) {
                                            IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                                        } else if (type == 2) {
                                            IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                                        }
                                    } else {
                                        $(event.currentTarget).attr("title", "隐藏连线");
                                        $(event.currentTarget).addClass("linkCellHover");
                                        // $(event.currentTarget).children().attr("src",clickImg);
                                        // var max_lng =
                                        var centerPoint = new BMap.Point(item.longitude_mid_baidu, item.latitude_mid_baidu);
                                        if (type == 1) {
                                            IntelligentRoadTest.showNrTop5CellForMap(centerPoint, item.top5_sector_set);
                                        } else if (type == 2) {
                                            IntelligentRoadTest.showMrNrTop5CellForMap(centerPoint, item.sector_set);
                                        }
                                    }
                                },
                                gotoAlarmList: function (item) {
                                    if (item.sector_set != null) {
                                        var sectorArr = item.sector_set.split("@");
                                        IntelligentRoadTest.loadAlarmListData(sectorArr);
                                        $("#alarmBackPoor").html("返回上一级");
                                    }
                                },
                                gotoKPIList: function (item) {
                                    if (item.sector_set != null) {
                                        var sectorArr = item.sector_set.split("@");
                                        showOrHideInputImage(2);
                                        IntelligentRoadTest.loadKPIListData(sectorArr);
                                        $("#kpiBackPoor").html("返回上一级");
                                    }
                                },
                                gotoShowSectorMessage: function (sectorDate) {
                                    // console.log(sectorDate);
                                    IntelligentRoadTest.poorToSector = true; //作为是否从弱区详情页跳转到扇区详情页
                                    IntelligentRoadTest.clickType = 1;
                                    IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                                },
                                gotoAlarmMessage: function (order_id) {
                                    window.open('http://132.96.154.2/EOMS_FT/app/dwf/ftPub/osCheckFtDetail/osCheckFtDetail!getDetailPage.action?sCode=' + order_id);
                                },
                                saveToConcernArea: function (poorAreaData) {
                                    IntelligentRoadTest.isPoorAreaSaveToConcern = true;
                                    IntelligentRoadTest.savePoorAreaToConcernArea(poorAreaData);
                                }, showPolygonGrid: function (item, event) {
                                    IntelligentRoadTest.showHidePolygonGrid(item, event);
                                },
                                showNRLinkCell: function (event, item, nrCellList, index) {
                                    //type=1最近小区，type=2 接入扇区
                                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                                        $(event.currentTarget).attr("title", "显示连线");
                                        $(event.currentTarget).removeClass("linkCellHover");
                                        // $(event.currentTarget).children().attr("src",norImg);
                                        IntelligentRoadTest.hidePoorAreaZhuantiSectorAndLine(index);//隐藏连线和扇区
                                    } else {
                                        $(event.currentTarget).attr("title", "隐藏连线");
                                        $(event.currentTarget).addClass("linkCellHover");
                                        // $(event.currentTarget).children().attr("src",clickImg);
                                        // var max_lng =
                                        var centerPoint = new BMap.Point(item.longitude_mid_baidu, item.latitude_mid_baidu);
                                        var enodebid_cellidArr = [];
                                        for (var i = 0; i < nrCellList.length; i++) {
                                            if (nrCellList[i].enodebid != null && nrCellList[i].enodebid != "" &&
                                                nrCellList[i].cellid != null && nrCellList[i].cellid != "") { //做一下容错，不将基站ID和小区ID 为空的扇区拼进去
                                                enodebid_cellidArr.push(nrCellList[i].enodebid + "," + nrCellList[i].cellid); //将基站ID和扇区ID用逗号拼在一起
                                            }
                                        }
                                        var sector_set = enodebid_cellidArr.join("@"); //拼成一个以@符号切割扇区的字符串
                                        IntelligentRoadTest.showZhuantiSectorLine(centerPoint, sector_set, index); //这里需要重新编写一个方法绘制线段
                                    }
                                },
                                highLightLine: function (event, item, modelIndex, sectorIndex) {
                                    if (item.enodebid_cellid == null || item.enodebid_cellid == "" || item.distance == null || item.distance == "") {
                                        alert("台账数据缺失，请反馈给后台");
                                        return;
                                    }
                                    $(event.currentTarget).css("background", "#f4f4f4");//自己高亮
                                    if (IntelligentRoadTest.poorAreaNrZhuanutiSectorPoloyLineList != null && IntelligentRoadTest.poorAreaNrZhuanutiSectorPoloyLineList[modelIndex] != null
                                        && IntelligentRoadTest.poorAreaNrZhuanutiSectorPoloyLineList[modelIndex][sectorIndex] != null) {
                                        IntelligentRoadTest.poorAreaNrZhuanutiSectorPoloyLineList[modelIndex][sectorIndex].setStrokeColor('#9ffb13'); //对应的连线高亮
                                    }
                                },
                                unHighLightLine: function (event, item, modelIndex, sectorIndex) {
                                    if (item.enodebid_cellid == null || item.enodebid_cellid == "" || item.distance == null || item.distance == "") {
                                        return;
                                    }
                                    $(event.currentTarget).css("background", "#fff");//自己恢复
                                    if (IntelligentRoadTest.poorAreaNrZhuanutiSectorPoloyLineList != null && IntelligentRoadTest.poorAreaNrZhuanutiSectorPoloyLineList[modelIndex] != null
                                        && IntelligentRoadTest.poorAreaNrZhuanutiSectorPoloyLineList[modelIndex][sectorIndex] != null) {
                                        IntelligentRoadTest.poorAreaNrZhuanutiSectorPoloyLineList[modelIndex][sectorIndex].setStrokeColor('#cc66ff');  //对应的连线恢复
                                    }
                                },
                                showErrorMessage: function (pin_pci) {
                                    if (pin_pci != null) {
                                        var list = pin_pci.split("_");
                                    }
                                    alert("在3公里内找不到PCI为" + list[1] + "、频点为" + list[0] + "对应的小区")
                                },
                                showNRSectorLinkCell: function (event, item, nrCellList, type) {
                                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                                        $(event.currentTarget).attr("title", "显示连线");
                                        $(event.currentTarget).removeClass("linkCellHover");
                                        // $(event.currentTarget).children().attr("src",norImg);
                                        //隐藏连线
                                        IntelligentRoadTest.hideCBPoorAreaNrTop5Sector();
                                    } else {
                                        $(event.currentTarget).attr("title", "隐藏连线");
                                        $(event.currentTarget).addClass("linkCellHover");
                                        var centerPoint = new BMap.Point(item.longitude_mid_baidu, item.latitude_mid_baidu);
                                        var enodebid_cellidArr = [];
                                        for (var i = 0; i < nrCellList.length; i++) {
                                            if (nrCellList[i].enodebid != null && nrCellList[i].enodebid != "" &&
                                                nrCellList[i].cellid != null && nrCellList[i].cellid != "") { //做一下容错，不将基站ID和小区ID 为空的扇区拼进去
                                                enodebid_cellidArr.push(nrCellList[i].enodebid + "," + nrCellList[i].cellid); //将基站ID和扇区ID用逗号拼在一起
                                            }
                                        }
                                        var sector_set = enodebid_cellidArr.join("@"); //拼成一个以@符号切割扇区的字符串

                                        IntelligentRoadTest.showNrTop5CellForMap(centerPoint, sector_set, null, true);

                                    }
                                }
                            }
                        });
                    } else {
                        IntelligentRoadTest.rfgCompleteVM.nrTop5Cell = nearTOP5;
                        IntelligentRoadTest.rfgCompleteVM.mrNrTop5Cell = mrNearTOP5;
                        IntelligentRoadTest.rfgCompleteVM.zhuantiName = zhuantiName;
                        IntelligentRoadTest.rfgCompleteVM.poorAreaData = item;
                        IntelligentRoadTest.rfgCompleteVM.typeName = IntelligentRoadTest.poorAreaObj.typeName;
                    }
                },
                lastOrNext: function (type) {
                    if (type == 0) {
                        //上一页
                        if (IntelligentRoadTest.rfgCurrentPage > 1) {
                            IntelligentRoadTest.rfgCurrentPage = IntelligentRoadTest.rfgCurrentPage - 1;
                            IntelligentRoadTest.rfgVM.poorAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.rfgCurrentResult, IntelligentRoadTest.rfgCurrentPage);
                            IntelligentRoadTest.rfgVM.currentPageNum = IntelligentRoadTest.rfgCurrentPage;
                            IntelligentRoadTest.rfgVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.rfgVM.lastIndex = IntelligentRoadTest.lastIndex;
                        } else {
                            alert("当前页是第一页");
                        }
                    } else {
                        if (IntelligentRoadTest.rfgCurrentPage < IntelligentRoadTest.rfgTotalPage) {
                            IntelligentRoadTest.rfgCurrentPage = IntelligentRoadTest.rfgCurrentPage + 1;
                            IntelligentRoadTest.rfgVM.poorAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.rfgCurrentResult, IntelligentRoadTest.rfgCurrentPage);
                            IntelligentRoadTest.rfgVM.currentPageNum = IntelligentRoadTest.rfgCurrentPage;
                            IntelligentRoadTest.rfgVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.rfgVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                    }
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.rfgVM.poorAreaList);
                    // $("#poorAreaCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.rfgTotalCount +"条数据)");
                },
                gotoPage: function () {
                    var page = $("#rfgPage").val();
                    page = parseInt(page);
                    if (page > 0 && page <= IntelligentRoadTest.rfgTotalPage) {
                        IntelligentRoadTest.rfgCurrentPage = page;
                        IntelligentRoadTest.rfgVM.poorAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.rfgCurrentResult, IntelligentRoadTest.rfgCurrentPage);
                        IntelligentRoadTest.rfgVM.currentPageNum = IntelligentRoadTest.rfgCurrentPage;
                        IntelligentRoadTest.rfgVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.rfgVM.lastIndex = IntelligentRoadTest.lastIndex;
                    }
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.rfgVM.poorAreaList);
                    // $("#poorAreaCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.rfgTotalCount +"条数据)");
                },
                goLast: function () {
                    IntelligentRoadTest.rfgCurrentPage = IntelligentRoadTest.rfgTotalPage;
                    IntelligentRoadTest.rfgVM.poorAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.rfgCurrentResult, IntelligentRoadTest.rfgCurrentPage);
                    IntelligentRoadTest.rfgVM.currentPageNum = IntelligentRoadTest.rfgCurrentPage;
                    IntelligentRoadTest.rfgVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.rfgVM.lastIndex = IntelligentRoadTest.lastIndex;
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.rfgVM.poorAreaList);
                    // $("#poorAreaCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.rfgTotalCount +"条数据)");
                },
                goFirst: function () {
                    IntelligentRoadTest.rfgCurrentPage = 1;
                    IntelligentRoadTest.rfgVM.poorAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.rfgCurrentResult, IntelligentRoadTest.rfgCurrentPage);
                    IntelligentRoadTest.rfgVM.currentPageNum = IntelligentRoadTest.rfgCurrentPage;
                    IntelligentRoadTest.rfgVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.rfgVM.lastIndex = IntelligentRoadTest.lastIndex;
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.rfgVM.poorAreaList);
                    // $("#poorAreaCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.rfgTotalCount +"条数据)");
                },
                turnMk: function (index, item) {
                    for (var i = 0; i < IntelligentRoadTest.markerList.length; i++) {
                        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.markerList[i]);
                    }

                    for (var i = 0; i < IntelligentRoadTest.lngArr.length; i++) {
                        var lng = IntelligentRoadTest.lngArr[i];
                        var lat = IntelligentRoadTest.latArr[i];
                        var color = "#fff"
                        var img = "../js/IntelligentRoadTest/images/markeRq.png";
                        if (i == index) {
                            img = "../js/IntelligentRoadTest/images/maker2.png";
                            color = "black";
                            IntelligentRoadTest.openInfoWindow(lng, lat, item.object_id);
                        }
                        IntelligentRoadTest.addMk(lng, lat, img, i, color, item.object_id);
                        $("#showPoorListDiv").find(".listUL > li").eq(i).find(".numSpan2").css("background", "url(../js/IntelligentRoadTest/images/markeRq.png)");
                        $("#showPoorListDiv").find(".listUL > li").eq(i).css("background", "#fff");
                    }

                    $("#showPoorListDiv").find(".listUL > li").eq(index).find(".numSpan2").css("background", "url(../js/IntelligentRoadTest/images/maker2.png)");
                    $("#showPoorListDiv").find(".listUL > li").eq(index).css("background", "#f4f4f4");
                },
                showSelectInfo: function (event) {
                    // IntelligentRoadTest.showSelectInfo();
                }
            }
        });
    } else {
        IntelligentRoadTest.rfgVM.poorAreaList = list;
        IntelligentRoadTest.rfgVM.totalPages = IntelligentRoadTest.rfgTotalPage;
        IntelligentRoadTest.rfgVM.totalCounts = IntelligentRoadTest.rfgTotalCount;
        IntelligentRoadTest.rfgVM.currentPageNum = IntelligentRoadTest.rfgCurrentPage;
        IntelligentRoadTest.rfgVM.startIndex = IntelligentRoadTest.startIndex;
        IntelligentRoadTest.rfgVM.lastIndex = IntelligentRoadTest.lastIndex;
        IntelligentRoadTest.rfgVM.typeName = typeName;
        if (IntelligentRoadTest.index == 0 || IntelligentRoadTest.index == 24 || IntelligentRoadTest.index == 25
            || IntelligentRoadTest.index == 30 || IntelligentRoadTest.index == 31 || IntelligentRoadTest.index == 32) { //弱区、上行低速区、下行低速区 、MOD3干扰区、重叠覆盖区、越区覆盖区
            if (IntelligentRoadTest.currentLocation == "" || IntelligentRoadTest.currentLocation == null) {
                IntelligentRoadTest.drawMk(IntelligentRoadTest.rfgVM.poorAreaList);
            }
        }
        // $("#poorAreaCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
        //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.rfgTotalCount +"条数据)");
    }

    if (IntelligentRoadTest.currentLocation == "poorArea") {
        IntelligentRoadTest.goPoorAreaCompleteMessage();
    }
    showOrHideInputImage(1);
}

IntelligentRoadTest.loadmktCenterAreaTableData = function IntelligentRoadTest_loadmktCenterAreaTableData(city, country, mktcenter, day, do_type, mktcenter_id, mktcenter_name) {
    //缓存的查询参数  如果参数一样则不进行查询
    /*if ($('#areaTable .scrollDiv').height() == 0 || $('#areaTable .scrollDiv').width() == 0) {
    } else if (IntelligentRoadTest.parameter_3 == (city + country + mktcenter + day + do_type + IntelligentRoadTest.object_id)) {
        return;
    }*/
//	$(".tableDiv").eq(0).show();
//     IntelligentRoadTest.parameter_3 = city + country + mktcenter + day + do_type + IntelligentRoadTest.object_id;
    var sqlList = [];
    if (do_type == null || do_type == undefined || do_type == 0) {
        do_type = "";
    } else {
        do_type = "and DO_TYPE=" + do_type;
    }
    var countryCondition = "";
    if (country != null && country != 'null' && country != '全市') {
        countryCondition = " AND COUNTRY = '" + country + "'";
    }
    var type = 0;
    if (IntelligentRoadTest.poorAreaObj != null) { //0表示弱区，4表示上行低速率 5表示下行低速率
        type = IntelligentRoadTest.poorAreaObj.type;
    }
    var list = ["IntelligentRoadTestV2_09_areaTable", "DAY:" + day, "CITY:" + city, "COUNTRY:" + countryCondition, "DO_TYPE:" + do_type, "TYPE:" + type];
    if (mktcenter_name == null || mktcenter_name == '' || mktcenter_name == undefined || mktcenter_name == 'null') {
        var mktcenter = $("#poorAreaMktName").text().trim();
        if (mktcenter != "" && mktcenter != "全区") {
            list.push("MKTCENTER_ID:" + "and MKTCENTER = '" + mktcenter + "'");
            mktcenter_name = mktcenter;
        }
    } else {
        list.push("MKTCENTER_ID:" + "and MKTCENTER = '" + mktcenter_name + "'");
    }
    IntelligentRoadTest.poorAreaCountry_id = country;
    IntelligentRoadTest.poorAreaMktCenter_id = mktcenter_name;
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealmktCenterAreaTableData];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);
    //记录查询信息
    IntelligentRoadTest.rfgCurrentSelectConditon = "" + day + city + country + type;

}

//最近top5小区连线
IntelligentRoadTest.showNrTop5CellForMap = function IntelligentRoadTest_showNrTop5CellForMap(centerPoint, top5_sector_set, date, isCBSectorList) {
    if (top5_sector_set == undefined || top5_sector_set == null) {
        return;
    }
    if (top5_sector_set.indexOf(",") < 0) {
        return;
    }
    var nearTOP5 = [];
    if (top5_sector_set != null && top5_sector_set != "") {
        var to5DataArr = top5_sector_set.split("@");
        for (var i = 0; i < to5DataArr.length; i++) {
            nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
        }
    }
    var sectorArr = top5_sector_set.split("@");
    var topStr = "";
    var bstStr = "";
    for (var i = 0; i < sectorArr.length; i++) {
        var sector = sectorArr[i].split(",");
        var bstId = parseInt(sector[0]);
        var cellId = parseInt(sector[1]);
        var topid = bstId * 1000000 + cellId;
        if (i != sectorArr.length - 1) {
            topStr += String(topid) + ",";
            bstStr += String(bstId) + ","
        } else {
            topStr += String(topid);
            bstStr += String(bstId);
        }
    }
    if (topStr != "") {
        //top扇区连线查询
        var bMapObj = {
            map: IntelligentRoadTest.map,
            useSelectTimeQuerySector: false,
            isShowFactoryIcon: false,
            showHighStatn: false,
            sectorColor: IntelligentRoadTest.sectorColor,
            circleColor: IntelligentRoadTest.sectorColor,
            senceName: IntelligentRoadTest.senceName
        };
        if (IntelligentRoadTest.nrTop5CellBmapUtil == undefined || IntelligentRoadTest.nrTop5CellBmapUtil == null) {
            if (isCBSectorList == undefined || isCBSectorList == null) { //不是越区邻区列表
                IntelligentRoadTest.nrTop5CellBmapUtil = new sectorStation(bMapObj);
            }
        }
        if (IntelligentRoadTest.cbCellBmapUtil == undefined || IntelligentRoadTest.cbCellBmapUtil == null) {
            if (isCBSectorList == true) { //是越区邻区列表
                IntelligentRoadTest.cbCellBmapUtil = new sectorStation(bMapObj);
            }
        }
        var day = IntelligentRoadTest.day;
        if (date != undefined) {
            day = date.substring(0, 4) + date.substring(5, 7) + date.substring(8, 10);
        }
        var list = ["IntelligentRoadTest_15_mainSectorList", "DAY:" + day,
            "BSTIDANDCELLID:" + topStr];
        var progressBarSqls = [];
        progressBarSqls.push(list);
        var functionlist = [IntelligentRoadTest.showGridOrPolygonNrTop5Sector];
        var dataBase = [3];
        progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase, [[centerPoint, sectorArr, nearTOP5, isCBSectorList]]);
    }
}

/**********************************
 * @funcname showNrTop5CellForMapByOsm
 * @funcdesc 附近扇区连线（osm)
 * @param {datatype} nameOfParameter (input/output optional)
 descriptionOfParameter
 * @return {datatype}
 * @author laijunbao
 * @create 2018/01/29 0029 10:30
 * @modifier
 * @modify
 ***********************************/
//最近top5小区连线
IntelligentRoadTest.showNrTop5CellForMapByOsm = function IntelligentRoadTest_showNrTop5CellForMapByOsm(centerPoint, top5_sector_set) {
    if (top5_sector_set == undefined || top5_sector_set == null) {
        return;
    }
    if (top5_sector_set.indexOf(",") < 0) {
        return;
    }
    var sectorArr = top5_sector_set.split("@");
    var topStr = "";
    var bstStr = "";
    for (var i = 0; i < sectorArr.length; i++) {
        var sector = sectorArr[i].split(",");
        var bstId = parseInt(sector[0]);
        var cellId = parseInt(sector[1]);
        var topid = bstId * 1000000 + cellId;
        if (i != sectorArr.length - 1) {
            topStr += String(topid) + ",";
            bstStr += String(bstId) + ","
        } else {
            topStr += String(topid);
            bstStr += String(bstId);
        }
    }
    if (topStr != "") {
        //top扇区连线查询
        if (IntelligentRoadTest.nrTop5CellBmapUtilOsm == undefined || IntelligentRoadTest.nrTop5CellBmapUtilOsm == null) {
            var bMapObj = {
                map: IntelligentRoadTest.OsmMap,
                useSelectTimeQuerySector: false,
                isShowFactoryIcon: false,
                showHighStatn: false,
                sectorColor: IntelligentRoadTest.sectorColor,
                circleColor: IntelligentRoadTest.sectorColor,
                senceName: IntelligentRoadTest.senceName
            };
            IntelligentRoadTest.nrTop5CellBmapUtilOsm = new OSMSectorStation(bMapObj);
        }
        var day = IntelligentRoadTest.day;
        var list = ["IntelligentRoadTest_15_mainSectorList", "DAY:" + day,
            "BSTIDANDCELLID:" + topStr];
        var progressBarSqls = [];
        progressBarSqls.push(list);
        var functionlist = [IntelligentRoadTest.showGridOrPolygonNrTop5SectorOsm];
        var dataBase = [3];
        progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase, [[centerPoint, sectorArr]]);
    }
}
/**********************************
 * @funcname showGridOrPolygonNrTop5SectorOsm
 * @funcdesc 附近扇区连线具体实现（osm）
 * @param {datatype} nameOfParameter (input/output optional)
 descriptionOfParameter
 * @return {datatype}
 * @author laijunbao
 * @create 2018/01/29 0029 10:31
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.showGridOrPolygonNrTop5SectorOsm = function IntelligentRoadTest_showGridOrPolygonNrTop5SectorOsm(data, objectData) {
    IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
    IntelligentRoadTest.nrTop5CellBmapUtilOsm.useSelectSectorData = true;
    IntelligentRoadTest.nrTop5CellBmapUtilOsm.sectorShow(data);

    var sectorChe = IntelligentRoadTest.nrTop5CellBmapUtilOsm.RSRPSectorChe;
    IntelligentRoadTest.nrTop5LinePolylineArrs = [];

    IntelligentRoadTest.nrSectorOverlay = null;
    IntelligentRoadTest.nrSectorOverlay = [];

    var zoom = IntelligentRoadTest.OsmMap.getZoom();
    var result = callBackChangeData(data);

    if (result.length > 0) {

        for (var i = 0; i < result.length; i++) {
            var sectorindex = "";
            if (result[i].is_indoor == "室外") {
                try {
                    for (var j = 0; j < sectorChe.length; j++) {
                        if (sectorChe[j].point2.statn_id == result[i].base_statn_id && sectorChe[j].point2.cell_id == result[i].cell_id) {
                            if (sectorChe[i]._latlngs[0][parseInt(sectorChe[i]._latlngs[0].length / 2)] == 0) {
                                sectorindex = sectorChe[i]._latlngs[0][parseInt(sectorChe[i]._latlngs[0].length / 2)];
                            } else {
                                sectorindex = sectorChe[i]._latlngs[0][parseInt(sectorChe[i]._latlngs[0].length / 2) + 1];
                            }
                        }
                    }
                } catch (e) {
                    console.log("不是室外，继续");
                }

            }

            //如果不是
            var lng = result[i].longitude;
            var lat = result[i].latitude;

            if (sectorindex == "") {
                sectorindex = L.latLng(lat, lng);
            }

            var latlngs = [
                objectData[0],
                sectorindex
            ];

            var weigth = 1;
            var topSector = objectData[1];
            for (var j = 0; j < topSector.length; j++) {
                var sector = topSector[j].split(",");
                if (sector[0] == result[i].base_statn_id && sector[1] == result[i].cell_id) {

                    weigth = 6 - parseInt(sector[5]);

                }
            }

            IntelligentRoadTest.nrTop5LinePolyline = L.polyline(latlngs,
                {color: IntelligentRoadTest.nrTop5LineColor, weight: weigth})
                .addTo(IntelligentRoadTest.OsmMap);

            IntelligentRoadTest.nrTop5LinePolyline.position = i;

            IntelligentRoadTest.nrTop5LinePolylineArrs.push(IntelligentRoadTest.nrTop5LinePolyline);

            //高速高铁市政路osm地图，鼠标经过地图连线，显示高亮连线
            IntelligentRoadTest.top5LinePolylineMouseEvent(IntelligentRoadTest.nrTop5LinePolyline, 0, true);

        }
    }


}

/**********************************
 * @funcname top5LinePolylineMouseEvent
 * @funcdesc 高速高铁市政路osm地图，鼠标经过地图连线，显示高亮连线
 * @param {datatype} nameOfParameter (input/output optional)
 descriptionOfParameter
 * @return {datatype}
 * @author laijunbao
 * @create 2018/01/31 0031 10:34
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.top5LinePolylineMouseEvent = function IntelligentRoadTest_nrTop5LinePolylineMouseEvent(top5LinePolyline, type, flag) {
    IntelligentRoadTest.nrmrLineHighFlag = flag;
    if (IntelligentRoadTest.nrmrLineHighFlag) {

        //对应左边列表li的位置
        var position = top5LinePolyline.position;
        var myLines = [{
            "type": "LineString"
        }];
        var myStyle = {
            "color": IntelligentRoadTest.objectPolylineColor,
            "weight": 5,
            "opacity": 0.65
        };

        var id;
        var divClass = "";
        var color = "";

        if (type == 0) {
            divClass = "nrTop5Cell";
            color = "#cc66ff";
        } else {
            divClass = "mrNrTop5Cell";
            color = "blue";
        }

        switch (IntelligentRoadTest.index) {
            case 7:
                id = "showHighwayCompleteMessage";
                break;
            case 8:
                id = "showRailCompleteMessage";
                break;
            case 14:
                id = "showCityRoadCompleteMessage";
            default:
                break;
        }

        if (IntelligentRoadTest.roadIndex == 4) {
            if (IntelligentRoadTest.senseName == "highway") {
                id = "showHighwayGridCompleteMessage";
            } else if (IntelligentRoadTest.senseName == "rail") {
                id = "showRailGridCompleteMessage";
            } else if (IntelligentRoadTest.senseName == "cityRoad") {
                id = "showCityRoadGridCompleteMessage";
            }

        }

        //经纬度
        var latlng = top5LinePolyline._latlngs;

        top5LinePolyline.on("mouseover", function (e) {
            IntelligentRoadTest.clearLineOsm();
            // //经纬度
            // var latlng = e.target._latlngs;

            // //对应左边列表li的位置
            // var position = e.target.position;

            //左边列表高亮
            $('#' + id + ' .' + divClass + ' ul li').eq(position).css("background", "#f4f4f4");

            myLines[0].coordinates = [[latlng[0].lng, latlng[0].lat], [latlng[1].lng, latlng[1].lat]];

            //线条高亮
            IntelligentRoadTest.nrmrLineHigthLight(myLines, myStyle);

            //高亮的线条的鼠标移出事件，清除高亮的线条,左边的列表不高亮
            IntelligentRoadTest.nrhighLineOsmLayer.on("mouseout", function (e) {
                IntelligentRoadTest.nrhighLineOsmLayer.clearLayers();
                $('#' + id + ' .' + divClass + ' ul li').eq(position).css("background", "#fff");
            })
        });

        //高速高铁市政路，鼠标经过列表，在地图高亮连线
        $('#' + id + ' .' + divClass + ' ul li').eq(position).mouseover(function () {
            var txtTmp = $(this).parent().prev().find(".floatRight").find("button:first").attr("title");
            if (txtTmp != "显示连线") {
                $('#' + id + ' .' + divClass + ' ul li').eq(position).css("background", "#f4f4f4");
                if (IntelligentRoadTest.nrhighLineOsmLayer != undefined) {
                    IntelligentRoadTest.nrhighLineOsmLayer.clearLayers();
                }
                //线条高亮
                myLines[0].coordinates = [[latlng[0].lng, latlng[0].lat], [latlng[1].lng, latlng[1].lat]];
                IntelligentRoadTest.nrmrLineHigthLight(myLines, myStyle);
            }

        });
        $('#' + id + ' .' + divClass + ' ul li').eq(position).mouseout(function () {
            $('#' + id + ' .' + divClass + ' ul li').eq(position).css("background", "#fff");
            if (IntelligentRoadTest.nrhighLineOsmLayer != undefined) {
                IntelligentRoadTest.nrhighLineOsmLayer.clearLayers();
            }
        });
    }


}

/**********************************
 * @funcname nrmrLineHigthLight
 * @funcdesc 高速高铁市政路，鼠标经过列表，在地图高亮连线
 * @param {datatype} nameOfParameter (input/output optional)
 descriptionOfParameter
 * @return {datatype}
 * @author laijunbao
 * @create 2018/02/01 0001 11:13
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.nrmrLineHigthLight = function IntelligentRoadTest_nrmrLineHigthLight(myLines, myStyle) {

    IntelligentRoadTest.nrhighLineOsmLayer = L.geoJson(myLines, {
        style: myStyle
    }).addTo(IntelligentRoadTest.OsmMap);

    //线条缓存，用于清除
    IntelligentRoadTest.nrmrLineHighOsm.push(IntelligentRoadTest.nrhighLineOsmLayer);
}

/**********************************
 * @funcname showMrNrTop5CellForMapByOsm
 * @funcdesc 接入扇区连线（osm）
 * @param {datatype} nameOfParameter (input/output optional)
 descriptionOfParameter
 * @return {datatype}
 * @author laijunbao
 * @create 2018/01/18 0018 17:05
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.showMrNrTop5CellForMapByOsm = function IntelligentRoadTest_showMrNrTop5CellForMapByOsm(centerPoint, top5_sector_set) {
    if (top5_sector_set == undefined || top5_sector_set == null) {
        return;
    }
    if (top5_sector_set.indexOf(",") < 0) {
        return;
    }
    var sectorArr = top5_sector_set.split("@");
    var topStr = "";
    var bstStr = "";
    for (var i = 0; i < sectorArr.length; i++) {
        var sector = sectorArr[i].split(",");
        var bstId = parseInt(sector[0]);
        var cellId = parseInt(sector[1]);
        var topid = bstId * 1000000 + cellId;
        if (i != sectorArr.length - 1) {
            topStr += String(topid) + ",";
            bstStr += String(bstId) + ","
        } else {
            topStr += String(topid);
            bstStr += String(bstId);
        }
    }
    if (topStr != "") {
        //top扇区连线查询
        if (IntelligentRoadTest.mrTop5CellBmapUtilOsm == undefined || IntelligentRoadTest.mrTop5CellBmapUtilOsm == null) {
            var bMapObj = {
                map: IntelligentRoadTest.OsmMap,
                useSelectTimeQuerySector: false,
                isShowFactoryIcon: false,
                showHighStatn: false,
                sectorColor: IntelligentRoadTest.sectorColor,
                circleColor: IntelligentRoadTest.sectorColor,
                senceName: IntelligentRoadTest.senceName
            };
//            IntelligentRoadTest.nrTop5CellBmapUtil = new sectorStation(bMapObj);
            IntelligentRoadTest.mrTop5CellBmapUtilOsm = new OSMSectorStation(bMapObj);
        }
        var day = IntelligentRoadTest.day;
        var list = ["IntelligentRoadTest_15_mainSectorList", "DAY:" + day,
            "BSTIDANDCELLID:" + topStr];
        var progressBarSqls = [];
        progressBarSqls.push(list);
        var functionlist = [IntelligentRoadTest.showGridOrPolygonMrTop5SectorOsm];
        var dataBase = [3];
        progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase, [[centerPoint, sectorArr]]);
    }
}
/**********************************
 * @funcname showGridOrPolygonMrTop5SectorOsm
 * @funcdesc 接入扇区连线具体实现（osm）
 * @param {datatype} nameOfParameter (input/output optional)
 descriptionOfParameter
 * @return {datatype}
 * @author laijunbao
 * @create 2018/01/29 0029 10:40
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.showGridOrPolygonMrTop5SectorOsm = function IntelligentRoadTest_showGridOrPolygonMrTop5SectorOsm(data, objectData) {
    IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
    IntelligentRoadTest.mrTop5CellBmapUtilOsm.useSelectSectorData = true;
    IntelligentRoadTest.mrTop5CellBmapUtilOsm.sectorShow(data);

    var sectorChe = IntelligentRoadTest.mrTop5CellBmapUtilOsm.RSRPSectorChe;

    IntelligentRoadTest.mrTop5LinePolylineArrs = [];

    var zoom = IntelligentRoadTest.OsmMap.getZoom();

    var result = callBackChangeData(data);

    if (sectorChe.length > 0) {

        for (var i = 0; i < result.length; i++) {
            var sectorindex = "";
            if (result[i].is_indoor == "室外") {
                try {
                    for (var j = 0; j < sectorChe.length; j++) {
                        if (sectorChe[j].point2.statn_id == result[i].base_statn_id && sectorChe[j].point2.cell_id == result[i].cell_id) {
                            if (sectorChe[i]._latlngs[0][parseInt(sectorChe[i]._latlngs[0].length / 2)] == 0) {
                                sectorindex = sectorChe[i]._latlngs[0][parseInt(sectorChe[i]._latlngs[0].length / 2)];
                            } else {
                                sectorindex = sectorChe[i]._latlngs[0][parseInt(sectorChe[i]._latlngs[0].length / 2) + 1];
                            }
                        }
                    }
                } catch (e) {
                    console.log("不是室外，继续");
                }

            }

            var lng = result[i].longitude;
            var lat = result[i].latitude;

            if (sectorindex == "") {
                sectorindex = L.latLng(lat, lng);
            }

            var latlngs = [
                objectData[0],
                sectorindex
            ];

            var topSector = objectData[1];
            var weigth = 1;
            for (var j = 0; j < topSector.length; j++) {
                var sector = topSector[j].split(",");
                if (sector[0] == result[i].base_statn_id && sector[1] == result[i].cell_id) {

                    weigth = 6 - parseInt(sector[4]);

                }
            }

            IntelligentRoadTest.mrTop5LinePolyline = L.polyline(latlngs,
                {color: IntelligentRoadTest.mrTop5LineColor, weight: weigth})
                .addTo(IntelligentRoadTest.OsmMap);

            IntelligentRoadTest.mrTop5LinePolyline.position = i;

            IntelligentRoadTest.mrTop5LinePolylineArrs.push(IntelligentRoadTest.mrTop5LinePolyline);

            //高速高铁市政路osm地图，鼠标经过地图连线，显示高亮连线
            IntelligentRoadTest.top5LinePolylineMouseEvent(IntelligentRoadTest.mrTop5LinePolyline, 1, true);
        }
    }

}

/**********************************
 * @funcname hideGridOrPolygonNrTop5SectorOsm
 * @funcdesc 附近扇区连线隐藏
 * @param {datatype} nameOfParameter (input/output optional)
 descriptionOfParameter
 * @return {datatype}
 * @author laijunbao
 * @create 2018/01/29 0029 10:38
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm = function IntelligentRoadTest_hideGridOrPolygonNrTop5SectorOsm() {
    IntelligentRoadTest.nrLineHighFlag = false;
    if (typeof IntelligentRoadTest.nrTop5LinePolylineArrs != "undefined" && IntelligentRoadTest.nrTop5LinePolylineArrs.length > 0) {
        $.each(IntelligentRoadTest.nrTop5LinePolylineArrs, function (i, item) {
            item.remove();
        })
    }
    if (IntelligentRoadTest.nrTop5CellBmapUtilOsm != null) {
        IntelligentRoadTest.nrTop5CellBmapUtilOsm.sectorHide();
    }
    if (IntelligentRoadTest.nrhighLineOsmLayer != null && IntelligentRoadTest.nrhighLineOsmLayer != undefined) {
        IntelligentRoadTest.nrhighLineOsmLayer.clearLayers();
    }
    IntelligentRoadTest.clearLineOsm();

}

/**********************************
 * @funcname hideGridOrPolygonNrTop5SectorOsm
 * @funcdesc 接入扇区连线隐藏
 * @param {datatype} nameOfParameter (input/output optional)
 descriptionOfParameter
 * @return {datatype}
 * @author laijunbao
 * @create 2018/1/27 15:44
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm = function IntelligentRoadTest_hideGridOrPolygonMrTop5SectorOsm() {
    IntelligentRoadTest.mrLineHighFlag = false;
    if (typeof IntelligentRoadTest.mrTop5LinePolylineArrs != "undefined" && IntelligentRoadTest.mrTop5LinePolylineArrs.length > 0) {
        $.each(IntelligentRoadTest.mrTop5LinePolylineArrs, function (i, item) {
            item.remove();
        })
    }
    if (IntelligentRoadTest.mrTop5CellBmapUtilOsm != null) {
        IntelligentRoadTest.mrTop5CellBmapUtilOsm.sectorHide();
    }
    if (IntelligentRoadTest.mrhighLineOsmLayer != null && IntelligentRoadTest.mrhighLineOsmLayer != undefined) {
        IntelligentRoadTest.mrhighLineOsmLayer.clearLayers();
    }
    IntelligentRoadTest.clearLineOsm();
}
/**********************************
 * @funcname
 * @funcdesc
 * @param {datatype} nameOfParameter (input/output optional)
 descriptionOfParameter
 * @return {datatype}
 * @author laijunbao
 * @create 2018/01/30 0030 11:22
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.clearLineOsm = function IntelligentRoadTest_clearLineOsm() {
    if (IntelligentRoadTest.nrmrLineHighOsm.length > 0) {
        $.each(IntelligentRoadTest.nrmrLineHighOsm, function (i, item) {
            item.clearLayers();
        })
    }
}
//呈现最近top5小区连线
IntelligentRoadTest.showGridOrPolygonNrTop5Sector = function IntelligentRoadTest_showGridOrPolygonNrTop5Sector(data, objectData) {
    if (objectData != null && objectData[3] == true) { //越区区域的邻区列表
        IntelligentRoadTest.showCBPoorAreaNrTop5Sector(data, objectData);
        return;
    }
    IntelligentRoadTest.nrTop5CellBmapUtil.useSelectSectorData = true;
    IntelligentRoadTest.nrTop5CellBmapUtil.sectorShow(data);

    for (var i = 0; i < IntelligentRoadTest.nrSectorOverlay.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.nrSectorOverlay[i]);
    }
    IntelligentRoadTest.nrSectorOverlay = null;
    IntelligentRoadTest.nrSectorOverlay = [];
    var result = callBackChangeData(data);

    var sectorSortByMrCount = IntelligentRoadTest.sortNrSectorByMrCount(objectData[1]);
    for (var i = 0; i < result.length; i++) {
        var sectorindex = "";
        if (result[i].is_indoor == "室外") {
            for (var j = 0; j < IntelligentRoadTest.nrTop5CellBmapUtil.RSRPSectorChe.length; j++) {
                if (IntelligentRoadTest.nrTop5CellBmapUtil.RSRPSectorChe[j].point2.statn_id == result[i].base_statn_id && IntelligentRoadTest.nrTop5CellBmapUtil.RSRPSectorChe[j].point2.cell_id == result[i].cell_id) {
                    if (IntelligentRoadTest.nrTop5CellBmapUtil.RSRPSectorChe[j].getPath().length / 2 == 0) {
                        sectorindex = IntelligentRoadTest.nrTop5CellBmapUtil.RSRPSectorChe[j].getPath()[IntelligentRoadTest.nrTop5CellBmapUtil.RSRPSectorChe[j].getPath().length / 2]
                    } else {
                        sectorindex = IntelligentRoadTest.nrTop5CellBmapUtil.RSRPSectorChe[j].getPath()[parseInt(IntelligentRoadTest.nrTop5CellBmapUtil.RSRPSectorChe[j].getPath().length / 2) + 1];
                    }
                }
            }
        }

        var lng = result[i].longitude_baidu;
        var lat = result[i].latitude_baidu;
        if (sectorindex == "") {
            sectorindex = new BMap.Point(lng, lat);
        }

        var polyline = new BMap.Polyline([
            objectData[0],
            sectorindex
        ], {strokeColor: IntelligentRoadTest.nrTop5LineColor, strokeOpacity: 1});
        var topSector = objectData[1];

        for (var j = 0; j < topSector.length; j++) {
            var sector = topSector[j].split(",");
            if (sector[0] == result[i].base_statn_id && sector[1] == result[i].cell_id) {
                //基站号,小区号,距离，数量,平均RSRP,排序
                //513108,51,262,2817,-96.54,1
                polyline.bstid = sector[0];
                polyline.cellid = sector[1];
                polyline.distince = sector[2];
                polyline.count = sector[3];
                polyline.rsrpAvg = sector[4];
                polyline.topNum = sector[5];
                polyline.bstname = result[i].base_statn_name;
                polyline.cellname = result[i].cell_name;
                //设置线的粗细，按照mr数量排序进行赋值
                for (var m = 0; m < sectorSortByMrCount.length; m++) {
                    if (sectorSortByMrCount[m].enodeb_id == result[i].base_statn_id && sectorSortByMrCount[m].cell_id == result[i].cell_id) {
                        polyline.setStrokeWeight(6 - parseInt(sectorSortByMrCount[m].sortFlag));
                    }
                }
            }
        }

        polyline.type = "sectorLine";
        polyline.distince = parseInt(IntelligentRoadTest.map.getDistance(objectData[0], new BMap.Point(lng, lat)));
//		polyline.addEventListener("mouseover",function(e){
//
//		});
        polyline.i = i;
        IntelligentRoadTest.mrNrTop5CellBgColor(polyline, 0, objectData[2]);
        IntelligentRoadTest.nrSectorOverlay.push(polyline);
        IntelligentRoadTest.map.addOverlay(polyline);
    }
    IntelligentRoadTest.isShowGridMessage = false;
    // data = null;
    // objectData = null;
}

IntelligentRoadTest.hideGridOrPolygonNrTop5Sector = function IntelligentRoadTest_hideGridOrPolygonNrTop5Sector() {
    for (var i = 0; i < IntelligentRoadTest.nrSectorOverlay.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.nrSectorOverlay[i]);
    }
    if (IntelligentRoadTest.nrTop5CellBmapUtil != null) {
        IntelligentRoadTest.nrTop5CellBmapUtil.sectorHide();
    }

    $('.listDiv :visible .nrTop5Cell ul li').each(function () {
        var $events = $(this).data("events");
        if ($events && $events['mouseover']) {
            $(this).unbind('mouseover');
        }
        if ($events && $events['mouseout']) {
            $(this).unbind('mouseout');
        }
    });

}

//mr数量top5小区连线
IntelligentRoadTest.showMrNrTop5CellForMap = function IntelligentRoadTest_showMrNrTop5CellForMap(centerPoint, sector_set, date) {
    if (sector_set == undefined || sector_set == null) {
        return;
    }
    if (sector_set.indexOf(",") < 0) {
        return;
    }
    var mrNearTOP5 = [];
    if (sector_set != null && sector_set != "") {
        var mrTo5DataArr = sector_set.split("@");
        for (var k = 0; k < mrTo5DataArr.length; k++) {
            mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
        }
    }
    var sectorArr = sector_set.split("@");
    var topStr = "";
    var bstStr = "";
    for (var i = 0; i < sectorArr.length; i++) {
        var sector = sectorArr[i].split(",");
        var bstId = parseInt(sector[0]);
        var cellId = parseInt(sector[1]);
        var topid = bstId * 1000000 + cellId;
        if (i != sectorArr.length - 1) {
            topStr += String(topid) + ",";
            bstStr += String(bstId) + ","
        } else {
            topStr += String(topid);
            bstStr += String(bstId);
        }
    }
    if (topStr != "") {
        //top扇区连线查询
        if (IntelligentRoadTest.mrTop5CellBmapUtil == undefined || IntelligentRoadTest.mrTop5CellBmapUtil == null) {
            var bMapObj = {
                map: IntelligentRoadTest.map,
                useSelectTimeQuerySector: false,
                isShowFactoryIcon: false,
                showHighStatn: false,
                sectorColor: IntelligentRoadTest.sectorColor,
                circleColor: IntelligentRoadTest.sectorColor,
                senceName: IntelligentRoadTest.senceName,
            };
            IntelligentRoadTest.mrTop5CellBmapUtil = new sectorStation(bMapObj);
        }
        var day = IntelligentRoadTest.day;
        if (date != undefined) {
            day = date.substring(0, 4) + date.substring(5, 7) + date.substring(8, 10);
        }
        var list = ["IntelligentRoadTest_15_mainSectorList", "DAY:" + day,
            "BSTIDANDCELLID:" + topStr];
        var progressBarSqls = [];
        progressBarSqls.push(list);
        var functionlist = [IntelligentRoadTest.showGridOrPolygonMrTop5Sector];
        var dataBase = [3];
        progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase, [[centerPoint, sectorArr, mrNearTOP5]]);
    }
}

//呈现Mr记录数top5小区连线
IntelligentRoadTest.showGridOrPolygonMrTop5Sector = function IntelligentRoadTest_showGridOrPolygonMrTop5Sector(data, objectData) {
    IntelligentRoadTest.mrTop5CellBmapUtil.useSelectSectorData = true;
    IntelligentRoadTest.mrTop5CellBmapUtil.sectorShow(data);

    for (var i = 0; i < IntelligentRoadTest.mrSectorOverlay.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.mrSectorOverlay[i]);
    }
    IntelligentRoadTest.mrSectorOverlay = null;
    IntelligentRoadTest.mrSectorOverlay = [];
    var result = callBackChangeData(data);

    for (var i = 0; i < result.length; i++) {
        var sectorindex = "";
        if (result[i].is_indoor == "室外") {
            for (var j = 0; j < IntelligentRoadTest.mrTop5CellBmapUtil.RSRPSectorChe.length; j++) {
                if (IntelligentRoadTest.mrTop5CellBmapUtil.RSRPSectorChe[j].point2.statn_id == result[i].base_statn_id && IntelligentRoadTest.mrTop5CellBmapUtil.RSRPSectorChe[j].point2.cell_id == result[i].cell_id) {
                    if (IntelligentRoadTest.mrTop5CellBmapUtil.RSRPSectorChe[j].getPath().length / 2 == 0) {
                        sectorindex = IntelligentRoadTest.mrTop5CellBmapUtil.RSRPSectorChe[j].getPath()[IntelligentRoadTest.mrTop5CellBmapUtil.RSRPSectorChe[j].getPath().length / 2]
                    } else {
                        sectorindex = IntelligentRoadTest.mrTop5CellBmapUtil.RSRPSectorChe[j].getPath()[parseInt(IntelligentRoadTest.mrTop5CellBmapUtil.RSRPSectorChe[j].getPath().length / 2) + 1];
                    }
                }
            }
        }

        var lng = result[i].longitude_baidu;
        var lat = result[i].latitude_baidu;
        if (sectorindex == "") {
            sectorindex = new BMap.Point(lng, lat);
        }

        var polyline = new BMap.Polyline([
            objectData[0],
            sectorindex
        ], {strokeColor: IntelligentRoadTest.mrTop5LineColor, strokeOpacity: 1});
        var topSector = objectData[1];
        for (var j = 0; j < topSector.length; j++) {
            var sector = topSector[j].split(",");
            if (sector[0] == result[i].base_statn_id && sector[1] == result[i].cell_id) {
                //基站号,小区号,MR数量,平均RSRP,按数量排序序号,距离
                //513111,48,1542,-107.1,1,632
                polyline.bstid = sector[0];
                polyline.cellid = sector[1];
                polyline.count = sector[2];
                polyline.rsrpAvg = sector[3];
                polyline.topNum = sector[4];
                polyline.distinceD = sector[5];
                polyline.setStrokeWeight(6 - parseInt(sector[4]));
                polyline.bstname = result[i].base_statn_name;
                polyline.cellname = result[i].cell_name;
            }
        }

        polyline.type = "sectorLine";
        polyline.i = i;
        polyline.distince = parseInt(IntelligentRoadTest.map.getDistance(objectData[0], new BMap.Point(lng, lat)));
        IntelligentRoadTest.mrNrTop5CellBgColor(polyline, 1, objectData[2]);
        IntelligentRoadTest.mrSectorOverlay.push(polyline);
        IntelligentRoadTest.map.addOverlay(polyline);

    }
    IntelligentRoadTest.isShowGridMessage = false;
    IntelligentRoadTest.isGridMessage = false;
    // data = null;
    // objectData = null;
}
IntelligentRoadTest.hideGridOrPolygonMrTop5Sector = function IntelligentRoadTest_hideGridOrPolygonMrTop5Sector() {
    for (var i = 0; i < IntelligentRoadTest.mrSectorOverlay.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.mrSectorOverlay[i]);
    }
    if (IntelligentRoadTest.mrTop5CellBmapUtil != null) {
        IntelligentRoadTest.mrTop5CellBmapUtil.sectorHide();
    }

    $('.listDiv :visible .mrNrTop5Cell ul li').each(function () {
        var $events = $(this).data("events");
        if ($events && $events['mouseover']) {
            $(this).unbind('mouseover');
        }
        if ($events && $events['mouseout']) {
            $(this).unbind('mouseout');
        }
    });

}

//栅格mr数量top5小区连线
IntelligentRoadTest.showGridMrNrTop5CellForMap = function IntelligentRoadTest_showGridMrNrTop5CellForMap(centerPoint, sector_set) {
    if (sector_set == undefined || sector_set == null) {
        return;
    }
    if (sector_set.indexOf("@") < 0) {
        return;
    }
    var sectorArr = sector_set.split("@");
    var topStr = "";
    var bstStr = "";
    for (var i = 0; i < sectorArr.length; i++) {
        var sector = sectorArr[i].split(",");
        var bstId = parseInt(sector[0]);
        var cellId = parseInt(sector[1]);
        var topid = bstId * 1000000 + cellId;
        if (i != sectorArr.length - 1) {
            topStr += String(topid) + ",";
            bstStr += String(bstId) + ","
        } else {
            topStr += String(topid);
            bstStr += String(bstId);
        }
    }
    if (topStr != "") {
        //top扇区连线查询
        if (IntelligentRoadTest.mrGridTop5CellBmapUtil == undefined || IntelligentRoadTest.mrGridTop5CellBmapUtil == null) {
            var bMapObj = {
                map: IntelligentRoadTest.map,
                useSelectTimeQuerySector: false,
                isShowFactoryIcon: false,
                showHighStatn: false,
                sectorColor: IntelligentRoadTest.sectorColor,
                circleColor: IntelligentRoadTest.sectorColor,
            };
            IntelligentRoadTest.mrGridTop5CellBmapUtil = new sectorStation(bMapObj);
        }
        var day = IntelligentRoadTest.day;
        var list = ["IntelligentRoadTest_15_mainSectorList", "DAY:" + day,
            "BSTIDANDCELLID:" + topStr];
        var progressBarSqls = [];
        progressBarSqls.push(list);
        var functionlist = [IntelligentRoadTest.showGridMrTop5Sector];
        var dataBase = [3];
        progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase, [[centerPoint, sectorArr]]);
    }
}

//呈现栅格Mr记录数top5小区连线
IntelligentRoadTest.showGridMrTop5Sector = function IntelligentRoadTest_showGridMrTop5Sector(data, objectData) {
    IntelligentRoadTest.mrGridTop5CellBmapUtil.useSelectSectorData = true;
    IntelligentRoadTest.mrGridTop5CellBmapUtil.sectorShow(data);

    for (var i = 0; i < IntelligentRoadTest.mrGridSectorOverlay.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.mrGridSectorOverlay[i]);
    }
    IntelligentRoadTest.mrGridSectorOverlay = null;
    IntelligentRoadTest.mrGridSectorOverlay = [];
    var result = callBackChangeData(data);

    for (var i = 0; i < result.length; i++) {
        var sectorindex = "";
        if (result[i].is_indoor == "室外") {
            for (var j = 0; j < IntelligentRoadTest.mrGridTop5CellBmapUtil.RSRPSectorChe.length; j++) {
                if (IntelligentRoadTest.mrGridTop5CellBmapUtil.RSRPSectorChe[j].point2.statn_id == result[i].base_statn_id && IntelligentRoadTest.mrGridTop5CellBmapUtil.RSRPSectorChe[j].point2.cell_id == result[i].cell_id) {
                    if (IntelligentRoadTest.mrGridTop5CellBmapUtil.RSRPSectorChe[j].getPath().length / 2 == 0) {
                        sectorindex = IntelligentRoadTest.mrGridTop5CellBmapUtil.RSRPSectorChe[j].getPath()[IntelligentRoadTest.mrGridTop5CellBmapUtil.RSRPSectorChe[j].getPath().length / 2]
                    } else {
                        sectorindex = IntelligentRoadTest.mrGridTop5CellBmapUtil.RSRPSectorChe[j].getPath()[parseInt(IntelligentRoadTest.mrGridTop5CellBmapUtil.RSRPSectorChe[j].getPath().length / 2) + 1];
                    }
                }
            }
        }

        var lng = result[i].longitude_baidu;
        var lat = result[i].latitude_baidu;
        if (sectorindex == "") {
            sectorindex = new BMap.Point(lng, lat);
        }

        var polyline = new BMap.Polyline([
            objectData[0],
            sectorindex
        ], {strokeColor: IntelligentRoadTest.mrTop5LineColor, strokeOpacity: 1});
        var topSector = objectData[1];
        for (var j = 0; j < topSector.length; j++) {
            var sector = topSector[j].split(",");
            if (sector[0] == result[i].base_statn_id && sector[1] == result[i].cell_id) {
                //基站号,小区号,MR数量,平均RSRP,按数量排序序号,距离
                //513111,48,1542,-107.1,1,632
                polyline.bstid = sector[0];
                polyline.cellid = sector[1];
                polyline.count = sector[2];
                polyline.rsrpAvg = sector[3];
                polyline.topNum = sector[4];
                polyline.distinceD = sector[5];
                polyline.setStrokeWeight(6 - parseInt(sector[4]));
                polyline.bstname = result[i].base_statn_name;
                polyline.cellname = result[i].cell_name;
            }
        }

        polyline.type = "sectorLine";
        polyline.distince = parseInt(IntelligentRoadTest.map.getDistance(objectData[0], new BMap.Point(lng, lat)));
//		polyline.addEventListener("mouseover",function(e){
//
//		});

        IntelligentRoadTest.mrGridSectorOverlay.push(polyline);
        IntelligentRoadTest.map.addOverlay(polyline);

    }
    IntelligentRoadTest.isShowGridMessage = false;
    // data = null;
    // objectData = null;
}


//隐藏栅格连线
IntelligentRoadTest.hideGridMrTop5Sector = function IntelligentRoadTest_hideGridMrTop5Sector() {
    for (var i = 0; i < IntelligentRoadTest.mrGridSectorOverlay.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.mrGridSectorOverlay[i]);
    }
    if (IntelligentRoadTest.mrGridTop5CellBmapUtil != null) {
        IntelligentRoadTest.mrGridTop5CellBmapUtil.sectorHide();
    }

    $('.listDiv :visible .mrNrTop5Cell ul li').each(function () {
        var $events = $(this).data("events");
        if ($events && $events['mouseover']) {
            $(this).unbind('mouseover');
        }
        if ($events && $events['mouseout']) {
            $(this).unbind('mouseout');
        }
    });

}

//isHidePolygon 是否不显示改弱区的多边形
IntelligentRoadTest.getPoorAreaMessageById = function IntelligentRoadTest_getPoorAreaMessageById(objectId, day, isHidePolygon) {

    var type = 0;
    if (IntelligentRoadTest.poorAreaObj != null) { //0表示弱区，4表示上行低速率 5表示下行低速率
        type = IntelligentRoadTest.poorAreaObj.type;
    }
    var sqlList = [];
    var list = ["IntelligentRoadTestV2_getPoorAreaByObjectId", "OBJECTID:" + objectId, "DAY:" + day, "TYPE:" + type];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealPoorAreaMessageById];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database, [isHidePolygon]);
    if (IntelligentRoadTest.getPoorAreaByIdCahe == null) {
        IntelligentRoadTest.getPoorAreaByIdCahe = objectId + "_" + day;
    } else {
        if (IntelligentRoadTest.getPoorAreaByIdCahe == (objectId + "_" + day) && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
            return;
        } else {
            IntelligentRoadTest.getPoorAreaByIdCahe = objectId + "_" + day;
        }
    }
}

IntelligentRoadTest.dealPoorAreaMessageById = function IntelligentRoadTest_dealPoorAreaMessageById(data, isHidePolygon) {
    var result = callBackChangeData(data);
    if (result.length > 0) {
        var item = result[0];
        IntelligentRoadTest.showMessageById(item, isHidePolygon);
    }
}

IntelligentRoadTest.showMessageById = function IntelligentRoadTest_showMessageById(item, isHidePolygon) {
    try {
        IntelligentRoadTest.polygonContour = item.gis_data.replace(/;/g, '|');
    } catch (e) {
    }

    if (!isHidePolygon) {
        var areaTypeString = IntelligentRoadTest.getAreaTypeByData(item);
        IntelligentRoadTest.showPolygon(item.gis_data, undefined, areaTypeString, item.object_id, IntelligentRoadTest.day, '');
    }
    IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
    IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
    IntelligentRoadTest.cleraAllZhuantiSectorAndLine();
    IntelligentRoadTest.hideCBPoorAreaNrTop5Sector();
    $('.linkCell').removeClass("linkCellHover");
    IntelligentRoadTest.hideSectorPoorLine(3);
    IntelligentRoadTest.polygonList = [];
    // 弱栅格折线图
    //获取弱栅格占比
    // IntelligentRoadTest.paCell={};
    IntelligentRoadTest.weakAreaGrid(item);
    IntelligentRoadTest.goPoorAreaCompleteMessage();
    //获取天数
    // IntelligentRoadTest.getByLatLot(item.longitude_mid_baidu,item.latitude_mid_baidu);
    /*var textList=[
        {"key":"弱区编号","val":item.object_id},
        {"key":"最近扇区","val":item.cell_name},
    ];
    IntelligentRoadTest.openInfoWindowTwo(item.longitude_mid_baidu,item.latitude_mid_baidu,textList);*/
    // IntelligentRoadTest.index=0;
    IntelligentRoadTest.cacheItem = item;
    IntelligentRoadTest.loadGrid(item.longitude_max_baidu, item.longitude_min_baidu, item.latitude_max_baidu, item.latitude_min_baidu);
//    IntelligentRoadTest.loadPoorAreaGrid(IntelligentRoadTest.day,item.city_id,item.country_id,item.object_id)
//		 	IntelligentRoadTest.searchShowMkLable(item.longitude_mid_baidu,item.latitude_mid_baidu,textList,1);
    if (!IntelligentRoadTest.seachTime && !IntelligentRoadTest.mapClick) {
        var zoom = getZoom(item.longitude_max_baidu, item.longitude_min_baidu, item.latitude_max_baidu, item.latitude_min_baidu);
        IntelligentRoadTest.map.centerAndZoom(new BMap.Point(item.longitude_mid_baidu, item.latitude_mid_baidu), zoom);
        IntelligentRoadTest.messageCenterAndZoom = {
            center: new BMap.Point(item.longitude_mid_baidu, item.latitude_mid_baidu),
            zoom: zoom
        };
    }

//		}

    if ($(".packDiv").children().hasClass('rotateImg')) {
        $(".packDiv").children().removeClass('rotateImg');
        $(".packDiv").parent().animate({marginLeft: 0}, 800);
    }

    if (!IntelligentRoadTest.isScreenCompared && IntelligentRoadTest.isAddMessageEvent) {//不是在分屏页，并且点击过分屏
        if (!windowScreeen.closed) {//如果窗口没有关闭，需要进行同步信息，如果已经关闭，什么都不用做
            // windowScreeen.focus();
            IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'poor');
        }
    }
    if (IntelligentRoadTest.index == 2 && (IntelligentRoadTest.isShowAlarmInfoMessage == false || IntelligentRoadTest.isShowAlarmInfoMessage == null)) { //当前是在工单列表内跳转到弱区详情页
        $("#poorAreaCount").html("返回工单列表");
    } else if (IntelligentRoadTest.index == 2 && IntelligentRoadTest.isShowAlarmInfoMessage == true) { //在工单中的某个场景对象中点击弱区进入弱区详情页
        $("#poorAreaCount").html("返回场景详情页");
    }
    var nearTOP5 = [];
    if (item.top5_sector_set != null && item.top5_sector_set != "") {
        var to5DataArr = item.top5_sector_set.split("@");
        for (var i = 0; i < to5DataArr.length; i++) {
            nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
        }
    }
    var mrNearTOP5 = [];
    if (item.sector_set != null && item.sector_set != "") {
        var mrTo5DataArr = item.sector_set.split("@");
        for (var k = 0; k < mrTo5DataArr.length; k++) {
            mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
        }
    }
    if (IntelligentRoadTest.checkIfHasSameSector(nearTOP5, mrNearTOP5)) {
        item.isHasSameSector = true;
    }
    if (item.day != null && item.day.toString().indexOf("-") < 0) { //转换日期格式
        item.day = dealDateString(item.day.toString()).Format("yyyy-MM-dd");
    }
    var type = null;
    var zhuantiName = "";
    if (IntelligentRoadTest.poorAreaObj.name == "m3PoorArea") {
        zhuantiName = "MOD3干扰";
        type = 6;
    } else if (IntelligentRoadTest.poorAreaObj.name == "cbPoorArea") {
        zhuantiName = "越区覆盖"
        type = 8;
    } else if (IntelligentRoadTest.poorAreaObj.name == "olPoorArea") {
        zhuantiName = "重叠覆盖";
        type = 7;
    }

    //查询弱区的专题邻区数据
    if (type != null) {
        IntelligentRoadTest.getPoorAreaNearSectorData(item.city_id, item.object_id, type, IntelligentRoadTest.day);
    }

    if (IntelligentRoadTest.rfgCompleteVM == null) {
        IntelligentRoadTest.rfgCompleteVM = new Vue({
            el: '#poorAreaCompleteMessage',
            data: {
                poorAreaData: item,
                nrTop5Cell: nearTOP5,
                zhuantiName: zhuantiName,
                mrNrTop5Cell: mrNearTOP5,
                typeName: IntelligentRoadTest.poorAreaObj.typeName,
                zhuantiNRSectorList: [], //MOD3干扰的邻区列表数据
                nrCellList: [] //越区和重叠覆盖的邻区列表数据
            },
            methods: {
                poorPosition: function (item) {
                    if (!isNull(item.longitude_mid_baidu) && !isNull(item.latitude_mid_baidu)) {
                        var zoom = getZoom(item.longitude_max_baidu, item.longitude_min_baidu, item.latitude_max_baidu, item.latitude_min_baidu);
                        IntelligentRoadTest.map.centerAndZoom(new BMap.Point(item.longitude_mid_baidu, item.latitude_mid_baidu), zoom);
                    }
                },
                showDetailInfo: function (event) {
                    IntelligentRoadTest.showDetailInfo(event);
                },
                showLinkCell: function (event, item, type) {
                    //type=1最近小区，type=2 接入扇区
                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                        $(event.currentTarget).attr("title", "显示连线");
                        $(event.currentTarget).removeClass("linkCellHover");
                        // $(event.currentTarget).children().attr("src",norImg);
                        if (type == 1) {
                            IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                        } else if (type == 2) {
                            IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                        }
                    } else {
                        $(event.currentTarget).attr("title", "隐藏连线");
                        $(event.currentTarget).addClass("linkCellHover");
                        // $(event.currentTarget).children().attr("src",clickImg);
                        // var max_lng =
                        var centerPoint = new BMap.Point(item.longitude_mid_baidu, item.latitude_mid_baidu);
                        if (type == 1) {
                            IntelligentRoadTest.showNrTop5CellForMap(centerPoint, item.top5_sector_set, item.day);
                        } else if (type == 2) {
                            IntelligentRoadTest.showMrNrTop5CellForMap(centerPoint, item.sector_set, item.day);
                        }
                    }
                },
                gotoAlarmList: function (item) {
                    if (item.sector_set != null) {
                        var sectorArr = item.sector_set.split("@");
                        IntelligentRoadTest.loadAlarmListData(sectorArr);
                        $("#alarmBackPoor").html("返回上一级");
                    }
                },
                gotoKPIList: function (item) {
                    if (item.sector_set != null) {
                        var sectorArr = item.sector_set.split("@");
                        IntelligentRoadTest.loadKPIListData(sectorArr);
                        $("#kpiBackPoor").html("返回上一级");

                    }
                },
                gotoShowSectorMessage: function (sectorDate) {
                    // console.log(sectorDate);
                    IntelligentRoadTest.poorToSector = true; //作为是否从弱区详情页跳转到扇区详情页
                    IntelligentRoadTest.clickType = 1;
                    IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                },
                gotoAlarmMessage: function (order_id) {
                    window.open('http://132.96.154.2/EOMS_FT/app/dwf/ftPub/osCheckFtDetail/osCheckFtDetail!getDetailPage.action?sCode=' + order_id);
                },
                saveToConcernArea: function (poorAreaData) {
                    IntelligentRoadTest.isPoorAreaSaveToConcern = true;
                    IntelligentRoadTest.savePoorAreaToConcernArea(poorAreaData);
                }, showPolygonGrid: function (item, event) {
                    IntelligentRoadTest.showHidePolygonGrid(item, event);
                },
                showNRLinkCell: function (event, item, nrCellList, index) {
                    //type=1最近小区，type=2 接入扇区
                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                        $(event.currentTarget).attr("title", "显示连线");
                        $(event.currentTarget).removeClass("linkCellHover");
                        // $(event.currentTarget).children().attr("src",norImg);
                        IntelligentRoadTest.hidePoorAreaZhuantiSectorAndLine(index);//隐藏连线和扇区
                    } else {
                        $(event.currentTarget).attr("title", "隐藏连线");
                        $(event.currentTarget).addClass("linkCellHover");
                        // $(event.currentTarget).children().attr("src",clickImg);
                        // var max_lng =
                        var centerPoint = new BMap.Point(item.longitude_mid_baidu, item.latitude_mid_baidu);
                        var enodebid_cellidArr = [];
                        for (var i = 0; i < nrCellList.length; i++) {
                            if (nrCellList[i].enodebid != null && nrCellList[i].enodebid != "" &&
                                nrCellList[i].cellid != null && nrCellList[i].cellid != "") { //做一下容错，不将基站ID和小区ID 为空的扇区拼进去
                                enodebid_cellidArr.push(nrCellList[i].enodebid + "," + nrCellList[i].cellid); //将基站ID和扇区ID用逗号拼在一起
                            }
                        }
                        var sector_set = enodebid_cellidArr.join("@"); //拼成一个以@符号切割扇区的字符串
                        IntelligentRoadTest.showZhuantiSectorLine(centerPoint, sector_set, index); //这里需要重新编写一个方法绘制线段
                    }
                },
                highLightLine: function (event, item, modelIndex, sectorIndex) {
                    if (item.enodebid_cellid == null || item.enodebid_cellid == "" || item.distance == null || item.distance == "") {
                        alert("台账数据缺失，请反馈给后台");
                        return;
                    }
                    $(event.currentTarget).css("background", "#f4f4f4");//自己高亮
                    if (IntelligentRoadTest.poorAreaNrZhuanutiSectorPoloyLineList != null && IntelligentRoadTest.poorAreaNrZhuanutiSectorPoloyLineList[modelIndex] != null
                        && IntelligentRoadTest.poorAreaNrZhuanutiSectorPoloyLineList[modelIndex][sectorIndex] != null) {
                        IntelligentRoadTest.poorAreaNrZhuanutiSectorPoloyLineList[modelIndex][sectorIndex].setStrokeColor('#9ffb13'); //对应的连线高亮
                    }
                },
                unHighLightLine: function (event, item, modelIndex, sectorIndex) {
                    if (item.enodebid_cellid == null || item.enodebid_cellid == "" || item.distance == null || item.distance == "") {
                        return;
                    }
                    $(event.currentTarget).css("background", "#fff");//自己恢复
                    if (IntelligentRoadTest.poorAreaNrZhuanutiSectorPoloyLineList != null && IntelligentRoadTest.poorAreaNrZhuanutiSectorPoloyLineList[modelIndex] != null
                        && IntelligentRoadTest.poorAreaNrZhuanutiSectorPoloyLineList[modelIndex][sectorIndex] != null) {
                        IntelligentRoadTest.poorAreaNrZhuanutiSectorPoloyLineList[modelIndex][sectorIndex].setStrokeColor('#cc66ff');  //对应的连线恢复
                    }
                },
                showErrorMessage: function (pin_pci) {
                    if (pin_pci != null) {
                        var list = pin_pci.split("_");
                    }
                    alert("在3公里内找不到PCI为" + list[1] + "、频点为" + list[0] + "对应的小区")
                },
                showNRSectorLinkCell: function (event, item, nrCellList, type) {
                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                        $(event.currentTarget).attr("title", "显示连线");
                        $(event.currentTarget).removeClass("linkCellHover");
                        // $(event.currentTarget).children().attr("src",norImg);
                        //隐藏连线
                        IntelligentRoadTest.hideCBPoorAreaNrTop5Sector();
                    } else {
                        $(event.currentTarget).attr("title", "隐藏连线");
                        $(event.currentTarget).addClass("linkCellHover");
                        var centerPoint = new BMap.Point(item.longitude_mid_baidu, item.latitude_mid_baidu);
                        var enodebid_cellidArr = [];
                        for (var i = 0; i < nrCellList.length; i++) {
                            if (nrCellList[i].enodebid != null && nrCellList[i].enodebid != "" &&
                                nrCellList[i].cellid != null && nrCellList[i].cellid != "") { //做一下容错，不将基站ID和小区ID 为空的扇区拼进去
                                enodebid_cellidArr.push(nrCellList[i].enodebid + "," + nrCellList[i].cellid); //将基站ID和扇区ID用逗号拼在一起
                            }
                        }
                        var sector_set = enodebid_cellidArr.join("@"); //拼成一个以@符号切割扇区的字符串

                        IntelligentRoadTest.showNrTop5CellForMap(centerPoint, sector_set, null, true);

                    }
                }
            }
        });
    } else {
        IntelligentRoadTest.rfgCompleteVM.nrTop5Cell = nearTOP5;
        IntelligentRoadTest.rfgCompleteVM.mrNrTop5Cell = mrNearTOP5;
        IntelligentRoadTest.rfgCompleteVM.zhuantiName = zhuantiName;
        IntelligentRoadTest.rfgCompleteVM.poorAreaData = item;
        IntelligentRoadTest.rfgCompleteVM.typeName = IntelligentRoadTest.poorAreaObj.typeName;
    }
    showOrHideInputImage(1);
}
//将弱区保存为关注区域
IntelligentRoadTest.savePoorAreaToConcernArea = function (poorAreaData) {
    if (IntelligentRoadTest.poorAreaCahe == null) {
        IntelligentRoadTest.poorAreaCahe = poorAreaData.gis_data;
    } else {
        if (IntelligentRoadTest.poorAreaCahe == poorAreaData.gis_data && IntelligentRoadTest.isShowAlarmInfoMessage == true) {
            return;
        } else {
            IntelligentRoadTest.poorAreaCahe = poorAreaData.gis_data;
        }
    }
    var obj = IntelligentRoadTest.getBaiduPolygonObj(poorAreaData.gis_data);
    IntelligentRoadTest.overlaycomplete(obj, false);
    IntelligentRoadTest.goSaveAreaCompleteMessage();
    setTimeout(function () {
        $("#boxSelectionCount").show();
    }, 1000);
}

IntelligentRoadTest.setSaveAreaCompleteData = function (poorAreaData) {
    $("#saveConcernAreaName").val(poorAreaData.object_id + "_" + IntelligentRoadTest.day);
    var name = "弱区";
    if (IntelligentRoadTest.poorAreaObj != null) {
        name = IntelligentRoadTest.poorAreaObj.typeName;
    }
    $("#saveConcernAreaType").val(name);
    $("#boxCitySelect").val(poorAreaData.city);
    $("#boxCitySelect").trigger("change");
    $("#boxCountrySelect").val(poorAreaData.country_id);
    $("#boxCountrySelect").trigger("change");
    $("#boxMktcenterSelect").val(poorAreaData.mktcenter_id);
    $("#SystemLayerSelect").val("关注区域");
}
//--------------------------------弱覆盖区域结束----------------------------------

//-----------------------------关注区域列表开始-------------------------------------
IntelligentRoadTest.dealQueryAllConcernArea = function IntelligentRoadTest_dealQueryAllConcernArea(data) {
    var result = callBackChangeData(data);
    // console.log(result);
    IntelligentRoadTest.concernAreaCrossFliterObj.remove();
    IntelligentRoadTest.boneCrossFliterObj.add(result);
    IntelligentRoadTest.concernAreaResult = result;
    IntelligentRoadTest.concernAreaCurrentResult = result;
    //IntelligentRoadTest.concernAreaData(result);
    // $("#concernAreaList .flexRow ").eq(0).children(".selected").trigger("click")

    var SelectName = $("#concernAreaListSelectName").text();
    var flexCol = $("#concernAreaList  .flexRow .flexCol");
    IntelligentRoadTest.triggleFilter(SelectName, flexCol);
}

IntelligentRoadTest.concernAreaData = function IntelligentRoadTest_concernAreaData(result) {
    IntelligentRoadTest.concernAreaCurrentPage = 1;
    IntelligentRoadTest.concernAreaTotalCount = result.length;
    var pageCount = result.length / IntelligentRoadTest.pageSize;
    if ((result.length % IntelligentRoadTest.pageSize) != 0) {
        IntelligentRoadTest.concernAreaTotalPage = parseInt(pageCount) + 1; //总页数，没有整除时加上1
    } else {
        IntelligentRoadTest.concernAreaTotalPage = pageCount;  //整除不用加1
    }

    if (IntelligentRoadTest.concernAreaVM == null) {
        IntelligentRoadTest.concernAreaVM = new Vue({
            el: '#showConcernAreaDataDiv',
            data: {
                concernAreaList: IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.concernAreaCurrentResult, IntelligentRoadTest.concernAreaCurrentPage),
                totalPages: IntelligentRoadTest.concernAreaTotalPage,
                totalCounts: IntelligentRoadTest.concernAreaTotalCount,
                currentPageNum: IntelligentRoadTest.concernAreaCurrentPage,
                startIndex: IntelligentRoadTest.startIndex,
                lastIndex: IntelligentRoadTest.lastIndex,
                uname: IntelligentRoadTest.currentUser
            },
            methods: {
                showMessage: function (item, index) {
                    IntelligentRoadTest.mkIndex = index;
                    IntelligentRoadTest.cacheItem = item;
//                	IntelligentRoadTest.loadGridAndPolygon(IntelligentRoadTest.day,item.object_id);
                    /*IntelligentRoadTest.openInfoWindowTwo((item.min_longitude_baidu+item.max_longitude_baidu)/2,(item.max_latitude_baidu+item.min_latitude_baidu)/2,
                        [
                            {"key":"区域名称","val":item.area_name},
                            {"key":"区域编号","val":item.id},
                        ]
                    );*/
                    IntelligentRoadTest.goConcernAreaCompleteMessage();
                    if (!IntelligentRoadTest.isScreenCompared && IntelligentRoadTest.isAddMessageEvent) {//不是在分屏页，并且点击过分屏
                        if (!windowScreeen.closed) {//如果窗口没有关闭，需要进行同步信息，如果已经关闭，什么都不用做
                            // windowScreeen.focus();
                            IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'concernArea');
                        }
                    }

                    $('#concernHandleDescribe').val(item.handle_description);
                    if (IntelligentRoadTest.mapClick) {
                        IntelligentRoadTest.mapClick = false;
                    } else {
                        if(!IntelligentRoadTest.isChangeDate){ //日期切换的时候不做任何定位和缩放
                            var zoom = getZoom(item.max_longitude_baidu, item.min_longitude_baidu, item.max_latitude_baidu, item.min_latitude_baidu);
                            IntelligentRoadTest.map.centerAndZoom(new BMap.Point((item.max_longitude_baidu + item.min_longitude_baidu) / 2, (item.max_latitude_baidu + item.min_latitude_baidu) / 2), zoom);
                        }else{
                            IntelligentRoadTest.isChangeDate = false;
                        }
                    }
                    IntelligentRoadTest.showPolygon(item.gis_data_baidu, undefined, "concern", item.id, IntelligentRoadTest.day, item.area_name);
                    IntelligentRoadTest.loadGrid(item.max_longitude_baidu, item.min_longitude_baidu, item.max_latitude_baidu, item.min_latitude_baidu);

                    // $("#colorBar").click();

                    var RecentCellImg = $("#showConcernAreaCompleteMessage").find('.linkCell').children('img');
                    $(RecentCellImg).each(function () {
                        var srcText = $(this).attr('src');
                        var clickImg = srcText.replace("nor", "click");
                        var norImg = srcText.replace("click", "nor");
                        if (srcText == clickImg) {
                            $(this).attr('src', norImg);
                        }
                    });
                    IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                    IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                    var hideSecondEchart = false;
                    var echartTitle = "历史覆盖变化";
                    var today = new Date().Format("yyyy-MM-dd");
                    if (item.create_time == today) {
                        echartTitle = "历史7天覆盖变化";
                        IntelligentRoadTest.concernAreaSevenLine(item, IntelligentRoadTest.day, 7);//默认加载近7天的折线图
                        hideSecondEchart = true;
                    } else {
                        echartTitle = "历史30天覆盖变化";
                        IntelligentRoadTest.getConcernArea30DayData(item.id, 0);
                    }

                    var nearTOP5 = [];
                    if (item.ne_sector_set != null && item.ne_sector_set != "") {
                        var to5DataArr = item.ne_sector_set.split("@");
                        for (var i = 0; i < to5DataArr.length; i++) {
                            nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
                        }
                    }
                    var mrNearTOP5 = [];
                    if (item.sector_set != null && item.sector_set != "") {
                        var mrTo5DataArr = item.sector_set.split("@");
                        for (var k = 0; k < mrTo5DataArr.length; k++) {
                            mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
                        }
                    }
                    if (IntelligentRoadTest.checkIfHasSameSector(nearTOP5, mrNearTOP5)) {
                        item.isHasSameSector = true;
                    }
                    $(".linkCell").attr("title", "显示连线");
                    $(".linkCell").removeClass("linkCellHover");
                    if (IntelligentRoadTest.concernAreaCompleteVM == null) {
                        IntelligentRoadTest.concernAreaCompleteVM = new Vue({
                            el: '#showConcernAreaCompleteMessage',
                            data: {
                                concernAreaData: item,
                                dataIndex: index,
                                nrTop5Cell: nearTOP5,
                                mrTop5Cell: mrNearTOP5,
                                title: echartTitle,
                                hideSecondEchart: hideSecondEchart,
                                uname: IntelligentRoadTest.currentUser
                            },
                            methods: {
                                exportCoverData : function(){
                                    IntelligentRoadTest.exportCoverData(); //导出覆盖率趋势图数据
                                },
                                concernPosition: function (item) {
                                    if (!isNull(item.min_longitude_baidu) && !isNull(item.max_longitude_baidu) && !isNull(item.max_latitude_baidu) && !isNull(item.min_latitude_baidu)) {
                                        var zoom = getZoom(item.max_longitude_baidu, item.min_longitude_baidu, item.max_latitude_baidu, item.min_latitude_baidu);
                                        IntelligentRoadTest.map.centerAndZoom(new BMap.Point((item.min_longitude_baidu + item.max_longitude_baidu) / 2, (item.max_latitude_baidu + item.min_latitude_baidu) / 2), zoom);
                                    }
                                },
                                concernAreaPosition: function (item) {
                                    IntelligentRoadTest.concernAreaPositiong(item);
                                },
                                editConcernAreaMessage: function (item) {
                                    IntelligentRoadTest.concernAreaEdit(item);
                                },
                                deleteConcernArea: function (item) {
                                    if (item.share_status == null || item.share_status == "" || item.share_status == "共享未通过") { //这个时候是不可以删除的
                                        IntelligentRoadTest.wantDeleteConcern = item;
                                        $("#modal-concernArea").show();
                                    } else {
                                        if (item.share_status == "共享审核中") {
                                            $("#tipMessage").html("请先撤销申请！");
                                        } else if (item.share_status == "已共享") {
                                            $("#tipMessage").html("请先取消共享！");
                                        } else if (item.share_status == "取消共享审核中") {
                                            $("#tipMessage").html("请等待取消共享审核通过之后才能删除！");
                                        }
                                        $(".submitModal").show().delay(2000).fadeOut();
                                    }
                                },
                                viewConcernAreaLog: function (item) {
                                    IntelligentRoadTest.concernAreaLog(item);
                                },
                                gotoConcernAreaSevenEchart: function (item) {
                                    IntelligentRoadTest.concernAreaSevenLine(item);
                                },
                                showDetailInfo: function (event) {
                                    IntelligentRoadTest.showDetailInfo(event);
                                },
                                showLinkCell: function (event, item, type) {
                                    //type=1最近小区，type=2 接入扇区
                                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                                        $(event.currentTarget).attr("title", "显示连线");
                                        $(event.currentTarget).removeClass("linkCellHover");
                                        if (type == 1) {
                                            IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                                        } else if (type == 2) {
                                            IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                                        }
                                    } else {
                                        $(event.currentTarget).attr("title", "隐藏连线");
                                        $(event.currentTarget).addClass("linkCellHover");
                                        var max_lng = item.max_longitude_baidu;
                                        var max_lat = item.max_latitude_baidu;
                                        var min_lng = item.min_longitude_baidu;
                                        var min_lat = item.min_latitude_baidu;
                                        var mid_lng = (max_lng + min_lng) / 2;
                                        var mid_lat = (max_lat + min_lat) / 2;
                                        var centerPoint = new BMap.Point(mid_lng, mid_lat);
                                        if (type == 1) {
                                            IntelligentRoadTest.showNrTop5CellForMap(centerPoint, item.ne_sector_set);
                                        } else if (type == 2) {
                                            IntelligentRoadTest.showMrNrTop5CellForMap(centerPoint, item.sector_set);
                                        }
                                    }
                                },
                                gotoShowSectorMessage: function (sectorDate) {
                                    IntelligentRoadTest.clickType = 1;
                                    IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                                },
                                gotoKPIList: function (item) {
                                    if (item.sector_set != null) {
                                        var sectorArr = item.sector_set.split("@");
                                        IntelligentRoadTest.loadKPIListData(sectorArr);
                                        $("#kpiBackPoor").html("返回上一级");
                                    }
                                },
                                //共享按钮的点击事件
                                btnShareClick: function (item) {
                                    //显示共享的弹出框
                                    $("#share").show();
//                                    concernAreaShare.setRightCityCounty(item.share_scope,concernAreaShare.cityResult);
//                                    concernAreaShare.getUserCity(item.creator);
//                                    concernAreaShare.showShare();
                                    //获取用户的分权分域数据
                                    // concernAreaShare.getUserCity(item.creator);
                                    var treeData = concernAreaShare.getTreeData(concernAreaShare.userGroupData);
                                    //创建ztree实例
                                    concernAreaShare.ztre = new ZtreeUtil("cityZtree", treeData);
                                    //显示ztree
                                    concernAreaShare.ztre.showTree();
                                    //根据item.share_scope设置选中
                                    if (item.share_scope != null) {
                                        concernAreaShare.ztre.chekeNode(item.share_scope);
                                    }
                                },
                                //取消共享按钮的点击事件
                                cancelShareClick: function (item) {
                                    var concern = item;
                                    concernAreaShare.cancelShareConcernArea(concern);
                                },
                                //撤销申请的点击事件
                                revokeApplyClick: function (item) {
                                    $("#revokeModal").show();
                                }, showPolygonGrid: function (item, event) {
                                    IntelligentRoadTest.showHidePolygonGrid(item, event);
                                }
                            }
                        });
                    } else {
                        IntelligentRoadTest.concernAreaCompleteVM.concernAreaData = item;
                        IntelligentRoadTest.concernAreaCompleteVM.dataIndex = index;
                        IntelligentRoadTest.concernAreaCompleteVM.nrTop5Cell = nearTOP5;
                        IntelligentRoadTest.concernAreaCompleteVM.mrTop5Cell = mrNearTOP5;
                        IntelligentRoadTest.concernAreaCompleteVM.title = echartTitle;
                        IntelligentRoadTest.concernAreaCompleteVM.hideSecondEchart = hideSecondEchart;
                    }
                },
                lastOrNext: function (type) {
                    if (type == 0) {
                        //上一页
                        if (IntelligentRoadTest.concernAreaCurrentPage > 1) {
                            IntelligentRoadTest.concernAreaCurrentPage = IntelligentRoadTest.concernAreaCurrentPage - 1;
                            IntelligentRoadTest.concernAreaVM.concernAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.concernAreaCurrentResult, IntelligentRoadTest.concernAreaCurrentPage);
                            IntelligentRoadTest.concernAreaVM.currentPageNum = IntelligentRoadTest.concernAreaCurrentPage;
                            IntelligentRoadTest.concernAreaVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.concernAreaVM.lastIndex = IntelligentRoadTest.lastIndex;
                        } else {
                            alert("当前页是第一页");
                        }
                    } else {
                        if (IntelligentRoadTest.concernAreaCurrentPage < IntelligentRoadTest.concernAreaTotalPage) {
                            IntelligentRoadTest.concernAreaCurrentPage = IntelligentRoadTest.concernAreaCurrentPage + 1;
                            IntelligentRoadTest.concernAreaVM.concernAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.concernAreaCurrentResult, IntelligentRoadTest.concernAreaCurrentPage);
                            IntelligentRoadTest.concernAreaVM.currentPageNum = IntelligentRoadTest.concernAreaCurrentPage;
                            IntelligentRoadTest.concernAreaVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.concernAreaVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                    }
                    // $("#concernAreaCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.concernAreaTotalCount +"条数据)");
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.concernAreaVM.concernAreaList, 1);
                },
                gotoPage: function () {
                    var page = $("#concernAreaPage").val();
                    page = parseInt(page);
                    if (page > 0 && page <= IntelligentRoadTest.concernAreaTotalPage) {
                        IntelligentRoadTest.concernAreaCurrentPage = page;
                        IntelligentRoadTest.concernAreaVM.concernAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.concernAreaCurrentResult, IntelligentRoadTest.concernAreaCurrentPage);
                        IntelligentRoadTest.concernAreaVM.currentPageNum = IntelligentRoadTest.concernAreaCurrentPage;
                        IntelligentRoadTest.concernAreaVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.concernAreaVM.lastIndex = IntelligentRoadTest.lastIndex;
                    }
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.concernAreaVM.concernAreaList, 1);
                    // $("#concernAreaCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.concernAreaTotalCount +"条数据)");
                },
                goLast: function () {
                    IntelligentRoadTest.concernAreaCurrentPage = IntelligentRoadTest.concernAreaTotalPage;
                    IntelligentRoadTest.concernAreaVM.concernAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.concernAreaCurrentResult, IntelligentRoadTest.concernAreaCurrentPage);
                    IntelligentRoadTest.concernAreaVM.currentPageNum = IntelligentRoadTest.concernAreaCurrentPage;
                    IntelligentRoadTest.concernAreaVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.concernAreaVM.lastIndex = IntelligentRoadTest.lastIndex;
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.concernAreaVM.concernAreaList, 1);
                    $("#concernAreaCount").html("返回上一级(本页显示第" + IntelligentRoadTest.startIndex + "-"
                        + IntelligentRoadTest.lastIndex + "条的数据，共" + IntelligentRoadTest.concernAreaTotalCount + "条数据)");
                },
                goFirst: function () {
                    IntelligentRoadTest.concernAreaCurrentPage = 1;
                    IntelligentRoadTest.concernAreaVM.concernAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.concernAreaCurrentResult, IntelligentRoadTest.concernAreaCurrentPage);
                    IntelligentRoadTest.concernAreaVM.currentPageNum = IntelligentRoadTest.concernAreaCurrentPage;
                    IntelligentRoadTest.concernAreaVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.concernAreaVM.lastIndex = IntelligentRoadTest.lastIndex;
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.concernAreaVM.concernAreaList, 1);
                    $("#concernAreaCount").html("返回上一级(本页显示第" + IntelligentRoadTest.startIndex + "-"
                        + IntelligentRoadTest.lastIndex + "条的数据，共" + IntelligentRoadTest.concernAreaTotalCount + "条数据)");
                },
                turnMk: function (index, item) {
                    for (var i = 0; i < IntelligentRoadTest.markerList.length; i++) {
                        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.markerList[i]);
                    }

                    for (var i = 0; i < IntelligentRoadTest.lngArr.length; i++) {
                        var lng = IntelligentRoadTest.lngArr[i];
                        var lat = IntelligentRoadTest.latArr[i];
                        var color = "#fff"
                        var img = "../js/IntelligentRoadTest/images/bg_num.png";
                        if (i == index) {
                            img = "../js/IntelligentRoadTest/images/maker2.png";
                            color = "black";
                            IntelligentRoadTest.openInfoWindow(lng, lat, item.area_name);
                        }
                        IntelligentRoadTest.addMk(lng, lat, img, i, color, item.area_name);
                        $("#showConcernAreaDataDiv").find(".listUL > li").eq(i).find(".numSpan").css("background", "url(../js/IntelligentRoadTest/images/bg_num.png)");
                        $("#showConcernAreaDataDiv").find(".listUL > li").eq(i).css("background", "#fff");
                    }
                    $("#showConcernAreaDataDiv").find(".listUL > li").eq(index).find(".numSpan").css("background", "url(../js/IntelligentRoadTest/images/maker2.png)");
                    $("#showConcernAreaDataDiv").find(".listUL > li").eq(index).css("background", "#f4f4f4");
                },
                viewAudit: function (event, audit_option) {
                    var top = event.pageY;
                    $("#auditOption").html(audit_option);
                    $(".auditTip").css("top", top - 70);
                    $(".auditTip").show();
                    $(".auditTip").mouseover(function () {
                        $(".auditTip").show();
                    }).mouseout(function () {
                        $(".auditTip").hide();
                    })
                },
                hideAudit: function () {
                    $(".auditTip").hide();
                }
            }
        });
    } else { //改变数值
        IntelligentRoadTest.concernAreaVM.concernAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.concernAreaCurrentResult, IntelligentRoadTest.concernAreaCurrentPage);
        IntelligentRoadTest.concernAreaVM.totalPages = IntelligentRoadTest.concernAreaTotalPage;
        IntelligentRoadTest.concernAreaVM.totalCounts = IntelligentRoadTest.concernAreaTotalCount;
        IntelligentRoadTest.concernAreaVM.currentPageNum = IntelligentRoadTest.concernAreaCurrentPage;
        IntelligentRoadTest.concernAreaVM.startIndex = IntelligentRoadTest.startIndex;
        IntelligentRoadTest.concernAreaVM.lastIndex = IntelligentRoadTest.lastIndex;
        if (IntelligentRoadTest.index == 1) {
            IntelligentRoadTest.drawMk(IntelligentRoadTest.concernAreaVM.concernAreaList, 1);
        }
        if (!$("#showConcernAreaCompleteMessage").is(":visible")) {
            // $("#concernAreaCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
            //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.concernAreaTotalCount +"条数据)");
        }
    }
    showOrHideInputImage(1);
}

IntelligentRoadTest.queryAllConcernArea = function IntelligentRoadTest_queryAllConcernArea(city, district_name, mktcenter_name) {
    var sqlList = [];
    var sqlTemplateID = "";
    if (concernAreaShare.isManager == true) {
        sqlTemplateID = "IntelligentRoadTestV2_18_allConcernArea";
    } else {
        sqlTemplateID = "IntelligentRoadTestV2_getAllConcernAreaByNormalUser";
    }
    var list = [sqlTemplateID];
    var city = $('#concernAreaCityName').text().trim();
    if (city == "全省") {
        list.push("CITY:");
    } else {
        list.push("CITY:" + "and city='" + city + "'");
    }
    list.push("USERNAME:" + IntelligentRoadTest.currentUser);
    list.push("NODE_ID:" + concernAreaShare.user_nodeId);
    if(!isNull(IntelligentRoadTest.countryPermission_common)){ //区县用户不可以看全市
        district_name = IntelligentRoadTest.countryPermission_common;
    }

    if (district_name != null && district_name != "" && district_name != "null") {
        list.push("COUNTRY:" + "and COUNTRY = '" + district_name + "'");
    } else {
        var countryStr = $("#concernAreaDistrictName").text().trim();
        if (countryStr != "" && countryStr != "全市" && countryStr != "null") {
            district_name = countryStr;
            list.push("COUNTRY:" + "and COUNTRY = '" + district_name + "'");
        }
    }
    if (mktcenter_name != null && mktcenter_name != "" && mktcenter_name != "null") {
        list.push("MKTCENTER:" + "and MKTCENTER = '" + mktcenter_name + "'");
    } else {
        var mktcenter = $("#concernAreaMktName").text().trim();
        if (mktcenter != "" && mktcenter != "全区" && mktcenter != "null") {
            mktcenter_name = mktcenter;
            list.push("MKTCENTER:" + "and MKTCENTER = '" + mktcenter_name + "'");
        }
    }
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealQueryAllConcernArea];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);
    //记录查询条件
    IntelligentRoadTest.concernAreaCurrentSelectConditon = "" + city;
}


IntelligentRoadTest.getConcernAreaMessageById = function IntelligentRoadTest_getConcernAreaMessageById(objectId) {

    var sqlList = [];
    var list = ["IntelligentRoadTestV2_getConcernAreaById", "OBJECTID:" + objectId];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealConcernAreaMessageById];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);

}

IntelligentRoadTest.dealConcernAreaMessageById = function IntelligentRoadTest_dealConcernAreaMessageById(data) {
    var result = callBackChangeData(data);
    if (result.length > 0) {
        var item = result[0];
        IntelligentRoadTest.showConcernAreaMessageById(item);
    }
}

IntelligentRoadTest.getConncernAreaHisMessageById = function IntelligentRoadTest_getConncernAreaHisMessageById(id, day) {
    if (IntelligentRoadTest.concernAreaCompleteVM) {
        IntelligentRoadTest.concernAreaCompleteVM.concernAreaData = {};
        IntelligentRoadTest.concernAreaCompleteVM.concernAreaData.id = id;
    }

    var sqlList = [];
    var list = ["IntelligentRoadTestAnalysi_v2_getConcernAreaHis", "ID:" + id, "DAY:" + day];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealConcernAreaMessageById];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);
}

IntelligentRoadTest.showConcernAreaMessageById = function IntelligentRoadTest_showConcernAreaMessageById(item) {
    if(IntelligentRoadTest.concernAreaVM == null){
        IntelligentRoadTest.concernAreaData([]);
    }
    IntelligentRoadTest.concernAreaVM.showMessage(item);
    return;
    if (!IntelligentRoadTest.isScreenCompared && IntelligentRoadTest.isAddMessageEvent) {//不是在分屏页，并且点击过分屏
        if (!windowScreeen.closed) {//如果窗口没有关闭，需要进行同步信息，如果已经关闭，什么都不用做
            // windowScreeen.focus();
            IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'concernArea');
        }
    }


    IntelligentRoadTest.showPolygon(item.gis_data_baidu, undefined, "concern", item.id, IntelligentRoadTest.day, item.area_name);
    IntelligentRoadTest.cacheItem = item;
    // IntelligentRoadTest.index=1;
    //跳转到关注区域详情
    IntelligentRoadTest.goConcernAreaCompleteMessage();
    // var	textList=[
    //     {"key":"区域名称","val":item.area_name},
    //     {"key":"区域编号","val":item.id},
    // ];
    // IntelligentRoadTest.openInfoWindowTwo((item.max_longitude_baidu+item.min_longitude_baidu)/2,(item.max_latitude_baidu+item.min_latitude_baidu)/2,textList);
    IntelligentRoadTest.loadGrid(item.max_longitude_baidu, item.min_longitude_baidu, item.max_latitude_baidu, item.min_latitude_baidu);
    if (!IntelligentRoadTest.mapClick) {
        var zoom = getZoom(item.max_longitude_baidu, item.min_longitude_baidu, item.max_latitude_baidu, item.min_latitude_baidu);
        IntelligentRoadTest.map.centerAndZoom(new BMap.Point((item.min_longitude_baidu + item.max_longitude_baidu) / 2, (item.max_latitude_baidu + item.min_latitude_baidu) / 2), zoom);
    }
    /*if ($(".colorBar-info").css("display") == "none") {
       $(".colorBar-info").show();
   }*/
    var RecentCellImg = $("#showConcernAreaCompleteMessage").find('.linkCell').children('img');
    $(RecentCellImg).each(function () {
        var srcText = $(this).attr('src');
        var clickImg = srcText.replace("nor", "click");
        var norImg = srcText.replace("click", "nor");
        if (srcText == clickImg) {
            $(this).attr('src', norImg);
        }
    });
    IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
    IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();


    // $("#colorBar").click();
    var hideSecondEchart = false;
    var echartTitle = "历史覆盖变化";
    var today = new Date().Format("yyyy-MM-dd");
    if (item.create_time == today) {
        echartTitle = "历史7天覆盖变化";
        IntelligentRoadTest.concernAreaSevenLine(item, IntelligentRoadTest.day, 7);//默认加载近7天的折线图
        hideSecondEchart = true;
    } else {
        echartTitle = "历史30天覆盖变化";
        IntelligentRoadTest.getConcernArea30DayData(item.id, 0); // 0表示查询历史表中的关注区域
    }
    var nearTOP5 = [];
    if (item.ne_sector_set != null && item.ne_sector_set != "") {
        var to5DataArr = item.ne_sector_set.split("@");
        for (var i = 0; i < to5DataArr.length; i++) {
            nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
        }
    }
    var mrNearTOP5 = [];
    if (item.sector_set != null && item.sector_set != "") {
        var mrTo5DataArr = item.sector_set.split("@");
        for (var k = 0; k < mrTo5DataArr.length; k++) {
            mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
        }
    }
    if (IntelligentRoadTest.checkIfHasSameSector(nearTOP5, mrNearTOP5)) {
        item.isHasSameSector = true;
    }
    if (IntelligentRoadTest.concernAreaCompleteVM == null) {
        IntelligentRoadTest.concernAreaCompleteVM = new Vue({
            el: '#showConcernAreaCompleteMessage',
            data: {
                concernAreaData: item,
                // dataIndex : index ,
                nrTop5Cell: nearTOP5,
                mrTop5Cell: mrNearTOP5,
                title: echartTitle,
                hideSecondEchart: hideSecondEchart,
                uname: IntelligentRoadTest.currentUser
            },
            methods: {
                exportCoverData : function(){
                    IntelligentRoadTest.exportCoverData(); //导出覆盖率趋势图数据
                },
                concernPosition: function (item) {
                    if (!isNull(item.min_longitude_baidu) && !isNull(item.max_longitude_baidu) && !isNull(item.max_latitude_baidu) && !isNull(item.min_latitude_baidu)) {
                        var zoom = getZoom(item.max_longitude_baidu, item.min_longitude_baidu, item.max_latitude_baidu, item.min_latitude_baidu);
                        IntelligentRoadTest.map.centerAndZoom(new BMap.Point((item.min_longitude_baidu + item.max_longitude_baidu) / 2, (item.max_latitude_baidu + item.min_latitude_baidu) / 2), zoom);
                    }
                },
                concernAreaPosition: function (item) {
                    IntelligentRoadTest.concernAreaPositiong(item);
                },
                editConcernAreaMessage: function (item) {
                    IntelligentRoadTest.concernAreaEdit(item);
                },
                deleteConcernArea: function (item) {
                    if (item.share_status == null || item.share_status == "" || item.share_status == "共享未通过") { //这个时候是不可以删除的
                        IntelligentRoadTest.wantDeleteConcern = item;
                        $("#modal-concernArea").show();
                    } else {
                        if (item.share_status == "共享审核中") {
                            $("#tipMessage").html("请先撤销申请！");
                        } else if (item.share_status == "已共享") {
                            $("#tipMessage").html("请先取消共享！");
                        } else if (item.share_status == "取消共享审核中") {
                            $("#tipMessage").html("请等待取消共享审核通过之后才能删除！");
                        }
                        $(".submitModal").show().delay(2000).fadeOut();
                    }
                },
                viewConcernAreaLog: function (item) {
                    IntelligentRoadTest.concernAreaLog(item);
                },
                gotoConcernAreaSevenEchart: function (item) {
                    IntelligentRoadTest.concernAreaSevenLine(item);
                },
                showDetailInfo: function (event) {
                    IntelligentRoadTest.showDetailInfo(event);
                },
                showLinkCell: function (event, item, type) {
                    //type=1最近小区，type=2 接入扇区
                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                        $(event.currentTarget).attr("title", "显示连线");
                        $(event.currentTarget).removeClass("linkCellHover");
                        if (type == 1) {
                            IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                        } else if (type == 2) {
                            IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                        }
                    } else {
                        $(event.currentTarget).attr("title", "隐藏连线");
                        $(event.currentTarget).addClass("linkCellHover");
                        var max_lng = item.max_longitude_baidu;
                        var max_lat = item.max_latitude_baidu;
                        var min_lng = item.min_longitude_baidu;
                        var min_lat = item.min_latitude_baidu;
                        var mid_lng = (max_lng + min_lng) / 2;
                        var mid_lat = (max_lat + min_lat) / 2;
                        var centerPoint = new BMap.Point(mid_lng, mid_lat);
                        if (type == 1) {
                            IntelligentRoadTest.showNrTop5CellForMap(centerPoint, item.ne_sector_set);
                        } else if (type == 2) {
                            IntelligentRoadTest.showMrNrTop5CellForMap(centerPoint, item.sector_set);
                        }
                    }
                },
                gotoShowSectorMessage: function (sectorDate) {
                    IntelligentRoadTest.clickType = 1;
                    IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                },
                gotoKPIList: function (item) {
                    if (item.sector_set != null) {
                        var sectorArr = item.sector_set.split("@");
                        showOrHideInputImage(2);
                        IntelligentRoadTest.loadKPIListData(sectorArr);
                        $("#kpiBackPoor").html("返回上一级");
                    }
                },
                //共享按钮的点击事件
                btnShareClick: function (item) {
                    $("#share").show();
//                                    concernAreaShare.setRightCityCounty(item.share_scope,concernAreaShare.cityResult);
//                                    concernAreaShare.getUserCity(item.creator);
//                                    concernAreaShare.showShare();
                    //获取用户的分权分域数据
                    // concernAreaShare.getUserCity(item.creator);
                    var treeData = concernAreaShare.getTreeData(concernAreaShare.userGroupData);
                    //创建ztree实例
                    concernAreaShare.ztre = new ZtreeUtil("cityZtree", treeData);
                    //显示ztree
                    concernAreaShare.ztre.showTree();
                    //根据item.share_scope设置选中
                    if (item.share_scope != null) {
                        concernAreaShare.ztre.chekeNode(item.share_scope);
                    }
                },
                //取消共享按钮的点击事件
                cancelShareClick: function (item) {
                    var concern = item;
                    concernAreaShare.cancelShareConcernArea(concern);
                },
                //撤销申请的点击事件
                revokeApplyClick: function (item) {
                    $("#revokeModal").show();
                }, showPolygonGrid: function (item, event) {
                    IntelligentRoadTest.showHidePolygonGrid(item, event);
                }
            }
        });
    } else {
        IntelligentRoadTest.concernAreaCompleteVM.concernAreaData = item;
        //IntelligentRoadTest.concernAreaCompleteVM.dataIndex = index;
        IntelligentRoadTest.concernAreaCompleteVM.nrTop5Cell = nearTOP5;
        IntelligentRoadTest.concernAreaCompleteVM.mrTop5Cell = mrNearTOP5;
        IntelligentRoadTest.concernAreaCompleteVM.title = echartTitle;
        IntelligentRoadTest.concernAreaCompleteVM.hideSecondEchart = hideSecondEchart;
    }

}

//----------------------------关注区域列表结束 ----------------------------------------


//-----------------------------骨头区域列表开始-------------------------------------
IntelligentRoadTest.dealQueryAllBoneArea = function IntelligentRoadTest_dealQueryAllBoneArea(data) {
    var result = callBackChangeData(data);
    // console.log(result);

    //添加骨头数据
    IntelligentRoadTest.boneCrossFliterObj.remove();
    IntelligentRoadTest.boneCrossFliterObj.add(result);
    IntelligentRoadTest.boneAreaResult = result;
    IntelligentRoadTest.boneAreaCurrentResult = IntelligentRoadTest.boneAreaResult;
    //IntelligentRoadTest.boneAreaData(result);
    var SelectName = $("#boneListSelectName").text();
    var flexCol = $("#boneList  .flexRow .flexCol");
    IntelligentRoadTest.triggleFilter(SelectName, flexCol);
    // $("#boneList .flexRow ").eq(0).children(".selected").trigger("click");

}

IntelligentRoadTest.boneAreaData = function IntelligentRoadTest_boneAreaData(result) {
    IntelligentRoadTest.boneAreaCurrentPage = 1;
    IntelligentRoadTest.boneAreaTotalCount = result.length;
    var pageCount = result.length / IntelligentRoadTest.pageSize;
    if ((result.length % IntelligentRoadTest.pageSize) != 0) {
        IntelligentRoadTest.boneAreaTotalPage = parseInt(pageCount) + 1; //总页数，没有整除时加上1
    } else {
        IntelligentRoadTest.boneAreaTotalPage = pageCount;  //整除不用加1
    }
    var list = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.boneAreaCurrentResult, IntelligentRoadTest.boneAreaCurrentPage);
    if (IntelligentRoadTest.boneAreaVM == null) {
        IntelligentRoadTest.boneAreaVM = new Vue({
            el: '#showBoneAreaDataDiv',
            data: {
                boneAreaList: list,
                totalPages: IntelligentRoadTest.boneAreaTotalPage,
                totalCounts: IntelligentRoadTest.boneAreaTotalCount,
                currentPageNum: IntelligentRoadTest.boneAreaCurrentPage,
                startIndex: IntelligentRoadTest.startIndex,
                lastIndex: IntelligentRoadTest.lastIndex
            },
            methods: {
                showMessage: function (item, index) {
                    IntelligentRoadTest.mkIndex = index;
                    IntelligentRoadTest.cacheItem = item;
                    //跳转到骨头区域详情
                    IntelligentRoadTest.goBoneAreaCompleteMessage();
                    IntelligentRoadTest.showPolygon(item.gis_data, undefined, "boneArea", item.object_id, IntelligentRoadTest.day, item.object_name);
//                	IntelligentRoadTest.loadGridAndPolygon(IntelligentRoadTest.day,item.object_id);
                    /*IntelligentRoadTest.openInfoWindowTwo((item.longitude_min+item.longitude_max)/2,(item.latitude_max+item.latitude_min)/2,
                        [
                            {"key":"区域名称","val":item.object_name},
                            {"key":"区域编号","val":item.id},
                        ]
                    );*/

                    $('#boneHandleDescribe').text(item.suspend_reason == null ? "" : item.suspend_reason);

                    if (IntelligentRoadTest.mapClick) {
                        IntelligentRoadTest.mapClick = false;
                    } else {
                        if(!IntelligentRoadTest.isChangeDate){ //日期切换的时候不做任何定位和缩放
                            var zoom = getZoom(item.longitude_max, item.longitude_min, item.latitude_max, item.latitude_min);
                            IntelligentRoadTest.map.centerAndZoom(new BMap.Point((item.longitude_min + item.longitude_max) / 2, (item.latitude_min + item.latitude_max) / 2), zoom);
                        }else{
                            IntelligentRoadTest.isChangeDate = false;
                        }
                    }
                    IntelligentRoadTest.loadGrid(item.longitude_max, item.longitude_min, item.latitude_max, item.latitude_min);

                    if (!IntelligentRoadTest.isScreenCompared && IntelligentRoadTest.isAddMessageEvent) {//不是在分屏页，并且点击过分屏
                        if (!windowScreeen.closed) {//如果窗口没有关闭，需要进行同步信息，如果已经关闭，什么都不用做
                            // windowScreeen.focus();
                            IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'boneArea');
                        }
                    }

                    if (item.is_suspend == 'Y' && item.area_src_type == 0) {
                        $('#SureBornArea').attr("checked", 'checked');
                        $('#unSureBornArea').removeAttr("checked");
                    } else if (item.is_suspend == 'N' && item.area_src_type == 0) {
                        $('#unSureBornArea').attr("checked", 'checked');
                        $('#SureBornArea').removeAttr("checked");
                    }
                    //清除top小区连线
                    var RecentCellImg = $("#showBoneAreaCompleteMessage").find('.linkCell').children('img');
                    $(RecentCellImg).each(function () {
                        var srcText = $(this).attr('src');
                        var clickImg = srcText.replace("nor", "click");
                        var norImg = srcText.replace("click", "nor");
                        if (srcText == clickImg) {
                            $(this).attr('src', norImg);
                        }
                    });
                    IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                    IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                    var hideSecondEchart = false;
                    var echartTitle = "历史覆盖变化";
                    var today = new Date().Format("yyyy-MM-dd");
                    if (item.create_time == today) {
                        echartTitle = "历史7天覆盖变化";
                        IntelligentRoadTest.boneAreaSevenLine(item, IntelligentRoadTest.day, 7);//默认加载近7天的折线图
                        hideSecondEchart = true;
                    } else {
                        echartTitle = "历史30天覆盖变化";
                        IntelligentRoadTest.getConcernArea30DayData(item.id, 1);
                    }
                    // $("#colorBar").click();

                    var nearTOP5 = [];
                    if (item.ne_sector_set != null && item.ne_sector_set != "") {
                        var to5DataArr = item.ne_sector_set.split("@");
                        for (var i = 0; i < to5DataArr.length; i++) {
                            nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
                        }
                    }
                    var mrNearTOP5 = [];
                    if (item.sector_set != null && item.sector_set != "") {
                        var mrTo5DataArr = item.sector_set.split("@");
                        for (var k = 0; k < mrTo5DataArr.length; k++) {
                            mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
                        }
                    }
                    if (IntelligentRoadTest.checkIfHasSameSector(nearTOP5, mrNearTOP5)) {
                        item.isHasSameSector = true;
                    }
                    if (item.create_time != null && item.create_time.toString().indexOf("-") < 0) { //转换日期格式
                        item.create_time = dealDateString(item.create_time.toString()).Format("yyyy-MM-dd");
                    }
                    $(".linkCell").attr("title", "显示连线");
                    $(".linkCell").removeClass("linkCellHover");
                    if (IntelligentRoadTest.boneAreaCompleteVM == null) {
                        IntelligentRoadTest.boneAreaCompleteVM = new Vue({
                            el: '#showBoneAreaCompleteMessage',
                            data: {
                                boneAreaData: item,
                                dataIndex: index,
                                nrTop5Cell: nearTOP5,
                                mrTop5Cell: mrNearTOP5,
                                hideSecondEchart: hideSecondEchart,
                                uname: IntelligentRoadTest.currentUser,
                                title: echartTitle
                            },
                            methods: {
                                boneAreaPosition: function (item) {
                                    // IntelligentRoadTest.boneAreaPositiong(item);
                                    var zoom = getZoom(item.longitude_max, item.longitude_min, item.latitude_max, item.latitude_min);
                                    IntelligentRoadTest.map.centerAndZoom(new BMap.Point((item.longitude_min + item.longitude_max) / 2, (item.latitude_min + item.latitude_max) / 2), zoom);
                                },
                                editBoneAreaMessage: function (item) {
                                    // IntelligentRoadTest.boneAreaEdit(item);
                                    IntelligentRoadTest.boneAreaEdit(IntelligentRoadTest.boneAreaCompleteVM._data.boneAreaData);
                                },
                                deleteBoneArea: function (item) {
                                    IntelligentRoadTest.wantDealBone = item;
                                    $("#modal-boneArea").show();
                                },
                                showDetailInfo: function (event) {
                                    IntelligentRoadTest.showDetailInfo(event);
                                },
                                showLinkCell: function (event, item, type) {
                                    //type=1最近小区，type=2 接入扇区
                                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                                        $(event.currentTarget).attr("title", "显示连线");
                                        $(event.currentTarget).removeClass("linkCellHover");
                                        if (type == 1) {
                                            IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                                        } else if (type == 2) {
                                            IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                                        }
                                    } else {
                                        $(event.currentTarget).attr("title", "隐藏连线");
                                        $(event.currentTarget).addClass("linkCellHover");

                                        var mid_lng = item.longitude_mid;
                                        var mid_lat = item.latitude_mid;
                                        var centerPoint = new BMap.Point(mid_lng, mid_lat);
                                        if (type == 1) {
                                            // IntelligentRoadTest.showNrTop5CellForMap(centerPoint,item.top5_sector_set);
                                            IntelligentRoadTest.showNrTop5CellForMap(centerPoint, item.ne_sector_set);

                                        } else if (type == 2) {
                                            IntelligentRoadTest.showMrNrTop5CellForMap(centerPoint, item.sector_set);
                                        }
                                    }
                                },
                                gotoShowSectorMessage: function (sectorDate) {
                                    // console.log(sectorDate);
                                    IntelligentRoadTest.clickType = 1;
                                    IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                                },
                                gotoKPIList: function (item) {
                                    if (item.sector_set != null) {
                                        var sectorArr = item.sector_set.split("@");
                                        IntelligentRoadTest.loadKPIListData(sectorArr);
                                        $("#kpiBackPoor").html("返回上一级");
                                    }
                                }, showPolygonGrid: function (item, event) {
                                    IntelligentRoadTest.showHidePolygonGrid(item, event);
                                }
                            }
                        });
                    } else {
                        IntelligentRoadTest.boneAreaCompleteVM.boneAreaData = item;
                        IntelligentRoadTest.boneAreaCompleteVM.dataIndex = index;
                        IntelligentRoadTest.boneAreaCompleteVM.nrTop5Cell = nearTOP5;
                        IntelligentRoadTest.boneAreaCompleteVM.mrTop5Cell = mrNearTOP5;
                        IntelligentRoadTest.boneAreaCompleteVM.title = echartTitle;
                        IntelligentRoadTest.boneAreaCompleteVM.hideSecondEchart = hideSecondEchart;
                    }
                },
                lastOrNext: function (type) {
                    if (type == 0) {
                        //上一页
                        if (IntelligentRoadTest.boneAreaCurrentPage > 1) {
                            IntelligentRoadTest.boneAreaCurrentPage = IntelligentRoadTest.boneAreaCurrentPage - 1;
                            IntelligentRoadTest.boneAreaVM.boneAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.boneAreaCurrentResult, IntelligentRoadTest.boneAreaCurrentPage);
                            IntelligentRoadTest.boneAreaVM.currentPageNum = IntelligentRoadTest.boneAreaCurrentPage;
                            IntelligentRoadTest.boneAreaVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.boneAreaVM.lastIndex = IntelligentRoadTest.lastIndex;
                        } else {
                            alert("当前页是第一页");
                        }
                    } else {
                        if (IntelligentRoadTest.boneAreaCurrentPage < IntelligentRoadTest.boneAreaTotalPage) {
                            IntelligentRoadTest.boneAreaCurrentPage = IntelligentRoadTest.boneAreaCurrentPage + 1;
                            IntelligentRoadTest.boneAreaVM.boneAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.boneAreaCurrentResult, IntelligentRoadTest.boneAreaCurrentPage);
                            IntelligentRoadTest.boneAreaVM.currentPageNum = IntelligentRoadTest.boneAreaCurrentPage;
                            IntelligentRoadTest.boneAreaVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.boneAreaVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                    }
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.boneAreaVM.boneAreaList, 5);
                    // $("#boneAreaCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.boneAreaTotalCount +"条数据)");
                },
                gotoPage: function () {
                    var page = $("#boneAreaPage").val();
                    page = parseInt(page);
                    if (page > 0 && page <= IntelligentRoadTest.boneAreaTotalPage) {
                        IntelligentRoadTest.boneAreaCurrentPage = page;
                        IntelligentRoadTest.boneAreaVM.boneAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.boneAreaCurrentResult, IntelligentRoadTest.boneAreaCurrentPage);
                        IntelligentRoadTest.boneAreaVM.currentPageNum = IntelligentRoadTest.boneAreaCurrentPage;
                        IntelligentRoadTest.boneAreaVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.boneAreaVM.lastIndex = IntelligentRoadTest.lastIndex;
                    }
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.boneAreaVM.boneAreaList, 5);
                    // $("#boneAreaCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.boneAreaTotalCount +"条数据)");
                },
                goLast: function () {
                    IntelligentRoadTest.boneAreaCurrentPage = IntelligentRoadTest.boneAreaTotalPage;
                    IntelligentRoadTest.boneAreaVM.boneAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.boneAreaCurrentResult, IntelligentRoadTest.boneAreaCurrentPage);
                    IntelligentRoadTest.boneAreaVM.currentPageNum = IntelligentRoadTest.boneAreaCurrentPage;
                    IntelligentRoadTest.boneAreaVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.boneAreaVM.lastIndex = IntelligentRoadTest.lastIndex;
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.boneAreaVM.boneAreaList, 5);
                    // $("#boneAreaCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.boneAreaTotalCount +"条数据)");
                },
                goFirst: function () {
                    IntelligentRoadTest.boneAreaCurrentPage = 1;
                    IntelligentRoadTest.boneAreaVM.boneAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.boneAreaCurrentResult, IntelligentRoadTest.boneAreaCurrentPage);
                    IntelligentRoadTest.boneAreaVM.currentPageNum = IntelligentRoadTest.boneAreaCurrentPage;
                    IntelligentRoadTest.boneAreaVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.boneAreaVM.lastIndex = IntelligentRoadTest.lastIndex;
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.boneAreaVM.boneAreaList, 5);
                    // $("#boneAreaCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.boneAreaTotalCount +"条数据)");
                },
                turnMk: function (index, item) {
                    for (var i = 0; i < IntelligentRoadTest.markerList.length; i++) {
                        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.markerList[i]);
                    }

                    for (var i = 0; i < IntelligentRoadTest.lngArr.length; i++) {
                        var lng = IntelligentRoadTest.lngArr[i];
                        var lat = IntelligentRoadTest.latArr[i];
                        var color = "#fff"
                        var img = "../js/IntelligentRoadTest/images/bg_num.png";
                        if (i == index) {
                            img = "../js/IntelligentRoadTest/images/maker2.png";
                            color = "black";
                            IntelligentRoadTest.openInfoWindow(lng, lat, item.object_name);
                        }
                        IntelligentRoadTest.addMk(lng, lat, img, i, color, item.object_name);
                        $("#showBoneAreaDataDiv").find(".listUL > li").eq(i).find(".numSpan").css("background", "url(../js/IntelligentRoadTest/images/bg_num.png)");
                        $("#showBoneAreaDataDiv").find(".listUL > li").eq(i).css("background", "#fff");
                    }
                    $("#showBoneAreaDataDiv").find(".listUL > li").eq(index).find(".numSpan").css("background", "url(../js/IntelligentRoadTest/images/maker2.png)");
                    $("#showBoneAreaDataDiv").find(".listUL > li").eq(index).css("background", "#f4f4f4");
                }
            }
        });
    } else { //改变数值
        IntelligentRoadTest.boneAreaVM.boneAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.boneAreaCurrentResult, IntelligentRoadTest.boneAreaCurrentPage);
        IntelligentRoadTest.boneAreaVM.totalPages = IntelligentRoadTest.boneAreaTotalPage;
        IntelligentRoadTest.boneAreaVM.totalCounts = IntelligentRoadTest.boneAreaTotalCount;
        IntelligentRoadTest.boneAreaVM.currentPageNum = IntelligentRoadTest.boneAreaCurrentPage;
        IntelligentRoadTest.boneAreaVM.startIndex = IntelligentRoadTest.startIndex;
        IntelligentRoadTest.boneAreaVM.lastIndex = IntelligentRoadTest.lastIndex;
        if (IntelligentRoadTest.index == 5) {
            IntelligentRoadTest.drawMk(IntelligentRoadTest.boneAreaVM.boneAreaList, IntelligentRoadTest.index);
        }
        if (!$("#showBoneAreaCompleteMessage").is(":visible")) {
            // $("#boneAreaCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
            //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.boneAreaTotalCount +"条数据)");
        }
    }
    showOrHideInputImage(1);
}

IntelligentRoadTest.queryAllBoneArea = function IntelligentRoadTest_queryAllBoneArea(district_id, mktcenter_id, district_name, mktcenter_name) {
    var sqlList = [];
    var list = ["IntelligentRoadTestV2_BoneArea"];
    var city = $('#boneCityName').text().trim();
    if (city == "全省") {
        list.push("CITY:");
    } else {
        list.push("CITY:" + "and city='" + city + "'");
    }
    if(!isNull(IntelligentRoadTest.countryPermission_common)){ //区县用户不可以看全市
        district_name = IntelligentRoadTest.countryPermission_common;
    }
    if (district_name != null && district_name != "" && district_name != "null") {
        list.push("COUNTRY:" + "and COUNTRY = '" + district_name + "'");
    } else {
        var countryStr = $("#boneDistrictName").text().trim();
        if (countryStr != "" && countryStr != "全市" && countryStr != "null") {
            district_name = countryStr;
            list.push("COUNTRY:" + "and COUNTRY = '" + district_name + "'");
        }
    }
    if (mktcenter_name != null && mktcenter_name != "" && mktcenter_name != "null") {
        list.push("MKTCENTER:" + "and MKTCENTER = '" + mktcenter_name + "'");
    } else {
        var mktcenter = $("#boneMktName").text().trim();
        if (mktcenter != "" && mktcenter != "全区" && mktcenter != "null") {
            mktcenter_name = mktcenter;
            list.push("MKTCENTER:" + "and MKTCENTER = '" + mktcenter_name + "'");
        }
    }
    IntelligentRoadTest.boneAreaCountryId = district_name;
    IntelligentRoadTest.boneAreaMktCenterId = mktcenter_name;
    var month = IntelligentRoadTest.day.substring(0, 6);
    list.push("MONTH:" + month);
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealQueryAllBoneArea];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);
    //记录查询条件
    IntelligentRoadTest.boneAreaCurrentSelectConditon = "" + city + month;
}

IntelligentRoadTest.getBoneAreaMessageById = function IntelligentRoadTest_getBoneAreaMessageById(id) {

    var sqlList = [];
    var list = ["IntelligentRoadTestV2_getBoneAreaById", "ID:" + id];
    var month = IntelligentRoadTest.day.substring(0, 6);
    list.push("MONTH:" + month);
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealBoneAreaMessageById];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);

}

IntelligentRoadTest.getBoneAreaHisById = function IntelligentRoadTest_getBoneAreaHisById(id, day) {
    if (IntelligentRoadTest.boneAreaCompleteVM) {
        IntelligentRoadTest.boneAreaCompleteVM.boneAreaData = {};
        IntelligentRoadTest.boneAreaCompleteVM.boneAreaData.id = id;
    }

    var sqlList = [];
    var list = ["IntelligentRoadTestAnalysi_v2_getBoneAreaHis", "ID:" + id, "DAY:" + day];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealBoneAreaMessageById];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database, [id]);

}

IntelligentRoadTest.dealBoneAreaMessageById = function IntelligentRoadTest_dealBoneAreaMessageById(data, boneId) {
    var result = callBackChangeData(data);
    if (result.length > 0) {
        var item = result[0];
        IntelligentRoadTest.showBoneAreaMessageById(item);
    } else {
        IntelligentRoadTest.boneAreaCompleteVM.boneAreaData = {};
        IntelligentRoadTest.boneAreaCompleteVM.boneAreaData.id = boneId;
    }
}

IntelligentRoadTest.showBoneAreaMessageById = function IntelligentRoadTest_showBoneAreaMessageById(item) {
    if(IntelligentRoadTest.boneAreaVM == null){
        IntelligentRoadTest.boneAreaData([]);
    }
    IntelligentRoadTest.boneAreaVM.showMessage(item);
    return ;
    if ($(".packDiv").children().hasClass('rotateImg')) {
        $(".packDiv").children().removeClass('rotateImg');
        $(".packDiv").parent().animate({marginLeft: 0}, 800);
    }
    IntelligentRoadTest.showPolygon(item.gis_data, undefined, "boneArea", item.object_id, IntelligentRoadTest.day, item.object_name);
    IntelligentRoadTest.cacheItem = item;
    // IntelligentRoadTest.index=5;
    //跳转到骨头区域详情
    IntelligentRoadTest.goBoneAreaCompleteMessage();
    // var textList=[
    //     {"key":"区域名称","val":item.object_name},
    //     {"key":"区域编号","val":item.id},
    // ];
    // IntelligentRoadTest.openInfoWindowTwo(item.longitude_mid,item.latitude_mid,textList);
    IntelligentRoadTest.loadGrid(item.longitude_max, item.longitude_min, item.latitude_max, item.latitude_min);
    if (!IntelligentRoadTest.mapClick) {
        var zoom = getZoom(item.longitude_max, item.longitude_min, item.latitude_max, item.latitude_min);
        IntelligentRoadTest.map.centerAndZoom(new BMap.Point(item.longitude_mid, item.latitude_mid), zoom);
    }
    if (!IntelligentRoadTest.isScreenCompared && IntelligentRoadTest.isAddMessageEvent) {//不是在分屏页，并且点击过分屏
        if (!windowScreeen.closed) {//如果窗口没有关闭，需要进行同步信息，如果已经关闭，什么都不用做
            // windowScreeen.focus();
            IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'boneArea');
        }
    }
    //清除top小区连线
    var RecentCellImg = $("#showBoneAreaCompleteMessage").find('.linkCell').children('img');
    $(RecentCellImg).each(function () {
        var srcText = $(this).attr('src');
        var clickImg = srcText.replace("nor", "click");
        var norImg = srcText.replace("click", "nor");
        if (srcText == clickImg) {
            $(this).attr('src', norImg);
        }
    });
    IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
    IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
    var hideSecondEchart = false;
    // $("#colorBar").click();
    var echartTitle = "历史覆盖变化";
    var today = new Date().Format("yyyy-MM-dd");
    if (item.create_time == today) {
        echartTitle = "历史7天覆盖变化";
        IntelligentRoadTest.boneAreaSevenLine(item, IntelligentRoadTest.day, 7);//默认加载近7天的折线图
        hideSecondEchart = true;
    } else {
        echartTitle = "历史30天覆盖变化";
        IntelligentRoadTest.getConcernArea30DayData(item.id, 1);
    }
    var nearTOP5 = [];
    if (item.ne_sector_set != null && item.ne_sector_set != "") {
        var to5DataArr = item.ne_sector_set.split("@");
        for (var i = 0; i < to5DataArr.length; i++) {
            nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
        }
    }
    var mrNearTOP5 = [];
    if (item.sector_set != null && item.sector_set != "") {
        var mrTo5DataArr = item.sector_set.split("@");
        for (var k = 0; k < mrTo5DataArr.length; k++) {
            mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
        }
    }
    if (IntelligentRoadTest.checkIfHasSameSector(nearTOP5, mrNearTOP5)) {
        item.isHasSameSector = true;
    }
    if (item.create_time != null && item.create_time.toString().indexOf("-") < 0) { //转换日期格式
        item.create_time = dealDateString(item.create_time.toString()).Format("yyyy-MM-dd");
    }
    if (IntelligentRoadTest.boneAreaCompleteVM == null) {
        IntelligentRoadTest.boneAreaCompleteVM = new Vue({
            el: '#showBoneAreaCompleteMessage',
            data: {
                boneAreaData: item,
                nrTop5Cell: nearTOP5,
                mrTop5Cell: mrNearTOP5,
                hideSecondEchart: hideSecondEchart,
                uname: IntelligentRoadTest.currentUser,
                title: echartTitle
            },
            methods: {
                boneAreaPosition: function (item) {
                    var zoom = getZoom(item.longitude_max, item.longitude_min, item.latitude_max, item.latitude_min);
                    IntelligentRoadTest.map.centerAndZoom(new BMap.Point((item.longitude_min + item.longitude_max) / 2, (item.latitude_max + item.latitude_min) / 2), zoom);
                    // IntelligentRoadTest.boneAreaPositiong(item);
                },
                editBoneAreaMessage: function (item) {
                    // IntelligentRoadTest.boneAreaEdit(item);
                    IntelligentRoadTest.boneAreaEdit(IntelligentRoadTest.boneAreaCompleteVM._data.boneAreaData);
                },
                deleteBoneArea: function (item) {
                    IntelligentRoadTest.wantDealBone = item;
                    $("#modal-boneArea").show();
                },
                showDetailInfo: function (event) {
                    IntelligentRoadTest.showDetailInfo(event);
                },
                showLinkCell: function (event, item, type) {
                    //type=1最近小区，type=2 接入扇区
                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                        $(event.currentTarget).attr("title", "显示连线");
                        $(event.currentTarget).removeClass("linkCellHover");
                        if (type == 1) {
                            IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                        } else if (type == 2) {
                            IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                        }
                    } else {
                        $(event.currentTarget).attr("title", "隐藏连线");
                        $(event.currentTarget).addClass("linkCellHover");

                        var mid_lng = item.longitude_mid;
                        var mid_lat = item.latitude_mid;
                        var centerPoint = new BMap.Point(mid_lng, mid_lat);
                        if (type == 1) {
                            // IntelligentRoadTest.showNrTop5CellForMap(centerPoint,item.top5_sector_set);
                            IntelligentRoadTest.showNrTop5CellForMap(centerPoint, item.ne_sector_set);

                        } else if (type == 2) {
                            IntelligentRoadTest.showMrNrTop5CellForMap(centerPoint, item.sector_set);
                        }
                    }
                },
                gotoShowSectorMessage: function (sectorDate) {
                    // console.log(sectorDate);
                    IntelligentRoadTest.clickType = 1;
                    IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                },
                gotoKPIList: function (item) {
                    if (item.sector_set != null) {
                        var sectorArr = item.sector_set.split("@");
                        showOrHideInputImage(2);
                        IntelligentRoadTest.loadKPIListData(sectorArr);
                        $("#kpiBackPoor").html("返回上一级");
                    }
                }, showPolygonGrid: function (item, event) {
                    IntelligentRoadTest.showHidePolygonGrid(item, event);
                }
            }
        });
    } else {
        IntelligentRoadTest.boneAreaCompleteVM.boneAreaData = item;
        //IntelligentRoadTest.boneAreaCompleteVM.dataIndex = index ;
        IntelligentRoadTest.boneAreaCompleteVM.nrTop5Cell = nearTOP5;
        IntelligentRoadTest.boneAreaCompleteVM.mrTop5Cell = mrNearTOP5;
        IntelligentRoadTest.boneAreaCompleteVM.title = echartTitle;
        IntelligentRoadTest.boneAreaCompleteVM.hideSecondEchart = hideSecondEchart;
    }
}


//骨头区域查看，需要加载栅格
IntelligentRoadTest.boneAreaPositiong = function IntelligentRoadTest_boneAreaPositiong(data, isShowPolygon) {
    if (isShowPolygon == undefined || isShowPolygon == null) {
        isShowPolygon = true;
    }
    // if(IntelligentRoadTest.selectingBox){
    //     alert("您正在框选栅格，请先保存框选区域或者取消框选");
    //     return;
    // }

//	if(IntelligentRoadTest.bonePolygon!=null){
//		IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.bonePolygon);
//	}
    IntelligentRoadTest.hideBoneArea();
    // $('#hideBoneArea').show();

    var gis_data = data.gis_data.split("@");
    var pointArr = [];
    for (var i = 0; i < gis_data.length; i++) {
        var pointA = gis_data[i].split(",");
        var point = new BMap.Point(pointA[0], pointA[1]);
        pointArr.push(point);
    }
    var styleOptions = {
        strokeColor: "red",    //边线颜色。
        //fillColor:"red",      //填充颜色
        strokeWeight: 1,       //边线的宽度，以像素为单位。
        strokeOpacity: 0.8,	   //边线透明度，取值范围0 - 1。
        fillOpacity: 0.3,      //填充的透明度，取值范围0 - 1。
        strokeStyle: 'dashed' //边线的样式，solid或dashed。
    }
    IntelligentRoadTest.bonePolygon = new BMap.Polygon(pointArr, styleOptions);
    IntelligentRoadTest.bonePolygonM = new BMap.Polygon(pointArr, styleOptions);
    IntelligentRoadTest.bonePolygonU = new BMap.Polygon(pointArr, styleOptions);
    IntelligentRoadTest.bonePolygon.id = data.id;
    IntelligentRoadTest.bonePolygon.area_name = data.object_name;
    IntelligentRoadTest.bonePolygon.gis_data = data.gis_data;
    IntelligentRoadTest.bonePolygon.max_lng = data.longitude_max;
    IntelligentRoadTest.bonePolygon.min_lng = data.longitude_min;
    IntelligentRoadTest.bonePolygon.max_lat = data.latitude_max;
    IntelligentRoadTest.bonePolygon.min_lat = data.latitude_min;
    IntelligentRoadTest.bonePolygon.create_user = data.creator;
    IntelligentRoadTest.bonePolygon.create_time = data.create_time;
    IntelligentRoadTest.bonePolygon.city = data.city;
    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.bonePolygon);

    IntelligentRoadTest.mapMobile.addOverlay(IntelligentRoadTest.bonePolygonM);
    IntelligentRoadTest.mapUnicom.addOverlay(IntelligentRoadTest.bonePolygonU);

    var mid_lng = data.longitude_mid;
    var mid_lat = data.latitude_mid;
    if (!isShowPolygon) {//点击地图得到的区域时，不需要定位，而且也不需要呈现轮廓
        IntelligentRoadTest.bonePolygon.hide();
        // IntelligentRoadTest.map.panTo(new BMap.Point(mid_lng,mid_lat));
    } else {
        IntelligentRoadTest.map.panTo(new BMap.Point(mid_lng, mid_lat), {noAnimation: false});
    }


    if (IntelligentRoadTest.isThreeNetStatus) {
        IntelligentRoadTest.centerAndZoomTimeout = setTimeout("IntelligentRoadTest.timeoutCenterAndZoom()", 100);
        IntelligentRoadTest.drawPolylineTimeout = setTimeout("IntelligentRoadTest.drawPolyline()", 200);
        setTimeout(function () {
            // IntelligentRoadTest.sectorCompentM.clear();
            // IntelligentRoadTest.sectorCompentM.draw();
            // IntelligentRoadTest.sectorCompentU.clear();
            // IntelligentRoadTest.sectorCompentU.draw();
        }, 300);
    }

    // var minLngNum = gridLngNum(data.longitude_min,20);
    // var maxLngNum = gridLngNum(data.longitude_max,20);
    // var minLatNum = gridLatNum(data.latitude_min,20);
    // var maxLatNum = gridLatNum(data.latitude_max,20);
    var maxlng_maxlat_minlng_minlat = data.longitude_max + "," + data.latitude_max + "," + data.longitude_min + "," + data.latitude_min;
    var keyprefix = IntelligentRoadTest.day + "_" + "20_0_";
    // var len = 100000;
    // var rowKeyArray = new Array();
    // for(var i=minLngNum;i<=maxLngNum;i++){
    //     for(var j=minLatNum;j<=maxLatNum;j++){
    //         var rowkey = keyprefix + String(i*len+j);
    //         rowKeyArray.push(rowkey);
    //     }
    // }
    // var keyListStr = rowKeyArray.join(",");
    // rowKeyArray = null;
    var cloumnsList = "i:a1,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a18,i:a19,i:a22,i:a26,i:a27,i:a28,i:a29,i:a30,i:a31,i:a32,i:a33,i:a34,i:a35,i:a36,i:a37,i:a38";
    // var list = ["IntelligentRoadTest_06_boxSelectGrid","KEYLIST:"+keyListStr,"COLUMNLIST:"+cloumnsList];
    var list = ["IntelligentRoadTestV2_getGridData", "GRIDKEYPREFIX:" + keyprefix, "MAXLNG_MAXLAT_MINLNG_MINLAT:" + maxlng_maxlat_minlng_minlat, "COLUMNLIST:" + cloumnsList];
    var progressBarSqls = [];
    progressBarSqls.push(list);
    var functionlist = [IntelligentRoadTest.filterAreaGridDataByBone];
    var dataBase = [7];
    progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase);
//	$('#BoxSelection').text('框选栅格');
    //图例全部呈现
    // IntelligentRoadTest.initColorBarAll();
    IntelligentRoadTest.boneingArea = true;

}
//对骨头区域栅格进行过滤
IntelligentRoadTest.filterAreaGridDataByBone = function IntelligentRoadTest_filterAreaGridDataByBone(data) {
//	var result = callBackChangeData(data);
    var result = data.result;
    var polygonGridData = [];
    //将不在框选多边形内的栅格去掉
    var avgSum = 0;
    var allSum = 0;
    var cnt = 0;
    var count = 0;
    var gridCount = 0;
    var grid_dx_count = 0;
    var grid_dx_sum = 0;
    var grid_dx_105_count = 0;
    var grid_yd_count = 0;
    var grid_yd_sum = 0;
    var grid_yd_105_count = 0;
    var grid_lt_count = 0;
    var grid_lt_sum = 0;
    var grid_lt_105_count = 0;
    var month_relate = null;

    for (var i = 0; i < result.length; i++) {
        var gridMidLng = result[i][3];// i:a1,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a18,i:a19(8),i:a22,i:a26,i:a27,i:a28,i:a29(13),i:a30
        //,i:a31(15),i:a32,i:a33,i:a34,i:a35,i:a36,i:a37,i:a38
        var gridMidLat = result[i][4];
        var point = new BMap.Point(gridMidLng, gridMidLat);
        if (BMapLib.GeoUtils.isPointInPolygon(point, IntelligentRoadTest.bonePolygon)) {
            polygonGridData.push(result[i]);
            count++;
            avgSum += parseFloat(result[i][11]); // rsrp_140_0_avg
            allSum += parseFloat(result[i][8]); // rsrp_140_0_cnt
            cnt += parseInt(result[i][9]); // rsrp_105_cnt
            gridCount += parseInt(result[i][12]); //Grid_Rec_Cnt

            grid_dx_count += parseInt(result[i][13] == null ? 0 : result[i][13]);
            grid_dx_105_count += parseInt(result[i][14] == null ? 0 : result[i][14]);
            grid_dx_sum += parseFloat(result[i][15] == null ? 0 : result[i][15]);
            grid_yd_count += parseInt(result[i][16] == null ? 0 : result[i][16]);
            grid_yd_105_count += parseInt(result[i][17] == null ? 0 : result[i][17]);
            grid_yd_sum += parseFloat(result[i][18] == null ? 0 : result[i][18]);
            grid_lt_count += parseInt(result[i][19] == null ? 0 : result[i][19]);
            grid_lt_105_count += parseInt(result[i][20] == null ? 0 : result[i][20]);
            grid_lt_sum += parseFloat(result[i][21] == null ? 0 : result[i][21]);
            if (result[i][22] != null) {//month_relate
                if (month_relate == null) {
                    month_relate = result[i][22];
                } else if (month_relate != result[i][22] && month_relate.indexOf(result[i][22]) < 0) {
                    month_relate = month_relate + "_" + result[i][22];
                }

            }
        }
    }
    var rsrpAvg = avgSum / count;
    var cover = cnt / allSum;
    var dx_rsrp = grid_dx_sum / grid_dx_count;
    var yd_rsrp = grid_yd_sum / grid_yd_count;
    var lt_rsrp = grid_lt_sum / grid_lt_count;
    var dx_cover = grid_dx_105_count / grid_dx_count;
    var yd_cover = grid_yd_105_count / grid_yd_count;
    var lt_cover = grid_lt_105_count / grid_lt_count;

    if (grid_dx_sum == 0 || grid_dx_count == 0) {
        dx_rsrp = null;
    }
    if (grid_yd_sum == 0 || grid_yd_count == 0) {
        yd_rsrp = null;
    }
    if (grid_lt_sum == 0 || grid_lt_count == 0) {
        lt_rsrp = null;
    }
    if (grid_dx_105_count == 0 || grid_dx_count == 0) {
        dx_cover = null;
    }
    if (grid_yd_105_count == 0 || grid_yd_count == 0) {
        yd_cover = null;
    }
    if (grid_lt_105_count == 0 || grid_lt_count == 0) {
        lt_cover = null;
    }

    if (count == 0) {
        rsrpAvg = null;
        cover = null;
        dx_rsrp = null;
        yd_rsrp = null;
        lt_rsrp = null;
        dx_cover = null;
        yd_cover = null;
        lt_cover = null;
    }

    IntelligentRoadTest.bonePolygon.type = "boxBoneSelect";
    IntelligentRoadTest.bonePolygon.rsrpAvg = rsrpAvg;//parseFloat(rsrpAvg).toFixed(2);
    IntelligentRoadTest.bonePolygon.cover = cover;//parseFloat(cover).toFixed(2);
    IntelligentRoadTest.bonePolygon.count = count;
    IntelligentRoadTest.bonePolygon.dx_rsrp = dx_rsrp;
    IntelligentRoadTest.bonePolygon.yd_rsrp = yd_rsrp;
    IntelligentRoadTest.bonePolygon.lt_rsrp = lt_rsrp;
    IntelligentRoadTest.bonePolygon.dx_cover = dx_cover;
    IntelligentRoadTest.bonePolygon.yd_cover = yd_cover;
    IntelligentRoadTest.bonePolygon.lt_cover = lt_cover;
    IntelligentRoadTest.bonePolygon.month_relate = month_relate;
    IntelligentRoadTest.bonePolygon.gridCount = gridCount;

    data.result = polygonGridData;
    IntelligentRoadTest.showGridByCanv(data);
    data = null;

}

IntelligentRoadTest.clearBoneArea = function IntelligentRoadTest_clearBoneArea() {
    IntelligentRoadTest.hideBoneArea();
}

//清除骨头区域
IntelligentRoadTest.hideBoneArea = function IntelligentRoadTest_hideBoneArea() {
    IntelligentRoadTest.boneingArea = false;
    if (IntelligentRoadTest.bonePolygon != null) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.bonePolygon);
        IntelligentRoadTest.GridMap.clear();
        IntelligentRoadTest.GridCanArrT = null;
        IntelligentRoadTest.GridCanArrT = [];
        IntelligentRoadTest.CanArr = null;
        IntelligentRoadTest.CanArr = [];
    }

    if (IntelligentRoadTest.bonePolygonM != null) {
        IntelligentRoadTest.mapMobile.removeOverlay(IntelligentRoadTest.bonePolygonM);
        IntelligentRoadTest.GridMapM.clear();
        IntelligentRoadTest.GridCanArrM = null;
        IntelligentRoadTest.GridCanArrM = [];
    }

    if (IntelligentRoadTest.bonePolygonU != null) {
        IntelligentRoadTest.mapUnicom.removeOverlay(IntelligentRoadTest.bonePolygonU);
        IntelligentRoadTest.GridMapU.clear();
        IntelligentRoadTest.GridCanArrU = null;
        IntelligentRoadTest.GridCanArrU = [];
    }


}

//骨头区域缓期原因编辑
IntelligentRoadTest.boneAreaEdit = function IntelligentRoadTest_boneAreaEdit(data) {
    $('#boneHandleDescribe').val(data.suspend_reason);
    $('#boneHandleDescribe').removeAttr('readonly');
    $('#editBoneAreaButton').hide();
    $('#boneAreaSureButton').show();
    $('#cancelBoneButton').show();
    $('#boneHandleDescribe').addClass("edit");
    $('#boneAreaSureButton').unbind('click').bind('click', function () {
//		var $('#concernCreateTime').text(data[10]);
//		$('#concernCreator').text(data[9]);
//		$('#concernId').text(data[1]);
//		$('#concernName').text(data[2]);
//         data.suspend_reason = String($('#boneHandleDescribe').val());
        data.edit_reason = String($('#boneHandleDescribe').val());
        // IntelligentRoadTest.concernAreaData[8] = String($('#concernHandleDescribe').val());
//		.replace(/\n/g,"#");
//         IntelligentRoadTest.updateConcernArea(IntelligentRoadTest.concernAreaData);
        IntelligentRoadTest.updateBoneArea(data);
        $('#boneHandleDescribe').attr('readonly', 'true');
        $('#editBoneAreaButton').show();
        $('#cancelBoneButton').hide();
        $('#boneAreaSureButton').hide();
        $("#boneHandleDescribe").removeClass("edit");
    });

    $('#cancelBoneButton').unbind('click').bind('click', function () {
        // data.edit_reason = String($('#boneHandleDescribe').val());
        // IntelligentRoadTest.updateBoneArea(data);
        $('#boneHandleDescribe').attr('readonly', 'true');
        $('#boneHandleDescribe').val(data.suspend_reason);
        $('#boneAreaSureButton').hide();
        $('#cancelBoneButton').hide();
        $('#editBoneAreaButton').show();
        $("#boneHandleDescribe").removeClass("edit");
    });
}

IntelligentRoadTest.updateBoneArea = function IntelligentRoadTest_updateBoneArea(boneData) {
    var id = boneData.id;
    var edit_reason = boneData.edit_reason;
    IntelligentRoadTest.boneAreaCompleteVM._data.boneAreaData.suspend_reason = edit_reason;
    var suspend_reason = boneData.suspend_reason;

    var ajaxData = {
        "id": id,
        "suspend_reason": edit_reason,
    };
    var $ajax = $.ajax({
        type: 'post',
        data: ajaxData,
        url: 'pages_boneArea_BoneArea_updateArea.action',
        cache: false,
        dataType: 'json',
        success: function (data) {
            // console.log(data.status);
            IntelligentRoadTest.queryAllBoneArea();
            //IntelligentRoadTest.goBoneList();
        },
        error: function (data, textStatus) {
            alert("更新骨头区域失败");
            $('#boneHandleDescribe').val(suspend_reason);
        }
    });
}

//骨头区域删除
//当数据来源是手工添加时，点击删除图标，将该数据删除
//当数据来源是系统创建时，如果已经确认，则取消确认，未确认则进行确认  是否缓期字段修改为 N或者Y
IntelligentRoadTest.boneAreaDelete = function IntelligentRoadTest_boneAreaDelete(boneData, isDeal) {
    if (isDeal == true) {
        var ajaxData = {
            "id": boneData.id,
            "is_suspend": boneData.is_suspend,
            "area_src_type": boneData.area_src_type,
        };
        var $ajax = $.ajax({
            type: 'post',
            data: ajaxData,
            url: 'pages_boneArea_BoneArea_deleteArea.action',
            cache: false,
            dataType: 'json',
            success: function (data) {
                // console.log(data.status);
                // $(".backList").click();
                IntelligentRoadTest.queryAllBoneArea();
                //--艳萍修改，在骨头区域详细页面返回到骨头区域列表页
                IntelligentRoadTest.goBoneList();

            },
            error: function (data, textStatus) {
                alert("删除骨头区域失败");
                // $('#boneHandleDescribe').val(suspend_reason);
                if (boneData.area_src_type == 0) {
                    if (boneData.is_suspend != 'Y') {
                        $('#unSureBornArea').attr('checked', true);
                        $('#SureBornArea').removeAttr('checked');
                    } else {
                        $('#SureBornArea').attr('checked', true);
                        $('#unSureBornArea').removeAttr('checked');
                    }
                }
                // $(".backList").click();
                // IntelligentRoadTest.queryAllBoneArea();
                // --艳萍修改，在骨头区域详细页面返回到骨头区域列表页
            }
        });
    } else {
        if (boneData.area_src_type == 0) {
            if (boneData.is_suspend != 'Y') {
                $('#unSureBornArea').attr('checked', true);
                $('#SureBornArea').removeAttr('checked');
            } else {
                $('#SureBornArea').attr('checked', true);
                $('#unSureBornArea').removeAttr('checked');
            }
        }
    }

}

//----------------------------骨头区域列表结束 ----------------------------------------


//-----------------------------工单列表开始-------------------------------------------

//获取工单的派单时间和当天对应的弱区ID
IntelligentRoadTest.getAlarmInfoTime = function IntelligentRoadTest_getAlarmInfoTime(objectId, alarmId) {
    var sqlList = [];
    var list = ["IntelligentRoadTestV2_getAlarmInfoTime", "ORDERID:" + alarmId];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealAlarmInfoTime];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);
}

IntelligentRoadTest.dealAlarmInfoTime = function IntelligentRoadTest_dealAlarmInfoTime(data) {
    var result = callBackChangeData(data);
    if (result.length > 0) {
        var day = result[0].day;
        var object_id = result[0].object_id;
        IntelligentRoadTest.getPoorAreaMessageById(object_id, day);
    }
}

/*
* 将工单中每一行的派单时间和恢复时间进行格式转换
* */
function dealAlarmInfoDateString(dateString) {

    if (dateString == null || dateString == "") {
        return 0;
    } else {
        var dates = dateString.split("-");
        var times = dates[1].split(":");
        var newDate = dealDateString(dates[0]).getTime() + (parseInt(times[0]) * 3600 + parseInt(times[1]) * 60 + parseInt(times[2])) * 1000;
        return newDate;
    }
}


IntelligentRoadTest.dealAlarmInfoData = function IntelligentRoadTest_dealAlarmInfoData(data) {
    var result = callBackChangeData(data);
    for (var i = 0; i < result.length; i++) {
        result[i].task_send_time = dealAlarmInfoDateString(result[i].task_send_time);
        result[i].recover_time = dealAlarmInfoDateString(result[i].recover_time);
    }
    IntelligentRoadTest.alarmInfoResult = result;
    IntelligentRoadTest.alarmInfoCurrentResult = result;
    //IntelligentRoadTest.showAlarmInfoData(result);
    // $("#alarmInfoList .flexRow ").eq(0).children(".selected").trigger("click");
    var SelectName = $("#alarmInfoListSelectName").text();
    var flexCol = $("#alarmInfoList  .flexRow .flexCol");
    IntelligentRoadTest.triggleFilter(SelectName, flexCol);
}

IntelligentRoadTest.showAlarmInfoData = function IntelligentRoadTest_showAlarmInfoData(result) {
    IntelligentRoadTest.alarmInfoCurrentPage = 1;
    IntelligentRoadTest.alarmInfoTotalCount = result.length;
    var pageCount = result.length / IntelligentRoadTest.pageSize;
    if ((result.length % IntelligentRoadTest.pageSize) != 0) {
        IntelligentRoadTest.alarmInfoTotalPage = parseInt(pageCount) + 1; //总页数，没有整除时加上1
    } else {
        IntelligentRoadTest.alarmInfoTotalPage = pageCount;  //整除不用加1
    }
    if (IntelligentRoadTest.alarmInfoVM == null) {
        IntelligentRoadTest.alarmInfoVM = new Vue({
            el: '#showAlarmInfoDiv',
            data: {
                alarmInfoList: IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.alarmInfoCurrentResult, IntelligentRoadTest.alarmInfoCurrentPage),
                totalPages: IntelligentRoadTest.alarmInfoTotalPage,
                totalCounts: IntelligentRoadTest.alarmInfoTotalCount,
                currentPageNum: IntelligentRoadTest.alarmInfoCurrentPage,
                startIndex: IntelligentRoadTest.startIndex,
                lastIndex: IntelligentRoadTest.lastIndex
            },
            methods: {
                showMessage: function (item) {
                    IntelligentRoadTest.Ahref(item);
                    /*if(IntelligentRoadTest.alarmInfoCompleteVM == null){
                         IntelligentRoadTest.alarmInfoCompleteVM = new Vue({
                             el : '#showAlarmInfoCompleteMessage' ,
                             data : {
                                 alarmInfoData : item
                             }
                         });
                     }else{
                         IntelligentRoadTest.alarmInfoCompleteVM.alarmInfoData = item;
                     }*/

                },
                changeColor: function (obj) {
                    console.log(obj);
                },
                lastOrNext: function (type) {
                    if (type == 0) {
                        //上一页
                        if (IntelligentRoadTest.alarmInfoCurrentPage > 1) {
                            IntelligentRoadTest.alarmInfoCurrentPage = IntelligentRoadTest.alarmInfoCurrentPage - 1;
                            IntelligentRoadTest.alarmInfoVM.alarmInfoList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.alarmInfoCurrentResult, IntelligentRoadTest.alarmInfoCurrentPage);
                            IntelligentRoadTest.alarmInfoVM.currentPageNum = IntelligentRoadTest.alarmInfoCurrentPage;
                            IntelligentRoadTest.alarmInfoVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.alarmInfoVM.lastIndex = IntelligentRoadTest.lastIndex;
                        } else {
                            alert("当前页是第一页");
                        }
                    } else {
                        if (IntelligentRoadTest.alarmInfoCurrentPage < IntelligentRoadTest.alarmInfoTotalPage) {
                            IntelligentRoadTest.alarmInfoCurrentPage = IntelligentRoadTest.alarmInfoCurrentPage + 1;
                            IntelligentRoadTest.alarmInfoVM.alarmInfoList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.alarmInfoCurrentResult, IntelligentRoadTest.alarmInfoCurrentPage);
                            IntelligentRoadTest.alarmInfoVM.currentPageNum = IntelligentRoadTest.alarmInfoCurrentPage;
                            IntelligentRoadTest.alarmInfoVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.alarmInfoVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                    }
                    IntelligentRoadTest.loadAlarmMk(IntelligentRoadTest.alarmInfoVM.alarmInfoList);
                    // $("#alarmInfoCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.alarmInfoTotalCount +"条数据)");
                },
                gotoPage: function () {
                    var page = $("#alarmInfoPage").val();
                    page = parseInt(page);
                    if (page > 0 && page <= IntelligentRoadTest.alarmInfoTotalPage) {
                        IntelligentRoadTest.alarmInfoCurrentPage = page;
                        IntelligentRoadTest.alarmInfoVM.alarmInfoList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.alarmInfoCurrentResult, IntelligentRoadTest.alarmInfoCurrentPage);
                        IntelligentRoadTest.alarmInfoVM.currentPageNum = IntelligentRoadTest.alarmInfoCurrentPage;
                        IntelligentRoadTest.alarmInfoVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.alarmInfoVM.lastIndex = IntelligentRoadTest.lastIndex;
                    }
                    IntelligentRoadTest.loadAlarmMk(IntelligentRoadTest.alarmInfoVM.alarmInfoList);
                    // $("#alarmInfoCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.alarmInfoTotalCount +"条数据)");
                },
                goLast: function () {
                    IntelligentRoadTest.alarmInfoCurrentPage = IntelligentRoadTest.alarmInfoTotalPage;
                    IntelligentRoadTest.alarmInfoVM.alarmInfoList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.alarmInfoCurrentResult, IntelligentRoadTest.alarmInfoCurrentPage);
                    IntelligentRoadTest.alarmInfoVM.currentPageNum = IntelligentRoadTest.alarmInfoCurrentPage;
                    IntelligentRoadTest.alarmInfoVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.alarmInfoVM.lastIndex = IntelligentRoadTest.lastIndex;
                    IntelligentRoadTest.loadAlarmMk(IntelligentRoadTest.alarmInfoVM.alarmInfoList);
                    // $("#alarmInfoCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.alarmInfoTotalCount +"条数据)");
                },
                goFirst: function () {
                    IntelligentRoadTest.alarmInfoCurrentPage = 1;
                    IntelligentRoadTest.alarmInfoVM.alarmInfoList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.alarmInfoCurrentResult, IntelligentRoadTest.alarmInfoCurrentPage);
                    IntelligentRoadTest.alarmInfoVM.currentPageNum = IntelligentRoadTest.alarmInfoCurrentPage;
                    IntelligentRoadTest.alarmInfoVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.alarmInfoVM.lastIndex = IntelligentRoadTest.lastIndex;
                    IntelligentRoadTest.loadAlarmMk(IntelligentRoadTest.alarmInfoVM.alarmInfoList);
                    // $("#alarmInfoCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.alarmInfoTotalCount +"条数据)");
                },//工单触摸
                turnMk: function (index, item) {
                    for (var i = 0; i < IntelligentRoadTest.markerList.length; i++) {
                        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.markerList[i]);
                    }

                    for (var i = 0; i < IntelligentRoadTest.alarmInfoVM.alarmInfoList.length; i++) {
                        var lng = IntelligentRoadTest.lngArr[i];
                        var lat = IntelligentRoadTest.latArr[i];
                        var color = "#fff"
                        var img = "../js/IntelligentRoadTest/images/bg_num.png";
                        if (i == index) {
                            img = "../js/IntelligentRoadTest/images/maker2.png";
                            color = "black";
                            if (item.alarm_name == 'AGPS智能路测弱覆盖区域') {
                                IntelligentRoadTest.openInfoWindow(lng, lat, item.enodeb_id);
                            } else if (item.alarm_name.indexOf('天翼蓝鹰') != -1) {
                                IntelligentRoadTest.openInfoWindow(lng, lat, item.enodeb_id);
                            } else {
                                IntelligentRoadTest.openInfoWindow(lng, lat, item.enodeb_id + "_" + item.cell_id);
                            }
                        }
                        IntelligentRoadTest.addMk(lng, lat, img, i, color, item.enodeb_id);
                        $("#showAlarmInfoDiv").find(".listUL > li").eq(i).find(".numSpan").css("background", "url(../js/IntelligentRoadTest/images/bg_num.png)");
                        $("#showAlarmInfoDiv").find(".listUL > li").eq(i).css("background", "#fff");
                    }
                    $("#showAlarmInfoDiv").find(".listUL > li").eq(index).find(".numSpan").css("background", "url(../js/IntelligentRoadTest/images/maker2.png)");
                    $("#showAlarmInfoDiv").find(".listUL > li").eq(index).css("background", "#f4f4f4");
                },
                goPoorAreaMessage: function (objectId, alarmId, index) {
                    IntelligentRoadTest.clickType = 1;
                    IntelligentRoadTest.showBaiduMap();
                    IntelligentRoadTest.clickSenseName = "poorArea";
                    IntelligentRoadTest.poorAreaObj = IntelligentRoadTest.poorArea;
                    setTimeout(function () {
                        IntelligentRoadTest.clickType = 0;
                    }, 3000)
                    IntelligentRoadTest.getAlarmInfoTime(objectId, alarmId);
                    IntelligentRoadTest.mkIndex = index;

                    $('#sector').parents('table').siblings('table').show();
                    $('#sector').parents('table').siblings('table').filter('.lineTable').hide();

                },
                gotoShowSectorMessage: function (enodeb_id, cell_id, index) {
                    IntelligentRoadTest.clickType = 1;
                    IntelligentRoadTest.showBaiduMap();
                    IntelligentRoadTest.clickSenseName = "sector";
                    IntelligentRoadTest.getSectorMessageById(enodeb_id, cell_id, IntelligentRoadTest.day, true);
                    IntelligentRoadTest.mkIndex = index;
                    $('#sector').parents('table').siblings('table').show();
                    $('#sector').parents('table').siblings('table').filter('.lineTable').hide();
                },
                gotoShowSenseMessage: function (esbh_id, typeName, time, index) {
                    IntelligentRoadTest.isFromAlarmList = true; //是否是从工单列表跳转的
                    IntelligentRoadTest.isShowAlarmInfoMessage = true; //是否显示工单监测的数据的标识
                    IntelligentRoadTest.showBaiduMap();
                    IntelligentRoadTest.clickType = 1;
                    var type = 1;
                    if (typeName == "天翼蓝鹰高校") {
                        type = 1;
                        IntelligentRoadTest.clickSenseName = "college";
                    } else if (typeName == "天翼蓝鹰高密度住宅区") {
                        type = 2;
                        IntelligentRoadTest.clickSenseName = "uptown";
                    } else if (typeName == "天翼蓝鹰高流量商务区") {
                        type = 3;
                        IntelligentRoadTest.clickSenseName = "business";
                    } else if (typeName == "天翼蓝鹰美景") {
                        type = 7;
                        IntelligentRoadTest.clickSenseName = "scenery";
                    } else if (typeName == "天翼蓝鹰战狼区域") {
                        type = 3;
                        IntelligentRoadTest.clickSenseName = "warwolf";
                    } else if (typeName == "天翼蓝鹰农贸市场") {
                        type = 8;
                        IntelligentRoadTest.clickSenseName = "market";
                    } else if (typeName == "天翼蓝鹰美食") {
                        type = 9;
                        IntelligentRoadTest.clickSenseName = "food";
                    } else if (typeName == "天翼蓝鹰场馆") {
                        type = 10;
                        IntelligentRoadTest.clickSenseName = "site";
                    } else if (typeName == "天翼蓝鹰中小学") {
                        type = 11;
                        IntelligentRoadTest.clickSenseName = "school";
                    }
                    /*var day = time.toString().substr(0,8);
                    IntelligentRoadTest.day = day ;
                    $("#seachTime").text(day);
                    var startDay = new Date(dealDateString(day).getTime() - 6 * 24 * 60 * 60 * 1000 ).Format("yyyyMMdd");
                    $("#weekStartTime").text(startDay);*/
                    //这里需要增加一个判断，根据typeName来判断是属于哪个场景的
                    if (IntelligentRoadTest.clickSenseName != "warwolf") {
                        IntelligentRoadTest.getSenseDataByESBHID(type, esbh_id, IntelligentRoadTest.day);
                    } else {
                        IntelligentRoadTest.getSenseDataByESBHID(type, esbh_id, IntelligentRoadTest.day, null, true);
                    }
                    IntelligentRoadTest.mkIndex = index;
                    IntelligentRoadTest.currentAlarmType = type;
                    IntelligentRoadTest.currentAlarmEsbhId = esbh_id;
                    $('#sector').parents('table').siblings('table').show();
                    $('#sector').parents('table').siblings('table').filter('.lineTable').hide();
                },
                gotoShowRoadMessage: function (esbh_id, typeName, alarm_time, cityName, index) {
                    IntelligentRoadTest.isFromAlarmList = true; //是否是从工单列表跳转的
                    IntelligentRoadTest.isShowAlarmInfoMessage = true;
                    IntelligentRoadTest.showOsmMap();
                    IntelligentRoadTest.clickType = 1;
                    var type = 1; //默认为1
                    //这里需要增加一个判断，根据typeName来判断是属于哪种道路的
                    if (typeName == "天翼蓝鹰高速") {
                        type = 1
                        IntelligentRoadTest.clickSenseName = "highway";
                    } else if (typeName == "天翼蓝鹰高铁") {
                        type = 2;
                        IntelligentRoadTest.clickSenseName = "rail";
                    } else if (typeName == "天翼蓝鹰市政路") {
                        type = 3;
                        IntelligentRoadTest.clickSenseName = "cityRoad";
                    }

                    /*var day = alarm_time.toString().substr(0,8);
                    IntelligentRoadTest.day = day ;
                    $("#seachTime").text(day);
                    var startDay = new Date(dealDateString(day).getTime() - 6 * 24 * 60 * 60 * 1000 ).Format("yyyyMMdd");
                    $("#weekStartTime").text(startDay);*/
                    IntelligentRoadTest.getRoadCompleteMessageByLineID(esbh_id, IntelligentRoadTest.day, type, cityName, null, false);
                    IntelligentRoadTest.mkIndex = index;
                    $('#sector').parents('table').siblings('table').hide();
                    $('#sector').parents('table').siblings('table').filter('.lineTable').show();
                    var lineTypeVal = IntelligentRoadTest.lineTypeIndex;
                    if (lineTypeVal == "0") {
                        $(".colorText").text("RSRP(dBm):");
                    } else if (lineTypeVal == "1") {
                        $(".colorText").text("平均上行速率(Mbps):");
                    } else if (lineTypeVal == "2") {
                        $(".colorText").text("平均下行速率(Mbps):");
                    } else {
                        $(".colorText").text("");
                    }
                }
            }
        });
    } else {
        IntelligentRoadTest.alarmInfoVM.alarmInfoList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.alarmInfoCurrentResult, IntelligentRoadTest.alarmInfoCurrentPage);
        IntelligentRoadTest.alarmInfoVM.totalPages = IntelligentRoadTest.alarmInfoTotalPage;
        IntelligentRoadTest.alarmInfoVM.totalCounts = IntelligentRoadTest.alarmInfoTotalCount;
        IntelligentRoadTest.alarmInfoVM.currentPageNum = IntelligentRoadTest.alarmInfoCurrentPage;
        IntelligentRoadTest.alarmInfoVM.startIndex = IntelligentRoadTest.startIndex;
        IntelligentRoadTest.alarmInfoVM.lastIndex = IntelligentRoadTest.lastIndex;
        if (IntelligentRoadTest.index == 2) {
            IntelligentRoadTest.loadAlarmMk(IntelligentRoadTest.alarmInfoVM.alarmInfoList);
        }
        // $("#alarmInfoCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
        //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.alarmInfoTotalCount +"条数据)");
    }

}

/**********************************
 * @funcname IntelligentRoadTest.Ahref
 * @funcdesc 工单列表中点击工单单号的跳转连接
 * @param {object} data (input optional)
 *  点击列的所有数据
 * @author 郑文彬
 * @create 20171110
 ***********************************/
IntelligentRoadTest.Ahref = function Ahref(data) {
    window.open('http://132.96.154.2/EOMS_FT/app/dwf/ftPub/osCheckFtDetail/osCheckFtDetail!getDetailPage.action?sCode=' + data.task_id);
}

/**********************************
 * @funcname IntelligentRoadTest.loadAlarmInfoTableData
 * @funcdesc 查询并显示工单列表
 * @param {string} starTime (input optional)
 *  起始时间（必须）
 * @param {String} endTime (input optional)
 *  结束时间（必须）
 * @param {String} city (input optional)
 *  城市（必须）
 * @param {string} alarm_id (input optional)
 *  工单号（可选）
 * @param {string} object_id (input optional)
 * object_id（可选），用于标记行。
 * @author 郑文彬
 * @create 20171110
 ***********************************/
IntelligentRoadTest.loadAlarmInfoTableData = function IntelligentRoadTest_loadAlarmInfoTableData(starTime, endTime, city, alarm_id, object_id) {
    // $('#alarmInfoT + .loadImg').show();
    //缓存的查询参数  如果参数一样则不进行查询
    /*if (IntelligentRoadTest.parameter_2 == (starTime + endTime + city + alarm_id)) {
        $('#alarmInfoT + .loadImg').hide();
        return;
    }
    IntelligentRoadTest.parameter_2 = starTime + endTime + city + alarm_id;*/
    if (city != null && city != undefined && city != '') {
        city = 'and city=\'' + city.replace('市', '') + '\'';
    } else {
        city = '';
    }
    if (alarm_id != null && alarm_id != undefined && alarm_id != '') {
        alarm_id = 'and alarm_id=\'' + alarm_id + '\'';
    } else {
        alarm_id = '';
    }
    var list = ["alarm_info_V2", "ENDTIME:" + endTime, "CITY:" + city, "ALARM_ID:" + alarm_id];

    var sqlList = [list];
    var funcList = [IntelligentRoadTest.dealAlarmInfoData];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database, null, null, null, null, false, ['Alarms']);
    //记录工单的查询条件
    IntelligentRoadTest.alarmInfoCurrentSelectConditon = "" + endTime + city;
}


//----------------------------工单列表结束---------------------------------------------

//-----------------------------告警列表开始-------------------------------------------


IntelligentRoadTest.dealAlarmListData = function IntelligentRoadTest_dealAlarmListData(data) {
    var result = callBackChangeData(data);
    IntelligentRoadTest.alarmResult = result;
    // console.log(result);
    IntelligentRoadTest.showAlarmData(result);
    showOrHideInputImage(1);
}

IntelligentRoadTest.showAlarmData = function IntelligentRoadTest_showAlarmData(result) {

    IntelligentRoadTest.alarmTotalCount = result.length;
    var pageCount = result.length / IntelligentRoadTest.pageSize;
    if ((result.length % IntelligentRoadTest.pageSize) != 0) {
        IntelligentRoadTest.alarmTotalPage = parseInt(pageCount) + 1; //总页数，没有整除时加上1
    } else {
        IntelligentRoadTest.alarmTotalPage = pageCount;  //整除不用加1
    }
    if (IntelligentRoadTest.alarmVM == null) {
        IntelligentRoadTest.alarmVM = new Vue({
            el: '#showAlarmDiv',
            data: {
                alarmList: IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.alarmResult, IntelligentRoadTest.alarmCurrentPage),
                totalPages: IntelligentRoadTest.alarmTotalPage,
                totalCounts: IntelligentRoadTest.alarmTotalCount,
                currentPageNum: IntelligentRoadTest.alarmCurrentPage,
                startIndex: IntelligentRoadTest.startIndex,
                lastIndex: IntelligentRoadTest.lastIndex
            },
            methods: {
                showMessage: function (item) {
                    if (IntelligentRoadTest.alarmCompleteVM != null) {
                        IntelligentRoadTest.alarmCompleteVM.alarmCompleteData = [];
                    }
                    showOrHideInputImage(2);
                    if (item.cell_id == null) {
                        IntelligentRoadTest.loadAlarmCompleteData(parseInt(item.base_statn_id), null);
                    } else {
                        IntelligentRoadTest.loadAlarmCompleteData(parseInt(item.base_statn_id), parseInt(item.cell_id));
                    }
                    IntelligentRoadTest.goAlarmCompleteMessage();
                    if (IntelligentRoadTest.alarmCompleteVM == null) {
                        IntelligentRoadTest.alarmCompleteVM = new Vue({
                            el: '#showAlarmCompleteMessage',
                            data: {
                                alarmData: item,
                                alarmCompleteData: []
                            },
                            methods: {
                                showDetailInfo: function (event) {
                                    IntelligentRoadTest.showDetailInfo(event);
                                }
                            }
                        });
                    } else {
                        IntelligentRoadTest.alarmCompleteVM.alarmData = item;
                    }
                },
                changeColor: function (obj) {
                    console.log(obj);
                },
                lastOrNext: function (type) {
                    if (type == 0) {
                        //上一页
                        if (IntelligentRoadTest.alarmCurrentPage > 1) {
                            IntelligentRoadTest.alarmCurrentPage = IntelligentRoadTest.alarmCurrentPage - 1;
                            IntelligentRoadTest.alarmVM.alarmList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.alarmResult, IntelligentRoadTest.alarmCurrentPage);
                            IntelligentRoadTest.alarmVM.currentPageNum = IntelligentRoadTest.alarmCurrentPage;
                            IntelligentRoadTest.alarmVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.alarmVM.lastIndex = IntelligentRoadTest.lastIndex;
                        } else {
                            alert("当前页是第一页");
                        }
                    } else {
                        if (IntelligentRoadTest.alarmCurrentPage < IntelligentRoadTest.alarmTotalPage) {
                            IntelligentRoadTest.alarmCurrentPage = IntelligentRoadTest.alarmCurrentPage + 1;
                            IntelligentRoadTest.alarmVM.alarmList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.alarmResult, IntelligentRoadTest.alarmCurrentPage);
                            IntelligentRoadTest.alarmVM.currentPageNum = IntelligentRoadTest.alarmCurrentPage;
                            IntelligentRoadTest.alarmVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.alarmVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                    }
                    // $("#alarmCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.alarmTotalCount +"条数据)");
                },
                gotoPage: function () {
                    var page = $("#alarmPage").val();
                    page = parseInt(page);
                    if (page > 0 && page <= IntelligentRoadTest.alarmTotalPage) {
                        IntelligentRoadTest.alarmCurrentPage = page;
                        IntelligentRoadTest.alarmVM.alarmList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.alarmResult, IntelligentRoadTest.alarmCurrentPage);
                        IntelligentRoadTest.alarmVM.currentPageNum = IntelligentRoadTest.alarmCurrentPage;
                        IntelligentRoadTest.alarmVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.alarmVM.lastIndex = IntelligentRoadTest.lastIndex;
                    }
                    // $("#alarmCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.alarmTotalCount +"条数据)");
                },
                goLast: function () {
                    IntelligentRoadTest.alarmCurrentPage = IntelligentRoadTest.alarmTotalPage;
                    IntelligentRoadTest.alarmVM.alarmList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.alarmResult, IntelligentRoadTest.alarmCurrentPage);
                    IntelligentRoadTest.alarmVM.currentPageNum = IntelligentRoadTest.alarmCurrentPage;
                    IntelligentRoadTest.alarmVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.alarmVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // $("#alarmCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.alarmTotalCount +"条数据)");
                },
                goFirst: function () {
                    IntelligentRoadTest.alarmCurrentPage = 1;
                    IntelligentRoadTest.alarmVM.alarmList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.alarmResult, IntelligentRoadTest.alarmCurrentPage);
                    IntelligentRoadTest.alarmVM.currentPageNum = IntelligentRoadTest.alarmCurrentPage;
                    IntelligentRoadTest.alarmVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.alarmVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // $("#alarmCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.alarmTotalCount +"条数据)");
                }
            },
        });
    } else {
        IntelligentRoadTest.alarmVM.alarmList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.alarmResult, IntelligentRoadTest.alarmCurrentPage);
        IntelligentRoadTest.alarmVM.totalPages = IntelligentRoadTest.alarmTotalPage;
        IntelligentRoadTest.alarmVM.totalCounts = IntelligentRoadTest.alarmTotalCount;
        IntelligentRoadTest.alarmVM.currentPageNum = IntelligentRoadTest.alarmCurrentPage;
        IntelligentRoadTest.alarmVM.startIndex = IntelligentRoadTest.startIndex;
        IntelligentRoadTest.alarmVM.lastIndex = IntelligentRoadTest.lastIndex;
    }
    setTimeout(function () {
        IntelligentRoadTest.goAlarmList();
    }, 100);
}


IntelligentRoadTest.loadAlarmListData = function IntelligentRoadTest_loadAlarmListData(sectorArr) {
    showOrHideInputImage(2);
    var sqlList = [];
    var city = $('#sectorCityName').text().trim();
    var country = $('#sectorDistrictName').text().trim();
    var endDay = IntelligentRoadTest.day;
    var startDay = new Date(dealDateString(endDay).getTime() - 6 * 24 * 60 * 60 * 1000).Format("yyyyMMdd");
    var topStr = "";
    var bstStr = "";
    for (var i = 0; i < sectorArr.length; i++) {//基站号,小区号,数量,平均RSRP,按数量排序序号
        var sector = sectorArr[i].split(",");
        var bstId = parseInt(sector[0]);
        var cellId = parseInt(sector[1]);
        var topid = bstId * 1000000 + cellId;
        if (i != sectorArr.length - 1) {
            topStr += String(topid) + ",";
            bstStr += String(bstId) + ",";
        } else {
            topStr += String(topid);
            bstStr += String(bstId);
        }
    }

    if (topStr == "") {
        topStr = "''";
    }

    if (bstStr == "") {
        bstStr = "''";
    }

    var list = ["IntelligentRoadTestV2_getAlarmList", "STARTDAY:" + startDay, "ENDDAY:" + endDay,
        "BSTIDANDCELLID:" + topStr, "BSTID:" + bstStr];

    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealAlarmListData];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);
}


IntelligentRoadTest.dealAlarmCompleteData = function IntelligentRoadTest_dealAlarmCompleteData(data) {
    var result = callBackChangeData(data);
    IntelligentRoadTest.alarmCompleteVM.alarmCompleteData = result;
    if (IntelligentRoadTest.index != null || IntelligentRoadTest.senseName != null) {
        showOrHideInputImage(1);
    }
}

IntelligentRoadTest.loadAlarmCompleteData = function IntelligentRoadTest_loadAlarmCompleteData(enodebid, cellid) {
    var sqlList = [];
    // var city = $('#sectorCityName').text().trim();
    // var country = $('#sectorDistrictName').text().trim();
    var endDay = IntelligentRoadTest.day;
    var startDay = new Date(dealDateString(endDay).getTime() - 6 * 24 * 60 * 60 * 1000).Format("yyyyMMdd");
    if (cellid != null) {
        var topid = enodebid * 1000000 + cellid;
        var list = ["IntelligentRoadTestV2_getAlarmCompleteMessageForCell", "STARTDAY:" + startDay, "ENDDAY:" + endDay,
            "BSTIDANDCELLID:" + topid, "BSTID:" + enodebid];
        sqlList.push(list);
    } else {
        var list = ["IntelligentRoadTestV2_getAlarmCompleteMessageForSector", "STARTDAY:" + startDay, "ENDDAY:" + endDay,
            "BSTID:" + enodebid];
        sqlList.push(list);
    }
    var funcList = [IntelligentRoadTest.dealAlarmCompleteData];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);
}

//----------------------------告警列表结束---------------------------------------------


//-----------------------------KPI列表开始-------------------------------------------


IntelligentRoadTest.dealKPIListData = function IntelligentRoadTest_dealKPIListData(data) {
    var result = callBackChangeData(data);
    IntelligentRoadTest.kpiResult = result;
    // console.log(result);
    IntelligentRoadTest.showKPIData(result);
}

IntelligentRoadTest.showKPIData = function IntelligentRoadTest_showKPIData(result) {

    IntelligentRoadTest.kpiTotalCount = result.length;
    var pageCount = result.length / IntelligentRoadTest.pageSize;
    if ((result.length % IntelligentRoadTest.pageSize) != 0) {
        IntelligentRoadTest.kpiTotalPage = parseInt(pageCount) + 1; //总页数，没有整除时加上1
    } else {
        IntelligentRoadTest.kpiTotalPage = pageCount;  //整除不用加1
    }
    if (IntelligentRoadTest.kpiVM == null) {
        IntelligentRoadTest.kpiVM = new Vue({
            el: '#showKPIDiv',
            data: {
                kpiList: IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.kpiResult, IntelligentRoadTest.kpiCurrentPage),
                totalPages: IntelligentRoadTest.kpiTotalPage,
                totalCounts: IntelligentRoadTest.kpiTotalCount,
                currentPageNum: IntelligentRoadTest.kpiCurrentPage,
                startIndex: IntelligentRoadTest.startIndex,
                lastIndex: IntelligentRoadTest.lastIndex
            },
            methods: {
                showMessage: function (item) {
                    showOrHideInputImage(2);
                    if (IntelligentRoadTest.kpiCompleteVM != null) {
                        IntelligentRoadTest.kpiCompleteVM.kpiCompleteData = [];
                    }
                    IntelligentRoadTest.loadKPICompleteData(parseInt(item.enodebid), parseInt(item.cellid));
                    IntelligentRoadTest.goKPICompleteMessage();
                    if (IntelligentRoadTest.kpiCompleteVM == null) {
                        IntelligentRoadTest.kpiCompleteVM = new Vue({
                            el: '#showKPICompleteMessage',
                            data: {
                                kpiData: item,
                                kpiCompleteData: []
                            },
                            methods: {
                                showDetailInfo: function (event) {
                                    IntelligentRoadTest.showDetailInfo(event);
                                }
                            }
                        });
                    } else {
                        IntelligentRoadTest.kpiCompleteVM.kpiData = item;
                    }
                },
                changeColor: function (obj) {
                    console.log(obj);
                },
                lastOrNext: function (type) {
                    if (type == 0) {
                        //上一页
                        if (IntelligentRoadTest.kpiCurrentPage > 1) {
                            IntelligentRoadTest.kpiCurrentPage = IntelligentRoadTest.kpiCurrentPage - 1;
                            IntelligentRoadTest.kpiVM.kpiList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.kpiResult, IntelligentRoadTest.kpiCurrentPage);
                            IntelligentRoadTest.kpiVM.currentPageNum = IntelligentRoadTest.kpiCurrentPage;
                            IntelligentRoadTest.kpiVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.kpiVM.lastIndex = IntelligentRoadTest.lastIndex;
                        } else {
                            alert("当前页是第一页");
                        }
                    } else {
                        if (IntelligentRoadTest.kpiCurrentPage < IntelligentRoadTest.kpiTotalPage) {
                            IntelligentRoadTest.kpiCurrentPage = IntelligentRoadTest.kpiCurrentPage + 1;
                            IntelligentRoadTest.kpiVM.kpiList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.kpiResult, IntelligentRoadTest.kpiCurrentPage);
                            IntelligentRoadTest.kpiVM.currentPageNum = IntelligentRoadTest.kpiCurrentPage;
                            IntelligentRoadTest.kpiVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.kpiVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                    }
                    // $("#kpiCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.kpiTotalCount +"条数据)");
                },
                gotoPage: function () {
                    var page = $("#kpiPage").val();
                    page = parseInt(page);
                    if (page > 0 && page <= IntelligentRoadTest.kpiTotalPage) {
                        IntelligentRoadTest.kpiCurrentPage = page;
                        IntelligentRoadTest.kpiVM.kpiList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.kpiResult, IntelligentRoadTest.kpiCurrentPage);
                        IntelligentRoadTest.kpiVM.currentPageNum = IntelligentRoadTest.kpiCurrentPage;
                        IntelligentRoadTest.kpiVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.kpiVM.lastIndex = IntelligentRoadTest.lastIndex;
                    }
                    // $("#kpiCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.kpiTotalCount +"条数据)");
                },
                goLast: function () {
                    IntelligentRoadTest.kpiCurrentPage = IntelligentRoadTest.kpiTotalPage;
                    IntelligentRoadTest.kpiVM.kpiList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.kpiResult, IntelligentRoadTest.kpiCurrentPage);
                    IntelligentRoadTest.kpiVM.currentPageNum = IntelligentRoadTest.kpiCurrentPage;
                    IntelligentRoadTest.kpiVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.kpiVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // $("#kpiCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.kpiTotalCount +"条数据)");
                },
                goFirst: function () {
                    IntelligentRoadTest.kpiCurrentPage = 1;
                    IntelligentRoadTest.kpiVM.kpiList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.kpiResult, IntelligentRoadTest.kpiCurrentPage);
                    IntelligentRoadTest.kpiVM.currentPageNum = IntelligentRoadTest.kpiCurrentPage;
                    IntelligentRoadTest.kpiVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.kpiVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // $("#kpiCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.kpiTotalCount +"条数据)");
                }
            },
        });
        setTimeout(function () {
            // $("#kpiCount").html("返回上一级(" + $("#kpiCountMessage").text() + ")");
            $("#showKPIDiv").css("max-height", $(".mapDiv").height() - 70 - 80);
            $(".kpiList").show().siblings().hide();
        }, 100);
    } else {
        IntelligentRoadTest.kpiVM.kpiList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.kpiResult, IntelligentRoadTest.kpiCurrentPage);
        IntelligentRoadTest.kpiVM.totalPages = IntelligentRoadTest.kpiTotalPage;
        IntelligentRoadTest.kpiVM.totalCounts = IntelligentRoadTest.kpiTotalCount;
        IntelligentRoadTest.kpiVM.currentPageNum = IntelligentRoadTest.kpiCurrentPage;
        IntelligentRoadTest.kpiVM.startIndex = IntelligentRoadTest.startIndex;
        IntelligentRoadTest.kpiVM.lastIndex = IntelligentRoadTest.lastIndex;
        setTimeout(function () {
            $("#kpiBackPoor").html("返回上一级");
            // $("#showKPIDiv").css("max-height",$(".mapDiv").height()-70-80);
            // $(".kpiList").show().siblings().hide();
            IntelligentRoadTest.goKpiList();
        }, 100);
    }
    if (IntelligentRoadTest.index != null || IntelligentRoadTest.senseName != null) {
        showOrHideInputImage(1);
    }
}


IntelligentRoadTest.loadKPIListData = function IntelligentRoadTest_loadKPIListData(sectorArr) {
    showOrHideInputImage(2);
    var sqlList = [];
    var city = $('#sectorCityName').text().trim();
    var country = $('#sectorDistrictName').text().trim();
    var endDay = IntelligentRoadTest.day;
    var startDay = new Date(dealDateString(endDay).getTime() - 6 * 24 * 60 * 60 * 1000).Format("yyyyMMdd");
    var topStr = "";
    var bstStr = "";
    for (var i = 0; i < sectorArr.length; i++) {//基站号,小区号,数量,平均RSRP,按数量排序序号
        var sector = sectorArr[i].split(",");
        var bstId = parseInt(sector[0]);
        var cellId = parseInt(sector[1]);
        var topid = bstId * 1000000 + cellId;
        if (i != sectorArr.length - 1) {
            topStr += String(topid) + ",";
            bstStr += String(bstId) + ",";
        } else {
            topStr += String(topid);
            bstStr += String(bstId);
        }
    }

    if (topStr == "") {
        topStr = "''";
    }

    if (bstStr == "") {
        bstStr = "''";
    }

    var list = ["IntelligentRoadTestV2_getKPIList", "STARTDAY:" + startDay, "ENDDAY:" + endDay,
        "BSTIDANDCELLID:" + topStr];

    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealKPIListData];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);
}


IntelligentRoadTest.dealKPICompleteData = function IntelligentRoadTest_dealKPICompleteData(data) {
    var result = callBackChangeData(data);
    IntelligentRoadTest.kpiCompleteData = result;
    IntelligentRoadTest.kpiCompleteVM.kpiCompleteData = result;
    showOrHideInputImage(1);
}

IntelligentRoadTest.loadKPICompleteData = function IntelligentRoadTest_loadKPICompleteData(enodebid, cellid) {
    var sqlList = [];
    /*var city = $('#sectorCityName').text().trim();
    var country = $('#sectorDistrictName').text().trim();*/
    var endDay = IntelligentRoadTest.day;
    var startDay = new Date(dealDateString(endDay).getTime() - 6 * 24 * 60 * 60 * 1000).Format("yyyyMMdd");
    var topStr = enodebid * 1000000 + cellid;

    var list = ["IntelligentRoadTestV2_getKPICompleteMessage", "STARTDAY:" + startDay, "ENDDAY:" + endDay,
        "BSTIDANDCELLID:" + topStr];

    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealKPICompleteData];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);
}


//----------------------------KPI列表结束---------------------------------------------

//-----------------------------宏站列表开始-------------------------------------------


IntelligentRoadTest.dealMacSectorListData = function IntelligentRoadTest_dealMacSectorListData(data) {
    var result = callBackChangeData(data);
    /*for(var i = 0; i < result.length; i++){
        result[i].agps_mr_count =  i;
        result[i].agps_mr_dist_avg = 100;
        result[i].agps_mr_dist_ta = "";
        result[i].pred_azimuth = ((i + 1) * 30 ) % 360;
        result[i].pred_azimuth_diff = Math.abs(result[i].ant_azimuth - result[i].pred_azimuth);
        result[i].surp_azimuth_count = i;
    }*/
    IntelligentRoadTest.macSectorResult = result;
    IntelligentRoadTest.macSectorCrossFliterObj.remove();
    IntelligentRoadTest.macSectorCrossFliterObj.add(result);
    IntelligentRoadTest.macSectorCurrentResult = result;
    //IntelligentRoadTest.showMacSectorData(result);
    // $("#macSectorList .flexRow ").eq(0).children(".selected").trigger("click");
    var SelectName = "";
    if ($("#macSectorListSelectName").text().trim() == "" || $("#macSectorListSelectName").text().trim() == "全部分类") {
        $("#macSectorListSelectName").text("全部分类");
        SelectName = "全部分类";
        var flexCol = $("#macSectorList  .flexRow .flexCol");
        IntelligentRoadTest.triggleFilter(SelectName, flexCol);
        // IntelligentRoadTest.showMacSectorData(result);
    } else {
        SelectName = $("#macSectorListSelectName").text();
        var flexCol = $("#macSectorList  .flexRow .flexCol");
        IntelligentRoadTest.triggleFilter(SelectName, flexCol);
    }
    $("#macSectorSort ul li.selected").trigger("click");//触发排序
    // IntelligentRoadTest.showMacSectorData(result);
}

IntelligentRoadTest.showMacSectorData = function IntelligentRoadTest_showMacSectorData(result) {
    IntelligentRoadTest.macSectorCurrentPage = 1;
    IntelligentRoadTest.macSectorTotalCount = result.length;
    var pageCount = result.length / IntelligentRoadTest.pageSize;
    if ((result.length % IntelligentRoadTest.pageSize) != 0) {
        IntelligentRoadTest.macSectorTotalPage = parseInt(pageCount) + 1; //总页数，没有整除时加上1
    } else {
        IntelligentRoadTest.macSectorTotalPage = pageCount;  //整除不用加1
    }
    if (IntelligentRoadTest.macSectorVM == null) {
        IntelligentRoadTest.macSectorVM = new Vue({
            el: '#showMacSectorDiv',
            data: {
                macSectorList: IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.macSectorCurrentResult, IntelligentRoadTest.macSectorCurrentPage),
                totalPages: IntelligentRoadTest.macSectorTotalPage,
                totalCounts: IntelligentRoadTest.macSectorTotalCount,
                currentPageNum: IntelligentRoadTest.macSectorCurrentPage,
                startIndex: IntelligentRoadTest.startIndex,
                lastIndex: IntelligentRoadTest.lastIndex
            },
            methods: {
                showMessage: function (item) {
                    IntelligentRoadTest.goMacSectorList();
                    if (IntelligentRoadTest.macSectorCompleteVM == null) {
                        IntelligentRoadTest.macSectorCompleteVM = new Vue({
                            el: '#showMacSectorCompleteMessage',
                            data: {
                                macSectorData: item
                            },
                            methods: {}
                        });
                    } else {
                        IntelligentRoadTest.macSectorCompleteVM.macSectorData = item;
                    }
                },
                changeColor: function (obj) {
                    console.log(obj);
                },
                lastOrNext: function (type) {
                    if (type == 0) {
                        //上一页
                        if (IntelligentRoadTest.macSectorCurrentPage > 1) {
                            IntelligentRoadTest.macSectorCurrentPage = IntelligentRoadTest.macSectorCurrentPage - 1;
                            IntelligentRoadTest.macSectorVM.macSectorList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.macSectorCurrentResult, IntelligentRoadTest.macSectorCurrentPage);
                            IntelligentRoadTest.macSectorVM.currentPageNum = IntelligentRoadTest.macSectorCurrentPage;
                            IntelligentRoadTest.macSectorVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.macSectorVM.lastIndex = IntelligentRoadTest.lastIndex;
                        } else {
                            alert("当前页是第一页");
                        }
                    } else {
                        if (IntelligentRoadTest.macSectorCurrentPage < IntelligentRoadTest.macSectorTotalPage) {
                            IntelligentRoadTest.macSectorCurrentPage = IntelligentRoadTest.macSectorCurrentPage + 1;
                            IntelligentRoadTest.macSectorVM.macSectorList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.macSectorCurrentResult, IntelligentRoadTest.macSectorCurrentPage);
                            IntelligentRoadTest.macSectorVM.currentPageNum = IntelligentRoadTest.macSectorCurrentPage;
                            IntelligentRoadTest.macSectorVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.macSectorVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                    }
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.macSectorVM.macSectorList, 6);
                    // $("#macSectorCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.macSectorTotalCount +"条数据)");
                },
                gotoPage: function () {
                    var page = $("#macSectorPage").val();
                    page = parseInt(page);
                    if (page > 0 && page <= IntelligentRoadTest.macSectorTotalPage) {
                        IntelligentRoadTest.macSectorCurrentPage = page;
                        IntelligentRoadTest.macSectorVM.macSectorList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.macSectorCurrentResult, IntelligentRoadTest.macSectorCurrentPage);
                        IntelligentRoadTest.macSectorVM.currentPageNum = IntelligentRoadTest.macSectorCurrentPage;
                        IntelligentRoadTest.macSectorVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.macSectorVM.lastIndex = IntelligentRoadTest.lastIndex;
                    }
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.macSectorVM.macSectorList, 6);
                    // $("#macSectorCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.macSectorTotalCount +"条数据)");
                },
                goLast: function () {
                    IntelligentRoadTest.macSectorCurrentPage = IntelligentRoadTest.macSectorTotalPage;
                    IntelligentRoadTest.macSectorVM.macSectorList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.macSectorCurrentResult, IntelligentRoadTest.macSectorCurrentPage);
                    IntelligentRoadTest.macSectorVM.currentPageNum = IntelligentRoadTest.macSectorCurrentPage;
                    IntelligentRoadTest.macSectorVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.macSectorVM.lastIndex = IntelligentRoadTest.lastIndex;
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.macSectorVM.macSectorList, 6);
                    // $("#macSectorCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.macSectorTotalCount +"条数据)");
                },
                goFirst: function () {
                    IntelligentRoadTest.macSectorCurrentPage = 1;
                    IntelligentRoadTest.macSectorVM.macSectorList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.macSectorCurrentResult, IntelligentRoadTest.macSectorCurrentPage);
                    IntelligentRoadTest.macSectorVM.currentPageNum = IntelligentRoadTest.macSectorCurrentPage;
                    IntelligentRoadTest.macSectorVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.macSectorVM.lastIndex = IntelligentRoadTest.lastIndex;
                    IntelligentRoadTest.drawMk(IntelligentRoadTest.macSectorVM.macSectorList, 6);
                    // $("#macSectorCount").html("返回上一级(本页显示第"+IntelligentRoadTest.startIndex + "-"
                    //     + IntelligentRoadTest.lastIndex  + "条的数据，共"+ IntelligentRoadTest.macSectorTotalCount +"条数据)");
                },
                gotoAlarmMessage: function (alt_no) {
                    window.open('http://132.96.154.2/EOMS_FT/app/dwf/ftPub/osCheckFtDetail/osCheckFtDetail!getDetailPage.action?sCode=' + alt_no);
                },
                turnMk: function (index, item) {
                    for (var i = 0; i < IntelligentRoadTest.markerList.length; i++) {
                        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.markerList[i]);
                    }

                    for (var i = 0; i < IntelligentRoadTest.lngArr.length; i++) {
                        var lng = IntelligentRoadTest.lngArr[i];
                        var lat = IntelligentRoadTest.latArr[i];
                        var color = "#fff"
                        var img = "../js/IntelligentRoadTest/images/bg_num.png";
                        if (i == index) {
                            img = "../js/IntelligentRoadTest/images/maker2.png";
                            color = "black";
                            IntelligentRoadTest.openInfoWindow(lng, lat, item.cell_name);
                        }
                        IntelligentRoadTest.addMk(lng, lat, img, i, color, item.cell_name);
                        $("#showMacSectorDiv").find(".listUL > li").eq(i).find(".numSpan").css("background", "url(../js/IntelligentRoadTest/images/bg_num.png)");
                        $("#showMacSectorDiv").find(".listUL > li").eq(i).css("background", "#fff");
                        IntelligentRoadTest.lineArr[i].setStrokeColor("#505872");
                    }
                    if (IntelligentRoadTest.lineArr[index] != null) {
                        IntelligentRoadTest.lineArr[index].setStrokeColor("#9ffb13");
                    }
                    $("#showMacSectorDiv").find(".listUL > li").eq(index).find(".numSpan").css("background", "url(../js/IntelligentRoadTest/images/maker2.png)");
                    $("#showMacSectorDiv").find(".listUL > li").eq(index).css("background", "#f4f4f4");
                },
                gotoShowSectorMessage: function (sectorDate, index) {
                    // console.log(sectorDate);
//                	IntelligentRoadTest.clickType=1;
                    for (var i = 0; i < IntelligentRoadTest.lineArr.length; i++) {
                        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.lineArr[i]);
                    }
                    for (var i = 0; i < IntelligentRoadTest.sectorPolygonArr.length; i++) {
                        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.sectorPolygonArr[i]);
                    }
                    for (var i = 0; i < IntelligentRoadTest.macSectorMarkeArr.length; i++) {
                        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.macSectorMarkeArr[i]);
                    }
                    IntelligentRoadTest.removeMk();
                    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.lineArr[index]);
                    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.sectorPolygonArr[index]);
                    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.macSectorMarkeArr[index]);
                    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.markerList[index]);
                    IntelligentRoadTest.clickType = 1; //设置这个值才会做一个定位
                    IntelligentRoadTest.getSectorMessageById(sectorDate.enodeb_id, sectorDate.cell_id, IntelligentRoadTest.day);
                    // IntelligentRoadTest.zoom=getZoom (IntelligentRoadTest.macSectorMarkeArr[index].getPosition().lng, IntelligentRoadTest.markerList[index].getPosition().lng,IntelligentRoadTest.markerList[index].getPosition().lat, IntelligentRoadTest.macSectorMarkeArr[index].getPosition().lat);
                    // IntelligentRoadTest.map.centerAndZoom(new BMap.Point((IntelligentRoadTest.macSectorMarkeArr[index].getPosition().lng+IntelligentRoadTest.markerList[index].getPosition().lng)/2,(IntelligentRoadTest.markerList[index].getPosition().lng,IntelligentRoadTest.markerList[index].getPosition().lat+IntelligentRoadTest.macSectorMarkeArr[index].getPosition().lat)/2), IntelligentRoadTest.zoom);
                }
            }
        });
        setTimeout(function () {
            // $("#macSectorCount").html("返回上一级(" + $("#macSectorCountMessage").text() + ")");
            $("#showMacSectorDiv").css("max-height", $(".mapDiv").height() - 70 - 80);
            $(".macSectorList").show().siblings().hide();
        }, 100);
    } else {
        IntelligentRoadTest.macSectorVM.macSectorList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.macSectorCurrentResult, IntelligentRoadTest.macSectorCurrentPage);
        IntelligentRoadTest.macSectorVM.totalPages = IntelligentRoadTest.macSectorTotalPage;
        IntelligentRoadTest.macSectorVM.totalCounts = IntelligentRoadTest.macSectorTotalCount;
        IntelligentRoadTest.macSectorVM.currentPageNum = IntelligentRoadTest.macSectorCurrentPage;
        IntelligentRoadTest.macSectorVM.startIndex = IntelligentRoadTest.startIndex;
        IntelligentRoadTest.macSectorVM.lastIndex = IntelligentRoadTest.lastIndex;
        if (IntelligentRoadTest.index == 6) {
            IntelligentRoadTest.drawMk(IntelligentRoadTest.macSectorVM.macSectorList, 6);
        }
        setTimeout(function () {
            // $("#macSectorCount").html("返回上一级(" + $("#macSectorCountMessage").text() + ")");
            $("#showMacSectorDiv").css("max-height", $(".mapDiv").height() - 70 - 80);
            $(".macSectorList").show().siblings().hide();
        }, 100);
        showOrHideInputImage(1);
    }
}

IntelligentRoadTest.loadMacSectorListData = function IntelligentRoadTest_loadMacSectorListData(country_id, mktcenter_id, district_name, mktcenter_name) {
    var sqlList = [];
    var city = $('#macSectorCityName').text().trim();
    var list = ["IntelligentRoadTest_14_polygonMacSectorTable", "DAY:" + IntelligentRoadTest.day, "CITY:" + city];
    if (district_name != null && district_name != "" && district_name != "null") {
        list.push("COUNTRY:" + "and COUNTRY = '" + district_name + "'");
    } else {
        var countryStr = $("#macSectorDistrictName").text().trim();
        if (countryStr != "" && countryStr != "全市" && countryStr != "null") {
            district_name = countryStr;
            list.push("COUNTRY:" + "and COUNTRY = '" + district_name + "'");
        }
    }
    if (mktcenter_name != null && mktcenter_name != "" && mktcenter_name != "null") {
        list.push("MKTCENTER:" + "and MKTCENTER = '" + mktcenter_name + "'");
    } else {
        var mktcenter = $("#macSectorMktName").text().trim();
        if (mktcenter != "" && mktcenter != "全区" && mktcenter != "null") {
            mktcenter_name = mktcenter;
            list.push("MKTCENTER:" + "and MKTCENTER = '" + mktcenter_name + "'");
        }
    }
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealMacSectorListData];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);
    //记录宏站的查询条件
    IntelligentRoadTest.macSectorCurrentSelectConditon = "" + IntelligentRoadTest.day + city;
}


//----------------------------宏站列表结束---------------------------------------------


IntelligentRoadTest.markerList = [];//水滴点marker对象
IntelligentRoadTest.lngArr = [];//水滴点经度
IntelligentRoadTest.latArr = [];//水滴点纬度
IntelligentRoadTest.object_id = [];//水滴点objcet_id
/**********************************
 * @funcname IntelligentRoadTest.drawMk
 * @funcdesc 遍历当前列表数据，打印列表数据对应的水滴点
 * @param {Array} list (input)
 包含marke经纬度信息的数组
 * @param {object} pageTyep (input)
 列表类型
 * @return {null}
 * @author 郑文彬
 * @create 20171219
 ***********************************/
IntelligentRoadTest.drawMk = function intelligentRoadTest_drawMk(list, pageTyep) {
    if (IntelligentRoadTest.isScreenCompared) {//分屏对比是不需要进行描绘标记点和定位
        return;
    }
    if (list == null) {
        return;
    }
    IntelligentRoadTest.mkList = list;
    IntelligentRoadTest.pageTyep = pageTyep;
//	IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.searchMk);
//	for(var i=0;i<IntelligentRoadTest.markerList.length;i++){
//		IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.markerList[i]);
//	}
//	IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlay);
//	$("#cirTip").hide();
//	IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlayTwo);
//	$("#cirTipLeft").hide();
    for (var i = 0; i < IntelligentRoadTest.markerList.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.markerList[i]);
    }
    IntelligentRoadTest.markerList = [];
    IntelligentRoadTest.lngArr = [];
    IntelligentRoadTest.latArr = [];
    IntelligentRoadTest.object_id = [];
    var points = [];
    if (list.length == 0) {
        return;
    }
    var type = null; //这个变量是在用户抱怨列表的时候打点用到的。主要用于判断是属于哪一种类型的工单
    var sumLon = 0;
    var sumLat = 0;
    for (var i = 0; i < list.length; i++) {
        var lng = null;
        var lat = null;
        var object_id = null;
        lng = list[i].longitude_mid_baidu;
        lat = list[i].latitude_mid_baidu;
        object_id = list[i].object_id;
        if (pageTyep == 1) {
            lng = (list[i].max_longitude_baidu + list[i].min_longitude_baidu) / 2;
            lat = (list[i].max_latitude_baidu + list[i].min_latitude_baidu) / 2;
            object_id = list[i].area_name;
        } else if (pageTyep == 2) {
            lng = list[i].longitude_mid_baidu;
            lat = list[i].latitude_mid_baidu
//		  object_id=list[i].object_id;
            if (list[i].cell_id == null) {
                object_id = list[i].enodeb_id;
            } else {
                object_id = list[i].enodeb_id + "_" + list[i].cell_id;
            }
        } else if (pageTyep == 3 || pageTyep == 26 || pageTyep == 27 || pageTyep == 28) {
            lng = list[i].longitude_mid_baidu;
            lat = list[i].latitude_mid_baidu;
            object_id = list[i].cell_name;
            var obj = IntelligentRoadTest.getSectorXYZ(list[i].band_mapping);
            var pointArr = IntelligentRoadTest.add_sector(new BMap.Point(lng, lat), obj.xy, obj.xy, obj.z, list[i].ant_azimuth)
//		  var pointArr=IntelligentRoadTest.add_sector(new BMap.Point(lng,lat),0.0003,0.0003,3.5,list[i].ant_azimuth)
            lng = (pointArr[2].lng + pointArr[3].lng) / 2;
            lat = (pointArr[2].lat + pointArr[3].lat) / 2;
            if (list[i].is_indoor == '室内') {
                lng = list[i].longitude_mid_baidu;
                lat = list[i].latitude_mid_baidu;
            }
//		  if(list[i].ant_azimuth==null||list[i].band_mapping==null){
//			  lng=list[i].longitude_mid_baidu;
//			  lat=list[i].latitude_mid_baidu;
//		  }
        } else if (pageTyep == 5) {
            lng = list[i].longitude_mid;
            lat = list[i].latitude_mid;
            object_id = list[i].object_name;
        } else if (pageTyep == 6) {
            lng = list[i].longitude_mid_baidu;
            lat = list[i].latitude_mid_baidu;
            object_id = list[i].cell_name;
            var obj = IntelligentRoadTest.getSectorXYZ(list[i].band_mapping);
            var pointArr = IntelligentRoadTest.add_sector(new BMap.Point(lng, lat), obj.xy, obj.xy, obj.z, list[i].ant_azimuth);
//          这里要加上把预测或者说偏离的方向角展示出来的扇区

//		  var pointArr=IntelligentRoadTest.add_sector(new BMap.Point(lng,lat),0.0003,0.0003,3.5,list[i].ant_azimuth)
            lng = (pointArr[2].lng + pointArr[3].lng) / 2;
            lat = (pointArr[2].lat + pointArr[3].lat) / 2;
            if (list[i].is_indoor == '室内') {
                lng = list[i].longitude_mid_baidu;
                lat = list[i].latitude_mid_baidu;
            }
//		  if(list[i].ant_azimuth==null||list[i].band_mapping==null){
//			  lng=list[i].longitude_mid_baidu;
//			  lat=list[i].latitude_mid_baidu;
//		  }
            //五高一地
        } else if (pageTyep == 9 || pageTyep == 10 || pageTyep == 11 || pageTyep == 12) {
            lng = list[i].longitude_mid_baidu;
            lat = list[i].latitude_mid_baidu;
            object_id = list[i].esbh_name;
        } else if (pageTyep == 16 || pageTyep == 17 || pageTyep == 18
            || pageTyep == 19 || pageTyep == 20 || pageTyep == 21 || pageTyep == 22 || pageTyep == 23) {
            lng = list[i].longitude_mid_baidu;
            lat = list[i].latitude_mid_baidu;
            object_id = list[i].esbh_name;
        } else if (pageTyep == 29) { //用户抱怨
            lng = list[i].longitude;
            lat = list[i].latitude;
            type = list[i].type; //赋值用户抱怨的工单类型
            object_id = list[i].workorder_id;
        }
        sumLon = sumLon + lng;
        sumLat = sumLat + lat;
        IntelligentRoadTest.lngArr.push(lng);
        IntelligentRoadTest.latArr.push(lat);
        IntelligentRoadTest.object_id.push(object_id);
        var img = "../js/IntelligentRoadTest/images/bg_num.png";
        if (IntelligentRoadTest.index == 0 || IntelligentRoadTest.index == 24 || IntelligentRoadTest.index == 25
            || IntelligentRoadTest.index == 30 || IntelligentRoadTest.index == 31 || IntelligentRoadTest.index == 32) { //30 、31 、32分别代M3干扰区域、重叠覆盖区域、越区覆盖区域
            img = "../js/IntelligentRoadTest/images/markeRq.png";
        }
        if (lng != null && lng != "" && lat != null && lat != "") {
            points.push(new BMap.Point(lng, lat));
        }
        IntelligentRoadTest.addMk(lng, lat, img, i, "#fff", object_id, type);
    }
    if (pageTyep == 6) {
        IntelligentRoadTest.drawMacSectorLink(list);
    }
    var mapView = IntelligentRoadTest.map.getViewport(points);
//    IntelligentRoadTest.zoom=getZoom (Math.max.apply( Math, IntelligentRoadTest.lngArr ), Math.min.apply( Math, IntelligentRoadTest.lngArr ), Math.max.apply( Math, IntelligentRoadTest.latArr ), Math.min.apply( Math, IntelligentRoadTest.latArr ))+1;
//	if(IntelligentRoadTest.mapZoom==0){
//		IntelligentRoadTest.mapZoom=1;
//		return;
//	}
    if (IntelligentRoadTest.currentLocation == "" || IntelligentRoadTest.currentLocation == null) {
        if (IntelligentRoadTest.searchTitleClick || IntelligentRoadTest.seachTime) {
            IntelligentRoadTest.searchTitleClick = false;
            IntelligentRoadTest.seachTime = false;
            return;
        }
        console.log("drawMk  centerAndZoom");
        //看能不能拿到区县，不能就直接将第一个点作为经纬度去进行缩放
        if (list.length > 0) {
            var poinit = new BMap.Point(sumLon / list.length, sumLat / list.length);
            var district = IntelligentRoadTest.getCenterPointDistrict(poinit);
            if (district != null) {
                IntelligentRoadTest.map.centerAndZoom(mapView.center, mapView.zoom);
            } else {
                //如果定位点刚好在海里 ，取第一个点定位
                var lng_1;
                var lat_1;
                if (pageTyep == 1) {
                    lng_1 = (list[0].max_longitude_baidu + list[0].min_longitude_baidu) / 2;
                    lat_1 = (list[0].max_latitude_baidu + list[0].min_latitude_baidu) / 2;
                } else if (pageTyep == 2) {
                    lng_1 = list[0].longitude_mid_baidu;
                    lat_1 = list[0].latitude_mid_baidu
                } else if (pageTyep == 3) {
                    lng_1 = list[0].longitude_mid_baidu;
                    lat_1 = list[0].latitude_mid_baidu;
                } else if (pageTyep == 5) {
                    lng_1 = list[0].longitude_mid;
                    lat_1 = list[0].latitude_mid
                } else if (pageTyep == 6) {
                    lng_1 = list[0].longitude_mid_baidu;
                    lat_1 = list[0].latitude_mid_baidu;
                } else if (pageTyep == 9 || pageTyep == 10 || pageTyep == 11 || pageTyep == 12) {
                    lng_1 = list[0].longitude_mid_baidu;
                    lat_1 = list[0].latitude_mid_baidu;
                } else if (pageTyep == 16 || pageTyep == 17 || pageTyep == 18 || pageTyep == 19 || pageTyep == 20 || pageTyep == 21 || pageTyep == 22 || pageTyep == 23) {
                    lng_1 = list[0].longitude_mid_baidu;
                    lat_1 = list[0].latitude_mid_baidu;
                }
                poinit = new BMap.Point(lng_1, lat_1);
                IntelligentRoadTest.map.centerAndZoom(mapView.center, mapView.zoom);

            }
        }
    }
}
/**********************************
 * @funcname IntelligentRoadTest.addMk
 * @funcdesc 绘制单个水滴点，并以i为下标，将绘制的水滴的存于IntelligentRoadTest.markerList中
 * @param {string} lng (input optional)
 经度
 * @param {string} lat (input optional)
 纬度
 * @param {string} img (input optional)
 marke的图片
 * @param {string} i (input optional)
 弱区表当页的序号
 * @param {string} color (input optional)
 文本颜色
 * @param {string} objcet_id (input optional)
 弱区的object_id

 {String} type 用户抱怨的工单的类型，只有工单抱怨需要使用到
 * @return {null}
 * @author 郑文彬
 * @create 20171219
 ***********************************/
IntelligentRoadTest.addMk = function IntelligentRoadTest_addMk(lng, lat, img, i, color, objcet_id, type) {
    var point = new BMap.Point(lng, lat);
    var myIcon = new BMap.Icon(img, new BMap.Size(22, 32));
    var marker = new BMap.Marker(point, {icon: myIcon});  // 创建标注
    //marker.setZIndex(1);
    //marker.setOffset(new BMap.Size(0,-15));
    var label = new BMap.Label(i + 1, {
        offset: new BMap.Size(6, 4)
    });
    if (i >= 9) {
        label = new BMap.Label(i + 1, {
            offset: new BMap.Size(2, 4)
        });
    }
    label.setStyle({
        background: 'none', color: "#fff", border: 'none'//只要对label样式进行设置就可达到在标注图标上显示数字的效果
        , fontWeight: 'bold'
    });
    marker.setLabel(label);
    if (img == "../js/IntelligentRoadTest/images/maker2.png") {
        marker.setZIndex(666);
    } else {
        marker.setZIndex(99);
    }
    marker.setOffset(
        new BMap.Size(0, -15)
    );
    IntelligentRoadTest.markerList[i] = marker;
    marker.index = i;
    marker.objcet_id = objcet_id;
    marker.pageType = IntelligentRoadTest.index;
    if (type != null) { //将用户抱怨工单的类型赋值给marker的type属性
        marker.type = type;
    }
    marker.addEventListener("mouseout", function (e) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlay);
        $('#cirTip').hide();
        var img = "../js/IntelligentRoadTest/images/bg_num.png";
        if (this.pageType == 0 || this.pageType == 24 || this.pageType == 25 || this.pageType == 30 || this.pageType == 31 || this.pageType == 32) {
            img = "../js/IntelligentRoadTest/images/markeRq.png";
        }
        IntelligentRoadTest.markerList[i].setZIndex(111);
        if (IntelligentRoadTest.mkIndex != i) {
            IntelligentRoadTest.markerList[i].setIcon(new BMap.Icon(img, new BMap.Size(22, 32)));
        }
        var id = IntelligentRoadTest.getListDivId(IntelligentRoadTest.index);
        $("#" + id).find(".listUL > li").eq(i).find(".numSpan").css("background", "url(" + "../js/IntelligentRoadTest/images/bg_num.png" + ")");
        $("#" + id).find(".listUL > li").eq(i).find(".numSpan2").css("background", "url(" + "../js/IntelligentRoadTest/images/markeRq.png" + ")");
        $("#" + id).find(".listUL > li").eq(i).css("background", "#fff");
    });
    marker.addEventListener("mouseover", function (e) {
        for (var i = 0; i < IntelligentRoadTest.lngArr.length; i++) {
            var lng = IntelligentRoadTest.lngArr[i];
            var lat = IntelligentRoadTest.latArr[i];
            var color = "#fff"
            var img = "../js/IntelligentRoadTest/images/bg_num.png";
            if (this.pageType == 0 || this.pageType == 24 || this.pageType == 25 || this.pageType == 30 || this.pageType == 31 || this.pageType == 32) {
                img = "../js/IntelligentRoadTest/images/markeRq.png";
            }
            if (i == this.index) {
                img = "../js/IntelligentRoadTest/images/maker2.png";
                color = "black";
                IntelligentRoadTest.openInfoWindow(lng, lat, IntelligentRoadTest.object_id[i]);
                IntelligentRoadTest.markerList[i].setZIndex(6666);
            }
            if (IntelligentRoadTest.mkIndex != i) {
                IntelligentRoadTest.markerList[i].setIcon(new BMap.Icon(img, new BMap.Size(22, 32)));
            }
        }

        IntelligentRoadTest.openInfoWindow(IntelligentRoadTest.lngArr[this.index], IntelligentRoadTest.latArr[this.index], IntelligentRoadTest.object_id[this.index]);

        //改变列表图标及背景色
        IntelligentRoadTest.changeImg(this.pageType, this.index);

    });
    marker.addEventListener("click", function (e) {
        //点击水滴点显示提示信息
        setTimeout(function () {
            if (IntelligentRoadTest.index != 6) {
                $('#cirTipLeft').show();
                IntelligentRoadTest.resizeInfoWindow();
            }
        }, 100)
        if (IntelligentRoadTest.mkIndex == this.index) {
            return;
        }
        IntelligentRoadTest.mapClick = true;
        var img;
        if (this.pageType == 0 || this.pageType == 24 || this.pageType == 25 || this.pageType == 30 || this.pageType == 31 || this.pageType == 32) {
            img = "../js/IntelligentRoadTest/images/markeRq.png";
        } else {
            img = "../js/IntelligentRoadTest/images/bg_num.png";
        }
        try {
            IntelligentRoadTest.markerList[IntelligentRoadTest.mkIndex].setIcon(new BMap.Icon(img, new BMap.Size(22, 32)));
        } catch (e) {
        }
        //点击水滴点调至详情页
        var i = this.index;
        if (this.pageType == 0 || this.pageType == 24 || this.pageType == 25 || this.pageType == 30 || this.pageType == 31 || this.pageType == 32) {
            IntelligentRoadTest.rfgVM.showMessage(IntelligentRoadTest.rfgVM.poorAreaList[i], i);
        }
        if (this.pageType == 1) {
            IntelligentRoadTest.concernAreaVM.showMessage(IntelligentRoadTest.concernAreaVM.concernAreaList[i], i);
        }
        if (this.pageType == 3 || this.pageType == 26 || this.pageType == 27 || this.pageType == 28) { //扇区和专题扇区
            IntelligentRoadTest.sectorVM.showMessage(IntelligentRoadTest.sectorVM.sectorList[i], i, true); //第三个参数表示是否是从列表跳转过来的，这里点击水滴点相当于从列表跳转过来的
        }
        if (this.pageType == 5) {
            IntelligentRoadTest.boneAreaVM.showMessage(IntelligentRoadTest.boneAreaVM.boneAreaList[i], i)
        }
        if (this.pageType == 6) {
            $('#showMacSectorDiv .listUL .cellName').eq(i).click();
            IntelligentRoadTest.macSectorVM.showMessage(IntelligentRoadTest.macSectorVM.macSectorList[i], i)
        }
        if (this.pageType == 9) {
            IntelligentRoadTest.uptownVM.showMessage(IntelligentRoadTest.uptownVM.uptownList[i], i)
        }
        if (this.pageType == 10) {
            IntelligentRoadTest.collegeVM.showMessage(IntelligentRoadTest.collegeVM.collegeList[i], i)
        }
        if (this.pageType == 11) {
            IntelligentRoadTest.businessVM.showMessage(IntelligentRoadTest.businessVM.businessList[i], i)
        }
        if (this.pageType == 12) {
            IntelligentRoadTest.sceneryVM.showMessage(IntelligentRoadTest.sceneryVM.sceneryList[i], i)
        }
        if (this.pageType == 16) {
            IntelligentRoadTest.warwolfVM.showMessage(IntelligentRoadTest.warwolfVM.warwolfList[i], i)
        }
        if (this.pageType == 17) {
            IntelligentRoadTest.marketVM.showMessage(IntelligentRoadTest.marketVM.marketList[i], i)
        }
        if (this.pageType == 18) {
            IntelligentRoadTest.foodVM.showMessage(IntelligentRoadTest.foodVM.foodList[i], i)
        }
        if (this.pageType == 19) {
            IntelligentRoadTest.siteVM.showMessage(IntelligentRoadTest.siteVM.siteList[i], i)
        }
        if (this.pageType == 29) { //用户抱怨
            IntelligentRoadTest.userComplainVM.showMessage(IntelligentRoadTest.userComplainVM.userComplainList[i]);
        }
        setTimeout(function () {
            $('#mapClickResult').hide();
        }, 200);
        IntelligentRoadTest.mkIndex = i;
//    	  IntelligentRoadTest.openThreeLable();
    });
    IntelligentRoadTest.map.addOverlay(marker);
}
IntelligentRoadTest.getListDivId = function getListDivId(pageType) {
    var id = "showPoorListDiv";
    if (pageType == 1) {
        id = "showConcernAreaDataDiv";
    }
    if (pageType == 2) {
        id = "showAlarmInfoDiv";
    }
    if (pageType == 3 || pageType == 26 || pageType == 27 || pageType == 28) {
        id = "showSectorListDiv";
    }
    if (pageType == 5) {
        id = "showBoneAreaDataDiv";
    }
    if (pageType == 6) {
        id = "showMacSectorDiv";
    }
    if (pageType == 9) {
        id = "showUptownDiv";
    }
    if (pageType == 10) {
        id = "showCollegeDiv";
    }
    if (pageType == 11) {
        id = "showBusinessDiv";
    }
    if (pageType == 12) {
        id = "showSceneryDiv";
    }
    if (pageType == 16) {
        id = "showWarwolfDiv";
    }
    if (pageType == 17) {
        id = "showMarketDiv";
    }
    if (pageType == 18) {
        id = "showFoodDiv";
    }
    if (pageType == 19) {
        id = "showSiteDiv";
    }
    if (pageType == 29) {
        id = "showUserComplainList";
    }
    return id;
}
//鼠标移动到地图标注上 改变左边表格li图标
/**********************************
 * @funcname IntelligentRoadTest.changeImg
 * @funcdesc 移入水滴点时列表高亮显示
 * @param {string} pageType (input optional)
 列表类型
 * @param {string} i (input optional)
 * 要高亮第i条数据
 * @return {null}
 * @author 郑文彬
 * @create 20171219
 ***********************************/
IntelligentRoadTest.changeImg = function IntelligentRoadTest_changeImg(pageType, i) {
    var id = IntelligentRoadTest.getListDivId(pageType);
    for (var j = 0; j < 20; j++) {
        $("#" + id).find(".listUL > li").eq(j).find(".numSpan").css("background", "url(" + "../js/IntelligentRoadTest/images/bg_num.png" + ")");
        $("#" + id).find(".listUL > li").eq(j).find(".numSpan2").css("background", "url(" + "../js/IntelligentRoadTest/images/markeRq.png" + ")");
        $("#" + id).find(".listUL > li").eq(j).css("background", "#fff");
    }
    $("#" + id).find(".listUL > li").eq(i).find(".numSpan").css("background", "url(" + "../js/IntelligentRoadTest/images/maker2.png" + ")");
    $("#" + id).find(".listUL > li").eq(i).find(".numSpan2").css("background", "url(" + "../js/IntelligentRoadTest/images/maker2.png" + ")");
    $("#" + id).find(".listUL > li").eq(i).css("background", "#f4f4f4");
}

//根据最大最小经纬度获取缩放级别
function getZoom(maxLng, minLng, maxLat, minLat) {
    var points = [];
    points.push(new BMap.Point(maxLng, maxLat));
    points.push(new BMap.Point(maxLng, minLat));
    points.push(new BMap.Point(minLng, maxLat));
    points.push(new BMap.Point(minLng, minLat));
    var mapView = IntelligentRoadTest.map.getViewport(points);
    return mapView.zoom;

}


//-------------------戴岭南代码开始---------------------------
$(function () {


//场馆筛选
    $("#siteList .flexRow > .flexCol").not(".flexCol:first-child").click(function () {

        //定义对象维度
        if (IntelligentRoadTest.tempSiteFliterObj == null) {
            IntelligentRoadTest.tempSiteFliterObj = crossfilter([]);
            IntelligentRoadTest.tempSiteFliterObj.add(IntelligentRoadTest.siteResult);
        } else {
            IntelligentRoadTest.tempSiteFliterObj.remove();
            IntelligentRoadTest.tempSiteFliterObj.add(IntelligentRoadTest.siteResult);
        }

        if (IntelligentRoadTest.siteFilterCondtionArr == null) {
            IntelligentRoadTest.siteFilterCondtionArr = ["不限", "不限"];
        }
        // var siteListFilter = IntelligentRoadTest.tempSiteFliterObj.dimension(function(d) { return d });
        $(this).addClass("selected").siblings().removeClass("selected");

        var flexColText = $(this).parent().next().children();
        var allFlexRow = $(this).parent().parent().children();

        //判断点击的分类是否是全部
        var clickHtml = $(this).parent().children()[0].innerHTML;//全部分类
        var selectElement = $(this)[0].innerHTML;
        if (clickHtml == "全部分类") {

            $("#siteListSelectName").text("全部分类");
            $("#siteList").hide();
            IntelligentRoadTest.siteFilterCondtionArr = ["不限", "不限"];
            var dealCache = allFlexRow[1].children[1];//是否弱区
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[2].children[1];//是否派单
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            /*siteListFilter.filter(function(d){
                return d;
            });*/

        } else if (clickHtml == "是否含有弱区") {

            $("#siteListSelectName").text("是否含有弱区");
            $("#siteList").hide();
            IntelligentRoadTest.siteFilterCondtionArr[0] = selectElement;
        } else if (clickHtml == "是否派单") {

            $("#siteListSelectName").text("是否派单");
            $("#siteList").hide();
            IntelligentRoadTest.siteFilterCondtionArr[1] = selectElement;
        }

        //console.log(rfgFilter.top(tempFliterObj.size()));
        var siteListFilter = IntelligentRoadTest.senseFilter(IntelligentRoadTest.siteResult, IntelligentRoadTest.siteFilterCondtionArr);
        var tempData = siteListFilter.top(IntelligentRoadTest.tempSiteFliterObj.size());//过滤后的结果集
        IntelligentRoadTest.tempSiteFliterObj.remove();//移除
        IntelligentRoadTest.tempSiteFliterObj = crossfilter([]);
        siteListFilter = IntelligentRoadTest.tempSiteFliterObj.dimension(function (d) {
            return d
        });
        IntelligentRoadTest.tempSiteFliterObj.add(tempData);

        //过滤后回显数据
        IntelligentRoadTest.filterSiteResult = tempData;
        IntelligentRoadTest.siteCurrentResult = IntelligentRoadTest.filterSiteResult;
        IntelligentRoadTest.isFilterSite = true;

        $("#siteSort ul li.selected").trigger("click");


    });


//美食筛选
    $("#foodList .flexRow > .flexCol").not(".flexCol:first-child").click(function () {

        //定义对象维度
        if (IntelligentRoadTest.tempFoodFliterObj == null) {
            IntelligentRoadTest.tempFoodFliterObj = crossfilter([]);
            IntelligentRoadTest.tempFoodFliterObj.add(IntelligentRoadTest.foodResult);
        } else {
            IntelligentRoadTest.tempFoodFliterObj.remove();
            IntelligentRoadTest.tempFoodFliterObj.add(IntelligentRoadTest.foodResult);
        }

        if (IntelligentRoadTest.foodFilterConditionArr == null) {
            IntelligentRoadTest.foodFilterConditionArr = ["不限", "不限"];
        }
        // var foodListFilter = IntelligentRoadTest.tempFoodFliterObj.dimension(function(d) { return d });
        $(this).addClass("selected").siblings().removeClass("selected");

        var flexColText = $(this).parent().next().children();
        var allFlexRow = $(this).parent().parent().children();

        //判断点击的分类是否是全部
        var clickHtml = $(this).parent().children()[0].innerHTML;//全部分类
        var selectElement = $(this)[0].innerHTML;
        if (clickHtml == "全部分类") {

            $("#foodSelectName").text("全部分类");
            $("#foodList").hide();
            IntelligentRoadTest.foodFilterConditionArr = ["不限", "不限"];
            var dealCache = allFlexRow[1].children[1];//是否弱区
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[2].children[1];//是否派单
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            /*foodListFilter.filter(function(d){
                return d;
            });*/

        } else if (clickHtml == "是否含有弱区") {

            $("#foodSelectName").text("是否含有弱区");
            $("#foodList").hide();
            IntelligentRoadTest.foodFilterConditionArr[0] = selectElement;
        } else if (clickHtml == "是否派单") {

            $("#foodSelectName").text("是否派单");
            $("#foodList").hide();
            IntelligentRoadTest.foodFilterConditionArr[1] = selectElement;
        }

        //console.log(rfgFilter.top(tempFliterObj.size()));
        var foodListFilter = IntelligentRoadTest.senseFilter(IntelligentRoadTest.foodResult, IntelligentRoadTest.foodFilterConditionArr);
        var tempData = foodListFilter.top(IntelligentRoadTest.tempFoodFliterObj.size());//过滤后的结果集
        IntelligentRoadTest.tempFoodFliterObj.remove();//移除
        IntelligentRoadTest.tempFoodFliterObj = crossfilter([]);
        foodListFilter = IntelligentRoadTest.tempFoodFliterObj.dimension(function (d) {
            return d
        });
        IntelligentRoadTest.tempFoodFliterObj.add(tempData);

        //过滤后回显数据
        IntelligentRoadTest.filterFoodResult = tempData;
        IntelligentRoadTest.foodCurrentResult = IntelligentRoadTest.filterFoodResult;
        IntelligentRoadTest.isFilterfood = true;

        $("#foodSort ul li.selected").trigger("click");


    });


//农贸筛选
    $("#marketList .flexRow > .flexCol").not(".flexCol:first-child").click(function () {

        //定义对象维度
        if (IntelligentRoadTest.tempMarketFliterObj == null) {
            IntelligentRoadTest.tempMarketFliterObj = crossfilter([]);
            IntelligentRoadTest.tempMarketFliterObj.add(IntelligentRoadTest.marketResult);
        } else {
            IntelligentRoadTest.tempMarketFliterObj.remove();
            IntelligentRoadTest.tempMarketFliterObj.add(IntelligentRoadTest.marketResult);
        }

        if (IntelligentRoadTest.marketFilterConditionArr == null) {
            IntelligentRoadTest.marketFilterConditionArr = ["不限", "不限"];
        }

        // var marketListFilter = IntelligentRoadTest.tempMarketFliterObj.dimension(function(d) { return d });
        $(this).addClass("selected").siblings().removeClass("selected");

        var flexColText = $(this).parent().next().children();
        var allFlexRow = $(this).parent().parent().children();

        //判断点击的分类是否是全部
        var clickHtml = $(this).parent().children()[0].innerHTML;//全部分类
        var selectElement = $(this)[0].innerHTML;
        if (clickHtml == "全部分类") {

            $("#marketSelectName").text("全部分类");
            $("#marketList").hide();
            IntelligentRoadTest.marketFilterConditionArr = ["不限", "不限"];
            var dealCache = allFlexRow[1].children[1];//是否弱区
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[2].children[1];//是否派单
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            /*marketListFilter.filter(function(d){
                return d;
            });*/

        } else if (clickHtml == "是否含有弱区") {

            $("#marketSelectName").text("是否含有弱区");
            $("#marketList").hide();
            IntelligentRoadTest.marketFilterConditionArr[0] = selectElement;
        } else if (clickHtml == "是否派单") {

            $("#marketSelectName").text("是否派单");
            $("#marketList").hide();
            IntelligentRoadTest.marketFilterConditionArr[1] = selectElement;
        }

        //console.log(rfgFilter.top(tempFliterObj.size()));
        var marketListFilter = IntelligentRoadTest.senseFilter(IntelligentRoadTest.marketResult, IntelligentRoadTest.marketFilterConditionArr);
        var tempData = marketListFilter.top(IntelligentRoadTest.tempMarketFliterObj.size());//过滤后的结果集
        IntelligentRoadTest.tempMarketFliterObj.remove();//移除
        IntelligentRoadTest.tempMarketFliterObj = crossfilter([]);
        marketListFilter = IntelligentRoadTest.tempMarketFliterObj.dimension(function (d) {
            return d
        });
        IntelligentRoadTest.tempMarketFliterObj.add(tempData);

        //过滤后回显数据
        IntelligentRoadTest.filterMarketResult = tempData;
        IntelligentRoadTest.marketCurrentResult = IntelligentRoadTest.filtermarketResult;
        IntelligentRoadTest.isFilterMarket = true;

        $("#marketSort ul li.selected").trigger("click");


    });


//战狼筛选
    $("#warwolfList .flexRow > .flexCol").not(".flexCol:first-child").click(function () {

        //定义对象维度
        if (IntelligentRoadTest.tempWarwolfFliterObj == null) {
            IntelligentRoadTest.tempWarwolfFliterObj = crossfilter([]);
            IntelligentRoadTest.tempWarwolfFliterObj.add(IntelligentRoadTest.warwolfResult);
        } else {
            IntelligentRoadTest.tempWarwolfFliterObj.remove();
            IntelligentRoadTest.tempWarwolfFliterObj.add(IntelligentRoadTest.warwolfResult);
        }

        if (IntelligentRoadTest.warwolfFilterConditionArr == null) {
            IntelligentRoadTest.warwolfFilterConditionArr = ["不限", "不限"];
        }
        // var warwolfListFilter = IntelligentRoadTest.tempWarwolfFliterObj.dimension(function(d) { return d });
        $(this).addClass("selected").siblings().removeClass("selected");

        var flexColText = $(this).parent().next().children();
        var allFlexRow = $(this).parent().parent().children();

        //判断点击的分类是否是全部
        var clickHtml = $(this).parent().children()[0].innerHTML;//全部分类
        var selectElement = $(this)[0].innerHTML;
        if (clickHtml == "全部分类") {

            $("#warwolfSelectName").text("全部分类");
            $("#warwolfList").hide();
            IntelligentRoadTest.warwolfFilterConditionArr = ["不限", "不限"];
            var dealCache = allFlexRow[1].children[1];//是否弱区
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[2].children[1];//是否派单
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            /*warwolfListFilter.filter(function(d){
                return d;
            });*/

        } else if (clickHtml == "是否含有弱区") {

            $("#warwolfSelectName").text("是否含有弱区");
            $("#warwolfList").hide();
            IntelligentRoadTest.warwolfFilterConditionArr[0] = selectElement;
        } else if (clickHtml == "是否派单") {

            $("#warwolfSelectName").text("是否派单");
            $("#warwolfList").hide();
            IntelligentRoadTest.warwolfFilterConditionArr[1] = selectElement;
        }

        //console.log(rfgFilter.top(tempFliterObj.size()));
        var warwolfListFilter = IntelligentRoadTest.senseFilter(IntelligentRoadTest.warwolfResult, IntelligentRoadTest.warwolfFilterConditionArr);
        var tempData = warwolfListFilter.top(IntelligentRoadTest.tempWarwolfFliterObj.size());//过滤后的结果集
        IntelligentRoadTest.tempWarwolfFliterObj.remove();//移除
        IntelligentRoadTest.tempWarwolfFliterObj = crossfilter([]);
        warwolfListFilter = IntelligentRoadTest.tempWarwolfFliterObj.dimension(function (d) {
            return d
        });
        IntelligentRoadTest.tempWarwolfFliterObj.add(tempData);

        //过滤后回显数据
        IntelligentRoadTest.filterWarwolfResult = tempData;
        IntelligentRoadTest.warwolfCurrentResult = IntelligentRoadTest.filterWarwolfResult;
        IntelligentRoadTest.isFilterWarwolf = true;

        $("#warwolfSort ul li.selected").trigger("click");


    });


//美景筛选
    $("#sceneryList .flexRow > .flexCol").not(".flexCol:first-child").click(function () {

        //定义对象维度
        if (IntelligentRoadTest.tempSceneryFliterObj == null) {
            IntelligentRoadTest.tempSceneryFliterObj = crossfilter([]);
            IntelligentRoadTest.tempSceneryFliterObj.add(IntelligentRoadTest.sceneryResult);
        } else {
            IntelligentRoadTest.tempSceneryFliterObj.remove();
            IntelligentRoadTest.tempSceneryFliterObj.add(IntelligentRoadTest.sceneryResult);
        }

        if (IntelligentRoadTest.sceneryFilterConditionArr == null) {
            IntelligentRoadTest.sceneryFilterConditionArr = ["不限", "不限"];
        }
        // var sceneryListFilter = IntelligentRoadTest.tempSceneryFliterObj.dimension(function(d) { return d });
        $(this).addClass("selected").siblings().removeClass("selected");

        var flexColText = $(this).parent().next().children();
        var allFlexRow = $(this).parent().parent().children();

        //判断点击的分类是否是全部
        var clickHtml = $(this).parent().children()[0].innerHTML;//全部分类
        var selectElement = $(this)[0].innerHTML;
        if (clickHtml == "全部分类") {

            $("#sceneryListSelectName").text("全部分类");
            $("#sceneryList").hide();
            IntelligentRoadTest.sceneryFilterConditionArr = ["不限", "不限"];
            var dealCache = allFlexRow[1].children[1];//是否弱区
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[2].children[1];//是否派单
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            /*sceneryListFilter.filter(function(d){
                return d;
            });*/

        } else if (clickHtml == "是否含有弱区") {

            $("#sceneryListSelectName").text("是否含有弱区");
            $("#sceneryList").hide();
            IntelligentRoadTest.sceneryFilterConditionArr[0] = selectElement;
        } else if (clickHtml == "是否派单") {

            $("#sceneryListSelectName").text("是否派单");
            $("#sceneryList").hide();
            IntelligentRoadTest.sceneryFilterConditionArr[1] = selectElement;
        }

        //console.log(rfgFilter.top(tempFliterObj.size()));
        var sceneryListFilter = IntelligentRoadTest.senseFilter(IntelligentRoadTest.sceneryResult, IntelligentRoadTest.sceneryFilterConditionArr);
        var tempData = sceneryListFilter.top(IntelligentRoadTest.tempSceneryFliterObj.size());//过滤后的结果集
        IntelligentRoadTest.tempSceneryFliterObj.remove();//移除
        IntelligentRoadTest.tempSceneryFliterObj = crossfilter([]);
        sceneryListFilter = IntelligentRoadTest.tempSceneryFliterObj.dimension(function (d) {
            return d
        });
        IntelligentRoadTest.tempSceneryFliterObj.add(tempData);

        //过滤后回显数据
        IntelligentRoadTest.filterSceneryResult = tempData;
        IntelligentRoadTest.sceneryCurrentResult = IntelligentRoadTest.filterSceneryResult;
        IntelligentRoadTest.isFilterScenery = true;

        $("#scenerySort ul li.selected").trigger("click");


    });


//商务区筛选
    $("#businessList .flexRow > .flexCol").not(".flexCol:first-child").click(function () {



        //定义对象维度
        if (IntelligentRoadTest.tempBusinessFliterObj == null) {
            IntelligentRoadTest.tempBusinessFliterObj = crossfilter([]);
            IntelligentRoadTest.tempBusinessFliterObj.add(IntelligentRoadTest.businessResult);
        } else {
            IntelligentRoadTest.tempBusinessFliterObj.remove();
            IntelligentRoadTest.tempBusinessFliterObj.add(IntelligentRoadTest.businessResult);
        }

        if (IntelligentRoadTest.businessFilterConditionArr == null) {
            IntelligentRoadTest.businessFilterConditionArr = ["不限", "不限"];
        }
        // var businessListFilter = IntelligentRoadTest.tempBusinessFliterObj.dimension(function(d) { return d });
        $(this).addClass("selected").siblings().removeClass("selected");

        var flexColText = $(this).parent().next().children();
        var allFlexRow = $(this).parent().parent().children();

        //判断点击的分类是否是全部
        var clickHtml = $(this).parent().children()[0].innerHTML;//全部分类
        var selectElement = $(this)[0].innerHTML;
        if (clickHtml == "全部分类") {

            $("#businessListSelectName").text("全部分类");
            $("#businessList").hide();
            IntelligentRoadTest.businessFilterConditionArr = ["不限", "不限"];
            var dealCache = allFlexRow[1].children[1];//是否弱区
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[2].children[1];//是否派单
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            /*businessListFilter.filter(function(d){
                return d;
            });*/

        } else if (clickHtml == "是否含有弱区") {

            $("#businessListSelectName").text("是否含有弱区");
            $("#businessList").hide();
            IntelligentRoadTest.businessFilterConditionArr[0] = selectElement;

        } else if (clickHtml == "是否派单") {

            $("#businessListSelectName").text("是否派单");
            $("#businessList").hide();
            IntelligentRoadTest.businessFilterConditionArr[1] = selectElement;

        }

        //console.log(rfgFilter.top(tempFliterObj.size()));
        var businessListFilter = IntelligentRoadTest.senseFilter(IntelligentRoadTest.businessResult, IntelligentRoadTest.businessFilterConditionArr);
        var tempData = businessListFilter.top(IntelligentRoadTest.tempBusinessFliterObj.size());//过滤后的结果集
        IntelligentRoadTest.tempBusinessFliterObj.remove();//移除
        IntelligentRoadTest.tempBusinessFliterObj = crossfilter([]);
        businessListFilter = IntelligentRoadTest.tempBusinessFliterObj.dimension(function (d) {
            return d
        });
        IntelligentRoadTest.tempBusinessFliterObj.add(tempData);

        //过滤后回显数据
        IntelligentRoadTest.filterBusinessResult = tempData;
        IntelligentRoadTest.businessCurrentResult = IntelligentRoadTest.filterBusinessResult;
        IntelligentRoadTest.isFilterBusiness = true;

        $("#businessSort ul li.selected").trigger("click");


    });


    //住宅区筛选
    $("#uptownList .flexRow > .flexCol").not(".flexCol:first-child").click(function () {



        //定义对象维度
        if (IntelligentRoadTest.tempUptownFliterObj == null) {
            IntelligentRoadTest.tempUptownFliterObj = crossfilter([]);
            IntelligentRoadTest.tempUptownFliterObj.add(IntelligentRoadTest.uptownResult);
        } else {
            IntelligentRoadTest.tempUptownFliterObj.remove();
            IntelligentRoadTest.tempUptownFliterObj.add(IntelligentRoadTest.uptownResult);
        }

        if (IntelligentRoadTest.uptownFilterConditionArr == null) {
            IntelligentRoadTest.uptownFilterConditionArr = ["不限", "不限"];
        }
        // var uptownListFilter = IntelligentRoadTest.tempUptownFliterObj.dimension(function(d) { return d });
        $(this).addClass("selected").siblings().removeClass("selected");

        var flexColText = $(this).parent().next().children();
        var allFlexRow = $(this).parent().parent().children();

        //判断点击的分类是否是全部
        var clickHtml = $(this).parent().children()[0].innerHTML;//全部分类
        var selectElement = $(this)[0].innerHTML;
        if (clickHtml == "全部分类") {

            $("#uptownSelectName").text("全部分类");
            $("#uptownList").hide();
            IntelligentRoadTest.uptownFilterConditionArr = ["不限", "不限"];
            var dealCache = allFlexRow[1].children[1];//是否弱区
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[2].children[1];//是否派单
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            /*uptownListFilter.filter(function(d){
                return d;
            });*/

        } else if (clickHtml == "是否含有弱区") {

            $("#uptownSelectName").text("是否含有弱区");
            $("#uptownList").hide();
            IntelligentRoadTest.uptownFilterConditionArr[0] = selectElement;
        } else if (clickHtml == "是否派单") {

            $("#uptownSelectName").text("是否派单");
            $("#uptownList").hide();
            IntelligentRoadTest.uptownFilterConditionArr[1] = selectElement;
        }

        //console.log(rfgFilter.top(tempFliterObj.size()));
        var uptownListFilter = IntelligentRoadTest.senseFilter(IntelligentRoadTest.uptownResult, IntelligentRoadTest.uptownFilterConditionArr);
        var tempData = uptownListFilter.top(IntelligentRoadTest.tempUptownFliterObj.size());//过滤后的结果集
        IntelligentRoadTest.tempUptownFliterObj.remove();//移除
        IntelligentRoadTest.tempUptownFliterObj = crossfilter([]);
        uptownListFilter = IntelligentRoadTest.tempUptownFliterObj.dimension(function (d) {
            return d
        });
        IntelligentRoadTest.tempUptownFliterObj.add(tempData);

        //过滤后回显数据
        IntelligentRoadTest.filterUptownResult = tempData;
        IntelligentRoadTest.uptownCurrentResult = IntelligentRoadTest.filterUptownResult;
        IntelligentRoadTest.isFilterUptown = true;

        $("#uptownSort ul li.selected").trigger("click");


    });


//高校筛选
    $("#collegeList .flexRow > .flexCol").not(".flexCol:first-child").click(function () {

        //IntelligentRoadTest.resultFilterByTypeAndId(IntelligentRoadTest.collegeResult,1 ,10071);
        //定义对象维度
        if (IntelligentRoadTest.tempCollegeFliterObj == null) {
            IntelligentRoadTest.tempCollegeFliterObj = crossfilter([]);
            IntelligentRoadTest.tempCollegeFliterObj.add(IntelligentRoadTest.collegeResult);
        } else {
            IntelligentRoadTest.tempCollegeFliterObj.remove();
            IntelligentRoadTest.tempCollegeFliterObj.add(IntelligentRoadTest.collegeResult);
        }

        if (IntelligentRoadTest.collegeFilterConditionArr == null) {
            IntelligentRoadTest.collegeFilterConditionArr = ["不限", "不限"];
        }
        // var collegeListFilter = IntelligentRoadTest.tempCollegeFliterObj.dimension(function(d) { return d });
        $(this).addClass("selected").siblings().removeClass("selected");

        var flexColText = $(this).parent().next().children();
        var allFlexRow = $(this).parent().parent().children();

        //判断点击的分类是否是全部
        var clickHtml = $(this).parent().children()[0].innerHTML;//全部分类
        var selectElement = $(this)[0].innerHTML;
        if (clickHtml == "全部分类") {

            $("#collegeListSelectName").text("全部分类");
            $("#collegeList").hide();
            IntelligentRoadTest.collegeFilterConditionArr = ["不限", "不限"];
            var dealCache = allFlexRow[1].children[1];//是否弱区
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[2].children[1];//是否派单
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            /*collegeListFilter.filter(function(d){
                return d;
            });*/

        } else if (clickHtml == "是否含有弱区") {

            $("#collegeListSelectName").text("是否含有弱区");
            $("#collegeList").hide();
            IntelligentRoadTest.collegeFilterConditionArr[0] = selectElement;

        } else if (clickHtml == "是否派单") {

            $("#collegeListSelectName").text("是否派单");
            $("#collegeList").hide();

            IntelligentRoadTest.collegeFilterConditionArr[1] = selectElement;
        }

        //console.log(rfgFilter.top(tempFliterObj.size()));
        var collegeListFilter = IntelligentRoadTest.senseFilter(IntelligentRoadTest.collegeResult, IntelligentRoadTest.collegeFilterConditionArr);
        var tempData = collegeListFilter.top(IntelligentRoadTest.tempCollegeFliterObj.size());//过滤后的结果集
        IntelligentRoadTest.tempCollegeFliterObj.remove();//移除
        IntelligentRoadTest.tempCollegeFliterObj = crossfilter([]);
        collegeListFilter = IntelligentRoadTest.tempCollegeFliterObj.dimension(function (d) {
            return d
        });
        IntelligentRoadTest.tempCollegeFliterObj.add(tempData);

        //过滤后回显数据
        IntelligentRoadTest.filterCollegeResult = tempData;
        IntelligentRoadTest.CollegeCurrentResult = IntelligentRoadTest.filterCollegeResult;
        IntelligentRoadTest.isFilterCollege = true;
        $("#collegeSort ul li.selected").trigger("click");
    });

//新增场景筛选
    $("#senseList .flexRow > .flexCol").not(".flexCol:first-child").click(function () {

        //定义对象维度
        if (IntelligentRoadTest.tempSenseFliterObj == null) {
            IntelligentRoadTest.tempSenseFliterObj = crossfilter([]);
            IntelligentRoadTest.tempSenseFliterObj.add(IntelligentRoadTest.senseResult);
        } else {
            IntelligentRoadTest.tempSenseFliterObj.remove();
            IntelligentRoadTest.tempSenseFliterObj.add(IntelligentRoadTest.senseResult);
        }

        if (IntelligentRoadTest.senseFilterConditionArr == null) {
            IntelligentRoadTest.senseFilterConditionArr = ["不限", "不限"];
        }
        // var SenseListFilter = IntelligentRoadTest.tempSenseFliterObj.dimension(function(d) { return d });
        $(this).addClass("selected").siblings().removeClass("selected");

        var flexColText = $(this).parent().next().children();
        var allFlexRow = $(this).parent().parent().children();

        //判断点击的分类是否是全部
        var clickHtml = $(this).parent().children()[0].innerHTML;//全部分类
        var selectElement = $(this)[0].innerHTML;
        if (clickHtml == "全部分类") {
            $("#senseListSelectName").text("全部分类");
            $("#senseList").hide();
            IntelligentRoadTest.senseFilterConditionArr = ["不限", "不限"];
            var dealCache = allFlexRow[1].children[1];//是否弱区
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[2].children[1];//是否派单
            $(dealCache).addClass("selected").siblings().removeClass("selected");
        } else if (clickHtml == "是否含有弱区") {
            $("#senseListSelectName").text("是否含有弱区");
            $("#senseList").hide();
            IntelligentRoadTest.senseFilterConditionArr[0] = selectElement;
        } else if (clickHtml == "是否派单") {
            $("#senseListSelectName").text("是否派单");
            $("#senseList").hide();
            IntelligentRoadTest.senseFilterConditionArr[1] = selectElement;
        }

        var senseListFilter = IntelligentRoadTest.senseFilter(IntelligentRoadTest.senseResult, IntelligentRoadTest.senseFilterConditionArr);
        var tempData = senseListFilter.top(IntelligentRoadTest.tempSenseFliterObj.size());//过滤后的结果集
        IntelligentRoadTest.tempSenseFliterObj.remove();//移除
        IntelligentRoadTest.tempSenseFliterObj = crossfilter([]);
        senseListFilter = IntelligentRoadTest.tempSenseFliterObj.dimension(function (d) {
            return d
        });
        IntelligentRoadTest.tempSenseFliterObj.add(tempData);

        //过滤后回显数据
        IntelligentRoadTest.filterSenseResult = tempData;
        IntelligentRoadTest.senseCurrentResult = IntelligentRoadTest.filterSenseResult;
        IntelligentRoadTest.isFilterSense = true;
        $("#senseSort ul li.selected").trigger("click");
    });

//Dt筛选
    $("#dtList .flexRow > .flexCol").not(".flexCol:first-child").click(function () {



        //定义对象维度
        if (IntelligentRoadTest.tempDtFliterObj == null) {
            IntelligentRoadTest.tempDtFliterObj = crossfilter([]);
            // IntelligentRoadTest.tempDtFliterObj.add(IntelligentRoadTest.result);
        } else {
            IntelligentRoadTest.tempDtFliterObj.remove();
            // IntelligentRoadTest.tempDtFliterObj.add(IntelligentRoadTest.result);
        }

        if (IntelligentRoadTest.isSeachDT == false) {
            IntelligentRoadTest.tempDtFliterObj.add(IntelligentRoadTest.result);
        } else {
            IntelligentRoadTest.tempDtFliterObj.add(IntelligentRoadTest.seachDTResult);
        }

        if (IntelligentRoadTest.dtFilterCondtionArr == null) {
            IntelligentRoadTest.dtFilterCondtionArr = ["不限", "不限", "不限", "不限"];
        }

        // var dtListFilter = IntelligentRoadTest.tempDtFliterObj.dimension(function(d) { return d });
        $(this).addClass("selected").siblings().removeClass("selected");

        var flexColText = $(this).parent().next().children();
        var allFlexRow = $(this).parent().parent().children();

        //判断点击的分类是否是全部
        var clickHtml = $(this).parent().children()[0].innerHTML;//全部分类
        var selectElement = $(this)[0].innerHTML;
        if (clickHtml == "全部分类") {

            $("#dtListSelectName").text("全部分类");
            $("#dtList").hide();
            IntelligentRoadTest.dtFilterCondtionArr = ["不限", "不限", "不限", "不限"];
            var dealCache = allFlexRow[1].children[1];//路测时间
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[2].children[1];//上传时间
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[3].children[1];//共享状态
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            /*dtListFilter.filter(function(d){
                return d;
            });*/

        } else if (clickHtml == "文件时间") {

            $("#dtListSelectName").text("文件时间");
            $("#dtList").hide();
            IntelligentRoadTest.dtFilterCondtionArr[0] = selectElement;
        } else if (clickHtml == "上传时间") {
            $("#dtListSelectName").text("上传时间");
            $("#dtList").hide();
            IntelligentRoadTest.dtFilterCondtionArr[1] = selectElement;
        } else if (clickHtml == "共享状态") {
            $("#dtListSelectName").text("共享状态");
            $("#dtList").hide();
            IntelligentRoadTest.dtFilterCondtionArr[2] = selectElement;
        }

        //console.log(rfgFilter.top(tempFliterObj.size()));
        var dtListFilter;
        if (IntelligentRoadTest.isSeachDT == false) {
            dtListFilter = IntelligentRoadTest.DTFilter(IntelligentRoadTest.result, IntelligentRoadTest.dtFilterCondtionArr);
        } else {
            dtListFilter = IntelligentRoadTest.DTFilter(IntelligentRoadTest.seachDTResult, IntelligentRoadTest.dtFilterCondtionArr);
        }
        var tempData = dtListFilter.top(IntelligentRoadTest.tempDtFliterObj.size());//过滤后的结果集
        IntelligentRoadTest.tempDtFliterObj.remove();//移除
        IntelligentRoadTest.tempDtFliterObj = crossfilter([]);
        dtListFilter = IntelligentRoadTest.tempDtFliterObj.dimension(function (d) {
            return d
        });
        IntelligentRoadTest.tempDtFliterObj.add(tempData);
        //过滤后回显数据
        IntelligentRoadTest.filterDtResult = tempData;
        IntelligentRoadTest.currentResult = IntelligentRoadTest.filterDtResult;
        IntelligentRoadTest.isFilterDt = true;
        $("#dtSort ul li.selected").trigger("click");
    });

//扇区筛选
    $("#sectorList .flexRow > .flexCol").not(".flexCol:first-child").click(function () {

        //定义对象维度
        if (IntelligentRoadTest.tempSectorFliterObj == null) {
            IntelligentRoadTest.tempSectorFliterObj = crossfilter([]);
            IntelligentRoadTest.tempSectorFliterObj.add(IntelligentRoadTest.sectorResult);
        } else {
            IntelligentRoadTest.tempSectorFliterObj.remove();
            IntelligentRoadTest.tempSectorFliterObj.add(IntelligentRoadTest.sectorResult);
        }

        var mr_count = $("#mrCount").val();
        if (mr_count == null || mr_count.toString().trim == "") {
            mr_count = 1000;
        } else {
            if (isNaN(parseInt(mr_count))) { //输入的数据有误
                $("#mrCount").val(1000);
                mr_count = 1000;
            } else {
                mr_count = parseInt(mr_count);
            }
        }
        if (IntelligentRoadTest.sectorFilterConditionArr == null) { //扇区的筛选条件数组
            IntelligentRoadTest.sectorFilterConditionArr = ["不限", "不限", "不限", "不限", "不限", "不限", mr_count];
        }
        // var sectorListFilter = IntelligentRoadTest.tempSectorFliterObj.dimension(function(d) { return d });
        $(this).addClass("selected").siblings().removeClass("selected");

        var flexColText = $(this).parent().next().children();
        var allFlexRow = $(this).parent().parent().children();

        //判断点击的分类是否是全部
        var clickHtml = $(this).parent().children()[0].innerHTML;//全部分类
        var selectElement = $(this)[0].innerHTML;
        if (clickHtml == "全部分类") {
            $("#sectorListSelectName").text("全部分类");
            $("#sectorList").hide();
            IntelligentRoadTest.sectorFilterConditionArr = ["不限", "不限", "不限", "不限", "不限", "不限", 0];
            var dealCache = allFlexRow[1].children[1];//区域类型
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[2].children[1];//扇区状态
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[3].children[1];//设备厂商
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[4].children[1];//扇区状态
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[5].children[1];//使用频段
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[6].children[1];//是否新增 这个只有专题扇区才有显示
            $(dealCache).addClass("selected").siblings().removeClass("selected");
        } else if (clickHtml == "区域类型") {
            $("#sectorListSelectName").text("区域类型");
            $("#sectorList").hide();
            IntelligentRoadTest.sectorFilterConditionArr[0] = selectElement;
        } else if (clickHtml == "扇区状态") {
            $("#sectorListSelectName").text("扇区状态");
            $("#sectorList").hide();
            IntelligentRoadTest.sectorFilterConditionArr[1] = selectElement;
        } else if (clickHtml == "设备厂商") {
            $("#sectorListSelectName").text("设备厂商");
            $("#sectorList").hide();
            IntelligentRoadTest.sectorFilterConditionArr[2] = selectElement;
        } else if (clickHtml == "扇区类型") {
            $("#sectorListSelectName").text("扇区类型");
            $("#sectorList").hide();
            IntelligentRoadTest.sectorFilterConditionArr[3] = selectElement;
        } else if (clickHtml == "使用频段") {
            $("#sectorListSelectName").text("使用频段");
            $("#sectorList").hide();
            IntelligentRoadTest.sectorFilterConditionArr[4] = selectElement;
        } else if (clickHtml == "是否新增") {
            $("#sectorListSelectName").text("是否新增");
            $("#sectorList").hide();
            IntelligentRoadTest.sectorFilterConditionArr[5] = selectElement;
        }
        IntelligentRoadTest.sectorFilterConditionArr[6] = mr_count;
        //执行过滤
        var sectorListFilter = IntelligentRoadTest.sectorFilter(IntelligentRoadTest.sectorResult, IntelligentRoadTest.sectorFilterConditionArr);
        var tempData = sectorListFilter.top(IntelligentRoadTest.tempSectorFliterObj.size());//过滤后的结果集
        IntelligentRoadTest.tempSectorFliterObj.remove();//移除
        IntelligentRoadTest.tempSectorFliterObj = crossfilter([]);
        sectorListFilter = IntelligentRoadTest.tempSectorFliterObj.dimension(function (d) {
            return d
        });
        IntelligentRoadTest.tempSectorFliterObj.add(tempData);

        //过滤后回显数据
        IntelligentRoadTest.filterSectorResult = tempData;
        IntelligentRoadTest.sectorCurrentResult = IntelligentRoadTest.filterSectorResult;
        IntelligentRoadTest.isFilterSector = true;

        $("#sectorSort ul li.selected").trigger("click");


    });


//关注区域筛选
    $("#concernAreaList .flexRow > .flexCol").not(".flexCol:first-child").click(function () {

        //定义对象维度
        if (IntelligentRoadTest.tempConcernFliterObj == null) {
            IntelligentRoadTest.tempConcernFliterObj = crossfilter([]);
            IntelligentRoadTest.tempConcernFliterObj.add(IntelligentRoadTest.concernAreaResult);
        } else {
            IntelligentRoadTest.tempConcernFliterObj.remove();
            IntelligentRoadTest.tempConcernFliterObj.add(IntelligentRoadTest.concernAreaResult);
        }

        if (IntelligentRoadTest.concernAreaFilterConditionArr == null) { //关注区域的筛选条件数组
            IntelligentRoadTest.concernAreaFilterConditionArr = ["不限", "不限", "不限"];
        }
        // var concernAreaListFilter = IntelligentRoadTest.tempConcernFliterObj.dimension(function(d) { return d });
        $(this).addClass("selected").siblings().removeClass("selected");

        var flexColText = $(this).parent().next().children();
        var allFlexRow = $(this).parent().parent().children();

        //判断点击的分类是否是全部
        var clickHtml = $(this).parent().children()[0].innerHTML;//全部分类
        var selectElement = $(this)[0].innerHTML;
        if (clickHtml == "全部分类") {

            $("#concernAreaListSelectName").text("全部分类");
            $("#concernAreaList").hide();
            IntelligentRoadTest.concernAreaFilterConditionArr = ["不限", "不限", "不限"];
            var dealCache = allFlexRow[1].children[1];//栅格数量
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[2].children[1];//区域类型
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[3].children[1];//共享状态
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            /*concernAreaListFilter.filter(function(d){
                return d;
            });*/
        } else if (clickHtml == "栅格数量") {
            $("#concernAreaListSelectName").text("栅格数量");
            $("#concernAreaList").hide();
            IntelligentRoadTest.concernAreaFilterConditionArr[0] = selectElement;
        } else if (clickHtml == "区域类型") {
            $("#concernAreaListSelectName").text("区域类型");
            $("#concernAreaList").hide();
            IntelligentRoadTest.concernAreaFilterConditionArr[1] = selectElement;
        } else if (clickHtml == "共享状态") {
            $("#concernAreaListSelectName").text("共享状态");
            $("#concernAreaList").hide();
            IntelligentRoadTest.concernAreaFilterConditionArr[2] = selectElement;
        }

        //}
        //console.log(rfgFilter.top(tempFliterObj.size()));
        var concernAreaListFilter = IntelligentRoadTest.concernAreaFilter(IntelligentRoadTest.concernAreaResult, IntelligentRoadTest.concernAreaFilterConditionArr);
        var tempData = concernAreaListFilter.top(IntelligentRoadTest.tempConcernFliterObj.size());//过滤后的结果集
        IntelligentRoadTest.tempConcernFliterObj.remove();//移除
        IntelligentRoadTest.tempConcernFliterObj = crossfilter([]);
        concernAreaListFilter = IntelligentRoadTest.tempConcernFliterObj.dimension(function (d) {
            return d
        });
        IntelligentRoadTest.tempConcernFliterObj.add(tempData);
        //过滤后回显数据
        IntelligentRoadTest.filterConcernAreaResult = tempData;
        IntelligentRoadTest.concernAreaCurrentResult = IntelligentRoadTest.filterConcernArenResult;
        IntelligentRoadTest.isFilterConcernArea = true;
        $("#concernSort ul li.selected").trigger("click");
    });

//宏站筛选


    $("#macSectorList .flexRow > .flexCol").not(".flexCol:first-child").click(function () {

        //定义对象维度
        if (IntelligentRoadTest.tempMacSectorFliterObj == null) {
            IntelligentRoadTest.tempMacSectorFliterObj = crossfilter([]);

        } else {
            IntelligentRoadTest.tempMacSectorFliterObj.remove();

        }
        //判断是否经过搜索筛选
        if (IntelligentRoadTest.isSeachMacSector == false) {
            IntelligentRoadTest.tempMacSectorFliterObj.add(IntelligentRoadTest.macSectorResult);
        } else {
            if (IntelligentRoadTest.isMacSectorChangeDay == true) {
                IntelligentRoadTest.isMacSectorChangeDay = false;
                IntelligentRoadTest.getMacSectorMessageByCondition();
                return;
            }
            IntelligentRoadTest.tempMacSectorFliterObj.add(IntelligentRoadTest.seachMacSectorResult);
        }

        var macSectorLisFilter = IntelligentRoadTest.tempMacSectorFliterObj.dimension(function (d) {
            return d
        });
        $(this).addClass("selected").siblings().removeClass("selected");

        var flexColText = $(this).parent().next().children();
        var allFlexRow = $(this).parent().parent().children();

        //判断点击的分类是否是全部
        var clickHtml = $(this).parent().children()[0].innerHTML;//全部分类
        var selectElement = $(this)[0].innerHTML;
        if (clickHtml == "全部分类") {
            $("#macSectorListSelectName").text("全部分类");
            $("#macSectorList").hide();

            var dealCache = allFlexRow[1].children[1];//距离偏差
            $(dealCache).addClass("selected").siblings().removeClass("selected");

            macSectorLisFilter.filter(function (d) {
                return d;
            });

        } else if (clickHtml == "距离偏差") {
            $("#macSectorListSelectName").text("距离偏差");
            $("#macSectorList").hide();

            macSectorLisFilter.filter(function (d) {

                if (selectElement == "不限") {
                    return d;
                } else if (selectElement == "1公里以内") {
                    if (d.pred_distance <= 1000) {
                        return d;
                    }
                } else if (selectElement == "1-3公里") {
                    if (d.pred_distance >= 1000 && d.pred_distance <= 3000) {
                        return d;
                    }
                } else if (selectElement == "3公里以外") {
                    if (d.pred_distance > 3000) {
                        return d;
                    }
                }

            });
        } else if (clickHtml == "角度偏差") {
            $("#macSectorListSelectName").text("角度偏差");
            $("#macSectorList").hide();

            macSectorLisFilter.filter(function (d) {

                if (selectElement == "不限") {
                    return d;
                } else if (selectElement == "15°以内") {
                    if (d.pred_azimuth_diff < 15) {
                        return d;
                    }
                } else if (selectElement == "15°到30°") {
                    if (d.pred_azimuth_diff >= 15 && d.pred_azimuth_diff <= 30) {
                        return d;
                    }
                } else if (selectElement == "30°以上") {
                    if (d.pred_azimuth_diff > 30) {
                        return d;
                    }
                }

            });
        } else if (clickHtml == "天馈接反") {
            $("#macSectorListSelectName").text("天馈接反");
            $("#macSectorList").hide();
            macSectorLisFilter.filter(function (d) {
                if (selectElement == "不限") {
                    return d;
                } else if (selectElement == "是") {
                    if (d.is_ant_conn_abnor == 1) {
                        return d;
                    }
                } else {
                    if (d.is_ant_conn_abnor != 1) {
                        return d;
                    }
                }
            });
        }

        var tempData = macSectorLisFilter.top(IntelligentRoadTest.tempMacSectorFliterObj.size());//过滤后的结果集
        IntelligentRoadTest.tempMacSectorFliterObj.remove();//移除
        IntelligentRoadTest.tempMacSectorFliterObj = crossfilter([]);
        macSectorLisFilter = IntelligentRoadTest.tempMacSectorFliterObj.dimension(function (d) {
            return d
        });
        IntelligentRoadTest.tempMacSectorFliterObj.add(tempData);
        //根据条件过滤
        //过滤后回显数据
        IntelligentRoadTest.filterMacSectorResult = tempData;
        IntelligentRoadTest.macSectorCurrentResult = IntelligentRoadTest.filterMacSectorResult;
        IntelligentRoadTest.isFilterMacSector = true;
        $("#macSectorSort ul li.selected").trigger("click");
    });


//工单筛选
    $("#alarmInfoList .flexRow > .flexCol").not(".flexCol:first-child").click(function () {


        //是否缓期 is_suspend
        //数据来源  area_src_type
        //定义对象维度
        if (IntelligentRoadTest.tempAlarmInfoFliterObj == null) {
            IntelligentRoadTest.tempAlarmInfoFliterObj = crossfilter([]);
            IntelligentRoadTest.tempAlarmInfoFliterObj.add(IntelligentRoadTest.alarmInfoResult);
        } else {
            IntelligentRoadTest.tempAlarmInfoFliterObj.remove();
            IntelligentRoadTest.tempAlarmInfoFliterObj.add(IntelligentRoadTest.alarmInfoResult);
        }

        if (IntelligentRoadTest.alarmInfoFilterCondtionArr == null) { //工单筛选条件数组
            IntelligentRoadTest.alarmInfoFilterCondtionArr = ["不限", "不限", "不限", "不限"];
        }
        // var alarmInfoFilter = IntelligentRoadTest.tempAlarmInfoFliterObj.dimension(function(d) { return d });
        $(this).addClass("selected").siblings().removeClass("selected");

        var flexColText = $(this).parent().next().children();
        var allFlexRow = $(this).parent().parent().children();

        //判断点击的分类是否是全部
        var clickHtml = $(this).parent().children()[0].innerHTML;//全部分类
        var selectElement = $(this)[0].innerHTML;

        if (clickHtml == "全部分类") {

            $("#alarmInfoListSelectName").text("全部分类");
            $("#alarmInfoList").hide();
            IntelligentRoadTest.alarmInfoFilterCondtionArr = ["不限", "不限", "不限", "不限"];
            var dealCache = allFlexRow[1].children[1];//工单类型
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[2].children[1];//工单等级
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[3].children[1];//是否恢复
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[4].children[1];//工单状态
            $(dealCache).addClass("selected").siblings().removeClass("selected");

        } else if (clickHtml == "工单类型") {
            $("#alarmInfoListSelectName").text("工单类型");
            $("#alarmInfoList").hide();
            IntelligentRoadTest.alarmInfoFilterCondtionArr[0] = selectElement;
        } else if (clickHtml == "工单等级") {
            $("#alarmInfoListSelectName").text("工单等级");
            $("#alarmInfoList").hide();
            IntelligentRoadTest.alarmInfoFilterCondtionArr[1] = selectElement;
        } else if (clickHtml == "是否恢复") {
            $("#alarmInfoListSelectName").text("是否恢复");
            $("#alarmInfoList").hide();
            IntelligentRoadTest.alarmInfoFilterCondtionArr[2] = selectElement;
        } else if (clickHtml == "工单状态") {
            $("#alarmInfoListSelectName").text("工单状态");
            $("#alarmInfoList").hide();
            IntelligentRoadTest.alarmInfoFilterCondtionArr[3] = selectElement;
        }

        var alarmInfoFilter = IntelligentRoadTest.alarmInfoFilter(IntelligentRoadTest.alarmInfoResult, IntelligentRoadTest.alarmInfoFilterCondtionArr);
        var tempData = alarmInfoFilter.top(IntelligentRoadTest.tempAlarmInfoFliterObj.size());//过滤后的结果集
        IntelligentRoadTest.tempAlarmInfoFliterObj.remove();//移除
        IntelligentRoadTest.tempAlarmInfoFliterObj = crossfilter([]);
        alarmInfoFilter = IntelligentRoadTest.tempAlarmInfoFliterObj.dimension(function (d) {
            return d
        });
        IntelligentRoadTest.tempAlarmInfoFliterObj.add(tempData);

        //过滤后回显数据
        IntelligentRoadTest.filterAlarmInfoResult = tempData;
        IntelligentRoadTest.alarmInfoCurrentResult = IntelligentRoadTest.filterAlarmInfoResult;
        IntelligentRoadTest.isFilterAlarmInfo = true;

        $("#alarmInfoSort ul li.selected").trigger("click");

    });


//弱区筛选
    $("#rfgList .flexRow > .flexCol").not(".flexCol:first-child").click(function () {
        console.log("点击弱区选项");
        // var data = [];
        // var tempDate1 = {"a1":"12345","a11":"2456"};
        // var tempDate2 = {"a1":"67890","a11":"2334"};
        // var tempDate3 = {"a1":"12345","a11":"2314"};
        // data.push(tempDate1);
        // data.push(tempDate2);
        // data.push(tempDate3);
        // IntelligentRoadTest.gridResultGroupByGridNum(data);
        //是否缓期 is_suspend
        //数据来源  area_src_type
        //定义对象维度
        if (IntelligentRoadTest.tempRfgFliterObj == null) {
            IntelligentRoadTest.tempRfgFliterObj = crossfilter([]);
            IntelligentRoadTest.tempRfgFliterObj.add(IntelligentRoadTest.rfgResult);
        } else {
            IntelligentRoadTest.tempRfgFliterObj.remove();
            IntelligentRoadTest.tempRfgFliterObj.add(IntelligentRoadTest.rfgResult);
        }

        if (IntelligentRoadTest.poorAreaFilterCondtionArr == null) { //IntelligentRoadTest.poorAreaFilterCondtionArr表示弱区的筛选条件数组
            IntelligentRoadTest.poorAreaFilterCondtionArr = ["不限", "不限", "不限", "不限", "不限"];
        }
        // var rfgFilter = IntelligentRoadTest.tempRfgFliterObj.dimension(function(d) { return d });
        $(this).addClass("selected").siblings().removeClass("selected");

        var flexColText = $(this).parent().next().children();
        var allFlexRow = $(this).parent().parent().children();

        //判断点击的分类是否是全部
        var clickHtml = $(this).parent().children()[0].innerHTML;//全部分类
        var selectElement = $(this)[0].innerHTML;

        if (clickHtml == "全部分类") {
            $("#rfgListSelectName").text("全部分类");
            $("#rfgList").hide();
            IntelligentRoadTest.poorAreaFilterCondtionArr = ["不限", "不限", "不限", "不限", "不限"];
            var dealCache = allFlexRow[1].children[1];//附件扇区
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[2].children[1];//接入扇区
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[3].children[1];//处理建议
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[4].children[1];//区域类型
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[5].children[1];//是否新增
            $(dealCache).addClass("selected").siblings().removeClass("selected");
        } else if (clickHtml == "附近扇区") {
            $("#rfgListSelectName").text("附近扇区");
            $("#rfgList").hide();
            IntelligentRoadTest.poorAreaFilterCondtionArr[0] = selectElement;

        } else if (clickHtml == "接入扇区") {
            $("#rfgListSelectName").text("接入扇区");
            $("#rfgList").hide();
            IntelligentRoadTest.poorAreaFilterCondtionArr[1] = selectElement;
        } else if (clickHtml == "处理建议") {
            $("#rfgListSelectName").text("处理建议");
            $("#rfgList").hide();
            IntelligentRoadTest.poorAreaFilterCondtionArr[2] = selectElement;
        } else if (clickHtml == "区域类型") {
            $("#rfgListSelectName").text("区域类型");
            $("#rfgList").hide();
            IntelligentRoadTest.poorAreaFilterCondtionArr[3] = selectElement;
        } else if (clickHtml == "是否新增") {
            $("#rfgListSelectName").text("是否新增");
            $("#rfgList").hide();
            IntelligentRoadTest.poorAreaFilterCondtionArr[4] = selectElement;
        }
        var rfgFilter = IntelligentRoadTest.filterPoorArea(IntelligentRoadTest.rfgResult, IntelligentRoadTest.poorAreaFilterCondtionArr);
        var tempData = rfgFilter.top(IntelligentRoadTest.rfgResult.length);//过滤后的结果集
        IntelligentRoadTest.tempRfgFliterObj.remove();//移除
        IntelligentRoadTest.tempRfgFliterObj = crossfilter([]);
        rfgFilter = IntelligentRoadTest.tempRfgFliterObj.dimension(function (d) {
            return d
        });
        IntelligentRoadTest.tempRfgFliterObj.add(tempData);


        //过滤后回显数据
        IntelligentRoadTest.filterRfgResult = tempData;
        IntelligentRoadTest.rfgCurrentResult = IntelligentRoadTest.filterRfgResult;
        IntelligentRoadTest.isFilterRfg = true;

        $("#rfgSort ul li.selected").trigger("click");


    });


//骨头区域筛选
    $("#boneList .flexRow > .flexCol").not(".flexCol:first-child").click(function () {

        //是否缓期 is_suspend
        //数据来源  area_src_type
        //定义对象维度
        IntelligentRoadTest.tempFliterObj = crossfilter([]);
        IntelligentRoadTest.tempFliterObj.add(IntelligentRoadTest.boneAreaResult);

        if (IntelligentRoadTest.boneAreaFilterCondtionArr == null) {
            IntelligentRoadTest.boneAreaFilterCondtionArr = ["不限", "不限"];
        }
        // var boneFilter = IntelligentRoadTest.tempFliterObj.dimension(function(d) { return d });
        //console.log(boneFilter.top(IntelligentRoadTest.tempFliterObj.size()));
//    var text = this.outerText;
//    var title = this.parentElement.children[0].outerText;
//    var param;//过滤参数名
//    var require = [];//过滤条件
        $(this).addClass("selected").siblings().removeClass("selected");

        var flexColText = $(this).parent().next().children();
        var allFlexRow = $(this).parent().parent().children();
//判断点击的分类是否是全部
        var clickHtml = $(this).parent().children()[0].innerHTML;//全部分类
        var selectElement = $(this)[0].innerHTML;
        if (clickHtml == "全部分类") {

            $("#boneListSelectName").text("全部分类");
            $("#boneList").hide();
            IntelligentRoadTest.boneAreaFilterCondtionArr = ["不限", "不限"];
            var dealCache = allFlexRow[1].children[1];//缓期处理
            $(dealCache).addClass("selected").siblings().removeClass("selected");
            var dealCache = allFlexRow[2].children[1];//数据来源
            $(dealCache).addClass("selected").siblings().removeClass("selected");


        } else if (clickHtml == "缓期处理") {
            $("#boneListSelectName").text("缓期处理");
            $("#boneList").hide();
            IntelligentRoadTest.boneAreaFilterCondtionArr[0] = selectElement;
        } else if (clickHtml == "数据来源") {
            $("#boneListSelectName").text("数据来源");
            $("#boneList").hide();
            IntelligentRoadTest.boneAreaFilterCondtionArr[1] = selectElement;
        }

        var boneFilter = IntelligentRoadTest.boneAreaFilter(IntelligentRoadTest.boneAreaResult, IntelligentRoadTest.boneAreaFilterCondtionArr);
        var tempData = boneFilter.top(IntelligentRoadTest.tempFliterObj.size());//过滤后的结果集
        IntelligentRoadTest.tempFliterObj.remove();//移除
        IntelligentRoadTest.tempFliterObj = crossfilter([]);
        var boneFilter = IntelligentRoadTest.tempFliterObj.dimension(function (d) {
            return d
        });
        //console.log(tempFliterObj.size());
        IntelligentRoadTest.tempFliterObj.add(tempData);
        //boneFilter = tempFliterObj.dimension(function(d) { return d });
        //console.log(boneFilter.top(tempFliterObj.size()));

        //根据条件过滤
        //for(var i=0;i<5;i++){
        var dealCache = allFlexRow[2];//缓期处理对象
        var selectElement = $(dealCache).children(".selected")[0].innerHTML//选中的元素
        var firstElement = $(dealCache).children()[0].innerHTML//获取第一个元素
        if (firstElement == "数据来源") {
            boneFilter.filter(function (d) {
                if (selectElement == "系统创建") {
                    if (d.area_src_type == 0) {
                        return d;
                    }
                } else if (selectElement == "手工添加") {
                    if (d.area_src_type == 1) {
                        return d;
                    }
                } else if (selectElement == "不限") {
                    return d;
                }
            });
        }
        //}

        //console.log(boneFilter.top(tempFliterObj.size()));
        var tempData = boneFilter.top(IntelligentRoadTest.tempFliterObj.size());//过滤后的结果集
        IntelligentRoadTest.tempFliterObj.remove();//移除
        //console.log(tempFliterObj.size());
        IntelligentRoadTest.tempFliterObj.add(tempData);
        boneFilter.dispose();//清空纬度

        IntelligentRoadTest.filterBoneAreaResult = tempData;
        IntelligentRoadTest.boneAreaCurrentResult = IntelligentRoadTest.filterBoneAreaResult;
        IntelligentRoadTest.isFilterBoneArea = true;
        //IntelligentRoadTest.boneAreaData(tempData);
        //调用排序？
        $("#boneSort ul li.selected").trigger("click");


    });

//骨头区域排序
    $("#boneSort ul li").click(function () {

        $(this).addClass("selected").siblings().removeClass("selected");
        $("#boneSort .select-info").hide();

        var text = this.innerHTML;
        $("#boneSort span")[0].innerHTML = text;
        IntelligentRoadTest.tempFliterObj = crossfilter([]);
        var data = [];
        if (IntelligentRoadTest.isFilterBoneArea == false) {
            data = IntelligentRoadTest.boneAreaResult;
        } else {
            data = IntelligentRoadTest.filterBoneAreaResult;
        }
        IntelligentRoadTest.tempFliterObj.add(data);
        //console.log(IntelligentRoadTest.tempFliterObj.top(10));
        //IntelligentRoadTest.filterBoneAreaResult数据
        if (text == "推荐排序") {
            var boneFilter = IntelligentRoadTest.tempFliterObj.dimension(function (d) {
                return d.pc_orderno_tot
            });
        } else if (text == "弱覆盖优先") {
            var boneFilter = IntelligentRoadTest.tempFliterObj.dimension(function (d) {
                return d.poor_grid_nums
            });
        } else if (text == "下切优先") {
            var boneFilter = IntelligentRoadTest.tempFliterObj.dimension(function (d) {
                return d.lte_to_3g_orderno == null ? 10000 : d.lte_to_3g_orderno;
            });
        } else if (text == "用户数优先") {
            var boneFilter = IntelligentRoadTest.tempFliterObj.dimension(function (d) {
                return d.user_4g_orderno == null ? 10000 : d.user_4g_orderno;
            });
        } else if (text == "流量优先") {
            var boneFilter = IntelligentRoadTest.tempFliterObj.dimension(function (d) {
                return d.flow_4g_orderno == null ? 10000 : d.flow_4g_orderno;
            });
        } else if (text == "感知优先") {
            var boneFilter = IntelligentRoadTest.tempFliterObj.dimension(function (d) {
                return d.ce_good_ratio_avg == null ? 10000 : d.ce_good_ratio_avg;
            });
        }
        // console.log(boneFilter.top(10));
        // console.log(boneFilter.bottom(10));
        if (text == "推荐排序" || text == "弱覆盖优先") {
            var tempData = boneFilter.top(IntelligentRoadTest.tempFliterObj.size());
        } else {
            var tempData = boneFilter.bottom(IntelligentRoadTest.tempFliterObj.size());
        }
        IntelligentRoadTest.boneAreaCurrentResult = tempData;
        IntelligentRoadTest.boneAreaData(tempData);
        // IntelligentRoadTest.boneAreaVM.boneAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.boneAreaCurrentResult , 1);
        //IntelligentRoadTest.drawMk(IntelligentRoadTest.boneAreaVM.boneAreaList ,5);

    });

//弱区排序
    $("#rfgSort ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#rfgSort .select-info").hide();
        var text = this.innerHTML;
        $("#rfgSort span")[0].innerHTML = text;
        IntelligentRoadTest.tempRfgFliterObj = crossfilter([]);
        var data = [];
        if (IntelligentRoadTest.isFilterRfg == false) {
            data = IntelligentRoadTest.rfgResult;
        } else {
            data = IntelligentRoadTest.filterRfgResult;
        }
        IntelligentRoadTest.tempRfgFliterObj.add(data);
        if (text == "推荐排序") {
            var rfgFilter = IntelligentRoadTest.tempRfgFliterObj.dimension(function (d) {
                return d.pc_orderno_tot
            });
        } else if (text == "下切优先") {
            var rfgFilter = IntelligentRoadTest.tempRfgFliterObj.dimension(function (d) {
                return d.lte_to_3g_orderno == null ? 10000 : d.lte_to_3g_orderno;
            });
        } else if (text == "流量优先") {
            var rfgFilter = IntelligentRoadTest.tempRfgFliterObj.dimension(function (d) {
                return d.flow_4g_orderno == null ? 10000 : d.flow_4g_orderno;
            });
        } else if (text == "感知优先") {
            var rfgFilter = IntelligentRoadTest.tempRfgFliterObj.dimension(function (d) {
                return d.ce_good_ratio_orderno == null ? 10000 : d.ce_good_ratio_orderno;
            });
        } else if (text == "弱覆盖优先") {
            var rfgFilter = IntelligentRoadTest.tempRfgFliterObj.dimension(function (d) {
                return d.poor_grid_nums_orderno == null ? 10000 : d.poor_grid_nums_orderno;
            });
        } else if (text == "用户数优先") {
            var rfgFilter = IntelligentRoadTest.tempRfgFliterObj.dimension(function (d) {
                return d.user_4g_orderno == null ? 10000 : d.user_4g_orderno;
            });
        }

        if (text == "推荐排序") {
            var tempData = rfgFilter.top(IntelligentRoadTest.tempRfgFliterObj.size());
        } else {
            var tempData = rfgFilter.bottom(IntelligentRoadTest.tempRfgFliterObj.size());
        }


        IntelligentRoadTest.rfgCurrentResult = tempData;
        IntelligentRoadTest.showPoorAreaData(tempData);
        IntelligentRoadTest.rfgVM.poorAreaList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.rfgCurrentResult, 1);


    });


//关注区域排序
    $("#concernSort ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#concernSort .select-info").hide();
        var text = this.innerHTML;
        $("#concernSort span")[0].innerHTML = text;
        IntelligentRoadTest.tempConcernAreaFliterObj = crossfilter([]);
        var data = [];
        if (IntelligentRoadTest.isFilterConcernArea == false) {
            data = IntelligentRoadTest.concernAreaResult;
        } else {
            data = IntelligentRoadTest.filterConcernAreaResult;
        }
        IntelligentRoadTest.tempConcernAreaFliterObj.add(data);
        if (text == "推荐排序") {
            var concernFilter = IntelligentRoadTest.tempConcernAreaFliterObj.dimension(function (d) {
                return d.orderno_tot
            });
        } else if (text == "下切优先") {
            var concernFilter = IntelligentRoadTest.tempConcernAreaFliterObj.dimension(function (d) {
                return d.lte_to_3g_tot
            });
        } else if (text == "流量优先") {
            var concernFilter = IntelligentRoadTest.tempConcernAreaFliterObj.dimension(function (d) {
                return d.flow_4g_tot
            });
        } else if (text == "感知优先") {
            var concernFilter = IntelligentRoadTest.tempConcernAreaFliterObj.dimension(function (d) {
                return d.ce_good_ratio_avg == null ? 10000 : d.ce_good_ratio_avg;
            });
        } else if (text == "弱覆盖优先") {
            var concernFilter = IntelligentRoadTest.tempConcernAreaFliterObj.dimension(function (d) {
                return d.grid_count
            });
        } else if (text == "用户数优先") {
            var concernFilter = IntelligentRoadTest.tempConcernAreaFliterObj.dimension(function (d) {
                return d.user_4g_avg
            });
        } else if (text == "时间优先") {
            var concernFilter = IntelligentRoadTest.tempConcernAreaFliterObj.dimension(function (d) {
                return d.create_time
            });
        }

        if (text == "感知优先") {
            var tempData = concernFilter.bottom(IntelligentRoadTest.tempConcernAreaFliterObj.size());
        } else {
            var tempData = concernFilter.top(IntelligentRoadTest.tempConcernAreaFliterObj.size());
        }

        IntelligentRoadTest.concernAreaCurrentResult = tempData;
        IntelligentRoadTest.concernAreaData(IntelligentRoadTest.concernAreaCurrentResult);

    });


//扇区排序
    $("#sectorSort ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#sectorSort .select-info").hide();
        var text = this.innerHTML;
        $("#sectorSort span")[0].innerHTML = text;
        IntelligentRoadTest.tempSectorFliterObj = crossfilter([]);
        var data = [];
        if (IntelligentRoadTest.isFilterSector == false) {
            data = IntelligentRoadTest.sectorResult;
        } else {
            data = IntelligentRoadTest.filterSectorResult;
        }
        IntelligentRoadTest.tempSectorFliterObj.add(data);
        if (text == "推荐排序") {
            if (IntelligentRoadTest.sectorObj.name == "sector") {
                var sectorFilter = IntelligentRoadTest.tempSectorFliterObj.dimension(function (d) {
                    return d.orderno_tot
                });
            } else if (IntelligentRoadTest.sectorObj.name == "m3Sector") {
                var sectorFilter = IntelligentRoadTest.tempSectorFliterObj.dimension(function (d) {
                    return d.m3_orderno_tot
                });
            } else if (IntelligentRoadTest.sectorObj.name == "olSector") {
                var sectorFilter = IntelligentRoadTest.tempSectorFliterObj.dimension(function (d) {
                    return d.ol_orderno_tot
                });
            } else if (IntelligentRoadTest.sectorObj.name == "cbSector") {
                var sectorFilter = IntelligentRoadTest.tempSectorFliterObj.dimension(function (d) {
                    return d.cb_orderno_tot
                });
            }
        } else if (text == "下切优先") {
            var sectorFilter = IntelligentRoadTest.tempSectorFliterObj.dimension(function (d) {
                return d.lte_to_3g_tot
            });
        } else if (text == "流量优先") {
            var sectorFilter = IntelligentRoadTest.tempSectorFliterObj.dimension(function (d) {
                return d.flow_4g_tot
            });
        } else if (text == "感知优先") {
            var sectorFilter = IntelligentRoadTest.tempSectorFliterObj.dimension(function (d) {
                return d.ce_good_ratio_avg == null ? 10000 : d.ce_good_ratio_avg;
            });
        } else if (text == "弱覆盖优先") {
            var sectorFilter = IntelligentRoadTest.tempSectorFliterObj.dimension(function (d) {
                return d.poor_coverage_count
            });
        } else if (text == "用户数优先") {
            var sectorFilter = IntelligentRoadTest.tempSectorFliterObj.dimension(function (d) {
                return d.user_4g_avg
            });
        } else if (text == "占比优先") { //只有专题扇区才有
            if (IntelligentRoadTest.sectorObj.name == "m3Sector") {
                var sectorFilter = IntelligentRoadTest.tempSectorFliterObj.dimension(function (d) {
                    return d.m3_mrrat
                });
            } else if (IntelligentRoadTest.sectorObj.name == "olSector") {
                var sectorFilter = IntelligentRoadTest.tempSectorFliterObj.dimension(function (d) {
                    return d.ol_mrrat
                });
            } else {
                var sectorFilter = IntelligentRoadTest.tempSectorFliterObj.dimension(function (d) {
                    return d.cb_mrrat
                });
            }
        }

        if (text == "感知优先") {
            var tempData = sectorFilter.bottom(IntelligentRoadTest.tempSectorFliterObj.size());
        } else {
            var tempData = sectorFilter.top(IntelligentRoadTest.tempSectorFliterObj.size());
        }

        IntelligentRoadTest.sectorCurrentResult = tempData;
        IntelligentRoadTest.showSectorData(tempData);
        IntelligentRoadTest.sectorVM.sectorList = IntelligentRoadTest.getDataListByPage(tempData, 1);
    });

//工单排序
    $("#alarmInfoSort ul li").click(function () {

        $(this).addClass("selected").siblings().removeClass("selected");
        $("#alarmInfoSort .select-info").hide();

        var text = this.innerHTML;
        $("#alarmInfoSort span")[0].innerHTML = text;
        IntelligentRoadTest.tempAlarmInfoFliterObj = crossfilter([]);
        var data = [];
        if (IntelligentRoadTest.isFilterAlarmInfo == false) {
            data = IntelligentRoadTest.alarmInfoResult;
        } else {
            data = IntelligentRoadTest.filterAlarmInfoResult;
        }
        IntelligentRoadTest.tempAlarmInfoFliterObj.add(data);
        if (text == "恢复时间优先") {
            var alarmInfoFilter = IntelligentRoadTest.tempAlarmInfoFliterObj.dimension(function (d) {
                return d.recover_time
            });
        } else if (text == "派单时间优先") {
            var alarmInfoFilter = IntelligentRoadTest.tempAlarmInfoFliterObj.dimension(function (d) {
                return d.task_send_time
            });
        }
        var tempData = alarmInfoFilter.top(IntelligentRoadTest.tempAlarmInfoFliterObj.size());
        IntelligentRoadTest.alarmInfoCurrentResult = tempData;
        IntelligentRoadTest.showAlarmInfoData(tempData);

    });


//宏站排序
    $("#macSectorSort ul li").click(function () {

        $(this).addClass("selected").siblings().removeClass("selected");
        $("#macSectorSort .select-info").hide();

        var text = this.innerHTML;
        $("#macSectorSort span")[0].innerHTML = text;
        IntelligentRoadTest.tempMacSectorFliterObj = crossfilter([]);
        var data = [];
        if (IntelligentRoadTest.isFilterMacSector == false) {
            data = IntelligentRoadTest.macSectorResult;
        } else {
            data = IntelligentRoadTest.filterMacSectorResult;
        }
        IntelligentRoadTest.tempMacSectorFliterObj.add(data);
        if (text == "推荐排序") {
            var alarmInfoFilter = IntelligentRoadTest.tempMacSectorFliterObj.dimension(function (d) {
                return d
            });
        } else if (text == "距离优先") {
            var alarmInfoFilter = IntelligentRoadTest.tempMacSectorFliterObj.dimension(function (d) {
                return d.pred_distance
            });
        } else if (text == "流量优先") {
            var alarmInfoFilter = IntelligentRoadTest.tempMacSectorFliterObj.dimension(function (d) {
                return d.flow_4g_tot
            });
        } else if (text == "角度优先") {
            var alarmInfoFilter = IntelligentRoadTest.tempMacSectorFliterObj.dimension(function (d) {
                return d.pred_azimuth_diff
            });
        } else if (text == "附近弱区数量优先") {
            var alarmInfoFilter = IntelligentRoadTest.tempMacSectorFliterObj.dimension(function (d) {
                return d.nb_poor_coverage_count
            });
        }
        var tempData = alarmInfoFilter.top(IntelligentRoadTest.tempMacSectorFliterObj.size());
        IntelligentRoadTest.macSectorCurrentResult = tempData;
        IntelligentRoadTest.showMacSectorData(tempData);

    });

//Dt排序
    $("#dtSort ul li").click(function () {

        $(this).addClass("selected").siblings().removeClass("selected");
        $("#dtSort .select-info").hide();
        var text = this.innerHTML;
        $("#dtSort span")[0].innerHTML = text;
        IntelligentRoadTest.tempDtFliterObj = crossfilter([]);
        var data = [];
        if (IntelligentRoadTest.isFilterDt == false) {
            data = IntelligentRoadTest.result;
        } else {
            data = IntelligentRoadTest.filterDtResult;
        }
        IntelligentRoadTest.tempDtFliterObj.add(data);
        if (text == "图层时间优先") {
            var dtFilter = IntelligentRoadTest.tempDtFliterObj.dimension(function (d) {
                return d.dt_time
            });
        } else if (text == "图层名称优先") {
            var dtFilter = IntelligentRoadTest.tempDtFliterObj.dimension(function (d) {
                var str = ConvertPinyin(d.dt_name);
                return str
            });
        }
        if (text == "图层时间优先") {
            var tempData = dtFilter.top(IntelligentRoadTest.tempDtFliterObj.size());
        } else {
            var tempData = dtFilter.bottom(IntelligentRoadTest.tempDtFliterObj.size());
        }
        IntelligentRoadTest.currentResult = tempData;
        IntelligentRoadTest.showDTData(tempData);

    });


//高校排序
    $("#collegeSort ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#collegeSort .select-info").hide();
        var text = this.innerHTML;
        $("#collegeSort span")[0].innerHTML = text;
        var data = [];
        if (IntelligentRoadTest.isFilterCollege == false) {
            data = IntelligentRoadTest.collegeResult;
        } else {
            data = IntelligentRoadTest.filterCollegeResult;
        }
        var tempData = IntelligentRoadTest.filterArea(data, text);
        IntelligentRoadTest.collegeCurrentResult = tempData;
        IntelligentRoadTest.showCollegeData(tempData);
        IntelligentRoadTest.collegeVM.collegeList = IntelligentRoadTest.getDataListByPage(tempData, 1);

    });

//新增场景排序
    $("#senseSort ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#senseSort .select-info").hide();
        var text = this.innerHTML;
        $("#senseSort span")[0].innerHTML = text;
        var data = [];
        if (IntelligentRoadTest.isFilterSense == false) {
            data = IntelligentRoadTest.senseResult;
        } else {
            data = IntelligentRoadTest.filterSenseResult;
        }
        var tempData = IntelligentRoadTest.filterArea(data, text);
        IntelligentRoadTest.senseCurrentResult = tempData;
        IntelligentRoadTest.showSenseData(tempData);
        IntelligentRoadTest.senseVM.senseList = IntelligentRoadTest.getDataListByPage(tempData, 1);

    });


//住宅区排序
    $("#uptownSort ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#uptownSort .select-info").hide();
        var text = this.innerHTML;
        $("#uptownSort span")[0].innerHTML = text;
        var data = [];
        if (IntelligentRoadTest.isFilteruptown == false) {
            data = IntelligentRoadTest.uptownResult;
        } else {
            data = IntelligentRoadTest.filterUptownResult;
        }
        var tempData = IntelligentRoadTest.filterArea(data, text);
        IntelligentRoadTest.uptownCurrentResult = tempData;
        IntelligentRoadTest.showUptownData(tempData);
        IntelligentRoadTest.uptownVM.uptownList = IntelligentRoadTest.getDataListByPage(tempData, 1);

    });


//商务区排序
    $("#businessSort ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#businessSort .select-info").hide();
        var text = this.innerHTML;
        $("#businessSort span")[0].innerHTML = text;
        var data = [];
        if (IntelligentRoadTest.isFilterbusiness == false) {
            data = IntelligentRoadTest.businessResult;
        } else {
            data = IntelligentRoadTest.filterBusinessResult;
        }
        var tempData = IntelligentRoadTest.filterArea(data, text);
        IntelligentRoadTest.businessCurrentResult = tempData;
        IntelligentRoadTest.showBusinessData(tempData);
        IntelligentRoadTest.businessVM.businessList = IntelligentRoadTest.getDataListByPage(tempData, 1);

    });

//美景排序
    $("#scenerySort ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#scenerySort .select-info").hide();
        var text = this.innerHTML;
        $("#scenerySort span")[0].innerHTML = text;
        var data = [];
        if (IntelligentRoadTest.isFilterScenery == false) {
            data = IntelligentRoadTest.sceneryResult;
        } else {
            data = IntelligentRoadTest.filterSceneryResult;
        }
        var tempData = IntelligentRoadTest.filterArea(data, text);
        IntelligentRoadTest.sceneryCurrentResult = tempData;
        IntelligentRoadTest.showSceneryData(tempData);
        IntelligentRoadTest.sceneryVM.sceneryList = IntelligentRoadTest.getDataListByPage(tempData, 1);

    });

//场馆排序
    $("#siteSort ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#siteSort .select-info").hide();
        var text = this.innerHTML;
        $("#siteSort span")[0].innerHTML = text;
        var data = [];
        if (IntelligentRoadTest.isFilterSite == false) {
            data = IntelligentRoadTest.siteResult;
        } else {
            data = IntelligentRoadTest.filterSiteResult;
        }
        var tempData = IntelligentRoadTest.filterArea(data, text);
        IntelligentRoadTest.siteCurrentResult = tempData;
        IntelligentRoadTest.showSiteData(tempData);
        IntelligentRoadTest.siteVM.siteList = IntelligentRoadTest.getDataListByPage(tempData, 1);

    });


//美食排序
    $("#foodSort ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#foodSort .select-info").hide();
        var text = this.innerHTML;
        $("#foodSort span")[0].innerHTML = text;
        var data = [];
        if (IntelligentRoadTest.isFilterfood == false) {
            data = IntelligentRoadTest.foodResult;
        } else {
            data = IntelligentRoadTest.filterFoodResult;
        }
        var tempData = IntelligentRoadTest.filterArea(data, text);
        IntelligentRoadTest.foodCurrentResult = tempData;
        IntelligentRoadTest.showFoodData(tempData);
        IntelligentRoadTest.foodVM.foodList = IntelligentRoadTest.getDataListByPage(tempData, 1);

    });

//农贸排序
    $("#marketSort ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#marketSort .select-info").hide();
        var text = this.innerHTML;
        $("#marketSort span")[0].innerHTML = text;
        var data = [];
        if (IntelligentRoadTest.isFilterMarket == false) {
            data = IntelligentRoadTest.marketResult;
        } else {
            data = IntelligentRoadTest.filterMarketResult;
        }
        var tempData = IntelligentRoadTest.filterArea(data, text);
        IntelligentRoadTest.marketCurrentResult = tempData;
        IntelligentRoadTest.showMarketData(tempData);
        IntelligentRoadTest.marketVM.marketList = IntelligentRoadTest.getDataListByPage(tempData, 1);

    });


//战狼排序
    $("#warwolfSort ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#warwolfSort .select-info").hide();
        var text = this.innerHTML;
        $("#warwolfSort span")[0].innerHTML = text;
        var data = [];
        if (IntelligentRoadTest.isFilterWarwolf == false) {
            data = IntelligentRoadTest.warwolfResult;
        } else {
            data = IntelligentRoadTest.filterWarwolfResult;
        }
        var tempData = IntelligentRoadTest.filterArea(data, text);
        IntelligentRoadTest.warwolfCurrentResult = tempData;
        IntelligentRoadTest.showWarwolfData(tempData);
        IntelligentRoadTest.warwolfVM.warwolfList = IntelligentRoadTest.getDataListByPage(tempData, 1);

    });


//高速第一层排序
    $("#highwaySort ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#highwaySort .select-info").hide();
        var highwaySelectName = $("#highwaySelectName").text();
        var text = this.innerHTML;
        $("#highwaySort span")[0].innerHTML = text;
        var data = [];
        if (IntelligentRoadTest.isFilterHighway == false) {
            //判断当前处于层数
            data = IntelligentRoadTest.highwayFirstListResult;
        } else {
            data = IntelligentRoadTest.filterHighwayResult;
        }
        var tempData = IntelligentRoadTest.filteFirstLine(data, text);
        var isLP;
        if (highwaySelectName == "500米分段统计") {
            isLP = false;
        } else {
            isLP = true;
        }
        IntelligentRoadTest.highwayFirstListCurrentResult = tempData;
        IntelligentRoadTest.showRoadFirstList(tempData, 1, isLP);

    });


//高速第二层排序
    $("#highwaySortD ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#highwaySortD .select-info").hide();
        var highwaySelectName = $("#highwaySelectName").text();
        var text = this.innerHTML;
        $("#highwaySortD span")[0].innerHTML = text;
        IntelligentRoadTest.tempHighValueFliterObj = crossfilter([]);
        //     //判断当前处于层数
        var data = IntelligentRoadTest.highwaySecondListResult;
        var tempData = IntelligentRoadTest.filterSecondLine(data, text);
        IntelligentRoadTest.highwaySecondListCurrentResult = tempData;
        IntelligentRoadTest.showRoadSecondList(tempData, 1);

    });


//高铁第一层排序
    $("#railSort ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#railSort .select-info").hide();
        var railSelectName = $("#railListSelectName").text();
        var text = this.innerHTML;
        $("#railSort span")[0].innerHTML = text;
        var data = [];
        if (IntelligentRoadTest.isFilterRail == false) {
            //判断当前处于层数
            data = IntelligentRoadTest.railFirstListResult;
        } else {
            data = IntelligentRoadTest.filterRailResult;
        }
        var tempData = IntelligentRoadTest.filteFirstLine(data, text);
        var isLP;
        if (railSelectName == "<-110连段") {
            isLP = true;
        } else {
            isLP = false;
        }
        IntelligentRoadTest.railFirstListCurrentResult = tempData;
        IntelligentRoadTest.showRoadFirstList(tempData, 2, isLP);

    });


//高铁第二层排序
    $("#railSortD ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#railSortD .select-info").hide();
        var railSelectName = $("#railListSelectName").text();
        var text = this.innerHTML;
        $("#railSortD span")[0].innerHTML = text;
        //     //判断当前处于层数
        var data = IntelligentRoadTest.railSecondListResult;
        var tempData = IntelligentRoadTest.filterSecondLine(data, text);
        IntelligentRoadTest.railSecondListCurrentResult = tempData;
        IntelligentRoadTest.showRoadSecondList(tempData, 2);

    });


//市政路第一层排序
    $("#cityRoadSort ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#cityRoadSort .select-info").hide();
        var cityRoadSelectName = $("#cityRoadSelectName").text();
        var text = this.innerHTML;
        $("#cityRoadSort span")[0].innerHTML = text;
        var data = [];
        if (IntelligentRoadTest.isFilterCityRoad == false) {
            //判断当前处于层数
            data = IntelligentRoadTest.cityRoadFirstListResult;
        } else {
            data = IntelligentRoadTest.filterCityRoadResult;
        }
        var tempData = IntelligentRoadTest.filteFirstLine(data, text);
        var isLP;
        if (cityRoadSelectName == "500米分段统计") {
            isLP = false;
        } else {
            isLP = true;
        }
        IntelligentRoadTest.cityRoadFirstListCurrentResult = tempData;
        IntelligentRoadTest.showRoadFirstList(tempData, 3, isLP);

    });


//市政路第二层排序
    $("#cityRoadSortD ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#cityRoadSortD .select-info").hide();
        var cityRoadSelectName = $("#cityRoadSelectName").text();
        var text = this.innerHTML;
        $("#cityRoadSortD span")[0].innerHTML = text;
        //     //判断当前处于层数
        var data = IntelligentRoadTest.cityRoadSecondListResult;
        var tempData = IntelligentRoadTest.filterSecondLine(data, text);
        IntelligentRoadTest.cityRoadSecondListCurrentResult = tempData;
        IntelligentRoadTest.showRoadSecondList(tempData, 3);

    });


//地铁第一层排序
    $("#metroSort ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#metroSort .select-info").hide();
        var metroSelectName = $("#metroSelectName").text();
        var text = this.innerHTML;
        $("#metroSort span")[0].innerHTML = text;
        IntelligentRoadTest.tempMetroFliterObj = crossfilter([]);
        var data = [];
        if (IntelligentRoadTest.isFilterMetro == false) {
            //判断当前处于层数
            data = IntelligentRoadTest.metroFirstListResult;
        } else {
            data = IntelligentRoadTest.filterMetroResult;
        }
        IntelligentRoadTest.tempMetroFliterObj.add(data);
        if (text == "名称优先") {
            var metroFilter = IntelligentRoadTest.tempMetroFliterObj.dimension(function (d) {
                var str = ConvertPinyin(d.line_name);
                return str
            });
        } else if (text == "弱占比优先") {
            var metroFilter = IntelligentRoadTest.tempMetroFliterObj.dimension(function (d) {
                return d.poor_ratio;
            });
        }
        if (text == "弱占比优先") {
            var tempData = metroFilter.top(IntelligentRoadTest.tempMetroFliterObj.size());
        } else {
            var tempData = metroFilter.bottom(IntelligentRoadTest.tempMetroFliterObj.size());
        }
        IntelligentRoadTest.metroFirstListCurrentResult = tempData;
        IntelligentRoadTest.showMetroFirstList(tempData);

    });


//地铁第二层排序
    $("#metroSortD ul li").click(function () {
        $(this).addClass("selected").siblings().removeClass("selected");
        $("#metroSortD .select-info").hide();
        var metroSelectName = $("#metroSelectName").text();
        var text = this.innerHTML;
        $("#metroSortD span")[0].innerHTML = text;
        IntelligentRoadTest.tempMetroFliterObj = crossfilter([]);
        //     //判断当前处于层数
        var data = IntelligentRoadTest.metroSecondListResult;
        IntelligentRoadTest.tempMetroFliterObj.add(data);

        if (text == "推荐排序") {
            var metroFilter = IntelligentRoadTest.tempMetroFliterObj.dimension(function (d) {
                return d.pc_orderno_tot
            });
        } else if (text == "下切优先") {
            var metroFilter = IntelligentRoadTest.tempMetroFliterObj.dimension(function (d) {
                return d.lte_to_3g_tot;
            });
        } else if (text == "流量优先") {
            var metroFilter = IntelligentRoadTest.tempMetroFliterObj.dimension(function (d) {
                return d.flow_4g_tot;
            });
        } else if (text == "感知优先") {
            var metroFilter = IntelligentRoadTest.tempMetroFliterObj.dimension(function (d) {
                return d.ce_good_ratio_avg;
            });
        } else if (text == "弱覆盖优先") {
            var metroFilter = IntelligentRoadTest.tempMetroFliterObj.dimension(function (d) {
                return d.poor_cov_section == null ? 10000 : d.poor_cov_section;
            });
        } else if (text == "用户数优先") {
            var metroFilter = IntelligentRoadTest.tempMetroFliterObj.dimension(function (d) {
                return d.user_4g_avg;
            });
        }

        if (text == "感知优先") {
            var tempData = metroFilter.bottom(IntelligentRoadTest.tempMetroFliterObj.size());
        } else {
            var tempData = metroFilter.top(IntelligentRoadTest.tempMetroFliterObj.size());
        }
        IntelligentRoadTest.metroSecondListCurrentResult = tempData;
        IntelligentRoadTest.showMetroSecondList(tempData);

    });


//Dt文件上传
    $("#upload").click(function () {
        console.log("点击");

//		$(".progressBox").show();
        var formData = new FormData($("#uploadForm")[0]);
        var concernName = $("#uploadName").val();
        var concernAreaDate = $("#date97").val();
        var fujian = $("#fujian").val();
        var Offset = parseInt($("#Offset  option:selected").text());
        var LogTime = parseInt($("#LogTime  option:selected").text());
        var GPS_Lon = parseInt($("#GPS_Lon  option:selected").text());
        var GPS_Lat = parseInt($("#GPS_Lat  option:selected").text());
        var PCell = parseInt($("#PCell  option:selected").text());
        var remark = parseInt($("#remark  option:selected").text());
        //modify
        //创建排序值数组
        var serNums = new Array(Offset, LogTime, GPS_Lon, GPS_Lat, PCell, remark);
        console.log("序号数组：" + serNums[1])
        // 判断数组内的值不能有相同的
        //声明排序是否重复，true重复，false不重复
        var serNumIs = false;
        var nary = serNums.sort();
        for (var i = 0; i < serNums.length; i++) {
            //如果有重复值
            for (var j = 0; j < serNums.length; j++) {
                if (i != j) {
                    if (serNums[i] == serNums[j]) {
                        serNumIs = true;
                        break;
                    }
                }
            }
        }
        if (concernName == "" || concernName == null) {
            $("#message").html("路测名称不能为空！");
        } else if (concernAreaDate == "" || concernAreaDate == null) {
            $("#message").html("文件时间不能为空！");
        } else if (fujian == "" || fujian == null) {
            $("#message").html("请先选择一个csv文件！");
        } else if (serNumIs) {
            $("#message").html("排序字段不能重复选取！");
        } else {
            $.ajax({
                url: 'pages_dtUpload_DtUpload_uploadDtNew.action',
                type: 'POST',
                data: formData,
                async: true,
                cache: false,
                contentType: false,
                processData: false,
                success: function (attachmentJson) {
                    console.log("成功" + attachmentJson.length);
                    if (attachmentJson[1] == 0) {
                        console.log("成功上传！");
                        IntelligentRoadTest.initDTData();
                        $("#message").html("成功上传！");
                        $(".progressBox").hide();
                    } else {
                        console.log("上传失败，错误信息：" + attachmentJson[0]);
                        $("#message").html("上传失败，错误信息：" + attachmentJson[0]);
                        $(".progressBox").hide();
                    }
                },
                error: function () {
                    $(".progressBox").hide();
                    console.log("失败");
                }
            });


            $(".progressBox").show();
        }
    });


//点图层上传
    $("#PointUpload").click(function () {
        console.log("点击");
        var color = $("#pointSquarePick").css("background-color");

        $("#pointColor").val(color);
//		$(".progressBox").show();

        var concernName = $("#uploadName2").val().trim();
        var concernAreaDate = $("#date98").val();
        var fujian = $("#fujian2").val();
        var Offset = parseInt($("#Offset2  option:selected").text());
        var LogTime = parseInt($("#LogTime2  option:selected").text());
        var GPS_Lon = parseInt($("#GPS_Lon2  option:selected").text());
        var GPS_Lat = parseInt($("#GPS_Lat2  option:selected").text());
        var PCell = parseInt($("#value2  option:selected").text());
        var remark = parseInt($("#remark2  option:selected").text());
        //modify
        //创建排序值数组
        var serNums = new Array(Offset, LogTime, GPS_Lon, GPS_Lat, PCell, remark);
        console.log("序号数组：" + serNums[1])
        // 判断数组内的值不能有相同的
        //声明排序是否重复，true重复，false不重复
        var serNumIs = false;
        var nary = serNums.sort();
        for (var i = 0; i < serNums.length; i++) {
            //如果有重复值
            for (var j = 0; j < serNums.length; j++) {
                if (i != j) {
                    if (serNums[i] == serNums[j]) {
                        serNumIs = true;
                        break;
                    }
                }
            }
        }


        if (concernName == "" || concernName == null) {
            $("#message2").html("图层名称不能为空！");
        } else if (concernAreaDate == "" || concernAreaDate == null) {
            $("#message2").html("图层时间不能为空！");
        } else if (fujian == "" || fujian == null) {
            $("#message2").html("请先选择一个csv文件！");
        } else if (serNumIs) {
            $("#message2").html("排序字段不能重复选取！");
        } else {

            var pointForm = new FormData($("#pointForm")[0]);


            $.ajax({
                url: 'pages_dmCustom_Point_upload.action',
                type: 'POST',
                data: pointForm,
                async: true,

                cache: false,
                contentType: false,
                processData: false,

                success: function (attachmentJson) {
                    console.log("成功" + attachmentJson.length);

                    IntelligentRoadTest.initDTData();
                    if (attachmentJson[1] == 0) {
                        console.log("成功上传！");
                        $("#message2").html("成功上传！");


                        $(".progressBox").hide();

                    } else {
                        console.log("上传失败，错误信息：" + attachmentJson[0]);
                        $("#message2").html("上传失败，错误信息：" + attachmentJson[0]);
                        $(".progressBox").hide();
                    }
                },
                error: function () {
                    $(".progressBox").hide();
                    console.log("失败");
                }
            });


            $(".progressBox").show();
        }
    });


//多边形图层上传
    $("#polygonUpload").click(function () {
        console.log("点击");
//		$(".progressBox").show();
        var color = $("#polygonSquarePick").css("background-color");
        $("#polygonColor").val(color);
        var pointForm = new FormData($("#polygonForm")[0]);
        var concernName = $("#uploadName3").val().trim();
        var concernAreaDate = $("#date99").val();
        var fujian = $("#fujian3").val();

        var Offset = parseInt($("#Offset3  option:selected").text());
        var LogTime = parseInt($("#LogTime3  option:selected").text());
        var GIS_DATA = parseInt($("#GIS_DATA  option:selected").text());
        // var GPS_Lat = parseInt($("#GPS_Lat3  option:selected").text());
        var PCell = parseInt($("#PCell3  option:selected").text());
        var remark = parseInt($("#remark3  option:selected").text());
        //modify
        //创建排序值数组
        var serNums = new Array(Offset, LogTime, GIS_DATA, PCell, remark);
        console.log("序号数组：" + serNums[1])
        // 判断数组内的值不能有相同的
        //声明排序是否重复，true重复，false不重复
        var serNumIs = false;
        var nary = serNums.sort();
        for (var i = 0; i < serNums.length; i++) {
            //如果有重复值
            for (var j = 0; j < serNums.length; j++) {
                if (i != j) {
                    if (serNums[i] == serNums[j]) {
                        serNumIs = true;
                        break;
                    }
                }
            }
        }

        if (concernName == "" || concernName == null) {
            $("#message3").html("路测名称不能为空！");
        } else if (concernAreaDate == "" || concernAreaDate == null) {
            $("#message3").html("文件时间不能为空！");
        } else if (fujian == "" || fujian == null) {
            $("#message3").html("请先选择一个csv文件！");
        } else if (serNumIs) {
            $("#message3").html("排序字段不能重复选取！");
        } else {


            $.ajax({
                url: 'pages_dmCustom_Polygon_upload.action',
                type: 'POST',
                data: pointForm,
                async: true,

                cache: false,
                contentType: false,
                processData: false,

                success: function (attachmentJson) {
                    console.log("成功" + attachmentJson.length);

                    IntelligentRoadTest.initDTData();
                    if (attachmentJson[1] == 0) {
                        console.log("成功上传！");
                        $("#message3").html("成功上传！");


                        $(".progressBox").hide();

                    } else {
                        console.log("上传失败，错误信息：" + attachmentJson[0]);
                        $("#message3").html("上传失败，错误信息：" + attachmentJson[0]);
                        $(".progressBox").hide();
                    }
                },
                error: function () {
                    $(".progressBox").hide();
                    console.log("失败");
                }
            });


            $(".progressBox").show();
        }
    });


});


/**********************************
 * @funcname IntelligentRoadTest.initHighwaySecondVM
 * @funcdesc 初始化高速二层vue对象
 * @param
 * @return
 * @author 戴岭南
 * @create 2018/4/10 10:35
 * @modifier
 * @modify
 ***********************************/
//
IntelligentRoadTest.initHighwaySecondVM = function IntelligentRoadTest_initHighwaySecondVM() {
    if (IntelligentRoadTest.highwaySecondVM == null) {
        IntelligentRoadTest.highwaySecondVM = new Vue({
            el: '#showHighwayListDiv',//楚佳修改
            data: {
                highwayList: IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwaySecondListCurrentResult, IntelligentRoadTest.highwaySecondListCurrentPage),
                totalPages: IntelligentRoadTest.highwaySecondListTotalPage,
                totalCounts: IntelligentRoadTest.highwaySecondListTotalCount,
                currentPageNum: IntelligentRoadTest.highwaySecondListCurrentPage,
                startIndex: IntelligentRoadTest.startIndex,
                lastIndex: IntelligentRoadTest.lastIndex
            },
            methods: {
                showMessage: function (item, index) { //进入详情页
                    var pointStar = new L.latLng(item.latitude_min, item.longitude_min);
                    IntelligentRoadTest.osmMkData = item;
                    //增加查询工单指标的方法
                    if (IntelligentRoadTest.isShowAlarmInfoMessage == true) {
                        IntelligentRoadTest.getLineObjectAlarmInfoData("天翼蓝鹰高速", item.line_id, IntelligentRoadTest.day);
                    }
                    IntelligentRoadTest.drawDetailsMk(item, 0);
//                    IntelligentRoadTest.showStarEndMarke(item.latitude_min,item.longitude_min,item.latitude_max,item.longitude_max,2);
                    IntelligentRoadTest.mkIndex = index;
                    IntelligentRoadTest.goHighwayCompleteMessage();
                    IntelligentRoadTest.OsmMap.setView(pointStar);

                    IntelligentRoadTest.osmTableIndex = 3;
                    var echartTitle = "历史30天覆盖变化";
                    // IntelligentRoadTest.getHighway30DayData(item.id , 0);
                    var isLP = false;
                    if (IntelligentRoadTest.highwayVM != null && IntelligentRoadTest.highwayVM.type != null) {
                        isLP = IntelligentRoadTest.highwayVM.type;
                    }
                    if (!IntelligentRoadTest.isScreenCompared && IntelligentRoadTest.isAddMessageEvent) {//不是在分屏页，并且点击过分屏
                        if (!windowScreeen.closed) {//如果窗口没有关闭，需要进行同步信息，如果已经关闭，什么都不用做
                            // windowScreeen.focus();
                            item.isLP = isLP;
                            if (!isLP) {
                                IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'highway');
                            } else {
                                item.day = IntelligentRoadTest.day;
                                IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'highway');
                            }

                        }
                    }

                    IntelligentRoadTest.getRoad30DayData(item.road_id, item.line_id, 1, isLP);
                    var city_id = noceUtil.city_LATN_ID[item.city];
                    if (isLP) {
                        //连片线段点击时，查询该连片线段所有20米线段  并进入对应弱连片线段的详情页
                        IntelligentRoadTest.loadContinueLineMeterData(IntelligentRoadTest.day, 1, city_id, item.road_id, item.contain_ids);
                    } else {
                        IntelligentRoadTest.loadSplitLineSmallLine(item.road_id, item.line_id, city_id, IntelligentRoadTest.day, 1);//查询500米分段的20米数据
                    }

                    var nearTOP5 = [];
                    if (item.ne_sector_set != null && item.ne_sector_set != "") {
                        var to5DataArr = item.ne_sector_set.split("@");
                        for (var i = 0; i < to5DataArr.length; i++) {
                            nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
                        }
                        nearTOP5 = IntelligentRoadTest.sortNRTopCell(nearTOP5);
                    }
                    var mrNearTOP5 = [];
                    if (item.sector_set != null && item.sector_set != "") {
                        var mrTo5DataArr = item.sector_set.split("@");
                        for (var k = 0; k < mrTo5DataArr.length; k++) {
                            mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
                        }
                        mrNearTOP5 = IntelligentRoadTest.sortMRTopCell(mrNearTOP5);
                    }
                    if (IntelligentRoadTest.checkIfHasSameSector(nearTOP5, mrNearTOP5)) {
                        item.isHasSameSector = true;
                    }
                    $(".linkCell").attr("title", "显示连线");
                    $(".linkCell").removeClass("linkCellHover");
                    if (IntelligentRoadTest.highwayCompleteVM == null) {
                        IntelligentRoadTest.highwayCompleteVM = new Vue({
                            el: '#showHighwayCompleteMessage',
                            data: {
                                highwayData: item,
                                dataIndex: index,
                                nrTop5Cell: nearTOP5,
                                mrTop5Cell: mrNearTOP5,
                                title: echartTitle,
                                isShowAlarmInfo: IntelligentRoadTest.isShowAlarmInfoMessage,
                                alarm_dataObj: {}, //用于存放从告警表中获取到的指标的对象
                                alaram_title: "工单监测",
                                uname: IntelligentRoadTest.currentUser,
                                isHide30DayLine: isLP
                            },
                            methods: {
                                highwayPosition: function (item) {
                                    // IntelligentRoadTest.highwayPositiong(item);
                                    var pointStar = new L.latLng(item.latitude_min, item.longitude_min);
                                    IntelligentRoadTest.OsmMap.setView(pointStar);
                                },
                                editHighwayMessage: function (item) {
                                    IntelligentRoadTest.highwayEdit(item);
                                },
                                deleteHighway: function (item) {
                                    IntelligentRoadTest.wantDeleteConcern = item;
                                    $("#modal-highway").show();
                                },
                                viewHighwayLog: function (item) {
                                    IntelligentRoadTest.highwayLog(item);
                                },
                                gotoHighwaySevenEchart: function (item) {
                                    IntelligentRoadTest.highwaySevenLine(item);
                                },
                                showDetailInfo: function (event) {
                                    IntelligentRoadTest.showDetailInfo(event);
                                },
                                showLinkCell: function (event, item, type) {
                                    //type=1最近小区，type=2 接入扇区
                                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                                        $(event.currentTarget).attr("title", "显示连线");
                                        $(event.currentTarget).removeClass("linkCellHover");
                                        if (type == 1) {
                                            IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
                                        } else if (type == 2) {
                                            IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
                                        }
                                    } else {
                                        $(event.currentTarget).attr("title", "隐藏连线");
                                        $(event.currentTarget).addClass("linkCellHover");
                                        var mid_lng = item.longitude_mid;
                                        var mid_lat = item.latitude_mid;
                                        var centerPoint = new L.LatLng(mid_lat, mid_lng);
                                        if (type == 1) {
                                            //附近扇区top5连线
                                            IntelligentRoadTest.showNrTop5CellForMapByOsm(centerPoint, item.ne_sector_set);
                                        } else if (type == 2) {
                                            //接入扇区top5连线
                                            IntelligentRoadTest.showMrNrTop5CellForMapByOsm(centerPoint, item.sector_set);
                                        }
                                    }
                                },
                                gotoShowSectorMessage: function (sectorDate) {
                                    IntelligentRoadTest.clickType = 1;
                                    IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                                },
                                gotoKPIList: function (item) {
                                    if (item.sector_set != null) {
                                        var sectorArr = item.sector_set.split("@");
                                        showOrHideInputImage(2);
                                        IntelligentRoadTest.loadKPIListData(sectorArr);
                                        $("#kpiBackPoor").html("返回上一级");
                                    }
                                }
                            }
                        });
                    } else {
                        IntelligentRoadTest.highwayCompleteVM.highwayData = item;
                        IntelligentRoadTest.highwayCompleteVM.dataIndex = index;
                        IntelligentRoadTest.highwayCompleteVM.nrTop5Cell = nearTOP5;
                        IntelligentRoadTest.highwayCompleteVM.mrTop5Cell = mrNearTOP5;
                        IntelligentRoadTest.highwayCompleteVM.title = echartTitle;
                        IntelligentRoadTest.highwayCompleteVM.isHide30DayLine = isLP;
                        IntelligentRoadTest.highwayCompleteVM.isShowAlarmInfo = IntelligentRoadTest.isShowAlarmInfoMessage;
                    }

                },
                lastOrNext: function (type) {
                    if (type == 0) {
                        //上一页
                        if (IntelligentRoadTest.highwaySecondListCurrentPage > 1) {
                            IntelligentRoadTest.highwaySecondListCurrentPage = IntelligentRoadTest.highwaySecondListCurrentPage - 1;
                            IntelligentRoadTest.highwaySecondVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwaySecondListCurrentResult, IntelligentRoadTest.highwaySecondListCurrentPage);
                            IntelligentRoadTest.highwaySecondVM.currentPageNum = IntelligentRoadTest.highwaySecondListCurrentPage;
                            IntelligentRoadTest.highwaySecondVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.highwaySecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        } else {
                            alert("当前页是第一页");
                        }
                    } else {
                        if (IntelligentRoadTest.highwaySecondListCurrentPage < IntelligentRoadTest.highwaySecondListTotalPage) {
                            IntelligentRoadTest.highwaySecondListCurrentPage = IntelligentRoadTest.highwaySecondListCurrentPage + 1;
                            IntelligentRoadTest.highwaySecondVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwaySecondListCurrentResult, IntelligentRoadTest.highwaySecondListCurrentPage);
                            IntelligentRoadTest.highwaySecondVM.currentPageNum = IntelligentRoadTest.highwaySecondListCurrentPage;
                            IntelligentRoadTest.highwaySecondVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.highwaySecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                    }
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.highwaySecondVM.highwayList,10);
                },
                gotoPage: function () {
                    var page = $("#highwaySecondListPage").val(); //楚佳修改
                    page = parseInt(page);
                    if (page > 0 && page <= IntelligentRoadTest.highwaySecondListTotalPage) {
                        IntelligentRoadTest.highwaySecondListCurrentPage = page;
                        IntelligentRoadTest.highwaySecondVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwaySecondListCurrentResult, IntelligentRoadTest.highwaySecondListCurrentPage);
                        IntelligentRoadTest.highwaySecondVM.currentPageNum = IntelligentRoadTest.highwaySecondListCurrentPage;
                        IntelligentRoadTest.highwaySecondVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.highwaySecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                    }
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.highwaySecondVM.highwayList,10);
                },
                goLast: function () {
                    IntelligentRoadTest.highwaySecondListCurrentPage = IntelligentRoadTest.highwaySecondListTotalPage;
                    IntelligentRoadTest.highwaySecondVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwaySecondListCurrentResult, IntelligentRoadTest.highwaySecondListCurrentPage);
                    IntelligentRoadTest.highwaySecondVM.currentPageNum = IntelligentRoadTest.highwaySecondListCurrentPage;
                    IntelligentRoadTest.highwaySecondVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.highwaySecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.highwaySecondVM.highwayList,10);
                },
                goFirst: function () {
                    IntelligentRoadTest.highwaySecondListCurrentPage = 1;
                    IntelligentRoadTest.highwaySecondVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwaySecondListCurrentResult, IntelligentRoadTest.highwaySecondListCurrentPage);
                    IntelligentRoadTest.highwaySecondVM.currentPageNum = IntelligentRoadTest.highwaySecondListCurrentPage;
                    IntelligentRoadTest.highwaySecondVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.highwaySecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.highwaySecondVM.highwayList,10);
                },
                turnMk: function (index, item) {
                    //高速第二层触摸
                    IntelligentRoadTest.showStarEndMarke(item);
                    IntelligentRoadTest.osmTableStyle(index);
                }
            }
        });
    } else {
        IntelligentRoadTest.highwaySecondVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwaySecondListCurrentResult, IntelligentRoadTest.highwaySecondListCurrentPage);
        IntelligentRoadTest.highwaySecondVM.totalPages = IntelligentRoadTest.highwaySecondListTotalPage;
        IntelligentRoadTest.highwaySecondVM.totalCounts = IntelligentRoadTest.highwaySecondListTotalCount;
        IntelligentRoadTest.highwaySecondVM.currentPageNum = IntelligentRoadTest.highwaySecondListCurrentPage;
        IntelligentRoadTest.highwaySecondVM.startIndex = IntelligentRoadTest.startIndex;
        IntelligentRoadTest.highwaySecondVM.lastIndex = IntelligentRoadTest.lastIndex;
    }


}

/**********************************
 * @funcname IntelligentRoadTest.initHighwaySecondVM
 * @funcdesc 初始化高铁二层vue对象
 * @param
 * @return
 * @author 戴岭南
 * @create 2018/4/10 10:35
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.initRailSecondVM = function IntelligentRoadTest_initRailSecondVM() {
    if (IntelligentRoadTest.railSecondVM == null) {
        IntelligentRoadTest.railSecondVM = new Vue({
            el: '#showRailListDiv',//楚佳修改
            data: {
                railList: IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railSecondListCurrentResult, IntelligentRoadTest.railSecondListCurrentPage),
                totalPages: IntelligentRoadTest.railSecondListTotalPage,
                totalCounts: IntelligentRoadTest.railSecondListTotalCount,
                currentPageNum: IntelligentRoadTest.railSecondListCurrentPage,
                startIndex: IntelligentRoadTest.startIndex,
                lastIndex: IntelligentRoadTest.lastIndex,
                isSuiDao : IntelligentRoadTest.isSuiDao,
                city : IntelligentRoadTest.roadCurrentQueryCity //将当前查询的地市
            },
            methods: {
                showMessage: function (item, index) {
                    var pointStar = new BMap.Point( item.longitude_mid,item.latitude_mid);
                    if(IntelligentRoadTest.map.getZoom() < 17){
                        IntelligentRoadTest.map.centerAndZoom(pointStar ,17);
                    }else{
                        IntelligentRoadTest.map.panTo(pointStar);
                    }
                    item = IntelligentRoadTest.changeRailBaiduLocationToGPS(item); //将item中的百度经纬度转成GPS之后赋值给新的属性
                    IntelligentRoadTest.osmMkData = item;
                    // IntelligentRoadTest.drawDetailsMk(item, index);
                    IntelligentRoadTest.isNeedCenterAndZoom = true; //是否需要缩放地图
                    var startPoint =new BMap.Point(item.longitude_max ,  item.latitude_max);
                    var endPoint =new  BMap.Point(item.longitude_min ,  item.latitude_min);
                    IntelligentRoadTest.roadStarEndMk(startPoint , endPoint); //绘制起止点
                    IntelligentRoadTest.mkIndex = index;
                    IntelligentRoadTest.goRailCompleteMessage();

                    // IntelligentRoadTest.map.setCenter(pointStar);
                    var echartTitle = "历史30天覆盖变化";
                    var isLP = IntelligentRoadTest.railVM.type;
                    if(IntelligentRoadTest.roadStatus == 3){ //连片
                        isLP = true;
                    }else{
                        isLP = false;
                    }
                    IntelligentRoadTest.getRoad30DayData(item.road_id, item.line_id, 2, isLP);
                    var city_id = noceUtil.city_LATN_ID[item.city];
                    if (isLP) {
                        //连片线段点击时，查询该连片线段所有20米线段  并进入对应弱连片线段的详情页
                        IntelligentRoadTest.loadContinueLineMeterData(IntelligentRoadTest.day, 2, city_id, item.road_id, item.contain_ids);
                    } else {
                        IntelligentRoadTest.loadSplitLineSmallLine(item.road_id, item.line_id, city_id, IntelligentRoadTest.day, 2);//查询500米分段的20米数据
                    }
                    if (!IntelligentRoadTest.isScreenCompared && IntelligentRoadTest.isAddMessageEvent) {//不是在分屏页，并且点击过分屏
                        if (!windowScreeen.closed) {//如果窗口没有关闭，需要进行同步信息，如果已经关闭，什么都不用做
                            // windowScreeen.focus();
                            item.isLP = isLP;
                            if (!isLP) {
                                IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'railway');
                            } else {
                                item.day = IntelligentRoadTest.day;
                                IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'railway');
                            }

                        }
                    }
                    var nearTOP5 = [];
                    if (item.ne_sector_set != null && item.ne_sector_set != "") {
                        var to5DataArr = item.ne_sector_set.split("@");
                        for (var i = 0; i < to5DataArr.length; i++) {
                            nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
                        }
                        nearTOP5 = IntelligentRoadTest.sortNRTopCell(nearTOP5);
                    }
                    var mrNearTOP5 = [];
                    if (item.sector_set != null && item.sector_set != "") {
                        var mrTo5DataArr = item.sector_set.split("@");
                        for (var k = 0; k < mrTo5DataArr.length; k++) {
                            mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
                        }
                        mrNearTOP5 = IntelligentRoadTest.sortMRTopCell(mrNearTOP5);
                    }
                    if (IntelligentRoadTest.checkIfHasSameSector(nearTOP5, mrNearTOP5)) {
                        item.isHasSameSector = true;
                    }
                    $(".linkCell").attr("title", "显示连线");
                    $(".linkCell").removeClass("linkCellHover");
                    if (IntelligentRoadTest.railCompleteVM == null) {
                        IntelligentRoadTest.railCompleteVM = new Vue({
                            el: '#showRailCompleteMessage',
                            data: {
                                railData: item,
                                dataIndex: index,
                                nrTop5Cell: nearTOP5,
                                mrTop5Cell: mrNearTOP5,
                                title: echartTitle,
                                isShowAlarmInfo: IntelligentRoadTest.isShowAlarmInfoMessage,
                                alarm_dataObj: {}, //用于存放从告警表中获取到的指标的对象
                                alaram_title: "工单监测",
                                uname: IntelligentRoadTest.currentUser,
                                isHide30DayLine: isLP
                            },
                            methods: {
                                railPosition: function (item) {
                                    // IntelligentRoadTest.railPositiong(item);
                                    // var pointStar = new L.latLng(item.latitude_min, item.longitude_min);
                                    // IntelligentRoadTest.OsmMap.setView(pointStar);

                                    var pointStar = new BMap.Point(item.longitude_min,item.latitude_min);
                                    IntelligentRoadTest.map.setCenter(pointStar);
                                },
                                editRailMessage: function (item) {
                                    IntelligentRoadTest.railEdit(item);
                                },
                                deleteRail: function (item) {
                                    IntelligentRoadTest.wantDeleteConcern = item;
                                    $("#modal-rail").show();
                                },
                                viewRailLog: function (item) {
                                    IntelligentRoadTest.railLog(item);
                                },
                                gotoRailSevenEchart: function (item) {
                                    IntelligentRoadTest.railSevenLine(item);
                                },
                                showDetailInfo: function (event) {
                                    IntelligentRoadTest.showDetailInfo(event);
                                },
                                showLinkCell: function (event, item, type) {
                                    //type=1最近小区，type=2 接入扇区
                                    /*if ($(event.currentTarget).hasClass("linkCellHover")) {
                                        $(event.currentTarget).attr("title", "显示连线");
                                        $(event.currentTarget).removeClass("linkCellHover");
                                        if (type == 1) {
                                            IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
                                        } else if (type == 2) {
                                            IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
                                        }
                                    } else {
                                        $(event.currentTarget).attr("title", "隐藏连线");
                                        $(event.currentTarget).addClass("linkCellHover");

                                        var mid_lng = item.longitude_mid;
                                        var mid_lat = item.latitude_mid;
                                        var centerPoint = new L.LatLng(mid_lat, mid_lng);
                                        if (type == 1) {
                                            IntelligentRoadTest.showNrTop5CellForMapByOsm(centerPoint, item.ne_sector_set);
                                        } else if (type == 2) {
                                            IntelligentRoadTest.showMrNrTop5CellForMapByOsm(centerPoint, item.sector_set);
                                        }
                                    }*/
                                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                                        $(event.currentTarget).attr("title", "显示连线");
                                        $(event.currentTarget).removeClass("linkCellHover");
                                        if (type == 1) {
                                            IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                                        } else if (type == 2) {
                                            IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                                        }
                                    } else {
                                        $(event.currentTarget).attr("title", "隐藏连线");
                                        $(event.currentTarget).addClass("linkCellHover");

                                        var mid_lng = item.longitude_mid;
                                        var mid_lat = item.latitude_mid;
                                        var centerPoint = new BMap.Point(mid_lng, mid_lat);
                                        if (type == 1) {
                                            // IntelligentRoadTest.showNrTop5CellForMap(centerPoint,item.top5_sector_set);
                                            IntelligentRoadTest.showNrTop5CellForMap(centerPoint, item.ne_sector_set);

                                        } else if (type == 2) {
                                            IntelligentRoadTest.showMrNrTop5CellForMap(centerPoint, item.sector_set);
                                        }
                                    }
                                },
                                gotoShowSectorMessage: function (sectorDate) {
                                    IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                                },
                                gotoKPIList: function (item) {
                                    if (item.sector_set != null) {
                                        var sectorArr = item.sector_set.split("@");
                                        showOrHideInputImage(2);
                                        IntelligentRoadTest.loadKPIListData(sectorArr);
                                        $("#kpiBackPoor").html("返回上一级");
                                    }
                                }
                            }
                        });
                    } else {
                        IntelligentRoadTest.railCompleteVM.railData = item;
                        IntelligentRoadTest.railCompleteVM.dataIndex = index;
                        IntelligentRoadTest.railCompleteVM.nrTop5Cell = nearTOP5;
                        IntelligentRoadTest.railCompleteVM.mrTop5Cell = mrNearTOP5;
                        IntelligentRoadTest.railCompleteVM.title = echartTitle;
                        IntelligentRoadTest.railCompleteVM.isHide30DayLine = isLP;
                        IntelligentRoadTest.railCompleteVM.isShowAlarmInfo = IntelligentRoadTest.isShowAlarmInfoMessage;
                        IntelligentRoadTest.railCompleteVM.isSuiDao = IntelligentRoadTest.isSuiDao;
                    }
                    //增加查询工单指标的方法
                    if (IntelligentRoadTest.isShowAlarmInfoMessage == true) {
                        IntelligentRoadTest.getLineObjectAlarmInfoData("天翼蓝鹰高铁", item.line_id, IntelligentRoadTest.day);
                    }
                },
                lastOrNext: function (type) {
                    if (type == 0) {
                        //上一页
                        if (IntelligentRoadTest.railSecondListCurrentPage > 1) {
                            IntelligentRoadTest.railSecondListCurrentPage = IntelligentRoadTest.railSecondListCurrentPage - 1;
                            IntelligentRoadTest.railSecondVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railSecondListCurrentResult, IntelligentRoadTest.railSecondListCurrentPage);
                            IntelligentRoadTest.railSecondVM.currentPageNum = IntelligentRoadTest.railSecondListCurrentPage;
                            IntelligentRoadTest.railSecondVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.railSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        } else {
                            alert("当前页是第一页");
                        }
                    } else {
                        if (IntelligentRoadTest.railSecondListCurrentPage < IntelligentRoadTest.railSecondListTotalPage) {
                            IntelligentRoadTest.railSecondListCurrentPage = IntelligentRoadTest.railSecondListCurrentPage + 1;
                            IntelligentRoadTest.railSecondVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railSecondListCurrentResult, IntelligentRoadTest.railSecondListCurrentPage);
                            IntelligentRoadTest.railSecondVM.currentPageNum = IntelligentRoadTest.railSecondListCurrentPage;
                            IntelligentRoadTest.railSecondVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.railSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                    }
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.railSecondVM.railList,10);
                },
                gotoPage: function () {
                    var page = $("#railSecondListPage").val(); //楚佳修改
                    page = parseInt(page);
                    if (page > 0 && page <= IntelligentRoadTest.railSecondListTotalPage) {
                        IntelligentRoadTest.railSecondListCurrentPage = page;
                        IntelligentRoadTest.railSecondVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railSecondListCurrentResult, IntelligentRoadTest.railSecondListCurrentPage);
                        IntelligentRoadTest.railSecondVM.currentPageNum = IntelligentRoadTest.railSecondListCurrentPage;
                        IntelligentRoadTest.railSecondVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.railSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                    }
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.railSecondVM.railList,10);
                },
                goLast: function () {
                    IntelligentRoadTest.railSecondListCurrentPage = IntelligentRoadTest.railSecondListTotalPage;
                    IntelligentRoadTest.railSecondVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railSecondListCurrentResult, IntelligentRoadTest.railSecondListCurrentPage);
                    IntelligentRoadTest.railSecondVM.currentPageNum = IntelligentRoadTest.railSecondListCurrentPage;
                    IntelligentRoadTest.railSecondVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.railSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.railSecondVM.railList,10);
                },
                goFirst: function () {
                    IntelligentRoadTest.railSecondListCurrentPage = 1;
                    IntelligentRoadTest.railSecondVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railSecondListCurrentResult, IntelligentRoadTest.railSecondListCurrentPage);
                    IntelligentRoadTest.railSecondVM.currentPageNum = IntelligentRoadTest.railSecondListCurrentPage;
                    IntelligentRoadTest.railSecondVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.railSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.railSecondVM.railList,10);
                },
                turnMk: function (index, item) {
                    //高铁第二层触摸
                    // IntelligentRoadTest.showStarEndMarke(item);
                    IntelligentRoadTest.osmTableStyle(index);
                    if(IntelligentRoadTest.roadStatus != 3 && IntelligentRoadTest.roadStatus != 1){ //不是隧道和连片
                        IntelligentRoadTest.roadLineUtilMouseMove([item]);
                    }else{
                        item.object_id = item.line_id;
                        IntelligentRoadTest.roadContinueUtilMouseMove([item]);
                    }
                }
            }
        });
    } else {
        IntelligentRoadTest.railSecondVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railSecondListCurrentResult, IntelligentRoadTest.railSecondListCurrentPage);
        IntelligentRoadTest.railSecondVM.totalPages = IntelligentRoadTest.railSecondListTotalPage;
        IntelligentRoadTest.railSecondVM.totalCounts = IntelligentRoadTest.railSecondListTotalCount;
        IntelligentRoadTest.railSecondVM.currentPageNum = IntelligentRoadTest.railSecondListCurrentPage;
        IntelligentRoadTest.railSecondVM.startIndex = IntelligentRoadTest.startIndex;
        IntelligentRoadTest.railSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
        IntelligentRoadTest.railSecondVM.isSuiDao = IntelligentRoadTest.isSuiDao;
        IntelligentRoadTest.railSecondVM.city = IntelligentRoadTest.roadCurrentQueryCity;
    }
}

//初始化市政路Vue对象
IntelligentRoadTest.initCityRoadSecondVM = function IntelligentRoadTest_initCityRoadSecondVM() {
    if (IntelligentRoadTest.cityRoadSecondVM == null) {
        IntelligentRoadTest.cityRoadSecondVM = new Vue({
            el: '#showCityRoadListDiv',//楚佳修改
            data: {
                cityRoadList: IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadSecondListCurrentResult, IntelligentRoadTest.cityRoadSecondListCurrentPage),
                totalPages: IntelligentRoadTest.cityRoadSecondListTotalPage,
                totalCounts: IntelligentRoadTest.cityRoadSecondListTotalCount,
                currentPageNum: IntelligentRoadTest.cityRoadSecondListCurrentPage,
                startIndex: IntelligentRoadTest.startIndex,
                lastIndex: IntelligentRoadTest.lastIndex
            },
            methods: {
                showMessage: function (item, index) { //进入详情页
                    var pointStar = new L.latLng(item.latitude_min, item.longitude_min);
                    IntelligentRoadTest.osmMkData = item;
                    IntelligentRoadTest.mkIndex = index;
                    IntelligentRoadTest.goCityRoadCompleteMessage();

                    IntelligentRoadTest.OsmMap.setView(pointStar);
                    var echartTitle = "历史30天覆盖变化";
                    var isLP = false;
                    if (IntelligentRoadTest.cityRoadVM != null && IntelligentRoadTest.cityRoadVM.type != null) {
                        isLP = IntelligentRoadTest.cityRoadVM.type;
                    }
                    if (!IntelligentRoadTest.isScreenCompared && IntelligentRoadTest.isAddMessageEvent) {//不是在分屏页，并且点击过分屏
                        if (!windowScreeen.closed) {//如果窗口没有关闭，需要进行同步信息，如果已经关闭，什么都不用做
                            // windowScreeen.focus();
                            item.isLP = isLP;
                            if (!isLP) {
                                IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'cityRoad');
                            } else {
                                item.day = IntelligentRoadTest.day;
                                IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'cityRoad');
                            }

                        }
                    }
                    IntelligentRoadTest.getRoad30DayData(item.road_id, item.line_id, 3, isLP);
                    var city_id = noceUtil.city_LATN_ID[item.city];

                    if (isLP) {
                        //连片线段点击时，查询该连片线段所有20米线段  并进入对应弱连片线段的详情页
                        IntelligentRoadTest.loadContinueLineMeterData(IntelligentRoadTest.day, 3, city_id, item.road_id, item.contain_ids);
                    } else {
                        IntelligentRoadTest.loadSplitLineSmallLine(item.road_id, item.line_id, city_id, IntelligentRoadTest.day, 3);//查询500米分段的20米数据
                    }

                    var nearTOP5 = [];
                    if (item.ne_sector_set != null && item.ne_sector_set != "") {
                        var to5DataArr = item.ne_sector_set.split("@");
                        for (var i = 0; i < to5DataArr.length; i++) {
                            nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
                        }
                        nearTOP5 = IntelligentRoadTest.sortNRTopCell(nearTOP5);
                    }
                    var mrNearTOP5 = [];
                    if (item.sector_set != null && item.sector_set != "") {
                        var mrTo5DataArr = item.sector_set.split("@");
                        for (var k = 0; k < mrTo5DataArr.length; k++) {
                            mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
                        }
                        mrNearTOP5 = IntelligentRoadTest.sortMRTopCell(mrNearTOP5);
                    }
                    if (IntelligentRoadTest.checkIfHasSameSector(nearTOP5, mrNearTOP5)) {
                        item.isHasSameSector = true;
                    }
                    $(".linkCell").attr("title", "显示连线");
                    $(".linkCell").removeClass("linkCellHover");
                    if (IntelligentRoadTest.cityRoadCompleteVM == null) {
                        IntelligentRoadTest.cityRoadCompleteVM = new Vue({
                            el: '#showCityRoadCompleteMessage',
                            data: {
                                cityRoadData: item,
                                dataIndex: index,
                                nrTop5Cell: nearTOP5,
                                mrTop5Cell: mrNearTOP5,
                                title: echartTitle,
                                isShowAlarmInfo: IntelligentRoadTest.isShowAlarmInfoMessage,
                                alarm_dataObj: {}, //用于存放从告警表中获取到的指标的对象
                                alaram_title: "工单监测",
                                uname: IntelligentRoadTest.currentUser,
                                isHide30DayLine: isLP
                            },
                            methods: {
                                cityRoadPosition: function (item) {
                                    // IntelligentRoadTest.cityRoadPositiong(item);
                                    var pointStar = new L.latLng(item.latitude_min, item.longitude_min);
                                    IntelligentRoadTest.OsmMap.setView(pointStar);
                                },
                                editCityRoadMessage: function (item) {
                                    IntelligentRoadTest.cityRoadEdit(item);
                                },
                                deleteCityRoad: function (item) {
                                    IntelligentRoadTest.wantDeleteConcern = item;
                                    $("#modal-cityRoad").show();
                                },
                                viewCityRoadLog: function (item) {
                                    IntelligentRoadTest.cityRoadLog(item);
                                },
                                gotoCityRoadSevenEchart: function (item) {
                                    IntelligentRoadTest.cityRoadSevenLine(item);
                                },
                                showDetailInfo: function (event) {
                                    IntelligentRoadTest.showDetailInfo(event);
                                },
                                showLinkCell: function (event, item, type) {
                                    //type=1最近小区，type=2 接入扇区
                                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                                        $(event.currentTarget).attr("title", "显示连线");
                                        $(event.currentTarget).removeClass("linkCellHover");
                                        if (type == 1) {
                                            IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
                                        } else if (type == 2) {
                                            IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
                                        }
                                    } else {
                                        $(event.currentTarget).attr("title", "隐藏连线");
                                        $(event.currentTarget).addClass("linkCellHover");
                                        var mid_lng = item.longitude_mid;
                                        var mid_lat = item.latitude_mid;
                                        var centerPoint = new L.LatLng(mid_lat, mid_lng);
                                        if (type == 1) {
                                            IntelligentRoadTest.showNrTop5CellForMapByOsm(centerPoint, item.ne_sector_set);
                                        } else if (type == 2) {
                                            IntelligentRoadTest.showMrNrTop5CellForMapByOsm(centerPoint, item.sector_set);
                                        }
                                    }
                                },
                                gotoShowSectorMessage: function (sectorDate) {
                                    IntelligentRoadTest.clickType = 1;
                                    IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                                },
                                gotoKPIList: function (item) {
                                    if (item.sector_set != null) {
                                        var sectorArr = item.sector_set.split("@");
                                        showOrHideInputImage(2);
                                        IntelligentRoadTest.loadKPIListData(sectorArr);
                                        $("#kpiBackPoor").html("返回上一级");
                                    }
                                }
                            }
                        });
                    } else {
                        IntelligentRoadTest.cityRoadCompleteVM.cityRoadData = item;
                        IntelligentRoadTest.cityRoadCompleteVM.dataIndex = index;
                        IntelligentRoadTest.cityRoadCompleteVM.nrTop5Cell = nearTOP5;
                        IntelligentRoadTest.cityRoadCompleteVM.mrTop5Cell = mrNearTOP5;
                        IntelligentRoadTest.cityRoadCompleteVM.title = echartTitle;
                        IntelligentRoadTest.cityRoadCompleteVM.isHide30DayLine = IntelligentRoadTest.cityRoadVM.type;
                        IntelligentRoadTest.cityRoadCompleteVM.isShowAlarmInfo = IntelligentRoadTest.isShowAlarmInfoMessage;
                    }
                    //增加查询工单指标的方法
                    if (IntelligentRoadTest.isShowAlarmInfoMessage == true) {
                        IntelligentRoadTest.getLineObjectAlarmInfoData("天翼蓝鹰市政路", item.line_id, IntelligentRoadTest.day);
                    }
                },
                lastOrNext: function (type) {
                    if (type == 0) {
                        //上一页
                        if (IntelligentRoadTest.cityRoadSecondListCurrentPage > 1) {
                            IntelligentRoadTest.cityRoadSecondListCurrentPage = IntelligentRoadTest.cityRoadSecondListCurrentPage - 1;
                            IntelligentRoadTest.cityRoadSecondVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadSecondListCurrentResult, IntelligentRoadTest.cityRoadSecondListCurrentPage);
                            IntelligentRoadTest.cityRoadSecondVM.currentPageNum = IntelligentRoadTest.cityRoadSecondListCurrentPage;
                            IntelligentRoadTest.cityRoadSecondVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.cityRoadSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        } else {
                            alert("当前页是第一页");
                        }
                    } else {
                        if (IntelligentRoadTest.cityRoadSecondListCurrentPage < IntelligentRoadTest.cityRoadSecondListTotalPage) {
                            IntelligentRoadTest.cityRoadSecondListCurrentPage = IntelligentRoadTest.cityRoadSecondListCurrentPage + 1;
                            IntelligentRoadTest.cityRoadSecondVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadSecondListCurrentResult, IntelligentRoadTest.cityRoadSecondListCurrentPage);
                            IntelligentRoadTest.cityRoadSecondVM.currentPageNum = IntelligentRoadTest.cityRoadSecondListCurrentPage;
                            IntelligentRoadTest.cityRoadSecondVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.cityRoadSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                    }
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.cityRoadSecondVM.cityRoadList,10);
                },
                gotoPage: function () {
                    var page = $("#cityRoadSecondListPage").val(); //楚佳修改
                    page = parseInt(page);
                    if (page > 0 && page <= IntelligentRoadTest.cityRoadSecondListTotalPage) {
                        IntelligentRoadTest.cityRoadSecondListCurrentPage = page;
                        IntelligentRoadTest.cityRoadSecondVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadSecondListCurrentResult, IntelligentRoadTest.cityRoadSecondListCurrentPage);
                        IntelligentRoadTest.cityRoadSecondVM.currentPageNum = IntelligentRoadTest.cityRoadSecondListCurrentPage;
                        IntelligentRoadTest.cityRoadSecondVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.cityRoadSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                    }
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.cityRoadSecondVM.cityRoadList,10);
                },
                goLast: function () {
                    IntelligentRoadTest.cityRoadSecondListCurrentPage = IntelligentRoadTest.cityRoadSecondListTotalPage;
                    IntelligentRoadTest.cityRoadSecondVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadSecondListCurrentResult, IntelligentRoadTest.cityRoadSecondListCurrentPage);
                    IntelligentRoadTest.cityRoadSecondVM.currentPageNum = IntelligentRoadTest.cityRoadSecondListCurrentPage;
                    IntelligentRoadTest.cityRoadSecondVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.cityRoadSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.cityRoadSecondVM.cityRoadList,10);
                },
                goFirst: function () {
                    IntelligentRoadTest.cityRoadSecondListCurrentPage = 1;
                    IntelligentRoadTest.cityRoadSecondVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadSecondListCurrentResult, IntelligentRoadTest.cityRoadSecondListCurrentPage);
                    IntelligentRoadTest.cityRoadSecondVM.currentPageNum = IntelligentRoadTest.cityRoadSecondListCurrentPage;
                    IntelligentRoadTest.cityRoadSecondVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.cityRoadSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.cityRoadSecondVM.cityRoadList,10);
                },
                turnMk: function (index, item) {
                    //市政路第二层触摸
                    IntelligentRoadTest.showStarEndMarke(item.latitude_min, item.longitude_min, item.latitude_max, item.longitude_max);
                    IntelligentRoadTest.osmTableStyle(index);
                }
            }
        });
    } else {
        IntelligentRoadTest.cityRoadSecondVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadSecondListCurrentResult, IntelligentRoadTest.cityRoadSecondListCurrentPage);
        IntelligentRoadTest.cityRoadSecondVM.totalPages = IntelligentRoadTest.cityRoadSecondListTotalPage;
        IntelligentRoadTest.cityRoadSecondVM.totalCounts = IntelligentRoadTest.cityRoadSecondListTotalCount;
        IntelligentRoadTest.cityRoadSecondVM.currentPageNum = IntelligentRoadTest.cityRoadSecondListCurrentPage;
        IntelligentRoadTest.cityRoadSecondVM.startIndex = IntelligentRoadTest.startIndex;
        IntelligentRoadTest.cityRoadSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
    }

}
/**********************************
 * @funcname IntelligentRoadTest.initHighwaySecondVM
 * @funcdesc 初始化地铁二层vue对象
 * @param
 * @return
 * @author 戴岭南
 * @create 2018/4/10 10:35
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.initMetroSecondVM = function IntelligentRoadTest_initMetroSecondVM() {
    if (IntelligentRoadTest.metroSecondVM == null) {
        IntelligentRoadTest.metroSecondVM = new Vue({
            el: '#showMetroListDiv',//楚佳修改
            data: {
                metroList: IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroSecondListCurrentResult, IntelligentRoadTest.metroSecondListCurrentPage),
                totalPages: IntelligentRoadTest.metroSecondListTotalPage,
                totalCounts: IntelligentRoadTest.metroSecondListTotalCount,
                currentPageNum: IntelligentRoadTest.metroSecondListCurrentPage,
                metroType: IntelligentRoadTest.metroType,
                startIndex: IntelligentRoadTest.startIndex,
                lastIndex: IntelligentRoadTest.lastIndex
            },
            methods: {
                showMessage: function (item, index) { //进入详情页
                    // var pointStar=new L.latLng(item.latitude_min,item.longitude_min);
                    // IntelligentRoadTest.OsmMap.setView(pointStar,IntelligentRoadTest.OsmMap.getZoom());


                    IntelligentRoadTest.mkIndex = index;
                    if (IntelligentRoadTest.metroIndex != 4) {
                        IntelligentRoadTest.goMetroCompleteMessage();
                    }
                    if (!IntelligentRoadTest.isScreenCompared && IntelligentRoadTest.isAddMessageEvent) {//不是在分屏页，并且点击过分屏
                        if (!windowScreeen.closed) {//如果窗口没有关闭，需要进行同步信息，如果已经关闭，什么都不用做
                            // windowScreeen.focus();
                            IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'metro');
                        }
                    }
                    var echartTitle = "历史30天覆盖变化";
                    // IntelligentRoadTest.getMetro30DayData(item.line_id, item.from_station_id, item.to_station_id, item.mr_flag);
                    IntelligentRoadTest.getMetro30DayCoverData(item.from_station_id, item.to_station_id , IntelligentRoadTest.day);
                    var nearTOP5 = [];
                    if (item.nc_sector_set != null && item.nc_sector_set != "") {
                        var to5DataArr = item.nc_sector_set.split("@");
                        for (var i = 0; i < to5DataArr.length; i++) {
                            nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
                        }
                        nearTOP5 = IntelligentRoadTest.sortNRTopCell(nearTOP5);
                    }
                    var mrNearTOP5 = [];
                    if (item.sector_set != null && item.sector_set != "") {
                        var mrTo5DataArr = item.sector_set.split("@");
                        for (var k = 0; k < mrTo5DataArr.length; k++) {
                            mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
                        }
                        mrNearTOP5 = IntelligentRoadTest.sortMRTopCell(mrNearTOP5);
                    }
                    if (IntelligentRoadTest.checkIfHasSameSector(nearTOP5, mrNearTOP5)) {
                        item.isHasSameSector = true;
                    }
                    if (item.mr_flag == 2) {
                        item.mr_flag_name = "双向综合";
                    } else if (item.mr_flag == 1) {
                        item.mr_flag_name = "正向";
                    } else {
                        item.mr_flag_name = "反向";
                    }
                    $(".linkCell").attr("title", "显示连线");
                    $(".linkCell").removeClass("linkCellHover");
                    if (IntelligentRoadTest.metroCompleteVM == null) {
                        IntelligentRoadTest.metroCompleteVM = new Vue({
                            el: '#showMetroCompleteMessage',
                            data: {
                                metroData: item,
                                dataIndex: index,
                                nrTop5Cell: nearTOP5,
                                mrTop5Cell: mrNearTOP5,
                                title: echartTitle,
                                uname: IntelligentRoadTest.currentUser
                            },
                            methods: {
                                metroPosition: function (item) {
                                    IntelligentRoadTest.metroPositiong(item);
                                },
                                editMetroMessage: function (item) {
                                    IntelligentRoadTest.metroEdit(item);
                                },
                                deleteMetro: function (item) {
                                    IntelligentRoadTest.wantDeleteConcern = item;
                                    $("#modal-metro").show();
                                },
                                viewMetroLog: function (item) {
                                    IntelligentRoadTest.metroLog(item);
                                },
                                gotoMetroSevenEchart: function (item) {
                                    IntelligentRoadTest.metroSevenLine(item);
                                },
                                showDetailInfo: function (event) {
                                    IntelligentRoadTest.showDetailInfo(event);
                                },
                                showLinkCell: function (event, item, type) {
                                    //type=1最近小区，type=2 接入扇区
                                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                                        $(event.currentTarget).attr("title", "显示连线");
                                        $(event.currentTarget).removeClass("linkCellHover");
                                        if (type == 1) {
                                            IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                                        } else if (type == 2) {
                                            IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                                        }
                                    } else {
                                        $(event.currentTarget).attr("title", "隐藏连线");
                                        $(event.currentTarget).addClass("linkCellHover");

                                        var mid_lng = item.longitude_mid;
                                        var mid_lat = item.latitude_mid;
                                        var centerPoint = new BMap.Point(mid_lng, mid_lat);
                                        if (type == 1) {
                                            IntelligentRoadTest.showNrTop5CellForMap(centerPoint, item.nc_sector_set);
                                        } else if (type == 2) {
                                            IntelligentRoadTest.showMrNrTop5CellForMap(centerPoint, item.sector_set);
                                        }
                                    }
                                },
                                gotoShowSectorMessage: function (sectorDate) {
                                    IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                                },
                                changeMrFlagMessage: function (event, item) {
                                    IntelligentRoadTest.metroChangeFlag(event, item);
                                }
                            }
                        });
                    } else {
                        IntelligentRoadTest.metroCompleteVM.metroData = item;
                        IntelligentRoadTest.metroCompleteVM.dataIndex = index;
                        IntelligentRoadTest.metroCompleteVM.nrTop5Cell = nearTOP5;
                        IntelligentRoadTest.metroCompleteVM.mrTop5Cell = mrNearTOP5;
                        IntelligentRoadTest.metroCompleteVM.title = echartTitle;
                    }
                },
                lastOrNext: function (type) {
                    if (type == 0) {
                        //上一页
                        if (IntelligentRoadTest.metroSecondListCurrentPage > 1) {
                            IntelligentRoadTest.metroSecondListCurrentPage = IntelligentRoadTest.metroSecondListCurrentPage - 1;
                            IntelligentRoadTest.metroSecondVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroSecondListCurrentResult, IntelligentRoadTest.metroSecondListCurrentPage);
                            IntelligentRoadTest.metroSecondVM.currentPageNum = IntelligentRoadTest.metroSecondListCurrentPage;
                            IntelligentRoadTest.metroSecondVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.metroSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        } else {
                            alert("当前页是第一页");
                        }
                    } else {
                        if (IntelligentRoadTest.metroSecondListCurrentPage < IntelligentRoadTest.metroSecondListTotalPage) {
                            IntelligentRoadTest.metroSecondListCurrentPage = IntelligentRoadTest.metroSecondListCurrentPage + 1;
                            IntelligentRoadTest.metroSecondVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroSecondListCurrentResult, IntelligentRoadTest.metroSecondListCurrentPage);
                            IntelligentRoadTest.metroSecondVM.currentPageNum = IntelligentRoadTest.metroSecondListCurrentPage;
                            IntelligentRoadTest.metroSecondVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.metroSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                    }
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.metroSecondVM.metroList,10);
                },
                gotoPage: function () {
                    var page = $("#metroSecondListPage").val(); //楚佳修改
                    page = parseInt(page);
                    if (page > 0 && page <= IntelligentRoadTest.metroSecondListTotalPage) {
                        IntelligentRoadTest.metroSecondListCurrentPage = page;
                        IntelligentRoadTest.metroSecondVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroSecondListCurrentResult, IntelligentRoadTest.metroSecondListCurrentPage);
                        IntelligentRoadTest.metroSecondVM.currentPageNum = IntelligentRoadTest.metroSecondListCurrentPage;
                        IntelligentRoadTest.metroSecondVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.metroSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                    }
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.metroSecondVM.metroList,10);
                },
                goLast: function () {
                    IntelligentRoadTest.metroSecondListCurrentPage = IntelligentRoadTest.metroSecondListTotalPage;
                    IntelligentRoadTest.metroSecondVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroSecondListCurrentResult, IntelligentRoadTest.metroSecondListCurrentPage);
                    IntelligentRoadTest.metroSecondVM.currentPageNum = IntelligentRoadTest.metroSecondListCurrentPage;
                    IntelligentRoadTest.metroSecondVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.metroSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.metroSecondVM.metroList,10);
                },
                goFirst: function () {
                    IntelligentRoadTest.metroSecondListCurrentPage = 1;
                    IntelligentRoadTest.metroSecondVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroSecondListCurrentResult, IntelligentRoadTest.metroSecondListCurrentPage);
                    IntelligentRoadTest.metroSecondVM.currentPageNum = IntelligentRoadTest.metroSecondListCurrentPage;
                    IntelligentRoadTest.metroSecondVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.metroSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.metroSecondVM.metroList,10);
                },
                turnMk: function (index, item) {
                    //地铁第二层触摸
                    IntelligentRoadTest.showStarEndMarke(item);
                }
            }
        });
    } else {
        IntelligentRoadTest.metroSecondVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroSecondListCurrentResult, IntelligentRoadTest.metroSecondListCurrentPage);
        IntelligentRoadTest.metroSecondVM.totalPages = IntelligentRoadTest.metroSecondListTotalPage;
        IntelligentRoadTest.metroSecondVM.totalCounts = IntelligentRoadTest.metroSecondListTotalCount;
        IntelligentRoadTest.metroSecondVM.currentPageNum = IntelligentRoadTest.metroSecondListCurrentPage;
        IntelligentRoadTest.metroSecondVM.startIndex = IntelligentRoadTest.startIndex;
        IntelligentRoadTest.metroSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
        IntelligentRoadTest.metroSecondVM.metroType = IntelligentRoadTest.metroType;
    }
}

//
/**********************************
 * @funcnameIntelligentRoadTest.triggleFilter
 * @funcdesc 重查数据后触发之前过滤方法
 * @param {String} SelectName 选中的分类
 * @param {object} flexCol 各分类对应的dom元素
 * @return
 * @author  戴岭南
 * @create 2018/4/10 10:37
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.triggleFilter = function IntelligentRoadTest_triggleFilter(SelectName, flexCol) {

    for (var i = 0; i < flexCol.length; i++) {
        var text = flexCol.eq(i).text();
        if (text == SelectName) {
            if (SelectName != "全部分类") {
                flexCol.eq(i).siblings(".selected").click();
            } else {
                flexCol.eq(1).click();
            }
        }
    }
}


/**********************************
 * @funcname IntelligentRoadTest.filterArea
 * @funcdesc 区域类型排序方法
 * @param {array} data 需要排序的数据
 * @param {String} text 需要排序的方式
 * @return {array} tempData  排序后的数据
 * @author  戴岭南
 * @create 2018/4/10 10:39
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.filterArea = function IntelligentRoadTest_filterArea(data, text) {
    IntelligentRoadTest.tempAreaFliterObj = crossfilter([]);
    IntelligentRoadTest.tempAreaFliterObj.add(data);
    if (text == "推荐排序") {
        var areaFilter = IntelligentRoadTest.tempAreaFliterObj.dimension(function (d) {
            return d.pc_orderno_tot
        });
    } else if (text == "下切优先") {
        var areaFilter = IntelligentRoadTest.tempAreaFliterObj.dimension(function (d) {
            return d.lte_to_3g_orderno == null ? 10000 : d.lte_to_3g_orderno;
        });
    } else if (text == "流量优先") {
        var areaFilter = IntelligentRoadTest.tempAreaFliterObj.dimension(function (d) {
            return d.flow_4g_orderno == null ? 10000 : d.flow_4g_orderno;
        });
    } else if (text == "感知优先") {
        var areaFilter = IntelligentRoadTest.tempAreaFliterObj.dimension(function (d) {
            return d.ce_good_ratio_orderno == null ? 10000 : d.ce_good_ratio_orderno;
        });
    } else if (text == "弱覆盖优先") {
        var areaFilter = IntelligentRoadTest.tempAreaFliterObj.dimension(function (d) {
            return d.poor_grid_nums_orderno == null ? 10000 : d.poor_grid_nums_orderno;
        });
    } else if (text == "用户数优先") {
        var areaFilter = IntelligentRoadTest.tempAreaFliterObj.dimension(function (d) {
            return d.user_4g_orderno == null ? 10000 : d.user_4g_orderno;
        });
    }

    if (text == "推荐排序") {
        var tempData = areaFilter.top(IntelligentRoadTest.tempAreaFliterObj.size());
    } else {
        var tempData = areaFilter.bottom(IntelligentRoadTest.tempAreaFliterObj.size());
    }
    return tempData;
}

/**********************************
 * @funcname IntelligentRoadTest.filterArea
 * @funcdesc 高速、高铁、市政路 第二层排序
 * @param {array} data 需要排序的数据
 * @param {String} text 需要排序的方式
 * @return {array} tempData  排序后的数据
 * @author  戴岭南
 * @create 2018/4/10 10:39
 * @modifier
 * @modify
 ***********************************/
//
IntelligentRoadTest.filterSecondLine = function IntelligentRoadTest_filterSecondLine(data, text) {

    IntelligentRoadTest.tempHighValueFliterObj = crossfilter([]);
    if(IntelligentRoadTest.index != 8){ //非高铁
        IntelligentRoadTest.tempHighValueFliterObj.add(data);
        if (text == "推荐排序") {
            var highValueFilter = IntelligentRoadTest.tempHighValueFliterObj.dimension(function (d) {
                return d.pc_orderno_tot
            });
        } else if (text == "下切优先") {
            var highValueFilter = IntelligentRoadTest.tempHighValueFliterObj.dimension(function (d) {
                return d.lte_to_3g_tot;
            });
        } else if (text == "流量优先") {
            var highValueFilter = IntelligentRoadTest.tempHighValueFliterObj.dimension(function (d) {
                return d.flow_4g_tot;
            });
        } else if (text == "感知优先") {
            var highValueFilter = IntelligentRoadTest.tempHighValueFliterObj.dimension(function (d) {
                return d.ce_good_ratio_avg;
            });
        } else if (text == "弱覆盖优先") {
            var highValueFilter = IntelligentRoadTest.tempHighValueFliterObj.dimension(function (d) {
                return d.poor_cov_length_orderno == null ? 10000 : d.poor_cov_length_orderno;
            });
        } else if (text == "用户数优先") {
            var highValueFilter = IntelligentRoadTest.tempHighValueFliterObj.dimension(function (d) {
                return d.user_4g_avg;
            });
        }


        if (text == "弱覆盖优先" || text == "感知优先") {
            var tempData = highValueFilter.bottom(IntelligentRoadTest.tempHighValueFliterObj.size());
        } else {
            var tempData = highValueFilter.top(IntelligentRoadTest.tempHighValueFliterObj.size());
        }
        return tempData;
    }else{ //高铁，需要修改为弱里程正序和弱里程反序。
        var goodData = []; //弱里程不为空的数据
        var badData = [];//弱里程为空的数据
        for(var i = 0; i < data.length; i++){
            if(!isNull(data[i].lt110_length)){
                goodData.push(data[i]);
            }else{
                badData.push(data[i]);
            }
        }
        IntelligentRoadTest.tempHighValueFliterObj.add(goodData);
        var filter = IntelligentRoadTest.tempHighValueFliterObj.dimension(function (d) {
            return d.lt110_length;
        });
        if (text == "弱里程反序") {
            var tempData = filter.top(IntelligentRoadTest.tempHighValueFliterObj.size());
        } else {
            var tempData = filter.bottom(IntelligentRoadTest.tempHighValueFliterObj.size());
        }
        tempData = tempData.concat(badData);
        return tempData;
    }



}

/**********************************
 * @funcname IntelligentRoadTest.filterArea
 * @funcdesc 高速、高铁、市政路 第一层排序
 * @param {array} data 需要排序的数据
 * @param {String} text 需要排序的方式
 * @return {array} tempData  排序后的数据
 * @author  戴岭南
 * @create 2018/4/10 10:39
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.filteFirstLine = function IntelligentRoadTest_filterFirstLine(data, text) {
    IntelligentRoadTest.tempHighValueFliterObj = crossfilter([]);
    IntelligentRoadTest.tempHighValueFliterObj.add(data);
    if(IntelligentRoadTest.index != 8){ //非高铁
        if (text == "名称优先") {
            var highValueFilter = IntelligentRoadTest.tempHighValueFliterObj.dimension(function (d) {
                var str = ConvertPinyin(d.road_name);
                return str
            });
        } else if (text == "弱占比优先") {
            var highValueFilter = IntelligentRoadTest.tempHighValueFliterObj.dimension(function (d) {
                return d.poor_ratio;
            });
        }

        if (text == "弱占比优先") {
            var tempData = highValueFilter.top(IntelligentRoadTest.tempHighValueFliterObj.size());
        } else {
            var tempData = highValueFilter.bottom(IntelligentRoadTest.tempHighValueFliterObj.size());
        }
        return tempData;
    }else{ //高铁要修改一下排序规则
        var filter = IntelligentRoadTest.tempHighValueFliterObj.dimension(function (d) {
            return d.lt110_length;
        });
        if (text == "弱里程反序") {
            var tempData = filter.top(IntelligentRoadTest.tempHighValueFliterObj.size());
        } else {
            var tempData = filter.bottom(IntelligentRoadTest.tempHighValueFliterObj.size());
        }
        return tempData;
    }
}


//-------------------戴岭南代码结束---------------------------
/**********************************
 * @funcname IntelligentRoadTest.loadGridAndPolygon
 * @funcdesc 点击弱区表中的弱区，加载该栅格的多边形和栅格数据
 * @param {string} day (input optional)
 日期
 * @param {string} object_id (input optional)
 弱区object_id
 * @param {string} cell_id (input optional)
 小区id
 * @return {null}
 * @author 郑文彬
 * @create 20171219
 ***********************************/
IntelligentRoadTest.loadPolygonData = function IntelligentRoadTest_loadPolygonData(day, object_id, cell_id) {
    var list = [["IntelligentRoadTestV2_Polygon", "DAY:" + day, "OBJECT_ID:" + object_id]];
    var funcList = [IntelligentRoadTest.showPolygonData];
    var database = [3];
    progressbarTwo.submitSql(list, funcList, database);

}
IntelligentRoadTest.showPolygonData = function IntelligentRoadTest_showPolygonData(data) {
    data = callBackChangeData(data);
    IntelligentRoadTest.showPolygon(data[0].gis_data_baidu);
}
/**********************************
 * @funcname IntelligentRoadTest.showPolygonAndLoadGrid
 * @funcdesc 绘制弱区多边形，并加载栅格数据
 * @param {object} data (input optional)
 弱区多边形数据
 * @return {null}
 * @author 郑文彬
 * @create 20171219
 ***********************************/
//IntelligentRoadTest.showPolygonAndLoadGrid=function IntelligentRoadTest_showPolygonAndLoadGrid(data){
//	data = callBackChangeData(data);
//	IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.polygon);
//	var varr=[];
//	var gis_data=data[0].gis_data;
//	var sp=gis_data.split('@');
//	var sumLon=0;
//	var sumLat=0;
//	for(var j=0;j<sp.length;j++){
//		var v=sp[j].split(',');
//		sumLon=sumLon+parseFloat(v[0]);
//		sumLat=sumLat+parseFloat(v[1]);
//		varr.push(new BMap.Point(v[0],v[1]));
//	}
//	var polygon = new BMap.Polygon(varr, {strokeColor:"#FF9900", strokeWeight:2, strokeOpacity:0.6,fillOpacity:0.1});  //创建多边形
//	IntelligentRoadTest.map.centerAndZoom(new BMap.Point(sumLon/sp.length,sumLat/sp.length),16);
//	IntelligentRoadTest.map.addOverlay(polygon);   //增加多边形
//	IntelligentRoadTest.polygon=polygon;
//	IntelligentRoadTest.loadGrid(data[0].day,data[0].city_id,data[0].country_id,data[0].object_id);
//	IntelligentRoadTest.openInfoWindowTwo(sumLon/sp.length,sumLat/sp.length,{"object_id":data[0].object_id,"day":data[0].day});
//}
///**********************************
// * @funcname IntelligentRoadTest.loadPoorAreaGrid
// * @funcdesc 查询扇区栅格数据
// * @param {string} day (input optional)
//      日期
// * @param {string} city_id (input optional)
//      城市id
// * @param {string} country_id (input optional)
//      区县id
// * @param {string} object_id (input optional)
//      弱区的object_id
// * @return {null}
// * @author 郑文彬
// * @create 20171219
// ***********************************/
IntelligentRoadTest.loadPoorAreaGrid = function IntelligentRoadTest_loadPoorAreaGrid(day, city_id, country_id, object_id, type, enodeb_id, cell_id) {
    if (type == 1) {
        IntelligentRoadTestSystemLayerV3.resetSectorGridType();
        IntelligentRoadTest.systemLayer.grid.thresholds.gridTypeIndex = IntelligentRoadTest.gridTypeIndex;
        IntelligentRoadTest.systemLayer.grid.thresholds.gridThresholds = IntelligentRoadTest.gridThresholds;
        IntelligentRoadTest.systemLayer.grid.band.gridBandIndex = IntelligentRoadTest.gridBandIndex;
        IntelligentRoadTest.systemLayer.grid.band.gridBand = IntelligentRoadTest.gridBand;
        localStorage.setItem("systemLayer", JSON.stringify(IntelligentRoadTest.systemLayer));
        IntelligentRoadTestSystemLayerV3.systemLayerObj=IntelligentRoadTest.systemLayer;

        var sqlList = [];
        var functionList = [];
        if (IntelligentRoadTest.isThreeNetStatus) {//4.21 DSI_AGPS_GRID_RSRP_M 三网数据
            var startRow = getPreMonth(day) + city_id + "_8_20_" + object_id + "_";
            var endRow = getPreMonth(day) + city_id + "_8_20_" + object_id + "_~";
            var cloumnsList = "i:a1,i:a9,i:a10,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a19,i:a23,i:a24,i:a27,i:a30,i:a34,i:a35,i:a38,i:a41,i:a45,i:a46";
            var list = ["IntelligentRoadTest_sector_Threegrid", "TABLENAME:" + "NOCE:DSI_AGPS_GRID_RSRP_M", "STARTROW:" + startRow, "ENDROW:" + endRow, "COLUMNLIST:" + cloumnsList];
            if (IntelligentRoadTest.maxlng_maxlat_minlng_minlatThree == startRow) {
                if (IntelligentRoadTest.gridThreeData) {
                    IntelligentRoadTestSystemLayerV3.showThreeGridByCanv(IntelligentRoadTest.gridThreeData);
                }
                return;
            } else {
                sqlList.push(list);
                functionList.push(IntelligentRoadTestSystemLayerV3.showThreeGridByCanv);
                IntelligentRoadTest.loadLayerNum += 1;
                progressbarTwo.submitSql(sqlList, functionList, [7]);
                IntelligentRoadTest.maxlng_maxlat_minlng_minlatThree = startRow;

            }
        } else {//4.30 DSI_MRO_SC_GRIgetddmmD_TOT_W 扇区栅格
            //DAY_AGPS_TYPE_eNodeB_ID_CELL_ID_GRID_NUM
            //0-全量，1-AGPS
            var gridType = IntelligentRoadTest.gridType;
            var agps_type = IntelligentRoadTest.gridType;
            var tableName = (IntelligentRoadTest.gridTime == "week") ? "DSI_MRO_SC_GRID_TOT_W" : "DSI_MRO_SC_GRID_TOT_D";
            // var mod=enodeb_id.toString().substr(enodeb_id.toString().length-2,2);
            var startRow = getddmm(day) + "_" + agps_type + "_" + enodeb_id + "_" + cell_id + "_";
            var endRow = getddmm(day) + "_" + agps_type + "_" + enodeb_id + "_" + cell_id + "_~";
            var cloumnsList = "i:a2,i:a4,i:a5,i:a6,i:a7,i:a8";
            var list = ["IntelligentRoadTest_06_gridV2", "TABLENAME:" + "NOCE:" + tableName, "STARTROW:" + startRow, "ENDROW:" + endRow, "COLUMNLIST:" + cloumnsList];
            if (IntelligentRoadTest.maxlng_maxlat_minlng_minlat == startRow + IntelligentRoadTest.gridTime) {
                if (IntelligentRoadTest.gridDataV2) {
                    IntelligentRoadTestSystemLayerV3.showSectorGridByCanv(IntelligentRoadTest.gridDataV2);
                }
                return;
            } else {
                sqlList.push(list);
                functionList.push(IntelligentRoadTestSystemLayerV3.showSectorGridByCanv);
                IntelligentRoadTest.loadLayerNum += 1;
                progressbarTwo.submitSql(sqlList, functionList, [7]);
                IntelligentRoadTest.maxlng_maxlat_minlng_minlat = startRow + IntelligentRoadTest.gridTime;
            }

        }

    }
}
///**********************************
// * @funcname IntelligentRoadTest.showGrid
// * @funcdesc 绘制栅格
// * @param {object} data (input optional)
//      栅格数据
// * @return {null}
// * @author 郑文彬
// * @create 20171219
// ***********************************/
//IntelligentRoadTest.showGrid=function IntelligentRoadTest_showGrid(data){
//	result = callBackChangeData(data);
//	IntelligentRoadTest.GridMap.clear();
//	IntelligentRoadTest.gridArr=[];
//	for(var i=0;i<result.length;i++){
//		var color='';
//		var maxLng = result[i]["i:a15"];// 最大经度
//		var maxLat = result[i]["i:a16"];// 最大纬度
//		var minLng = result[i]["i:a11"];// 最小经度
//		var minLat = result[i]["i:a12"];// 最小纬度
//		var coverageavg = result[i]["i:a27"];// 电信平均覆盖
//		var dataGis = [minLng,minLat,maxLng,maxLat,coverageavg];
//		IntelligentRoadTest.gridArr.push(dataGis);
//
//	}
//	IntelligentRoadTest.GridMap.draw(IntelligentRoadTest.gridArr);
//}
IntelligentRoadTest.suiDaoCompOverlay = {};
/**********************************
 * @funcname IntelligentRoadTest.openInfoWindow
 * @funcdesc 绘制若取marke上方的文本提示框
 * @param {string} lng (input optional)
 经度
 * @param {string} lat (input optional)
 纬度
 * @param {string} str (input optional)
 需要显示的文本
 * @return {null}
 * @author 郑文彬
 * @create 20171219
 ***********************************/
IntelligentRoadTest.openInfoWindow = function IntelligentRoadTest_openInfoWindow(lng, lat, str , isSuiDao ,z_index) {
    if(IntelligentRoadTest.roadStatus == 1){
        isSuiDao = true;
    }
    if(isSuiDao){
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.suiDaoCompOverlay);
    }else{
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlay);
    }
    $("#cirTip").hide();

    // 自定义覆盖物
    function ComplexCustomOverlay(point, text) {
        this._point = point;
        this._text = text;
    }

    ComplexCustomOverlay.prototype = new BMap.Overlay();
    var zindex = -4514976;
    if(z_index != null ){
        zindex = z_index;
    }
    ComplexCustomOverlay.prototype.initialize = function (map) {
        this._map = map;
        var tip = this._div = document.getElementById("cirTip");
        $(tip).html("");
        $("#cirTip").show();
        var span = document.createElement("span");
        tip.appendChild(span);
        span.appendChild(document.createTextNode(this._text));

        IntelligentRoadTest.map.getPanes().markerPane.appendChild(tip);

        return null;
    }
    ComplexCustomOverlay.prototype.draw = function () {
        var map = this._map;
        var pixel = map.pointToOverlayPixel(this._point);
//      this._div.style.left = pixel.x -65 + "px";
//      this._div.style.top  = pixel.y -80 + "px";
//      alert($('#cirTip').width()+" "+$('#cirTip').height());
        this._div.style.left = pixel.x - ($('#cirTip').width() / 2) - 14 + "px";
        this._div.style.top = pixel.y - ($('#cirTip').height()) - 50 + "px";
//      this._div.style.left = pixel.x  + "px";
//      this._div.style.top  = pixel.y + "px";
    }
    if(isSuiDao){
        IntelligentRoadTest.suiDaoCompOverlay = new ComplexCustomOverlay(new BMap.Point(lng, lat), str);
        IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.suiDaoCompOverlay);
    }else{
        var myCompOverlay = new ComplexCustomOverlay(new BMap.Point(lng, lat), str);
        IntelligentRoadTest.myCompOverlay = myCompOverlay;
        IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.myCompOverlay);
    }
}

IntelligentRoadTest.openInfoWindowTwoTest = function IntelligentRoadTest_openInfoWindowTwo(lng, lat, obj) {
    if (IntelligentRoadTest.isBackList) {
        IntelligentRoadTest.isBackList = false;
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlayTwo);
        $("#cirTipLeft").hide();
        return;
    }
    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlayTwo);
    $("#cirTipLeft").hide();
    if (lng == 0 || lat == 0 || lng == null || lat == null || lng == undefined || lat == undefined) {
        return;
    }

    // 自定义覆盖物
    function ComplexCustomOverlay(point, text) {
        this._point = point;
        this._text = text;
    }

    ComplexCustomOverlay.prototype = new BMap.Overlay();
    var zindex = -4514976;
    ComplexCustomOverlay.prototype.initialize = function (map) {
        this._map = map;
        var tip = this._div = document.getElementById("cirTipLeft");
        $(tip).html("");
        $("#cirTipLeft").show();
        var ul = document.createElement("ul");
        tip.appendChild(ul);
        for (var i = 0; i < obj.length; i++) {
            if (obj[i].val != undefined) {
                var li = document.createElement("li");
                var dom1 = document.createTextNode(obj[i].key + ":" + obj[i].val);
                if (obj[i].key == "") {
                    dom1 = document.createTextNode(obj[i].val);
                }
                li.appendChild(dom1);
                ul.appendChild(li);
            }
        }
        IntelligentRoadTest.map.getPanes().markerPane.appendChild(tip);

        return null;
    }
    ComplexCustomOverlay.prototype.draw = function () {
        var map = this._map;
        var pixel = map.pointToOverlayPixel(this._point);
        this._div.style.left = pixel.x + 22 + "px";
        this._div.style.top = pixel.y - 50 + "px";
    }

    var myCompOverlay = new ComplexCustomOverlay(new BMap.Point(lng, lat), obj);
    IntelligentRoadTest.myCompOverlayTwo = myCompOverlay;
    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.myCompOverlayTwo);
    setTimeout(function () {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlay);
        $("#cirTip").hide();
    }, 500);
}
/**********************************
 * @funcname IntelligentRoadTest.openInfoWindowTwo
 * @funcdesc 绘制水滴点或者多边形栅格右边的文本提示框
 * @param {string} lng (input)
 经度
 * @param {string} lat (input)
 纬度
 * @param {string} ojb (input)
 需要显示的文本数组 例如 [{key:a,value:b},{key:c,value:d}]
 * @return {null}
 * @author 郑文彬
 * @create 20171219
 ***********************************/
IntelligentRoadTest.openInfoWindowTwo = function IntelligentRoadTest_openInfoWindowTwo(lng, lat, obj) {
    IntelligentRoadTest.infoWindowPoint = new BMap.Point(lng, lat);
    if (IntelligentRoadTest.isBackList) {
        IntelligentRoadTest.isBackList = false;
        $("#cirTipLeft").html("");
        $("#cirTipLeft").hide();
        return;
    }
    $("#cirTipLeft").html("");
    $("#cirTipLeft").hide();
    if (lng == 0 || lat == 0 || lng == null || lat == null || lng == undefined || lat == undefined) {
        return;
    }
    var ul = document.createElement("ul");
    var tip = this._div = document.getElementById("cirTipLeft");
    tip.appendChild(ul);
    for (var i = 0; i < obj.length; i++) {
        if (obj[i].val != undefined) {
            var li = document.createElement("li");
            var dom1 = document.createTextNode(obj[i].key + ":" + obj[i].val);
            if (obj[i].key == "") {
                dom1 = document.createTextNode(obj[i].val);
            }
            li.appendChild(dom1);
            ul.appendChild(li);
        }
    }

    setTimeout(function () {
        $('#cirTipLeft').show();
        IntelligentRoadTest.resizeInfoWindow();
    }, 100);


}
/*IntelligentRoadTest.resizeInfoWindow = function IntelligentRoadTest_resizeInfoWindow() {
    try {
        var pixel = IntelligentRoadTest.map.pointToPixel(IntelligentRoadTest.infoWindowPoint);
        var x = pixel.x;
        var y = pixel.y;
        var height = $('#cirTipLeft').height() * 33 / 100 + 30;
        $('#cirTipLeft').css("left", x + 20 + "px").css("top", y - height + 10 + "px");
    } catch (e) {
        // TODO: handle exception
    }
}*/
/**********************************
 * @funcname IntelligentRoadTest.showPolygon
 * @funcdesc 绘制弱区多边形
 * @param {string} data (input) 弱区多边形数据
 * @param {boolean} isDashed (input optional) 是否呈现为虚线
 * @param {string} type (input optional) 多边形的类型,用于统一地图点击事件
 * @param {string} id (input optional) 多边形的id
 * @param {string} day (input optional) 日期
 * @return {null}
 * @author 郑文彬
 * @create 20171219
 * @modifier 梁杰禹
 * @modify 20170521
 ***********************************/
IntelligentRoadTest.polygon = [];
IntelligentRoadTest.showPolygon = function IntelligentRoadTest_showPolygonAndLoadGrid(data, isDashed, type, id, day, name) {
    if (IntelligentRoadTest.highLightPolyline != null) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.highLightPolyline);
    }
//	IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.polygon);
    IntelligentRoadTest.polygonData = data;
    for (var i = 0; i < IntelligentRoadTest.polygon.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.polygon[i]);
        if (type) {
            //注销
            var itemData = {
                obj_type: IntelligentRoadTest.polygon[i].obj_type,
                pointsString: null,
                type: 2,
                decide: 1,
                obj_id: IntelligentRoadTest.polygon[i].obj_id,
                day: IntelligentRoadTest.polygon[i].day
            };
            IntelligentRoadTest.logOutPolygonToLayer(itemData);
        }

    }
    IntelligentRoadTest.polygon = [];
    IntelligentRoadTest.polygonPoint = [];
    var gisDataArr = data.split(';');
    IntelligentRoadTest.polygonContour = data.replace(/;/g, '|');//缓存多边形轮廓点，提供给hbase sql查询
    for (var i = 0; i < gisDataArr.length; i++) {
        var varr = [];
        var gis_data = gisDataArr[i];
        var sp = gis_data.split('@');
        var sumLon = 0;
        var sumLat = 0;
        for (var j = 0; j < sp.length; j++) {
            var v = sp[j].split(',');
            sumLon = sumLon + parseFloat(v[0]);
            sumLat = sumLat + parseFloat(v[1]);
            varr.push(new BMap.Point(v[0], v[1]));
        }
        var polygon = new BMap.Polygon(varr, {
            strokeColor: "#9ffb13",
            strokeWeight: 4,
            strokeOpacity: 1,
            fillOpacity: 0.1
        });  //创建多边形
//		var polygon = new BMap.Polygon(varr, {strokeColor:"red", strokeWeight:2, strokeOpacity:0.6,fillOpacity:0.1});  //创建多边形
//		IntelligentRoadTest.map.centerAndZoom(new BMap.Point(sumLon/sp.length,sumLat/sp.length),16);
        if (isDashed) {
            polygon.setStrokeStyle('dashed');
        }
        polygon.pageType = IntelligentRoadTest.index;
        polygon.i = IntelligentRoadTest.mkIndex;
        polygon.addEventListener("click", function (e) {
            // if(IntelligentRoadTest.gridData!=null&&IntelligentRoadTest.gridData!=undefined){
            // 	IntelligentRoadTest.showGridByCanv(IntelligentRoadTest.gridData);
            // }
            /*if(IntelligentRoadTest.isFromAlarmList == true){
                //从工单跳转过来的
                IntelligentRoadTest.getSenseDataByESBHID(IntelligentRoadTest.currentAlarmType , IntelligentRoadTest.currentAlarmEsbhId , IntelligentRoadTest.day , false , false);
                IntelligentRoadTest.poorAreaCahe = null;
                IntelligentRoadTest.getPoorAreaByIdCahe = null; //为了点击返回之后再次点击之后有反应而设置的
                IntelligentRoadTest.isPoorAreaSaveToConcern = null;
            }*/
            setTimeout(function () {
                $("#cirTipLeft").show();
                IntelligentRoadTest.resizeInfoWindow();
            }, 100)
        });
        polygon.obj_type = type;
        polygon.obj_id = id;
        polygon.day = day;
        IntelligentRoadTest.polygon[i] = polygon;
        IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.polygon[i]);   //增加多边形

        var styleOptions = {
            strokeColor: "red",    //边线颜色。
            //fillColor:"red",      //填充颜色
            strokeWeight: 4,       //边线的宽度，以像素为单位。
            strokeOpacity: 1,	   //边线透明度，取值范围0 - 1。
            fillOpacity: 0.3,      //填充的透明度，取值范围0 - 1。
            strokeStyle: 'dashed' //边线的样式，solid或dashed。
        }
        IntelligentRoadTest.polygonPoint[i] = new BMap.Polygon(varr, styleOptions);
    }


    //需要增加一个逻辑，如果当前地图的场景图层和弱区图层和需要注册的一直，则不进行注册，避免点击之后结果集列表出现重复
    if (type) {
        if (IntelligentRoadTest.judgmentIsNeedRegisteredPolygonToLayer(type)) {
            //  将多边形注册到图层对象
            var itemData = {
                obj_type: type,
                pointsString: data,
                type: 2,
                decide: 1,
                obj_id: id,
                day: day,
                name: name
            };
            IntelligentRoadTest.registeredPolygonToLayer(itemData);
        }
    }


}
/**********************************
 * @funcname IntelligentRoadTest.loadGrid
 * @funcdesc 根据最大最小经纬度加载弱区、所有场景的栅格数据
 * @param {Number} maxlng 最大经度
 * @param {Number} minlng 最小经度
 * @param {Number} maxlat 最大纬度
 * @param {Number} minlat 最小纬度
 * @return {null}
 * @author 郑文彬
 * @create 20171219
 ***********************************/
IntelligentRoadTest.loadGrid = function IntelligentRoadTest_loadGrid(maxlng, minlng, maxlat, minlat) {
    IntelligentRoadTest.isShowGrid = true;
    IntelligentRoadTest.maxlnglat_minlnglat = [maxlng, minlng, maxlat, minlat];
    var maxlng_maxlat_minlng_minlat = maxlng + "," + maxlat + "," + minlng + "," + minlat;

    var ajaxObj = {};
    if (IntelligentRoadTest.isThreeNetStatus) {//三网
        if (maxlng_maxlat_minlng_minlat + getPreMonth(IntelligentRoadTest.day) == IntelligentRoadTest.maxlng_maxlat_minlng_minlatThree) {
            if (IntelligentRoadTest.gridThreeData) {
                IntelligentRoadTestSystemLayerV3.showThreeGrid(IntelligentRoadTest.gridThreeData);
            }
            return;
        }
        ajaxObj = IntelligentRoadTestSystemLayerV3.loadThreeGrid(maxlng_maxlat_minlng_minlat);
    } else {
        if (maxlng_maxlat_minlng_minlat + IntelligentRoadTest.day + IntelligentRoadTest.gridType + IntelligentRoadTestSystemLayerV3.getCloumnsList() + IntelligentRoadTest.gridTime == IntelligentRoadTest.maxlng_maxlat_minlng_minlat) {
            if (IntelligentRoadTest.gridDataV2) {
                IntelligentRoadTestSystemLayerV3.showGridV2(IntelligentRoadTest.gridDataV2);
            }
            return;
        }
        ajaxObj = IntelligentRoadTestSystemLayerV3.loadAreaGrid(maxlng_maxlat_minlng_minlat);
    }

//	progressbarTwo.submitSql(progressBarSqls, functionlist,dataBase);
    var progressBarSqls = [];
    var functionlist = [];
    var dataBase = [];
    if (ajaxObj.progressBarSqls != undefined && ajaxObj.functionlist != undefined && ajaxObj.dataBase != undefined) {
        progressBarSqls.push(ajaxObj.progressBarSqls);
        functionlist.push(ajaxObj.functionlist);
        dataBase.push(ajaxObj.dataBase);
    }

    if (IntelligentRoadTest.showLayerLoading == false && !IntelligentRoadTest.showNrCover) {//加载图层的提示框不需要显示时，栅格加载的提示框才出来
        $('#layerSubmitProgressDiv').show();
        $('#layerSubmitProgressDiv .closeProgress').unbind("click").bind("click", function () {
            $('#layerSubmitProgressDiv').hide();
            if (IntelligentRoadTest.LayerMultiple != undefined && IntelligentRoadTest.LayerMultiple != null) {
                IntelligentRoadTest.LayerMultiple.cancelSqlAjax();
                IntelligentRoadTest.LayerMultiple = null;
            }
        });
        IntelligentRoadTest.LayerMultiple = new progressbarTwoMultiple(progressBarSqls, functionlist, dataBase);
        IntelligentRoadTest.LayerMultipleInterval = setInterval(function () {
            if (IntelligentRoadTest.LayerMultiple) {
                if (IntelligentRoadTest.LayerMultiple.completeCount == IntelligentRoadTest.LayerMultiple.sqlListCount) {
                    clearInterval(IntelligentRoadTest.LayerMultipleInterval);
                    IntelligentRoadTest.LayerMultiple.cancelSqlAjax();
                    $('#layerSubmitProgressDiv').hide();
                    $('#layerSubmitProgressDiv .closeProgress').unbind("click");
                    IntelligentRoadTest.LayerMultiple = null;
                }
            }
        }, 500);
    } else {
        IntelligentRoadTest.LayerMultiple = new progressbarTwoMultiple(progressBarSqls, functionlist, dataBase);
        IntelligentRoadTest.LayerMultipleInterval = setInterval(function () {
            if (IntelligentRoadTest.LayerMultiple) {
                if (IntelligentRoadTest.LayerMultiple.completeCount == IntelligentRoadTest.LayerMultiple.sqlListCount) {
                    clearInterval(IntelligentRoadTest.LayerMultipleInterval);
                    IntelligentRoadTest.LayerMultiple.cancelSqlAjax();
                    IntelligentRoadTest.LayerMultiple = null;
                }
            }
        }, 500);
    }

}
/**********************************
 * @funcname IntelligentRoadTest.showGrid
 * @funcdesc 显示关注区域或者骨头区域的栅格
 * @param {string} data (input optional)
 栅格数据
 * @return {null}
 * @author 郑文彬
 * @create 20171219
 ***********************************/
IntelligentRoadTest.showGrid = function IntelligentRoadTest_showGrid(data) {
    if (data == null) {
        return;
    }
    IntelligentRoadTest.gridData = data;
    IntelligentRoadTest.GridMap.clear();
//对不在多边形内的栅格进行过滤
    var result = [];
    if (data != undefined) {
        result = data.result;
    }
    var polygonGridData = [];
//将不在框选多边形内的栅格去掉
    for (var i = 0; i < result.length; i++) {
        var gridMidLng = result[i][3];// i:a1,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a18,i:a19(8),i:a22,i:a26,i:a27,i:a28,i:a29(13),i:a30
        //,i:a31(15),i:a32,i:a33,i:a34,i:a35,i:a36,i:a37,i:a38
        var gridMidLat = result[i][4];
        var point = new BMap.Point(gridMidLng, gridMidLat);
        for (var j = 0; j < IntelligentRoadTest.polygonPoint.length; j++) {
            if (BMapLib.GeoUtils.isPointInPolygon(point, IntelligentRoadTest.polygonPoint[j])) {
                polygonGridData.push(result[i]);
            }
        }
    }
    var columns = [];
    var oldColumns = data.columns;
    for (var i = 0; i < data.columns.length; i++) {
        columns.push(data.columns[i].replace("i:", ""));
    }
    data.result = polygonGridData;
    data.columns = columns;
    var result = callBackChangeData(data);
    var newdata = IntelligentRoadTest.gridResultGroupByGridNum(result);
    var gridData = [];
    for (var i = 0; i < newdata.length; i++) {
        var objArr = [];
        var obj = newdata[i].value;
        if (obj.count < 2) {
            objArr.push(obj.a1);
            objArr.push(obj.a11);
            objArr.push(obj.a12);
            objArr.push(obj.a13);
            objArr.push(obj.a14);
            objArr.push(obj.a15);
            objArr.push(obj.a16);
            objArr.push(obj.a18);
            objArr.push(obj.a19);
            objArr.push(obj.a22);
            objArr.push(obj.a26);
            objArr.push(obj.a27);
            objArr.push(obj.a28);
            objArr.push(obj.a29);
            objArr.push(obj.a30);
            objArr.push(obj.a31);
            objArr.push(obj.a32);
            objArr.push(obj.a33);
            objArr.push(obj.a34);
            objArr.push(obj.a35);
            objArr.push(obj.a36);
            objArr.push(obj.a37);
            objArr.push(obj.a38);
            gridData.push(objArr);
        }
    }
//data.columns=oldColumns;
    data.columns = oldColumns;
    data.result = gridData;
    IntelligentRoadTest.showGridByCanv(data);
//result = callBackChangeData(data);
//IntelligentRoadTest.GridMap.clear();
//IntelligentRoadTest.gridArr=[];
//for(var i=0;i<result.length;i++){
//	var color='';
//	var maxLng = result[i]["i:a15"];// 最大经度
//	var maxLat = result[i]["i:a16"];// 最大纬度
//	var minLng = result[i]["i:a11"];// 最小经度
//	var minLat = result[i]["i:a12"];// 最小纬度
//	var coverageavg = result[i]["i:a27"];// 电信平均覆盖
//	var dataGis = [minLng,minLat,maxLng,maxLat,coverageavg];
//	IntelligentRoadTest.gridArr.push(dataGis);
//
//}
//IntelligentRoadTest.GridMap.draw(IntelligentRoadTest.gridArr);
}


function openIntelligentToadTestV2Page() {
    window.open("pages_index_Index_home.action?appId=IntelligentRoadTestV2&menuId=456&perId=472&id_path=new&isRedirect=true", "IntelligentRoadTestV2");
}

IntelligentRoadTest.loadAlarmMk = function IntelligentRoadTest_loadAlarmMk(data) {
    var ORDER_ID_LIST = "";//alarm_id
    var ALT_NO_LIST = "";//alarm_id
    var ESBH_SQL = "";
    var ROAD_SQL = ""; //高速的
    if (data.length == 0) {
        return;
    }
    for (var i = 0; i < data.length; i++) {
        if (data[i].alarm_name == 'AGPS智能路测弱覆盖区域') {
            ORDER_ID_LIST = ORDER_ID_LIST + "'" + data[i].alarm_id + "',";
        } else if (data[i].alarm_name == '4G基站扇区基础信息异常') {
            ALT_NO_LIST = ALT_NO_LIST + "'" + data[i].alarm_id + "',";
        } else if (data[i].alarm_name == '天翼蓝鹰高速') {
            ROAD_SQL = ROAD_SQL + " (DAY=" + data[i].alarm_time.substring(0, 8) + " AND line_id in('" + data[i].enodeb_id + "')) or"
        } else {
            ESBH_SQL = ESBH_SQL + " (DAY=" + data[i].alarm_time.substring(0, 8) + " AND ESBH_ID in('" + data[i].enodeb_id + "')) or"
        }
    }
    ORDER_ID_LIST = ORDER_ID_LIST.substring(0, ORDER_ID_LIST.length - 1);
    ALT_NO_LIST = ALT_NO_LIST.substring(0, ALT_NO_LIST.length - 1);
    ROAD_SQL = ROAD_SQL.substring(0, ROAD_SQL.length - 2);
    ESBH_SQL = ESBH_SQL.substring(0, ESBH_SQL.length - 2);
    if (ORDER_ID_LIST.length == 0) {
        ORDER_ID_LIST = null;
    }
    if (ALT_NO_LIST.length == 0) {
        ALT_NO_LIST = null;
    }
    if (ROAD_SQL.length == 0) {
        ROAD_SQL = 'DAY=null AND line_id in(null)';
    }
    if (ESBH_SQL.length == 0) {
        ESBH_SQL = 'DAY=null AND ESBH_ID in(null)';
    }
    var list = ["IntelligentRoadTestAnalysisV2_getAlarmArea", "ORDER_ID_LIST:" + ORDER_ID_LIST, "ALT_NO_LIST:" + ALT_NO_LIST, "ESBH_SQL:" + ESBH_SQL, "ROAD_SQL:" + ROAD_SQL];
    var progressBarSqls = [];
    progressBarSqls.push(list);
    var functionlist = [IntelligentRoadTest.showAlarmMk];
    var dataBase = [3];
    progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase);
}
IntelligentRoadTest.showAlarmMk = function IntelligentRoadTest_showAlarmMk(data) {
    var result = callBackChangeData(data);
    var orderResult = [];
    //对查询出来的水滴点数据进行排序 使水滴点的数据和列表数据一一对应
    for (var i = 0; i < IntelligentRoadTest.alarmInfoVM.alarmInfoList.length; i++) {
        for (var j = 0; j < result.length; j++) {
            if (IntelligentRoadTest.alarmInfoVM.alarmInfoList[i].alarm_name == 'AGPS智能路测弱覆盖区域' || IntelligentRoadTest.alarmInfoVM.alarmInfoList[i].alarm_name == '4G基站扇区基础信息异常') {
                if (IntelligentRoadTest.alarmInfoVM.alarmInfoList[i].alarm_id == result[j].alarm_id) {
                    orderResult.push(result[j]);
                }
            } else {
                if (IntelligentRoadTest.alarmInfoVM.alarmInfoList[i].enodeb_id == result[j].object_id) {
                    orderResult.push(result[j]);
                }
            }
        }
    }
    IntelligentRoadTest.drawMk(orderResult, 2);
}

//---------------林楚佳添加搜索的代码开始--------------------------------

//处理搜索的字符串
IntelligentRoadTest.dealSelectConditionString = function (conditionString) {
    var dealStr = "";
    if (conditionString.indexOf("'") > -1) {
        conditionString = conditionString.replace(/\'/g, "‘");
    }
    if (conditionString.indexOf('"') > -1) {
        conditionString = conditionString.replace(/\"/g, "“");
    }
    dealStr = conditionString;
    return dealStr;
}

//弱区
IntelligentRoadTest.getPoorAreaMessageByCondition = function IntelligentRoadTest_getPoorAreaMessageByCondition() {
    $('#searchResult').hide();
    /*if($("#searchText").val().trim()==''){
        $('#searchResult').hide();
        return;
    }*/
    var result = [];
    IntelligentRoadTest.poorAreaSearchFilter = crossfilter(IntelligentRoadTest.rfgResult);
    var poorAreaNameFilter = IntelligentRoadTest.poorAreaSearchFilter.dimension(function (d) {
        return d
    });
    if ($("#searchText").val().trim() != "") {
        var selectCondition = IntelligentRoadTest.dealSelectConditionString($("#searchText").val().trim());
        poorAreaNameFilter.filter(function (d) {
            if (d.object_id.toString().indexOf(selectCondition) != -1) {
                return d;
            }
        });
        result = poorAreaNameFilter.top(IntelligentRoadTest.rfgResult.length);
    } else {
        result = IntelligentRoadTest.rfgResult;
        $('#searchResult').hide();
    }

    // IntelligentRoadTest.seachResult ={type:"poor",result:result};

    IntelligentRoadTest.poorAreaSearchFilter.remove();//移除
    //过滤后回显数据
    IntelligentRoadTest.filterRfgResult = result;
    IntelligentRoadTest.rfgCurrentResult = IntelligentRoadTest.filterRfgResult;
    IntelligentRoadTest.isFilterRfg = true;

    /*$("#rfgSort ul li.selected").trigger("click");*/
    if ($("#searchText").val().trim() != "") {
        IntelligentRoadTest.showPoorAreaData(result);
    } else {
        $("#rfgSort ul li.selected").trigger("click");
    }
    $('#searchResult').hide();
}

IntelligentRoadTest.dealPoorAreaMessageByCondition = function IntelligentRoadTest_dealPoorAreaMessageByCondition(data) {
    var result = callBackChangeData(data);
    console.log("弱区搜索列表");
    IntelligentRoadTest.seachResult = {type: "poor", result: result};
    var resultStr = '';
    for (var i = 0; i < result.length; i++) {
        resultStr += '<li type="poor" clickId="' + result[i].object_id + '"><span></span><span>' + result[i].object_id + '</span><span>弱区</span></li>';
    }
    if (resultStr != '') {
        $('#searchResult').html(resultStr);
        setTimeout(function () {
            if ($('#searchText').val().trim() != "") {
                $('#searchResult').show();
            }
        }, 100);
    } else {
        $('#searchResult').html('无结果');
        setTimeout(function () {
            if ($('#searchText').val().trim() != "") {
                $('#searchResult').show();
                $('.packList').click();
            }
        }, 100);
    }

    $('#searchResult li').unbind('click').bind('click', function () {
        var type = $(this).attr('type');
        var clickId = $(this).attr('clickId');
        if (IntelligentRoadTest.seachResult.type == type) {
            for (var i = 0; i < IntelligentRoadTest.seachResult.result.length; i++) {
                if (clickId == IntelligentRoadTest.seachResult.result[i].object_id) {
                    //调用进入详情页方法
                    IntelligentRoadTest.showMessageById(IntelligentRoadTest.seachResult.result[i]);
                    //地图打点
                    var item = IntelligentRoadTest.seachResult.result[i];
//                    IntelligentRoadTest.searchShowMkLable(item.longitude_mid_baidu,item.latitude_mid_baidu,textList);
                    console.log("匹配到弱区结果");
                    break;
                }
            }
        }
        $('#searchResult').hide();
    });

}

//弱区
IntelligentRoadTest.dealPoorAreaMessageByCondition2 = function IntelligentRoadTest_dealPoorAreaMessageByCondition2(data, isNeedSaveForScreen) {
    //isNeedSaveForScreen:是否需要将数据 保存为分屏时需要的数据
    var result = callBackChangeData(data);
    console.log("弱区搜索列表");
    IntelligentRoadTest.seachResult = {type: "poor", result: result};
    var resultStr = '';
    for (var i = 0; i < result.length; i++) {
        resultStr += '<li type="poor" clickId="' + result[i].object_id + '"><span></span><span>' + result[i].object_id + '</span><span>弱区</span></li>';
    }
    if (resultStr != '') {
        $('#searchResult').html(resultStr);
        setTimeout(function () {
            if ($('#searchText').val().trim() != "") {
                $('#searchResult').show();
            }
        }, 100);
    } else {
        $('#searchResult').html('无结果');
        setTimeout(function () {
            if ($('#searchText').val().trim() != "") {
                $('#searchResult').show();
            }
        }, 100);
    }

    // $('#searchResult li').unbind('click').bind('click',function(){
    var type = 'poor';
    var clickId = IntelligentRoadTest.objIdTmp;
    if (IntelligentRoadTest.seachResult.type == type) {
        for (var i = 0; i < IntelligentRoadTest.seachResult.result.length; i++) {
            if (clickId == IntelligentRoadTest.seachResult.result[i].object_id) {
                //调用进入详情页方法
                IntelligentRoadTest.showMessageById(IntelligentRoadTest.seachResult.result[i]);
                //地图打点
                var item = IntelligentRoadTest.seachResult.result[i];
                var textList = [
                    {"key": "弱区编号", "val": item.object_id},
                    {"key": "弱区名称", "val": item.address},
                ];
                if (isNeedSaveForScreen) {
                    if (IntelligentRoadTestScreenCompared.messageObject) {
                        var obj = {};
                        obj.type = 'poor';
                        obj.item = item;
                        obj.day = IntelligentRoadTest.day;
                        IntelligentRoadTestScreenCompared.messageObject = obj;
                    } else {
                        //如果分屏js还没有初始化，则需要加定时保存该数据
                        var saveForScreen = setInterval(function () {
                            if (IntelligentRoadTestScreenCompared.messageObject) {
                                var obj = {};
                                obj.type = 'poor';
                                obj.item = item;
                                obj.day = IntelligentRoadTest.day;
                                IntelligentRoadTestScreenCompared.messageObject = obj;
                                clearInterval(saveForScreen);
                            }
                        }, 200);

                    }
                }
                IntelligentRoadTest.loadGrid(item.longitude_max_baidu, item.longitude_min_baidu, item.latitude_max_baidu, item.latitude_min_baidu);
//                IntelligentRoadTest.loadPoorAreaGrid(IntelligentRoadTest.day,item.city_id,item.country_id,item.object_id);
                IntelligentRoadTest.searchShowMkLable(item.longitude_mid_baidu, item.latitude_mid_baidu, textList);
                IntelligentRoadTest.map.centerAndZoom(new BMap.Point(item.longitude_mid_baidu, item.latitude_mid_baidu), 16);
                console.log("匹配到弱区结果");
                break;
            }
        }
    }
    $('#searchResult').hide();
    // });

}


//关注区域搜索
IntelligentRoadTest.getConcernAreaMessageByCondition = function IntelligentRoadTest_getConcernAreaMessageByCondition() {
    /*if($("#searchText").val().trim()==''){
        $('#searchResult').hide();
        return;
    }*/
    var result = [];
    IntelligentRoadTest.concernAreaSearchFilter = crossfilter(IntelligentRoadTest.concernAreaResult);
    var concernAreaNameFilter = IntelligentRoadTest.concernAreaSearchFilter.dimension(function (d) {
        return d
    });
    if ($("#searchText").val().trim() != "") {
        var selectCondition = IntelligentRoadTest.dealSelectConditionString($("#searchText").val().trim());
        concernAreaNameFilter.filter(function (d) {
            if (d.area_name.toString().indexOf(selectCondition) != -1) {
                return d;
            }
        });
        result = concernAreaNameFilter.top(IntelligentRoadTest.concernAreaResult.length);
    } else {
        result = IntelligentRoadTest.concernAreaResult;
        $('#searchResult').hide();
    }

    IntelligentRoadTest.concernAreaSearchFilter.remove();//移除
    //过滤后回显数据
    IntelligentRoadTest.filterConcernAreaResult = result;
    IntelligentRoadTest.concernAreaCurrentResult = IntelligentRoadTest.filterConcernAreaResult;
    IntelligentRoadTest.isFilterConcernArea = true;


    if ($("#searchText").val().trim() != "") {
        IntelligentRoadTest.concernAreaData(result);
    } else {
        $("#concernSort ul li.selected").trigger("click");
    }
}

IntelligentRoadTest.dealConcernAreaMessageByCondition = function IntelligentRoadTest_dealConcernAreaMessageByCondition(data) {
    var result = callBackChangeData(data);
    console.log("关注区域搜索");

    IntelligentRoadTest.seachResult = {type: "concern", result: result};
    var resultStr = '';
    for (var i = 0; i < result.length; i++) {
        resultStr += '<li type="concern" clickId="' + result[i].id + '"><span>' + result[i].area_name + '</span><span>' + result[i].id + '</span><span>关注区域</span></li>';
    }
    if (resultStr != '') {
        $('#searchResult').html(resultStr);
        setTimeout(function () {
            if ($('#searchText').val().trim() != "") {
                $('#searchResult').show();
            }
        }, 100);
    } else {
        $('#searchResult').html('无结果');
        setTimeout(function () {
            if ($('#searchText').val().trim() != "") {
                $('#searchResult').show();
            }
        }, 100);
    }

    $('#searchResult li').unbind('click').bind('click', function () {
        var type = $(this).attr('type');
        var clickId = $(this).attr('clickId');
        if (IntelligentRoadTest.seachResult.type == type) {
            for (var i = 0; i < IntelligentRoadTest.seachResult.result.length; i++) {
                if (clickId == IntelligentRoadTest.seachResult.result[i].id) {
                    //调用进入详情页方法
                    IntelligentRoadTest.showConcernAreaMessageById(IntelligentRoadTest.seachResult.result[i]);

                    //搜索关注区域打点
                    var item = IntelligentRoadTest.seachResult.result[i];
                    $('#concernHandleDescribe').val(item.handle_description);
//                   IntelligentRoadTest.loadGrid(item.max_longitude_baidu,item.min_longitude_baidu,item.max_latitude_baidu,item.min_latitude_baidu);
                    console.log("匹配到关注区域结果");
                    break;
                }
            }
        }
        $('#searchResult').hide();
    });
}

//工单搜索
IntelligentRoadTest.getAlarmInfoMessageByCondition = function IntelligentRoadTest_getAlarmInfoMessageByCondition() {

    var result = [];
    IntelligentRoadTest.alarmInfoSearchFilter = crossfilter(IntelligentRoadTest.alarmInfoResult);
    var alarmInfoNameFilter = IntelligentRoadTest.alarmInfoSearchFilter.dimension(function (d) {
        return d
    });
    if ($("#searchText").val().trim() != "") {
        var selectCondition = IntelligentRoadTest.dealSelectConditionString($("#searchText").val().trim());
        alarmInfoNameFilter.filter(function (d) {
            if (d.alarm_text.toString().indexOf(selectCondition) != -1) {
                return d;
            }
        });
        result = alarmInfoNameFilter.top(IntelligentRoadTest.alarmInfoResult.length);
    } else {
        result = IntelligentRoadTest.alarmInfoResult;
        $('#searchResult').hide();
    }

    IntelligentRoadTest.alarmInfoSearchFilter.remove();//移除
    //过滤后回显数据
    IntelligentRoadTest.filterAlarmInfoResult = result;
    IntelligentRoadTest.alarmInfoCurrentResult = IntelligentRoadTest.filterAlarmInfoResult;
    IntelligentRoadTest.isFilterAlarmInfo = true;

    if ($("#searchText").val().trim() != "") {
        IntelligentRoadTest.showAlarmInfoData(result);
    } else {
        $("#alarmInfoSort ul li.selected").trigger("click");
    }
}

IntelligentRoadTest.dealAlarmInfoMessageByCondition = function IntelligentRoadTest_dealAlarmInfoMessageByCondition(data) {
    var result = callBackChangeData(data);
    console.log("工单列表搜索");

    IntelligentRoadTest.seachResult = {type: "alarm", result: result};
    var resultStr = '';
    for (var i = 0; i < result.length; i++) {
        resultStr += '<li type="alarm" clickId="' + result[i].alarm_id + '"><span></span><span>' + result[i].task_id + '</span><span>工单</span></li>';
    }
    if (resultStr != '') {
        $('#searchResult').html(resultStr);
        setTimeout(function () {
            if ($('#searchText').val().trim() != "") {
                $('#searchResult').show();
            }
        }, 100);
    } else {
        $('#searchResult').html('无结果');
        setTimeout(function () {
            if ($('#searchText').val().trim() != "") {
                $('#searchResult').show();
            }
        }, 100);
    }

    $('#searchResult li').unbind('click').bind('click', function () {
        var type = $(this).attr('type');
        var clickId = $(this).attr('clickId');
        if (IntelligentRoadTest.seachResult.type == type) {
            for (var i = 0; i < IntelligentRoadTest.seachResult.result.length; i++) {
                if (clickId == IntelligentRoadTest.seachResult.result[i].alarm_id) {
                    //跳转到工单详情页面
                    // console.log("匹配到工单结果");
                    /*IntelligentRoadTest.Ahref(IntelligentRoadTest.seachResult.result[i]);*/
                    IntelligentRoadTest.selectAlarmByAlarmId(clickId);
                    IntelligentRoadTest.isUseSearch = true;
                    break;
                }
            }
        }
        $('#searchResult').hide();
    });

}

//DT
IntelligentRoadTest.getDTMessageByCondition = function IntelligentRoadTest_getDTMessageByCondition() {
    //var condition;

    IntelligentRoadTest.dtCrossFliterObj = crossfilter([]);
    IntelligentRoadTest.dtCrossFliterObj.add(IntelligentRoadTest.result);
    var dtByNameFilter = IntelligentRoadTest.dtCrossFliterObj.dimension(function (d) {
        return d
    });
    // console.log(dtByNameFilter.top(IntelligentRoadTest.dtCrossFliterObj.size()));
    if ($("#searchText").val().trim() != "") {
        var condition = $("#searchText").val().trim();
        dtByNameFilter.filter(function (d) {
            if (d.dt_name.indexOf(condition) != -1) {
                return d;
            }
        });
        var result = dtByNameFilter.top(IntelligentRoadTest.dtCrossFliterObj.size());
        IntelligentRoadTest.isSeachDT = true;
    } else {
        var result = IntelligentRoadTest.result;
        IntelligentRoadTest.isSeachDT = false;
    }


    //过滤后回显数据
    IntelligentRoadTest.filterDtResult = result;
    IntelligentRoadTest.seachDTResult = result;
    IntelligentRoadTest.currentResult = IntelligentRoadTest.filterDtResult;
    IntelligentRoadTest.isFilterDt = true;
    var SelectName = $("#dtListSelectName").text();
    var flexCol = $("#dtList  .flexRow .flexCol");
    IntelligentRoadTest.triggleFilter(SelectName, flexCol);
    //获取焦点事件
    $("#searchText").focus();
    // IntelligentRoadTest.showDTData(IntelligentRoadTest.filterDtResult);
    //$("#dtSort ul li.selected").trigger("click");

}

IntelligentRoadTest.dealDTMessageByCondition = function IntelligentRoadTest_dealDTMessageByCondition() {

}

//骨头区域搜索
IntelligentRoadTest.getBoneAreaMessageByCondition = function IntelligentRoadTest_getBoneAreaMessageByCondition() {
    $('#searchResult').hide();
    var result = [];
    IntelligentRoadTest.boneAreaSearchFilter = crossfilter(IntelligentRoadTest.boneAreaResult);
    var boneAreaNameFilter = IntelligentRoadTest.boneAreaSearchFilter.dimension(function (d) {
        return d
    });
    if ($("#searchText").val().trim() != "") {
        var selectCondition = IntelligentRoadTest.dealSelectConditionString($("#searchText").val().trim());
        boneAreaNameFilter.filter(function (d) {
            if (d.object_name.toString().indexOf(selectCondition) != -1) {
                return d;
            }
        });
        result = boneAreaNameFilter.top(IntelligentRoadTest.boneAreaResult.length);
    } else {
        result = IntelligentRoadTest.boneAreaResult;
        $('#searchResult').hide();
    }

    IntelligentRoadTest.boneAreaSearchFilter.remove();//移除
    //过滤后回显数据
    IntelligentRoadTest.filterBoneAreaResult = result;
    IntelligentRoadTest.boneAreaCurrentResult = IntelligentRoadTest.filterBoneAreaResult;
    IntelligentRoadTest.isFilterBoneArea = true;

    if ($("#searchText").val().trim() != "") {
        IntelligentRoadTest.boneAreaData(result);
    } else {
        $("#boneSort ul li.selected").trigger("click");
    }
}

IntelligentRoadTest.dealBoneAreaMessageByCondition = function IntelligentRoadTest_dealBoneAreaMessageByCondition(data) {
    var result = callBackChangeData(data);
    console.log("骨头区域搜索");

    IntelligentRoadTest.seachResult = {type: "bone", result: result};
    var resultStr = '';
    for (var i = 0; i < result.length; i++) {
        resultStr += '<li type="bone" clickId="' + result[i].id + '"><span>' + result[i].object_name + '</span><span>' + result[i].id + '</span><span>骨头区域</span></li>';
    }
    if (resultStr != '') {
        $('#searchResult').html(resultStr);
        setTimeout(function () {
            if ($('#searchText').val().trim() != "") {
                $('#searchResult').show();
            }
        }, 100);
    } else {
        $('#searchResult').html('无结果');
        setTimeout(function () {
            if ($('#searchText').val().trim() != "") {
                $('#searchResult').show();
            }
        }, 100);
    }

    $('#searchResult li').unbind('click').bind('click', function () {
        var type = $(this).attr('type');
        var clickId = $(this).attr('clickId');
        if (IntelligentRoadTest.seachResult.type == type) {
            for (var i = 0; i < IntelligentRoadTest.seachResult.result.length; i++) {
                if (clickId == IntelligentRoadTest.seachResult.result[i].id) {
                    //跳转到骨头详情
                    IntelligentRoadTest.showBoneAreaMessageById(IntelligentRoadTest.seachResult.result[i]);
                    //骨头打点
                    var item = IntelligentRoadTest.seachResult.result[i];
//                    IntelligentRoadTest.searchShowMkLable((item.longitude_min+item.longitude_max)/2,(item.latitude_max+item.latitude_min)/2,textList);
//                    IntelligentRoadTest.loadGrid(item.longitude_max,item.longitude_min,item.latitude_max,item.latitude_min);

                    console.log("匹配到骨头区域结果");
                    break;
                }
            }
        }
        $('#searchResult').hide();
    });

}

//宏站
IntelligentRoadTest.getMacSectorMessageByCondition = function IntelligentRoadTest_getMacSectorMessageByCondition() {
    console.log("宏扇区筛选");
    //每次拿宏站结果集筛选  IntelligentRoadTest.macSectorResult
    IntelligentRoadTest.macSectorCrossFliterObj = crossfilter([]);
    IntelligentRoadTest.macSectorCrossFliterObj.add(IntelligentRoadTest.macSectorResult);
    var condition;
    var sectorByNameFilter = IntelligentRoadTest.macSectorCrossFliterObj.dimension(function (d) {
        return d
    });
    if ($("#searchText").val().trim() != "") {
        condition = $("#searchText").val().trim();
        sectorByNameFilter.filter(function (d) {
            if (d.cell_name.indexOf(condition) != -1 || (d.cell_id + "").indexOf(condition) != -1 || (d.enodeb_id + "").indexOf(condition) != -1 || (d.enodeb_id + "_" + d.cell_id).indexOf(condition) != -1) {
                return d;


            }
        });
        var result = sectorByNameFilter.top(IntelligentRoadTest.macSectorCrossFliterObj.size());
        IntelligentRoadTest.isSeachMacSector = true;
    } else {
        var result = IntelligentRoadTest.macSectorResult;
        IntelligentRoadTest.isSeachMacSector = false;
    }


    //过滤后回显数据
    IntelligentRoadTest.filterMacSectorResult = result;
    IntelligentRoadTest.seachMacSectorResult = result;
    IntelligentRoadTest.macSectorCurrentResult = IntelligentRoadTest.filterMacSectorResult;


    // IntelligentRoadTest.showMacSectorData(IntelligentRoadTest.macSectorCurrentResult);

    var SelectName = $("#macSectorListSelectName").text();
    var flexCol = $("#macSectorList  .flexRow .flexCol");
    IntelligentRoadTest.triggleFilter(SelectName, flexCol);
    //获取焦点事件
    $("#searchText").focus();
    //替换当前对象

    //
}

IntelligentRoadTest.dealMacSectorMessageByCondition = function IntelligentRoadTest_dealMacSectorMessageByCondition(data) {
    var result = callBackChangeData(data);
    console.log("宏站搜索");
}

//---------------林楚佳添加搜索的代码结束--------------------------------
/**********************************
 * @funcname add_sector
 * @funcdesc 根据基站的位置方位角计算出一个多边形
 * @param {object} centre 基站位置
 * @return
 * @author 梁杰禹
 * @create 20171025
 ***********************************/
IntelligentRoadTest.add_sector = function add_sector(centre, x, y, z, ant_angle) {
    var assemble = new Array();
    var angle;
    var dot;
    var tangent = x / y;
    assemble.push(centre);
    for (i = 0; i <= 3; i++) {
        angle = (2 * Math.PI / 6 / 3) * i / z + (ant_angle - 30 / z) / 180 * Math.PI;
        dot = new BMap.Point(centre.lng + Math.sin(angle) * y * tangent, centre.lat + Math.cos(angle) * y);
        assemble.push(dot);
    }
    return assemble;
}
//点击扇区表打印扇区
IntelligentRoadTest.showSector = function IntelligentRoadTest_showSector(result, sectorType) {
    if (result.longitude_mid_baidu == null || result.latitude_mid_baidu == null || result.longitude_mid_baidu == undefined || result.latitude_mid_baidu == undefined) {
        return;
    }
    if (IntelligentRoadTest.highLightPolyline != null) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.highLightPolyline);
    }
    if(IntelligentRoadTest.pred_amzuith_sector != null){
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.pred_amzuith_sector);
    }
    var band_order = result.band_mapping;
    var xy = 0.0008;
    var z = 3.5;
    var r = 6;
    var radiusL = 15;
    var radiusS = 12;
    //case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 5 end as band_order
    if (band_order == 4) {
        xy = 0.0004;
        z = 0.8;
        r = 8;
        radiusL = 8;
        radiusS = 5;
    } else if (band_order == 3) {
        xy = 0.0006;
        z = 1.8;
        r = 12;
        radiusL = 12;
        radiusS = 9;
    } else if (band_order == 1) {
        xy = 0.001;
        z = 5.5;
        r = 18;
        radiusL = 18;
        radiusS = 15;
    }
    var point = new BMap.Point(result.longitude_mid_baidu, result.latitude_mid_baidu);
    if (result.is_indoor == '室内') {
        var oval = new BMap.Circle(point, r, {
            strokeColor: "blue",
            strokeWeight: 2,
            strokeOpacity: 0.5,
            fillColor: '#9ffb13'
        });
        oval.obj_type = sectorType;
        oval.statn_id = result.enodeb_id;
        oval.cell_id = result.cell_id;
        oval.day = IntelligentRoadTest.day;
        IntelligentRoadTest.circle = oval;
        IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.circle);

        //  将多边形注册到图层对象
        var itemData = {
            obj_type: sectorType,
            point: point,
            type: 1,
            bandLevel: band_order,
            statn_id: result.enodeb_id,
            cell_id: result.cell_id,
            radiusL: radiusL,
            radiusS: radiusS
        };
        IntelligentRoadTest.registeredPolygonToLayer(itemData);
        return;
    }
    var assemble = IntelligentRoadTest.add_sector(point, xy, xy, z, result.ant_azimuth);
//	var assemble=IntelligentRoadTest.add_sector(point,0.0003,0.0003,3.5,result[0].ant_azimuth);
    var sectorPolygon = new BMap.Polygon(assemble);
    sectorPolygon.setFillColor("#9ffb13");
    sectorPolygon.setStrokeWeight(1);
    sectorPolygon.point2 = point;
    sectorPolygon.obj_type = sectorType;
    sectorPolygon.statn_id = result.enodeb_id;
    sectorPolygon.cell_id = result.cell_id;
    sectorPolygon.day = IntelligentRoadTest.day;
    IntelligentRoadTest.circle = sectorPolygon;
    IntelligentRoadTest.circle.addEventListener("click", function (e) {
        setTimeout(function () {
            $("#cirTipLeft").show();
            IntelligentRoadTest.resizeInfoWindow();
        }, 100)
    });
    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.circle);
    if (IntelligentRoadTest.index == 6) { //当前处于从宏站勘误跳转过来的时候
        if (result.pred_azimuth != null && result.band_mapping != null) { //绘制预测角度的扇区
            var assemble1 = IntelligentRoadTest.add_sector(point, xy, xy, z, result.pred_azimuth);
//	    	var assemble=IntelligentRoadTest.add_sector(point,0.0003,0.0003,3.5,list[i].ant_azimuth);
            var sectorPolygon1 = new BMap.Polygon(assemble1);
            sectorPolygon1.setFillColor("#F9C943"); //这里需要更换颜色
            sectorPolygon1.setStrokeWeight(2);
            sectorPolygon1.setStrokeStyle("dashed");
            sectorPolygon1.point2 = point;
            sectorPolygon1.cell_name = result.cell_name;
            sectorPolygon1.isPred = true;
            IntelligentRoadTest.map.addOverlay(sectorPolygon1);
            IntelligentRoadTest.pred_amzuith_sector = sectorPolygon1; //将该扇区的图形赋值给全局变量，方便清除
        }
    }

//	IntelligentRoadTest.map.centerAndZoom(new BMap.Point(result[0].lng,result[0].lat),18);
//	var circle=new BMap.Circle(point,3,{fillColor:"#d340c3",strokeWeight:1});
//	IntelligentRoadTest.circle=circle;
//	IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.circle);

//  将多边形注册到图层对象
    var itemData = {
        obj_type: sectorType,
        points: assemble,
        type: 2,
        bandLevel: band_order,
        statn_id: result.enodeb_id,
        cell_id: result.cell_id,
    };
    IntelligentRoadTest.registeredPolygonToLayer(itemData);

}
IntelligentRoadTest.searchShowMkLable = function IntelligentRoadTest_searchShowMkLable(lng, lat) {
    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.cacheSearchMk);
    IntelligentRoadTest.cacheSearchMk = IntelligentRoadTest.searchMk;
    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.searchMk);
    if (lng == 0 || lat == 0) {
        return;
    }
    var point = new BMap.Point(lng, lat);
    var myIcon = new BMap.Icon("../js/IntelligentRoadTest/images/bg_num.png", new BMap.Size(22, 32));
    var marker = new BMap.Marker(point, {icon: myIcon});
    marker.setOffset(
        new BMap.Size(0, -10)
    );
    IntelligentRoadTest.searchMk = marker;
//    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.searchMk);

}
//删除水滴点及其文本框
IntelligentRoadTest.removeMk = function IntelligentRoadTest_removeMk() {
    for (var i = 0; i < IntelligentRoadTest.markerList.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.markerList[i]);
    }
    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlay);
    $("#cirTip").hide();
    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.myCompOverlayTwo);
    $("#cirTipLeft").hide();
    for (var i = 0; i < IntelligentRoadTest.lineArr.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.lineArr[i]);
    }
    for (var i = 0; i < IntelligentRoadTest.sectorPolygonArr.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.sectorPolygonArr[i]);
    }
    for (var i = 0; i < IntelligentRoadTest.macSectorMarkeArr.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.macSectorMarkeArr[i]);
    }
    for (var i = 0; i < IntelligentRoadTest.polygon.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.polygon[i]);
        //注销
        var itemData = {
            obj_type: IntelligentRoadTest.polygon[i].obj_type,
            pointsString: null,
            type: 2,
            decide: 1,
            obj_id: IntelligentRoadTest.polygon[i].obj_id,
            day: IntelligentRoadTest.polygon[i].day
        };
        IntelligentRoadTest.logOutPolygonToLayer(itemData);
    }
    //这里补充一下，在显示附近覆盖的时候，如果点击X时，调用这个方法不做栅格清除  （林楚佳20190218修订）
    if(!IntelligentRoadTest.showNrCover){ //IntelligentRoadTest.showNrCover是标识是否显示附近覆盖的变量，true标识显示附近覆盖
        IntelligentRoadTest.GridMapCircleDataArr = null;
        IntelligentRoadTest.GridMapCircleDataArr = [];
        IntelligentRoadTest.GridCanArrT = null;
        IntelligentRoadTest.GridCanArrM = null;
        IntelligentRoadTest.GridCanArrU = null;
        IntelligentRoadTest.CanArr = null;
        IntelligentRoadTest.GridCanArrT = [];
        IntelligentRoadTest.GridCanArrM = [];
        IntelligentRoadTest.GridCanArrU = [];
        IntelligentRoadTest.CanArr = [];
        IntelligentRoadTest.GridMap.clear();
    }
//    for(var i=0;i<IntelligentRoadTest.polygon.length;i++){
//        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.polygon[i]);
//    }
    for (var i = 0; i < IntelligentRoadTest.polygonList.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.polygonList[i]);
    }
    IntelligentRoadTest.polygonList = [];
    //删除osm起始结束标注点
    try {
        IntelligentRoadTest.hideOsmStarEndMk();
    } catch (e) {
        // TODO: handle exception
    }
    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.searchMk);
    if (IntelligentRoadTest.circle) {
        //注销
        var itemSectorData = {
            obj_type: IntelligentRoadTest.circle.obj_type,
            pointsString: null,
            type: 2,
            decide: 1,
            statn_id: IntelligentRoadTest.circle.statn_id,
            cell_id: IntelligentRoadTest.circle.cell_id,
            day: IntelligentRoadTest.circle.day
        };
        IntelligentRoadTest.logOutPolygonToLayer(itemSectorData);
    }
    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.circle);
    if (IntelligentRoadTestSystemLayerV3.hLUserComplain) {
        //注销
        var itemData = {
            obj_type: IntelligentRoadTestSystemLayerV3.hLUserComplain.obj_type,
            pointsString: null,
            point: null,
            obj_id: IntelligentRoadTestSystemLayerV3.hLUserComplain.obj_id
        };
        IntelligentRoadTest.logOutPolygonToLayer(itemData);
    }
    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTestSystemLayerV3.hLUserComplain);//移除点击的对象标志

    IntelligentRoadTest.hideSectorPoorLine(3);
    IntelligentRoadTest.polygonList = [];
    $('.positionClass').find("img").attr("src", "../js/IntelligentRoadTest/images/showP.png");
    $('.positionClass').addClass("showBtn");
    for (var i = 0; i < IntelligentRoadTest.esbhPolygon.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.esbhPolygon[i]);
    }
    IntelligentRoadTest.esbhPolygon = [];
}

//根据当前的页面判断是否显示或隐藏栅格图例 IntelligentRoadTest.GridMap
/**********************************
 * @funcname IntelligentRoadTest.legendGrid
 * @funcdesc 根据当前的页面判断是否显示或隐藏栅格图例
 * @param {null}
 * @return {null}
 * @author 陈小芳
 * @create 20191120
 ***********************************/
IntelligentRoadTest.legendGrid = function IntelligentRoadTest_legendGrid() {
    if(IntelligentRoadTest.index == 8|| (IntelligentRoadTest.index == 2 && IntelligentRoadTest.clickSenseName == "rail" )){//目前只有高铁能看到[脱网]的图例
        $(".fallNet").show();
        if(IntelligentRoadTestGridLegend.gridLegend.fgLineLegend.zhong.width==0){
            IntelligentRoadTestGridLegend.gridLegend.fgLineLegend.zhong.value=-110;
            IntelligentRoadTestGridLegend.gridLegend.fgLineLegend.zhong.min=-110;
            IntelligentRoadTestGridLegend.gridLegend.fgLineLegend.cha.max=-110;
        }
    }else{
        $(".fallNet").hide();
        if(IntelligentRoadTestGridLegend.gridLegend.fgLineLegend.zhong.width==0){
            IntelligentRoadTestGridLegend.gridLegend.fgLineLegend.zhong.value=-105;
            IntelligentRoadTestGridLegend.gridLegend.fgLineLegend.zhong.min=-105;
            IntelligentRoadTestGridLegend.gridLegend.fgLineLegend.cha.max=-105;
        }
    }
    if (IntelligentRoadTest.index == 7 || IntelligentRoadTest.index == 8 || IntelligentRoadTest.index == 14 || IntelligentRoadTest.index == 15
        || (IntelligentRoadTest.index == 2 && (IntelligentRoadTest.clickSenseName == "highway" || IntelligentRoadTest.clickSenseName == "rail" || IntelligentRoadTest.clickSenseName == "cityRoad"))) {
        $('#showRecordCheckbox').hide();
        $(".covGridLegend").show();
        var lineTypeVal = IntelligentRoadTest.lineTypeIndex;
        var colorText = "";
        if (lineTypeVal == "0") {
            colorText = "RSRP(dBm):";
        } else if (lineTypeVal == "1") {
            colorText = "平均上行速率(Mbps):";
        } else if (lineTypeVal == "2") {
            colorText = "平均下行速率(Mbps):";
        } else {
            colorText = "";
        }
        $(".colorBarText").text(colorText);
        //根据数值初始化游标位置和色块宽度
        IntelligentRoadTestGridLegend.initSlidePosition(IntelligentRoadTestGridLegend.gridLegend);
        //初始化游标的拖动范围
        IntelligentRoadTestGridLegend.initSlideRange();
        //如果显示了标尺,则在input上显示标尺对应的值
        if($('.slideOrange:visible').parent().hasClass("slideLeft")){//边界左边
            $('.slideOrange:visible').siblings('.slideSpaceImg').click();
        }else if($('.slideOrange:visible').parent().hasClass("slideRight")){//边界右边
            $('.slideOrange:visible').siblings('.slideSpaceImg').click();
        }else{
            $('.slideOrange:visible').siblings('.slideImg').click();
        }
        return;
    }
    //栅格图层【栅格类型】选中的下标
    var index = $('.gridFieldset2 input[name="grid-type"]').index($('input[name="grid-type"][value=' + IntelligentRoadTest.gridTypeIndex + ']'));
    if (IntelligentRoadTest.isShowGrid || IntelligentRoadTest.isShowDTGrid) {//判断当前的地图是否有栅格
        $('#showRecordCheckbox').show();
        $(".covGridLegend").show();
        if (IntelligentRoadTest.isThreeNetStatus) {//三网提示信息 月份+AGPS-MR
            $(".colorBarText").text(IntelligentRoadTest.month_relate_three + " AGPS-MR" + "(dBm)");
        } else {//覆盖频段+栅格数据  “栅格数据”+“平均上行速率”
            var gridTime = IntelligentRoadTest.gridTime == "week" ? "周·" : "天·";
            var text_info = gridTime + IntelligentRoadTestSystemLayerV3.getGridName(IntelligentRoadTest.gridTypeIndex)["zhibiao"];
            $(".colorBarText").text(text_info);
        }

        //根据数值初始化游标位置和色块宽度
        IntelligentRoadTestGridLegend.initSlidePosition(IntelligentRoadTestGridLegend.gridLegend);
        //初始化游标的拖动范围
        IntelligentRoadTestGridLegend.initSlideRange();
        //如果显示了标尺,则在input上显示标尺对应的值
        if($('.slideOrange:visible').parent().hasClass("slideLeft")){//边界左边
            $('.slideOrange:visible').siblings('.slideSpaceImg').click();
        }else if($('.slideOrange:visible').parent().hasClass("slideRight")){//边界右边
            $('.slideOrange:visible').siblings('.slideSpaceImg').click();
        }else{
            $('.slideOrange:visible').siblings('.slideImg').click();
        }
    } else {//没有则隐藏图例
        $(".covGridLegend").hide();
    }
    IntelligentRoadTestSystemLayerV3.resetGridType();
    if (IntelligentRoadTestSystemLayerV3.isShowUCGrid) {
        $(".colorBar-info").show();
        $("ul#colorLegenUC").show();
    }else{
        $("ul#colorLegenUC").hide();
    }
    if(IntelligentRoadTest.isShowGrid&&IntelligentRoadTestSystemLayerV3.isShowUCGrid){
        $(".covGridLegend").css("bottom","40px");
    }else{
        $(".covGridLegend").css("bottom",0);
    }

    /* if(IntelligentRoadTest.currentLocation.toLowerCase().endsWith("sector")){//当前查看扇区或专题扇区，将上、下行速率禁用
         $(".gridFieldSetInfo .gridTypeDiv:lt(2) input , input[name='grid-type']:lt(2)").attr("disabled",true);
         $(".gridFieldSetInfo .gridTypeDiv:lt(2) input , input[name='grid-type']:lt(2)").siblings('label').addClass("greyColor");
         $(".bandMap input").attr("disabled",true);
         $(".bandMap input").siblings('label').addClass("greyColor");

         // $(".fieldsetInfo .bandDiv:eq(1) input , input[name='band-radio']:eq(1) , input#zy-grid").attr("disabled",true);
         // $(".fieldsetInfo .bandDiv:eq(1) input , input[name='band-radio']:eq(1) , input#zy-grid").siblings('label').addClass("greyColor");
     }else{
         if($("input[id='fgzl-type'][name='grid-type']").is(':checked')){
             $(".gridFieldSetInfo .gridTypeDiv:lt(2) input , input[name='grid-type']:lt(2)").attr("disabled",false);
             $(".gridFieldSetInfo .gridTypeDiv:lt(2) input , input[name='grid-type']:lt(2)").siblings('label').removeClass("greyColor");
             $(".bandMap input").attr("disabled",true);
             $(".bandMap input").siblings('label').addClass("greyColor");
             // $(".fieldsetInfo .bandDiv:eq(1) input , input[name='band-radio']:eq(1) , input#zy-grid").attr("disabled",false);
             // $(".fieldsetInfo .bandDiv:eq(1) input , input[name='band-radio']:eq(1) , input#zy-grid").siblings('label').removeClass("greyColor");

         }
     }*/
}

IntelligentRoadTest.getSectorXYZ = function IntelligentRoadTest_getSectorXYZ(band_order) {
    var xy = 0.0008;
    var z = 3.5;
    var r = 6;
    //case band when '2.6GHz' then 4 when '2.1GHz' then 3 when '1.8GHz' then 2 when '800MHz' then 1 else 5 end as band_order
    if (band_order == 4) {
        xy = 0.0004;
        z = 0.8;
        r = 2;
    } else if (band_order == 3) {
        xy = 0.0006;
        z = 1.8;
        r = 4;
    } else if (band_order == 1) {
        xy = 0.001;
        z = 5.5;
        r = 8;
    }
    return {"xy": xy, "z": z, "r": r};
}
/**********************************
 * @funcname IntelligentRoadTest.loadPolygonByObjectIdList
 * @funcdesc 查询附近弱区或者覆盖弱区
 * @param {list} obj (input)
 * 包含附近或者覆盖弱区object_id的数组对象
 * @param {string} type (input)
 * type==1为附近弱区 type==2覆盖弱区
 * @return {null}
 * @author 郑文彬
 * @create 20180412
 ***********************************/
IntelligentRoadTest.loadPolygonByObjectIdList = function IntelligentRoadTest_loadPolygon(obj, type) {
    var objectIdList = "";
    for (var i = 0; i < obj.length; i++) {
        objectIdList = objectIdList + "'" + obj[i].object_id + "',";
    }
    if (objectIdList == "") {
        return;
    }
    objectIdList = objectIdList.substring(0, objectIdList.length - 1);
    var list = ["IntelligentRoadTestAnalysi_v2_getPolygon", "OBJECT_ID_LIST:" + objectIdList, "DAY:" + IntelligentRoadTest.day];
    var funcList = [IntelligentRoadTest.showPolygonList];
    var database = [3];
    progressbarTwo.submitSql([list], funcList, database, [[type]], null, null, null, true);
}
//附近弱区
IntelligentRoadTest.showPolygonList = function IntelligentRoadTest_showPolygonList(data, obj) {
//	IntelligentRoadTest.polygonList=[];
    var result = callBackChangeData(data);
//	var id="";
    var clas = "fjrq";
    if (obj[0] == 2) {
        clas = "fjrq";
    } else {
        clas = "fgrq";
    }
    for (var i = 0; i < result.length; i++) {
        var varr = [];
        var gis_data = result[i].gis_data;
        var sp = gis_data.split('@');
        var sumLon = 0;
        var sumLat = 0;
        for (var j = 0; j < sp.length; j++) {
            var v = sp[j].split(',');
            sumLon = sumLon + parseFloat(v[0]);
            sumLat = sumLat + parseFloat(v[1]);
            varr.push(new BMap.Point(v[0], v[1]));
        }
        var polygon = new BMap.Polygon(varr, {
            strokeColor: "#FF9900",
            strokeWeight: 4,
            strokeOpacity: 1,
            fillOpacity: 0.1
        });  //创建多边形
        polygon.i = i;
        polygon.latitude_mid_baidu = result[i].latitude_mid_baidu;
        polygon.longitude_mid_baidu = result[i].longitude_mid_baidu;
        polygon.type = clas;
        polygon.addEventListener("mouseout", function (e) {
            this.setStrokeColor('#FF9900');
            $('.listDiv :visible .' + this.type + '  li').eq(this.i).css("background", "#fff");
        });
        polygon.addEventListener("mouseover", function (e) {
            this.setStrokeColor('#9ffb13');
            $('.listDiv :visible .' + this.type + '  li').eq(this.i).css("background", "#f4f4f4");
        });

        $('.listDiv :visible .' + clas + '  li').eq(i).bind('mouseout', polygon, function (event) {
            $(this).css("background", "#fff");
            event.data.setStrokeColor('#FF9900');
        });
        $('.listDiv :visible .' + clas + '  li').eq(i).bind('mouseover', polygon, function (event) {
            event.data.setStrokeColor('#9ffb13');
            $(this).css("background", "#f4f4f4");
        });
        IntelligentRoadTest.polygonList.push(polygon)
//		IntelligentRoadTest.map.addOverlay(polygon);   //增加多边形
    }
}
IntelligentRoadTest.drawMacSectorLink = function IntelligentRoadTest_drawMacSectorLink(list) {
    var img = "../js/IntelligentRoadTest/images/maker3.png";
    for (var i = 0; i < IntelligentRoadTest.lineArr.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.lineArr[i]);
    }
    for (var i = 0; i < IntelligentRoadTest.sectorPolygonArr.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.sectorPolygonArr[i]);
    }
    for (var i = 0; i < IntelligentRoadTest.macSectorMarkeArr.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.macSectorMarkeArr[i]);
    }
    IntelligentRoadTest.lineArr = [];
    IntelligentRoadTest.sectorPolygonArr = [];
    IntelligentRoadTest.macSectorMarkeArr = [];//宏站账台mk
    for (var i = 0; i < list.length; i++) {
        var predLocation = list[i].pred_location_baidu;

        var lng = predLocation.split(",")[0];
        var lat = predLocation.split(",")[1];
        var obj = IntelligentRoadTest.getSectorXYZ(list[i].band_mapping);
//		var pointArr=IntelligentRoadTest.add_sector(new BMap.Point(lng,lat),0.0003,0.0003,3.5,list[i].ant_azimuth)
        var pointArr = IntelligentRoadTest.add_sector(new BMap.Point(lng, lat), obj.xy, obj.xy, obj.z, list[i].ant_azimuth)
        lng = (pointArr[2].lng + pointArr[2].lng) / 2;
        lat = (pointArr[2].lat + pointArr[2].lat) / 2;

        var lng_2 = list[i].longitude_mid_baidu;
        var lat_2 = list[i].latitude_mid_baidu;
        var pointArr_2 = IntelligentRoadTest.add_sector(new BMap.Point(lng_2, lat_2), obj.xy, obj.xy, obj.z, list[i].ant_azimuth)
//		var pointArr_2=IntelligentRoadTest.add_sector(new BMap.Point(lng_2,lat_2),0.0003,0.0003,3.5,list[i].ant_azimuth)
        lng_2 = (pointArr_2[2].lng + pointArr_2[3].lng) / 2;
        lat_2 = (pointArr_2[2].lat + pointArr_2[2].lat) / 2;

//		if(list[i].ant_azimuth==null||list[i].band_mapping==null){
//			  lng=predLocation.split(",")[0];
//			  lat=predLocation.split(",")[1];
//			  lng_2=list[i].longitude_mid_baidu;
//			  lat_2=list[i].latitude_mid_baidu;
//		}
        var point = new BMap.Point(lng, lat);
        var myIcon = new BMap.Icon(img, new BMap.Size(22, 32));
        var marker = new BMap.Marker(point, {icon: myIcon});  // 创建标注
        marker.setOffset(new BMap.Size(0, -14));
        IntelligentRoadTest.map.addOverlay(marker);
        //画线条
        var polyline = new BMap.Polyline([
            new BMap.Point(lng_2, lat_2),
            new BMap.Point(lng, lat)
        ], {strokeColor: "#505872", strokeWeight: 2, strokeOpacity: 0.5});   //创建折线
        polyline.cell_name = list[i].cell_name;
        IntelligentRoadTest.map.addOverlay(polyline);
//	    //画扇区 这里还需要在画一个预测偏位角的扇区，坐标和台账坐标一致。只是
        var point = new BMap.Point(list[i].longitude_mid_baidu, list[i].latitude_mid_baidu);
        if (list[i].ant_azimuth != null && list[i].band_mapping != null) {
            var assemble = IntelligentRoadTest.add_sector(point, obj.xy, obj.xy, obj.z, list[i].ant_azimuth);
//	    	var assemble=IntelligentRoadTest.add_sector(point,0.0003,0.0003,3.5,list[i].ant_azimuth);
            var sectorPolygon = new BMap.Polygon(assemble);
            sectorPolygon.setFillColor("#4661AC");
            sectorPolygon.setStrokeWeight(1);
            sectorPolygon.point2 = point;
            sectorPolygon.cell_name = list[i].cell_name;
            sectorPolygon.isPred = false;
            sectorPolygon.addEventListener("mouseover", function () {
                for (var k = 0; k < IntelligentRoadTest.sectorPolygonArr.length; k++) {
                    if (IntelligentRoadTest.sectorPolygonArr[k].cell_name == this.cell_name) {
                        IntelligentRoadTest.sectorPolygonArr[k].setFillColor("#9ffb13");
                    }
                }
            });
            sectorPolygon.addEventListener("mouseout", function () {
                for (var k = 0; k < IntelligentRoadTest.sectorPolygonArr.length; k++) {
                    if (IntelligentRoadTest.sectorPolygonArr[k].cell_name == this.cell_name) {
                        if (IntelligentRoadTest.sectorPolygonArr[k].isPred == true) {
                            IntelligentRoadTest.sectorPolygonArr[k].setFillColor("#F9C943");
                        } else {
                            IntelligentRoadTest.sectorPolygonArr[k].setFillColor("#4661AC");
                        }
                    }
                }
            });
            IntelligentRoadTest.map.addOverlay(sectorPolygon);
        }
        if (list[i].pred_azimuth != null && list[i].band_mapping != null) { //绘制预测角度的扇区
            var assemble1 = IntelligentRoadTest.add_sector(point, obj.xy, obj.xy, obj.z, list[i].pred_azimuth);
//	    	var assemble=IntelligentRoadTest.add_sector(point,0.0003,0.0003,3.5,list[i].ant_azimuth);
            var sectorPolygon1 = new BMap.Polygon(assemble1);
            sectorPolygon1.setFillColor("#F9C943"); //这里需要更换颜色
            sectorPolygon1.setStrokeWeight(2);
            sectorPolygon1.setStrokeStyle("dashed");
            sectorPolygon1.point2 = point;
            sectorPolygon1.cell_name = list[i].cell_name;
            sectorPolygon1.isPred = true;
            sectorPolygon1.addEventListener("mouseover", function () {
                for (var k = 0; k < IntelligentRoadTest.sectorPolygonArr.length; k++) {
                    if (IntelligentRoadTest.sectorPolygonArr[k].cell_name == this.cell_name) {
                        IntelligentRoadTest.sectorPolygonArr[k].setFillColor("#9ffb13");
                    }
                }
            });
            sectorPolygon1.addEventListener("mouseout", function () {
                for (var k = 0; k < IntelligentRoadTest.sectorPolygonArr.length; k++) {
                    if (IntelligentRoadTest.sectorPolygonArr[k].cell_name == this.cell_name) {
                        if (IntelligentRoadTest.sectorPolygonArr[k].isPred == true) {
                            IntelligentRoadTest.sectorPolygonArr[k].setFillColor("#F9C943");
                        } else {
                            IntelligentRoadTest.sectorPolygonArr[k].setFillColor("#4661AC");
                        }
                    }
                }
            });
            IntelligentRoadTest.map.addOverlay(sectorPolygon1);
        }
        polyline.index = i;
        polyline.addEventListener("mouseout", function (e) {
            var img = "../js/IntelligentRoadTest/images/bg_num.png";
            this.setStrokeColor("#505872");
            $("#showMacSectorDiv").find(".listUL > li").eq(this.index).find(".numSpan").css("background", "url(" + "../js/IntelligentRoadTest/images/bg_num.png" + ")");
            $("#showMacSectorDiv").find(".listUL > li").eq(this.index).css("background", "#ffff");
            for (var k = 0; k < IntelligentRoadTest.sectorPolygonArr.length; k++) {
                if (IntelligentRoadTest.sectorPolygonArr[k].cell_name == this.cell_name) {
                    if (IntelligentRoadTest.sectorPolygonArr[k].isPred == true) {
                        IntelligentRoadTest.sectorPolygonArr[k].setFillColor("#F9C943");
                    } else {
                        IntelligentRoadTest.sectorPolygonArr[k].setFillColor("#4661AC");
                    }
                }
            }
        });
        polyline.addEventListener("mouseover", function (e) {
            for (var i = 0; i < IntelligentRoadTest.lineArr.length; i++) {
                IntelligentRoadTest.lineArr[i].setStrokeColor("#505872");
                IntelligentRoadTest.markerList[i].setIcon(new BMap.Icon("../js/IntelligentRoadTest/images/bg_num.png", new BMap.Size(22, 32)));
            }
            IntelligentRoadTest.markerList[this.index].setIcon(new BMap.Icon("../js/IntelligentRoadTest/images/maker2.png", new BMap.Size(22, 32)));
            this.setStrokeColor("#9ffb13");
            //改变列表图标及背景色
            IntelligentRoadTest.changeImg(6, this.index);
            for (var k = 0; k < IntelligentRoadTest.sectorPolygonArr.length; k++) {
                if (IntelligentRoadTest.sectorPolygonArr[k].cell_name == this.cell_name) {
                    IntelligentRoadTest.sectorPolygonArr[k].setFillColor("#9ffb13");
                }
            }
        });
//	    /  $("#"+id).find(".listUL > li").eq(i).find(".numSpan").css("background","url("+"../js/IntelligentRoadTest/images/maker2.png"+")");
        IntelligentRoadTest.lineArr.push(polyline);
        IntelligentRoadTest.sectorPolygonArr[i] = sectorPolygon;
        IntelligentRoadTest.sectorPolygonArr[i + list.length] = sectorPolygon1;
        IntelligentRoadTest.macSectorMarkeArr.push(marker);//宏站账台mk

    }
}
/**********************************
 * @funcname IntelligentRoadTest.mrNrTop5CellBgColor
 * @funcdesc 附件扇区和接入删去的链接线和表格双向高亮显示
 * @param {String} type (input optional)
 * type==0附件扇区 type==1接入扇区
 * @param {String} polyline (input optional)
 * 连接线对象
 * @return {null}
 * @author 郑文彬
 * @create 20180412
 ***********************************/
IntelligentRoadTest.mrNrTop5CellBgColor = function IntelligentRoadTest_mrNrTop5CellBgColor(polyline, type, sectorList) {
    var id;
    var divClass = "";
    var color = "";
    if (type == 0) {
        divClass = "nrTop5Cell";
        color = "#cc66ff";
    } else {
        divClass = "mrNrTop5Cell";
        color = "blue";
    }
    if (type == 2) { //越区邻区列表
        divClass = "cbnrTop5Cell";
        color = "#cc66ff";
    }
    var indexArr = IntelligentRoadTest.getPolylineAndSectorListIndex(sectorList);
    switch (IntelligentRoadTest.index) {
        case 0:
            id = "poorAreaCompleteMessage";
            if (IntelligentRoadTest.isShowGridMessage) {
                id = "showGridCompleteMessage";
            }
            break;
        case 1:
            id = "showConcernAreaCompleteMessage";
            break;
        case 2:
            break;
        case 3:
            id = "sectorCompleteMessage";
            break;
        case 4:
            break;
        case 5:
            id = "showBoneAreaCompleteMessage";
            break;
        case 9:
            id = "showUptownCompleteMessage";
            break;
        case 10:
            id = "showCollegeCompleteMessage";
            break;
        case 11:
            id = "showBusinessCompleteMessage";
            break;
        case 12:
            id = "showSceneryCompleteMessage";
            break;
        case 13:
            id = "saveBoxSelection";
            break;
        case 16:
            id = "showWarwolfCompleteMessage";
            break;
        case 17:
            id = "showMarketCompleteMessage";
            break;
        case 18:
            id = "showFoodCompleteMessage";
            break;
        case 19:
            id = "showSiteCompleteMessage";
            break;
        default:
            break;
    }
    if (IntelligentRoadTest.index == 15) {
        if (IntelligentRoadTest.metroIndex == 3) {
            id = "showMetroCompleteMessage";
        } else if (IntelligentRoadTest.metroIndex == 4) {
            id = "showMetro78LineCompleteMessage";
        }
    }
    if (IntelligentRoadTest.isGridMessage) {
        id = "showGridCompleteMessage";
    }
    polyline.addEventListener("mouseover", function (e) {
        $('.listDiv :visible .' + divClass + ' ul li').eq(indexArr[polyline.i]).css("background", "#f4f4f4");
        polyline.setStrokeColor('#9ffb13');
    });
    polyline.addEventListener("mouseout", function (e) {
        $('.listDiv :visible .' + divClass + ' ul li').eq(indexArr[polyline.i]).css("background", "#fff");
        polyline.setStrokeColor(color);
    });
    $('.listDiv :visible .' + divClass + ' ul li').eq(indexArr[polyline.i]).mouseover(function () {
        $('.listDiv :visible .' + divClass + ' ul li').eq(indexArr[polyline.i]).css("background", "#f4f4f4");
        polyline.setStrokeColor('#9ffb13');
    });
    $('.listDiv :visible .' + divClass + ' ul li').eq(indexArr[polyline.i]).mouseout(function () {
        $('.listDiv :visible .' + divClass + ' ul li').eq(indexArr[polyline.i]).css("background", "#fff");
        polyline.setStrokeColor(color);
    });

    //绑定那些数据缺失的行的移入事件
    if (indexArr.indexOf(polyline.i) < 0) {
        $('.listDiv :visible .' + divClass + ' ul li').eq(polyline.i).mouseover(function () {
            alert("台账数据缺失！请联系相关人员进行处理！");
            $(this).unbind();
        });
    }

}

IntelligentRoadTest.setTACircleWeight = function (circle) {
    var divClass = "";
    divClass = "mrNrTop5Cell";
    circle.addEventListener("mouseover", function (e) {
        $('.listDiv :visible .' + divClass + ' ul li').eq(circle.i).css("background", "#f4f4f4");
        circle.setStrokeColor('#9ffb13');
    });
    circle.addEventListener("mouseout", function (e) {
        $('.listDiv :visible .' + divClass + ' ul li').eq(circle.i).css("background", "#fff");
        circle.setStrokeColor(color);
    });
    $('.listDiv :visible .' + divClass + ' ul li').eq(circle.i).mouseover(function () {
        $('.listDiv :visible .' + divClass + ' ul li').eq(circle.i).css("background", "#f4f4f4");
        circle.setStrokeColor('#9ffb13');
    });
    $('.listDiv :visible .' + divClass + ' ul li').eq(circle.i).mouseout(function () {
        $('.listDiv :visible .' + divClass + ' ul li').eq(circle.i).css("background", "#fff");
        circle.setStrokeColor(color);
    });
}


//-------------------------------------戴岭南代码开始------------------------------------------


$("#baocunConcernArea").click(function () {
    // alert("关注区域点击");

    // IntelligentRoadTest.SelectionOverlay.area_name = $("#saveConcernAreaName").val().trim();
    IntelligentRoadTest.SelectionOverlay.create_user = $('#headerUserForm_a').text().trim();
    // IntelligentRoadTest.SelectionOverlay.area_type = $("#saveConcernAreaType").val().trim();
    var area_name = $("#saveConcernAreaName").val().trim();
    var area_type = $("#saveConcernAreaType").val().trim();
    IntelligentRoadTest.SelectionOverlay.area_name = escapeHtml(area_name);
    IntelligentRoadTest.SelectionOverlay.area_type = escapeHtml(area_type);
    if (IntelligentRoadTest.SelectionOverlay.area_name == "" || IntelligentRoadTest.SelectionOverlay.area_type == "") {
        alert("请输入区域名称和区域类型");
        return;
    }
    IntelligentRoadTest.saveConcernArea(IntelligentRoadTest.SelectionOverlay);

    //IntelligentRoadTest.getConcernAreaMessageById(clickConcernArea[0].id);

});

$("#baocunBoneArea").click(function () {
    // alert("骨头区域点击");
    IntelligentRoadTest.SelectionOverlay.create_user = $('#headerUserForm_a').text().trim();
    var area_name = $("#saveConcernAreaName").val().trim();
    var area_type = $("#saveConcernAreaType").val().trim();
    IntelligentRoadTest.SelectionOverlay.area_name = escapeHtml(area_name);
    IntelligentRoadTest.SelectionOverlay.area_type = escapeHtml(area_type);

    // var user = escapeHtml( IntelligentRoadTest.SelectionOverlay.area_name);
    if (IntelligentRoadTest.SelectionOverlay.area_name == "" || IntelligentRoadTest.SelectionOverlay.area_type == "") {
        alert("请输入区域名称和区域类型");
        return;
    }
    IntelligentRoadTest.saveBoneArea(IntelligentRoadTest.SelectionOverlay);


});

/**********************************
 * @funcname IntelligentRoadTest.resultFilterByTypeAndId
 * @funcdesc 根据类型和id筛选数据
 * @param {array} result 需要去重的数据
 * @param {string} objectType 类型
 * @param {int} objectId id
 * @return {array} 筛选后的数据
 * @author  戴岭南
 * @create 2018/4/10 10:49
 * @modifier
 * @modify
 ***********************************/
//
IntelligentRoadTest.resultFilterByTypeAndId = function IntelligentRoadTest_resultFilterByTypeAndId(result, objectType, objectId) {

    if (IntelligentRoadTest.resultTempFliterObj == null) {
        IntelligentRoadTest.resultTempFliterObj = crossfilter([]);
        IntelligentRoadTest.resultTempFliterObj.add(result);
    } else {
        IntelligentRoadTest.resultTempFliterObj.remove();
        IntelligentRoadTest.resultTempFliterObj.add(result);
    }
    var rfgFilter = IntelligentRoadTest.resultTempFliterObj.dimension(function (d) {
        return d
    });
    rfgFilter.filter(function (d) {
        if (d.esbh_type == objectType && d.esbh_id == objectId) {
            return d;
        }
    })
    //console.log(rfgFilter.top(1));
    return rfgFilter.top(1);
}

/**********************************
 * @funcname IntelligentRoadTest.gridResultGroupByGridNum
 * @funcdesc 根据栅格号去重数据
 * @param {array} result 需要去重的数据
 * @return {array} 去重后的数据
 * @author  戴岭南
 * @create 2018/4/10 10:49
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.gridResultGroupByGridNum = function IntelligentRoadTest_gridResultGroupByGridNum(result) {

    if (result == null || result.length == 0) {
        return [];
    }
    if (IntelligentRoadTest.gridResultTempFliterObj == null) {
        IntelligentRoadTest.gridResultTempFliterObj = crossfilter([]);
        IntelligentRoadTest.gridResultTempFliterObj.add(result);
    } else {
        IntelligentRoadTest.gridResultTempFliterObj.remove();
        IntelligentRoadTest.gridResultTempFliterObj.add(result);
    }
    var paymentsByGridNum = IntelligentRoadTest.gridResultTempFliterObj.dimension(function (d) {
        return d.a1;
    });

    function reduceAdd(p, v) {
        p.count++;
        p.a1 = v.a1;
        p.a11 = v.a11;
        p.a12 = v.a12;
        p.a13 = v.a13;
        p.a14 = v.a14;
        p.a15 = v.a15;
        p.a16 = v.a16;
        p.a18 = v.a18;
        p.a19 = v.a19;
        p.a22 = v.a22;
        p.a26 = v.a26;
        p.a27 = v.a27;
        p.a28 = v.a28;
        p.a29 = v.a29;
        p.a30 = v.a30;
        p.a31 = v.a31;
        p.a32 = v.a32;
        p.a33 = v.a33;
        p.a34 = v.a34;
        p.a35 = v.a35;
        p.a36 = v.a36;
        p.a37 = v.a37;
        p.a38 = v.a38;

        return p;
    };

    function reduceRemove(p, v) {

        p.a1 = v.a1;
        p.a11 = v.a11;
        p.a12 = v.a12;
        p.a13 = v.a13;
        p.a14 = v.a14;
        p.a15 = v.a15;
        p.a16 = v.a16;
        p.a18 = v.a18;
        p.a19 = v.a19;
        p.a22 = v.a22;
        p.a26 = v.a26;
        p.a27 = v.a27;
        p.a28 = v.a28;
        p.a29 = v.a29;
        p.a30 = v.a30;
        p.a31 = v.a31;
        p.a32 = v.a32;
        p.a33 = v.a33;
        p.a34 = v.a34;
        p.a35 = v.a35;
        p.a36 = v.a36;
        p.a37 = v.a37;
        p.a38 = v.a38;
        return p;
    };

    function reduceInitial() {
        return {
            count: 0,
            a1: "",
            a11: "",
            a12: "",
            a13: "",
            a14: "",
            a15: "",
            a16: "",
            a18: "",
            a19: "",
            a22: "",
            a26: "",
            a27: "",
            a28: "",
            a29: "",
            a30: "",
            a31: "",
            a32: "",
            a33: "",
            a34: "",
            a35: "",
            a36: "",
            a37: "",
            a38: "",
        };
    };

    function orderValue(p) {
        return p;
    };


    var groupByGridNum = paymentsByGridNum.group().reduceSum(function (d) {
        return d;
    });
    var topTotals = groupByGridNum.reduce(reduceAdd, reduceRemove, reduceInitial).order(orderValue);
    // console.log(topTotals.top(IntelligentRoadTest.gridResultTempFliterObj.size()));
    return topTotals.top(IntelligentRoadTest.gridResultTempFliterObj.size());

}


/**********************************
 * @funcname IntelligentRoadTest.lastSelectionList
 * @funcdesc  取消框选调到之前页面展示的状态
 * @param {int } index  框选之前保存的页面index
 * @return
 * @author  戴岭南
 * @create 2018/4/10 10:47
 * @modifier
 * @modify
 ***********************************/
//
IntelligentRoadTest.lastSelectionList = function IntelligentRoadTest_lastSelectionList(index) {
    $("#showBoxSelectionList").hide();
    switch (index) {
        case 0:
            $("#showPoorAreaList").show();
            IntelligentRoadTest.index = 0;
            IntelligentRoadTest.senseName = "poorArea";
            break;
        case 1:
            $("#showConcernAreaList").show();
            IntelligentRoadTest.index = 1;
            break;
        case 2:
            $("#showAlarmInfoList").show();
            IntelligentRoadTest.index = 2;
            break;
        case 3:
            $("#showSectorList").show();
            IntelligentRoadTest.index = 3;
            break;
        case 4:
            $("#showdtList").show();
            IntelligentRoadTest.index = 4;
            break;
        case 5:
            $("#showBoneList").show();
            IntelligentRoadTest.index = 5;
            break;
        case 6:
            $("#showMacSectorList").show();
            IntelligentRoadTest.index = 6;
            break;
        case 9:
            $("#showUptownList").show();
            IntelligentRoadTest.index = 9;
            IntelligentRoadTest.senseName = "uptown";
            break;
        case 10:
            $("#showCollegeList").show();
            IntelligentRoadTest.index = 10;
            IntelligentRoadTest.senseName = "college";
            break;
        case 11:
            $("#showBusinessList").show();
            IntelligentRoadTest.index = 11;
            IntelligentRoadTest.senseName = "business";
            break;
        case 12:
            $("#showSceneryList").show();
            IntelligentRoadTest.index = 12;
            IntelligentRoadTest.senseName = "scenery";
            break;
        case 16:
            $("#showWarwolfList").show();
            IntelligentRoadTest.index = 16;
            IntelligentRoadTest.senseName = "warwolf";
            break;
        case 17:
            $("#showMarketList").show();
            IntelligentRoadTest.index = 17;
            IntelligentRoadTest.senseName = "market";
            break;
        case 18:
            $("#showFoodList").show();
            IntelligentRoadTest.index = 18;
            IntelligentRoadTest.senseName = "food";
            break;
        case 19:
            $("#showSiteList").show();
            IntelligentRoadTest.index = 19;
            IntelligentRoadTest.senseName = "site";
            break;
        /*case 20:
            $("#showSenseList").show();
            IntelligentRoadTest.index = IntelligentRoadTest.senseObject.index;
            IntelligentRoadTest.senseName = IntelligentRoadTest.senseObject.name;
            break;
        case 21:
            $("#showSenseList").show();
            IntelligentRoadTest.index = IntelligentRoadTest.senseObject.index;
            IntelligentRoadTest.senseName = IntelligentRoadTest.senseObject.name;
            break;
        case 22:
            $("#showSenseList").show();
            IntelligentRoadTest.index = IntelligentRoadTest.senseObject.index;
            IntelligentRoadTest.senseName = IntelligentRoadTest.senseObject.name;
            break;
        case 23:
            $("#showSenseList").show();
            IntelligentRoadTest.index = IntelligentRoadTest.senseObject.index;
            IntelligentRoadTest.senseName = IntelligentRoadTest.senseObject.name;
            break;*/
        default:
            break;
    }
    changeSearchPlaceholder();
}

/**********************************
 * @funcname IntelligentRoadTest.resetAllFilter
 * @funcdesc  点击搜索框返回，所有页面的筛选条件恢复默认
 * @param {int} index  各个场景对应的index
 * @return
 * @author 戴岭南
 * @create 2018/4/10 10:12
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.resetAllFilter = function IntelligentRoadTest_resetAllFilter(index) {
    switch (index) {
        case 0:
            var SelectName = "全部分类";
            var flexCol = $("#rfgList  .flexRow .flexCol");
            IntelligentRoadTest.triggleFilter(SelectName, flexCol);
            break;
        case 1:
            var SelectName = "全部分类";
            var flexCol = $("#concernAreaList  .flexRow .flexCol");
            IntelligentRoadTest.triggleFilter(SelectName, flexCol);
            break;
        case 2:
            var SelectName = "全部分类";
            var flexCol = $("#alarmInfoList  .flexRow .flexCol");
            IntelligentRoadTest.triggleFilter(SelectName, flexCol);
            break;
        case 3:
            var SelectName = "全部分类";
            var flexCol = $("#sectorList  .flexRow .flexCol");
            IntelligentRoadTest.triggleFilter(SelectName, flexCol);
            break;
        case 4:
            var SelectName = "全部分类";
            var flexCol = $("#dtList  .flexRow .flexCol");
            IntelligentRoadTest.triggleFilter(SelectName, flexCol);
            break;
        case 5:
            var SelectName = "全部分类";
            var flexCol = $("#boneList  .flexRow .flexCol");
            IntelligentRoadTest.triggleFilter(SelectName, flexCol);
            break;
        case 6:
            var SelectName = "距离偏差";
            var flexCol = $("#macSectorList  .flexRow .flexCol");
            IntelligentRoadTest.triggleFilter(SelectName, flexCol);
            break;
        case 9:
            var SelectName = "全部分类";
            var flexCol = $("#uptownList  .flexRow .flexCol");
            IntelligentRoadTest.triggleFilter(SelectName, flexCol);
            break;
        case 10:
            var SelectName = "全部分类";
            var flexCol = $("#collegeList  .flexRow .flexCol");
            IntelligentRoadTest.triggleFilter(SelectName, flexCol);
            break;
        case 11:
            var SelectName = "全部分类";
            var flexCol = $("#businessList  .flexRow .flexCol");
            IntelligentRoadTest.triggleFilter(SelectName, flexCol);
            break;
        case 12:
            var SelectName = "全部分类";
            var flexCol = $("#sceneryList  .flexRow .flexCol");
            IntelligentRoadTest.triggleFilter(SelectName, flexCol);
            break;
        case 16:
            var SelectName = "全部分类";
            var flexCol = $("#warwolfList  .flexRow .flexCol");
            IntelligentRoadTest.triggleFilter(SelectName, flexCol);
            break;
        case 17:
            var SelectName = "全部分类";
            var flexCol = $("#marketList  .flexRow .flexCol");
            IntelligentRoadTest.triggleFilter(SelectName, flexCol);
            break;
        case 18:
            var SelectName = "全部分类";
            var flexCol = $("#foodList  .flexRow .flexCol");
            IntelligentRoadTest.triggleFilter(SelectName, flexCol);
            break;
        case 19:
            var SelectName = "全部分类";
            var flexCol = $("#siteList  .flexRow .flexCol");
            IntelligentRoadTest.triggleFilter(SelectName, flexCol);
            break;
        default:
            break;
    }
}

/**********************************
 * @funcname escapeHtml
 * @funcdesc 转义HTML特殊字符
 * @param {String} text 需要转义的内容
 * @return {String} 转义后的文本内容
 * @author 戴岭南
 * @create 2018/4/10 10:14
 * @modifier
 * @modify
 ***********************************/

function escapeHtml(text) {
    var map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, function (m) {
        return map[m];
    });
}


//--------------------------------------戴岭南代码结束------------------------------------------

//------------------------------五高一地两美一场的代码开始（林楚佳）-----------------------------------------------

//根据ESBHID来获取数据
IntelligentRoadTest.getSenseDataByESBHID = function IntelligentRoadTest_getSenseDataByESBHID(type, esbh_id, day, isShowMk, isZLQY) {
    /*$('#layerSubmitProgressDiv').show();
    $('#layerSubmitProgressDiv .closeProgress').unbind("click").bind("click",function(){
        $('#layerSubmitProgressDiv').hide();
        if(IntelligentRoadTest.LayerMultiple!=undefined&&IntelligentRoadTest.LayerMultiple!=null){
            IntelligentRoadTest.LayerMultiple.cancelSqlAjax();
            IntelligentRoadTest.LayerMultiple = null;
        }
    });*/
    var sqlList = [];
    var list = ["IntelligentRoadTestAnalysi_v2_getSenecsAreaDataByESBHId", "ESBHID:" + esbh_id,
        "ESBHTYPE:" + type, "DAY:" + day, "USERNAME:" + IntelligentRoadTest.currentUser];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealSenseDataByESBHID];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database, [[type, esbh_id, isShowMk, isZLQY]]);
}

IntelligentRoadTest.dealSenseDataByESBHID = function IntelligentRoadTest_dealSenseDataByESBHID(data, parm) {
    var result = callBackChangeData(data);
    if (result.length > 0) {
        var item = result[0];
        IntelligentRoadTest.openInfoWindowTwo(item.longitude_mid_baidu, item.latitude_mid_baidu,
            [
                {"key": "区域名称", "val": item.esbh_name},
                {"key": "区域编号", "val": item.esbh_id},
            ]
        );

        IntelligentRoadTest.messageCenterAndZoom = {
            center: new BMap.Point(item.longitude_mid_baidu, item.latitude_mid_baidu),
            zoom: getZoom(result[0].longitude_max_baidu, result[0].longitude_min_baidu, result[0].latitude_max_baidu, result[0].latitude_min_baidu)
        };
    } else {
        var typeName = IntelligentRoadTest.getSenseChineseName(parm[0]);
        alert(IntelligentRoadTest.day + " " + typeName + "数据异常，请更换查询日期!");
    }
    if (parm[2] == 'map') {
        // IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
        // IntelligentRoadTest.isShowAlarmInfoMessage = false;
    }
    if (parm[0] == 1) {
        if (result.length > 0) {
            if (parm[2] == 'map') {
                IntelligentRoadTestSystemLayerV3.showHighCollegesMessage(result[0]);
            } else {
                if (IntelligentRoadTest.collegeVM == null) {
                    IntelligentRoadTest.showCollegeData([]);
                }
                IntelligentRoadTest.collegeVM.showMessage(result[0]);
            }
        } else {
            if (IntelligentRoadTest.collegeCompleteVM != null) {
                IntelligentRoadTest.collegeCompleteVM.collegeData = {};
                IntelligentRoadTest.collegeCompleteVM.collegeData.esbh_id = parm[1];
            }
        }
    } else if (parm[0] == 2) {
        if (result.length > 0) {
            if (parm[2] == 'map') {
                IntelligentRoadTestSystemLayerV3.showUptownMessage(result[0]);
            } else {
                if (IntelligentRoadTest.uptownVM == null) {
                    IntelligentRoadTest.showUptownData([]);
                }
                IntelligentRoadTest.uptownVM.showMessage(result[0]);
            }
        } else {
            if (IntelligentRoadTest.uptownCompleteVM != null) {
                IntelligentRoadTest.uptownCompleteVM.uptownData = {};
                IntelligentRoadTest.uptownCompleteVM.uptownData.esbh_id = parm[1];
            }
        }
    } else if (parm[0] == 3) {
        if (IntelligentRoadTest.senseName == "warwolf" || parm[3] == true) {
            if (result.length > 0) {
                if (parm[2] == 'map') {
                    IntelligentRoadTestSystemLayerV3.showWarwolfMessage(result[0]);
                } else {
                    if (IntelligentRoadTest.warwolfVM == null) {
                        IntelligentRoadTest.showWarwolfData([]);
                    }
                    IntelligentRoadTest.warwolfVM.showMessage(result[0]);
                }
            } else {
                if (IntelligentRoadTest.warwolfCompleteVM != null) {
                    IntelligentRoadTest.warwolfCompleteVM.warwolfData = {};
                    IntelligentRoadTest.warwolfCompleteVM.warwolfData.esbh_id = parm[1];
                }
            }
        } else {
            if (result.length > 0) {
                if (parm[2] == 'map') {
                    IntelligentRoadTestSystemLayerV3.showBusinessMessage(result[0]);
                } else {
                    if (IntelligentRoadTest.businessVM == null) {
                        IntelligentRoadTest.showBusinessData([]);
                    }
                    IntelligentRoadTest.businessVM.showMessage(result[0]);
                }
            } else {
                if (IntelligentRoadTest.businessCompleteVM != null) {
                    IntelligentRoadTest.businessCompleteVM.businessData = {};
                    IntelligentRoadTest.businessCompleteVM.businessData.esbh_id = parm[1];
                }
            }
        }
    } else if (parm[0] == 7) {
        if (result.length > 0) {
            if (parm[2] == 'map') {
                IntelligentRoadTestSystemLayerV3.showSceneryMessage(result[0]);
            } else {
                if (IntelligentRoadTest.sceneryVM == null) {
                    IntelligentRoadTest.showSceneryData([]);
                }
                IntelligentRoadTest.sceneryVM.showMessage(result[0]);
            }
        } else {
            if (IntelligentRoadTest.sceneryCompleteVM != null) {
                IntelligentRoadTest.sceneryCompleteVM.sceneryData = {};
                IntelligentRoadTest.sceneryCompleteVM.sceneryData.esbh_id = parm[1];
            }
        }
    } else if (parm[0] == 8) {
        if (result.length > 0) {
            if (parm[2] == 'map') {
                IntelligentRoadTestSystemLayerV3.showMarketMessage(result[0]);
            } else {
                if (IntelligentRoadTest.marketCompleteVM == null) {
                    IntelligentRoadTest.showMarketData([]);
                }
                IntelligentRoadTest.marketVM.showMessage(result[0]);
            }
        } else {
            if (IntelligentRoadTest.marketCompleteVM != null) {
                IntelligentRoadTest.marketCompleteVM.marketData = {};
                IntelligentRoadTest.marketCompleteVM.marketData.esbh_id = parm[1];
            }
        }
    } else if (parm[0] == 9) {
        if (result.length > 0) {
            if (parm[2] == 'map') {
                IntelligentRoadTestSystemLayerV3.showFoodMessage(result[0]);
            } else {
                if (IntelligentRoadTest.foodVM == null) {
                    IntelligentRoadTest.showFoodData([]);
                }
                IntelligentRoadTest.foodVM.showMessage(result[0]);
            }
        } else {
            if (IntelligentRoadTest.foodCompleteVM != null) {
                IntelligentRoadTest.foodCompleteVM.foodData = {};
                IntelligentRoadTest.foodCompleteVM.foodData.esbh_id = parm[1];
            }
        }
    } else if (parm[0] == 10) {
        if (result.length > 0) {
            if (parm[2] == 'map') {
                IntelligentRoadTestSystemLayerV3.showSiteMessage(result[0]);
            } else {
                if (IntelligentRoadTest.siteVM == null) {
                    IntelligentRoadTest.showSiteData([]);
                }
                IntelligentRoadTest.siteVM.showMessage(result[0]);
            }
        } else {
            if (IntelligentRoadTest.siteCompleteVM != null) {
                IntelligentRoadTest.siteCompleteVM.siteData = {};
                IntelligentRoadTest.siteCompleteVM.siteData.esbh_id = parm[1];
            }
        }
    } else if (parm[0] > 10) {
        if (result.length > 0) {
            if (parm[0] == 11) {
                IntelligentRoadTest.searchSenceTxtTmp = "中小学";
                IntelligentRoadTest.senseObject = IntelligentRoadTest.school; //将中小学的对象赋值给senseObject
                IntelligentRoadTest.index = IntelligentRoadTest.senseObject.index;
            } else if (parm[0] == 12) {
                IntelligentRoadTest.searchSenceTxtTmp = "城中村";
                IntelligentRoadTest.senseObject = IntelligentRoadTest.cityVillage; //将城中村的对象赋值给senseObject
                IntelligentRoadTest.index = IntelligentRoadTest.senseObject.index;
            } else if (parm[0] == 13) {
                IntelligentRoadTest.searchSenceTxtTmp = "自然村";
                IntelligentRoadTest.senseObject = IntelligentRoadTest.village; //将自然村的对象赋值给senseObject
                IntelligentRoadTest.index = IntelligentRoadTest.senseObject.index;
            } else if (parm[0] == 14) {
                IntelligentRoadTest.searchSenceTxtTmp = "工厂";
                IntelligentRoadTest.senseObject = IntelligentRoadTest.factory; //将工厂的对象赋值给senseObject
                IntelligentRoadTest.index = IntelligentRoadTest.senseObject.index;
            }
            if (IntelligentRoadTest.isFromAlarmList == true) { //如果是工单跳过来要变成2
                IntelligentRoadTest.index = 2;
            }
            if (IntelligentRoadTest.senseVM == null) {
                IntelligentRoadTest.showSenseData([]);
            }
            IntelligentRoadTest.senseVM.showMessage(result[0]);
        } else {
            if (IntelligentRoadTest.senseCompleteVM != null) {
                IntelligentRoadTest.senseCompleteVM.senseData = {};
                IntelligentRoadTest.senseCompleteVM.senseData.esbh_id = parm[1];
            }
        }
    }
    //    if(parm[2]!='true'){
//    	 IntelligentRoadTest.drawEsbhMk(result[0]);
//    }
}

IntelligentRoadTest.getSenseChineseName = function (type) {
    var typeName = "";
    switch (type) {
        case 1 :
            typeName = "高校";
            break;
        case 2 :
            typeName = "高密度住宅区";
            break;
        case 3 :
            typeName = "高流量商务区/战狼区域";
            break;
        case 7 :
            typeName = "美景";
            break;
        case 8 :
            typeName = "农贸市场";
            break;
        case 9 :
            typeName = "美食";
            break;
        case 10 :
            typeName = "场馆";
            break;
        case 11 :
            typeName = "中小学";
            break;
        case 12 :
            typeName = "城中村";
            break;
        case 13 :
            typeName = "自然村";
            break;
        case 14 :
            typeName = "工厂";
            break;
    }
    return typeName;
}

//根据ESBHID和开始日期与结束日期来获取30天的折线图数据
IntelligentRoadTest.getSense30DayLineData = function IntelligentRoadTest_getSense30DayLineData(type, esbh_id, city) {
    var sqlList = [];
    var endDay = IntelligentRoadTest.day;
    var startDay = new Date(dealDateString(endDay).getTime() - 30 * 24 * 60 * 60 * 1000).Format("yyyyMMdd");
    var cityCondition = "";
    if (city != null && city != '') {
        var city_id = noceUtil.city_LATN_ID[city];
        if (city_id != null && city_id != '') {
            cityCondition = "and city_id = " + city_id;
        }
    }
    var list = ["IntelligentRoadTestAnalysi_v2_getSenecsArea30DayLineData", "ESBHID:" + esbh_id,
        "ESBHTYPE:" + type, "STARTDAY:" + startDay, "ENDDAY:" + endDay, "CITYCONDITION:" + cityCondition];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealSense30DayLineData];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database, [type]);
}

IntelligentRoadTest.dealSense30DayLineData = function IntelligentRoadTest_dealSense30DayLineData(data, parm) {
    var result = callBackChangeData(data);
    var dealResult = [];
    if (result.length > 0) {
        for (var i = 0; i < result.length; i++) {
            var obj = {
                create_time: dealDateString(result[i].day.toString()).Format("yyyy-MM-dd"),
                cover: result[i].cover,
                rsrp: result[i].rsrp
            }
            dealResult[i] = obj;
        }
    }
    var divID = "";
    var secondDivID = ""
    if (parm == 1) {
        divID = "collegeLineChart";
        secondDivID = "collegeSecondChart";
    } else if (parm == 2) {
        divID = "uptownLineChart";
        secondDivID = "uptownSecondChart";
    } else if (parm == 3) {
        if (IntelligentRoadTest.currentLocation == "warwolf") {
            divID = "warwolfLineChart";
            secondDivID = "warwolfSecondChart";
        } else {
            divID = "businessLineChart";
            secondDivID = "businessSecondChart";
        }
    } else if (parm == 7) {
        divID = "sceneryLineChart";
        secondDivID = "scenerySecondChart";
    } else if (parm == 8) {
        divID = "marketLineChart";
        secondDivID = "marketSecondChart";
    } else if (parm == 9) {
        divID = "foodLineChart";
        secondDivID = "foodSecondChart";
    } else if (parm == 10) {
        divID = "siteLineChart";
        secondDivID = "siteSecondChart";
    } else {
        divID = "senseLineChart";
        secondDivID = "senseSecondChart";
    }
    var objResult = IntelligentRoadTest.getEchartData(dealResult);
    IntelligentRoadTest.show30DayEcharts(objResult, divID);
    IntelligentRoadTest.showSecondEchart(result, secondDivID);
}

//根据场景的id获取不同的类别的列表数据
IntelligentRoadTest.getSenseDataByObjectId = function IntelligentRoadTest_getSenseDataByObjectId(type, city, day, country_id, mktcenter_id, district_name, mktcenter_name) {
    var sqlList = [];
    var city_id , country_id;
    if(!isNull(city)){
        city_id = noceUtil.city_LATN_ID[city]; //获取地市ID
    }
    var list = ["IntelligentRoadTestAnalysi_v2_getSenecsAreaData", "CITY_ID:" + city_id, "ESBHTYPE:" + type, "DAY:" + day, "USERNAME:" + IntelligentRoadTest.currentUser];
    var districtDomId = "";
    var mktcenterDomId = "";

    if(!isNull(IntelligentRoadTest.countryPermission_common)){ //区县用户
        district_name = IntelligentRoadTest.countryPermission_common;
        $("#" + districtDomId).text(IntelligentRoadTest.countryPermission_common);
    }
    if (district_name != null && district_name != "" && district_name != "null") {
        list.push("COUNTRY:" + "and COUNTRY = '" + district_name + "'");
    } else {
        var countryStr = $("#" + districtDomId).text().trim();
        if (countryStr != "" && countryStr != "全市" && countryStr != "null") {
            district_name = countryStr;
            list.push("COUNTRY:" + "and COUNTRY = '" + district_name + "'");
        }
    }
    if (mktcenter_name != null && mktcenter_name != "" && mktcenter_name != "null") {
        list.push("MKTCENTER:" + "and MKTCENTER = '" + mktcenter_name + "'");
    } else {
        var mktcenter = $("#" + mktcenterDomId).text().trim();
        if (mktcenter != "" && mktcenter != "全区" && mktcenter_name != "null") {
            mktcenter_name = mktcenter;
            list.push("MKTCENTER:" + "and MKTCENTER = '" + mktcenter_name + "'");
        }
    }
    //记录查询条件
    if (type == 1) {
        IntelligentRoadTest.collegeCurrentSelectConditon = "" + city + mktcenter_name + day;
        districtDomId = "collegeDistrictName";
        mktcenterDomId = "collegeMktName";
    } else if (type == 2) {
        IntelligentRoadTest.uptownCurrentSelectConditon = "" + city + mktcenter_name + day;
        districtDomId = "uptownDistrictName";
        mktcenterDomId = "uptownMktName";
    } else if (type == 3) {
        IntelligentRoadTest.businessCurrentSelectConditon = "" + city + mktcenter_name + day;
        districtDomId = "businessDistrictName";
        mktcenterDomId = "businessMktName";
    } else if (type == 7) {
        IntelligentRoadTest.sceneryCurrentSelectConditon = "" + city + mktcenter_name + day;
        districtDomId = "sceneryDistrictName";
        mktcenterDomId = "sceneryMktName";
    } else if (type == 8) {
        IntelligentRoadTest.marketCurrentSelectConditon = "" + city + mktcenter_name + day;
        districtDomId = "marketDistrictName";
        mktcenterDomId = "marketMktName";
    } else if (type == 9) {
        IntelligentRoadTest.foodCurrentSelectConditon = "" + city  + mktcenter_name+ day;
        districtDomId = "foodDistrictName";
        mktcenterDomId = "foodMktName";
    } else if (type == 10) {
        IntelligentRoadTest.siteCurrentSelectConditon = "" + city + mktcenter_name + day;
        districtDomId = "siteCityDistrictName";
        mktcenterDomId = "siteCityMktName";
    } else {
        IntelligentRoadTest.senseCurrentSelectConditon = "" + city + mktcenter_name + day + type;
        districtDomId = "senseDistrictName";
        mktcenterDomId = "senseMktName";
    }
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealSenseDataByObjectId];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database, [type]);
}

IntelligentRoadTest.dealSenseDataByObjectId = function IntelligentRoadTest_dealSenseDataByObjectId(data, parm) {
    var result = callBackChangeData(data);
    if (parm == 1) { //高校
        IntelligentRoadTest.collegeResult = result;
        IntelligentRoadTest.collegeCurrentResult = result;
        var SelectName = $("#collegeListSelectName").text();
        var flexCol = $("#collegeList  .flexRow .flexCol");
        IntelligentRoadTest.triggleFilter(SelectName, flexCol);
    } else if (parm == 2) { //高密度住宅区
        IntelligentRoadTest.uptownResult = result;
        IntelligentRoadTest.uptownCurrentResult = result;
        var SelectName = $("#uptownSelectName").text();
        var flexCol = $("#uptownList  .flexRow .flexCol");
        IntelligentRoadTest.triggleFilter(SelectName, flexCol);

    } else if (parm == 3) { //高密度商务区
        IntelligentRoadTest.businessResult = result;
        IntelligentRoadTest.businessCurrentResult = result;
        var SelectName = $("#businessListSelectName").text();
        var flexCol = $("#businessList  .flexRow .flexCol");
        IntelligentRoadTest.triggleFilter(SelectName, flexCol);
    } else if (parm == 7) { //美景
        IntelligentRoadTest.sceneryResult = result;
        IntelligentRoadTest.sceneryCurrentResult = result;
        var SelectName = $("#sceneryListSelectName").text();
        var flexCol = $("#sceneryList  .flexRow .flexCol");
        IntelligentRoadTest.triggleFilter(SelectName, flexCol);
    } else if (parm == 8) { //农贸市场
        IntelligentRoadTest.marketResult = result;
        IntelligentRoadTest.marketCurrentResult = result;
        var SelectName = $("#marketListSelectName").text();
        var flexCol = $("#marketList  .flexRow .flexCol");
        IntelligentRoadTest.triggleFilter(SelectName, flexCol);
        // IntelligentRoadTest.showMarketData(result);
    } else if (parm == 9) { //美食
        IntelligentRoadTest.foodResult = result;
        IntelligentRoadTest.foodCurrentResult = result;
        var SelectName = $("#foodListSelectName").text();
        var flexCol = $("#foodList  .flexRow .flexCol");
        IntelligentRoadTest.triggleFilter(SelectName, flexCol);
        // IntelligentRoadTest.showFoodData(result);
    } else if (parm == 10) { //场馆
        IntelligentRoadTest.siteResult = result;
        IntelligentRoadTest.siteCurrentResult = result;
        var SelectName = $("#siteListSelectName").text();
        var flexCol = $("#siteList  .flexRow .flexCol");
        IntelligentRoadTest.triggleFilter(SelectName, flexCol);
        //IntelligentRoadTest.showSiteData(result);
    } else {
        /*if(IntelligentRoadTest.refreshSenseList == true){ //图层的数据和列表的数据不同
            IntelligentRoadTest.refreshSenseResult = result;
        }else{*/
        IntelligentRoadTest.senseResult = result;
        IntelligentRoadTest.senseCurrentResult = result;
        var SelectName = $("#senseListSelectName").text();
        var flexCol = $("#senseList  .flexRow .flexCol");
        IntelligentRoadTest.triggleFilter(SelectName, flexCol);
        // }
    }
    if (IntelligentRoadTest.index != null || IntelligentRoadTest.senseName != null) {
        showOrHideInputImage(1);
    }
}




//----------------------------------------高速、高铁和市政路的列表查询-----------------------
//500米一级列表查询
IntelligentRoadTest.getRoadFirstListData = function IntelligentRoadTest_getRoadFirstListData(cityName, day, typeID, isLP) {
//typeID : 1表示高速、2表示高铁、3表示市政路
//	day='20180114';
    if(IntelligentRoadTest.roadCurrentQueryCity == "全省" && IntelligentRoadTest.index == 8){
        cityName = "全省";
    }else{
        if(cityName != "全省"){
            IntelligentRoadTest.roadCurrentQueryCity = cityName;
        }
    }
    var sqlList = [];
    var list = [];
    if(IntelligentRoadTest.roadStatus == 3){ //连片
        isLP = true;
    }
    if (isLP == true) { //连片
        list = ["IntelligentRoadTestAnalysisV2_108_HighwayList_Continuous", "CITY:" + cityName, "DAY:" + day, "TYPE:" + typeID];
        if(typeID == 2){ //高铁要更换模板
            var cityCondition1 = " and city_name = '" + cityName + "'";
            var cityCondition2 = " and city = '" + cityName + "'";
            if(cityName == "全省"){
                cityCondition1 = "";
                cityCondition2 = "";
            }
            list = ["IntelligentRoadTestAnalysisV5_getRoadList_weak" , "DAY:" + day, "TYPE:" + typeID ,
                 "CITYIDCOND:" + cityCondition2];
        }
        //调用查询地图的线路数据的方法
        IntelligentRoadTest.queryContinueLine(cityName, typeID, day);
    }/*else if(IntelligentRoadTest.isSuiDao == true){
        var realTypeID = typeID;
        if(typeID == 2){
            realTypeID = 21;
        }
        list = ["IntelligentRoadTestAnalysisV2_108_HighwayList_Continuous", "CITY:" + cityName, "DAY:" + day, "TYPE:" + realTypeID];
        //调用查询地图的线路数据的方法
        IntelligentRoadTest.queryContinueLine(cityName, typeID, day);
    } */else { //500米
        list = ["IntelligentRoadTestAnalysisV2_101_HighwayList", "CITYNAME:" + cityName, "DAY:" + day,"TYPE:" + typeID];
        if (IntelligentRoadTest.ContinueLineGeoJsonLayer) {
            IntelligentRoadTest.ContinueLineGeoJsonLayer.clearLayers();
        }
        var realType = typeID;
        if(typeID == 2){ //高铁要更换模板 模板条件一致，主要是改表名  高铁修改为可以看全省
            var ctiyCondition1 = " and city = '" + cityName + "'";
            var cityCondition2 = " and city_name = '" + cityName +"'";
            if(cityName == "全省"){
                ctiyCondition1 = "";
                cityCondition2 = "";
            }
            list = ["IntelligentRoadTestAnalysisV5_getRoadList", "CITYIDCOND:" + ctiyCondition1, "DAY:" + day , "ROAD_TYPE_ID:" + typeID];
        }
        if(IntelligentRoadTest.roadStatus == 1){ //隧道
            if(typeID == 2){
                realType = 21; //高铁的隧道是21
                IntelligentRoadTest.getRoadSuiDaoGisData(cityName , realType); //查询第一二层的数据
            }
        }else if(IntelligentRoadTest.roadStatus == 2){
            if(typeID == 2){
                realType = 22; //高铁的非隧道是22
            }
        }
        list.push("LINE_TYPE:" + realType);
//        if(IntelligentRoadTest.lineMessageOverlay){
//        	IntelligentRoadTest.lineMessageOverlay.remove();
//        }
    }
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealRoadFirstListData];
    var database = [3];
    var isSuiDao = false;
    if(IntelligentRoadTest.roadStatus == 1){ //隧道
        isSuiDao = true;
    }
    progressbarTwo.submitSql(sqlList, funcList, database, [[typeID, isLP ,isSuiDao , realType]]);
    if (typeID == 1) {
        IntelligentRoadTest.highwayCurrentSelectConditon = cityName + day;
    } else if (typeID == 2) {
        IntelligentRoadTest.railCurrentSelectConditon = cityName + day;
    } else if (typeID == 3) {
        IntelligentRoadTest.cityRoadCurrentSelectConditon = cityName + day;
    }
}
//处理高速高铁市政路一级列表的数据
IntelligentRoadTest.dealRoadFirstListData = function IntelligentRoadTes_dealRoadFirstListData(data, params) {
    var result = callBackChangeData(data);
    if (params.length > 0) {
        if (params[0] == 1) { //高速
            IntelligentRoadTest.highwayFirstListResult = result;
            IntelligentRoadTest.highwayFirstListCurrentResult = result;
            $("#highwaySort ul li.selected").trigger("click");
        } else if (params[0] == 2) { //高铁
            //造一些数据测试
            /*if(IntelligentRoadTest.index == 8){
                for(var i = 0; i < result.length; i++){
                    result[i].total_length = 120250.02 + i * 100; //总里程
                    result[i].total_count = 21 + i; //隧道数，只有在隧道的场景才有用
                    result[i].gteq110_length = 99840.92 + i * 100; //大于等于-110里程
                    result[i].lt110_length = 10420.12 + i * 100; //小于-110里程
                    result[i].out_net_length = 8234.66 + i * 100; //脱网里程
                }
            }*/
            IntelligentRoadTest.railFirstListResult = result;
            IntelligentRoadTest.railFirstListCurrentResult = result;
            $("#railSort ul li.selected").trigger("click");
        } else if (params[0] == 3) { // 市政路
            IntelligentRoadTest.cityRoadFirstListResult = result;
            IntelligentRoadTest.cityRoadFirstListCurrentResult = result;
            $("#cityRoadSort ul li.selected").trigger("click");
        }
        // IntelligentRoadTest.showRoadFirstList(result , params[0] , params[1]);
    }
}

IntelligentRoadTest.getRoadSecondListData = function IntelligentRoadTest_getRoadSecondListData(roadID, cityName, day, typeID, isLP, isPoor ) {
    //typeID : 1表示高速、2表示高铁、3表示市政路
//	day='20180114';
    IntelligentRoadTest.road_id = roadID;
    if(IntelligentRoadTest.roadCurrentQueryCity == "全省" && IntelligentRoadTest.index == 8){
        cityName = "全省";
    }else{
        if(cityName == null){
            cityName = IntelligentRoadTest.roadCurrentQueryCity ;
        }
    }
    var conditon = "";
    var sqlList = [];
    var list = [];
    if(IntelligentRoadTest.roadStatus == 3){ //连片
        if(isNull(isLP)){
            var isLP = true;
        }else{
            isLP = true;
        }
    }
    if (isLP == true) { //连片
        list = ["IntelligentRoadTestAnalysisV2_111_HighwayPoor", "CITYNAME:" + cityName, "DAY:" + day, "TYPE:" + typeID,
            "ROAD_ID:" + roadID];

        if(typeID == 2){
        //    高铁要更换模板
            var cityCondition = "and city = '" + cityName + "'";
            if(cityName == "全省"){
                cityCondition = "";
            }
            list = ["IntelligentRoadTestAnalysisV5_getRoadPoorByRoadID", "CITYCONDTION:" + cityCondition, "DAY:" + day, "TYPE:" + typeID,
                "ROAD_ID:" + roadID];
        }
        conditon = " and DX_RSRP_SUM/DX_RSRP_COUNT < -105";
    } else { //500米
        list = ["IntelligentRoadTestAnalysisV2_105_HighwaySector500",
            "ROAD_ID:" + roadID, "DAY:" + day,  "CITY:" + cityName];
        if(typeID == 2){
            var cityCondition = " and city = '" + cityName + "'";
            if(cityName == "全省"){
                cityCondition = "";
            }
            list = ["IntelligentRoadTestAnalysisV5_getRoadSector500",
                "ROAD_ID:" + roadID, "DAY:" + day,  "CITYCONDITION:" + cityCondition];
        }
        conditon = "and RSRP_SUM/RSRP_COUNT <  -105"; //查询弱路段的时候要用到
        var realType = typeID;
        if(IntelligentRoadTest.roadStatus == 1){
            if(typeID == 2){ //高铁的隧道是21
                realType = 21;
            }
        }else if(IntelligentRoadTest.roadStatus == 2){
            if(typeID == 2){ //高铁的非隧道是22
                realType = 22;
            }
        }
        list.push("TYPE:" + realType);
    }
    if (isPoor == true) {
        list.push("CONDITION:" + conditon);
    } else {
        isPoor = false;
    }
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealRoadSecondListData];
    var database = [3];
    var isSuiDao = false;
    if(IntelligentRoadTest.roadStatus == 1){ //隧道
        isSuiDao = true;
    }
    progressbarTwo.submitSql(sqlList, funcList, database, [[typeID, isPoor , isSuiDao , realType]]);
}

IntelligentRoadTest.dealRoadSecondListData = function IntelligentRoadTest_dealRoadSecondListData(data, params) {
    var result = callBackChangeData(data);
    if (params.length > 0) {
        if (params[0] == 1) { //高速
            IntelligentRoadTest.highwayIsPoor = params[1];
            IntelligentRoadTest.highwaySecondListResult = result;
            IntelligentRoadTest.highwaySecondListCurrentResult = result
            $("#highwaySortD ul li.selected").trigger("click");
        } else if (params[0] == 2) { //高铁
            IntelligentRoadTest.railIsPoor = params[1];
            IntelligentRoadTest.railSecondListResult = result;
            IntelligentRoadTest.railSecondListCurrentResult = result;
            $("#railSortD ul li.selected").trigger("click");
        } else if (params[0] == 3) { // 市政路
            IntelligentRoadTest.cityRoadIsPoor = params[1];
            IntelligentRoadTest.cityRoadSecondListResult = result;
            IntelligentRoadTest.cityRoadSecondListCurrentResult = result;
            $("#cityRoadSortD ul li.selected").trigger("click");
        }
        // IntelligentRoadTest.showRoadSecondList(result ,params[0]);
    }
}

//道路的历史30天的覆盖率情况查询
IntelligentRoadTest.getRoad30DayData = function IntelligentRoadTest_getRoad30DayData(road_id, line_id, type, isLP ) {
    var endDay = IntelligentRoadTest.day;
    var startDay = new Date(dealDateString(endDay).getTime() - 30 * 24 * 60 * 60 * 1000).Format("yyyyMMdd");
    var sqlList = [];
    if (isLP == true || IntelligentRoadTest.roadStatus == 3) { //连片
        /*var list = ["IntelligentRoadTestAnalysisV2_getHighwayLPHis", "ROAD_ID:" + road_id ,
            "LINE_ID:" + line_id , "DAYSTART:" + startDay , "DAYEND:" + endDay , "TYPE:" + type];*/
    } else {
        var sqlTempleteId = "IntelligentRoadTestAnalysisV2_107_HighwaySector500His";
        if(IntelligentRoadTest.index == 8){
            sqlTempleteId = "IntelligentRoadTestAnalysisV5_RoadSector500His30Day";
        }
        var list = [sqlTempleteId, "ROAD_ID:" + road_id,
            "LINE_ID:" + line_id, "DAYSTART:" + startDay, "DAYEND:" + endDay];
        var realType = type;
        if(IntelligentRoadTest.roadStatus == 1){ //隧道
            if(type == 2){
                realType = 21;
            }
        }else if(IntelligentRoadTest.roadStatus == 2){ //非隧道
            if(type == 2){
                realType = 22;
            }
        }
        list.push("TYPE:" + realType);
        sqlList.push(list);
        var funcList = [IntelligentRoadTest.dealRoad30DayData];
        var database = [3];
        var isSuiDao = false;
        if(IntelligentRoadTest.roadStatus == 1){ //隧道
            isSuiDao = true;
        }
        progressbarTwo.submitSql(sqlList, funcList, database, [[type , isSuiDao , realType]]);
    }
}

IntelligentRoadTest.dealRoad30DayData = function IntelligentRoadTest_dealRoad30DayData(data, params) {
    var result = callBackChangeData(data);
//    console.log(result);
    for (var i = 0; i < result.length; i++) {
        if (result[i].create_time != null) {
            result[i].create_time = dealDateString(result[i].create_time.toString()).Format("yyyy-MM-dd");
        }
    }
    var objResult = IntelligentRoadTest.getEchartData(result);
    if (params.length > 0) {
        if (params[0] == 1) {
            IntelligentRoadTest.show30DayEcharts(objResult, "highwayLineChart");
            IntelligentRoadTest.showSecondEchart(result, "highwaySecondChart");
        } else if (params[0] == 2) {
            IntelligentRoadTest.show30DayEcharts(objResult, "railLineChart");
            IntelligentRoadTest.showSecondEchart(result, "railSecondChart");
        } else if (params[0] == 3) {
            IntelligentRoadTest.show30DayEcharts(objResult, "cityRoadLineChart");
            IntelligentRoadTest.showSecondEchart(result, "cityRoadSecondChart");
        }
    }
    showOrHideInputImage(1);
}

IntelligentRoadTest.showRoadFirstList = function IntelligentRoadTest_showRoadFirstList(result, type, isLP) {
    //作为切换500米分段和连片的列表字段名称
    var title1 = "";
    var title2 = "";
    var title3 = "";
    var title4 = "";
    var title5 = "";
    IntelligentRoadTest.isLP = isLP;
    if (isLP == true) {
        title1 = "连片弱区数";
        title2 = "连片弱里程";
        title3 = "连片弱覆盖占比";
    } else {
        title1 = "分段数";
        title2 = "分段弱里程";
        title3 = "分段弱覆盖占比";
    }
    if(IntelligentRoadTest.index == 8){ //高铁部分修改为以下几个指标
        if(IntelligentRoadTest.roadStatus == 3){ //连片
            title1 = "<-110";
            title2 = "连段数";
            title3 = "最大连段";
            title4 = "最小连段";
            isLP = true;
        }else if(IntelligentRoadTest.roadStatus == 1){
            title1 = "隧道";
            title2 = "隧道数";
            title3 = "≥-110";
            title4 = "<-110";
            title5 = "脱网";
        }else if(IntelligentRoadTest.roadStatus == 2){
            title1 = "非隧道";
            title3 = "≥-110";
            title4 = "＜-110";
            title5 = "脱网";
        }else{
            title1 = "总里程";
            title3 = "≥-110";
            title4 = "＜-110";
            title5 = "脱网";
        }
    }
    var isSuiDao = false;
    if(IntelligentRoadTest.roadStatus == 1){ //隧道
        isSuiDao = true;
    }
    if (type == 1) {
        IntelligentRoadTest.highwayCurrentPage = 1;
        IntelligentRoadTest.highwayTotalCount = result.length;
        var pageCount = result.length / IntelligentRoadTest.pageSize;
        if ((result.length % IntelligentRoadTest.pageSize) != 0) {
            IntelligentRoadTest.highwayTotalPage = parseInt(pageCount) + 1; //总页数，没有整除时加上1
        } else {
            IntelligentRoadTest.highwayTotalPage = pageCount;  //整除不用加1
        }
        if (IntelligentRoadTest.highwayVM == null) {
            IntelligentRoadTest.highwayVM = new Vue({
                el: '#showHighwayDiv',//楚佳修改
                data: {
                    highwayList: IntelligentRoadTest.getDataListByPage(result, IntelligentRoadTest.highwayCurrentPage),
                    totalPages: IntelligentRoadTest.highwayTotalPage,
                    totalCounts: IntelligentRoadTest.highwayTotalCount,
                    currentPageNum: IntelligentRoadTest.highwayCurrentPage,
                    startIndex: IntelligentRoadTest.startIndex,
                    lastIndex: IntelligentRoadTest.lastIndex,
                    type: isLP,
                    poorCountTitle: title1,
                    poorLengthTitle: title2,
                    poorCoverAvgTitle: title3 //需要补充
                },
                methods: {
                    goNextList: function (item, index, isPoor) {
                        IntelligentRoadTest.second = true;
                        $("#highwayName").text(item.road_name);
                        $("#highwayName").attr("title", item.road_name);
                        $("#highwayCityNameD").text(IntelligentRoadTest.city);
                        IntelligentRoadTest.road_id = item.road_id;
                        var pointStar = new L.latLng(item.latitude_mid, item.longitude_mid);
                        IntelligentRoadTest.mkIndex = index;
                        IntelligentRoadTest.goHighwaySecondList();
                        IntelligentRoadTest.OsmMap.setView(pointStar);
                        if (index != undefined) {//index!=undefined 说明是从列表中点入
                            IntelligentRoadTest.OsmMap.setView(pointStar, 13);
                        }
                        IntelligentRoadTest.getRoadSecondListData(item.road_id, item.city, IntelligentRoadTest.day, 1, this.type, isPoor);
                        if (this.type) {
                            //过滤出该条高速的连片数据 IntelligentRoadTest.continueLineHighWayDataChe总的数据，不可改
                            var highwayData = crossfilter(IntelligentRoadTest.continueLineHighWayDataChe); //创建一个crossfilter对象
                            var highwayDataLineIDDim = highwayData.dimension(function (d) {
                                return d.road_id;
                            }); //按照线路id创建一个维度
                            var finalLineData = highwayDataLineIDDim.filter(item.road_id);
                            IntelligentRoadTest.highwaySecondListMapResult = finalLineData.top(highwayData.size());
                            IntelligentRoadTest.showContinueLineData(IntelligentRoadTest.highwaySecondListMapResult);
                        } else {
                            IntelligentRoadTest.loadSplitLineByRoadId(item.road_id, item.city, 1, 500);//查询500米分段数据
                        }


                    },
                    lastOrNext: function (type) {
                        if (type == 0) {
                            //上一页
                            if (IntelligentRoadTest.highwayCurrentPage > 1) {
                                IntelligentRoadTest.highwayCurrentPage = IntelligentRoadTest.highwayCurrentPage - 1;
                                IntelligentRoadTest.highwayVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwayFirstListCurrentResult, IntelligentRoadTest.highwayCurrentPage);
                                IntelligentRoadTest.highwayVM.currentPageNum = IntelligentRoadTest.highwayCurrentPage;
                                IntelligentRoadTest.highwayVM.startIndex = IntelligentRoadTest.startIndex;
                                IntelligentRoadTest.highwayVM.lastIndex = IntelligentRoadTest.lastIndex;
                            } else {
                                alert("当前页是第一页");
                            }
                        } else {
                            if (IntelligentRoadTest.highwayCurrentPage < IntelligentRoadTest.highwayTotalPage) {
                                IntelligentRoadTest.highwayCurrentPage = IntelligentRoadTest.highwayCurrentPage + 1;
                                IntelligentRoadTest.highwayVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwayFirstListCurrentResult, IntelligentRoadTest.highwayCurrentPage);
                                IntelligentRoadTest.highwayVM.currentPageNum = IntelligentRoadTest.highwayCurrentPage;
                                IntelligentRoadTest.highwayVM.startIndex = IntelligentRoadTest.startIndex;
                                IntelligentRoadTest.highwayVM.lastIndex = IntelligentRoadTest.lastIndex;
                            }
                        }
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.highwayVM.highwayList,10);
                    },
                    gotoPage: function () {
                        var page = $("#highwayPage").val();
                        page = parseInt(page);
                        if (page > 0 && page <= IntelligentRoadTest.highwayTotalPage) {
                            IntelligentRoadTest.highwayCurrentPage = page;
                            IntelligentRoadTest.highwayVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwayFirstListCurrentResult, IntelligentRoadTest.highwayCurrentPage);
                            IntelligentRoadTest.highwayVM.currentPageNum = IntelligentRoadTest.highwayCurrentPage;
                            IntelligentRoadTest.highwayVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.highwayVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.highwayVM.highwayList,10);
                    },
                    goLast: function () {
                        IntelligentRoadTest.highwayCurrentPage = IntelligentRoadTest.highwayTotalPage;
                        IntelligentRoadTest.highwayVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwayFirstListCurrentResult, IntelligentRoadTest.highwayCurrentPage);
                        IntelligentRoadTest.highwayVM.currentPageNum = IntelligentRoadTest.highwayCurrentPage;
                        IntelligentRoadTest.highwayVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.highwayVM.lastIndex = IntelligentRoadTest.lastIndex;
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.highwayVM.highwayList,10);
                    },
                    goFirst: function () {
                        IntelligentRoadTest.highwayCurrentPage = 1;
                        IntelligentRoadTest.highwayVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwayFirstListCurrentResult, IntelligentRoadTest.highwayCurrentPage);
                        IntelligentRoadTest.highwayVM.currentPageNum = IntelligentRoadTest.highwayCurrentPage;
                        IntelligentRoadTest.highwayVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.highwayVM.lastIndex = IntelligentRoadTest.lastIndex;
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.highwayVM.highwayList,10);
                    },
                    turnMk: function (index, item) {
                        //高速第一层触摸
                        IntelligentRoadTest.showStarEndMarke(item);
                        IntelligentRoadTest.osmTableStyle(index);
                    },
                    positionSatr: function (item, index) {
                        var pointStar = new L.latLng(item.latitude_min, item.longitude_min);
                        IntelligentRoadTest.OsmMap.setView(pointStar, IntelligentRoadTest.OsmMap.getZoom());
                    }
                }
            });
        } else {
            IntelligentRoadTest.highwayVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwayFirstListCurrentResult, IntelligentRoadTest.highwayCurrentPage);
            IntelligentRoadTest.highwayVM.totalPages = IntelligentRoadTest.highwayTotalPage;
            IntelligentRoadTest.highwayVM.totalCounts = IntelligentRoadTest.highwayTotalCount;
            IntelligentRoadTest.highwayVM.currentPageNum = IntelligentRoadTest.highwayCurrentPage;
            IntelligentRoadTest.highwayVM.startIndex = IntelligentRoadTest.startIndex;
            IntelligentRoadTest.highwayVM.lastIndex = IntelligentRoadTest.lastIndex;
            IntelligentRoadTest.highwayVM.type = isLP;
            IntelligentRoadTest.highwayVM.poorCountTitle = title1;
            IntelligentRoadTest.highwayVM.poorLengthTitle = title2;
            IntelligentRoadTest.highwayVM.poorCoverAvgTitle = title3;
        }
    } else if (type == 2) {
        IntelligentRoadTest.railCurrentPage = 1;
        IntelligentRoadTest.railTotalCount = result.length;
        var pageCount = result.length / IntelligentRoadTest.pageSize;
        if ((result.length % IntelligentRoadTest.pageSize) != 0) {
            IntelligentRoadTest.railTotalPage = parseInt(pageCount) + 1; //总页数，没有整除时加上1
        } else {
            IntelligentRoadTest.railTotalPage = pageCount;  //整除不用加1
        }
        if (IntelligentRoadTest.railVM == null) {
            IntelligentRoadTest.railVM = new Vue({
                el: '#showRailDiv',//楚佳修改
                data: {
                    railList: IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railFirstListCurrentResult, IntelligentRoadTest.railCurrentPage),
                    totalPages: IntelligentRoadTest.railTotalPage,
                    totalCounts: IntelligentRoadTest.railTotalCount,
                    currentPageNum: IntelligentRoadTest.railCurrentPage,
                    startIndex: IntelligentRoadTest.startIndex,
                    lastIndex: IntelligentRoadTest.lastIndex,
                    type: isLP,
                    isSuiDao : isSuiDao,
                    poorCountTitle: title1,
                    poorLengthTitle: title2,
                    poorCoverAvgTitle: title3,  //后续加上几个字段
                    total_length_name : title1, //总里程
                    total_count_name : title2,
                    gteq110_length_name : title3,
                    lt110_length_name : title4,
                    out_net_length_name : title5
                },
                methods: {
                    goNextList: function (item, index, isPoor) {
                        IntelligentRoadTest.second = true;
                        $("#railName").text(item.road_name);
                        $("#railName").attr("title", item.road_name);
                        var currentRailCity = $("#railCityName").text().trim();
                        $("#railSecondCityNameD").text(currentRailCity);
                        IntelligentRoadTest.changeCityTextColor(currentRailCity); //改变二级列表的选中地市的背景色
                        $("#railName").text(item.road_name);
                        $("#railSecondListSelectName").html($("#railListSelectName").text());
                        var text = $("#railListSelectName").text().trim();
                        switch(text) {
                            case '综合' :
                                $("#rail500MSecond").addClass("selected").siblings().removeClass("selected");
                                break;
                            case '隧道' :
                                $("#railSuiDaoSecond").addClass("selected").siblings().removeClass("selected");
                                break;
                            case '非隧道' :
                                $("#railNoSuiDaoSecond").addClass("selected").siblings().removeClass("selected");
                                break;
                            case '<-110连段' :
                                $("#railLPSecond").addClass("selected").siblings().removeClass("selected");
                                break;
                        }

                        IntelligentRoadTest.road_id = item.road_id;
                        var centerPoint = IntelligentRoadTest.dealCentGeoDataToPoint(item.cent_geom);
                        IntelligentRoadTest.map.panTo(centerPoint); //将地图定位到线路中心点
                        var pointStar = new BMap.Point(item.longitude_mid,item.latitude_mid);
                        IntelligentRoadTest.mkIndex = index;
                        IntelligentRoadTest.map.setZoom(10);//默认进入二级列表设置地图级别为20公里
                        IntelligentRoadTest.goRailSecondList();
                        var type = false;
                        if(IntelligentRoadTest.roadStatus == 3){ //连片
                            type = true;
                        }
                        IntelligentRoadTest.getRoadSecondListData(item.road_id, item.city, IntelligentRoadTest.day, 2, type, isPoor);
                        if (index != undefined) {//index!=undefined 说明是从列表中点入
                            // IntelligentRoadTest.map.centerAndZoom(pointStar, 13);
                        }
                        if (IntelligentRoadTest.roadStatus == 3 || IntelligentRoadTest.roadStatus == 1 || IntelligentRoadTest.roadStatus == 2) { //this.type || IntelligentRoadTest.isSuiDao == true
                            //过滤出该条高铁的连片数据 IntelligentRoadTest.continueLineRailWayDataChe总的数据，不可改
                            var railData = crossfilter(IntelligentRoadTest.continueLineRailWayDataChe); //创建一个crossfilter对象
                            var railDataLineIDDim = railData.dimension(function (d) {
                                return d.road_id;
                            }); //按照线路id创建一个维度
                            var finalLineData = railDataLineIDDim.filter(item.road_id);
                            IntelligentRoadTest.railSecondListMapResult = finalLineData.top(railData.size());

                            if(IntelligentRoadTest.roadStatus == 3){
                                //连片
                                var points = [];
                                for(var i = 0; i < IntelligentRoadTest.railSecondListMapResult.length; i++){
                                    var point_mid = new BMap.Point(IntelligentRoadTest.railSecondListMapResult[i].longitude_mid,IntelligentRoadTest.railSecondListMapResult[i].latitude_mid);
                                    points.push(point_mid);
                                }
                                // IntelligentRoadTest.setRightCenterAndZoom(points); //定位并显示适当的级别
                                // IntelligentRoadTest.showRoadContinueData(IntelligentRoadTest.railSecondListMapResult);
                                // IntelligentRoadTest.drawRailWay(final500MLineData.top(rail500MData.size())); //绘制该条线路的500M路段信息
                                //不显示500米分段，直接20米
                                // IntelligentRoadTest.loadSplitLineByRoadId(item.road_id,currentRailCity , 2, 20);//查询500米分段数据
                            }else if(IntelligentRoadTest.roadStatus == 1){//隧道
                                ////在第二层的时候，还是需要按照视野线段呈现
                                //IntelligentRoadTest.loadSplitLineByRoadId(item.road_id,currentRailCity , 2, 20);//查询500米分段数据
                            }else{
                                // IntelligentRoadTest.showRoadSuiDaoData(IntelligentRoadTest.railSecondListMapResult);
                                // IntelligentRoadTest.drawRailWay(final500MLineData.top(rail500MData.size())); //绘制该条线路的500M路段信息
                                ////在第二层的时候，还是需要按照视野线段呈现
                                //IntelligentRoadTest.loadSplitLineByRoadId(item.road_id, currentRailCity, 2, 20);//查询500米分段数据
                                //IntelligentRoadTest.loadLineByLevelFromBounds();
                            }
                        } else {
                            ////在第二层的时候，还是需要按照视野线段呈现
                            //IntelligentRoadTest.loadSplitLineByRoadId(item.road_id, currentRailCity, 2, 20);//查询500米分段数据

                        }
                        //在第二层的时候，不管是什么场景还是需要按照视野线段呈现
                        IntelligentRoadTest.loadLineByLevelFromBounds();
                    },
                    lastOrNext: function (type) {
                        if (type == 0) {
                            //上一页
                            if (IntelligentRoadTest.railCurrentPage > 1) {
                                IntelligentRoadTest.railCurrentPage = IntelligentRoadTest.railCurrentPage - 1;
                                IntelligentRoadTest.railVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railFirstListCurrentResult, IntelligentRoadTest.railCurrentPage);
                                IntelligentRoadTest.railVM.currentPageNum = IntelligentRoadTest.railCurrentPage;
                                IntelligentRoadTest.railVM.startIndex = IntelligentRoadTest.startIndex;
                                IntelligentRoadTest.railVM.lastIndex = IntelligentRoadTest.lastIndex;
                            } else {
                                alert("当前页是第一页");
                            }
                        } else {
                            if (IntelligentRoadTest.railCurrentPage < IntelligentRoadTest.railTotalPage) {
                                IntelligentRoadTest.railCurrentPage = IntelligentRoadTest.railCurrentPage + 1;
                                IntelligentRoadTest.railVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railFirstListCurrentResult, IntelligentRoadTest.railCurrentPage);
                                IntelligentRoadTest.railVM.currentPageNum = IntelligentRoadTest.railCurrentPage;
                                IntelligentRoadTest.railVM.startIndex = IntelligentRoadTest.startIndex;
                                IntelligentRoadTest.railVM.lastIndex = IntelligentRoadTest.lastIndex;
                            }
                        }
                        IntelligentRoadTest.drawMk(IntelligentRoadTest.railVM.railList, 10);
                    },
                    gotoPage: function () {
                        var page = $("#railPage").val();
                        page = parseInt(page);
                        if (page > 0 && page <= IntelligentRoadTest.railTotalPage) {
                            IntelligentRoadTest.railCurrentPage = page;
                            IntelligentRoadTest.railVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railFirstListCurrentResult, IntelligentRoadTest.railCurrentPage);
                            IntelligentRoadTest.railVM.currentPageNum = IntelligentRoadTest.railCurrentPage;
                            IntelligentRoadTest.railVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.railVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                        IntelligentRoadTest.drawMk(IntelligentRoadTest.railVM.railList, 10);
                    },
                    goLast: function () {
                        IntelligentRoadTest.railCurrentPage = IntelligentRoadTest.railTotalPage;
                        IntelligentRoadTest.railVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railFirstListCurrentResult, IntelligentRoadTest.railCurrentPage);
                        IntelligentRoadTest.railVM.currentPageNum = IntelligentRoadTest.railCurrentPage;
                        IntelligentRoadTest.railVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.railVM.lastIndex = IntelligentRoadTest.lastIndex;
                        IntelligentRoadTest.drawMk(IntelligentRoadTest.railVM.railList, 10);
                    },
                    goFirst: function () {
                        IntelligentRoadTest.railCurrentPage = 1;
                        IntelligentRoadTest.railVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railFirstListCurrentResult, IntelligentRoadTest.railCurrentPage);
                        IntelligentRoadTest.railVM.currentPageNum = IntelligentRoadTest.railCurrentPage;
                        IntelligentRoadTest.railVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.railVM.lastIndex = IntelligentRoadTest.lastIndex;
                        IntelligentRoadTest.drawMk(IntelligentRoadTest.railVM.railList, 10);
                    },
                    turnMk: function (index, item) {
                        //高铁第一层
                        // IntelligentRoadTest.showStarEndMarke(item);
                        IntelligentRoadTest.osmTableStyle(index);
                        if(IntelligentRoadTest.roadStatus != 3 && IntelligentRoadTest.roadStatus != 1){
                            IntelligentRoadTest.roadLineUtilMouseMove([item]);
                        }else{
                            IntelligentRoadTest.roadContinueUtilMouseMove([item]);
                        }
                    }
                    ,
                    positionSatr: function (item, index) {
                        var pointStar = new L.latLng(item.latitude_min, item.longitude_min);
                        IntelligentRoadTest.OsmMap.setView(pointStar, IntelligentRoadTest.OsmMap.getZoom());
                    }
                }
            });
        } else {
            IntelligentRoadTest.railVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railFirstListCurrentResult, IntelligentRoadTest.railCurrentPage);
            IntelligentRoadTest.railVM.totalPages = IntelligentRoadTest.railTotalPage;
            IntelligentRoadTest.railVM.totalCounts = IntelligentRoadTest.railTotalCount;
            IntelligentRoadTest.railVM.currentPageNum = IntelligentRoadTest.railCurrentPage;
            IntelligentRoadTest.railVM.startIndex = IntelligentRoadTest.startIndex;
            IntelligentRoadTest.railVM.lastIndex = IntelligentRoadTest.lastIndex;
            IntelligentRoadTest.railVM.type = isLP;
            IntelligentRoadTest.railVM.poorCountTitle = title1;
            IntelligentRoadTest.railVM.poorLengthTitle = title2;
            IntelligentRoadTest.railVM.poorCoverAvgTitle = title3;
            IntelligentRoadTest.railVM.isSuiDao = isSuiDao;
            IntelligentRoadTest.railVM.total_length_name = title1;
            IntelligentRoadTest.railVM.total_count_name = title2;
            IntelligentRoadTest.railVM.gteq110_length_name = title3;
            IntelligentRoadTest.railVM.lt110_length_name = title4;
            IntelligentRoadTest.railVM.out_net_length_name = title5;
        }
    } else if (type == 3) {
        IntelligentRoadTest.cityRoadCurrentPage = 1;
        IntelligentRoadTest.cityRoadTotalCount = result.length;
        var pageCount = result.length / IntelligentRoadTest.pageSize;
        if ((result.length % IntelligentRoadTest.pageSize) != 0) {
            IntelligentRoadTest.cityRoadTotalPage = parseInt(pageCount) + 1; //总页数，没有整除时加上1
        } else {
            IntelligentRoadTest.cityRoadTotalPage = pageCount;  //整除不用加1
        }
        if (IntelligentRoadTest.cityRoadVM == null) {
            IntelligentRoadTest.cityRoadVM = new Vue({
                el: '#showCityRoadDiv',//楚佳修改
                data: {
                    cityRoadList: IntelligentRoadTest.getDataListByPage(result, IntelligentRoadTest.cityRoadCurrentPage),
                    totalPages: IntelligentRoadTest.cityRoadTotalPage,
                    totalCounts: IntelligentRoadTest.cityRoadTotalCount,
                    currentPageNum: IntelligentRoadTest.cityRoadCurrentPage,
                    startIndex: IntelligentRoadTest.startIndex,
                    lastIndex: IntelligentRoadTest.lastIndex,
                    type: isLP,
                    poorCountTitle: title1,
                    poorLengthTitle: title2,
                    poorCoverAvgTitle: title3
                },
                methods: {
                    goNextList: function (item, index, isPoor) {
                        IntelligentRoadTest.second = true;
                        $("#cityRoadName").text(item.road_name);
                        $("#cityRoadName").attr("title", item.road_name);
                        $("#cityRoadCityNameD").text(IntelligentRoadTest.city);
                        IntelligentRoadTest.road_id = item.road_id;
                        var pointStar = new L.latLng(item.latitude_mid, item.longitude_mid);
                        IntelligentRoadTest.mkIndex = index;
                        IntelligentRoadTest.goCityRoadSecondList();
                        IntelligentRoadTest.getRoadSecondListData(item.road_id, item.city, IntelligentRoadTest.day, 3, this.type, isPoor);
                        if (index != undefined) {//index!=undefined 说明是从列表中点入
                            IntelligentRoadTest.OsmMap.setView(pointStar, 13);
                        }
                        if (this.type) {
                            //过滤出该条市政路的连片数据 IntelligentRoadTest.continueLineCityRoadDataChe总的数据，不可改
                            var cityRoadData = crossfilter(IntelligentRoadTest.continueLineCityRoadDataChe); //创建一个crossfilter对象
                            var cityRoadDataLineIDDim = cityRoadData.dimension(function (d) {
                                return d.road_id;
                            }); //按照线路id创建一个维度
                            var finalLineData = cityRoadDataLineIDDim.filter(item.road_id);
                            IntelligentRoadTest.cityRoadSecondListMapResult = finalLineData.top(cityRoadData.size());
                            IntelligentRoadTest.showContinueLineData(IntelligentRoadTest.cityRoadSecondListMapResult);
                        } else {
                            IntelligentRoadTest.loadSplitLineByRoadId(item.road_id, item.city, 3, 500);//查询500米分段数据
//                            if(IntelligentRoadTest.lineMessageOverlay){
//                            	IntelligentRoadTest.lineMessageOverlay.remove();
//                            }
                            if (IntelligentRoadTest.geoJsonLayer) {
                                IntelligentRoadTest.geoJsonLayer.clearLayers();
                            }
                        }
                    },
                    lastOrNext: function (type) {
                        if (type == 0) {
                            //上一页
                            if (IntelligentRoadTest.cityRoadCurrentPage > 1) {
                                IntelligentRoadTest.cityRoadCurrentPage = IntelligentRoadTest.cityRoadCurrentPage - 1;
                                IntelligentRoadTest.cityRoadVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadFirstListCurrentResult, IntelligentRoadTest.cityRoadCurrentPage);
                                IntelligentRoadTest.cityRoadVM.currentPageNum = IntelligentRoadTest.cityRoadCurrentPage;
                                IntelligentRoadTest.cityRoadVM.startIndex = IntelligentRoadTest.startIndex;
                                IntelligentRoadTest.cityRoadVM.lastIndex = IntelligentRoadTest.lastIndex;
                            } else {
                                alert("当前页是第一页");
                            }
                        } else {
                            if (IntelligentRoadTest.cityRoadCurrentPage < IntelligentRoadTest.cityRoadTotalPage) {
                                IntelligentRoadTest.cityRoadCurrentPage = IntelligentRoadTest.cityRoadCurrentPage + 1;
                                IntelligentRoadTest.cityRoadVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadFirstListCurrentResult, IntelligentRoadTest.cityRoadCurrentPage);
                                IntelligentRoadTest.cityRoadVM.currentPageNum = IntelligentRoadTest.cityRoadCurrentPage;
                                IntelligentRoadTest.cityRoadVM.startIndex = IntelligentRoadTest.startIndex;
                                IntelligentRoadTest.cityRoadVM.lastIndex = IntelligentRoadTest.lastIndex;
                            }
                        }
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.cityRoadVM.cityRoadList,10);
                    },
                    gotoPage: function () {
                        var page = $("#cityRoadPage").val();
                        page = parseInt(page);
                        if (page > 0 && page <= IntelligentRoadTest.cityRoadTotalPage) {
                            IntelligentRoadTest.cityRoadCurrentPage = page;
                            IntelligentRoadTest.cityRoadVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadFirstListCurrentResult, IntelligentRoadTest.cityRoadCurrentPage);
                            IntelligentRoadTest.cityRoadVM.currentPageNum = IntelligentRoadTest.cityRoadCurrentPage;
                            IntelligentRoadTest.cityRoadVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.cityRoadVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.cityRoadVM.cityRoadList,10);
                    },
                    goLast: function () {
                        IntelligentRoadTest.cityRoadCurrentPage = IntelligentRoadTest.cityRoadTotalPage;
                        IntelligentRoadTest.cityRoadVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadFirstListCurrentResult, IntelligentRoadTest.cityRoadCurrentPage);
                        IntelligentRoadTest.cityRoadVM.currentPageNum = IntelligentRoadTest.cityRoadCurrentPage;
                        IntelligentRoadTest.cityRoadVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.cityRoadVM.lastIndex = IntelligentRoadTest.lastIndex;
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.cityRoadVM.cityRoadList,10);
                    },
                    goFirst: function () {
                        IntelligentRoadTest.cityRoadCurrentPage = 1;
                        IntelligentRoadTest.cityRoadVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadFirstListCurrentResult, IntelligentRoadTest.cityRoadCurrentPage);
                        IntelligentRoadTest.cityRoadVM.currentPageNum = IntelligentRoadTest.cityRoadCurrentPage;
                        IntelligentRoadTest.cityRoadVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.cityRoadVM.lastIndex = IntelligentRoadTest.lastIndex;
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.cityRoadVM.cityRoadList,10);
                    },
                    turnMk: function (index, item) {
                        //市政路第一层触摸
                        IntelligentRoadTest.showStarEndMarke(item);
                        IntelligentRoadTest.osmTableStyle(index);
                    },
                    positionSatr: function (item, index) {
                        var pointStar = new L.latLng(item.latitude_min, item.longitude_min);
                        IntelligentRoadTest.OsmMap.setView(pointStar, IntelligentRoadTest.OsmMap.getZoom());
                    }
                }
            });
        } else {
            IntelligentRoadTest.cityRoadVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadFirstListCurrentResult, IntelligentRoadTest.cityRoadCurrentPage);
            IntelligentRoadTest.cityRoadVM.totalPages = IntelligentRoadTest.cityRoadTotalPage;
            IntelligentRoadTest.cityRoadVM.totalCounts = IntelligentRoadTest.cityRoadTotalCount;
            IntelligentRoadTest.cityRoadVM.currentPageNum = IntelligentRoadTest.cityRoadCurrentPage;
            IntelligentRoadTest.cityRoadVM.startIndex = IntelligentRoadTest.startIndex;
            IntelligentRoadTest.cityRoadVM.lastIndex = IntelligentRoadTest.lastIndex;
            IntelligentRoadTest.cityRoadVM.type = isLP;
            IntelligentRoadTest.cityRoadVM.poorCountTitle = title1;
            IntelligentRoadTest.cityRoadVM.poorLengthTitle = title2;
            IntelligentRoadTest.cityRoadVM.poorCoverAvgTitle = title3;
        }
    }
}

IntelligentRoadTest.showRoadSecondList = function IntelligentRoadTest_showRoadSecondList(result, type) {
//type : 1表示高速 、 2表示高铁 、 3表示市政路
    if (type == 1) {
        IntelligentRoadTest.highwaySecondListCurrentPage = 1;
        IntelligentRoadTest.highwaySecondListTotalCount = result.length;
        var pageCount = result.length / IntelligentRoadTest.pageSize;
        if ((result.length % IntelligentRoadTest.pageSize) != 0) {
            IntelligentRoadTest.highwaySecondListTotalPage = parseInt(pageCount) + 1; //总页数，没有整除时加上1
        } else {
            IntelligentRoadTest.highwaySecondListTotalPage = pageCount;  //整除不用加1
        }

        if (IntelligentRoadTest.highwaySecondVM == null) {
            IntelligentRoadTest.highwaySecondVM = new Vue({
                el: '#showHighwayListDiv',//楚佳修改
                data: {
                    highwayList: IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwaySecondListCurrentResult, IntelligentRoadTest.highwaySecondListCurrentPage),
                    totalPages: IntelligentRoadTest.highwaySecondListTotalPage,
                    totalCounts: IntelligentRoadTest.highwaySecondListTotalCount,
                    currentPageNum: IntelligentRoadTest.highwaySecondListCurrentPage,
                    startIndex: IntelligentRoadTest.startIndex,
                    lastIndex: IntelligentRoadTest.lastIndex
                },
                methods: {
                    showMessage: function (item, index) { //进入详情页
                        var pointStar = new L.latLng(item.latitude_min, item.longitude_min);
                        IntelligentRoadTest.osmMkData = item;
                        IntelligentRoadTest.drawDetailsMk(item, index);
                        IntelligentRoadTest.mkIndex = index;
                        IntelligentRoadTest.goHighwayCompleteMessage();
                        IntelligentRoadTest.OsmMap.setView(pointStar);
                        var echartTitle = "历史30天覆盖变化";
                        // IntelligentRoadTest.getHighway30DayData(item.id , 0);
                        var isLP = false;
                        if (IntelligentRoadTest.highwayVM != null && IntelligentRoadTest.highwayVM.type != null) {
                            isLP = IntelligentRoadTest.highwayVM.type;
                        }
                        if (!IntelligentRoadTest.isScreenCompared && IntelligentRoadTest.isAddMessageEvent) {//不是在分屏页，并且点击过分屏
                            if (!windowScreeen.closed) {//如果窗口没有关闭，需要进行同步信息，如果已经关闭，什么都不用做
                                // windowScreeen.focus();
                                item.isLP = isLP;
                                if (!isLP) {
                                    IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'highway');
                                } else {
                                    item.day = IntelligentRoadTest.day;
                                    IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'highway');
                                }

                            }
                        }
                        IntelligentRoadTest.getRoad30DayData(item.road_id, item.line_id, 1, isLP);
                        var city_id = noceUtil.city_LATN_ID[item.city];
                        if (isLP) {
                            //连片线段点击时，查询该连片线段所有20米线段  并进入对应弱连片线段的详情页
                            IntelligentRoadTest.loadContinueLineMeterData(IntelligentRoadTest.day, 1, city_id, item.road_id, item.contain_ids);
                        } else {
                            IntelligentRoadTest.loadSplitLineSmallLine(item.road_id, item.line_id, city_id, IntelligentRoadTest.day, 1);//查询500米分段的20米数据
                        }

                        var nearTOP5 = [];
                        if (item.ne_sector_set != null && item.ne_sector_set != "") {
                            var to5DataArr = item.ne_sector_set.split("@");
                            for (var i = 0; i < to5DataArr.length; i++) {
                                nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
                            }
                            nearTOP5 = IntelligentRoadTest.sortNRTopCell(nearTOP5);
                        }
                        var mrNearTOP5 = [];
                        if (item.sector_set != null && item.sector_set != "") {
                            var mrTo5DataArr = item.sector_set.split("@");
                            for (var k = 0; k < mrTo5DataArr.length; k++) {
                                mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
                            }
                            mrNearTOP5 = IntelligentRoadTest.sortMRTopCell(mrNearTOP5);
                        }
                        if (IntelligentRoadTest.checkIfHasSameSector(nearTOP5, mrNearTOP5)) {
                            item.isHasSameSector = true;
                        }
                        $(".linkCell").attr("title", "显示连线");
                        $(".linkCell").removeClass("linkCellHover");
                        if (IntelligentRoadTest.highwayCompleteVM == null) {
                            IntelligentRoadTest.highwayCompleteVM = new Vue({
                                el: '#showHighwayCompleteMessage',
                                data: {
                                    highwayData: item,
                                    dataIndex: index,
                                    nrTop5Cell: nearTOP5,
                                    mrTop5Cell: mrNearTOP5,
                                    title: echartTitle,
                                    isShowAlarmInfo: IntelligentRoadTest.isShowAlarmInfoMessage,
                                    alarm_dataObj: {}, //用于存放从告警表中获取到的指标的对象
                                    alaram_title: "工单监测",
                                    uname: IntelligentRoadTest.currentUser,
                                    isHide30DayLine: isLP
                                },
                                methods: {
                                    highwayPosition: function (item) {
                                        // IntelligentRoadTest.highwayPositiong(item);
                                        var pointStar = new L.latLng(item.latitude_min, item.longitude_min);
                                        IntelligentRoadTest.OsmMap.setView(pointStar);
                                    },
                                    editHighwayMessage: function (item) {
                                        IntelligentRoadTest.highwayEdit(item);
                                    },
                                    deleteHighway: function (item) {
                                        IntelligentRoadTest.wantDeleteConcern = item;
                                        $("#modal-highway").show();
                                    },
                                    viewHighwayLog: function (item) {
                                        IntelligentRoadTest.highwayLog(item);
                                    },
                                    gotoHighwaySevenEchart: function (item) {
                                        IntelligentRoadTest.highwaySevenLine(item);
                                    },
                                    showDetailInfo: function (event) {
                                        IntelligentRoadTest.showDetailInfo(event);
                                    },
                                    showLinkCell: function (event, item, type) {
                                        //type=1最近小区，type=2 接入扇区
                                        if ($(event.currentTarget).hasClass("linkCellHover")) {
                                            $(event.currentTarget).attr("title", "显示连线");
                                            $(event.currentTarget).removeClass("linkCellHover");
                                            if (type == 1) {
                                                IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
                                            } else if (type == 2) {
                                                IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
                                            }
                                        } else {
                                            $(event.currentTarget).attr("title", "隐藏连线");
                                            $(event.currentTarget).addClass("linkCellHover");
                                            var mid_lng = item.longitude_mid;
                                            var mid_lat = item.latitude_mid;
                                            var centerPoint = new L.LatLng(mid_lat, mid_lng);
                                            if (type == 1) {
                                                //附近扇区top5连线
                                                IntelligentRoadTest.showNrTop5CellForMapByOsm(centerPoint, item.ne_sector_set);
                                            } else if (type == 2) {
                                                //接入扇区top5连线
                                                IntelligentRoadTest.showMrNrTop5CellForMapByOsm(centerPoint, item.sector_set);
                                            }
                                        }
                                    },
                                    gotoShowSectorMessage: function (sectorDate) {
                                        IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                                    },
                                    gotoKPIList: function (item) {
                                        if (item.sector_set != null) {
                                            var sectorArr = item.sector_set.split("@");
                                            showOrHideInputImage(2);
                                            IntelligentRoadTest.loadKPIListData(sectorArr);
                                            $("#kpiBackPoor").html("返回上一级");
                                        }
                                    }
                                }
                            });
                        } else {
                            IntelligentRoadTest.highwayCompleteVM.highwayData = item;
                            IntelligentRoadTest.highwayCompleteVM.dataIndex = index;
                            IntelligentRoadTest.highwayCompleteVM.nrTop5Cell = nearTOP5;
                            IntelligentRoadTest.highwayCompleteVM.mrTop5Cell = mrNearTOP5;
                            IntelligentRoadTest.highwayCompleteVM.title = echartTitle;
                            IntelligentRoadTest.highwayCompleteVM.isHide30DayLine = isLP;
                            IntelligentRoadTest.highwayCompleteVM.isShowAlarmInfo = IntelligentRoadTest.isShowAlarmInfoMessage;
                        }
                        //增加查询工单指标的方法
                        if (IntelligentRoadTest.isShowAlarmInfoMessage == true) {
                            IntelligentRoadTest.getLineObjectAlarmInfoData("天翼蓝鹰高速", item.line_id, IntelligentRoadTest.day);
                        }

                    },
                    lastOrNext: function (type) {
                        if (type == 0) {
                            //上一页
                            if (IntelligentRoadTest.highwaySecondListCurrentPage > 1) {
                                IntelligentRoadTest.highwaySecondListCurrentPage = IntelligentRoadTest.highwaySecondListCurrentPage - 1;
                                IntelligentRoadTest.highwaySecondVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwaySecondListCurrentResult, IntelligentRoadTest.highwaySecondListCurrentPage);
                                IntelligentRoadTest.highwaySecondVM.currentPageNum = IntelligentRoadTest.highwaySecondListCurrentPage;
                                IntelligentRoadTest.highwaySecondVM.startIndex = IntelligentRoadTest.startIndex;
                                IntelligentRoadTest.highwaySecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                            } else {
                                alert("当前页是第一页");
                            }
                        } else {
                            if (IntelligentRoadTest.highwaySecondListCurrentPage < IntelligentRoadTest.highwaySecondListTotalPage) {
                                IntelligentRoadTest.highwaySecondListCurrentPage = IntelligentRoadTest.highwaySecondListCurrentPage + 1;
                                IntelligentRoadTest.highwaySecondVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwaySecondListCurrentResult, IntelligentRoadTest.highwaySecondListCurrentPage);
                                IntelligentRoadTest.highwaySecondVM.currentPageNum = IntelligentRoadTest.highwaySecondListCurrentPage;
                                IntelligentRoadTest.highwaySecondVM.startIndex = IntelligentRoadTest.startIndex;
                                IntelligentRoadTest.highwaySecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                            }
                        }
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.highwaySecondVM.highwayList,10);
                    },
                    gotoPage: function () {
                        var page = $("#highwaySecondListPage").val(); //楚佳修改
                        page = parseInt(page);
                        if (page > 0 && page <= IntelligentRoadTest.highwaySecondListTotalPage) {
                            IntelligentRoadTest.highwaySecondListCurrentPage = page;
                            IntelligentRoadTest.highwaySecondVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwaySecondListCurrentResult, IntelligentRoadTest.highwaySecondListCurrentPage);
                            IntelligentRoadTest.highwaySecondVM.currentPageNum = IntelligentRoadTest.highwaySecondListCurrentPage;
                            IntelligentRoadTest.highwaySecondVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.highwaySecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.highwaySecondVM.highwayList,10);
                    },
                    goLast: function () {
                        IntelligentRoadTest.highwaySecondListCurrentPage = IntelligentRoadTest.highwaySecondListTotalPage;
                        IntelligentRoadTest.highwaySecondVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwaySecondListCurrentResult, IntelligentRoadTest.highwaySecondListCurrentPage);
                        IntelligentRoadTest.highwaySecondVM.currentPageNum = IntelligentRoadTest.highwaySecondListCurrentPage;
                        IntelligentRoadTest.highwaySecondVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.highwaySecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.highwaySecondVM.highwayList,10);
                    },
                    goFirst: function () {
                        IntelligentRoadTest.highwaySecondListCurrentPage = 1;
                        IntelligentRoadTest.highwaySecondVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwaySecondListCurrentResult, IntelligentRoadTest.highwaySecondListCurrentPage);
                        IntelligentRoadTest.highwaySecondVM.currentPageNum = IntelligentRoadTest.highwaySecondListCurrentPage;
                        IntelligentRoadTest.highwaySecondVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.highwaySecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.highwaySecondVM.highwayList,10);
                    },
                    turnMk: function (index, item) {
                        //高速第二层触摸
                        IntelligentRoadTest.showStarEndMarke(item);
                        IntelligentRoadTest.osmTableStyle(index);
                    }
                }
            });
        } else {
            IntelligentRoadTest.highwaySecondVM.highwayList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.highwaySecondListCurrentResult, IntelligentRoadTest.highwaySecondListCurrentPage);
            IntelligentRoadTest.highwaySecondVM.totalPages = IntelligentRoadTest.highwaySecondListTotalPage;
            IntelligentRoadTest.highwaySecondVM.totalCounts = IntelligentRoadTest.highwaySecondListTotalCount;
            IntelligentRoadTest.highwaySecondVM.currentPageNum = IntelligentRoadTest.highwaySecondListCurrentPage;
            IntelligentRoadTest.highwaySecondVM.startIndex = IntelligentRoadTest.startIndex;
            IntelligentRoadTest.highwaySecondVM.lastIndex = IntelligentRoadTest.lastIndex;
        }
    } else if (type == 2) {
        IntelligentRoadTest.railSecondListCurrentPage = 1;
        IntelligentRoadTest.railSecondListTotalCount = result.length;
        var pageCount = result.length / IntelligentRoadTest.pageSize;
        if ((result.length % IntelligentRoadTest.pageSize) != 0) {
            IntelligentRoadTest.railSecondListTotalPage = parseInt(pageCount) + 1; //总页数，没有整除时加上1
        } else {
            IntelligentRoadTest.railSecondListTotalPage = pageCount;  //整除不用加1
        }

        if (IntelligentRoadTest.railSecondVM == null) {
            IntelligentRoadTest.railSecondVM = new Vue({
                el: '#showRailListDiv',//楚佳修改
                data: {
                    railList: IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railSecondListCurrentResult, IntelligentRoadTest.railSecondListCurrentPage),
                    totalPages: IntelligentRoadTest.railSecondListTotalPage,
                    totalCounts: IntelligentRoadTest.railSecondListTotalCount,
                    currentPageNum: IntelligentRoadTest.railSecondListCurrentPage,
                    startIndex: IntelligentRoadTest.startIndex,
                    lastIndex: IntelligentRoadTest.lastIndex,
                    isSuiDao : IntelligentRoadTest.isSuiDao,
                    city : IntelligentRoadTest.roadCurrentQueryCity //将当前查询的地市
                },
                methods: {
                    showMessage: function (item, index) {
                        var pointStar = new BMap.Point( item.longitude_mid,item.latitude_mid);
                        if(IntelligentRoadTest.map.getZoom() < 17){
                            IntelligentRoadTest.map.centerAndZoom(pointStar ,17);
                        }else{
                            IntelligentRoadTest.map.panTo(pointStar);
                        }
                        item = IntelligentRoadTest.changeRailBaiduLocationToGPS(item); //将item中的百度经纬度转成GPS之后赋值给新的属性
                        IntelligentRoadTest.osmMkData = item;
                        // IntelligentRoadTest.drawDetailsMk(item, index);
                        IntelligentRoadTest.isNeedCenterAndZoom = true; //是否需要缩放地图
                        var startPoint =new BMap.Point(item.longitude_max ,  item.latitude_max);
                        var endPoint =new  BMap.Point(item.longitude_min ,  item.latitude_min);
                        IntelligentRoadTest.roadStarEndMk(startPoint , endPoint); //绘制起止点
                        IntelligentRoadTest.mkIndex = index;
                        IntelligentRoadTest.goRailCompleteMessage();

                        // IntelligentRoadTest.map.setCenter(pointStar);
                        var echartTitle = "历史30天覆盖变化";
                        var isLP = IntelligentRoadTest.railVM.type;
                        if(IntelligentRoadTest.roadStatus == 3){ //连片
                            isLP = true;
                        }else{
                            isLP = false;
                        }
                        IntelligentRoadTest.getRoad30DayData(item.road_id, item.line_id, 2, isLP);
                        var city_id = noceUtil.city_LATN_ID[item.city];
                        if (isLP) {
                            //连片线段点击时，查询该连片线段所有20米线段  并进入对应弱连片线段的详情页
                            IntelligentRoadTest.loadContinueLineMeterData(IntelligentRoadTest.day, 2, city_id, item.road_id, item.contain_ids);
                        } else {
                            IntelligentRoadTest.loadSplitLineSmallLine(item.road_id, item.line_id, city_id, IntelligentRoadTest.day, 2);//查询500米分段的20米数据
                        }
                        if (!IntelligentRoadTest.isScreenCompared && IntelligentRoadTest.isAddMessageEvent) {//不是在分屏页，并且点击过分屏
                            if (!windowScreeen.closed) {//如果窗口没有关闭，需要进行同步信息，如果已经关闭，什么都不用做
                                // windowScreeen.focus();
                                item.isLP = isLP;
                                if (!isLP) {
                                    IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'railway');
                                } else {
                                    item.day = IntelligentRoadTest.day;
                                    IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'railway');
                                }

                            }
                        }
                        var nearTOP5 = [];
                        if (item.ne_sector_set != null && item.ne_sector_set != "") {
                            var to5DataArr = item.ne_sector_set.split("@");
                            for (var i = 0; i < to5DataArr.length; i++) {
                                nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
                            }
                            nearTOP5 = IntelligentRoadTest.sortNRTopCell(nearTOP5);
                        }
                        var mrNearTOP5 = [];
                        if (item.sector_set != null && item.sector_set != "") {
                            var mrTo5DataArr = item.sector_set.split("@");
                            for (var k = 0; k < mrTo5DataArr.length; k++) {
                                mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
                            }
                            mrNearTOP5 = IntelligentRoadTest.sortMRTopCell(mrNearTOP5);
                        }
                        if (IntelligentRoadTest.checkIfHasSameSector(nearTOP5, mrNearTOP5)) {
                            item.isHasSameSector = true;
                        }
                        $(".linkCell").attr("title", "显示连线");
                        $(".linkCell").removeClass("linkCellHover");
                        if (IntelligentRoadTest.railCompleteVM == null) {
                            IntelligentRoadTest.railCompleteVM = new Vue({
                                el: '#showRailCompleteMessage',
                                data: {
                                    railData: item,
                                    dataIndex: index,
                                    nrTop5Cell: nearTOP5,
                                    mrTop5Cell: mrNearTOP5,
                                    title: echartTitle,
                                    isShowAlarmInfo: IntelligentRoadTest.isShowAlarmInfoMessage,
                                    alarm_dataObj: {}, //用于存放从告警表中获取到的指标的对象
                                    alaram_title: "工单监测",
                                    uname: IntelligentRoadTest.currentUser,
                                    isHide30DayLine: isLP
                                },
                                methods: {
                                    railPosition: function (item) {
                                        // IntelligentRoadTest.railPositiong(item);
                                        // var pointStar = new L.latLng(item.latitude_min, item.longitude_min);
                                        // IntelligentRoadTest.OsmMap.setView(pointStar);

                                        var pointStar = new BMap.Point(item.longitude_min,item.latitude_min);
                                        IntelligentRoadTest.map.setCenter(pointStar);
                                    },
                                    editRailMessage: function (item) {
                                        IntelligentRoadTest.railEdit(item);
                                    },
                                    deleteRail: function (item) {
                                        IntelligentRoadTest.wantDeleteConcern = item;
                                        $("#modal-rail").show();
                                    },
                                    viewRailLog: function (item) {
                                        IntelligentRoadTest.railLog(item);
                                    },
                                    gotoRailSevenEchart: function (item) {
                                        IntelligentRoadTest.railSevenLine(item);
                                    },
                                    showDetailInfo: function (event) {
                                        IntelligentRoadTest.showDetailInfo(event);
                                    },
                                    showLinkCell: function (event, item, type) {
                                        //type=1最近小区，type=2 接入扇区
                                        /*if ($(event.currentTarget).hasClass("linkCellHover")) {
                                            $(event.currentTarget).attr("title", "显示连线");
                                            $(event.currentTarget).removeClass("linkCellHover");
                                            if (type == 1) {
                                                IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
                                            } else if (type == 2) {
                                                IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
                                            }
                                        } else {
                                            $(event.currentTarget).attr("title", "隐藏连线");
                                            $(event.currentTarget).addClass("linkCellHover");

                                            var mid_lng = item.longitude_mid;
                                            var mid_lat = item.latitude_mid;
                                            var centerPoint = new L.LatLng(mid_lat, mid_lng);
                                            if (type == 1) {
                                                IntelligentRoadTest.showNrTop5CellForMapByOsm(centerPoint, item.ne_sector_set);
                                            } else if (type == 2) {
                                                IntelligentRoadTest.showMrNrTop5CellForMapByOsm(centerPoint, item.sector_set);
                                            }
                                        }*/
                                        if ($(event.currentTarget).hasClass("linkCellHover")) {
                                            $(event.currentTarget).attr("title", "显示连线");
                                            $(event.currentTarget).removeClass("linkCellHover");
                                            if (type == 1) {
                                                IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                                            } else if (type == 2) {
                                                IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                                            }
                                        } else {
                                            $(event.currentTarget).attr("title", "隐藏连线");
                                            $(event.currentTarget).addClass("linkCellHover");

                                            var mid_lng = item.longitude_mid;
                                            var mid_lat = item.latitude_mid;
                                            var centerPoint = new BMap.Point(mid_lng, mid_lat);
                                            if (type == 1) {
                                                // IntelligentRoadTest.showNrTop5CellForMap(centerPoint,item.top5_sector_set);
                                                IntelligentRoadTest.showNrTop5CellForMap(centerPoint, item.ne_sector_set);

                                            } else if (type == 2) {
                                                IntelligentRoadTest.showMrNrTop5CellForMap(centerPoint, item.sector_set);
                                            }
                                        }
                                    },
                                    gotoShowSectorMessage: function (sectorDate) {
                                        IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                                    },
                                    gotoKPIList: function (item) {
                                        if (item.sector_set != null) {
                                            var sectorArr = item.sector_set.split("@");
                                            showOrHideInputImage(2);
                                            IntelligentRoadTest.loadKPIListData(sectorArr);
                                            $("#kpiBackPoor").html("返回上一级");
                                        }
                                    }
                                }
                            });
                        } else {
                            IntelligentRoadTest.railCompleteVM.railData = item;
                            IntelligentRoadTest.railCompleteVM.dataIndex = index;
                            IntelligentRoadTest.railCompleteVM.nrTop5Cell = nearTOP5;
                            IntelligentRoadTest.railCompleteVM.mrTop5Cell = mrNearTOP5;
                            IntelligentRoadTest.railCompleteVM.title = echartTitle;
                            IntelligentRoadTest.railCompleteVM.isHide30DayLine = isLP;
                            IntelligentRoadTest.railCompleteVM.isShowAlarmInfo = IntelligentRoadTest.isShowAlarmInfoMessage;
                            IntelligentRoadTest.railCompleteVM.isSuiDao = IntelligentRoadTest.isSuiDao;
                        }
                        //增加查询工单指标的方法
                        if (IntelligentRoadTest.isShowAlarmInfoMessage == true) {
                            IntelligentRoadTest.getLineObjectAlarmInfoData("天翼蓝鹰高铁", item.line_id, IntelligentRoadTest.day);
                        }
                    },
                    lastOrNext: function (type) {
                        if (type == 0) {
                            //上一页
                            if (IntelligentRoadTest.railSecondListCurrentPage > 1) {
                                IntelligentRoadTest.railSecondListCurrentPage = IntelligentRoadTest.railSecondListCurrentPage - 1;
                                IntelligentRoadTest.railSecondVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railSecondListCurrentResult, IntelligentRoadTest.railSecondListCurrentPage);
                                IntelligentRoadTest.railSecondVM.currentPageNum = IntelligentRoadTest.railSecondListCurrentPage;
                                IntelligentRoadTest.railSecondVM.startIndex = IntelligentRoadTest.startIndex;
                                IntelligentRoadTest.railSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                            } else {
                                alert("当前页是第一页");
                            }
                        } else {
                            if (IntelligentRoadTest.railSecondListCurrentPage < IntelligentRoadTest.railSecondListTotalPage) {
                                IntelligentRoadTest.railSecondListCurrentPage = IntelligentRoadTest.railSecondListCurrentPage + 1;
                                IntelligentRoadTest.railSecondVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railSecondListCurrentResult, IntelligentRoadTest.railSecondListCurrentPage);
                                IntelligentRoadTest.railSecondVM.currentPageNum = IntelligentRoadTest.railSecondListCurrentPage;
                                IntelligentRoadTest.railSecondVM.startIndex = IntelligentRoadTest.startIndex;
                                IntelligentRoadTest.railSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                            }
                        }
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.railSecondVM.railList,10);
                    },
                    gotoPage: function () {
                        var page = $("#railSecondListPage").val(); //楚佳修改
                        page = parseInt(page);
                        if (page > 0 && page <= IntelligentRoadTest.railSecondListTotalPage) {
                            IntelligentRoadTest.railSecondListCurrentPage = page;
                            IntelligentRoadTest.railSecondVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railSecondListCurrentResult, IntelligentRoadTest.railSecondListCurrentPage);
                            IntelligentRoadTest.railSecondVM.currentPageNum = IntelligentRoadTest.railSecondListCurrentPage;
                            IntelligentRoadTest.railSecondVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.railSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.railSecondVM.railList,10);
                    },
                    goLast: function () {
                        IntelligentRoadTest.railSecondListCurrentPage = IntelligentRoadTest.railSecondListTotalPage;
                        IntelligentRoadTest.railSecondVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railSecondListCurrentResult, IntelligentRoadTest.railSecondListCurrentPage);
                        IntelligentRoadTest.railSecondVM.currentPageNum = IntelligentRoadTest.railSecondListCurrentPage;
                        IntelligentRoadTest.railSecondVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.railSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.railSecondVM.railList,10);
                    },
                    goFirst: function () {
                        IntelligentRoadTest.railSecondListCurrentPage = 1;
                        IntelligentRoadTest.railSecondVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railSecondListCurrentResult, IntelligentRoadTest.railSecondListCurrentPage);
                        IntelligentRoadTest.railSecondVM.currentPageNum = IntelligentRoadTest.railSecondListCurrentPage;
                        IntelligentRoadTest.railSecondVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.railSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.railSecondVM.railList,10);
                    },
                    turnMk: function (index, item) {
                        //高铁第二层触摸
                        // IntelligentRoadTest.showStarEndMarke(item);
                        IntelligentRoadTest.osmTableStyle(index);
                        if(IntelligentRoadTest.roadStatus != 3 && IntelligentRoadTest.roadStatus != 1){
                            IntelligentRoadTest.roadLineUtilMouseMove([item]);
                        }else{
                            item.object_id = item.line_id;
                            IntelligentRoadTest.roadContinueUtilMouseMove([item]);
                        }
                    }
                }
            });
        } else {
            IntelligentRoadTest.railSecondVM.railList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.railSecondListCurrentResult, IntelligentRoadTest.railSecondListCurrentPage);
            IntelligentRoadTest.railSecondVM.totalPages = IntelligentRoadTest.railSecondListTotalPage;
            IntelligentRoadTest.railSecondVM.totalCounts = IntelligentRoadTest.railSecondListTotalCount;
            IntelligentRoadTest.railSecondVM.currentPageNum = IntelligentRoadTest.railSecondListCurrentPage;
            IntelligentRoadTest.railSecondVM.startIndex = IntelligentRoadTest.startIndex;
            IntelligentRoadTest.railSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
            IntelligentRoadTest.railSecondVM.isSuiDao = IntelligentRoadTest.isSuiDao;
            IntelligentRoadTest.railSecondVM.city = IntelligentRoadTest.roadCurrentQueryCity;
        }
    } else if (type == 3) {
        IntelligentRoadTest.cityRoadSecondListCurrentPage = 1;
        IntelligentRoadTest.cityRoadSecondListTotalCount = result.length;
        var pageCount = result.length / IntelligentRoadTest.pageSize;
        if ((result.length % IntelligentRoadTest.pageSize) != 0) {
            IntelligentRoadTest.cityRoadSecondListTotalPage = parseInt(pageCount) + 1; //总页数，没有整除时加上1
        } else {
            IntelligentRoadTest.cityRoadSecondListTotalPage = pageCount;  //整除不用加1
        }

        if (IntelligentRoadTest.cityRoadSecondVM == null) {
            IntelligentRoadTest.cityRoadSecondVM = new Vue({
                el: '#showCityRoadListDiv',//楚佳修改
                data: {
                    cityRoadList: IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadSecondListCurrentResult, IntelligentRoadTest.cityRoadSecondListCurrentPage),
                    totalPages: IntelligentRoadTest.cityRoadSecondListTotalPage,
                    totalCounts: IntelligentRoadTest.cityRoadSecondListTotalCount,
                    currentPageNum: IntelligentRoadTest.cityRoadSecondListCurrentPage,
                    startIndex: IntelligentRoadTest.startIndex,
                    lastIndex: IntelligentRoadTest.lastIndex
                },
                methods: {
                    showMessage: function (item, index) { //进入详情页
                        var pointStar = new L.latLng(item.latitude_min, item.longitude_min);

                        IntelligentRoadTest.drawDetailsMk(item, index);
                        IntelligentRoadTest.mkIndex = index;
                        IntelligentRoadTest.goCityRoadCompleteMessage();

                        IntelligentRoadTest.OsmMap.setView(pointStar);
                        var echartTitle = "历史30天覆盖变化";
                        var isLP = IntelligentRoadTest.cityRoadVM.type;
                        IntelligentRoadTest.getRoad30DayData(item.road_id, item.line_id, 3, isLP);
                        var city_id = noceUtil.city_LATN_ID[item.city];
                        if (isLP) {
                            //连片线段点击时，查询该连片线段所有20米线段  并进入对应弱连片线段的详情页
                            IntelligentRoadTest.loadContinueLineMeterData(IntelligentRoadTest.day, 3, city_id, item.road_id, item.contain_ids);
                        } else {
                            IntelligentRoadTest.loadSplitLineSmallLine(item.road_id, item.line_id, city_id, IntelligentRoadTest.day, 3);//查询500米分段的20米数据
                        }
                        if (!IntelligentRoadTest.isScreenCompared && IntelligentRoadTest.isAddMessageEvent) {//不是在分屏页，并且点击过分屏
                            if (!windowScreeen.closed) {//如果窗口没有关闭，需要进行同步信息，如果已经关闭，什么都不用做
                                // windowScreeen.focus();
                                item.isLP = isLP;
                                if (!isLP) {
                                    IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'cityRoad');
                                } else {
                                    item.day = IntelligentRoadTest.day;
                                    IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'cityRoad');
                                }

                            }
                        }
                        var nearTOP5 = [];
                        if (item.ne_sector_set != null && item.ne_sector_set != "") {
                            var to5DataArr = item.ne_sector_set.split("@");
                            for (var i = 0; i < to5DataArr.length; i++) {
                                nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
                            }
                            nearTOP5 = IntelligentRoadTest.sortNRTopCell(nearTOP5);
                        }
                        var mrNearTOP5 = [];
                        if (item.sector_set != null && item.sector_set != "") {
                            var mrTo5DataArr = item.sector_set.split("@");
                            for (var k = 0; k < mrTo5DataArr.length; k++) {
                                mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
                            }
                            mrNearTOP5 = IntelligentRoadTest.sortMRTopCell(mrNearTOP5);
                        }
                        if (IntelligentRoadTest.checkIfHasSameSector(nearTOP5, mrNearTOP5)) {
                            item.isHasSameSector = true;
                        }
                        $(".linkCell").attr("title", "显示连线");
                        $(".linkCell").removeClass("linkCellHover");
                        if (IntelligentRoadTest.cityRoadCompleteVM == null) {
                            IntelligentRoadTest.cityRoadCompleteVM = new Vue({
                                el: '#showCityRoadCompleteMessage',
                                data: {
                                    cityRoadData: item,
                                    dataIndex: index,
                                    nrTop5Cell: nearTOP5,
                                    mrTop5Cell: mrNearTOP5,
                                    title: echartTitle,
                                    isShowAlarmInfo: IntelligentRoadTest.isShowAlarmInfoMessage,
                                    alarm_dataObj: {}, //用于存放从告警表中获取到的指标的对象
                                    alaram_title: "工单监测",
                                    uname: IntelligentRoadTest.currentUser,
                                    isHide30DayLine: IntelligentRoadTest.cityRoadVM.type
                                },
                                methods: {
                                    cityRoadPosition: function (item) {
                                        // IntelligentRoadTest.cityRoadPositiong(item);
                                        var pointStar = new L.latLng(item.latitude_min, item.longitude_min);
                                        IntelligentRoadTest.OsmMap.setView(pointStar);
                                    },
                                    editCityRoadMessage: function (item) {
                                        IntelligentRoadTest.cityRoadEdit(item);
                                    },
                                    deleteCityRoad: function (item) {
                                        IntelligentRoadTest.wantDeleteConcern = item;
                                        $("#modal-cityRoad").show();
                                    },
                                    viewCityRoadLog: function (item) {
                                        IntelligentRoadTest.cityRoadLog(item);
                                    },
                                    gotoCityRoadSevenEchart: function (item) {
                                        IntelligentRoadTest.cityRoadSevenLine(item);
                                    },
                                    showDetailInfo: function (event) {
                                        IntelligentRoadTest.showDetailInfo(event);
                                    },
                                    showLinkCell: function (event, item, type) {
                                        //type=1最近小区，type=2 接入扇区
                                        if ($(event.currentTarget).hasClass("linkCellHover")) {
                                            $(event.currentTarget).attr("title", "显示连线");
                                            $(event.currentTarget).removeClass("linkCellHover");
                                            if (type == 1) {
                                                IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
                                            } else if (type == 2) {
                                                IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
                                            }
                                        } else {
                                            $(event.currentTarget).attr("title", "隐藏连线");
                                            $(event.currentTarget).addClass("linkCellHover");
                                            var mid_lng = item.longitude_mid;
                                            var mid_lat = item.latitude_mid;
                                            var centerPoint = new L.LatLng(mid_lat, mid_lng);
                                            if (type == 1) {
                                                IntelligentRoadTest.showNrTop5CellForMapByOsm(centerPoint, item.ne_sector_set);
                                            } else if (type == 2) {
                                                IntelligentRoadTest.showMrNrTop5CellForMapByOsm(centerPoint, item.sector_set);
                                            }
                                        }
                                    },
                                    gotoShowSectorMessage: function (sectorDate) {
                                        IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                                    },
                                    gotoKPIList: function (item) {
                                        if (item.sector_set != null) {
                                            var sectorArr = item.sector_set.split("@");
                                            showOrHideInputImage(2);
                                            IntelligentRoadTest.loadKPIListData(sectorArr);
                                            $("#kpiBackPoor").html("返回上一级");
                                        }
                                    }
                                }
                            });
                        } else {
                            IntelligentRoadTest.cityRoadCompleteVM.cityRoadData = item;
                            IntelligentRoadTest.cityRoadCompleteVM.dataIndex = index;
                            IntelligentRoadTest.cityRoadCompleteVM.nrTop5Cell = nearTOP5;
                            IntelligentRoadTest.cityRoadCompleteVM.mrTop5Cell = mrNearTOP5;
                            IntelligentRoadTest.cityRoadCompleteVM.title = echartTitle;
                            IntelligentRoadTest.cityRoadCompleteVM.isHide30DayLine = IntelligentRoadTest.cityRoadVM.type;
                            IntelligentRoadTest.cityRoadCompleteVM.isShowAlarmInfo = IntelligentRoadTest.isShowAlarmInfoMessage;
                        }
                        //增加查询工单指标的方法
                        if (IntelligentRoadTest.isShowAlarmInfoMessage == true) {
                            IntelligentRoadTest.getLineObjectAlarmInfoData("天翼蓝鹰市政路", item.line_id, IntelligentRoadTest.day);
                        }
                    },
                    lastOrNext: function (type) {
                        if (type == 0) {
                            //上一页
                            if (IntelligentRoadTest.cityRoadSecondListCurrentPage > 1) {
                                IntelligentRoadTest.cityRoadSecondListCurrentPage = IntelligentRoadTest.cityRoadSecondListCurrentPage - 1;
                                IntelligentRoadTest.cityRoadSecondVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadSecondListCurrentResult, IntelligentRoadTest.cityRoadSecondListCurrentPage);
                                IntelligentRoadTest.cityRoadSecondVM.currentPageNum = IntelligentRoadTest.cityRoadSecondListCurrentPage;
                                IntelligentRoadTest.cityRoadSecondVM.startIndex = IntelligentRoadTest.startIndex;
                                IntelligentRoadTest.cityRoadSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                            } else {
                                alert("当前页是第一页");
                            }
                        } else {
                            if (IntelligentRoadTest.cityRoadSecondListCurrentPage < IntelligentRoadTest.cityRoadSecondListTotalPage) {
                                IntelligentRoadTest.cityRoadSecondListCurrentPage = IntelligentRoadTest.cityRoadSecondListCurrentPage + 1;
                                IntelligentRoadTest.cityRoadSecondVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadSecondListCurrentResult, IntelligentRoadTest.cityRoadSecondListCurrentPage);
                                IntelligentRoadTest.cityRoadSecondVM.currentPageNum = IntelligentRoadTest.cityRoadSecondListCurrentPage;
                                IntelligentRoadTest.cityRoadSecondVM.startIndex = IntelligentRoadTest.startIndex;
                                IntelligentRoadTest.cityRoadSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                            }
                        }
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.cityRoadSecondVM.cityRoadList,10);
                    },
                    gotoPage: function () {
                        var page = $("#cityRoadSecondListPage").val(); //楚佳修改
                        page = parseInt(page);
                        if (page > 0 && page <= IntelligentRoadTest.cityRoadSecondListTotalPage) {
                            IntelligentRoadTest.cityRoadSecondListCurrentPage = page;
                            IntelligentRoadTest.cityRoadSecondVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadSecondListCurrentResult, IntelligentRoadTest.cityRoadSecondListCurrentPage);
                            IntelligentRoadTest.cityRoadSecondVM.currentPageNum = IntelligentRoadTest.cityRoadSecondListCurrentPage;
                            IntelligentRoadTest.cityRoadSecondVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.cityRoadSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.cityRoadSecondVM.cityRoadList,10);
                    },
                    goLast: function () {
                        IntelligentRoadTest.cityRoadSecondListCurrentPage = IntelligentRoadTest.cityRoadSecondListTotalPage;
                        IntelligentRoadTest.cityRoadSecondVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadSecondListCurrentResult, IntelligentRoadTest.cityRoadSecondListCurrentPage);
                        IntelligentRoadTest.cityRoadSecondVM.currentPageNum = IntelligentRoadTest.cityRoadSecondListCurrentPage;
                        IntelligentRoadTest.cityRoadSecondVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.cityRoadSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.cityRoadSecondVM.cityRoadList,10);
                    },
                    goFirst: function () {
                        IntelligentRoadTest.cityRoadSecondListCurrentPage = 1;
                        IntelligentRoadTest.cityRoadSecondVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadSecondListCurrentResult, IntelligentRoadTest.cityRoadSecondListCurrentPage);
                        IntelligentRoadTest.cityRoadSecondVM.currentPageNum = IntelligentRoadTest.cityRoadSecondListCurrentPage;
                        IntelligentRoadTest.cityRoadSecondVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.cityRoadSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        // IntelligentRoadTest.drawMk(IntelligentRoadTest.cityRoadSecondVM.cityRoadList,10);
                    },
                    turnMk: function (index, item) {
                        //市政路第二层触摸
                        IntelligentRoadTest.showStarEndMarke(item);
                        IntelligentRoadTest.osmTableStyle(index);
                    }
                }
            });
        } else {
            IntelligentRoadTest.cityRoadSecondVM.cityRoadList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.cityRoadSecondListCurrentResult, IntelligentRoadTest.cityRoadSecondListCurrentPage);
            IntelligentRoadTest.cityRoadSecondVM.totalPages = IntelligentRoadTest.cityRoadSecondListTotalPage;
            IntelligentRoadTest.cityRoadSecondVM.totalCounts = IntelligentRoadTest.cityRoadSecondListTotalCount;
            IntelligentRoadTest.cityRoadSecondVM.currentPageNum = IntelligentRoadTest.cityRoadSecondListCurrentPage;
            IntelligentRoadTest.cityRoadSecondVM.startIndex = IntelligentRoadTest.startIndex;
            IntelligentRoadTest.cityRoadSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
        }
    }
    if (IntelligentRoadTest.roadIndex == 3) {
        if (type == 1) {
            IntelligentRoadTest.goHighwayCompleteMessage();
        } else if (type == 2) {
            IntelligentRoadTest.goRailCompleteMessage();
        } else if (type == 3) {
            IntelligentRoadTest.goCityRoadCompleteMessage();
        }
    }
}
//根据road_id 和line_id获取某一天的某个500米或者某个连片的详细数据
//isSaveForScreen:是否是第一次加载的时候，将结果集保存到分屏数据中，用于时间切换逻辑
IntelligentRoadTest.getRoadCompleteMessageByLineID = function (line_id, day, typeID, cityName, road_id, isLP, isSaveForScreen) {
    if(IntelligentRoadTest.roadCurrentQueryCity == "全省" && IntelligentRoadTest.index == 8){
        cityName = "全省";
    }else{
        IntelligentRoadTest.roadCurrentQueryCity = cityName;
    }
    var sqlList = [];
    var list = [];
    if(IntelligentRoadTest.raodStatus == 3){ //连片
        if(isNull(isLP)){
            var isLP = true;
        }
        isLP = true;
    }
    if (isLP == true) { //连片
        list = ["IntelligentRoadTestAnalysisV2_getHighwayPoorByID", "DAY:" + day, "TYPE:" + typeID,
            "LINE_ID:" + line_id, "CITYNAME:" + cityName];
    } else { //500米
        list = ["IntelligentRoadTestAnalysisV2_getHighwaySector500ByID",
            "LINE_ID:" + line_id, "DAY:" + day, "TYPE:" + typeID, "CITY:" + cityName];
    }
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealRoadCompleteMessageByLineID];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database, [[typeID, isSaveForScreen]]);
}

IntelligentRoadTest.dealRoadCompleteMessageByLineID = function IntelligentRoadTest_dealRoadCompleteMessageByLineID(data, para) {
    var result = callBackChangeData(data);
    var type = para[0];
    var isSaveForScreen = para[1];
    console.log(result);
    var obj = {};
    if (result.length > 0) {
        obj = result[0];
        if (type == 1) { //高速
            if (IntelligentRoadTest.highwaySecondVM == null) {
                IntelligentRoadTest.initHighwaySecondVM();
            }
            if (isSaveForScreen) {
                if (IntelligentRoadTestScreenCompared.messageObject) {
                    obj.isLP = isSaveForScreen;//为什么可以直接用这个属性，因为页面初始化时，用到这个逻辑的肯定是连片的线段
                    var messageData = {};
                    messageData.type = 'highway';
                    messageData.item = obj;
                    messageData.day = IntelligentRoadTest.day;
                    IntelligentRoadTestScreenCompared.messageObject = messageData;
                } else {
                    //如果分屏js还没有初始化，则需要加定时保存该数据
                    var saveForScreen = setInterval(function () {
                        if (IntelligentRoadTestScreenCompared.messageObject) {
                            obj.isLP = isSaveForScreen;//为什么可以直接用这个属性，因为页面初始化时，用到这个逻辑的肯定是连片的线段
                            var messageData = {};
                            messageData.type = 'highway';
                            messageData.item = obj;
                            messageData.day = IntelligentRoadTest.day;
                            IntelligentRoadTestScreenCompared.messageObject = messageData;
                            clearInterval(saveForScreen);
                        }
                    }, 200);

                }
            }
            IntelligentRoadTest.highwaySecondVM.showMessage(obj); //这个1表示 index，但是在切换日期之后不知道index是多少，所以先赋值为1
        } else if (type == 2) { // 高铁
            if (IntelligentRoadTest.railSecondVM == null) {
                IntelligentRoadTest.initRailSecondVM();
            }
            if (isSaveForScreen) {
                if (IntelligentRoadTestScreenCompared.messageObject) {
                    obj.isLP = isSaveForScreen;//为什么可以直接用这个属性，因为页面初始化时，用到这个逻辑的肯定是连片的线段
                    var messageData = {};
                    messageData.type = 'railway';
                    messageData.item = obj;
                    messageData.day = IntelligentRoadTest.day;
                    IntelligentRoadTestScreenCompared.messageObject = messageData;
                } else {
                    //如果分屏js还没有初始化，则需要加定时保存该数据
                    var saveForScreen = setInterval(function () {
                        if (IntelligentRoadTestScreenCompared.messageObject) {
                            obj.isLP = isSaveForScreen;//为什么可以直接用这个属性，因为页面初始化时，用到这个逻辑的肯定是连片的线段
                            var messageData = {};
                            messageData.type = 'railway';
                            messageData.item = obj;
                            messageData.day = IntelligentRoadTest.day;
                            IntelligentRoadTestScreenCompared.messageObject = messageData;
                            clearInterval(saveForScreen);
                        }
                    }, 200);

                }
            }

            IntelligentRoadTest.railSecondVM.showMessage(obj);
        } else if (type == 3) { //市政路
            if (IntelligentRoadTest.cityRoadSecondVM == null) {
                IntelligentRoadTest.initCityRoadSecondVM();
            }
            if (isSaveForScreen) {
                if (IntelligentRoadTestScreenCompared.messageObject) {
                    obj.isLP = isSaveForScreen;//为什么可以直接用这个属性，因为页面初始化时，用到这个逻辑的肯定是连片的线段
                    var messageData = {};
                    messageData.type = 'cityRoad';
                    messageData.item = obj;
                    messageData.day = IntelligentRoadTest.day;
                    IntelligentRoadTestScreenCompared.messageObject = messageData;
                } else {
                    //如果分屏js还没有初始化，则需要加定时保存该数据
                    var saveForScreen = setInterval(function () {
                        if (IntelligentRoadTestScreenCompared.messageObject) {
                            obj.isLP = isSaveForScreen;//为什么可以直接用这个属性，因为页面初始化时，用到这个逻辑的肯定是连片的线段
                            var messageData = {};
                            messageData.type = 'cityRoad';
                            messageData.item = obj;
                            messageData.day = IntelligentRoadTest.day;
                            IntelligentRoadTestScreenCompared.messageObject = messageData;
                            clearInterval(saveForScreen);
                        }
                    }, 200);

                }
            }
            IntelligentRoadTest.cityRoadSecondVM.showMessage(obj);
        }
    } else {
        if (type == 1) { //高速
            if (IntelligentRoadTest.highwayCompleteVM != null) {
                var highwayData = IntelligentRoadTest.highwayCompleteVM.highwayData;
                obj = {
                    road_id: highwayData.road_id,
                    line_id: highwayData.line_id,
                    city: highwayData.city
                };
                IntelligentRoadTest.highwayCompleteVM.highwayData = obj;
                IntelligentRoadTest.highwayCompleteVM.mrTop5Cell = [];
                IntelligentRoadTest.highwayCompleteVM.nrTop5Cell = [];
            } else {
                alert("未找到该条高速路段！");
            }
        } else if (type == 2) { // 高铁
            if (IntelligentRoadTest.railCompleteVM != null) {
                var railData = IntelligentRoadTest.railCompleteVM.railData;
                obj = {
                    road_id: railData.road_id,
                    line_id: railData.line_id,
                    city: railData.city
                };
                IntelligentRoadTest.railCompleteVM.railData = obj;
                IntelligentRoadTest.railCompleteVM.mrTop5Cell = [];
                IntelligentRoadTest.railCompleteVM.nrTop5Cell = [];
            } else {
                alert("未找到该条高铁路段!");
            }

        } else if (type == 3) { //市政路
            if (IntelligentRoadTest.cityRoadCompleteVM != null) {
                var cityRoadData = IntelligentRoadTest.cityRoadCompleteVM.cityRoadData;
                obj = {
                    road_id: cityRoadData.road_id,
                    line_id: cityRoadData.line_id,
                    city: cityRoadData.city
                };
                IntelligentRoadTest.cityRoadCompleteVM.cityRoadData = obj;
                IntelligentRoadTest.cityRoadCompleteVM.mrTop5Cell = [];
                IntelligentRoadTest.cityRoadCompleteVM.nrTop5Cell = [];
            } else {
                alert("未找到该条市政路!");
            }
        }
    }
}

IntelligentRoadTest.getRoad20MData = function (rowkey) {
    var sqlList = [];
    var rowkeyStr = rowkey.join("_");
    var columnList = "i:a1,i:a2,i:a3,i:a4,i:a5,i:a6,i:a7,i:a8,i:a9,i:a10,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a17,i:a18,i:a19,i:a20,i:a21,i:a22,i:a23,i:a24,i:a25,i:a33,i:a34";
    var sqlTempleteId = "IntelligentRoadTestAnalysisV2_104_HighwaySectorsIdx";
    if(IntelligentRoadTest.index == 8){ //高铁
        sqlTempleteId = "IntelligentRoadTestAnalysisV5_roadSectorsIdx";
    }
    var list = [sqlTempleteId, "KEYLIST:" + rowkeyStr, "COLUMNLIST:" + columnList];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealRoad20MData];
    var database = [7];
    progressbarTwo.submitSql(sqlList, funcList, database, [rowkey]);
}
IntelligentRoadTest.dealRoad20MData = function IntelligentRoadTest_dealRoad20MData(data, params) {
    var result = callBackChangeData(data);
    var rowkey = params;
    var line_id = rowkey[5];
    var line_type = rowkey[2];

    var obj = {};
    if (result.length > 0) {
        var gis_data = wellknown.parse(result[0]["i:a3"]);
        var gis_dataArr = gis_data.coordinates;
        if (gis_dataArr.length == 2) {
            obj.longitude_mid = (gis_dataArr[0][0] + gis_dataArr[1][0]) / 2;
            obj.latitude_mid = (gis_dataArr[0][1] + gis_dataArr[1][1]) / 2;
        } else if (gis_dataArr.length > 2) {
            var index = Math.ceil(gis_dataArr.length / 2);
            obj.longitude_mid = gis_dataArr[index][0];
            obj.latitude_mid = gis_dataArr[index][1];
        }
        obj.line_id = line_id;
        obj.road_name = result[0]["i:a2"];
        obj.city = result[0]["i:a1"];
        obj.sector_set = result[0]["i:a19"];
        obj.dx_line_rsrp_cov = result[0]["i:a6"];
        obj.dx_line_rsrp_avg = result[0]["i:a7"];
        obj.min_userex_upavgrate = result[0]["i:a33"];
        obj.min_userex_dwavgrate = result[0]["i:a34"];
    } else {
        obj.line_id = line_id;
    }
    var elDivID = "";
    if (line_type == "1") { //高速
        elDivID = "#showHighwayGridCompleteMessage";
        IntelligentRoadTest.goHighwayGridCompleteMessage();
    } else if (line_type == "2") { // 高铁
        elDivID = "#showRailGridCompleteMessage";
        IntelligentRoadTest.goRailGridCompleteMessage();
    } else if (line_type == "3") { // 市政路
        elDivID = "#showCityRoadGridCompleteMessage";
        IntelligentRoadTest.goCityRoadGridCompleteMessage();
    }
    IntelligentRoadTest.show20MCompleteMessage(line_id, obj, elDivID, line_type);
    // IntelligentRoadTest.getSeventDayDataByLineId(rowkey);
}

//显示20米栅格的数据
IntelligentRoadTest.show20MCompleteMessage = function IntelligentRoadTest_show20MCompleteMessage(lineId, obj, divID, type) {
    IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
    IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
    $(divID).find(".linkCell").attr("title", "显示连线");
    $(divID).find(".linkCell").removeClass("linkCellHover");
    if (type == 1) {
        var echartsTitle = "历史7天覆盖变化";
        var mrNearTOP5 = [];
        if (obj.sector_set != null && obj.sector_set != "") {
            var mrTo5DataArr = obj.sector_set.split("@");
            for (var k = 0; k < mrTo5DataArr.length; k++) {
                mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
            }
        }
        if (IntelligentRoadTest.highwayVueObj == null) {
            IntelligentRoadTest.highwayVueObj = new Vue({
                el: divID,
                data: {
                    objData: obj,
                    line_id: lineId,
                    mrTop5Cell: mrNearTOP5,
                    title: echartsTitle
                },
                methods: {
                    showDetailInfo: function (event) {
                        IntelligentRoadTest.showDetailInfo(event);
                    },
                    showLinkCell: function (event, item, type) {
                        //type=1最近小区，type=2 接入扇区
                        if ($(event.currentTarget).hasClass("linkCellHover")) {
                            $(event.currentTarget).attr("title", "显示连线");
                            $(event.currentTarget).removeClass("linkCellHover");
                            // $(event.currentTarget).children().attr("src",norImg);
                            if (type == 1) {
                                IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
                            } else if (type == 2) {
                                IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
                            }
                        } else {
                            $(event.currentTarget).attr("title", "隐藏连线");
                            $(event.currentTarget).addClass("linkCellHover");
                            // $(event.currentTarget).children().attr("src",clickImg);
                            // var max_lng =
                            // var centerPoint = new BMap.Point(item.longitude_mid, item.latitude_mid);
                            var mid_lng = item.longitude_mid;
                            var mid_lat = item.latitude_mid;
                            var centerPoint = new L.LatLng(mid_lat, mid_lng);
                            if (type == 1) {
                                IntelligentRoadTest.showNrTop5CellForMapByOsm(centerPoint, item.top5_sector_set);
                            } else if (type == 2) {
                                IntelligentRoadTest.showMrNrTop5CellForMapByOsm(centerPoint, item.sector_set);
                            }
                        }
                    },
                    gotoAlarmList: function (item) {
                        if (item.sector_set != null) {
                            var sectorArr = item.sector_set.split("@");
                            IntelligentRoadTest.loadAlarmListData(sectorArr);
                            $("#alarmBackPoor").html("返回上一级");
                        }
                    },
                    gotoKPIList: function (item) {
                        if (item.sector_set != null) {
                            var sectorArr = item.sector_set.split("@");
                            showOrHideInputImage(2);
                            IntelligentRoadTest.loadKPIListData(sectorArr);
                            $("#kpiBackPoor").html("返回上一级");
                        }
                    },
                    gotoShowSectorMessage: function (sectorDate) {
                        // console.log(sectorDate);
                        IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                    }
                }
            });
        } else {
            IntelligentRoadTest.highwayVueObj.objData = obj;
            IntelligentRoadTest.highwayVueObj.line_id = lineId;
            IntelligentRoadTest.highwayVueObj.mrTop5Cell = mrNearTOP5;
            IntelligentRoadTest.highwayVueObj.title = echartsTitle;
        }
    } else if (type == 2) {
        var echartsTitle = "历史7天覆盖变化";
        var mrNearTOP5 = [];
        if (obj.sector_set != null && obj.sector_set != "") {
            var mrTo5DataArr = obj.sector_set.split("@");
            for (var k = 0; k < mrTo5DataArr.length; k++) {
                mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
            }
        }
        if (IntelligentRoadTest.railVueObj == null) {
            IntelligentRoadTest.railVueObj = new Vue({
                el: divID,
                data: {
                    objData: obj,
                    line_id: lineId,
                    mrTop5Cell: mrNearTOP5,
                    title: echartsTitle
                },
                methods: {
                    showDetailInfo: function (event) {
                        IntelligentRoadTest.showDetailInfo(event);
                    },
                    showLinkCell: function (event, item, type) {
                        //type=1最近小区，type=2 接入扇区
                        /*if ($(event.currentTarget).hasClass("linkCellHover")) {
                            $(event.currentTarget).attr("title", "显示连线");
                            $(event.currentTarget).removeClass("linkCellHover");
                            // $(event.currentTarget).children().attr("src",norImg);
                            if (type == 1) {
                                IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
                            } else if (type == 2) {
                                IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
                            }
                        } else {
                            $(event.currentTarget).attr("title", "隐藏连线");
                            $(event.currentTarget).addClass("linkCellHover");
                            // $(event.currentTarget).children().attr("src",clickImg);
                            // var max_lng =
                            // var centerPoint = new BMap.Point(item.longitude_mid, item.latitude_mid);
                            var mid_lng = item.longitude_mid;
                            var mid_lat = item.latitude_mid;
                            var centerPoint = new L.LatLng(mid_lat, mid_lng);
                            if (type == 1) {
                                IntelligentRoadTest.showNrTop5CellForMapByOsm(centerPoint, item.top5_sector_set);
                            } else if (type == 2) {
                                IntelligentRoadTest.showMrNrTop5CellForMapByOsm(centerPoint, item.sector_set);
                            }
                        }*/
                        if ($(event.currentTarget).hasClass("linkCellHover")) {
                            $(event.currentTarget).attr("title", "显示连线");
                            $(event.currentTarget).removeClass("linkCellHover");
                            if (type == 1) {
                                IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                            } else if (type == 2) {
                                IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                            }
                        } else {
                            $(event.currentTarget).attr("title", "隐藏连线");
                            $(event.currentTarget).addClass("linkCellHover");

                            var mid_lng = item.longitude_mid;
                            var mid_lat = item.latitude_mid;
                            var centerPoint = new BMap.Point(mid_lng, mid_lat);
                            if (type == 1) {
                                // IntelligentRoadTest.showNrTop5CellForMap(centerPoint,item.top5_sector_set);
                                IntelligentRoadTest.showNrTop5CellForMap(centerPoint, item.top5_sector_set);

                            } else if (type == 2) {
                                IntelligentRoadTest.showMrNrTop5CellForMap(centerPoint, item.sector_set);
                            }
                        }
                    },
                    gotoAlarmList: function (item) {
                        if (item.sector_set != null) {
                            var sectorArr = item.sector_set.split("@");
                            IntelligentRoadTest.loadAlarmListData(sectorArr);
                            $("#alarmBackPoor").html("返回上一级");
                        }
                    },
                    gotoKPIList: function (item) {
                        if (item.sector_set != null) {
                            var sectorArr = item.sector_set.split("@");
                            showOrHideInputImage(2);
                            IntelligentRoadTest.loadKPIListData(sectorArr);
                            $("#kpiBackPoor").html("返回上一级");
                        }
                    },
                    gotoShowSectorMessage: function (sectorDate) {
                        // console.log(sectorDate);
                        IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                    }
                }
            });
        } else {
            IntelligentRoadTest.railVueObj.objData = obj;
            IntelligentRoadTest.railVueObj.line_id = lineId;
            IntelligentRoadTest.railVueObj.mrTop5Cell = mrNearTOP5;
            IntelligentRoadTest.railVueObj.title = echartsTitle;
        }
    } else if (type == 3) {
        var echartsTitle = "历史7天覆盖变化";
        var mrNearTOP5 = [];
        if (obj.sector_set != null && obj.sector_set != "") {
            var mrTo5DataArr = obj.sector_set.split("@");
            for (var k = 0; k < mrTo5DataArr.length; k++) {
                mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
            }
        }
        if (IntelligentRoadTest.cityRoadVueObj == null) {
            IntelligentRoadTest.cityRoadVueObj = new Vue({
                el: divID,
                data: {
                    objData: obj,
                    line_id: lineId,
                    mrTop5Cell: mrNearTOP5,
                    title: echartsTitle
                },
                methods: {
                    showDetailInfo: function (event) {
                        IntelligentRoadTest.showDetailInfo(event);
                    },
                    showLinkCell: function (event, item, type) {
                        //type=1最近小区，type=2 接入扇区
                        if ($(event.currentTarget).hasClass("linkCellHover")) {
                            $(event.currentTarget).attr("title", "显示连线");
                            $(event.currentTarget).removeClass("linkCellHover");
                            // $(event.currentTarget).children().attr("src",norImg);
                            if (type == 1) {
                                IntelligentRoadTest.hideGridOrPolygonNrTop5SectorOsm();
                            } else if (type == 2) {
                                IntelligentRoadTest.hideGridOrPolygonMrTop5SectorOsm();
                            }
                        } else {
                            $(event.currentTarget).attr("title", "隐藏连线");
                            $(event.currentTarget).addClass("linkCellHover");
                            // $(event.currentTarget).children().attr("src",clickImg);
                            // var max_lng =
                            // var centerPoint = new BMap.Point(item.longitude_mid, item.latitude_mid);
                            var mid_lng = item.longitude_mid;
                            var mid_lat = item.latitude_mid;
                            var centerPoint = new L.LatLng(mid_lat, mid_lng);
                            if (type == 1) {
                                IntelligentRoadTest.showNrTop5CellForMapByOsm(centerPoint, item.top5_sector_set);
                            } else if (type == 2) {
                                IntelligentRoadTest.showMrNrTop5CellForMapByOsm(centerPoint, item.sector_set);
                            }
                        }
                    },
                    gotoAlarmList: function (item) {
                        if (item.sector_set != null) {
                            var sectorArr = item.sector_set.split("@");
                            IntelligentRoadTest.loadAlarmListData(sectorArr);
                            $("#alarmBackPoor").html("返回上一级");
                        }
                    },
                    gotoKPIList: function (item) {
                        if (item.sector_set != null) {
                            var sectorArr = item.sector_set.split("@");
                            showOrHideInputImage(2);
                            IntelligentRoadTest.loadKPIListData(sectorArr);
                            $("#kpiBackPoor").html("返回上一级");
                        }
                    },
                    gotoShowSectorMessage: function (sectorDate) {
                        // console.log(sectorDate);
                        IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                    }
                }
            });
        } else {
            IntelligentRoadTest.cityRoadVueObj.objData = obj;
            IntelligentRoadTest.cityRoadVueObj.line_id = lineId;
            IntelligentRoadTest.cityRoadVueObj.mrTop5Cell = mrNearTOP5;
            IntelligentRoadTest.cityRoadVueObj.title = echartsTitle;
        }
    }
}

//查询某个20米的线段历史7天的数据
IntelligentRoadTest.getSeventDayDataByLineId = function (rowkey) {
    //DAY_`LINE_LEVEL`_`LINE_TYPE`_`CITY_ID`_`ROAD_ID`_`LINE_ID`
    let line_type = rowkey[2];
    var keyList = [];
    var dateList = [];
    for (var i = 7; i > 0; i--) {
        var day = new Date(dealDateString(IntelligentRoadTest.day).getTime() - (i - 1) * 24 * 60 * 60 * 1000).Format("yyyyMMdd");
        rowkey[0] = day;
        keyList.push(rowkey.join("_"));
        dateList.push(day);
    }
    var keyListStr = keyList.join(",");
    var cloumnsList = "i:a6,i:a7";
    var list = ["IntelligentRoadTestV2_getRoad20MDataByLineID", "KEYLIST:" + keyListStr, "COLUMNLIST:" + cloumnsList];

    if(line_type == 2){
        list[0] = 'IntelligentRoadTestV5_getRoad20MDataByLineID';
    }

    var progressBarSqls = [];
    progressBarSqls.push(list);
    var functionlist = [IntelligentRoadTest.dealSeventDayDataByLineId];
    var dataBase = [7];
    progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase, [rowkey]);
}

IntelligentRoadTest.dealSeventDayDataByLineId = function IntelligentRoadTest_dealSeventDayDataByLineId(data, params) {
    var result = callBackChangeData(data);
    var objResult = [];
    if (result.length > 0) {
        for (var i = 0; i < result.length; i++) {
            var obj = {};
            var dataArr = result[i];
            var time = dataArr["rowkey"].substr(0, 8); //日期
            obj.create_time = dealDateString(time).Format("yyyy-MM-dd");
            obj.rsrp = dataArr["i:a6"];
            obj.cover = dataArr["i:a7"];
            objResult.push(obj);
        }
    }
    var rowkey = params;
    var divID = "";
    if (rowkey[2] == "1") {
        divID = "highwayGridLineChart";
    } else if (rowkey[2] == "2") {
        divID = "railGridLineChart";
    } else if (rowkey[2] == "3") {
        divID = "cityRoadGridLineChart";
    }
    IntelligentRoadTest.showGridSevenDayEcharts(objResult, divID);
    showOrHideInputImage(1);
}

//-----------------------------地铁列表开始-------------------------------------

/**
 * ********************************
 * @funcname IntelligentRoadTest.changeMetroDataByType
 * @funcdesc 根据地铁的指标类型切换地铁的线路数据
 * @param {int} metroType
 *  metroType表示地铁的指标类型 ， 1表示正向指标 -1表示反向指标 2表示综合指标
 * @return
 * @author 林楚佳
 * @create
 **********************************
 */
IntelligentRoadTest.changeMetroDataByType = function (metroType) {
    if (metroType == 2) {
        IntelligentRoadTest.metroData = IntelligentRoadTest.metroZongData; //综合指标的原始数据
        IntelligentRoadTest.metroDataResult = IntelligentRoadTest.metroZongHeList;
        IntelligentRoadTest.metroStationsDataList = IntelligentRoadTest.metroZongHeList;
    } else if (metroType == 1) {
        IntelligentRoadTest.metroData = IntelligentRoadTest.metroZhengData; //正向指标的原始数据
        IntelligentRoadTest.metroDataResult = IntelligentRoadTest.metroZhengList;
        IntelligentRoadTest.metroStationsDataList = IntelligentRoadTest.metroZhengList;
    } else if (metroType == -1) {
        IntelligentRoadTest.metroData = IntelligentRoadTest.metroFanData; //反向指标的原始数据
        IntelligentRoadTest.metroDataResult = IntelligentRoadTest.metroFanList;
        IntelligentRoadTest.metroStationsDataList = IntelligentRoadTest.metroFanList;
    }
}


//查询78米线段的30天历史数据
IntelligentRoadTest.getMetro78MSevenDayData = function (section_id) {
    var sqlList = [];
    var endDay = IntelligentRoadTest.day;
    var startDay = new Date(dealDateString(endDay).getTime() - 6 * 24 * 60 * 60 * 1000).Format("yyyyMMdd");
    var mr_flag = 2;
    if(IntelligentRoadTest.metroCompleteVM){
        mr_flag = IntelligentRoadTest.metroCompleteVM.metroData.mr_flag;
    }
    var list = ["IntelligentRoadTestAnalysisV2_getMetro78MLine30DayData",
        "STARTDAY:" + startDay, "ENDDAY:" + endDay, "SECTION_ID:" + section_id, "MR_FLAG:" + mr_flag];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealMetro78MSevenDayData];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);
}

IntelligentRoadTest.dealMetro78MSevenDayData = function IntelligentRoadTest_dealMetro78MSevenDayData(data) {
    var result = callBackChangeData(data);
    /*var objResult = IntelligentRoadTest.getEchartData(result);*/
    for (var i = 0; i < result.length; i++) {
        if (result[i].create_time.toString().indexOf("-") < 0) {
            result[i].create_time = dealDateString(result[i].create_time.toString()).Format("yyyy-MM-dd");
        }
    }
    IntelligentRoadTest.showGridSevenDayEcharts(result, "metro78LineChart");
}

//查询78米线段的业务数据
IntelligentRoadTest.getMetro78MData = function (section_id) {
    var sqlList = [];
    var mr_flag = 2; //默认显示双向指标
    if (IntelligentRoadTest.metroCompleteVM != null) {
        mr_flag = IntelligentRoadTest.metroCompleteVM.metroData.mr_flag; //获取当前详情页的方向
    }
    var list = ["IntelligentRoadTestAnalysisV2_206_getMetro78MLineData",
        "DAY:" + IntelligentRoadTest.day, "SECTION_ID:" + section_id, "MR_FLAG:" + mr_flag];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealMetro78MData];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database, [section_id]);
}

IntelligentRoadTest.dealMetro78MData = function IntelligentRoadTest_dealMetro78MData(data, params) {
    var result = callBackChangeData(data);
    console.log(result);
    var item = {};
    if (result.length > 0) {
        item = result[0];
        item.city_name = noceUtil.LATN_ID_city[item.city_id];
    } else {
        item.section_id = params;
    }
    IntelligentRoadTest.showMetro78MMessage(item, params);
}

IntelligentRoadTest.showMetro78MMessage = function (obj, lineId) {
    var echartsTitle = "历史7天覆盖变化";
    var nearTOP5 = [];
    if (obj.nc_sector_set != null && obj.nc_sector_set != "") {
        var to5DataArr = obj.nc_sector_set.split("@");
        for (var i = 0; i < to5DataArr.length; i++) {
            nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
        }
    }
    var mrNearTOP5 = [];
    if (obj.sector_set != null && obj.sector_set != "") {
        var mrTo5DataArr = obj.sector_set.split("@");
        for (var k = 0; k < mrTo5DataArr.length; k++) {
            mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
        }
    }
    if (IntelligentRoadTest.checkIfHasSameSector(nearTOP5, mrNearTOP5)) {
        obj.isHasSameSector = true;
    }
    IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
    IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();

    if (IntelligentRoadTest.metroVueObj == null) {
        IntelligentRoadTest.metroVueObj = new Vue({
            el: "#showMetro78LineCompleteMessage",
            data: {
                objData: obj,
                line_id: lineId,
                mrTop5Cell: mrNearTOP5,
                nrTop5Cell: nearTOP5,
                title: echartsTitle
            },
            methods: {
                showDetailInfo: function (event) {
                    IntelligentRoadTest.showDetailInfo(event);
                },
                showLinkCell: function (event, item, type) {
                    //type=1最近小区，type=2 接入扇区
                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                        $(event.currentTarget).attr("title", "显示连线");
                        $(event.currentTarget).removeClass("linkCellHover");
                        // $(event.currentTarget).children().attr("src",norImg);
                        if (type == 1) {
                            IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                        } else if (type == 2) {
                            IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                        }
                    } else {
                        $(event.currentTarget).attr("title", "隐藏连线");
                        $(event.currentTarget).addClass("linkCellHover");
                        // $(event.currentTarget).children().attr("src",clickImg);
                        // var max_lng =
                        var centerPoint = new BMap.Point(item.longitude_mid, item.latitude_mid);
                        if (type == 1) {
                            IntelligentRoadTest.showNrTop5CellForMap(centerPoint, item.nc_sector_set);
                        } else if (type == 2) {
                            IntelligentRoadTest.showMrNrTop5CellForMap(centerPoint, item.sector_set);
                        }
                    }
                },
                gotoAlarmList: function (item) {
                    if (item.sector_set != null) {
                        var sectorArr = item.sector_set.split("@");
                        IntelligentRoadTest.loadAlarmListData(sectorArr);
                        $("#alarmBackPoor").html("返回上一级");
                    }
                },
                gotoKPIList: function (item) {
                    if (item.sector_set != null) {
                        var sectorArr = item.sector_set.split("@");
                        showOrHideInputImage(2);
                        IntelligentRoadTest.loadKPIListData(sectorArr);
                        $("#kpiBackPoor").html("返回上一级");
                    }
                },
                gotoShowSectorMessage: function (sectorDate) {
                    // console.log(sectorDate);
                    IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                }
            }
        });
    } else {
        IntelligentRoadTest.metroVueObj.objData = obj;
        IntelligentRoadTest.metroVueObj.line_id = lineId;
        IntelligentRoadTest.metroVueObj.mrTop5Cell = mrNearTOP5;
        IntelligentRoadTest.metroVueObj.nrTop5Cell = nearTOP5;
        IntelligentRoadTest.metroVueObj.title = echartsTitle;
    }

}
//地铁一二级列表数据查询
IntelligentRoadTest.getMetroFirstListData = function (cityName, day) {
    var city_id = noceUtil.city_LATN_ID[cityName];
    var sqlList = [];
    var list = ["IntelligentRoadTestAnalysisV5_getMetroFirstList", "CITY_ID:" + city_id, "DAY:" + day];
    var list2 = ["IntelligentRoadTestAnalysisV5_getMetroSecondList", "CITY_ID:" + city_id, "DAY:" + day];
    sqlList.push(list);
    sqlList.push(list2);
    var funcList = [IntelligentRoadTest.dealMetroFirstListData ,IntelligentRoadTest.dealMetroSecondListData ];
    var database = [3 , 3];
    progressbarTwo.submitSql(sqlList, funcList, database);
    IntelligentRoadTest.metroCurrentSelectConditon = cityName + day;
}

//地铁第一层数据的查询回调函数
IntelligentRoadTest.dealMetroFirstListData = function IntelligentRoadTest_getMetroFirstListData(data) {
    var result = callBackChangeData(data);
//    console.log(result);
    IntelligentRoadTest.metroFirstListResult = result;
    IntelligentRoadTest.metroFirstListCurrentResult = result;
    // IntelligentRoadTest.showMetroFirstList(result);
    $("#metroSort ul li.selected").trigger("click");
}



IntelligentRoadTest.showMetroFirstList = function IntelligentRoadTest_showMetroFirstList(result) {
    IntelligentRoadTest.metroCurrentPage = 1;
    IntelligentRoadTest.metroTotalCount = result.length;
    var pageCount = result.length / IntelligentRoadTest.pageSize;
    if ((result.length % IntelligentRoadTest.pageSize) != 0) {
        IntelligentRoadTest.metroTotalPage = parseInt(pageCount) + 1; //总页数，没有整除时加上1
    } else {
        IntelligentRoadTest.metroTotalPage = pageCount;  //整除不用加1
    }
    if (IntelligentRoadTest.metroVM == null) {
        IntelligentRoadTest.metroVM = new Vue({
            el: '#showMetroDiv',//楚佳修改
            data: {
                metroList: IntelligentRoadTest.getDataListByPage(result, IntelligentRoadTest.metroCurrentPage),
                totalPages: IntelligentRoadTest.metroTotalPage,
                totalCounts: IntelligentRoadTest.metroTotalCount,
                currentPageNum: IntelligentRoadTest.metroCurrentPage,
                startIndex: IntelligentRoadTest.startIndex,
                lastIndex: IntelligentRoadTest.lastIndex
            },
            methods: {
                goNextList: function (item, index) { //跳转到地铁的二级列表
                    $('#tip').hide();
                    IntelligentRoadTest.currentMetroLineItem = item; //记录当前点击的是哪一条地铁线路
                    IntelligentRoadTest.second = true;
                    IntelligentRoadTest.mkIndex = index;
                    IntelligentRoadTest.line_id = item.line_id;
                    IntelligentRoadTest.fatherLineId = item.line_id;
                    $("#metroName").text(item.line_name);
                    if ($("#metroType").text().trim() == "综合指标") {
                        IntelligentRoadTest.metroType = 2;
                    } else if ($("#metroType").text().trim() == "正向指标") {
                        IntelligentRoadTest.metroType = 1;
                    } else if ($("#metroType").text().trim() == "反向指标") {
                        IntelligentRoadTest.metroType = -1;
                    }
                    IntelligentRoadTest.goMetroSecondList();
                    // IntelligentRoadTest.changeMetroDataByType(IntelligentRoadTest.metroType);
                    if (index != null) {
                        //如果是从列表点击进来的则调用地铁点击事件
                        IntelligentRoadTest.metroClick(item, 1);
                    }
                    //地铁第二层列表可以使用crossfilter过滤出某条地铁的站间数据
                    // var metroData = crossfilter(IntelligentRoadTest.metroStationsDataList); //创建一个crossfilter对象
                    // var metroDataLineIDDim = metroData.dimension(function (d) {
                    //     return d.line_id;
                    // }); //按照线路id创建一个维度
                    // var finalLineData = metroDataLineIDDim.filter(item.line_id);


                    //临时使用，构造出第二层数据
                    /*var line_data = IntelligentRoadTest.metroStationsDataList[item.line_id]
                    var metroData = [];
                    for (var station_key in line_data) {
                        for (var i = 0; i < line_data[station_key].length; i++) {
                            metroData.push(line_data[station_key][i]);
                        }
                    }
                    IntelligentRoadTest.metroSecondListResult = metroData;
                    IntelligentRoadTest.metroSecondListCurrentResult = metroData;*/
                    IntelligentRoadTest.getCurrentLineSecondListResult(item.line_id , IntelligentRoadTest.metroType); //获取二级列表的数据
                    // IntelligentRoadTest.metroSecondListResult = finalLineData.top(metroData.size());
                    // IntelligentRoadTest.metroSecondListCurrentResult = finalLineData.top(metroData.size());
                    // IntelligentRoadTest.showMetroSecondList(IntelligentRoadTest.metroSecondListCurrentResult);
                    $("#metroSortD ul li.selected").trigger("click");
                },
                lastOrNext: function (type) {
                    if (type == 0) {
                        //上一页
                        if (IntelligentRoadTest.metroCurrentPage > 1) {
                            IntelligentRoadTest.metroCurrentPage = IntelligentRoadTest.metroCurrentPage - 1;
                            IntelligentRoadTest.metroVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroFirstListCurrentResult, IntelligentRoadTest.metroCurrentPage);
                            IntelligentRoadTest.metroVM.currentPageNum = IntelligentRoadTest.metroCurrentPage;
                            IntelligentRoadTest.metroVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.metroVM.lastIndex = IntelligentRoadTest.lastIndex;
                        } else {
                            alert("当前页是第一页");
                        }
                    } else {
                        if (IntelligentRoadTest.metroCurrentPage < IntelligentRoadTest.metroTotalPage) {
                            IntelligentRoadTest.metroCurrentPage = IntelligentRoadTest.metroCurrentPage + 1;
                            IntelligentRoadTest.metroVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroFirstListCurrentResult, IntelligentRoadTest.metroCurrentPage);
                            IntelligentRoadTest.metroVM.currentPageNum = IntelligentRoadTest.metroCurrentPage;
                            IntelligentRoadTest.metroVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.metroVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                    }
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.metroVM.metroList,10);
                },
                gotoPage: function () {
                    var page = $("#metroPage").val();
                    page = parseInt(page);
                    if (page > 0 && page <= IntelligentRoadTest.metroTotalPage) {
                        IntelligentRoadTest.metroCurrentPage = page;
                        IntelligentRoadTest.metroVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroFirstListCurrentResult, IntelligentRoadTest.metroCurrentPage);
                        IntelligentRoadTest.metroVM.currentPageNum = IntelligentRoadTest.metroCurrentPage;
                        IntelligentRoadTest.metroVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.metroVM.lastIndex = IntelligentRoadTest.lastIndex;
                    }
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.metroVM.metroList,10);
                },
                goLast: function () {
                    IntelligentRoadTest.metroCurrentPage = IntelligentRoadTest.metroTotalPage;
                    IntelligentRoadTest.metroVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroFirstListCurrentResult, IntelligentRoadTest.metroCurrentPage);
                    IntelligentRoadTest.metroVM.currentPageNum = IntelligentRoadTest.metroCurrentPage;
                    IntelligentRoadTest.metroVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.metroVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.metroVM.metroList,10);
                },
                goFirst: function () {
                    IntelligentRoadTest.metroCurrentPage = 1;
                    IntelligentRoadTest.metroVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroFirstListCurrentResult, IntelligentRoadTest.metroCurrentPage);
                    IntelligentRoadTest.metroVM.currentPageNum = IntelligentRoadTest.metroCurrentPage;
                    IntelligentRoadTest.metroVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.metroVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.metroVM.metroList,10);
                },
                turnMk: function (index, item) {
                    //地铁第一层触摸
                    IntelligentRoadTest.metroMouseover(item);
//                	 var data =IntelligentRoadTest.metroDataFilter(IntelligentRoadTest.metroData,item.line_id);
//                	 var result = callBackChangeData(data);
//                	 var orderArr=result.sort(compare("from_station_id"));
//                	 if(orderArr.length!=0){
//                	 var centerPoint = new BMap.Point(orderArr[0].from_station_longitude,orderArr[0].from_station_latitude);
//                	 var pixel=IntelligentRoadTest.map.pointToPixel(centerPoint);
//                	 var x = pixel.x;
//                     var y = pixel.y;
//                     var infoStr = "";
//                     infoStr +="线段名称："+item.line_name+"<br>";
//                     infoStr +="弱路段数:"+item.poor_count+"<br>";
//                     infoStr +="总路段数:"+Math.ceil(item.line_length/78)+"<br>";
//                     infoStr +="弱覆盖占比:"+item.poor_ratio+"%<br>";
//                     $('#lblTip').html(infoStr);
//                     $('#tip').css("left", x + 15 + "px").css("top", y + 20 + "px").show();
//                	 }
                },
                positionSatr: function (item, index) {
                    var data = IntelligentRoadTest.metroDataFilter(IntelligentRoadTest.metroData, item.line_id);
                    var result = callBackChangeData(data);
                    var orderArr = result.sort(compare("from_station_id"));
                    if (orderArr.length > 0) {
                        var centerPoint = new BMap.Point(orderArr[0].from_station_longitude, orderArr[0].from_station_latitude);
                        IntelligentRoadTest.map.setCenter(centerPoint);
                    }

                }
            }
        });
    } else {
        IntelligentRoadTest.metroVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroFirstListCurrentResult, IntelligentRoadTest.metroCurrentPage);
        IntelligentRoadTest.metroVM.totalPages = IntelligentRoadTest.metroTotalPage;
        IntelligentRoadTest.metroVM.totalCounts = IntelligentRoadTest.metroTotalCount;
        IntelligentRoadTest.metroVM.currentPageNum = IntelligentRoadTest.metroCurrentPage;
        IntelligentRoadTest.metroVM.startIndex = IntelligentRoadTest.startIndex;
        IntelligentRoadTest.metroVM.lastIndex = IntelligentRoadTest.lastIndex;
    }
    if (IntelligentRoadTest.metroIndex == 1 || IntelligentRoadTest.metroIndex == 2) {
        //在一级或二级列表
        showOrHideInputImage(1);
    }
}

//查询地铁30天的覆盖率和rsrp均值的趋势图数据
IntelligentRoadTest.getMetro30DayData = function (line_id, from_id, to_id, mr_flag) {
    var sqlList = [];
    var endDay = IntelligentRoadTest.day;
    var startDay = new Date(dealDateString(endDay).getTime() - 30 * 24 * 60 * 60 * 1000).Format("yyyyMMdd");
    var list = ["IntelligentRoadTestAnalysisV2_205_getMetroStation30DayData", "LINE_ID:" + line_id,
        "FROM_ID:" + from_id, "TO_ID:" + to_id, "MR_FLAG:" + mr_flag, "STARTDAY:" + startDay, "ENDDAY:" + endDay];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealMetro30DayData];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);
}

IntelligentRoadTest.dealMetro30DayData = function IntelligentRoadTest_dealMetro30DayData(data) {
    var result = callBackChangeData(data);
    var temp = result;
    var objResult = IntelligentRoadTest.getEchartData(result);
    IntelligentRoadTest.show30DayEcharts(objResult, "metroLineChart");
    if (temp.length > 0) {
        temp[0].create_time = dealDateString(temp[0].create_time).Format("yyyy-MM-dd");
    }
    IntelligentRoadTest.showSecondEchart(temp, "metroSecondChart");
}

IntelligentRoadTest.showMetroSecondList = function IntelligentRoadTest_showMetroSecondList(result) {
    IntelligentRoadTest.metroSecondListCurrentPage = 1;
    IntelligentRoadTest.metroSecondListTotalCount = result.length;
    var pageCount = result.length / IntelligentRoadTest.pageSize;
    if ((result.length % IntelligentRoadTest.pageSize) != 0) {
        IntelligentRoadTest.metroSecondListTotalPage = parseInt(pageCount) + 1; //总页数，没有整除时加上1
    } else {
        IntelligentRoadTest.metroSecondListTotalPage = pageCount;  //整除不用加1
    }

    if (IntelligentRoadTest.metroSecondVM == null) {
        IntelligentRoadTest.metroSecondVM = new Vue({
            el: '#showMetroListDiv',//楚佳修改
            data: {
                metroList: IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroSecondListCurrentResult, IntelligentRoadTest.metroSecondListCurrentPage),
                totalPages: IntelligentRoadTest.metroSecondListTotalPage,
                totalCounts: IntelligentRoadTest.metroSecondListTotalCount,
                currentPageNum: IntelligentRoadTest.metroSecondListCurrentPage,
                metroType: IntelligentRoadTest.metroType,
                startIndex: IntelligentRoadTest.startIndex,
                lastIndex: IntelligentRoadTest.lastIndex
            },
            methods: {
                showMessage: function (item, index) { //进入详情页
                    // var pointStar=new L.latLng(item.latitude_min,item.longitude_min);
                    // IntelligentRoadTest.OsmMap.setView(pointStar,IntelligentRoadTest.OsmMap.getZoom());
                    IntelligentRoadTest.mkIndex = index;
                    IntelligentRoadTest.queryMetroTa(item);//查询该站间对象的起止站点的TA值
                    IntelligentRoadTest.queryMetroSectorTA(item);//查询该站点对象的起止站点的所有室分的TA数据
                    if (IntelligentRoadTest.metroIndex != 4) { //可能需要改动
                        IntelligentRoadTest.goMetroCompleteMessage();
                    }
                    if (index != null) {
                        //如果是从列表点击进来的则调用地铁点击事件
                        IntelligentRoadTest.metroClick(item, 2);
                    }
                    // else {
                    //     //增加
                    //     IntelligentRoadTest.metroClick(item, 2);
                    // }
                    if (!IntelligentRoadTest.isScreenCompared && IntelligentRoadTest.isAddMessageEvent) {//不是在分屏页，并且点击过分屏
                        if (!windowScreeen.closed) {//如果窗口没有关闭，需要进行同步信息，如果已经关闭，什么都不用做
                            // windowScreeen.focus();
                            IntelligentRoadTestScreenCompared.postMessageToScreenCompared(item, 'metro');
                        }
                    }

                    var echartTitle = "历史30天覆盖变化";
                    // IntelligentRoadTest.getMetro30DayData(item.line_id, item.from_station_id, item.to_station_id, item.mr_flag);
                    IntelligentRoadTest.getMetro30DayCoverData(item.from_station_id, item.to_station_id , IntelligentRoadTest.day);
                    var nearTOP5 = [];
                    if (item.nc_sector_set != null && item.nc_sector_set != "") {
                        var to5DataArr = item.nc_sector_set.split("@");
                        for (var i = 0; i < to5DataArr.length; i++) {
                            nearTOP5[i] = IntelligentRoadTest.dealAnotherTop5CellData(to5DataArr[i]);
                        }
                    }
                    var mrNearTOP5 = [];
                    if (item.sector_set != null && item.sector_set != "") {
                        var mrTo5DataArr = item.sector_set.split("@");
                        for (var k = 0; k < mrTo5DataArr.length; k++) {
                            mrNearTOP5[k] = IntelligentRoadTest.dealTop5CellData(mrTo5DataArr[k]);
                        }
                    }
                    if (IntelligentRoadTest.checkIfHasSameSector(nearTOP5, mrNearTOP5)) {
                        item.isHasSameSector = true;
                    }
                    if (item.mr_flag == 2) {
                        item.mr_flag_name = "双向综合";
                    } else if (item.mr_flag == 1) {
                        item.mr_flag_name = "正向";
                    } else {
                        item.mr_flag_name = "反向";
                    }
                    $(".linkCell").attr("title", "显示连线");
                    $(".linkCell").removeClass("linkCellHover");
                    if (IntelligentRoadTest.metroCompleteVM == null) {
                        IntelligentRoadTest.metroCompleteVM = new Vue({
                            el: '#showMetroCompleteMessage',
                            data: {
                                metroData: item,
                                dataIndex: index,
                                nrTop5Cell: nearTOP5,
                                mrTop5Cell: mrNearTOP5,
                                toStationTAArr: [], //结束站点的TA值数组
                                fromStationTAArr: [],//起始站点的TA值数组
                                toStationSectorTAArr: [],//结束站点的室分TA值数组
                                fromStationSectorTAArr: [],//起始站点的室分TA值数组
                                title: echartTitle,
                                alaram_title: '',
                                otherDataObj : {},
                                uname: IntelligentRoadTest.currentUser
                            },
                            methods: {
                                metroPosition: function (item) {
                                    // IntelligentRoadTest.metroPositiong(item);
                                    if (item.from_station_longitude != undefined && item.from_station_latitude != undefined) {
                                        var centerPoint = new BMap.Point(item.from_station_longitude, item.from_station_latitude);
                                        IntelligentRoadTest.map.setCenter(centerPoint);
                                    }
                                },
                                editMetroMessage: function (item) {
                                    IntelligentRoadTest.metroEdit(item);
                                },
                                deleteMetro: function (item) {
                                    IntelligentRoadTest.wantDeleteConcern = item;
                                    $("#modal-metro").show();
                                },
                                viewMetroLog: function (item) {
                                    IntelligentRoadTest.metroLog(item);
                                },
                                gotoMetroSevenEchart: function (item) {
                                    IntelligentRoadTest.metroSevenLine(item);
                                },
                                showDetailInfo: function (event) {
                                    IntelligentRoadTest.showDetailInfo(event);
                                },
                                showLinkCell: function (event, item, type) {
                                    //type=1最近小区，type=2 接入扇区
                                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                                        $(event.currentTarget).attr("title", "显示连线");
                                        $(event.currentTarget).removeClass("linkCellHover");
                                        if (type == 1) {
                                            IntelligentRoadTest.hideGridOrPolygonNrTop5Sector();
                                        } else if (type == 2) {
                                            IntelligentRoadTest.hideGridOrPolygonMrTop5Sector();
                                        }
                                    } else {
                                        $(event.currentTarget).attr("title", "隐藏连线");
                                        $(event.currentTarget).addClass("linkCellHover");

                                        var mid_lng = item.longitude_mid;
                                        var mid_lat = item.latitude_mid;
                                        var centerPoint = new BMap.Point(mid_lng, mid_lat);
                                        if (type == 1) {
                                            IntelligentRoadTest.showNrTop5CellForMap(centerPoint, item.nc_sector_set);
                                        } else if (type == 2) {
                                            IntelligentRoadTest.showMrNrTop5CellForMap(centerPoint, item.sector_set);
                                        }
                                    }
                                },
                                showTA: function (event, item, taArr, type) {
                                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                                        $(event.currentTarget).attr("title", "显示TA圆形");
                                        $(event.currentTarget).removeClass("linkCellHover");
                                        if (type == "start") {
                                            IntelligentRoadTest.clearAllCircle(type, "circleTA"); //清除起始站点的TA圆环
                                        } else {
                                            IntelligentRoadTest.clearAllCircle(type, "circleTA");//清除结束站点的TA圆环
                                        }
                                    } else {
                                        $(event.currentTarget).attr("title", "隐藏TA圆形");
                                        $(event.currentTarget).addClass("linkCellHover");
                                        IntelligentRoadTest.showTACircle(event, item, taArr, type);
                                    }
                                },
                                showSectorTA: function (event, item, taArr, type) {
                                    if ($(event.currentTarget).hasClass("linkCellHover")) {
                                        $(event.currentTarget).attr("title", "显示TA圆形");
                                        $(event.currentTarget).removeClass("linkCellHover");
                                        if (type == "start") {
                                            IntelligentRoadTest.clearAllCircle(type, "sectorTA"); //清除起始站点的TA圆环
                                        } else {
                                            IntelligentRoadTest.clearAllCircle(type, "sectorTA");//清除结束站点的TA圆环
                                        }
                                    } else {
                                        $(event.currentTarget).attr("title", "隐藏TA圆形");
                                        $(event.currentTarget).addClass("linkCellHover");
                                        IntelligentRoadTest.showTASector(event, item, taArr, type);
                                    }
                                },
                                gotoShowSectorMessage: function (sectorDate) {
                                    IntelligentRoadTest.getSectorMessageById(sectorDate.enodebid, sectorDate.cellid, IntelligentRoadTest.day);
                                },
                                gotoKPIList: function (item) {
                                    if (item.sector_set != null) {
                                        var sectorArr = item.sector_set.split("@");
                                        showOrHideInputImage(2);
                                        IntelligentRoadTest.loadKPIListData(sectorArr);
                                        $("#kpiBackPoor").html("返回上一级");
                                    }
                                },
                                changeMrFlagMessage: function (event, item) {
                                    IntelligentRoadTest.metroChangeFlag(event, item);
                                },
                                changeLineShowFlag : function( event,item , mr_flag){
                                    if(mr_flag == -1){ //将from_station_id 和 to_station_id倒置一下
                                        var temp = {};
                                        var from_station_id = item.to_station_id;
                                        var to_station_id = item.from_station_id;
                                        temp.from_station_id = from_station_id;
                                        temp.to_station_id = to_station_id;
                                        temp.line_id = item.line_id;
                                        IntelligentRoadTest.metroClick(temp , 2 , mr_flag);
                                    }else{
                                        IntelligentRoadTest.metroClick(item , 2 , mr_flag);
                                    }
                                    if(mr_flag!=2){
                                        IntelligentRoadTest.showAll78LineArrow(IntelligentRoadTest.metroStationToStationLineData, 2 ,mr_flag);
                                    }else{
                                        IntelligentRoadTest.removeMetroArrowMarker();
                                    }

                                    if(mr_flag == 2){
                                        $("#twowayLine").addClass("linkCellHover");
                                        $("#forwardLine").removeClass("linkCellHover");
                                        $("#resverseLine").removeClass("linkCellHover");
                                    }else if(mr_flag == 1){
                                        $("#twowayLine").removeClass("linkCellHover");
                                        $("#forwardLine").addClass("linkCellHover");
                                        $("#resverseLine").removeClass("linkCellHover");
                                    }else{
                                        $("#twowayLine").removeClass("linkCellHover");
                                        $("#forwardLine").removeClass("linkCellHover");
                                        $("#resverseLine").addClass("linkCellHover");
                                    }
                                }
                            }
                        });
                    } else {
                        IntelligentRoadTest.metroCompleteVM.metroData = item;
                        IntelligentRoadTest.metroCompleteVM.dataIndex = index;
                        IntelligentRoadTest.metroCompleteVM.nrTop5Cell = nearTOP5;
                        IntelligentRoadTest.metroCompleteVM.mrTop5Cell = mrNearTOP5;
                        IntelligentRoadTest.metroCompleteVM.title = echartTitle;
                    }
                    IntelligentRoadTest.getMetroOtherRSRPAndAllMRCount(item.from_station_id, item.to_station_id);//获取地铁站间段各个方向的rsrp均值和全量MR数
                },
                lastOrNext: function (type) {
                    if (type == 0) {
                        //上一页
                        if (IntelligentRoadTest.metroSecondListCurrentPage > 1) {
                            IntelligentRoadTest.metroSecondListCurrentPage = IntelligentRoadTest.metroSecondListCurrentPage - 1;
                            IntelligentRoadTest.metroSecondVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroSecondListCurrentResult, IntelligentRoadTest.metroSecondListCurrentPage);
                            IntelligentRoadTest.metroSecondVM.currentPageNum = IntelligentRoadTest.metroSecondListCurrentPage;
                            IntelligentRoadTest.metroSecondVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.metroSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        } else {
                            alert("当前页是第一页");
                        }
                    } else {
                        if (IntelligentRoadTest.metroSecondListCurrentPage < IntelligentRoadTest.metroSecondListTotalPage) {
                            IntelligentRoadTest.metroSecondListCurrentPage = IntelligentRoadTest.metroSecondListCurrentPage + 1;
                            IntelligentRoadTest.metroSecondVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroSecondListCurrentResult, IntelligentRoadTest.metroSecondListCurrentPage);
                            IntelligentRoadTest.metroSecondVM.currentPageNum = IntelligentRoadTest.metroSecondListCurrentPage;
                            IntelligentRoadTest.metroSecondVM.startIndex = IntelligentRoadTest.startIndex;
                            IntelligentRoadTest.metroSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                        }
                    }
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.metroSecondVM.metroList,10);
                },
                gotoPage: function () {
                    var page = $("#metroSecondListPage").val(); //楚佳修改
                    page = parseInt(page);
                    if (page > 0 && page <= IntelligentRoadTest.metroSecondListTotalPage) {
                        IntelligentRoadTest.metroSecondListCurrentPage = page;
                        IntelligentRoadTest.metroSecondVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroSecondListCurrentResult, IntelligentRoadTest.metroSecondListCurrentPage);
                        IntelligentRoadTest.metroSecondVM.currentPageNum = IntelligentRoadTest.metroSecondListCurrentPage;
                        IntelligentRoadTest.metroSecondVM.startIndex = IntelligentRoadTest.startIndex;
                        IntelligentRoadTest.metroSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                    }
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.metroSecondVM.metroList,10);
                },
                goLast: function () {
                    IntelligentRoadTest.metroSecondListCurrentPage = IntelligentRoadTest.metroSecondListTotalPage;
                    IntelligentRoadTest.metroSecondVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroSecondListCurrentResult, IntelligentRoadTest.metroSecondListCurrentPage);
                    IntelligentRoadTest.metroSecondVM.currentPageNum = IntelligentRoadTest.metroSecondListCurrentPage;
                    IntelligentRoadTest.metroSecondVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.metroSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.metroSecondVM.metroList,10);
                },
                goFirst: function () {
                    IntelligentRoadTest.metroSecondListCurrentPage = 1;
                    IntelligentRoadTest.metroSecondVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroSecondListCurrentResult, IntelligentRoadTest.metroSecondListCurrentPage);
                    IntelligentRoadTest.metroSecondVM.currentPageNum = IntelligentRoadTest.metroSecondListCurrentPage;
                    IntelligentRoadTest.metroSecondVM.startIndex = IntelligentRoadTest.startIndex;
                    IntelligentRoadTest.metroSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
                    // IntelligentRoadTest.drawMk(IntelligentRoadTest.metroSecondVM.metroList,10);
                },
                turnMk: function (index, item) {
                    //地铁第二层触摸
                    IntelligentRoadTest.metroMouseover(item);

                }
            }
        });
    } else {
        IntelligentRoadTest.metroSecondVM.metroList = IntelligentRoadTest.getDataListByPage(IntelligentRoadTest.metroSecondListCurrentResult, IntelligentRoadTest.metroSecondListCurrentPage);
        IntelligentRoadTest.metroSecondVM.totalPages = IntelligentRoadTest.metroSecondListTotalPage;
        IntelligentRoadTest.metroSecondVM.totalCounts = IntelligentRoadTest.metroSecondListTotalCount;
        IntelligentRoadTest.metroSecondVM.currentPageNum = IntelligentRoadTest.metroSecondListCurrentPage;
        IntelligentRoadTest.metroSecondVM.startIndex = IntelligentRoadTest.startIndex;
        IntelligentRoadTest.metroSecondVM.lastIndex = IntelligentRoadTest.lastIndex;
        IntelligentRoadTest.metroSecondVM.metroType = IntelligentRoadTest.metroType;
    }
    if (IntelligentRoadTest.currentLocation == "metro" && IntelligentRoadTest.metroIndex == 3) {
        IntelligentRoadTest.goMetroCompleteMessage();
    }
}



/**
 * ********************************
 * @funcname IntelligentRoadTest.metroChangeFlag
 * @funcdesc 地铁详情页切换正反向
 * @param {Object} event ： 鼠标对象
 * {Object} item ： 存放地铁站点数据的对象
 * @return
 * @author 林楚佳
 * @create
 **********************************
 */
IntelligentRoadTest.metroChangeFlag = function (event, item) {
    var mr_flag = 2;
    var from_station_id;
    var to_station_id;
    if (item.mr_flag_name == "双向综合") {
        mr_flag = 2;
        if (item.mr_flag == -1) { //反向转双向
            from_station_id = item.to_station_id;
            to_station_id = item.from_station_id;
        } else {
            from_station_id = item.from_station_id;
            to_station_id = item.to_station_id;
        }
    } else if (item.mr_flag_name == "正向") {
        mr_flag = 1;
        if (item.mr_flag == -1) { //反向转正向
            from_station_id = item.to_station_id;
            to_station_id = item.from_station_id;
        } else {
            from_station_id = item.from_station_id;
            to_station_id = item.to_station_id;
        }
    } else if (item.mr_flag_name == "反向") {
        mr_flag = -1;
        from_station_id = item.to_station_id;
        to_station_id = item.from_station_id;
    }
    var metroData = crossfilter(IntelligentRoadTest.metroAllStationResultChe); //创建一个crossfilter对象
    var metroDataLineIDDim = metroData.dimension(function (d) {
        return d;
    }); //按照线路id创建一个维度
    var finalLineData = metroDataLineIDDim.filter(function (d) {
            if (d.from_station_id == from_station_id && d.to_station_id == to_station_id && d.mr_flag == mr_flag) {
                return d
            }
        }
    );
    var newMetroList = finalLineData.top(1);
    if (newMetroList[0] != null) {
        IntelligentRoadTest.metroSecondVM.showMessage(newMetroList[0]);
        var point1 = new BMap.Point(newMetroList[0].from_station_longitude, newMetroList[0].from_station_latitude);
        var point2 = new BMap.Point(newMetroList[0].to_station_longitude, newMetroList[0].to_station_latitude);
        // IntelligentRoadTest.metorLineStarEndMk(point1 , point2); //重新绘制起止点
        IntelligentRoadTest.metorStarPoint = point1;
        IntelligentRoadTest.metorEndPoint = point2;
        IntelligentRoadTest.canvasLayerList = null;//这个圆环的配置对象要置空
    } else {
        alert("该段地铁站点没有" + item.mr_flag_name + "数据");
        if (item.mr_flag == 2) {
            item.mr_flag_name = "双向综合";
        } else if (item.mr_flag == 1) {
            item.mr_flag_name = "正向";
        } else {
            item.mr_flag_name = "反向";
        }
    }
}

//根据from_id和to_id 查询某个站点的某天的数据
IntelligentRoadTest.getMetroStationDataByID = function(from_id , to_id ,day,city_id){
    var sqlList = [];
    var mr_flag = 2;
    var city_id = city_id;
    if(IntelligentRoadTest.metroCompleteVM != null){ //将mr_flag传入取数模板中
        mr_flag = IntelligentRoadTest.metroCompleteVM.metroData.mr_flag;
        city_id = IntelligentRoadTest.metroCompleteVM.metroData.city_id;
    }
    var list = ["IntelligentRoadTestAnalysisV5_getMetroStationById" ,
        "DAY:" + day,"FROM_STATION_ID:"+from_id,"TO_STATION_ID:"+ to_id , "MR_FLAG:" + mr_flag , "CITY_ID:"+city_id];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealMetroStationDataByID];
    var database = [3];
    progressbarTwo.submitSql(sqlList , funcList , database , [[from_id , to_id , mr_flag , city_id]]);
}

IntelligentRoadTest.dealMetroStationDataByID = function IntelligentRoadTest_dealMetroStationDataByID(data , params){
    var result = callBackChangeData(data);
    // console.log(result);
    var obj = {}
    if(result.length > 0){
        if(!IntelligentRoadTest.metroSecondVM){
            IntelligentRoadTest.showMetroSecondList([]);
        }
        IntelligentRoadTest.metroClick(result[0],2);
        IntelligentRoadTest.metroSecondVM.showMessage(result[0]);
    }else{
        obj.from_station_id = params[0]; //起始站点ID
        obj.to_station_id = params[1]; //终点站点ID
        obj.mr_flag =  params[2]; //方向标识
        obj.city_id = params[3]; //地市ID
        if(!IntelligentRoadTest.metroSecondVM){
            IntelligentRoadTest.showMetroSecondList([]);
        }
        IntelligentRoadTest.metroSecondVM.showMessage(obj);
    }
    showOrHideInputImage(1);
}




//----------------------------地铁列表结束 --------------------------------------

//------------------------------五高一地两美一场的代码结束（林楚佳）-----------------------------------------------
//五高一地两美一场搜索打点
IntelligentRoadTest.drawEsbhMk = function IntelligentRoadTest_drawEsbhMk(item) {
    if (item == undefined) {
        return;
    }
    var textList = [
        {"key": "区域名称", "val": item.esbh_name},
        {"key": "区域编号", "val": item.esbh_id},
    ];
    if (!IntelligentRoadTest.seachTime) {
        IntelligentRoadTest.searchShowMkLable(item.longitude_mid_baidu, item.latitude_mid_baidu, textList)
    }
    IntelligentRoadTest.showPolygon(item.gis_data);
    IntelligentRoadTest.loadGrid(item.longitude_max_baidu, item.longitude_min_baidu, item.latitude_max_baidu, item.latitude_min_baidu);
}

/**********************************
 * @funcname cityListSelectHandler
 * @funcdesc 点击城市下拉ul，选中已选择的城市和区
 * @param {datatype} nameOfParameter (input/output optional)
 descriptionOfParameter
 * @return {datatype}
 * @author laijunbao
 * @create 2018/01/11 0011 10:20
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.cityListSelectHandler = function IntelligentRoadTest_cityListSelectHandler(citydisTxt, senceId) {
    var flag = true;

    if (flag) {
        $("#" + senceId).find("li").each(function () {
            var $cityThat = $(this);
            //城市
            var city = "";
            var district = "";
            var mkCenter = "";
            if (IntelligentRoadTest.index == 4) {
                city = $("#DTCityName").text();
            } else {
                city = $.trim(citydisTxt.split(">")[0]);
                district = $.trim(citydisTxt.split(">")[1]);
                mkCenter = $.trim(citydisTxt.split(">")[2]);
            }
            if (flag) {
                if ($cityThat.find("a")[0].text == city) {
                    $cityThat.find("ul li").each(function () {
                        if (flag) {
                            $cityThat.addClass("current selectedCity");
                            var $disThat = $(this);
                            $disThat.parent().find("li").removeClass("current selectedCity");
                            if ("全市" == district) {
                                // $disThat.parent().show();
                                $disThat.addClass("selectedCity");
                                $disThat.find("ul li").addClass("selected");
                                // $disThat.find("ul:first").show();
                                flag = false;
                            } else {
                                if ($disThat.find("a")[0].text == district) {
                                    $disThat.addClass("selectedCity selected");
                                    $disThat.find("ul li").each(function () {
                                        if (flag) {
                                            var $mkCenter = $(this);
                                            if ($mkCenter.find("a").text() == mkCenter) {
                                                $mkCenter.addClass("selected");
                                                flag = false;
                                            } else {
                                                $mkCenter.removeClass("selected");
                                            }
                                        } else {
                                            return;
                                        }

                                    });
                                } else {
                                    $disThat.removeClass("selectedCity selected");
                                }
                            }
                        }
                    })
                } else {
                    $cityThat.removeClass("selectedCity current");
                }
            }
        })
    }

}
/**********************************
 * @funcname allcitySelectHandler
 * @funcdesc 顶部城市列表点击事件，在下拉列表对应的城市区县标颜色
 * @param {datatype} nameOfParameter (input/output optional)
 descriptionOfParameter
 * @return {datatype}
 * @author laijunbao
 * @create 2018/1/16 0016 16:23
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.allcitySelectHandler = function IntelligentRoadTest_allcitySelectHandler() {
    var flag = true;
    if (flag) {
        $(".districtName").find("li").removeClass("selected");
        $("#allcity").find("li").each(function () {
            var $cityThat = $(this);
            //城市
            if ($cityThat.find("a")[0].text == IntelligentRoadTest.city) {
                $cityThat.addClass("selectedCity current");
                $cityThat.find("a").each(function () {
                    var $disThat = $(this);
                    if ($disThat.text() == IntelligentRoadTest.district) {
                        $disThat.parent().addClass("selected");
                        flag = false;
                        return false;
                    } else {
                        $disThat.parent().removeClass("selected");
                    }
                })
            } else {
                $cityThat.removeClass("selectedCity current");
            }
        })
    }

}

//-----------控制显示osm或者百度地图-------------
//显示百度地图
IntelligentRoadTest.showBaiduMap = function () {

    if (!$("#baiduMap").is(":visible")) {
        $("#OsmMap").hide();
        $("#baiduMap").show();
        IntelligentRoadTest.isShowBaiduMap = true;
//        if(IntelligentRoadTest.isShowSector){
//            IntelligentRoadTest.sectorCompent.queryByTemplate();
//        }
        //当前查看的是osm地图，将osm地图和百度地图的坐标拾取都关闭,并将工具的图标进行还原
        if (IntelligentRoadTest.isUseCoordinatePickTool) {
            if (IntelligentRoadTest.coordinatePickToolForOsm) {
                IntelligentRoadTest.coordinatePickToolForOsm.closeAll();
                IntelligentRoadTest.isUseCoordinatePickTool = false;
                IntelligentRoadTest.editImgSrc($("#coordinatePick"));
            }
        }


        setTimeout(function () {
            var city = $('#mapCity').text();
            var district = $('#mapDistrict').text();

            var district_max_lng = IntelligentRoadTest.districtLngAndLat[city][district].max_lng;
            var district_max_lat = IntelligentRoadTest.districtLngAndLat[city][district].max_lat;
            var district_min_lng = IntelligentRoadTest.districtLngAndLat[city][district].min_lng;
            var district_min_lat = IntelligentRoadTest.districtLngAndLat[city][district].min_lat;

            var mid_lng = (district_max_lng + district_min_lng) / 2;
            var mid_lat = (district_max_lat + district_min_lat) / 2;
            var setCenterPoint = new BMap.Point(mid_lng, mid_lat);

            IntelligentRoadTest.map.panTo(setCenterPoint);

        }, 100);

    }
    $('#gageDistance,#BoxSelection,#threeComp').removeClass("unClick")


    // IntelligentRoadTest.OsmMap.invalidateSize();
}
//显示osm地图
IntelligentRoadTest.showOsmMap = function () {

    if (!$("#OsmMap").is(":visible")) {
        IntelligentRoadTest.isShowOsmMapEnd = false;
        $("#OsmMap").show();
        $("#baiduMap").hide();
        IntelligentRoadTest.OsmMap.invalidateSize();
        IntelligentRoadTest.isShowBaiduMap = false;

        //当前查看的是osm地图，将osm地图和百度地图的坐标拾取都关闭,并将工具的图标进行还原
        if (IntelligentRoadTest.isUseCoordinatePickTool) {
            if (IntelligentRoadTest.coordinatePickTool) {
                IntelligentRoadTest.coordinatePickTool.closeAll();
                IntelligentRoadTest.isUseCoordinatePickTool = false;
                IntelligentRoadTest.editImgSrc($("#coordinatePick"));
            }

        }


//        if(IntelligentRoadTest.isShowSector){
//            if(!IntelligentRoadTest.sectorCompentForOsm.selectTime){
//                IntelligentRoadTest.sectorCompentForOsm.selectTime = IntelligentRoadTest.day;
//            }
//            IntelligentRoadTest.sectorCompentForOsm.queryByTemplate();
//        }


        setTimeout(function () {
            var city = $('#mapCity').text();
            var district = $('#mapDistrict').text();

            var district_max_lng = IntelligentRoadTest.districtLngAndLat[city][district].max_lng;
            var district_max_lat = IntelligentRoadTest.districtLngAndLat[city][district].max_lat;
            var district_min_lng = IntelligentRoadTest.districtLngAndLat[city][district].min_lng;
            var district_min_lat = IntelligentRoadTest.districtLngAndLat[city][district].min_lat;

            var mid_lng = (district_max_lng + district_min_lng) / 2;
            var mid_lat = (district_max_lat + district_min_lat) / 2;

            var transFormPoint = GPSUtil.bd09_To_gps84(mid_lat, mid_lng);

            var setCenterPoint = new L.latLng(transFormPoint[0], transFormPoint[1]);
            IntelligentRoadTest.OsmMap.panTo(setCenterPoint);
            IntelligentRoadTest.isShowOsmMapEnd = true;
        }, 100);

    }

    $('#gageDistance,#BoxSelection,#threeComp').addClass("unClick");


}


IntelligentRoadTest.loadLineByLevelFromBounds = function () {

    var osmBounds = IntelligentRoadTest.OsmMap.getBounds(); //高速和市政路使用osm
    var level = IntelligentRoadTest.getOsmLineLevel();
    //var level = IntelligentRoadTest.getBaiduLineLevel();
    var city = "";
    var roadType = 1;
    if (IntelligentRoadTest.index == 7) {//高速
        if (IntelligentRoadTest.isShowHighwayLine) {
            city = $('#highwayCityName').text().trim();
            roadType = 1;
        } else {
            return;
        }

    } else if (IntelligentRoadTest.index == 8) {
        osmBounds = IntelligentRoadTest.map.getBounds(); //高铁使用百度地图
        level = IntelligentRoadTest.getBaiduLineLevel();
        if (IntelligentRoadTest.isShowRailwayLine) {
            if (IntelligentRoadTest.roadIndex == 1 ){
                city = $('#railCityName').text().trim();
            }else if(IntelligentRoadTest.roadIndex == 2){
                city = $('#railSecondCityNameD').text().trim();
            }

            roadType = 2;
            // if(IntelligentRoadTest.isSuiDao == true){
            //     roadType = 21;
            // }
        } else {
            return;
        }

    } else if (IntelligentRoadTest.index == 14) {
        if (IntelligentRoadTest.isShowCityRoadLine) {
            city = $('#cityRoadCityName').text().trim();
            roadType = 3;
        } else {
            return;
        }

    } else {
        return;
    }
    var ne = osmBounds.getNorthEast();//东北角
    var sw = osmBounds.getSouthWest();//西南角
    var max_lng = ne.lng;
    var max_lat = ne.lat;
    var min_lng = sw.lng;
    var min_lat = sw.lat
    var sqlList = [];
    var list = ["IntelligentRoadTestAnalysisV2_103_HighwaySectors", "MINLNG:" + min_lng, "MINLAT:" + min_lat,
        "MAXLNG:" + max_lng, "MAXLAT:" + max_lat, "CITYNAME:" + city, "ROAD_TYPE_ID:" + roadType, "LEVEL:" + level ,"ROADID:"];
    if(IntelligentRoadTest.index == 8){
        if(city == "全省"){
            list = ["IntelligentRoadTestAnalysisV5_getHighwaySectors", "MINLNG:" + min_lng, "MINLAT:" + min_lat,
                "MAXLNG:" + max_lng, "MAXLAT:" + max_lat, "CITY:", "ROAD_TYPE_ID:" + roadType, "LEVEL:" + level];
        }else{
            list = ["IntelligentRoadTestAnalysisV5_getHighwaySectors", "MINLNG:" + min_lng, "MINLAT:" + min_lat,
                "MAXLNG:" + max_lng, "MAXLAT:" + max_lat, "CITY:AND city_name = '" + city +"'", "ROAD_TYPE_ID:" + roadType, "LEVEL:" + level];
        }

        if(IntelligentRoadTest.roadIndex == 2 && !noceUtil.isUndefined(IntelligentRoadTest.road_id)){
            list.push("ROADID:and road_id = "+IntelligentRoadTest.road_id);
        }else{
            list.push("ROADID:");
        }
    }
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealBoundsLineData];
    var database = [6];

    if (IntelligentRoadTest.roadHbaseQueryMultiple != null) {
        IntelligentRoadTest.roadHbaseQueryMultiple.cancelSqlAjax();
        IntelligentRoadTest.roadHbaseQueryMultiple = null;
    }

    if (IntelligentRoadTest.roadDimQueryMultiple != null) {
        IntelligentRoadTest.roadDimQueryMultiple.cancelSqlAjax();
        IntelligentRoadTest.roadDimQueryMultiple = null;
    }

    IntelligentRoadTest.roadDimQueryMultiple = new progressbarTwoMultiple(sqlList, funcList, database, [[city, roadType, level]]);
//    progressbarTwo.submitSql(sqlList, funcList, database,[[city,roadType,level]]);
}

IntelligentRoadTest.dealBoundsLineData = function IntelligentRoadTest_dealBoundsLineData(data, para) {
    let result = callBackChangeData(data);

    let city = para[0];
    let roadType = para[1];
    let level = para[2];
    let city_id = OSMapUtil.getCityLocation[city];
    //DAY_`LINE_LEVEL`_`LINE_TYPE`_`CITY_ID`_`ROAD_ID`_`LINE_ID`
    let keyPrefix = IntelligentRoadTest.day + "_" + level + "_" + roadType + "_";
    let rowArray = new Array();
    for (let i = 0; i < result.length; i++) {
        let row = keyPrefix + result[i].city_id + "_" + result[i].road_id + "_" + result[i].id;
        rowArray.push(row);
    }
    if (rowArray.length == 0) {
        if (IntelligentRoadTest.geoJsonLayer) {
            IntelligentRoadTest.geoJsonLayer.clearLayers();
        }

        if(IntelligentRoadTest.railLineUtil){
            IntelligentRoadTest.railLineUtil.clearCanvasLayers();
            IntelligentRoadTest.railLineUtil.lineDataObject = null;
            IntelligentRoadTest.railLineUtil.lineDataObject = [];
        }
        
        return;
    }
    let keyListStr = rowArray.join(",");
    let sqlList = [];
//    var columnList = "i:a1,i:a2,i:a3,i:a4,i:a5,i:a6,i:a7,i:a8,i:a9,i:a10,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a17,i:a18,i:a19,i:a20,i:a21,i:a22,i:a23,i:a24,i:a25";
    let columnList = "i:a1,i:a2,i:a3,i:a6,i:a7,i:a8,i:a9";
//    IntelligentRoadTest.lineTypeIndex = lineTypeIndex;//类型下标 0--覆盖质量  1--上行速率  2--下行速率
//    IntelligentRoadTest.lineThresholds = lineThresholds;//线段图例
    if (IntelligentRoadTest.lineTypeIndex == 0) {
        columnList = "i:a1,i:a2,i:a3,i:a5,i:a6,i:a7,i:a8,i:a9";
    } else if (IntelligentRoadTest.lineTypeIndex == 1) {//上行
        columnList = "i:a1,i:a2,i:a3,i:a5,i:a33";
    } else if (IntelligentRoadTest.lineTypeIndex == 2) {//下行
        columnList = "i:a1,i:a2,i:a3,i:a5,i:a34";
    }
    let sqlTempleteId = "IntelligentRoadTestAnalysisV2_104_HighwaySectorsIdx";
    if(IntelligentRoadTest.index == 8){ //高铁
        sqlTempleteId = "IntelligentRoadTestAnalysisV5_roadSectorsIdx";
    }
    let list = [sqlTempleteId, "KEYLIST:" + keyListStr, "COLUMNLIST:" + columnList];
    sqlList.push(list);
    let funcList = [IntelligentRoadTest.showBoundsLineData];
    let database = [4];

    if (IntelligentRoadTest.roadHbaseQueryMultiple != null) {
        IntelligentRoadTest.roadHbaseQueryMultiple.cancelSqlAjax();
        IntelligentRoadTest.roadHbaseQueryMultiple = null;

//    	if (IntelligentRoadTest.geoJsonLayer) {
//    		IntelligentRoadTest.geoJsonLayer.clearLayers();
//    	}

    }

    IntelligentRoadTest.roadHbaseQueryMultiple = new progressbarTwoMultiple(sqlList, funcList, database, [roadType]);
//    progressbarTwo.submitSql(sqlList, funcList, database);

    rowArray = [];
    rowArray = null;
    keyListStr = [];
    keyListStr = null;

}
IntelligentRoadTest.showBoundsLineData = function (data, roadType) {

    if (IntelligentRoadTest.lineMessageOverlay) {
        IntelligentRoadTest.lineMessageOverlay.remove();
    }
    if (roadType == 1) {
        if (!IntelligentRoadTest.isShowHighwayLine) {
            if (IntelligentRoadTest.geoJsonLayer) {
                IntelligentRoadTest.geoJsonLayer.clearLayers();
            }
            return;
        }
    } else if (roadType == 2) {
        if (!IntelligentRoadTest.isShowRailwayLine) {
            if (IntelligentRoadTest.geoJsonLayer) {
                IntelligentRoadTest.geoJsonLayer.clearLayers(); //----------------这里后面使用百度地图之后要改为清除百度地图的线路
            }
            return;
        }
    } else if (roadType == 3) {
        if (!IntelligentRoadTest.isShowCityRoadLine) {
            if (IntelligentRoadTest.geoJsonLayer) {
                IntelligentRoadTest.geoJsonLayer.clearLayers();
            }
            return;
        }
    }

    //在此处可以做数据缓存，再执行呈现
    //IntelligentRoadTest.showBoundsLineDataFromHbase(data, undefined, roadType);
    IntelligentRoadTest.osmLineData = [];
    IntelligentRoadTest.osmLineData = null;
    IntelligentRoadTest.osmLineData = callBackChangeData(data);
    IntelligentRoadTest.osmColorLegen();


    if (IntelligentRoadTest.roadDimQueryMultiple != null) {
        IntelligentRoadTest.roadDimQueryMultiple.cancelSqlAjax();
        IntelligentRoadTest.roadDimQueryMultiple = null;
    }

    if (IntelligentRoadTest.roadHbaseQueryMultiple != null) {
        IntelligentRoadTest.roadHbaseQueryMultiple.cancelSqlAjax();
        IntelligentRoadTest.roadHbaseQueryMultiple = null;
    }
    data = [];
    data = null;
}

//绘制线段
IntelligentRoadTest.showBoundsLineDataFromHbase = function IntelligentRoadTest_showBoundsLineDataFromHbase(data, type, roadType) {

    if (roadType == 1) {
        if (!IntelligentRoadTest.isShowHighwayLine) {
            return;
        }
    } else if (roadType == 2) {
        if (!IntelligentRoadTest.isShowRailwayLine) {
            return;
        }
    } else if (roadType == 3) {
        if (!IntelligentRoadTest.isShowCityRoadLine) {
            return;
        }
    }


    var result = data;
    if (type == undefined) {
        result = callBackChangeData(data);
        IntelligentRoadTest.osmLineData = result;
    }

    if (IntelligentRoadTest.roadIndex != 1) {
        return;
    }
    //高铁先改成使用百度地图的绘线组件进行绘制  --------------------------------------------------------
    if(roadType == 2){
        // if(IntelligentRoadTest.isLP == false){
            //判断是否要按照点集合设置级别
            /*if(IntelligentRoadTest.roadIndex != 2 && IntelligentRoadTest.isNeedCenterAndZoom == true){
                var pointArr = [];
                for(var m = 0; m < lineList.length; m++){
                    pointArr = pointArr.concat(lineList[m].pointArr);
                }
                IntelligentRoadTest.setRightCenterAndZoom(pointArr);
                pointArr = [];
            }*/
            IntelligentRoadTest.drawRailWay(IntelligentRoadTest.parseGeoJsonForBaidu(result));
        // }
        return ;
    }
//	IntelligentRoadTest.lineHighlightFunc(result.slice(0,100));//测试
    if (IntelligentRoadTest.geoJsonLayer == null) {
        IntelligentRoadTest.geoJsonLayer = L.geoJSON(IntelligentRoadTest.parseGeoJson(result), {
            style: function (feature) {
                var setting = {
                    "weight": IntelligentRoadTest.getRoadWeight(),
                    "opacity": IntelligentRoadTest.lineOpacity,//$('#userSetOpacity').val(),
                };
                var item = feature.properties;
                setting.color = IntelligentRoadTest.getColorStrByLevel(item.level);
//                setting.fillColor = "white";
//                setting.fillOpacity = 0.1;
                return setting;
            },
            filter: function (feature) {
                var isShow = true;
                if (IntelligentRoadTest.lineTypeIndex == 0) {
                    for (var i = 0; i < IntelligentRoadTest.colorBarArrLine.length; i++) {
                        if (IntelligentRoadTest.colorBarArrLine[i] == feature.properties.level) {
                            isShow = false;
                        }
                    }
                } else if (IntelligentRoadTest.lineTypeIndex == 1) {
                    for (var i = 0; i < IntelligentRoadTest.colorBarArrSHLine.length; i++) {
                        if (IntelligentRoadTest.colorBarArrSHLine[i] == feature.properties.level) {
                            isShow = false;
                        }
                    }
                } else if (IntelligentRoadTest.lineTypeIndex == 2) {
                    for (var i = 0; i < IntelligentRoadTest.colorBarArrXHLine.length; i++) {
                        if (IntelligentRoadTest.colorBarArrXHLine[i] == feature.properties.level) {
                            isShow = false;
                        }
                    }
                }

                if (feature.properties.level == null) {
                    isShow = false;
                }
                return isShow;
            }
        });

        IntelligentRoadTest.geoJsonLayer.on("mouseover", function (e) {
            // $('#lblTip').html("");
            var plyPerp = e.layer.feature.properties;
            // var x = e.containerPoint.x;
            // var y = e.containerPoint.y;
            // var infoStr = "";
            // infoStr +="地市："+plyPerp.city+"<br>";
            // infoStr +="高速名称："+plyPerp.road_name+"<br>";
            // infoStr +="RSRP:"+parseFloat(plyPerp.dx_line_rsrp_avg).toFixed(2)+"<br>";
            // infoStr +="覆盖率:"+parseFloat(plyPerp.dx_line_rsrp_cov).toFixed(2)+"<br>";
            // $('#lblTip').html(infoStr);
            // $('#tip').css("left", x + 15 + "px").css("top", y + 20 + "px").show();
            IntelligentRoadTest.lineMouseover(plyPerp);

        });

        IntelligentRoadTest.geoJsonLayer.on("mouseout", function (e) {
            // var plyPerp = e.layer.feature.properties;
            // $('#tip').hide();
        });

        IntelligentRoadTest.geoJsonLayer.on("click", function (e) {
//        	console.log(e);

            var setCenterPoint = e.latlng;
            IntelligentRoadTest.osmCenterPoint = e.latlng;
            var lineProperties = e.layer.feature.properties;
            var rowkey = lineProperties.rowkey.split("_");//DAY_`LINE_LEVEL`_`LINE_TYPE`_`CITY_ID`_`ROAD_ID`_`LINE_ID`
            var line_level = rowkey[1];
            var line_type = rowkey[2];//根据类型加载对应的线段数据
            /*if(line_level==1000){//1000级别的时候，加载500米线段列表

        	}else if(line_level == 500){//500级别的时候，加载500米线段详细信息

        	}else*/
            if (line_level == 20) {//20级别的时候，跳转到20详细信息
                //显示20米详细信息
                // console.log(rowkey);
                // console.log(e.layer.feature.properties);
            } else {
                IntelligentRoadTest.lineClick(lineProperties);
            }
            if (IntelligentRoadTest.OsmMap.getZoom() == 12 || IntelligentRoadTest.OsmMap.getZoom() == 13) {
                IntelligentRoadTest.OsmMap.setView(setCenterPoint, 18);
            }
        });


        IntelligentRoadTest.geoJsonLayer.addTo(IntelligentRoadTest.OsmMap);
        IntelligentRoadTest.geoJsonLayer.setZIndex(100);
//        var pane = IntelligentRoadTest.geoJsonLayer.getPane();
    } else {
        IntelligentRoadTest.geoJsonLayer.clearLayers();
        IntelligentRoadTest.geoJsonLayer.addData(IntelligentRoadTest.parseGeoJson(result));
        IntelligentRoadTest.geoJsonLayer.setZIndex(100);
    }

    if (IntelligentRoadTest.index == 7) {
        if (IntelligentRoadTest.highwayVM) {
            if (IntelligentRoadTest.highwayVM.type) {
                IntelligentRoadTest.showContinueLineData(IntelligentRoadTest.continueLineHighWayDataChe);
            }
        }
    } else if (IntelligentRoadTest.index == 8) {
        if (IntelligentRoadTest.railVM) {
            if (IntelligentRoadTest.railVM.type) {
                IntelligentRoadTest.showContinueLineData(IntelligentRoadTest.continueLineRailWayDataChe);
            }
        }

    } else if (IntelligentRoadTest.index == 14) {
        if (IntelligentRoadTest.cityRoadVM) {
            if (IntelligentRoadTest.cityRoadVM.type) {
                IntelligentRoadTest.showContinueLineData(IntelligentRoadTest.continueLineCityRoadDataChe);
            }
        }
    }

}

IntelligentRoadTest.parseGeoJson = function (data) {
    var features = [];
    if (data == null || data == undefined) {
        return;
    }

    data.forEach(function (row) {
        var obj = {
            "type": "Feature",
            "properties": {
                "rowkey": row["rowkey"],
                "city": row["i:a1"],
                "road_name": row["i:a2"],
                "dx_line_rsrp_count": row["i:a5"],
                "dx_line_rsrp_avg": row["i:a6"],
                "dx_line_rsrp_cov": row["i:a7"],
                "dx_line_rsrp_avg_level": row["i:a8"],
                "dx_line_rsrp_cov_level": row["i:a9"],
                "sector_set": row["i:a19"],
                "longitude_min": row["i:a20"],
                "latitude_min": row["i:a21"],
                "longitude_mid": row["i:a22"],
                "latitude_mid": row["i:a23"],
                "longitude_max": row["i:a24"],
                "latitude_max": row["i:a25"],
                "min_userex_upavgrate": row["i:a33"],
                "min_userex_dwavgrate": row["i:a34"]
            },
            "geometry": wellknown.parse(row["i:a3"])
        };

        if (IntelligentRoadTest.lineTypeIndex == 0) {
            obj["properties"]["level"] = IntelligentRoadTest.getRoadRSRPLevel(row["i:a6"], row["i:a5"]);
        } else if (IntelligentRoadTest.lineTypeIndex == 1) {
            obj["properties"]["level"] = IntelligentRoadTest.getRoadSHLevel(row["i:a33"], row["i:a5"]);
        } else if (IntelligentRoadTest.lineTypeIndex == 2) {
            obj["properties"]["level"] = IntelligentRoadTest.getRoadXHLevel(row["i:a34"], row["i:a5"]);
        }
        features.push(obj);
    });

    return features;
}

//根据RSRP均值获取颜色级别，地铁线段（分段不一样）
IntelligentRoadTest.getMetroRoadRSRPLevel = function (val, cnt) {
    var level = 6;
    if (cnt <= parseInt(IntelligentRoadTest.gridInterval.notCount.value)) {
        level = 6;
        return level;
    } else {
        if(IntelligentRoadTest.gridIntervalKey == "fgLineLegend"){
            for(let itemKey in IntelligentRoadTest.gridInterval){
                if(itemKey == "you" || itemKey == "liang" || itemKey == "zhong" || itemKey == "cha" || itemKey == "jicha"){
                    if(IntelligentRoadTest.gridInterval[itemKey].maxClose == true && IntelligentRoadTest.gridInterval[itemKey].minClose == true){
                        if(val <= parseFloat(IntelligentRoadTest.gridInterval[itemKey].max) && val >= parseFloat(IntelligentRoadTest.gridInterval[itemKey].min)){
                            level = IntelligentRoadTest.gridInterval[itemKey].level;
                            break;
                        }
                    }else if(IntelligentRoadTest.gridInterval[itemKey].maxClose == false && IntelligentRoadTest.gridInterval[itemKey].minClose == true){
                        if(val < parseFloat(IntelligentRoadTest.gridInterval[itemKey].max) && val >= parseFloat(IntelligentRoadTest.gridInterval[itemKey].min)){
                            level = IntelligentRoadTest.gridInterval[itemKey].level;
                            break;
                        }
                    }else if(IntelligentRoadTest.gridInterval[itemKey].maxClose == true && IntelligentRoadTest.gridInterval[itemKey].minClose == false){
                        if(val <= parseFloat(IntelligentRoadTest.gridInterval[itemKey].max) && val > parseFloat(IntelligentRoadTest.gridInterval[itemKey].min)){
                            level = IntelligentRoadTest.gridInterval[itemKey].level;
                            break;
                        }
                    }else if(IntelligentRoadTest.gridInterval[itemKey].maxClose == false && IntelligentRoadTest.gridInterval[itemKey].minClose == false){
                        if(val < parseFloat(IntelligentRoadTest.gridInterval[itemKey].max) && val > parseFloat(IntelligentRoadTest.gridInterval[itemKey].min)){
                            level = IntelligentRoadTest.gridInterval[itemKey].level;
                            break;
                        }
                    }
                }
            }
        }
        return level;
    }
}
//根据RSRP均值获取颜色级别
//ifContinue判断是否继续执行的标识
IntelligentRoadTest.getRoadRSRPLevel = function (val, cnt , ifContinue) {
    val = parseFloat(val);
    var gridIntervalKey=IntelligentRoadTest.gridIntervalKey;
    var gridInterval=IntelligentRoadTest.gridInterval;
    if(!isNull(ifContinue)&&ifContinue==true){//如果是需要绘制地铁的圆环
        gridIntervalKey="fgLineLegend";
        gridInterval=IntelligentRoadTestGridLegend.gridLegend["fgLineLegend"];
    }
    var level = 6;

    if(isNull(cnt) || cnt == 0){
        level = 7;
        return level;
    }

    if (cnt <= parseInt(IntelligentRoadTest.gridInterval.notCount.value) && cnt > 0) {
        level = 6;
        return level;
    } else {
        if(gridIntervalKey == "fgLineLegend"){
            for(let itemKey in gridInterval){
                if(itemKey == "you" || itemKey == "liang" || itemKey == "zhong" || itemKey == "cha" || itemKey == "jicha"){
                    if(gridInterval[itemKey].maxClose == true && gridInterval[itemKey].minClose == true){
                        if(val <= parseFloat(gridInterval[itemKey].max) && val >= parseFloat(gridInterval[itemKey].min)){
                            level = gridInterval[itemKey].level;
                            break;
                        }
                    }else if(gridInterval[itemKey].maxClose == false && gridInterval[itemKey].minClose == true){
                        if(val < parseFloat(gridInterval[itemKey].max) && val >= parseFloat(gridInterval[itemKey].min)){
                            level = gridInterval[itemKey].level;
                            break;
                        }
                    }else if(gridInterval[itemKey].maxClose == true && gridInterval[itemKey].minClose == false){
                        if(val <= parseFloat(gridInterval[itemKey].max) && val > parseFloat(gridInterval[itemKey].min)){
                            level = gridInterval[itemKey].level;
                            break;
                        }
                    }else if(gridInterval[itemKey].maxClose == false && gridInterval[itemKey].minClose == false){
                        if(val < parseFloat(gridInterval[itemKey].max) && val > parseFloat(gridInterval[itemKey].min)){
                            level = gridInterval[itemKey].level;
                            break;
                        }
                    }
                }
            }
        }
        return level;
    }
}

//根据上行速率获取颜色级别
IntelligentRoadTest.getRoadSHLevel = function (val, cnt) {
    var level = 6;

    if(isNull(cnt) || cnt == 0){
        level = 7;
        return level;
    }

    if (cnt <= parseInt(IntelligentRoadTest.gridInterval.notCount.value) && cnt > 0) {
        level = 6;
        return level;
    } else {
        if(IntelligentRoadTest.gridIntervalKey == "shLineLegend"){
            for(let itemKey in IntelligentRoadTest.gridInterval){
                if(itemKey == "you" || itemKey == "liang" || itemKey == "zhong" || itemKey == "cha" || itemKey == "jicha"){
                    if(IntelligentRoadTest.gridInterval[itemKey].maxClose == true && IntelligentRoadTest.gridInterval[itemKey].minClose == true){
                        if(val <= parseFloat(IntelligentRoadTest.gridInterval[itemKey].max) && val >= parseFloat(IntelligentRoadTest.gridInterval[itemKey].min)){
                            level = IntelligentRoadTest.gridInterval[itemKey].level;
                            break;
                        }
                    }else if(IntelligentRoadTest.gridInterval[itemKey].maxClose == false && IntelligentRoadTest.gridInterval[itemKey].minClose == true){
                        if(val < parseFloat(IntelligentRoadTest.gridInterval[itemKey].max) && val >= parseFloat(IntelligentRoadTest.gridInterval[itemKey].min)){
                            level = IntelligentRoadTest.gridInterval[itemKey].level;
                            break;
                        }
                    }else if(IntelligentRoadTest.gridInterval[itemKey].maxClose == true && IntelligentRoadTest.gridInterval[itemKey].minClose == false){
                        if(val <= parseFloat(IntelligentRoadTest.gridInterval[itemKey].max) && val > parseFloat(IntelligentRoadTest.gridInterval[itemKey].min)){
                            level = IntelligentRoadTest.gridInterval[itemKey].level;
                            break;
                        }
                    }else if(IntelligentRoadTest.gridInterval[itemKey].maxClose == false && IntelligentRoadTest.gridInterval[itemKey].minClose == false){
                        if(val < parseFloat(IntelligentRoadTest.gridInterval[itemKey].max) && val > parseFloat(IntelligentRoadTest.gridInterval[itemKey].min)){
                            level = IntelligentRoadTest.gridInterval[itemKey].level;
                            break;
                        }
                    }
                }
            }
        }
        return level;
    }
}
//根据下行速率获取颜色级别
IntelligentRoadTest.getRoadXHLevel = function (val, cnt) {
    var level = 6;

    if(isNull(cnt) || cnt == 0){
        level = 7;
        return level;
    }

    if (cnt <= parseInt(IntelligentRoadTest.gridInterval.notCount.value) && cnt > 0) {
        level = 6;
        return level;
    } else {
        if(IntelligentRoadTest.gridIntervalKey == "xhLineLegend"){
            for(let itemKey in IntelligentRoadTest.gridInterval){
                if(itemKey == "you" || itemKey == "liang" || itemKey == "zhong" || itemKey == "cha" || itemKey == "jicha"){
                    if(IntelligentRoadTest.gridInterval[itemKey].maxClose == true && IntelligentRoadTest.gridInterval[itemKey].minClose == true){
                        if(val <= parseFloat(IntelligentRoadTest.gridInterval[itemKey].max) && val >= parseFloat(IntelligentRoadTest.gridInterval[itemKey].min)){
                            level = IntelligentRoadTest.gridInterval[itemKey].level;
                            break;
                        }
                    }else if(IntelligentRoadTest.gridInterval[itemKey].maxClose == false && IntelligentRoadTest.gridInterval[itemKey].minClose == true){
                        if(val < parseFloat(IntelligentRoadTest.gridInterval[itemKey].max) && val >= parseFloat(IntelligentRoadTest.gridInterval[itemKey].min)){
                            level = IntelligentRoadTest.gridInterval[itemKey].level;
                            break;
                        }
                    }else if(IntelligentRoadTest.gridInterval[itemKey].maxClose == true && IntelligentRoadTest.gridInterval[itemKey].minClose == false){
                        if(val <= parseFloat(IntelligentRoadTest.gridInterval[itemKey].max) && val > parseFloat(IntelligentRoadTest.gridInterval[itemKey].min)){
                            level = IntelligentRoadTest.gridInterval[itemKey].level;
                            break;
                        }
                    }else if(IntelligentRoadTest.gridInterval[itemKey].maxClose == false && IntelligentRoadTest.gridInterval[itemKey].minClose == false){
                        if(val < parseFloat(IntelligentRoadTest.gridInterval[itemKey].max) && val > parseFloat(IntelligentRoadTest.gridInterval[itemKey].min)){
                            level = IntelligentRoadTest.gridInterval[itemKey].level;
                            break;
                        }
                    }
                }
            }
        }
        return level;
    }
}

IntelligentRoadTest.getRoadWeight = function IntelligentRoadTest_getRoadWeight() {

    switch (IntelligentRoadTest.OsmMap.getZoom()) {
        //20米
        case 19:
            return 9;
        //50米
        case 18:
            return 8;
        //100米
        case 17:
            return 7;
        //200米
        case 16:
            return 6;
        //300米
        case 15:
            return 5;
        //500米
        case 14:
            return 5;
        case 13:
            return 5;
        case 12:
            return 5;
        case 11:
            return 4;
        case 10:
            return 4;
        case 9:
            return 4;
        case 8:
            return 4;
        case 7:
            return 4;
        default:
            return 4;
    }
}


IntelligentRoadTest.getOsmLineLevel = function IntelligentRoadTest_getOsmLineLevel() {
    var level = 100;
    switch (IntelligentRoadTest.OsmMap.getZoom()) {
        case 19:
            level = 20;//20
            break;
        case 18:
            level = 20;//50
            break;
        case 17:
            level = 100;//100米
            break;
        case 16:
            level = 100;//200
            break;
        case 15:
            level = 100;//300
            break;
        case 14:
            level = 100;//500
            break;
        case 13:
            level = 500;//1km
            break;
        case 12:
            level = 500;//3km
            break;
        case 11:
            level = 1000;//5km
            break;
        case 10:
            level = 1000;//10km
            break;
        case 9:
            level = 1000;
            break;
        case 8:
            level = 1000;
            break;
        case 7:
            level = 1000;
            break;
    }

    return level;
}

IntelligentRoadTest.getColorStrByLevel = function IntelligentRoadTest_getColorStrByLevel(level) {
    let color = "white";
    for(let itemKey in IntelligentRoadTest.gridInterval){
        if(itemKey == "you" || itemKey == "liang" || itemKey == "zhong" || itemKey == "cha" || itemKey == "jicha" || itemKey == "notCount" || itemKey == "fallNet"){
            if(IntelligentRoadTest.gridInterval[itemKey].level == level){
                color = IntelligentRoadTest.gridInterval[itemKey].color;
            }
        }
    }

    /*if (IntelligentRoadTest.lineThresholds) {
        for (var i = 0; i < IntelligentRoadTest.lineThresholds.length; i++) {
            if (level == IntelligentRoadTest.lineThresholds[i].level) {
                color = IntelligentRoadTest.lineThresholds[i].color;
                break;
            }
        }
    }*/
    return color;
}

IntelligentRoadTest.getColorStrByRsrp = function IntelligentRoadTest_getColorStrByRsrp(rsrp_avg) {
    var color = "";
    rsrp_avg = parseFloat(rsrp_avg);
    if (rsrp_avg > -85 && rsrp_avg < 0) {
        color = "#009900";
    } else if (rsrp_avg <= -85 && rsrp_avg > -95) {
        color = "#00B0F0";
    } else if (rsrp_avg <= -95 && rsrp_avg > -105) {
        color = "#0070C0";
    } else if (rsrp_avg <= -105 && rsrp_avg > -115) {
        color = "#FFC000";
    } else if (rsrp_avg <= -115 && rsrp_avg > -140) {
        color = "#C00000";
    } else {
        color = "#fff";
    }
    return color;
}

//根据地市、类型、日期查询连片线段数据
IntelligentRoadTest.queryContinueLine = function (city, line_type, day, isShowLine) {
    var isShow = true;
    if (isShowLine == false) {
        isShow == false;//不传则默认呈现
    }
    var sqlList = [];
    var realType = line_type;
    /*if(line_type == 2 && IntelligentRoadTest.isSuiDao == true){
        realType = 21;
    }*/
    var list = ["IntelligentRoadTestAnalysisV2_109_HighwayList_Continuous", "DAY:" + day, "TYPE:" + realType, "CITY:" + city];
    if(line_type == 2){ //高铁更换模板
        var cityCondition = " and city = '" + city + "'";
        if(city == "全省"){
            cityCondition = "";
        }
        list = ["IntelligentRoadTestAnalysisV5_getRoadContinuousGisData", "DAY:" + day, "TYPE:" + realType, "CITYCONDITION:" + cityCondition];
        if(IntelligentRoadTest.roadIndex == 2){
            list.push("CONDITION: AND ROAD_ID = " + IntelligentRoadTest.road_id);
        }
    }
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealContinueLineData];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database, [[line_type, isShow]]);
}

//根据地市、类型、日期查询连片线段数据
IntelligentRoadTest.queryContinueLineByRoadId = function (city, line_type, day, road_id) {
    var sqlList = [];
    /*if(IntelligentRoadTest.isSuiDao == true && line_type == 2){ //高铁隧道
        line_type = 21;
    }*/
    var list = ["IntelligentRoadTestAnalysisV2_109_HighwayList_Continuous", "DAY:" + day, "TYPE:" + line_type, "CITY:" + city, "CONDITION:" + "and ROAD_ID = " + road_id];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.showContinueLineData];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database);
}


//处理连片查询回来的数据，并呈现
IntelligentRoadTest.dealContinueLineData = function IntelligentRoadTest_dealContinueLineData(data, params) {
    var result = callBackChangeData(data);
    var typeID = params[0];
    var isShowLine = params[1];

    //可以对数据进行缓存
    if (typeID == 1) {
        IntelligentRoadTest.continueLineHighWayDataChe = result;
    } else if (typeID == 2) {
        IntelligentRoadTest.continueLineRailWayDataChe = result;
    } else if (typeID == 3) {
        IntelligentRoadTest.continueLineCityRoadDataChe = result;
    }


    if (isShowLine) {//是否呈现线段数据
        //这里高铁要替换为另外一种方式呈现
        if(typeID == 2){ //高铁
            let roadSecondContinueData = result;
            if(IntelligentRoadTest.roadIndex == 2){
                //过滤出该条高铁的连片数据 IntelligentRoadTest.continueLineRailWayDataChe总的数据，不可改
                let railData = crossfilter(IntelligentRoadTest.continueLineRailWayDataChe); //创建一个crossfilter对象
                let railDataLineIDDim = railData.dimension(function (d) {
                    return d.road_id;
                }); //按照线路id创建一个维度
                let finalLineData = railDataLineIDDim.filter(IntelligentRoadTest.road_id);
                IntelligentRoadTest.railSecondListMapResult = finalLineData.top(railData.size());
                roadSecondContinueData = IntelligentRoadTest.railSecondListMapResult;
                let points = [];
                for(let i = 0; i < IntelligentRoadTest.railSecondListMapResult.length; i++){
                    let point_mid = new BMap.Point(IntelligentRoadTest.railSecondListMapResult[i].longitude_mid,IntelligentRoadTest.railSecondListMapResult[i].latitude_mid);
                    points.push(point_mid);
                }
                IntelligentRoadTest.setRightCenterAndZoom(points);

            }
            //在地二层的时候，需要根据线段id过滤过该线路的连片数据再进行呈现
            IntelligentRoadTest.showRoadContinueData(roadSecondContinueData); //显示连片或者隧道的数据
        }else{
            IntelligentRoadTest.showContinueLineData(result);
        }
    }

}
//呈现连片弱线段
IntelligentRoadTest.showContinueLineData = function IntelligentRoadTest_showContinueLineData(result) {
    if (IntelligentRoadTest.lineMessageOverlay) {
        IntelligentRoadTest.lineMessageOverlay.remove();
    }
    //为什么要将对象设置为null，因为连片需要区分是整段还是20米，整段的连片数据从mysql中获取，而20米的数据从hbase中来，转换方法不一样
    if (IntelligentRoadTest.splitLineGeoJsonLayer != null) {
        IntelligentRoadTest.splitLineGeoJsonLayer.clearLayers();
    }
    IntelligentRoadTest.continueLineData = result;
    if (IntelligentRoadTest.ContinueLineGeoJsonLayer != null) {
        IntelligentRoadTest.ContinueLineGeoJsonLayer.clearLayers();
        IntelligentRoadTest.ContinueLineGeoJsonLayer = null;
    }

    //这里要改一下高铁的实现
    /*if(IntelligentRoadTest.index == 8){ //如果是高铁，需要修改一下
        var lineList = IntelligentRoadTest.parseGeoJsonForBaidu(result);
        //判断是否要按照点集合设置级别
        if(IntelligentRoadTest.roadIndex != 2 && IntelligentRoadTest.isNeedCenterAndZoom == true){
            var pointArr = [];
            for(var m = 0; m < lineList.length; m++){
                pointArr = pointArr.concat(lineList[m].pointArr);
            }
            IntelligentRoadTest.setRightCenterAndZoom(pointArr);
        }
        IntelligentRoadTest.roadMapContinueListResult = lineList;
        IntelligentRoadTest.drawRailWayContinue(lineList);
        return ;
    }*/
    if (IntelligentRoadTest.ContinueLineGeoJsonLayer == null) {
        IntelligentRoadTest.ContinueLineGeoJsonLayer = L.geoJSON(IntelligentRoadTest.parseContinueLineGeoJson(result), {
            style: function (feature) {
                var setting = {
                    "weight": IntelligentRoadTest.getRoadWeight() * 2.2,
                    "opacity": 0.8,//0.6$('#userSetOpacity').val(),
                    "color": IntelligentRoadTest.continueLineColor,
                };
                return setting;
            },
            filter: function (feature) {
                var isShow = true;
                return isShow;
            }
        });
        IntelligentRoadTest.ContinueLineGeoJsonLayer.on("mouseout", function (e) {
            try {
                IntelligentRoadTest.hideOsmStarEndMk();
                var item = e.layer.feature.properties;
                var id = "";
                if (IntelligentRoadTest.index == 7) {
                    id = "showHighwayListDiv";
                    data = IntelligentRoadTest.highwaySecondListCurrentResult;
                }
                if (IntelligentRoadTest.index == 8) {
                    id = "showRailListDiv";
                    data = IntelligentRoadTest.railSecondListCurrentResult;
                }
                if (IntelligentRoadTest.index == 14) {
                    id = "showCityRoadListDiv";
                    data = IntelligentRoadTest.cityRoadSecondListCurrentResult;
                }
                for (var i = 0; i < data.length; i++) {
                    $("#" + id + " li").eq(i).css('background-color', '#fffff');
                    $("#" + id + " .numSpan").eq(i).css("background", "url(" + "../js/IntelligentRoadTest/images/bg_num.png" + ")");
                    if (item.object_id == data[i].line_id) {
                        $("#" + id + " li").eq(i).css('background-color', '#fffff');
                        $("#" + id + " .numSpan").eq(i).css("background", "url(" + "../js/IntelligentRoadTest/images/bg_num.png" + ")");

                        $("#" + id + " li").eq(i).bind('mouseout', {"id": id, "index": i}, function (event) {
                            $("#" + id + " li").eq(event.data.index).css('background-color', '#fffff');
                            $("#" + id + " .numSpan").eq(event.data.index).css("background", "url(" + "../js/IntelligentRoadTest/images/bg_num.png" + ")");
                        });
                        $("#" + id + " .numSpan").eq(i).bind('mouseover', {"id": id, "index": i}, function (event) {
                            $("#" + id + " li").eq(event.data.index).css('background-color', '#f7f7f7');
                            $("#" + id + " .numSpan").eq(event.data.index).css("background", "url(" + "../js/IntelligentRoadTest/images/maker2.png" + ")");
                        });
                    }
                }
            } catch (e) {
            }
        });
        IntelligentRoadTest.ContinueLineGeoJsonLayer.on("mouseover", function (e) {
            //连片触摸
            var item = e.layer.feature.properties;
            var pointStar = new
            L.latLng(item.latitude_min, item.longitude_min);
            var pointEnd = new L.latLng(item.latitude_max, item.longitude_max);
//            //起始marke
            if (IntelligentRoadTest.roadIndex != 1) {
                var starIcon = L.icon({iconUrl: "../js/IntelligentRoadTest/images/starMK.png", iconSize: [21, 33]})
                IntelligentRoadTest.makerStar = L.marker(pointStar, {
                    icon: starIcon
                });
                IntelligentRoadTest.makerStar.addTo(IntelligentRoadTest.OsmMap);
                //结束marke
                var endIcon = L.icon({iconUrl: "../js/IntelligentRoadTest/images/endMK.png", iconSize: [21, 33]})
                IntelligentRoadTest.makerEnd = L.marker(pointEnd, {
                    icon: endIcon
                });
                IntelligentRoadTest.makerEnd.addTo(IntelligentRoadTest.OsmMap);
                $('.leaflet-marker-icon').css('margin-top', '-34px');
            }

            var id = "";
            var data = [];
            if (IntelligentRoadTest.index == 7) {
                id = "showHighwayListDiv";
                data = IntelligentRoadTest.highwaySecondListCurrentResult;
            }
            if (IntelligentRoadTest.index == 8) {
                id = "showRailListDiv";
                data = IntelligentRoadTest.railSecondListCurrentResult;
            }
            if (IntelligentRoadTest.index == 14) {
                id = "showCityRoadListDiv";
                data = IntelligentRoadTest.cityRoadSecondListCurrentResult;
            }
            try {
                for (var i = 0; i < data.length; i++) {
                    if (item.object_id == data[i].line_id) {
                        $("#" + id + " li").eq(i).css('background-color', '#f7f7f7');
                        $("#" + id + " .numSpan").eq(i).css("background", "url(" + "../js/IntelligentRoadTest/images/maker2.png" + ")");
                    }
                }
            } catch (e) {
                // TODO: handle exception
            }
        });
        IntelligentRoadTest.ContinueLineGeoJsonLayer.on("click", function (e) {
//        	console.log(e);
            var setCenterPoint = e.latlng;
            var lineProperties = e.layer.feature.properties;
            var road_id = lineProperties.road_id;
            var line_type = lineProperties.type;
            var city_id = lineProperties.city_id;
            var road_name = lineProperties.road_name;
            var contain_ids = lineProperties.contain_ids;
            var city = lineProperties.city;
            var object_id = lineProperties.object_id;
            if (IntelligentRoadTest.geoJsonLayer) {
                IntelligentRoadTest.geoJsonLayer.clearLayers();
            }
            // IntelligentRoadTest.lineClick(lineProperties);
            if (IntelligentRoadTest.roadIndex == 2) {
                //连片线段点击时，查询该连片线段所有20米线段  并进入对应弱连片线段的详情页
                IntelligentRoadTest.loadContinueLineMeterData(IntelligentRoadTest.day, line_type, city_id, road_id, contain_ids);
                //查看该高速的连片线段列表
                IntelligentRoadTest.getRoadCompleteMessageByLineID(object_id, IntelligentRoadTest.day, line_type, city, road_id, true);
                IntelligentRoadTest.getRoad30DayData(road_id, object_id, line_type, true); //查询历史30天的数据
            } else if (IntelligentRoadTest.roadIndex == 1) {
                //一层列表的时候，需要进入该高速下所有弱连片线段的列表，即进入第二层列表
                if (line_type == 1) {
                    IntelligentRoadTest.goHighwaySecondList();

                    var highwayData = crossfilter(IntelligentRoadTest.continueLineHighWayDataChe); //创建一个crossfilter对象
                    var highwayDataLineIDDim = highwayData.dimension(function (d) {
                        return d.road_id;
                    }); //按照线路id创建一个维度
                    var finalLineData = highwayDataLineIDDim.filter(road_id);
                    IntelligentRoadTest.highwaySecondListMapResult = finalLineData.top(highwayData.size());
                    IntelligentRoadTest.showContinueLineData(IntelligentRoadTest.highwaySecondListMapResult);
                    $('#highwayName').text(road_name);
                } else if (line_type == 2) {
                    IntelligentRoadTest.goRailSecondList();

                    var railwayData = crossfilter(IntelligentRoadTest.continueLineRailWayDataChe); //创建一个crossfilter对象
                    var railwayDataLineIDDim = railwayData.dimension(function (d) {
                        return d.road_id;
                    }); //按照线路id创建一个维度
                    var finalLineData = railwayDataLineIDDim.filter(road_id);
                    IntelligentRoadTest.railwaySecondListMapResult = finalLineData.top(railwayData.size());
                    IntelligentRoadTest.showContinueLineData(IntelligentRoadTest.railwaySecondListMapResult);
                    $('#railName').text(road_name);
                } else if (line_type == 3) {
                    IntelligentRoadTest.goCityRoadSecondList();

                    var cityRoadData = crossfilter(IntelligentRoadTest.continueLineCityRoadDataChe); //创建一个crossfilter对象
                    var cityRoadDataLineIDDim = cityRoadData.dimension(function (d) {
                        return d.road_id;
                    }); //按照线路id创建一个维度
                    var finalLineData = cityRoadDataLineIDDim.filter(road_id);
                    IntelligentRoadTest.cityRoadSecondListMapResult = finalLineData.top(cityRoadData.size());
                    IntelligentRoadTest.showContinueLineData(IntelligentRoadTest.cityRoadSecondListMapResult);
                    $('#cityRoadName').text(road_name);
                }
                IntelligentRoadTest.getRoadSecondListData(road_id, city, IntelligentRoadTest.day,
                    line_type, true, true);
            }

        });

        IntelligentRoadTest.ContinueLineGeoJsonLayer.addTo(IntelligentRoadTest.OsmMap);
        IntelligentRoadTest.ContinueLineGeoJsonLayer.setZIndex(110);
    } else {
        IntelligentRoadTest.ContinueLineGeoJsonLayer.clearLayers();
        IntelligentRoadTest.ContinueLineGeoJsonLayer.addData(IntelligentRoadTest.parseContinueLineGeoJson(result));
        IntelligentRoadTest.ContinueLineGeoJsonLayer.setZIndex(110);
    }

}

IntelligentRoadTest.loadContinueLineMeterData = function IntelligentRoadTest_loadContinueLineMeterData(day, line_type, city_id, road_id, contain_ids) {
    //DAY_`LINE_LEVEL`_`LINE_TYPE`_`CITY_ID`_`ROAD_ID`_`LINE_ID`
    if (contain_ids == null) {
        return;
    }
    var idArr = contain_ids.split(",");
    var prefixKey = day + "_20_" + line_type + "_" + city_id + "_" + road_id + "_";
    var rowArray = new Array();

    for (var i = 0; i < idArr.length; i++) {
        var row = prefixKey + idArr[i];
        rowArray.push(row);
    }
    var keyListStr = rowArray.join(",");
    var sqlList = [];
    var columnList = "i:a1,i:a2,i:a3,i:a4,i:a5,i:a6,i:a7,i:a8,i:a9,i:a10,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a17,i:a18,i:a19,i:a20,i:a21,i:a22,i:a23,i:a24,i:a25";
    // var columnList = "i:a1,i:a2,i:a6,i:a7,i:a8,i:a9,i:a19";
    // IntelligentRoadTest.lineTypeIndex = lineTypeIndex;//类型下标 0--覆盖质量 1--上行速率 2--下行速率
    // IntelligentRoadTest.lineThresholds = lineThresholds;//线段图例
//     if(IntelligentRoadTest.lineTypeIndex==0){
//     	columnList = "i:a1,i:a2,i:a3,i:a5,i:a6,i:a7,i:a8,i:a9,i:a19,i:a20,i:a21,i:a22,i:a23,i:a24,i:a25";
//     }else if(IntelligentRoadTest.lineTypeIndex==1){// 上行
//     	columnList = "i:a1,i:a2,i:a3,i:a5,i:a19,i:a20,i:a21,i:a22,i:a23,i:a24,i:a25,i:a33";
//     }else if(IntelligentRoadTest.lineTypeIndex==2){// 下行
//     	columnList = "i:a1,i:a2,i:a3,i:a5,i:a19,i:a20,i:a21,i:a22,i:a23,i:a24,i:a25,i:a34";
//     }
    var sqlTempleteId = "IntelligentRoadTestAnalysisV2_104_HighwaySectorsIdx";
    if(IntelligentRoadTest.index == 8){ //高铁
        sqlTempleteId = "IntelligentRoadTestAnalysisV5_roadSectorsIdx";
    }
    var list = [sqlTempleteId, "KEYLIST:" + keyListStr, "COLUMNLIST:" + columnList];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.showContinueLineMeterData];
    var database = [7];
    progressbarTwo.submitSql(sqlList, funcList, database);

}
//呈现连片的20米线段数据
IntelligentRoadTest.showContinueLineMeterData = function IntelligentRoadTest_showContinueLineMeterData(data) {
    var result = callBackChangeData(data);
    if (IntelligentRoadTest.lineMessageOverlay) {
        IntelligentRoadTest.lineMessageOverlay.remove();
    }
    if (IntelligentRoadTest.splitLineGeoJsonLayer != null) {
        IntelligentRoadTest.splitLineGeoJsonLayer.clearLayers();
    }
    //为什么要将对象设置为null，因为连片需要区分是整段还是20米，整段的连片数据从mysql中获取，而20米的数据从hbase中来，转换方法不一样
    if (IntelligentRoadTest.ContinueLineGeoJsonLayer != null) {
        IntelligentRoadTest.ContinueLineGeoJsonLayer.clearLayers();
        IntelligentRoadTest.ContinueLineGeoJsonLayer = null;
    }
    if(IntelligentRoadTest.index == 8){ //更换为百度地图的呈现方式
        var lineList = IntelligentRoadTest.parseGeoJsonForBaidu(result);
        //console.log(lineList);
        var points = [];
        for(var i = 0; i < lineList.length; i++){
            points = points.concat(lineList[i].pointArr);
        }
        IntelligentRoadTest.setRightCenterAndZoom(points); //定位并显示适当的级别
        IntelligentRoadTest.railContinueResult = lineList;
        IntelligentRoadTest.osmColorLegen();
        //IntelligentRoadTest.drawRailWayContinue(lineList);
        return ;
    }
    if (IntelligentRoadTest.ContinueLineGeoJsonLayer == null) {
        IntelligentRoadTest.ContinueLineGeoJsonLayer = L.geoJSON(IntelligentRoadTest.parseGeoJson(result), {
            style: function (feature) {
                var setting = {
                    "weight": IntelligentRoadTest.getRoadWeight() * 2.2,
                    "opacity": 0.8,//0.6$('#userSetOpacity').val(),
                    "color": IntelligentRoadTest.continueLineColor,
                };
                return setting;
            },
            filter: function (feature) {
                var isShow = true;
                return isShow;
            }
        });

        IntelligentRoadTest.ContinueLineGeoJsonLayer.on("mouseover", function (e) {
            //20米连片触摸
            var item = e.layer.feature.properties;
            var pointStar = new L.latLng(item.latitude_min, item.longitude_min);
            var pointEnd = new L.latLng(item.latitude_max, item.longitude_max);
//              //起始marke
            var starIcon = L.icon({iconUrl: "../js/IntelligentRoadTest/images/starMK.png", iconSize: [21, 33]})
            IntelligentRoadTest.makerStar = L.marker(pointStar, {
                icon: starIcon
            });
            IntelligentRoadTest.makerStar.addTo(IntelligentRoadTest.OsmMap);
            //结束marke
            var endIcon = L.icon({iconUrl: "../js/IntelligentRoadTest/images/endMK.png", iconSize: [21, 33]})
            IntelligentRoadTest.makerEnd = L.marker(pointEnd, {
                icon: endIcon
            });
            IntelligentRoadTest.makerEnd.addTo(IntelligentRoadTest.OsmMap);
            $('.leaflet-marker-icon').css('margin-top', '-34px');
        });
        IntelligentRoadTest.ContinueLineGeoJsonLayer.on("mouseout", function (e) {
            try {
                IntelligentRoadTest.hideOsmStarEndMk();
            } catch (e) {
                // TODO: handle exception
            }
        });
        IntelligentRoadTest.ContinueLineGeoJsonLayer.on("click", function (e) {
            var itemProperties = e.layer.feature.properties;
            //DAY_`LINE_LEVEL`_`LINE_TYPE`_`CITY_ID`_`ROAD_ID`_`LINE_ID`
            var rowkey = itemProperties.rowkey.split("_");
            //进入20米详情页
            var day = rowkey[0];
            var level = rowkey[1];
            var line_type = rowkey[2];
            var city_id = rowkey[3];
            var road_id = rowkey[4];
            var line_id = rowkey[5];
            var obj = e.layer.feature.properties;
            var gis_dataArr = e.layer.feature.geometry.coordinates; //线段的点的数组
            if (gis_dataArr.length == 2) {
                obj.longitude_mid = (gis_dataArr[0][0] + gis_dataArr[1][0]) / 2;
                obj.latitude_mid = (gis_dataArr[0][1] + gis_dataArr[1][1]) / 2;
            } else if (gis_dataArr.length > 2) {
                var index = Math.ceil(gis_dataArr.length / 2);
                obj.longitude_mid = gis_dataArr[index][0];
                obj.latitude_mid = gis_dataArr[index][1];
            }
            var elDivID = "";
            if (line_type == "1") { //高速
                elDivID = "#showHighwayGridCompleteMessage";
                IntelligentRoadTest.goHighwayGridCompleteMessage();
            } else if (line_type == "2") { // 高铁
                elDivID = "#showRailGridCompleteMessage";
                IntelligentRoadTest.goRailGridCompleteMessage();
            } else if (line_type == "3") { // 市政路
                elDivID = "#showCityRoadGridCompleteMessage";
                IntelligentRoadTest.goCityRoadGridCompleteMessage();
            }
            IntelligentRoadTest.show20MCompleteMessage(line_id, obj, elDivID, line_type);
            IntelligentRoadTest.getSeventDayDataByLineId(rowkey);
            IntelligentRoadTest.drawDetailsMk(obj, 1);
        });


        IntelligentRoadTest.ContinueLineGeoJsonLayer.addTo(IntelligentRoadTest.OsmMap);
        IntelligentRoadTest.ContinueLineGeoJsonLayer.setZIndex(110);
    } else {
        IntelligentRoadTest.ContinueLineGeoJsonLayer.clearLayers();
        IntelligentRoadTest.ContinueLineGeoJsonLayer.addData(IntelligentRoadTest.parseGeoJson(result));
        IntelligentRoadTest.ContinueLineGeoJsonLayer.setZIndex(110);
    }
    //这种情况是连片线段时切换不同日期，需要显示统计信息
    if (IntelligentRoadTest.index == null && IntelligentRoadTest.isScreenCompared
        && IntelligentRoadTestScreenCompared.messageObject.day != IntelligentRoadTest.day
        && (IntelligentRoadTestScreenCompared.messageObject.type == 'highway'
            || IntelligentRoadTestScreenCompared.messageObject.type == 'railway'
            || IntelligentRoadTestScreenCompared.messageObject.type == 'cityRoad')) {
        var rsrp_sum = 0;
        var rsrp_cnt = 0;
        var cnt_105 = 0;
        for (var i = 0; i < result.length; i++) {
            rsrp_sum += parseFloat(result[i]['i:a4']);
            rsrp_cnt += parseFloat(result[i]['i:a5']);
            cnt_105 += parseFloat(result[i]['i:a16']);
        }
        var line_rsrpAvg = null;
        var line_cover = null;
        if (rsrp_sum != 0 && rsrp_cnt != 0) {
            line_rsrpAvg = parseFloat(rsrp_sum / rsrp_cnt).toFixed(2);
        }
        if (rsrp_cnt != 0 && cnt_105 != 0) {
            line_cover = parseFloat(cnt_105 / rsrp_cnt * 100).toFixed(2);
        }
        var textArr = [];
        var rsrpMessage = {key: "RSRP", val: line_rsrpAvg};
        var coverMessage = {key: "覆盖率", val: line_cover + "%"};
        textArr.push(rsrpMessage);
        textArr.push(coverMessage);
        var lng = IntelligentRoadTestScreenCompared.messageObject.item.longitude_mid;
        var lat = IntelligentRoadTestScreenCompared.messageObject.item.latitude_mid;
        var point = new L.latLng(lat, lng);
        var tip = document.createElement("div");
        $(tip).html("");
        var ul = document.createElement("ul");
        tip.appendChild(ul);
        for (var i = 0; i < textArr.length; i++) {
//	    	  if(textArr[i].val!=null){
            var li = document.createElement("li");
            var span1 = document.createElement("span");
            $(span1).html(textArr[i].key + ":");
            $(span1).css("display", "inline-block");
            $(span1).css("width", "63px");
            var span2 = document.createElement("span");
            $(span2).html(textArr[i].val);
            li.appendChild(span1);
            li.appendChild(span2);
            ul.appendChild(li);
//	    	  }
        }

        IntelligentRoadTest.lineMessageOverlay = new L.marker(point, {
            icon: L.divIcon({html: $(tip).html(), className: "circleTipLeft circleTipLeftLineMessageWidthAndHeight"}),
        });
        IntelligentRoadTest.lineMessageOverlay.addTo(IntelligentRoadTest.OsmMap);
    }

}


IntelligentRoadTest.parseContinueLineGeoJson = function (result) {
    var features = [];

    result.forEach(function (row) {
        var obj = {
            "type": "Feature",
            "properties": {
                "object_id": row["object_id"],
                "road_id": row["road_id"],
                "road_name": row["road_name"],
                "line_id": row["line_id"],
                "city_id": row["city_id"],
                "type": row["type"],
                "contain_ids": row["contain_ids"],
                "city": row["city"],
                "longitude_min": row["longitude_min"],//复用弱区字段，存放的是gps经纬度
                "latitude_min": row["latitude_min"],
                "longitude_mid": row["longitude_mid"],
                "latitude_mid": row["latitude_mid"],
                "longitude_max": row["longitude_max"],
                "latitude_max": row["latitude_max"],
            },
            "geometry": wellknown.parse(row["gis_data"])
        };
        features.push(obj);
    });

    return features;
}


//增加查询某条高速所有500米分段数据，并呈现
IntelligentRoadTest.loadSplitLineByRoadId = function (road_id, city, type_id, level) {
    var sqlList = [];
    var list = ["IntelligentRoadTestAnalysisV2_103_HighwayAllLine", "CITYNAME:" + city, "ROAD_TYPE_ID:" + type_id, "LEVEL:" + level, "ROAD_ID:" + road_id];
    if(type_id == 2){ //高铁需要更换模板 模板主要修改了表名
        var cityCondition = " and city_name = '" + city + "'";
        if(city == "全省"){
            cityCondition = "";
        }
        list = ["IntelligentRoadTestAnalysisV5_getRoadAllLine", "CITYCONDITION:" + cityCondition, "ROAD_TYPE_ID:" + type_id, "LEVEL:" + level, "ROAD_ID:" + road_id];
    }
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealSplitLineData];
    var database = [6];
    progressbarTwo.submitSql(sqlList, funcList, database, [[city, type_id, road_id, level]]);
}

//处理某条高速500米分段数据，并查询hbase获取业务数据
IntelligentRoadTest.dealSplitLineData = function IntelligentRoadTest_dealSplitLineData(data, params) {
    var result = callBackChangeData(data);

    var city = params[0];
    var type_id = params[1];
    var road_id = params[2];
    var level = params[3];
    var city_id = noceUtil.city_LATN_ID[city];
    /*if(IntelligentRoadTest.isSuiDao == true){
        if(type_id == 2){
            type_id = 21;
        }
    }*/
    //DAY_`LINE_LEVEL`_`LINE_TYPE`_`CITY_ID`_`ROAD_ID`_`LINE_ID`

    var rowArray = new Array();
    for (var i = 0; i < result.length; i++) {
        var keyPrefix = IntelligentRoadTest.day + "_" + level + "_" + type_id + "_" + result[i].city_id + "_" + road_id + "_";
        var row = keyPrefix + result[i].id;
        rowArray.push(row);
    }

    if (rowArray.length == 0) {
        if (IntelligentRoadTest.lineMessageOverlay) {
            IntelligentRoadTest.lineMessageOverlay.remove();
        }

        if (IntelligentRoadTest.splitLineGeoJsonLayer) {
            IntelligentRoadTest.splitLineGeoJsonLayer.clearLayers();
        }
        return;
    }

    var keyListStr = rowArray.join(",");
    var sqlList = [];
    var columnList = "i:a1,i:a2,i:a3,i:a6,i:a7,i:a8,i:a9,i:a19,i:a20,i:a21,i:a22,i:a23,i:a24,i:a25";
// IntelligentRoadTest.lineTypeIndex = lineTypeIndex;//类型下标 0--覆盖质量 1--上行速率 2--下行速率
// IntelligentRoadTest.lineThresholds = lineThresholds;//线段图例
    if (IntelligentRoadTest.lineTypeIndex == 0) {
        columnList = "i:a1,i:a2,i:a3,i:a5,i:a6,i:a7,i:a8,i:a9,i:a19,i:a20,i:a21,i:a22,i:a23,i:a24,i:a25";
    } else if (IntelligentRoadTest.lineTypeIndex == 1) {// 上行
        columnList = "i:a1,i:a2,i:a3,i:a5,i:a19,i:a20,i:a21,i:a22,i:a23,i:a24,i:a25,i:a33";
    } else if (IntelligentRoadTest.lineTypeIndex == 2) {// 下行
        columnList = "i:a1,i:a2,i:a3,i:a5,i:a19,i:a20,i:a21,i:a22,i:a23,i:a24,i:a25,i:a34";
    }
    var sqlTempleteId = "IntelligentRoadTestAnalysisV2_104_HighwaySectorsIdx";
    if(IntelligentRoadTest.index == 8){ //高铁
        sqlTempleteId = "IntelligentRoadTestAnalysisV5_roadSectorsIdx";
    }
    var list = [sqlTempleteId, "KEYLIST:" + keyListStr, "COLUMNLIST:" + columnList];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.showSplitLineDataForChe];
    var database = [7];
    progressbarTwo.submitSql(sqlList, funcList, database);

}

IntelligentRoadTest.showSplitLineDataForChe = function IntelligentRoadTest_showSplitLineDataForChe(data){
    if (IntelligentRoadTest.roadIndex == 2) {
        IntelligentRoadTest.splitLineData = data;
    }
    if (IntelligentRoadTest.roadIndex == 3) {
        IntelligentRoadTest.splitLineDataThree = data;
    }
    IntelligentRoadTest.osmColorLegen();
}


//500米或者20米分段数据查询结束后将分段数据呈现在地图上
IntelligentRoadTest.showSplitLineData = function IntelligentRoadTest_showSplitLineData(data, type) {
    var result = data;
    if (type == undefined) {
        if (IntelligentRoadTest.roadIndex == 2) {
            IntelligentRoadTest.splitLineData = data;
        }
        if (IntelligentRoadTest.roadIndex == 3) {
            IntelligentRoadTest.splitLineDataThree = data;
        }
        result = callBackChangeData(data);
    }

    if (IntelligentRoadTest.lineMessageOverlay) {
        IntelligentRoadTest.lineMessageOverlay.remove();
    }

    if (IntelligentRoadTest.geoJsonLayer) {
        IntelligentRoadTest.geoJsonLayer.clearLayers();
    }

    if (IntelligentRoadTest.ContinueLineGeoJsonLayer) {
        IntelligentRoadTest.ContinueLineGeoJsonLayer.clearLayers();
    }
    //如果是高铁
    //这里还需要增加判断是高速、高铁、市政路、还是工单状态查看
    if(IntelligentRoadTest.index == 8 ){
        IntelligentRoadTest.drawRailWay(IntelligentRoadTest.parseGeoJsonForBaidu(result));
        return;
    }
    
    
    if (IntelligentRoadTest.splitLineGeoJsonLayer == null) {
        IntelligentRoadTest.splitLineGeoJsonLayer = L.geoJSON(IntelligentRoadTest.parseGeoJson(result), {
            style: function (feature) {
                var setting = {
                    "weight": 7,//IntelligentRoadTest.getRoadWeight(),
                    "opacity": 0.8,//$('#userSetOpacity').val(),
                };
                var item = feature.properties;
                setting.color = IntelligentRoadTest.getColorStrByLevel(item.level);
                return setting;
            },
            filter: function (feature) {
                var isShow = true;
                if (IntelligentRoadTest.lineTypeIndex == 0) {
                    for (var i = 0; i < IntelligentRoadTest.colorBarArrLine.length; i++) {
                        if (IntelligentRoadTest.colorBarArrLine[i] == feature.properties.level) {
                            isShow = false;
                        }
                    }
                } else if (IntelligentRoadTest.lineTypeIndex == 1) {
                    for (var i = 0; i < IntelligentRoadTest.colorBarArrSHLine.length; i++) {
                        if (IntelligentRoadTest.colorBarArrSHLine[i] == feature.properties.level) {
                            isShow = false;
                        }
                    }
                } else if (IntelligentRoadTest.lineTypeIndex == 2) {
                    for (var i = 0; i < IntelligentRoadTest.colorBarArrXHLine.length; i++) {
                        if (IntelligentRoadTest.colorBarArrXHLine[i] == feature.properties.level) {
                            isShow = false;
                        }
                    }
                }
                if (feature.properties.level == null) {
                    isShow = false;
                }
                return isShow;
            }
        });

        IntelligentRoadTest.splitLineGeoJsonLayer.on("click", function (e) {
            //500米分段点击，进入详情页，并加载20米线段
            var plyPerp = e.layer.feature.properties;
            IntelligentRoadTest.lineClick(plyPerp);

            var itemProperties = e.layer.feature.properties;
            //DAY_`LINE_LEVEL`_`LINE_TYPE`_`CITY_ID`_`ROAD_ID`_`LINE_ID`
            var rowkey = itemProperties.rowkey.split("_");
            var day = rowkey[0];
            var level = rowkey[1];
            var line_type = rowkey[2];
            var city_id = rowkey[3];
            var road_id = rowkey[4];
            var line_id = rowkey[5];
            if (level == 500) {
                //查询对应
                IntelligentRoadTest.loadSplitLineSmallLine(road_id, line_id, city_id, day, line_type);
            } else if (level == 20) {
                //进入20米详情页
                var line_id = rowkey[5];
                var obj = e.layer.feature.properties;
                var gis_dataArr = e.layer.feature.geometry.coordinates; //线段的点的数组
                if (gis_dataArr.length == 2) {
                    obj.longitude_mid = (gis_dataArr[0][0] + gis_dataArr[1][0]) / 2;
                    obj.latitude_mid = (gis_dataArr[0][1] + gis_dataArr[1][1]) / 2;
                } else if (gis_dataArr.length > 2) {
                    var index = Math.ceil(gis_dataArr.length / 2);
                    obj.longitude_mid = gis_dataArr[index][0];
                    obj.latitude_mid = gis_dataArr[index][1];
                }
                var elDivID = "";
                if (line_type == "1") { //高速
                    elDivID = "#showHighwayGridCompleteMessage";
                    IntelligentRoadTest.goHighwayGridCompleteMessage();
                } else if (line_type == "2") { // 高铁
                    elDivID = "#showRailGridCompleteMessage";
                    IntelligentRoadTest.goRailGridCompleteMessage();
                } else if (line_type == "3") { // 市政路
                    elDivID = "#showCityRoadGridCompleteMessage";
                    IntelligentRoadTest.goCityRoadGridCompleteMessage();
                }
                IntelligentRoadTest.show20MCompleteMessage(line_id, obj, elDivID, line_type);
                IntelligentRoadTest.getSeventDayDataByLineId(rowkey);
                IntelligentRoadTest.drawDetailsMk(obj, 1);
            }
        });
        IntelligentRoadTest.splitLineGeoJsonLayer.on("mouseover", function (e) {
            // $('#lblTip').html("");
            var plyPerp = e.layer.feature.properties;
            IntelligentRoadTest.lineMouseover(plyPerp);
            if (IntelligentRoadTest.roadIndex == 3 || IntelligentRoadTest.roadIndex == 4) {
                IntelligentRoadTest.hideOsmStarEndMk();
                var pointStar = new L.latLng(plyPerp.latitude_min, plyPerp.longitude_min);
                var pointEnd = new L.latLng(plyPerp.latitude_max, plyPerp.longitude_max);
                var starIcon = L.icon({iconUrl: "../js/IntelligentRoadTest/images/starMK.png", iconSize: [21, 33]})
                IntelligentRoadTest.makerStar = L.marker(pointStar, {
                    icon: starIcon
                });
                IntelligentRoadTest.makerStar.addTo(IntelligentRoadTest.OsmMap);
                //结束marke
                var endIcon = L.icon({iconUrl: "../js/IntelligentRoadTest/images/endMK.png", iconSize: [21, 33]})
                IntelligentRoadTest.makerEnd = L.marker(pointEnd, {
                    icon: endIcon
                });
                IntelligentRoadTest.makerEnd.addTo(IntelligentRoadTest.OsmMap);
                $('.leaflet-marker-icon').css('margin-top', '-34px');
            }

        });
        IntelligentRoadTest.splitLineGeoJsonLayer.on("mouseout", function (e) {
            // $('#lblTip').html("");
//        		 IntelligentRoadTest.hideOsmStarEndMk();
        });

        IntelligentRoadTest.splitLineGeoJsonLayer.addTo(IntelligentRoadTest.OsmMap);
        IntelligentRoadTest.splitLineGeoJsonLayer.setZIndex(111);
    } else {
        IntelligentRoadTest.splitLineGeoJsonLayer.clearLayers();
        IntelligentRoadTest.splitLineGeoJsonLayer.addData(IntelligentRoadTest.parseGeoJson(result));
        IntelligentRoadTest.splitLineGeoJsonLayer.setZIndex(111);
    }

}

//加载500米分段的全部20米线段数据
IntelligentRoadTest.loadSplitLineSmallLine = function (road_id, line_id, city_id, day, type_id) {
    var sqlList = [];
    // var columnList = "i:a1,i:a2,i:a3,i:a4,i:a5,i:a6,i:a7,i:a8,i:a9,i:a10,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a17,i:a18,i:a19";
    // var columnList = "i:a1,i:a2,i:a6,i:a7,i:a8,i:a9,i:a19";
    var list = ["IntelligentRoadTestAnalysisV2_103_Highway20meter", "SECTID:" + line_id];
    if(type_id == 2){ //高铁需要更换模板，模板主要修改表名
        var list = ["IntelligentRoadTestAnalysisV5_getRoad20meter", "SECTID:" + line_id];
    }
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.dealSplitLineSmallLine];
    var database = [3];
    progressbarTwo.submitSql(sqlList, funcList, database, [[road_id, line_id, city_id, day, type_id]]);
}
//对500米分段的20米基础数据进行处理，拼接好key再进行查询
IntelligentRoadTest.dealSplitLineSmallLine = function IntelligentRoadTest_dealSplitLineSmallLine(data, params) {
    var road_id = params[0];
    var line_id = params[1];
    var city_id = params[2];
    var day = params[3];
    var type_id = params[4];

    var result = callBackChangeData(data);
    if(result.length == 0){
        console.log("映射表中没有该条路20米线段的ID");
        IntelligentRoadTest.showSuiDaoSmallLine([]);
        return ;
    }
    ////DAY_`LINE_LEVEL`_`LINE_TYPE`_`CITY_ID`_`ROAD_ID`_`LINE_ID`
    //var prefixKey = day + "_20_" + type_id + "_" + city_id + "_" + road_id + "_";
    var rowArray = new Array();
    for (var i = 0; i < result.length; i++) {
        var lineArr = result[i]["sect_20_id"].split(",");
        for (var j = 0; j < lineArr.length; j++) {
            if(IntelligentRoadTest.index != 8){//高速和市政路的表没有city_id
                result[i].city_id = city_id;
            }
            var row = day + "_20_" + type_id + "_" + result[i].city_id + "_" + road_id + "_" + lineArr[j];
            rowArray.push(row);
        }

    }

    var keyListStr = rowArray.join(",");
    var sqlList = [];
    var columnList = "i:a1,i:a2,i:a3,i:a4,i:a5,i:a6,i:a7,i:a8,i:a9,i:a10,i:a11,i:a12,i:a13,i:a14,i:a15,i:a16,i:a17,i:a18,i:a19,i:a20,i:a21,i:a22,i:a23,i:a24,i:a25";
    // var columnList = "i:a1,i:a2,i:a6,i:a7,i:a8,i:a9,i:a19";
    // IntelligentRoadTest.lineTypeIndex = lineTypeIndex;//类型下标 0--覆盖质量 1--上行速率 2--下行速率
    // IntelligentRoadTest.lineThresholds = lineThresholds;//线段图例
    if (IntelligentRoadTest.lineTypeIndex == 0) {
        columnList = "i:a1,i:a2,i:a3,i:a5,i:a6,i:a7,i:a8,i:a9,i:a19,i:a20,i:a21,i:a22,i:a23,i:a24,i:a25";
    } else if (IntelligentRoadTest.lineTypeIndex == 1) {// 上行
        columnList = "i:a1,i:a2,i:a3,i:a5,i:a19,i:a20,i:a21,i:a22,i:a23,i:a24,i:a25,i:a33";
    } else if (IntelligentRoadTest.lineTypeIndex == 2) {// 下行
        columnList = "i:a1,i:a2,i:a3,i:a5,i:a19,i:a20,i:a21,i:a22,i:a23,i:a24,i:a25,i:a34";
    }
    var sqlTempleteId = "IntelligentRoadTestAnalysisV2_104_HighwaySectorsIdx";
    if(IntelligentRoadTest.index == 8){ //高铁
        sqlTempleteId = "IntelligentRoadTestAnalysisV5_roadSectorsIdx";
    }
    var list = [sqlTempleteId, "KEYLIST:" + keyListStr, "COLUMNLIST:" + columnList];
    sqlList.push(list);
    var funcList = [IntelligentRoadTest.showSplitLineDataForChe];
    if(IntelligentRoadTest.roadStatus == 1 || IntelligentRoadTest.roadStatus == 2){ //如果是隧道和非隧道，更换回调函数，以避免改动原来的代码
        funcList = [IntelligentRoadTest.showSuiDaoLineDataForChe];
    }
    var database = [7];
    progressbarTwo.submitSql(sqlList, funcList, database);

}


//---------------------------------
/**********************************
 * @funcname IntelligentRoadTest.showStarEndMarke
 * @funcdesc 高速高铁市政路鼠标移入一级或二级列表时高亮地图数据并显示起始结束点
 * @param {object} item (input optional)
 *列表数据
 * @return {null}
 * @author 郑文彬
 * @create 20180412
 ***********************************/
IntelligentRoadTest.showStarEndMarke = function IntelligentRoadTest_showStarEndMarke(item) {
    try {
        IntelligentRoadTest.lineHighlight.clearLayers();
        IntelligentRoadTest.hideOsmStarEndMk();
    } catch (e) {
    }
    var osmLineData = [];
    if (IntelligentRoadTest.roadIndex != 1) {
        osmLineData = IntelligentRoadTest.getLineData(item.road_id, item.line_id);

    } else {
        osmLineData = IntelligentRoadTest.getLineData(item.road_id);
    }
    if (IntelligentRoadTest.highwayVM != null && IntelligentRoadTest.highwayVM.type && IntelligentRoadTest.index == 7 && IntelligentRoadTest.roadIndex != 1) {
        osmLineData = [];
    } else if (IntelligentRoadTest.railVM != null && IntelligentRoadTest.railVM.type && IntelligentRoadTest.index == 8 && IntelligentRoadTest.roadIndex != 1) {
        osmLineData = [];
    } else if (IntelligentRoadTest.cityRoadVM != null && IntelligentRoadTest.cityRoadVM.type && IntelligentRoadTest.index == 14 && IntelligentRoadTest.roadIndex != 1) {
        osmLineData = [];
    } else {
//		 IntelligentRoadTest.lineHighlightFunc(osmLineData);
    }
    IntelligentRoadTest.lineHighlightFunc(osmLineData);
    if (item.latitude_min == undefined || item.longitude_min == undefined || item.latitude_max == undefined || item.longitude_max == undefined) {
        return;
    }
    var pointStar = new L.latLng(item.latitude_min, item.longitude_min);
    var pointEnd = new L.latLng(item.latitude_max, item.longitude_max);
    IntelligentRoadTest.drawOsmPolygon(item.longitude_max, item.latitude_max, item.longitude_min, item.latitude_min);
//    //起始marke
    if (IntelligentRoadTest.roadIndex != 1) {
        var starIcon = L.icon({iconUrl: "../js/IntelligentRoadTest/images/starMK.png", iconSize: [21, 33]})
        IntelligentRoadTest.makerStar = L.marker(pointStar, {
            icon: starIcon
        });
        IntelligentRoadTest.makerStar.addTo(IntelligentRoadTest.OsmMap);
        //结束marke
        var endIcon = L.icon({iconUrl: "../js/IntelligentRoadTest/images/endMK.png", iconSize: [21, 33]})
        IntelligentRoadTest.makerEnd = L.marker(pointEnd, {
            icon: endIcon
        });
        IntelligentRoadTest.makerEnd.addTo(IntelligentRoadTest.OsmMap);
        $('.leaflet-marker-icon').css('margin-top', '-34px');
    }
}
//扇区点击方法
$("#sector").click(function () {
    var isClick = $(this).prop('checked');
    if (isClick == true) {
        IntelligentRoadTest.isClickSector = true;
    } else {
        IntelligentRoadTest.isClickSector = false;
    }
})

/**********************************
 * @funcname IntelligentRoadTest.resetLayerByIndex
 * @funcdesc 重置系统图层的选项配置
 * @param {Number} index (input optional) 场景、图层的下标
 * @return {null}
 * @create 20171017
 ***********************************/
IntelligentRoadTest.resetLayerByIndex = function (index) {
    //全部去掉选中，除了栅格
    $('.layerTabCon table').each(function () {
        var id = $(this).find('input[name="layer"]').attr("id");
        if ($(this).find('input[name="layer"]').is(":checked")) {//如果是选中的，去掉选中
            if (id != "grid") {
                $("#" + id).click();
                $('input[name="sceneRadio"]:checked').siblings('label').css("color", "");
                $('input[name="sceneRadio"]:checked').attr("checked", false);
            }
        }
    });
    IntelligentRoadTest.isShowHighwayLine = false;
    IntelligentRoadTest.isShowRailwayLine = false;
    IntelligentRoadTest.isShowCityRoadLine = false;

    // 0弱区（弱覆盖区）1关注 2工单 3扇区 4dt 5骨头 6宏扇区 7高速 8高铁 9高密度 10高校
    // 11高流量商务 12美景 13框选骨头区域 14市政路 15地铁 16战狼 17农贸 18美食 19场馆
    // 20中小学 21城中村 22自然村 23工厂 24上行低速率区 25下行低速率区 26MOD3干扰区 27重叠覆盖区 28越区覆盖区 29用户抱怨
    //30MOD3干扰弱区 32越区覆盖弱区 31重叠覆盖弱区
    if (index == 3) {
        if ($('.layerTabCon input#sector:checkbox[value=' + index + ']').is(':checked') == false) {
            $('.layerTabCon input#sector:checkbox[value=' + index + ']').click();
        }
        $('#sector').parents('table').siblings('table').show();
        $('#sector').parents('table').siblings('table').filter('.lineTable').hide();

        //4组选项只要任一块中出现全部未勾选，则系统自动将这块中的全部选项勾中
        if(!$('input[name="type-sector"]:checked').length){
            $('input[name="type-sector"]').prop("checked",true);
            $('input[name="type-sector"]').siblings('label').css("color","#3285FF");
        }
        if(!$('input[name="band-sector"]:checked').length){
            $('input[name="band-sector"]').prop("checked",true);
            $('input[name="band-sector"]').siblings('label').css("color","#3285FF");
        }
        if(!$('input[name="factory-sector"]:checked').length){
            $('input[name="factory-sector"]').prop("checked",true);
            $('input[name="factory-sector"]').siblings('label').css("color","#3285FF");
        }
        if(!$('input[name="cov-sector"]:checked').length){
            $('input[name="cov-sector"]').prop("checked",true);
            $('input[name="cov-sector"]').siblings('label').css("color","#3285FF");
        }
    } else if (index == 7 || index == 8 || index == 14 || index == 15) {//index == 2 || index == 4 || index == 6 ||
        $('#sector').parents('table').siblings('table').hide();
        $('#sector').parents('table').siblings('table').filter('.lineTable').show();
        switch (index) {
            case 7:
                IntelligentRoadTest.isShowHighwayLine = true;
                break;
            case 8:
                IntelligentRoadTest.isShowRailwayLine = true;
                break;
            case 14:
                IntelligentRoadTest.isShowCityRoadLine = true;
                break;
        }
//    	 IntelligentRoadTest.legendGrid();

    } else if (index == 1 || index == 5 || index == 9 || index == 10 || index == 11 || index == 12 || index == 16 || index == 17 || index == 18 || index == 19 || index == 20 || index == 21 || index == 22 || index == 23) {
        if ($("#scene").is(':checked') == false) {
            $("#scene").click();
        }
        $('input:radio[name="sceneRadio"][value=' + index + ']').click();
        $('#sector').parents('table').siblings('table').show();
        $('#sector').parents('table').siblings('table').filter('.lineTable').hide();
    } else if (index == 0 || index == 24 || index == 25 || index == 26 || index == 27 || index == 28 || index == 30 || index == 31 || index == 32) {
        if (!$("input#poorArea").is(':checked')) {
            $("input#poorArea").click();
        }
        //全部去掉选中
        $('input[name="type-quyu"]:checked').siblings('label').css("color", "");
        $('input[name="type-quyu"]:checked').prop("checked", false);
        /*$('input[name="type-quyu"]').each(function (){
            if($(this).is(":checked")) {//如果是选中的，去掉选中
                $(this).click();
            }
        });*/
        $('input[name="type-quyu"][value="' + index + '"]').click();
        if (index == 0) {
            $("input#fgzl-type").click();
            $("input#fgzl-type").siblings('label').css("color", "#3285FF");
        } else if (index == 24) {
            $("input#sxsl-type").click();
            $("input#sxsl-type").siblings('label').css("color", "#3285FF");
        } else if (index == 25) {
            $("input#xxsl-type").click();
            $("input#xxsl-type").siblings('label').css("color", "#3285FF");
        } else if (index == 26 || index == 30) {
            $("input#mod3-type").click();
            $("input#mod3-type").siblings('label').css("color", "#3285FF");
        } else if (index == 27 || index == 31) {
            $("input#cdfg-type").click();
            $("input#cdfg-type").siblings('label').css("color", "#3285FF");
        } else if (index == 32) {
            $("input#yqfg-type").click();
            $("input#yqfg-type").siblings('label').css("color", "#3285FF");

            /*$("input#fgzl-type").click();
            $("input#fgzl-type").siblings('label').css("color","#3285FF");*/
            $("input#agps-mr").click();
        } else if (index == 28) {
            $("input#fgzl-type").click();
            $("input#fgzl-type").siblings('label').css("color", "#3285FF");
            $("input#agps-mr").click();
        }
        $('#sector').parents('table').siblings('table').show();
        $('#sector').parents('table').siblings('table').filter('.lineTable').hide();
    } else if (index == 29) {
        if ($("#userComplain").is(':checked') == false) {
            $("#userComplain").click();
        }
        $('#sector').parents('table').siblings('table').show();
        $('#sector').parents('table').siblings('table').filter('.lineTable').hide();
        IntelligentRoadTestSystemLayerV3.initUC();
    }
    IntelligentRoadTest.submitLayersData();
}
//---------------------------------

/**********************************
 * @funcname updateSearchTmpTxt
 * @funcdesc 更新updateSearchTmpTxt
 * @param {datatype} nameOfParameter (input/output optional)
 descriptionOfParameter
 * @return {datatype}
 * @author laijunbao
 * @create 2018/01/17 0017 11:31
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.updateSearchTmpTxt = function IntelligentRoadTest_updateSearchTmpTxt() {
    var mapCity = $.trim($("#mapCity").text());
    var mapDistrict = $.trim($("#mapDistrict").text());
    if(!isNull(IntelligentRoadTest.countryPermission_common)){ //区县用户不要执行下去了
        return ;
    }
    //地市用户如果右上角的地市不是所属地市，不要更新IntelligentRoadTest.searchTxtTmp
    if(IntelligentRoadTest.cityPermission_common != "全省" && IntelligentRoadTest.cityPermission_common != mapCity){
        return;
    }
    /*var serchTxtTimer1 = setInterval(function () {
        if (mapCity != "" && mapDistrict != "") {
            IntelligentRoadTest.searchTxtTmp[0] = mapCity;
            IntelligentRoadTest.searchTxtTmp[1] = mapDistrict;
            clearInterval(serchTxtTimer1);
        }
    }, 500);*/
}
/**********************************
 * @funcname updateSearchTmpTxtByRowdiv
 * @funcdesc 进入列表后更新同步按钮信息，防止拖动地图没有点击同步按钮的情况
 * @param {datatype} nameOfParameter (input/output optional)
 descriptionOfParameter
 * @return {datatype}
 * @author laijunbao
 * @create 2018/02/02 0002 11:22
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.updateSearchTmpTxtByRowdiv = function IntelligentRoadTest_updateSearchTmpTxtByRowdiv() {
    IntelligentRoadTest.searchTxtTmp[0] = IntelligentRoadTest.city;
    IntelligentRoadTest.searchTxtTmp[1] = IntelligentRoadTest.district;
}
/**********************************
 * @funcname IntelligentRoadTest.lineMouseover
 * @funcdesc osm地图鼠标移入
 * @param {object} plyPerp (input/output optional)
 包含过滤条件的
 * @return null
 * @author 郑文彬
 * @create 2018/02/02 0002 11:22
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.lineMouseover = function IntelligentRoadTest_lineMouseover(plyPerp) {
    var sp = plyPerp.rowkey.split('_');
    var liIndex = 0;
    var osmLineData = null;
    if (IntelligentRoadTest.roadIndex != 1) {
        osmLineData = IntelligentRoadTest.getLineData(sp[sp.length - 2], sp[sp.length - 1]);
    } else {
        osmLineData = IntelligentRoadTest.getLineData(sp[sp.length - 2]);
    }
    if (IntelligentRoadTest.highwayVM != null && IntelligentRoadTest.highwayVM.type && IntelligentRoadTest.index == 7 && IntelligentRoadTest.roadIndex != 1) {
        osmLineData = [];
    } else if (IntelligentRoadTest.railVM != null && IntelligentRoadTest.railVM.type && IntelligentRoadTest.index == 8 && IntelligentRoadTest.roadIndex != 1) {
        osmLineData = [];
    } else if (IntelligentRoadTest.cityRoadVM != null && IntelligentRoadTest.cityRoadVM.type && IntelligentRoadTest.index == 14 && IntelligentRoadTest.roadIndex != 1) {
        osmLineData = [];
    } else {
        //		 IntelligentRoadTest.lineHighlightFunc(osmLineData);
    }
    IntelligentRoadTest.lineHighlightFunc(osmLineData);
    var data = null;
    var id = "";
    if (IntelligentRoadTest.index == 7) {
        data = IntelligentRoadTest.highwayFirstListCurrentResult;
        id = "showHighwayDiv";
        if (IntelligentRoadTest.roadIndex == 2) {
            data = IntelligentRoadTest.highwaySecondListCurrentResult;
            id = "showHighwayListDiv";
        }
    }
    if (IntelligentRoadTest.index == 8) {
        data = IntelligentRoadTest.railFirstListCurrentResult;//500米高铁第一层列表查询数据的缓存
        id = "showRailDiv";
        if (IntelligentRoadTest.roadIndex == 2) {
            data = IntelligentRoadTest.railSecondListCurrentResult;
            id = "showRailListDiv";
        }
    }
    if (IntelligentRoadTest.index == 14) {
        data = IntelligentRoadTest.cityRoadFirstListCurrentResult;//500米市政路第一层列表查询数据的缓存
        id = "showCityRoadDiv";
        if (IntelligentRoadTest.roadIndex == 2) {
            data = IntelligentRoadTest.cityRoadSecondListCurrentResult;
            id = "showCityRoadListDiv";
        }
    }
    if (data != null) {
        for (var i = 0; i < data.length; i++) {
            var sp = plyPerp.rowkey.split('_');
            if (IntelligentRoadTest.second) {
                if (sp[sp.length - 1] == data[i].line_id) {
                    IntelligentRoadTest.showStarEndMarke(data[i])
                    liIndex = i;
                }
            } else {
                if (sp[sp.length - 2] == data[i].road_id) {
                    IntelligentRoadTest.showStarEndMarke(data[i]);
                    liIndex = i;
                }
            }
        }
    }
    //滚动
//	IntelligentRoadTest.scrollTop(liIndex,id,data,20);
    try {
        if (IntelligentRoadTest.roadIndex == 2) {
            $("#" + id + " li :contains('" + sp[sp.length - 1] + "')").parent().eq(0).css('background-color', '#f7f7f7');
            $("#" + id + " li :contains('" + sp[sp.length - 1] + "')").prev().css("background", "url(" + "../js/IntelligentRoadTest/images/maker2.png" + ")");
        } else {
            $("#" + id + " li :contains('" + plyPerp.road_name + "')").parent().eq(0).css('background-color', '#f7f7f7');
            $("#" + id + " li :contains('" + plyPerp.road_name + "')").prev().css("background", "url(" + "../js/IntelligentRoadTest/images/maker2.png" + ")");
        }
    } catch (e) {
        // TODO: handle exception
    }

}
/**********************************
 * @funcname IntelligentRoadTest.lineMouseout
 * @funcdesc osm地图鼠标移出清除地图和列表高亮
 * @param {String} result (input optional)
 *需要高亮的数据
 * @return {null}
 * @author 郑文彬
 * @create 20180412
 ***********************************/
IntelligentRoadTest.lineMouseout = function IntelligentRoadTest_lineMouseout(plyPerp) {
    IntelligentRoadTest.lineHighlight.clearLayers();
    var sp = plyPerp.rowkey.split('_');
    try {
        IntelligentRoadTest.hideOsmStarEndMk();
    } catch (e) {
    }
    var data = null;
    var id = "";
    if (IntelligentRoadTest.index == 7) {
        id = "showHighwayDiv";
        if (IntelligentRoadTest.second) {
            id = "showHighwayListDiv";
        }
    }
    if (IntelligentRoadTest.index == 8) {
        id = "showRailDiv";
        if (IntelligentRoadTest.second) {
            id = "showRailListDiv";
        }
    }
    if (IntelligentRoadTest.index == 14) {
        id = "showCityRoadDiv";
        if (IntelligentRoadTest.second) {
            id = "showCityRoadListDiv";
        }
    }
    if (IntelligentRoadTest.roadIndex == 2 || IntelligentRoadTest.roadIndex == 1) {//
        plyPerp.road_name = sp[sp.length - 1];
        for (var i = 0; i < 20; i++) {
            $("#" + id + " li").eq(i).css('background-color', '#fffff');
            $("#" + id + " .numSpan").eq(i).css("background", "url(" + "../js/IntelligentRoadTest/images/bg_num.png" + ")");
        }
        $("#" + id + " li :contains('" + plyPerp.road_name + "')").parent().eq(0).css('background-color', '#fffff');
        $("#" + id + " li :contains('" + plyPerp.road_name + "')").prev().css("background", "url(" + "../js/IntelligentRoadTest/images/bg_num.png" + ")");

        $("#" + id + " li :contains('" + plyPerp.road_name + "')").parent().eq(0).bind('mouseout', {
            "id": id,
            "plyPerp": plyPerp
        }, function (event) {
            $("#" + event.data.id + " li :contains('" + event.data.plyPerp.road_name + "')").parent().eq(0).css('background-color', '#fffff');
            $("#" + event.data.id + " li :contains('" + event.data.plyPerp.road_name + "')").prev().css("background", "url(" + "../js/IntelligentRoadTest/images/bg_num.png" + ")");
        });
        $("#" + id + " li :contains('" + plyPerp.road_name + "')").parent().eq(0).bind('mouseover', {
            "id": id,
            "plyPerp": plyPerp
        }, function (event) {
            $("#" + event.data.id + " li :contains('" + event.data.plyPerp.road_name + "')").parent().eq(0).css('background-color', '#f7f7f7');
            $("#" + event.data.id + " li :contains('" + event.data.plyPerp.road_name + "')").prev().css("background", "url(" + "../js/IntelligentRoadTest/images/maker2.png" + ")");
        });
    }
}
/**********************************
 * @funcname IntelligentRoadTest.lineClick
 * @funcdesc osm点击一级地图时进入二级地图，或者二级地图点击时候进入三级地图
 * @param {String} null (input optional)
 *
 * @return {null}
 * @author 郑文彬
 * @create 20180412
 ***********************************/
IntelligentRoadTest.lineClick = function IntelligentRoadTest_lineClick(plyPerp) {
    var sp = plyPerp.rowkey.split('_');
    var road_id = sp[sp.length - 2];
    var line_id = sp[sp.length - 1];
//	    if(IntelligentRoadTest.isLp){
//	    	line_id=plyPerp.rowkey;
//	    }
    var data = null;
    var id = "";
    if (IntelligentRoadTest.index == 7) {
        data = IntelligentRoadTest.highwayFirstListResult;
        if (IntelligentRoadTest.roadIndex == 2) {
            data = IntelligentRoadTest.highwaySecondListResult;
        }
    }
    if (IntelligentRoadTest.index == 8) {
        data = IntelligentRoadTest.railFirstListResult;//500米高铁第一层列表查询数据的缓存
        if (IntelligentRoadTest.roadIndex == 2) {
            data = IntelligentRoadTest.railSecondListResult;
        }
    }
    if (IntelligentRoadTest.index == 14) {
        data = IntelligentRoadTest.cityRoadFirstListResult;//500米市政路第一层列表查询数据的缓存
        if (IntelligentRoadTest.roadIndex == 2) {
            data = IntelligentRoadTest.cityRoadSecondListCurrentResult;
        }
    }
    if (!data) {
        return;
    }

    for (var i = 0; i < data.length; i++) {
        if (IntelligentRoadTest.roadIndex == 2) {
            if (data[i].line_id == line_id) {
                if (IntelligentRoadTest.index == 7) {
                    IntelligentRoadTest.highwaySecondVM.showMessage(data[i]);
                }
                if (IntelligentRoadTest.index == 8) {
                    IntelligentRoadTest.railSecondVM.showMessage(data[i]);
                }
                if (IntelligentRoadTest.index == 14) {
                    IntelligentRoadTest.cityRoadSecondVM.showMessage(data[i]);
                }
                IntelligentRoadTest.osmMkData = data[i];
                IntelligentRoadTest.drawDetailsMk(data[i], 1);
                try {
                    IntelligentRoadTest.splitLineGeoJsonLayer.clearLayers();
                } catch (e) {
                    // TODO: handle exception
                }
                IntelligentRoadTest.loadSplitLineSmallLine(road_id, line_id, sp[3], sp[0], sp[2]);
            }
        } else if (IntelligentRoadTest.roadIndex == 1) {
            if (data[i].road_id == road_id) {
                if (IntelligentRoadTest.index == 7) {
                    IntelligentRoadTest.highwayVM.goNextList(data[i]);
                }
                if (IntelligentRoadTest.index == 8) {
                    IntelligentRoadTest.railVM.goNextList(data[i]);
                }
                if (IntelligentRoadTest.index == 14) {
                    IntelligentRoadTest.cityRoadVM.goNextList(data[i]);
                }
                if (IntelligentRoadTest.osmCenterPoint != null) {
                    IntelligentRoadTest.OsmMap.setView(IntelligentRoadTest.osmCenterPoint, 13);
                    IntelligentRoadTest.osmCenterPoint = null;
                }
            }
        }
    }
}
/**********************************
 * @funcname IntelligentRoadTest.lineHighlightFunc
 * @funcdesc osm地图高亮方法
 * @param {String} result (input optional)
 *需要高亮的数据
 * @return {null}
 * @author 郑文彬
 * @create 20180412
 ***********************************/
IntelligentRoadTest.lineHighlightFunc = function IntelligentRoadTest_lineHighlightFunc(result) {
    try {
        IntelligentRoadTest.lineHighlight.clearLayers();
    } catch (e) {
        // TODO: handle exception
    }
    IntelligentRoadTest.lineHighlight = L.geoJSON(IntelligentRoadTest.parseGeoJson(result), {
        style: function (feature) {
            var setting = {
                "weight": IntelligentRoadTest.getRoadWeight() * 3,
                "opacity": 0.8,//$('#userSetOpacity').val(),
            };
            var item = feature.properties;
            setting.color = IntelligentRoadTest.getColorStrByLevel(item.level);
            return setting;
        },
        filter: function (feature) {
            var isShow = true;
            if (IntelligentRoadTest.lineTypeIndex == 0) {
                for (var i = 0; i < IntelligentRoadTest.colorBarArrLine.length; i++) {
                    if (IntelligentRoadTest.colorBarArrLine[i] == feature.properties.level) {
                        isShow = false;
                    }
                }
            } else if (IntelligentRoadTest.lineTypeIndex == 1) {
                for (var i = 0; i < IntelligentRoadTest.colorBarArrSHLine.length; i++) {
                    if (IntelligentRoadTest.colorBarArrSHLine[i] == feature.properties.level) {
                        isShow = false;
                    }
                }
            } else if (IntelligentRoadTest.lineTypeIndex == 2) {
                for (var i = 0; i < IntelligentRoadTest.colorBarArrXHLine.length; i++) {
                    if (IntelligentRoadTest.colorBarArrXHLine[i] == feature.properties.level) {
                        isShow = false;
                    }
                }
            }
            if (feature.properties.level == null) {
                isShow = false;
            }
            return isShow;
        }
    });
    IntelligentRoadTest.lineHighlight.addTo(IntelligentRoadTest.OsmMap);
    IntelligentRoadTest.lineHighlight.setZIndex(1000);
    IntelligentRoadTest.lineHighlight.on("click", function (e) {
        IntelligentRoadTest.isFromAlarmList = false; //将是否是从工单列表跳转的属性设置为false
        //将是否是从工单列表跳转到详情页的变量设置为false
        IntelligentRoadTest.isShowAlarmInfoMessage = false;
        var setCenterPoint = e.latlng;
        IntelligentRoadTest.osmCenterPoint = e.latlng;
        var lineProperties = e.layer.feature.properties;
        var rowkey = lineProperties.rowkey.split("_");//DAY_`LINE_LEVEL`_`LINE_TYPE`_`CITY_ID`_`ROAD_ID`_`LINE_ID`
        var line_level = rowkey[1];
        var line_type = rowkey[2];//根据类型加载对应的线段数据
        /*if(line_level==1000){//1000级别的时候，加载500米线段列表

            }else if(line_level == 500){//500级别的时候，加载500米线段详细信息

            }else*/
        if (line_level == 20) {//20级别的时候，跳转到20详细信息
            //显示20米详细信息
            var line_id = rowkey[5];
            var obj = e.layer.feature.properties;
            var gis_dataArr = e.layer.feature.geometry.coordinates; //线段的点的数组
            if (gis_dataArr.length == 2) {
                obj.longitude_mid = (gis_dataArr[0][0] + gis_dataArr[1][0]) / 2;
                obj.latitude_mid = (gis_dataArr[0][1] + gis_dataArr[1][1]) / 2;
            } else if (gis_dataArr.length > 2) {
                var index = Math.ceil(gis_dataArr.length / 2);
                obj.longitude_mid = gis_dataArr[index][0];
                obj.latitude_mid = gis_dataArr[index][1];
            }
            var elDivID = "";
            if (line_type == "1") { //高速
                elDivID = "#showHighwayGridCompleteMessage";
                IntelligentRoadTest.goHighwayGridCompleteMessage();
            } else if (line_type == "2") { // 高铁
                elDivID = "#showRailGridCompleteMessage";
                IntelligentRoadTest.goRailGridCompleteMessage();
            } else if (line_type == "3") { // 市政路
                elDivID = "#showCityRoadGridCompleteMessage";
                IntelligentRoadTest.goCityRoadGridCompleteMessage();
            }
            //20米线段点击事件
            IntelligentRoadTest.show20MCompleteMessage(line_id, obj, elDivID, line_type);
            IntelligentRoadTest.getSeventDayDataByLineId(rowkey);
            IntelligentRoadTest.drawDetailsMk(obj, 1);
        } else {
            IntelligentRoadTest.lineClick(lineProperties);
        }
    });
//        IntelligentRoadTest.lineHighlight.on("mouseover",function(e){
//            $('#lblTip').html("");
//            var plyPerp = e.layer.feature.properties;
//            var x = e.containerPoint.x;
//            var y = e.containerPoint.y;
//            var infoStr = "";
//            infoStr +="地市："+plyPerp.city+"<br>";
//            infoStr +="高速名称："+plyPerp.road_name+"<br>";
//            infoStr +="RSRP:"+parseFloat(plyPerp.dx_line_rsrp_avg).toFixed(2)+"<br>";
//            infoStr +="覆盖率:"+parseFloat(plyPerp.dx_line_rsrp_cov).toFixed(2)+"<br>";
////            $('#lblTip').html(infoStr);
////            $('#tip').css("left", x + 15 + "px").css("top", y + 20 + "px").show();
//            IntelligentRoadTest.lineMouseover(plyPerp);
//
//        });
    IntelligentRoadTest.lineHighlight.on("mouseout", function (e) {
        $('#tip').hide();
        var plyPerp = e.layer.feature.properties;
        IntelligentRoadTest.lineMouseout(plyPerp);
        IntelligentRoadTest.hideOsmStarEndMk();
    });
//    }else {
//        IntelligentRoadTest.lineHighlight.clearLayers();
//        try {
//        	 IntelligentRoadTest.lineHighlight.addData(IntelligentRoadTest.parseGeoJson(result));
//		} catch (e) {
//		}
//    }
//    IntelligentRoadTest.lineHighlight.setZIndex(1100);
    //测试
//    $('#lblTip').html("");
//   var tipdataAll= IntelligentRoadTest.parseGeoJson(result)
//   var tipdata=tipdataAll[0].properties;
////    var plyPerp = e.layer.feature.properties;
////    var x = e.containerPoint.x;
////    var y = e.containerPoint.y;
//    var infoStr = "";
//    infoStr +="地市："+tipdata.city+"<br>";
//    infoStr +="高速名称："+tipdata.road_name+"<br>";
//    infoStr +="RSRP:"+parseFloat(tipdata.dx_line_rsrp_avg).toFixed(2)+"<br>";
//    infoStr +="覆盖率:"+parseFloat(tipdata.dx_line_rsrp_cov).toFixed(2)+"<br>";
//    $('#lblTip').html(infoStr);
////    $('#tip').css("left", x + 15 + "px").css("top", y + 20 + "px").show();
}
IntelligentRoadTest.hideOsmStarEndMk = function hideOsmStarEndMk() {
    try {
        IntelligentRoadTest.makerStar.remove();
        IntelligentRoadTest.makerEnd.remove();
    } catch (e) {
        // TODO: handle exception
    }
}
/**********************************
 * @funcname IntelligentRoadTest.drawDetailsMk
 * @funcdesc osm地图进入详情页面时记住起始结束点
 * @param {String} null (input optional)
 *
 * @return {null}
 * @author 郑文彬
 * @create 20180412
 ***********************************/
IntelligentRoadTest.drawDetailsMk = function IntelligentRoadTest_drawDetailsMk(item, index) {
    if (index == undefined) {
        return;
    }
    IntelligentRoadTest.hideDetailsMk();
    var pointStar = new L.latLng(item.latitude_min, item.longitude_min);
    var pointEnd = new L.latLng(item.latitude_max, item.longitude_max);
    IntelligentRoadTest.drawOsmPolygon(item.longitude_max, item.latitude_max, item.longitude_min, item.latitude_min);
//   //起始marke
    var starIcon = L.icon({iconUrl: "../js/IntelligentRoadTest/images/starMK.png", iconSize: [21, 33]})
    IntelligentRoadTest.makerStarDetails = L.marker(pointStar, {
        icon: starIcon
    });
    IntelligentRoadTest.makerStarDetails.addTo(IntelligentRoadTest.OsmMap);
    //结束marke
    var endIcon = L.icon({iconUrl: "../js/IntelligentRoadTest/images/endMK.png", iconSize: [21, 33]})
    IntelligentRoadTest.makerEndDetails = L.marker(pointEnd, {
        icon: endIcon
    });
    IntelligentRoadTest.makerEndDetails.addTo(IntelligentRoadTest.OsmMap);
    $('.leaflet-marker-icon').css('margin-top', '-34px');
}
//清楚osm地图详情页的起始结束点
IntelligentRoadTest.hideDetailsMk = function IntelligentRoadTest_hideDetailsMk() {
    try {
        IntelligentRoadTest.makerStarDetails.remove();
        IntelligentRoadTest.makerEndDetails.remove();
    } catch (e) {
    }
}
/**********************************
 * @funcname IntelligentRoadTest.getLineData
 * @funcdesc 根据road_id或者line_id获取osm地图线段数据
 * @param {string} road_id (input/output optional)
 raod_id
 * @param {string} line_id (input/output optional)
 line_id
 * @return null
 * @author 郑文彬
 * @create 2018/02/02 0002 11:22
 * @modifier
 * @modify
 ***********************************/
IntelligentRoadTest.getLineData = function IntelligentRoadTest_getLineData(road_id, line_id) {
    var data = [];
    if (IntelligentRoadTest.osmLineData == null || IntelligentRoadTest.osmLineData == undefined || IntelligentRoadTest.index == null) {
        return;
    }
    var filter = IntelligentRoadTest.osmLineData;
    if (IntelligentRoadTest.roadIndex == 2) {
        filter = callBackChangeData(IntelligentRoadTest.splitLineData);
    } else if (IntelligentRoadTest.roadIndex == 3 || IntelligentRoadTest.roadIndex == 4) {
        filter = callBackChangeData(IntelligentRoadTest.splitLineDataThree);
    }
    for (var i = 0; i < filter.length; i++) {
        var sp = filter[i].rowkey.split('_');

        if (line_id == undefined) {
            if (sp[sp.length - 2] == road_id) {
                data.push(filter[i]);
            }
        } else {
            if (sp[sp.length - 1] == line_id) {
                data.push(filter[i]);
            }
        }

    }
    return data;
}
IntelligentRoadTest.drawOsmPolygon = function IntelligentRoadTest_drawOsmPolygon(maxlng, maxlat, minlng, minlat) {
    var latlngs = [[minlat, minlng], [minlat, maxlng], [maxlat, maxlng], [maxlat, minlng]];
//	IntelligentRoadTest.osmPolygon = L.polygon(latlngs, {color: '#e6e600',fill:false}).addTo(IntelligentRoadTest.OsmMap);
    //将地图放大到多边形
//	IntelligentRoadTest.OsmMap.fitBounds(IntelligentRoadTest.osmPolygon.getBounds());
//	IntelligentRoadTest.OsmMap.setView(new L.latLng((minlat+maxlat)/2,(minlng+maxlng)/2));
}
IntelligentRoadTest.scrollTop = function IntelligentRoadTest_scrollTop(index, tableId, tableData, pageSize) {
    var top = 0;
    var id;
    var lineHeight = $("#" + tableId + " ul li").eq(0).height() + 10;//每列的高度
    var pageNum = Math.ceil(index / 20);
    index = index - (pageNum - 1) * 20 - 1;
    top = (index - 1) * lineHeight;
    $("#" + tableId + "").scrollTop(top);
    if (IntelligentRoadTest.index == 7) {
        id = "showHighwayDiv";
        var page = $("#highwayPage").val(pageNum);
        IntelligentRoadTest.highwayVM.gotoPage();
        if (IntelligentRoadTest.second) {
            id = "showHighwayListDiv";
            var page = $("#highwayPage").val(pageNum);
            IntelligentRoadTest.highwayVM.gotoPage();
        }
    }
    if (IntelligentRoadTest.index == 8) {
        id = "showRailDiv";
        if (IntelligentRoadTest.second) {
            id = "showRailListDiv";
        }
    }
    if (IntelligentRoadTest.index == 14) {
        id = "showCityRoadDiv";
        if (IntelligentRoadTest.second) {
            id = "showCityRoadListDiv";
        }
    }

    $("#" + id + " li").eq(index + 1).css('background-color', '#f7f7f7');
    $("#" + id + " li .numSpan").eq(index + 1).css("background", "url(" + "../js/IntelligentRoadTest/images/maker2.png" + ")");
//	if(IntelligentRoadTest.second){
//		$("#"+id+" li :contains('"+sp[sp.length-1]+"')").parent().css('background-color', '#f7f7f7');
//		$("#"+id+" li :contains('"+sp[sp.length-1]+"')").prev().css("background","url("+"../js/IntelligentRoadTest/images/maker2.png"+")");
//	}else{
//		$("#"+id+" li :contains('"+plyPerp.road_name+"')").parent().css('background-color', '#f7f7f7');
//		$("#"+id+" li :contains('"+plyPerp.road_name+"')").prev().css("background","url("+"../js/IntelligentRoadTest/images/maker2.png"+")");
//	}
}
/**********************************
 * @funcname IntelligentRoadTest.showSectorPoorLine
 * @funcdesc 显示附近弱区或者覆盖弱区连线
 * @param {object} item (input optional)
 *列表详情页数据
 * @param {String} type (input optional)
 *1为覆盖弱区 2为附近弱区
 * @return {null}
 * @author 郑文彬
 * @create 20180412
 ***********************************/
IntelligentRoadTest.showSectorPoorLine = function IntelligentRoadTest_showSectorPoorLine(item, type) {
    var point = new BMap.Point(item.longitude_mid_baidu, item.latitude_mid_baidu);
    var color = IntelligentRoadTest.nrTop5LineColor;
    IntelligentRoadTest.hideSectorPoorLine(type);
    if (type == 2) {
        color = IntelligentRoadTest.mrTop5LineColor;
    }
    var index = 0;
    for (var i = 0; i < IntelligentRoadTest.polygonList.length; i++) {
        var polyline = {};
        if (type == 1) {
            if (IntelligentRoadTest.polygonList[i].type.indexOf('fgrq') != -1) {
                var point_2 = new BMap.Point(IntelligentRoadTest.polygonList[i].longitude_mid_baidu, IntelligentRoadTest.polygonList[i].latitude_mid_baidu);
                polyline = new BMap.Polyline([
                    point,
                    point_2
                ], {strokeColor: color, strokeOpacity: 1});
//			    polyline.setStrokeWeight(1+i);
                polyline.setStrokeWeight(2);
                index = index + 1;
                IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.polygonList[i]);
            }
        } else {
            if (IntelligentRoadTest.polygonList[i].type.indexOf('fjrq') != -1) {
                var point_2 = new BMap.Point(IntelligentRoadTest.polygonList[i].longitude_mid_baidu, IntelligentRoadTest.polygonList[i].latitude_mid_baidu);
                polyline = new BMap.Polyline([
                    point,
                    point_2
                ], {strokeColor: color, strokeOpacity: 1});
//			    polyline.setStrokeWeight(5-i);
                polyline.setStrokeWeight(2);
                index = index + 1;
                IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.polygonList[i]);
            }
        }
        var clas = IntelligentRoadTest.polygonList[i].type;
        try {
            polyline.i = index - 1;
            polyline.color = color;
            polyline.clas = clas;
            polyline.polygonIndex = i;
            polyline.addEventListener("mouseout", function (e) {
                this.setStrokeColor(this.color);
                IntelligentRoadTest.polygonList[this.polygonIndex].setStrokeColor("#fbbe62");
                $('.listDiv :visible .' + this.clas + '  li').eq(this.i).css("background", "#fff");
            });
            polyline.addEventListener("mouseover", function (e) {
                this.setStrokeColor('#9ffb13');
                IntelligentRoadTest.polygonList[this.polygonIndex].setStrokeColor('#9ffb13');
                $('.listDiv :visible .' + this.clas + '  li').eq(this.i).css("background", "#f4f4f4");
            });

            $('.listDiv :visible .' + clas + '  li').eq(index - 1).bind('mouseout', polyline, function (event) {
                $(this).css("background", "#fff");
                event.data.setStrokeColor(event.data.color);
            });
            $('.listDiv :visible .' + clas + '  li').eq(index - 1).bind('mouseover', polyline, function (event) {
                event.data.setStrokeColor('#9ffb13');
                $(this).css("background", "#f4f4f4");
            });
            if (type == 1) {
                IntelligentRoadTest.sectorPoorline.cover.push(polyline);
            } else {
                IntelligentRoadTest.sectorPoorline.nearby.push(polyline);
            }
            IntelligentRoadTest.map.addOverlay(polyline);
        } catch (e) {
            // TODO: handle exception
        }
    }
}
/**********************************
 * @funcname IntelligentRoadTest.hideSectorPoorLine
 * @funcdesc 隐藏附近弱区或者覆盖弱区
 * @param {String} type (input optional)
 *1为覆盖弱区 2为附近弱区
 * @return {null}
 * @author 郑文彬
 * @create 20180412
 ***********************************/
IntelligentRoadTest.hideSectorPoorLine = function IntelligentRoadTest_hideSectorPoorLine(type) {
    var list = [];
    if (type == 1) {
        list = IntelligentRoadTest.sectorPoorline.cover;
    } else if (type == 2) {
        list = IntelligentRoadTest.sectorPoorline.nearby;
    } else {
        list = IntelligentRoadTest.sectorPoorline.cover;
        for (var i = 0; i < list.length; i++) {
            IntelligentRoadTest.map.removeOverlay(list[i]);
        }
        list = IntelligentRoadTest.sectorPoorline.nearby;
        for (var i = 0; i < list.length; i++) {
            IntelligentRoadTest.map.removeOverlay(list[i]);
        }
    }
    for (var i = 0; i < list.length; i++) {
        IntelligentRoadTest.map.removeOverlay(list[i]);
    }
    if (type == 1) {
        IntelligentRoadTest.sectorPoorline.cover = [];
    } else if (type == 2) {
        IntelligentRoadTest.sectorPoorline.nearby = [];
    } else {
        IntelligentRoadTest.sectorPoorline.cover = [];
        IntelligentRoadTest.sectorPoorline.nearby = [];
    }

    //隐藏多边形
    for (var i = 0; i < IntelligentRoadTest.polygonList.length; i++) {
        if (type == 1) {
            if (IntelligentRoadTest.polygonList[i].type == 'fgrq') {
                IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.polygonList[i]);
            }
        } else if (type == 2) {
            if (IntelligentRoadTest.polygonList[i].type.indexOf('fjrq') != -1) {
                IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.polygonList[i]);
            }
        } else {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.polygonList[i]);
        }
    }
}

/**********************************
 * @funcname intelligentRoadTest.removeOsmOverlay
 * @funcdesc 删除osm地图上的所有覆盖物
 * @return {null}
 * @author 郑文彬
 * @create 20180417
 ***********************************/
IntelligentRoadTest.removeOsmOverlay = function IntelligentRoadTest_removeMetorOverlay() {
    try {
        IntelligentRoadTest.osmMkData = null;
//        if(IntelligentRoadTest.lineMessageOverlay){
//        	IntelligentRoadTest.lineMessageOverlay.remove();
//        }
        IntelligentRoadTest.lineHighlight.clearLayers();
        IntelligentRoadTest.geoJsonLayer.clearLayers();
        IntelligentRoadTest.hideDetailsMk();
        IntelligentRoadTest.ContinueLineGeoJsonLayer.clearLayers();
    } catch (e) {
    }
}
/**********************************
 * @funcname intelligentRoadTest.removeMetorOverlay
 * @funcdesc 删除地铁上的所有覆盖物
 * @return {null}
 * @author 郑文彬
 * @create 20180417
 ***********************************/
IntelligentRoadTest.removeMetorOverlay = function IntelligentRoadTest_removeMetorOverlay() {
    try {
        //清除地铁线路图层
        if(IntelligentRoadTest.metroLineUtil != null){
            IntelligentRoadTest.metroLineUtil.clearCanvasLayers();
            IntelligentRoadTest.metroLineUtil.lineDataObject = [];
        }

        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metorMkSatr);
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metorMkEnd);
        IntelligentRoadTest.removeMetorLineStarEndMk();
        for (var i = 0; i < IntelligentRoadTest.metroStationsMarkerOverlay.length; i++) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metroStationsMarkerOverlay[i]);
        }
        for (var i = 0; i < IntelligentRoadTest.metroStationsOverlay.length; i++) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metroStationsOverlay[i]);
        }
        for (var i = 0; i < IntelligentRoadTest.metroStationsSctionOverlay.length; i++) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metroStationsSctionOverlay[i]);
        }
        for (var i = 0; i < IntelligentRoadTest.metroHighlightDataOverlay.length; i++) {
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metroHighlightDataOverlay[i]);
        }

        for(var i=0;i<IntelligentRoadTest.metroPoorLineMarker.length;i++){
            IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metroPoorLineMarker[i]);
        }

        IntelligentRoadTest.metroPoorLineMarker = [];
        IntelligentRoadTest.metroStationsOverlay = [];
        IntelligentRoadTest.metroStationsMarkerOverlay = [];
        IntelligentRoadTest.metroStationsSctionOverlay = [];
        IntelligentRoadTest.metroHighlightDataOverlay = [];

    } catch (e) {
    }
}


var compare = function (prop) {
    return function (obj1, obj2) {
        var val1 = obj1[prop];
        var val2 = obj2[prop];
        if (val1 < val2) {
            return -1;
        } else if (val1 > val2) {
            return 1;
        } else {
            return 0;
        }
    }
}
/**********************************
 * @funcname IntelligentRoadTest.metroColorLegen
 * @funcdesc 地铁页面点击色板过滤数据并根据过滤后的数据重新绘制地铁线段线段
 *
 * @return {null}
 * @author 郑文彬
 * @create 20180417
 ***********************************/
IntelligentRoadTest.metroColorLegen = function IntelligentRoadTest_metorColorLegen(clickLegen) {
    var rgpsfilter = [];
    var colorFilter = IntelligentRoadTest.colorBarArrLine;
    if (IntelligentRoadTest.lineTypeIndex == 1) {
        colorFilter = IntelligentRoadTest.colorBarArrSHLine;
    } else if (IntelligentRoadTest.lineTypeIndex == 2) {
        colorFilter = IntelligentRoadTest.colorBarArrXHLine;
    }

    for(var i=0;i<colorFilter.length;i++){
        rgpsfilter.push({level:colorFilter[i]});
    }

    IntelligentRoadTest.removeMetroPoorLineMarker();
    IntelligentRoadTest.removeMetroArrowMarker();
    var data = [];
    var markerData = [];
    if (IntelligentRoadTest.metroIndex == 1) {
        if (IntelligentRoadTest.allMetroDataObj) {
            var zongHeData = IntelligentRoadTest.allMetroDataObj["2"];//一级地图数据
            for (var line_id_key in zongHeData) {
                for (var station_id_key in zongHeData[line_id_key]) {
                    data = data.concat(zongHeData[line_id_key][station_id_key]);
                    // for (var i = 0; i < zongHeData[line_id_key][station_id_key].length; i++) {
                    //     data.push(zongHeData[line_id_key][station_id_key][i]);
                    // }
                }
            }
        }
        if(IntelligentRoadTest.metro78StationToStationData){
            var stationMarkerResult = IntelligentRoadTest.metro78StationToStationData["2"]
            for(var line_id_key in stationMarkerResult){
                for(var station_to_station_key in stationMarkerResult[line_id_key]){
                    markerData = markerData.concat(stationMarkerResult[line_id_key][station_to_station_key]);
                }
            }
        }

        //只有在第一层的时候才需要显示连片的标注点
        var poorLineResult = [];
        for(var poorLine_key in IntelligentRoadTest.metroPoorLineResult){
            poorLineResult.push(IntelligentRoadTest.metroPoorLineResult[poorLine_key]);
        }
        IntelligentRoadTest.showMetroPoorLineData(poorLineResult);
    } else if (IntelligentRoadTest.metroIndex == 2) {
        data = IntelligentRoadTest.lineData;//二级地图数据
        markerData = IntelligentRoadTest.lineMarkerData;
    } else if (IntelligentRoadTest.metroIndex == 3 || IntelligentRoadTest.metroIndex == 4) {
        data = IntelligentRoadTest.metroStationToStationLineData;//三级地图数据
        markerData = IntelligentRoadTest.metroStationToStationMarkerData;
    }
    //查询地铁站与站之间78米线段的回调函数，将每78米一段的地铁线段呈现在地图上
    IntelligentRoadTest.metorRgpsFilterData = IntelligentRoadTest.metroRgpsFilter(rgpsfilter, data);
    IntelligentRoadTest.showAll78Line(IntelligentRoadTest.metorRgpsFilterData, IntelligentRoadTest.metroIndex, IntelligentRoadTest.metroType);
    //需要根据需要，显示出正反向的箭头
    if(IntelligentRoadTest.metroType != 2 && IntelligentRoadTest.metroIndex != 1){
        IntelligentRoadTest.showAll78LineArrow(data,IntelligentRoadTest.metroIndex,IntelligentRoadTest.metroType)
    }
    if(clickLegen!=true){
        IntelligentRoadTest.showAll78Station(markerData,IntelligentRoadTest.metroIndex,IntelligentRoadTest.metroType);
    }

    /*if (IntelligentRoadTest.metroIndex == 3 || IntelligentRoadTest.metroIndex == 4) {
        if (clickLegen == true) {
            //通过图例点击进来的
            // IntelligentRoadTest.dealMetroStationToStationLineData(IntelligentRoadTest.metorRgpsFilterData,1);
            IntelligentRoadTest.showAll78Line(IntelligentRoadTest.metorRgpsFilterData, IntelligentRoadTest.metroIndex, IntelligentRoadTest.metroType);
        } else {
            // IntelligentRoadTest.dealMetroStationToStationLineData(IntelligentRoadTest.metorRgpsFilterData);
            IntelligentRoadTest.showAll78Line(IntelligentRoadTest.metorRgpsFilterData, IntelligentRoadTest.metroIndex, IntelligentRoadTest.metroType);
        }

    } else {
        if (clickLegen == true) {
            //通过图例点击进来的
            // IntelligentRoadTest.dealMetroStationsData(IntelligentRoadTest.metorRgpsFilterData,1,true);
            IntelligentRoadTest.showAll78Line(IntelligentRoadTest.metorRgpsFilterData, IntelligentRoadTest.metroIndex, IntelligentRoadTest.metroType);
        } else {
            // IntelligentRoadTest.dealMetroStationsData(IntelligentRoadTest.metorRgpsFilterData,1);
            IntelligentRoadTest.showAll78Line(IntelligentRoadTest.metorRgpsFilterData, IntelligentRoadTest.metroIndex, IntelligentRoadTest.metroType);
        }

    }*/
}
/**********************************
 * @funcname intelligentRoadTest.osmColorLegen
 * @funcdesc osm地图点击色板过滤数据并根据过滤后的数据重新绘制线段
 * @return {null}
 * @author 郑文彬
 * @create 20180417
 ***********************************/
IntelligentRoadTest.osmColorLegen = function IntelligentRoadTest_osmColorLegen() {
    var rgpsfilter = [];
    var colorFilter = IntelligentRoadTest.colorBarArrLine;
    if (IntelligentRoadTest.lineTypeIndex == 1) {
        colorFilter = IntelligentRoadTest.colorBarArrSHLine;
    } else if (IntelligentRoadTest.lineTypeIndex == 2) {
        colorFilter = IntelligentRoadTest.colorBarArrXHLine;
    }

    for(var i=0;i<colorFilter.length;i++){
        rgpsfilter.push({level:colorFilter[i]});
    }
    var data = IntelligentRoadTest.osmLineData;
    if (IntelligentRoadTest.roadIndex == 2) {
        //在第二层时，无论隧道还是连片，都需要是根据视野进行呈现
        /*if (IntelligentRoadTest.splitLineData.result && IntelligentRoadTest.splitLineData.columns) {
            data = callBackChangeData(IntelligentRoadTest.splitLineData);
        }*/
    } else if (IntelligentRoadTest.roadIndex == 3 || IntelligentRoadTest.roadIndex == 4) {
        if(IntelligentRoadTest.index == 8){
            if(IntelligentRoadTest.roadStatus == 1){
                if(IntelligentRoadTest.railContinueResult){
                    data = IntelligentRoadTest.railContinueResult;
                }
            }else{
                //高铁
                if(IntelligentRoadTest.roadStatus == 3 || IntelligentRoadTest.roadStatus == 2){
                    if(IntelligentRoadTest.railContinueResult){
                        data = IntelligentRoadTest.railContinueResult;
                    }
                }else{
                    if (IntelligentRoadTest.splitLineDataThree.result && IntelligentRoadTest.splitLineDataThree.columns) {
                        data = callBackChangeData(IntelligentRoadTest.splitLineDataThree);
                    }
                }
            }
        }else{
            if (IntelligentRoadTest.splitLineDataThree.result && IntelligentRoadTest.splitLineDataThree.columns) {
                data = callBackChangeData(IntelligentRoadTest.splitLineDataThree);
            }
        }
    }
    if((IntelligentRoadTest.roadStatus == 1 || IntelligentRoadTest.roadStatus == 2 || IntelligentRoadTest.roadStatus == 3) && IntelligentRoadTest.roadIndex > 1){
        if(IntelligentRoadTest.roadIndex > 2){
            IntelligentRoadTest.osmRgpsFilterData = IntelligentRoadTest.osmRgpsFilter(rgpsfilter, data , true);
        }else{
            //此时这里的数据是500米线段的数据
            IntelligentRoadTest.osmRgpsFilterData = IntelligentRoadTest.osmRgpsFilter(rgpsfilter, data , false);
        }

    }else{
        IntelligentRoadTest.osmRgpsFilterData = IntelligentRoadTest.osmRgpsFilter(rgpsfilter, data , false);
    }

    if (IntelligentRoadTest.roadIndex == 1) {
        IntelligentRoadTest.showBoundsLineDataFromHbase(IntelligentRoadTest.osmRgpsFilterData, 1, IntelligentRoadTest.osmType);
    } else {
        if(IntelligentRoadTest.index == 8){
            if(IntelligentRoadTest.roadStatus == 1 || IntelligentRoadTest.roadStatus == 2 || IntelligentRoadTest.roadStatus == 3){
                if(IntelligentRoadTest.roadIndex == 3 || IntelligentRoadTest.roadIndex == 4){
                    IntelligentRoadTest.showSuiDaoSmallLine(IntelligentRoadTest.osmRgpsFilterData,true);
                }else if(IntelligentRoadTest.roadIndex == 2){
                    //显示该线路的500米和隧道或者连片数据
                    IntelligentRoadTest.showSplitLineData(IntelligentRoadTest.osmRgpsFilterData, 1);
                    if(IntelligentRoadTest.roadStatus == 1 || IntelligentRoadTest.roadStatus == 2){//隧道和非隧道暂时是一样的
                        IntelligentRoadTest.showRoadSuiDaoData(IntelligentRoadTest.railSecondListMapResult);
                    }else if(IntelligentRoadTest.roadStatus == 3){
                        IntelligentRoadTest.showRoadContinueData(IntelligentRoadTest.railSecondListMapResult);
                    }

                }
            }else{
                if(IntelligentRoadTest.roadStatus != 3){
                    IntelligentRoadTest.showSplitLineData(IntelligentRoadTest.osmRgpsFilterData, 1);
                }
            }
        }else{

            if(IntelligentRoadTest.roadStatus != 3){
                IntelligentRoadTest.showSplitLineData(IntelligentRoadTest.osmRgpsFilterData, 1);
            }

        }
    }
}
/**********************************
 * @funcname intelligentRoadTest.metroRgpsFilter
 * @funcdesc 地铁页面点击色板根据色板选中情况过滤地铁数据
 * @param {object} rgpsfilter (input optional)
 *过滤条件
 * @param {object} data (input optional)
 *被过滤的数据
 * @return 过滤后的数据
 * @author 郑文彬
 * @create 20180417
 ***********************************/
IntelligentRoadTest.metroRgpsFilter = function IntelligentRoadTest_metroRgpsFilter(rgpsfilter, dataResult, rever) {
    if (dataResult == undefined || dataResult == null || dataResult == "") {
        return [];
    }
    var result = [];
    var rgpsIndex = "rsrp_avg";
    if (IntelligentRoadTest.lineTypeIndex == 0) {
        if (IntelligentRoadTest.metroIndex == 3 || IntelligentRoadTest.metroIndex == 4) {
            rgpsIndex = "rsrp_avg";
        }
    } else if (IntelligentRoadTest.lineTypeIndex == 1) {
        rgpsIndex = "min_userex_upavgrate";
    } else if (IntelligentRoadTest.lineTypeIndex == 2) {
        rgpsIndex = "min_userex_dwavgrate";
    }

    for (var i = 0; i < dataResult.length; i++) {
        var isFilter = false;
        var level = 6;
        if (IntelligentRoadTest.lineTypeIndex == 0) {
            level = IntelligentRoadTest.getMetroRoadRSRPLevel(dataResult[i][rgpsIndex], dataResult[i]["dx_rsrp_140_cnt"]);
        } else if (IntelligentRoadTest.lineTypeIndex == 1) {
            level = IntelligentRoadTest.getRoadSHLevel(dataResult[i][rgpsIndex], dataResult[i]["dx_rsrp_140_cnt"]);
        } else if (IntelligentRoadTest.lineTypeIndex == 2) {
            level = IntelligentRoadTest.getRoadXHLevel(dataResult[i][rgpsIndex], dataResult[i]["dx_rsrp_140_cnt"]);
        }

        for (var j = 0; j < rgpsfilter.length; j++) {
            if (level == rgpsfilter[j].level) {
                isFilter = true;
            }
        }
        if (!isFilter) {
            result.push(dataResult[i]);
        }
    }
    // var obj=reverseDataForCallBackDataUtil(result);
    return result;
}
/**********************************
 * @funcname intelligentRoadTest.osmRgpsFilter
 * @funcdesc osm地图点击色板根据色板选中情况过滤osm数据
 * @param {object} rgpsfilter (input optional)
 *过滤条件
 * @param {object} data (input optional)
 *被过滤的数据
 * @return 过滤后的数据
 * @author 郑文彬
 * @create 20180417
 ***********************************/
IntelligentRoadTest.osmRgpsFilter = function IntelligentRoadTest_osmRgpsFilter(rgpsfilter, data ,isSuiDao) {
    var result = [];//"dx_line_rsrp_avg":row["i:a6"],
    if (!data) {
        return result;
    }

    if(isSuiDao){
        for (var i = 0; i < data.length; i++) {
            var isFilter = false;
//      IntelligentRoadTest.lineTypeIndex = lineTypeIndex;//类型下标 0--覆盖质量  1--上行速率  2--下行速率
            var level = 6;
            if (IntelligentRoadTest.lineTypeIndex == 0) {
                level = IntelligentRoadTest.getRoadRSRPLevel(data[i]["dx_line_rsrp_avg"], data[i]["dx_line_rsrp_count"]);
            } else if (IntelligentRoadTest.lineTypeIndex == 1) {
                level = IntelligentRoadTest.getRoadSHLevel(data[i]["min_userex_upavgrate"], data[i]["dx_line_rsrp_count"]);
            } else if (IntelligentRoadTest.lineTypeIndex == 2) {
                level = IntelligentRoadTest.getRoadXHLevel(data[i]["min_userex_dwavgrate"], data[i]["dx_line_rsrp_count"]);
            }

            for (var j = 0; j < rgpsfilter.length; j++) {
                if (level == rgpsfilter[j].level) {
                    isFilter = true;
                }
            }
            if (!isFilter) {
                result.push(data[i]);
            }
        }
    }else{
        for (var i = 0; i < data.length; i++) {
            var isFilter = false;
//      IntelligentRoadTest.lineTypeIndex = lineTypeIndex;//类型下标 0--覆盖质量  1--上行速率  2--下行速率
            var level = 6;
            if (IntelligentRoadTest.lineTypeIndex == 0) {
                level = IntelligentRoadTest.getRoadRSRPLevel(data[i]["i:a6"], data[i]["i:a5"]);
            } else if (IntelligentRoadTest.lineTypeIndex == 1) {
                level = IntelligentRoadTest.getRoadSHLevel(data[i]["i:a33"], data[i]["i:a5"]);
            } else if (IntelligentRoadTest.lineTypeIndex == 2) {
                level = IntelligentRoadTest.getRoadXHLevel(data[i]["i:a34"], data[i]["i:a5"]);
            }

            for (var j = 0; j < rgpsfilter.length; j++) {
                if (level == rgpsfilter[j].level) {
                    isFilter = true;
                }
            }
            if (!isFilter) {
                result.push(data[i]);
            }
        }
    }


    return result;
}
/**********************************
 * @funcname intelligentRoadTest.metorStarEndMk
 * @funcdesc 绘制鼠标移入线段时的起始结束点
 * @param {object} point (input optional)
 *起始点
 * @param {object} point2 (input optional)
 *结束点
 * @author 郑文彬
 * @create 20180417
 ***********************************/
IntelligentRoadTest.metorStarEndMk = function IntelligentRoadTest_metorStarEndMk(point, point2) {
//	 IntelligentRoadTest.metorStarPoint=point;
//	 IntelligentRoadTest.metorEndPoint=point2;
    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metorMkSatr);
    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metorMkEnd);
    var img = "../js/IntelligentRoadTest/images/bg_num.png";
    var myIcon = new BMap.Icon(img, new BMap.Size(22, 32));
    var marker = new BMap.Marker(point, {icon: myIcon});  // 创建标注
    var label = new BMap.Label('起', {
        offset: new BMap.Size(3, 3)
    });
    label.setStyle({
        background: 'none', color: "#fff", border: 'none'//只要对label样式进行设置就可达到在标注图标上显示数字的效果
        , fontWeight: 'bold'
    });
    marker.setLabel(label);
    marker.setOffset(
        new BMap.Size(0, -15)
    );
    IntelligentRoadTest.metorMkSatr = marker;
    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.metorMkSatr);

    var myIcon2 = new BMap.Icon(img, new BMap.Size(22, 32));
    var marker2 = new BMap.Marker(point2, {icon: myIcon});  // 创建标注
    var label2 = new BMap.Label('止', {
        offset: new BMap.Size(3, 3)
    });
    label2.setStyle({
        background: 'none', color: "#fff", border: 'none'//只要对label样式进行设置就可达到在标注图标上显示数字的效果
        , fontWeight: 'bold'
    });
    marker2.setLabel(label2);
    marker2.setOffset(
        new BMap.Size(0, -15)
    );
    IntelligentRoadTest.metorMkEnd = marker2;
    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.metorMkEnd);
}
/**********************************
 * @funcname intelligentRoadTest.metorStarEndMk
 * @funcdesc 删除地铁选中线段的起始结束点
 * @author 郑文彬
 * @create 20180417
 ***********************************/
IntelligentRoadTest.removeMetorLineStarEndMk = function () {
    try {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metorLineMkSatr);
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metorLineMkEnd);
    } catch (e) {
        // TODO: handle exception
    }
}
/**********************************
 * @funcname intelligentRoadTest.metorStarEndMk
 * @funcdesc 点击地铁线段时绘制选中的地铁线段的起始结束点
 * @param {object} point (input optional)
 *起始点
 * @param {object} point2 (input optional)
 *结束点
 * @author 郑文彬
 * @create 20180417
 ***********************************/
IntelligentRoadTest.metorLineStarEndMk = function IntelligentRoadTest_metorStarEndMk(point, point2) {
//	 IntelligentRoadTest.metorStarPoint=point;
//	 IntelligentRoadTest.metorEndPoint=point2;
    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metorLineMkSatr);
    IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.metorLineMkEnd);
    var img = "../js/IntelligentRoadTest/images/bg_num.png";
    var myIcon = new BMap.Icon(img, new BMap.Size(22, 32));
    var marker = new BMap.Marker(point, {icon: myIcon});  // 创建标注
    var label = new BMap.Label('起', {
        offset: new BMap.Size(3, 3)
    });
    label.setStyle({
        background: 'none', color: "#fff", border: 'none'//只要对label样式进行设置就可达到在标注图标上显示数字的效果
        , fontWeight: 'bold'
    });
    marker.setLabel(label);
    marker.setOffset(
        new BMap.Size(0, -15)
    );
    IntelligentRoadTest.metorLineMkSatr = marker;
    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.metorLineMkSatr);

    var myIcon2 = new BMap.Icon(img, new BMap.Size(22, 32));
    var marker2 = new BMap.Marker(point2, {icon: myIcon});  // 创建标注
    var label2 = new BMap.Label('止', {
        offset: new BMap.Size(3, 3)
    });
    label2.setStyle({
        background: 'none', color: "#fff", border: 'none'//只要对label样式进行设置就可达到在标注图标上显示数字的效果
        , fontWeight: 'bold'
    });
    marker2.setLabel(label2);
    marker2.setOffset(
        new BMap.Size(0, -15)
    );
    IntelligentRoadTest.metorLineMkEnd = marker2;
    IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.metorLineMkEnd);
}
IntelligentRoadTest.osmTableStyle = function IntelligentRoadTest_osmTableStyle(index) {
    var id = "";
    //IntelligentRoadTest.index=null;//0弱区 1关注 2工单 3扇区 4dt 5骨头 6宏扇区 7高速 8高铁 9高密度 10高校  11高流量商务 12美景 13框选骨头区域 14市政路 15地铁
    if (IntelligentRoadTest.index == 7) {
        //高速
        id = "showHighwayDiv";
        if (IntelligentRoadTest.second) {
            id = "showHighwayListDiv";
        }
    } else if (IntelligentRoadTest.index == 8) {
        //高铁
        id = "showRailDiv";
        if (IntelligentRoadTest.second) {
            id = "showRailListDiv";
        }
    } else if (IntelligentRoadTest.index == 14) {
        //市政路
        id = "showCityRoadDiv";
        if (IntelligentRoadTest.second) {
            id = "showCityRoadListDiv";
        }
    }
    for (var i = 0; i < 20; i++) {
        $("#" + id).find(".listUL > li").eq(i).find(".numSpan").css("background", "url(../js/IntelligentRoadTest/images/bg_num.png)");
        $("#" + id).find(".listUL > li").eq(i).css("background", "#fff");
    }
    $("#" + id).find(".listUL > li").eq(index).find(".numSpan").css("background", "url(../js/IntelligentRoadTest/images/maker2.png)");
    $("#" + id).find(".listUL > li").eq(index).css("background", "#f4f4f4");
}

//呈现连片弱线段
IntelligentRoadTest.showhighlightContinueLineData = function IntelligentRoadTest_showhighlightContinueLineData(result) {
    try {
        IntelligentRoadTest.lineHighlight.clearLayers();
    } catch (e) {
        // TODO: handle exception
    }
    IntelligentRoadTest.lineHighlight = L.geoJSON(IntelligentRoadTest.parseContinueLineGeoJson(result), {
        style: function (feature) {
            var setting = {
                "weight": IntelligentRoadTest.getRoadWeight() * 3,
                "opacity": 0.6,//0.6$('#userSetOpacity').val(),
                "color": IntelligentRoadTest.continueLineColor,
            };
            return setting;
        },
        filter: function (feature) {
            var isShow = true;
            return isShow;
        }
    });

    IntelligentRoadTest.lineHighlight.on("click", function (e) {
//        	console.log(e);
        var setCenterPoint = e.latlng;
        var lineProperties = e.layer.feature.properties;
        var road_id = lineProperties.road_id;
        var line_type = lineProperties.type;
        var city_id = lineProperties.city_id;
        var road_name = lineProperties.road_name;
        var contain_ids = lineProperties.contain_ids;
        var city = lineProperties.city;
        var object_id = lineProperties.object_id;

//        if(IntelligentRoadTest.lineMessageOverlay){
//        	IntelligentRoadTest.lineMessageOverlay.remove();
//        }

        if (IntelligentRoadTest.geoJsonLayer) {
            IntelligentRoadTest.geoJsonLayer.clearLayers();
        }
        // IntelligentRoadTest.lineClick(lineProperties);
        if (IntelligentRoadTest.roadIndex == 2) {
            //连片线段点击时，查询该连片线段所有20米线段  并进入对应弱连片线段的详情页
            IntelligentRoadTest.loadContinueLineMeterData(IntelligentRoadTest.day, line_type, city_id, road_id, contain_ids);
            //查看该高速的连片线段列表
            IntelligentRoadTest.getRoadCompleteMessageByLineID(object_id, IntelligentRoadTest.day, line_type, city, road_id, true);
            IntelligentRoadTest.getRoad30DayData(road_id, object_id, line_type, true); //查询历史30天的数据
        } else if (IntelligentRoadTest.roadIndex == 1) {
            //一层列表的时候，需要进入该高速下所有弱连片线段的列表，即进入第二层列表
            if (line_type == 1) {
                IntelligentRoadTest.goHighwaySecondList();

                var highwayData = crossfilter(IntelligentRoadTest.continueLineHighWayDataChe); //创建一个crossfilter对象
                var highwayDataLineIDDim = highwayData.dimension(function (d) {
                    return d.road_id;
                }); //按照线路id创建一个维度
                var finalLineData = highwayDataLineIDDim.filter(road_id);
                IntelligentRoadTest.highwaySecondListMapResult = finalLineData.top(highwayData.size());
                IntelligentRoadTest.showContinueLineData(IntelligentRoadTest.highwaySecondListMapResult);
                $('#highwayName').text(road_name);
            } else if (line_type == 2) {
                IntelligentRoadTest.goRailSecondList();

                var railwayData = crossfilter(IntelligentRoadTest.continueLineRailWayDataChe); //创建一个crossfilter对象
                var railwayDataLineIDDim = railwayData.dimension(function (d) {
                    return d.road_id;
                }); //按照线路id创建一个维度
                var finalLineData = railwayDataLineIDDim.filter(road_id);
                IntelligentRoadTest.railwaySecondListMapResult = finalLineData.top(railwayData.size());
                IntelligentRoadTest.showContinueLineData(IntelligentRoadTest.railwaySecondListMapResult);
                $('#railName').text(road_name);
            } else if (line_type == 3) {
                IntelligentRoadTest.goCityRoadSecondList();

                var cityRoadData = crossfilter(IntelligentRoadTest.continueLineCityRoadDataChe); //创建一个crossfilter对象
                var cityRoadDataLineIDDim = cityRoadData.dimension(function (d) {
                    return d.road_id;
                }); //按照线路id创建一个维度
                var finalLineData = cityRoadDataLineIDDim.filter(road_id);
                IntelligentRoadTest.cityRoadSecondListMapResult = finalLineData.top(cityRoadData.size());
                IntelligentRoadTest.showContinueLineData(IntelligentRoadTest.cityRoadSecondListMapResult);
                $('#cityRoadName').text(road_name);
            }
            IntelligentRoadTest.getRoadSecondListData(road_id, city, IntelligentRoadTest.day,
                line_type, true, true);
        }

    });
    IntelligentRoadTest.lineHighlight.addTo(IntelligentRoadTest.OsmMap);
    IntelligentRoadTest.lineHighlight.setZIndex(110);

}
/**********************************
 * @funcname intelligentRoadTest.openConcernArea
 * @funcdesc 从清单列表中点击object_id打开关注区域详情页面
 * @return {null}
 * @author 郑文彬
 * @create 20180417
 ***********************************/
IntelligentRoadTest.openConcernArea = function IntelligentRoadTest_openConcernArea() {
    var object_type = noceUtil.GetQueryString("object_type");
    var object_id = noceUtil.GetQueryString("object_id");
    if (object_type == "关注区域" && object_id != undefined) {
        IntelligentRoadTest.concernAreaData([]);
        IntelligentRoadTest.getConcernAreaMessageById(object_id);
        setTimeout(function () {
            var item = IntelligentRoadTest.cacheItem;
            IntelligentRoadTest.showPolygon(item.gis_data_baidu, undefined, "concern", item.id, IntelligentRoadTest.day, item.area_name);
            var textList = [
                {"key": "区域名称", "val": item.area_name},
                {"key": "区域编号", "val": item.id},
            ];
//            IntelligentRoadTest.loadGrid(item.max_longitude_baidu,item.min_longitude_baidu,item.max_latitude_baidu,item.min_latitude_baidu);
            IntelligentRoadTest.searchShowMkLable((item.min_longitude_baidu + item.max_longitude_baidu) / 2, (item.max_latitude_baidu + item.min_latitude_baidu) / 2, textList)
            IntelligentRoadTest.map.centerAndZoom(new BMap.Point((item.min_longitude_baidu + item.max_longitude_baidu) / 2, (item.max_latitude_baidu + item.min_latitude_baidu) / 2), 16);
        }, 2500);
    }
}
/**********************************
 * @funcname intelligentRoadTest.openDtCustomArea
 * @funcdesc 从清单页面点击object_id打开自定义图层详情页
 * @return {null}
 * @author 郑文彬
 * @create 20180417
 ***********************************/
IntelligentRoadTest.openDtCustomArea = function IntelligentRoadTest_openDtCustomArea() {
    var object_type = noceUtil.GetQueryString("object_type");
    var object_id = noceUtil.GetQueryString("object_id");
    var username = noceUtil.GetQueryString("username");
    if (object_type == "dt图层" || object_type == "点图层" || object_type == "多边形图层") {
        if (object_id != undefined) {
            IntelligentRoadTest.goDtList();
            var sql;
            if (object_type == "dt图层") {
                sql = ["IntelligentRoadTestV3_getDtData", "ID:" + object_id, "USERNAME:" + username];
            } else {
                sql = ["IntelligentRoadTestV3_getCustomData", "ID:" + object_id, "USERNAME:" + username];
            }
            var progressBarSqls = [];
            progressBarSqls.push(sql);
            var functionlist = [IntelligentRoadTest.dealInitData];
            var database = [3];
            progressbarTwo.submitSql(progressBarSqls, functionlist, database, null, null, null, null, true);
            IntelligentRoadTest.showDTData(IntelligentRoadTest.result[0]);
            setTimeout(function () {
                IntelligentRoadTest.dtVM.dtShow(IntelligentRoadTest.result[0]);
            }, 1000);
        }
    }
}
IntelligentRoadTest.layer = null;
/**********************************
 * @funcname intelligentRoadTest.openAuditPage
 * @funcdesc 审核清单页面点击区域id跳转到智能测评页面时，打开对应详情页面
 * @return {null}
 * @author 郑文彬
 * @create 20180417
 ***********************************/
IntelligentRoadTest.openAuditPage = function () {
    //打开关注区域
    IntelligentRoadTest.openConcernArea();
    //打开自定义图层
    IntelligentRoadTest.openDtCustomArea();
    var object_type = noceUtil.GetQueryString("object_type");
    var object_id = noceUtil.GetQueryString("object_id");
    if (object_id != undefined && object_type != undefined) {
        $('.layerTabWrap label').each(function () {
            if ($(this).text() == object_type) {
                IntelligentRoadTest.layer = this;
                setTimeout(function () {
                    $('#scene').attr("checked", true);
//			    	$(IntelligentRoadTest.layer).prev().prev()[0].attr("checked", true);
                    $(IntelligentRoadTest.layer).prev().prev().id;
                    $('#' + $(IntelligentRoadTest.layer).prev().prev()[0].id).click();
                    IntelligentRoadTest.submitLayersData();
                }, 1500)
            }
        });
    }
}

/**********************************
 * @funcname intelligentRoadTest.loadCustomPolygon
 * @funcdesc 点击自定义图层列表的小眼睛查询显示多边形
 * @param {object} data (input optional)
 *轮廓数据
 * @param {string} color (input optional)
 *轮廓颜色
 * @return {null}
 * @author 郑文彬
 * @create 20180417
 ***********************************/
IntelligentRoadTest.loadCustomPolygon = function IntelligentRoadTest_loadCustomPolygon(data, color) {
    var sql = ["IntelligentRoadTestV3_getCustomDetailData", "custom_area_id:" + data.id];
    progressbarTwo.submitSql([sql], [IntelligentRoadTest.drawCustomPolygon], [3], [[data.dt_name, color]]);
}
/**********************************
 * @funcname intelligentRoadTest.drawCustomPolygon
 * @funcdesc 绘制自定义图层的多边形
 * @param {object} data (input optional)
 *轮廓数据
 * @return {null}
 * @author 郑文彬
 * @create 20180417
 ***********************************/
IntelligentRoadTest.drawCustomPolygon = function drawCustomPolygon(data, parm) {
    for (var i = 0; i < IntelligentRoadTest.dtPolygon.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.dtPolygon[i]);
    }
    IntelligentRoadTest.dtPolygon = [];
    data = callBackChangeData(data);
    var sumLon = 0;
    var sumLat = 0;
    var coordinate = {lon: [], lat: []};
    for (var i = 0; i < data.length; i++) {
        var varr = [];
        var gis_data = data[i].gis_data_baidu;
        var sp = gis_data.split('@');
        for (var j = 0; j < sp.length; j++) {
            var v = sp[j].split(',');
            varr.push(new BMap.Point(v[0], v[1]));
            if (j == 0) {
                sumLon = sumLon + parseFloat(v[0]);
                sumLat = sumLat + parseFloat(v[1]);
                coordinate.lon.push(v[0]);
                coordinate.lat.push(v[1]);
            }
        }
        var polygon = new BMap.Polygon(varr, {strokeColor: parm[1], strokeWeight: 2, strokeOpacity: 0.6});  //创建多边形
        polygon.setStrokeOpacity(1);
        polygon.result = data[i];
        polygon.name = parm[0];
        polygon.addEventListener("mouseover", function (e) {
            IntelligentRoadTest.dtTip(e, this.result, this.name);
        });
        polygon.addEventListener("mouseout", function (e) {
            $('#lblTip_2').html("");
            $('#tip_2').hide();
        });
//		polygon.setZIndex(90000);
        IntelligentRoadTest.dtPolygon[i] = polygon;
        IntelligentRoadTest.map.addOverlay(IntelligentRoadTest.dtPolygon[i]);   //增加多边形
    }
    IntelligentRoadTest.lng = sumLon / data.length;
    IntelligentRoadTest.lat = sumLat / data.length;
//		intelligentRoadTest.zoom=getZoom (Math.max.apply( Math, coordinate.lon ), Math.min.apply( Math, coordinate.lon ), Math.max.apply( Math, coordinate.lat ), Math.min.apply( Math, coordinate.lat ));
    IntelligentRoadTest.zoom = 13;
    IntelligentRoadTest.map.centerAndZoom(new BMap.Point(IntelligentRoadTest.lng, IntelligentRoadTest.lat), IntelligentRoadTest.zoom);

}
/**********************************
 * @funcname intelligentRoadTest.dtTip
 * @funcdesc 触摸自定义图层多边形，显示提示信息。
 * @param {object} data (input optional)
 *轮廓数据
 * @return {null}
 * @author 郑文彬
 * @create 20180417
 ***********************************/
IntelligentRoadTest.dtTip = function dtTip(e, result, name) {
    var position = e.point;
    var x = e.pixel.x;
    var y = e.pixel.y;
    var lng = position.lng;
    var lat = position.lat;
    var infoStr = "";
    infoStr += "名称: " + name + "<br>";
    infoStr += "value:" + result.value + " <br>";
    infoStr += "备注:" + result.remark + " <br>";
    $('#lblTip_2').html(infoStr);
    $('#tip_2').css("left", x + 5 + "px").css("top", y + 10 + "px").show();
    $('#tip_2').show();

}
//根据多边形轮廓查询栅格
IntelligentRoadTest.weakAreaGrid = function weakAreaGrid(item) {
    IntelligentRoadTest.i
    // var COLUMNLIST="i:a1,i:a7";
    var PARTITIONMOD = "partitionmod 1";
    var GRIDLEVEL = 20;
    // 经纬度集合
    var POLYGONCONTOUR = [];
    POLYGONCONTOUR.push(item.gis_data);
    // 拼接查询的前缀
    // var GRIDKEYPREFIX=[];
    //当前日期
    var day = IntelligentRoadTest.day;
    var dayDate = dealDateString(day);
    IntelligentRoadTest.paCell = {};
    IntelligentRoadTest.paHisDay = [];
    IntelligentRoadTest.paAftDay = [];
    // 系统时间前一天
    var d = new Date();
    var h = d.getHours();
    // 14点之后减1，之前减2
    if (h > 14) {
        d.setDate(d.getDate() - 1);
    } else {
        d.setDate(d.getDate() - 2);
    }

    var arr = [];
    if (DateMinus(dayDate.format('yyyy-MM-dd'), d.format('yyyy-MM-dd'), null) < 7) {
        //最近日期的历史7天
        arr.push(d.format('yyyyMMdd'));
        IntelligentRoadTest.paHisDay.push(d.format('yyyyMMdd'));
        for (var i = 1; i <= 6; i++) {
            d.setDate(d.getDate() - 1);
            arr.push(d.format('yyyyMMdd'));
            IntelligentRoadTest.paHisDay.push(d.format('yyyyMMdd'));
        }
    } else {
        //选中日期的后7天
        arr.push(day);
        IntelligentRoadTest.paAftDay.push(day);
        for (var i = 1; i <= 6; i++) {
            dayDate.setDate(dayDate.getDate() + 1);
            arr.push(dayDate.format('yyyyMMdd'));
            IntelligentRoadTest.paAftDay.push(dayDate.format('yyyyMMdd'));
        }
    }
    // console.log("hbase:"+arr)
    arr.sort(sortNumber);
    var progressBarSqls = [];
    var functionList = [];
    var dataBase = [];
    var callbackPara = [];
    IntelligentRoadTest.forNum = 0;
    for (var i = 0; i < arr.length; i++) {
        var list = ["IntelligentRoadTestV3_getPoorAreaHistorTrendData", "TABLENAME:NOCE:DSI_MRO_ALL_GRID_TOT_W",
            "PARTITIONMOD: ", "GRIDLEVEL:" + GRIDLEVEL, "POLYGONCONTOUR:"
            + POLYGONCONTOUR, "GRIDKEYPREFIX:" + getddmm(arr[i]) + "_1_"];
        list.push("COLUMNLIST:i:a1,i:a7,i:a16,i:b2,i:b3,i:b4");
        progressBarSqls.push(list);
        functionList.push(IntelligentRoadTest.callWeakAreaGrid);//调用回调函数
        dataBase.push(7);
        callbackPara.push(arr[i])
    }
    progressbarTwo.submitSql(progressBarSqls, functionList, dataBase, callbackPara);
    // if(progressBarSqls.length>0){
    //     progressbarTwo.submitSql(progressBarSqls,functionList,dataBase,callbackPara);
    // }

}
//根据多边形轮廓查询栅格的回调函数
IntelligentRoadTest.callWeakAreaGrid = function callWeakAreaGrid(data, day) {
    var result = callBackChangeData(data);
    var weGridNum = 0;//弱栅格数
    var covGridNum = 0;//覆盖栅格数
    var wcVal = 0;//弱栅格占比
    var ignoreCount = 0; //MR条数小于等于3的总数
    var min_userex_upavgrate = 0; //kpi上行感知速率
    var min_userex_dwavgrate = 0; //kpi下行感知速率
    var name = "poorArea";
    if (IntelligentRoadTest.poorAreaObj != null) {
        name = IntelligentRoadTest.poorAreaObj.name;
    }
    for (var i = 0; i < result.length; i++) {
        covGridNum = covGridNum + 1;
        if (result[i]["i:a7"] != null) {
            var rsrps = result[i]["i:a7"].split("#");
            var rsrp = rsrps[rsrps.length - 1];
            if (name == "poorArea") { //弱区
                if (rsrp < -105 ) {
                    if (rsrps[0] > 3) {
                        weGridNum = weGridNum + 1;
                    }
                }
            } else if (name == "upPoorArea") { //上行低速区
                if (result[i]["i:a16"] != null && result[i]["i:a16"].trim() != "#") {
                    var minDataArr = result[i]["i:a16"].split("#");
                    // if(minDataArr.length == 2){
                    if (parseFloat(minDataArr[0]) < 0.25 && rsrps[0] > 3) {
                        weGridNum = weGridNum + 1;
                    }
                    // }
                }
            } else if (name == "dwPoorArea") {//下行低速区
                if (result[i]["i:a16"] != null && result[i]["i:a16"].trim() != "#") {
                    var minDataArr = result[i]["i:a16"].split("#");
                    // if(minDataArr.length == 2){
                    if (parseFloat(minDataArr[1]) < 5 && rsrps[0] > 3) {
                        weGridNum = weGridNum + 1;
                    }
                    // }
                }
            } else if (name == "m3Sector") {//MOD3干扰区
                if (result[i]["i:b2"] != null && result[i]["i:b2"].trim() != "#") {
                    var mod3DataArr = result[i]["i:b2"].split("#");
                    // if(mod3DataArr.length == 2){
                    if (parseFloat(mod3DataArr[1]) > 0.5 && rsrps[0] > 3) {
                        weGridNum = weGridNum + 1;
                    }
                    // }
                }
            } else if (name == "olSector") {//重叠覆盖区
                if (result[i]["i:b3"] != null && result[i]["i:b3"].trim() != "#") {
                    var olDataArr = result[i]["i:b3"].split("#");
                    // if(olDataArr.length == 2){
                    if (parseFloat(olDataArr[1]) > 0.5 && rsrps[0] > 3) {
                        weGridNum = weGridNum + 1;
                    }
                    // }
                }
            } else if (name == "cbSector") {//越区覆盖区
                if (result[i]["i:b4"] != null && result[i]["i:b4"].trim() != "#") {
                    var cbDataArr = result[i]["i:b4"].split("#");
                    // if(cbDataArr.length == 2){
                    if (parseFloat(cbDataArr[1]) > 0.5 && rsrps[0] > 3) {
                        weGridNum = weGridNum + 1;
                    }
                    // }
                }
            } else if (name == "m3PoorArea") {//MOD3干扰区
                if (result[i]["i:b2"] != null && result[i]["i:b2"].trim() != "#") {
                    var mod3DataArr = result[i]["i:b2"].split("#");
                    // if(mod3DataArr.length == 2){
                    if ((mod3DataArr[2]) == "1") {
                        if (rsrps[0] > 3) {
                            weGridNum = weGridNum + 1;
                        }
                    }
                    // }
                }
            } else if (name == "olPoorArea") {//重叠覆盖区
                if (result[i]["i:b3"] != null && result[i]["i:b3"].trim() != "#") {
                    var olDataArr = result[i]["i:b3"].split("#");
                    // if(olDataArr.length == 2){
                    if (olDataArr[2] == "1") {
                        if (rsrps[0] > 3) {
                            weGridNum = weGridNum + 1;
                        }
                    }
                    // }
                }
            } else if (name == "cbPoorArea") {//越区覆盖区
                if (result[i]["i:b4"] != null && result[i]["i:b4"].trim() != "#") {
                    var cbDataArr = result[i]["i:b4"].split("#");
                    // if(cbDataArr.length == 2){
                    if (cbDataArr[2] == "1") {
                        if (rsrps[0] > 3) {
                            weGridNum = weGridNum + 1;
                        }
                    }
                    // }
                }
            }


            if (rsrps[0] <= 3) {
                ignoreCount++;
            } else {
                if (result[i]["i:a16"] != null && result[i]["i:a16"].trim() != "#") {
                    var minDataArr = result[i]["i:a16"].split("#");
                    if (minDataArr.length == 2) {
                        min_userex_upavgrate += parseFloat(minDataArr[0]);
                        min_userex_dwavgrate += parseFloat(minDataArr[1]);
                    }
                }
            }
        }
    }
    wcVal = weGridNum / (covGridNum - ignoreCount);
    wcVal = Number(wcVal * 100).toFixed(2);//取百分数，保留2位小数
    // var dataPa = {};
    // dataPa[day] = wcVal;
    IntelligentRoadTest.paCell[day] = wcVal;
    if (result.length > 0) {
        min_userex_upavgrate = (min_userex_upavgrate / (result.length - ignoreCount)).toFixed(2);
        min_userex_dwavgrate = (min_userex_dwavgrate / (result.length - ignoreCount)).toFixed(2);
    }
    var obj = {
        create_time: day,
        min_userex_upavgrate: min_userex_upavgrate,
        min_userex_dwavgrate: min_userex_dwavgrate
    };
    IntelligentRoadTest.forNum++;
    if (IntelligentRoadTest.poorAreaKpiEchartData == null) {
        IntelligentRoadTest.poorAreaKpiEchartData = [];
    } else {
        if (IntelligentRoadTest.forNum == 1) {
            IntelligentRoadTest.poorAreaKpiEchartData = [];
        }
    }
    IntelligentRoadTest.poorAreaKpiEchartData[IntelligentRoadTest.forNum - 1] = obj;
    if (IntelligentRoadTest.forNum == 7) {
        IntelligentRoadTest.getByLatLot(IntelligentRoadTest.rfgCompleteVM.poorAreaData.longitude_mid_baidu, IntelligentRoadTest.rfgCompleteVM.poorAreaData.latitude_mid_baidu);
        IntelligentRoadTest.showGridKPIEcharts(IntelligentRoadTest.poorAreaKpiEchartData, "poorAreaSecondChart");
    }

}
//根据当前弱区中心经纬度获取附近
IntelligentRoadTest.getByLatLot = function getByLatLot(lng, lat) {
    // var  endDay = dealDateString(IntelligentRoadTest.day).Format("yyyyMMdd");
    var startDay = 0;
    var endDay = 0;
    // 如果选取的是后7天
    if (IntelligentRoadTest.paAftDay.length > 0) {
        startDay = IntelligentRoadTest.paAftDay[0];
        endDay = IntelligentRoadTest.paAftDay[IntelligentRoadTest.paAftDay.length - 1];
        // 如果是历史前7天
    } else if (IntelligentRoadTest.paHisDay.length > 0) {
        startDay = IntelligentRoadTest.paHisDay[IntelligentRoadTest.paHisDay.length - 1];
        endDay = IntelligentRoadTest.paHisDay[0];
    }
    var type = 0;
    if (IntelligentRoadTest.poorAreaObj != null) {
        type = IntelligentRoadTest.poorAreaObj.type;
    }
    //生成地图点对象
    var point = new BMap.Point(lng, lat);
    //生成经度差
    var lngDiff = IntelligentRoadTest.LngDistince(point, 5000, IntelligentRoadTest.map);
    //生成纬度差
    var latDiff = IntelligentRoadTest.LatDistince(point, 5000, IntelligentRoadTest.map);
    var sqlList = [];
    var list = ["IntelligentRoadTestV3_getNearPoorAreaCount", "STATRDAY:" + startDay, "ENDDAY:" + endDay, "LNGMID:" + lng, "LATMID:" + lat, "LNGDIFF:" + lngDiff, "LATDIFF:" + latDiff, "TYPE:" + type];
    sqlList.push(list);
    var functionList = [IntelligentRoadTest.callGetByLatLot];
    var database = [3];
    progressbarTwo.submitSql(sqlList, functionList, database);
}
//根据当前弱区中心经纬度获取附近的回调函数
IntelligentRoadTest.callGetByLatLot = function callGetByLatLot(data) {
    var result = callBackChangeData(data);
    var objResult = [];
    for (var i = 0; i < result.length; i++) {
        var temArr = {day: result[i].day, npnum: result[i].npnum};
        objResult.push(temArr);
    }
    IntelligentRoadTest.showGridThryDayEcharts(objResult, "gridThrLineChart");//调用echarts图方法
    showOrHideInputImage(1);
}
/**********************************
 * @funcname IntelligentRoadTest.showGridThryDayEcharts
 * @funcdesc 显示30天的数据的echarts图
 * @param {Array}  result {String} divID
 * result表示需要展示的数据 ， divID表示echarts图所在的div的id
 * @author zhaixuan
 * @create 20180101
 ***********************************/
IntelligentRoadTest.showGridThryDayEcharts = function IntelligentRoadTest_showGridThryDayEcharts(result, divID) {
    if (IntelligentRoadTest.gridThrLineEchart != null) {
        IntelligentRoadTest.gridThrLineEchart.dispose();
    }
    IntelligentRoadTest.gridThrLineEchart = echarts.init(document.getElementById(divID));
    var xAxisData = [];
    var seriesData = [];
    // var coverData = [];
    var paCellData = [];
    if (result != null && result.length > 0) {
        for (var i = 0; i < result.length; i++) {
            var day = result[i].day.toString().substring(4, 6) + "-" + result[i].day.toString().substring(6);
            xAxisData[i] = day;
            //附近弱区数量
            // paCellData.push(IntelligentRoadTest.paCell[result[i].day]);
            paCellData[i] = IntelligentRoadTest.paCell[result[i].day];
            seriesData[i] = result[i].npnum;
        }
    }
    var firstName = "5km内弱区数量";
    var secondName = "弱栅格占比";
    if (IntelligentRoadTest.poorAreaObj != null) {
        firstName = "5km内" + IntelligentRoadTest.poorAreaObj.typeName + "数量";
        var objName = IntelligentRoadTest.poorAreaObj.name;
        if (objName == "upPoorArea" || objName == "dwPoorArea") {
            secondName = "低速栅格占比";
        } else if (objName == "m3Sector" || objName == "olSector" || objName == "cbSector") {
            secondName = "干扰栅格占比";
        } else if (objName == "m3PoorArea" || objName == "olPoorArea" || objName == "cbPoorArea") {
            if (objName == "m3PoorArea") {
                secondName = "MOD3栅格占比";
            } else if (objName == "olPoorArea") {
                secondName = "重叠栅格占比";
            } else {
                secondName = "越区栅格占比";
            }
        }
    }

    var option = {
        legend: {
            left: 'center',
            top: '2%',
            data: [firstName, secondName],
        },
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'shadow'
            },
        },
        grid: { //图表在div的布局控制
            top: '10%',
            left: '3%',
            right: '4%',
            bottom: '15%',
            containLabel: true
        },
        dataZoom: {//实现缩放功能
            type: "slider",
            show: true,
            // realtime : true,
            start: 0,
            bottom: '1%'

        },
        xAxis: [{ //X轴样式
            type: 'category',
            boundaryGap: true,
            axisLabel: {
                /*interval:0,*/
//					rotate:10,
                align: 'center',
            },
            axisLine: {
                show: true,
                lineStyle: {
                    color: '#686c78',
                }
            },
            axisTick: {
                show: true,
                alignWithLabel: true,
            },
            data: xAxisData
        }],
        yAxis: [{ //Y轴样式
            type: 'value',
            name: '个数',
            scale: true,
            axisLine: {
                show: true,
                lineStyle: {
                    color: '#686c78',
                },
            },
            axisTick: {
                show: false
            },
            splitLine: {
                show: false,
                lineStyle: {
                    color: '#EAEEF7',
                }
            }
        },
            { //Y轴样式
                type: 'value',
                name: '%',
                scale: true,
                axisLine: {
                    show: true,
                    lineStyle: {
                        color: '#686c78',
                    },
                },
                axisTick: {
                    show: false,
                },
                // max : 100 ,
                splitLine: {
                    show: false,
                    lineStyle: {
                        color: '#EAEEF7',
                    }
                }
            }
        ],
        series: [{ //图表数据样式
            type: 'line',
            symbolSize: 6,
            name: firstName,
            smooth: true,
            lineStyle: {
                normal: {
                    color: '#55b7f1',
                    width: 2,
                }
            },
            itemStyle: {
                normal: {
                    color: "#55b7f1",
                    borderColor: "#55b7f1",
                }
            },
            areaStyle: {
                normal: {
                    color: {
                        type: 'linear',
                        x: 0,
                        y: 0,
                        x2: 0,
                        y2: 1,
                        colorStops: [{
                            offset: 0,
                            color: '#D5ECFA' // 0% 处的颜色
                        },
                            {
                                offset: 1,
                                color: '#FFFFFF' // 100% 处的颜色
                            }
                        ],
                        globalCoord: false // 缺省为 false
                    }
                },
            },
            data: seriesData
        },
            { //图表数据样式
                type: 'line',
                symbolSize: 6,
                name: secondName,
                smooth: true,
                yAxisIndex: 1,
                data: paCellData
            }]
    };
    IntelligentRoadTest.gridThrLineEchart.setOption(option);
    IntelligentRoadTest.gridThrLineEchart.resize();
    showOrHideInputImage(1);

}

/**********************************
 * @funcname DateMinus
 * @funcdesc 计算日期相减天数
 * @param
 * @return {number} 月份跨度
 * @author laijunbao
 * @create 2018/4/1 13:51
 * @modifier
 * @modify
 ***********************************/
function DateMinus(sDate, eDate, dates) {
    var st = new Date(sDate);
    // st.setDate(st.getDate()-1);
    var et = new Date(eDate);
    var days = et.getTime() - st.getTime();
    var day = parseInt(days / (1000 * 60 * 60 * 24));
    return day;
}

Date.prototype.format = function (format) {
    var date = {
        "M+": this.getMonth() + 1,
        "d+": this.getDate(),
        "h+": this.getHours(),
        "m+": this.getMinutes(),
        "s+": this.getSeconds(),
        "q+": Math.floor((this.getMonth() + 3) / 3),
        "S+": this.getMilliseconds()
    };
    if (/(y+)/i.test(format)) {
        format = format.replace(RegExp.$1, (this.getFullYear() + '').substr(4 - RegExp.$1.length));
    }
    for (var k in date) {
        if (new RegExp("(" + k + ")").test(format)) {
            format = format.replace(RegExp.$1, RegExp.$1.length == 1
                ? date[k] : ("00" + date[k]).substr(("" + date[k]).length));
        }
    }
    return format;
}

function getMaxMinLatLng(item) {
    //显示原来的栅格
    var maxlng = null;
    var minlng = null;
    var maxlat = null;
    var minlat = null;
    //获取lable的中心经纬度
    if (IntelligentRoadTest.currentLocation == "poorArea") {
        maxlng = item.longitude_max_baidu;
        minlng = item.longitude_min_baidu;
        maxlat = item.latitude_max_baidu;
        minlat = item.latitude_min_baidu;
    } else if (IntelligentRoadTest.currentLocation == "concern") {
        maxlng = item.max_longitude_baidu;
        minlng = item.min_longitude_baidu;
        maxlat = item.max_latitude_baidu;
        minlat = item.min_latitude_baidu;
    } else if (IntelligentRoadTest.index == 2) {
        maxlng = item.longitude_max_baidu;
        minlng = item.longitude_min_baidu;
        maxlat = item.latitude_max_baidu;
        minlat = item.latitude_min_baidu;
    } else if (IntelligentRoadTest.currentLocation == "sector") {
        maxlng = item.longitude_max_baidu;
        minlng = item.longitude_min_baidu;
        maxlat = item.latitude_max_baidu;
        minlat = item.latitude_min_baidu;
    } else if (IntelligentRoadTest.currentLocation == "boneArea") {
        maxlng = item.longitude_max;
        minlng = item.longitude_min;
        maxlat = item.latitude_max;
        minlat = item.latitude_min;
    } else if (IntelligentRoadTest.currentLocation == "macSector") {
//		  lng=item.longitude_mid_baidu;
//		  lat=item.latitude_mid_baidu;
        //五高一地
    } else if (IntelligentRoadTest.currentLocation == "uptown" || IntelligentRoadTest.currentLocation == "college" || IntelligentRoadTest.currentLocation == "business" || IntelligentRoadTest.currentLocation == "scenery") {
        maxlng = item.longitude_max_baidu;
        minlng = item.longitude_min_baidu;
        maxlat = item.latitude_max_baidu;
        minlat = item.latitude_min_baidu;
    } else if (IntelligentRoadTest.currentLocation == "warwolf" || IntelligentRoadTest.currentLocation == "market" || IntelligentRoadTest.currentLocation == "food" || IntelligentRoadTest.currentLocation == "site") {
        maxlng = item.longitude_max_baidu;
        minlng = item.longitude_min_baidu;
        maxlat = item.latitude_max_baidu;
        minlat = item.latitude_min_baidu;
    } else if (IntelligentRoadTest.index == 13) {//框选
        maxlng = item.longitude_max_baidu;
        minlng = item.longitude_min_baidu;
        maxlat = item.latitude_max_baidu;
        minlat = item.latitude_min_baidu;
    }

    return [maxlng, minlng, maxlat, minlat];
}

/**********************************
 * @funcname IntelligentRoadTest.showHidePolygonGrid
 * @funcdesc 查询清单数据
 * @param {Object} item (input)
 * 包含经纬度信息的列表详情页数据
 * @return {null}
 * @author 郑文彬
 * @create 20180412
 **********************************/
IntelligentRoadTest.showHidePolygonGrid = function showHidePolygonGrid(item) {
    var lnglatArr = getMaxMinLatLng(item);
    IntelligentRoadTest.polygonContour = item.gis_data;
    if (IntelligentRoadTest.polygonContour == undefined) {
        IntelligentRoadTest.polygonContour = item.gis_data_baidu;
    }
    IntelligentRoadTest.polygonContour = IntelligentRoadTest.polygonContour.replace(/;/g, '|');
    if ($(event.currentTarget).hasClass("showBtn")) {
        IntelligentRoadTest.GridMap.clear();
        IntelligentRoadTest.isShowGrid = false;
        $(event.currentTarget).removeClass("showBtn");
        $(event.currentTarget).find("img").attr("src", "../js/IntelligentRoadTest/images/hideP.png");
    } else {
        $(event.currentTarget).addClass("showBtn");
        var maxlng = lnglatArr[0];
        var minlng = lnglatArr[1];
        var maxlat = lnglatArr[2];
        var minlat = lnglatArr[3];
        $(event.currentTarget).find("img").attr("src", "../js/IntelligentRoadTest/images/showP.png");
        IntelligentRoadTest.loadGrid(maxlng, minlng, maxlat, minlat);

    }

}

function showEsbhGrid(item) {
    //栅格数据
    var keyprefix = "";
    var cloumnsList = "";
    var list = [];
    var functionlist = [];
    item.gis_data = item.gis_data.replace(';', '|');
    keyprefix = item.day + "_0_";
    cloumnsList = IntelligentRoadTestSystemLayerV3.getCloumnsList();
    var list = ["IntelligentRoadTestV2_getGridDataV2", "TABLENAME:NOCE:DSI_MRO_ALL_GRID_TOT_W", "GRIDKEYPREFIX:" + keyprefix, "GRIDLEVEL:20",
        "POLYGONCONTOUR:" + item.gis_data, "COLUMNLIST:" + cloumnsList, "PARTITIONMOD:" + " "];//partitionmod 1
    var progressBarSqls = [];
    progressBarSqls.push(list);
    var functionlist = [IntelligentRoadTestSystemLayerV3.showGridByCanv2];
    var dataBase = [7];
    progressbarTwo.submitSql(progressBarSqls, functionlist, dataBase);

}

/**隐藏多边形*/
IntelligentRoadTest.hideEsbhPolygonGrid = function IntelligentRoadTest_hideEsbhPolygonGrid(item) {
    for (var i = 0; i < IntelligentRoadTest.esbhPolygon.length; i++) {
        IntelligentRoadTest.map.removeOverlay(IntelligentRoadTest.esbhPolygon[i]);
    }
    IntelligentRoadTest.esbhPolygon = [];
    //显示原来的栅格
    var maxlng = item.longitude_max_baidu;
    var minlng = item.longitude_min_baidu;
    var maxlat = item.latitude_max_baidu;
    var minlat = item.latitude_min_baidu;
    IntelligentRoadTest.loadGrid(maxlng, minlng, maxlat, minlat);
}


function sortNumber(a, b) {
    return a - b;
}


/**********************************
 * @funcname IntelligentRoadTest.showLinkPoorArea
 * @funcdesc 附近弱区或者覆盖弱区的显示隐藏
 * @param {objcet} event (input)
 *鼠标点击的event对象
 * @param {string} item (input)
 * 对应详情页数据
 * @param {string} type (input)
 * type==1为附近弱区 type==2覆盖弱区
 * @return {null}
 * @author 郑文彬
 * @create 20180412
 ***********************************/
IntelligentRoadTest.showLinkPoorArea = function IntelligentRoadTest_showLinkPoorArea(event, item, type) {
    if ($(event.currentTarget).hasClass("linkCellHover")) {
        $(event.currentTarget).attr("title", "显示连线");
        $(event.currentTarget).removeClass("linkCellHover");
        IntelligentRoadTest.hideSectorPoorLine(type);
    } else {
        var poorAreaList = []; //附近弱覆盖区域集合
        var nearPoorAreaList = []; //弱覆盖区域集合
        if (item.nb_poor_coverage_set != null && item.nb_poor_coverage_set != '') {
            nearPoorAreaList = IntelligentRoadTest.splitPoorAreaStr(item.nb_poor_coverage_set);
        }
        if (item.poor_coverage_set != null && item.poor_coverage_set != '') {
            poorAreaList = IntelligentRoadTest.splitPoorAreaStr(item.poor_coverage_set);
        }
        if (IntelligentRoadTest.currentSector == null) {
            IntelligentRoadTest.polygonList = [];
            IntelligentRoadTest.hasQueryNearPoor = false; //判断是否查询过这个扇区的附近弱区
            IntelligentRoadTest.hasQueryCoverPoor = false; //判断是否查询过这个扇区的覆盖弱区
        } else {
            if (IntelligentRoadTest.currentSector != item.enodeb_id + "_" + item.cell_id) { //切换了扇区
                IntelligentRoadTest.polygonList = [];
                IntelligentRoadTest.hasQueryNearPoor = false; //判断是否查询过这个扇区的附近弱区
                IntelligentRoadTest.hasQueryCoverPoor = false; //判断是否查询过这个扇区的覆盖弱区
            }
        }
        IntelligentRoadTest.currentSector = item.enodeb_id + "_" + item.cell_id;
        //加载覆盖弱区数据
        if (type == 1 && IntelligentRoadTest.hasQueryCoverPoor == false) {
            IntelligentRoadTest.hasQueryCoverPoor = true;
            IntelligentRoadTest.loadPolygonByObjectIdList(poorAreaList, 1);
        } else if (type == 2 && IntelligentRoadTest.hasQueryNearPoor == false) {
            //加载附近扇区数据
            IntelligentRoadTest.hasQueryNearPoor = true;
            IntelligentRoadTest.loadPolygonByObjectIdList(nearPoorAreaList, 2);
        }
        $(event.currentTarget).attr("title", "隐藏连线");
        $(event.currentTarget).addClass("linkCellHover");
        //显示覆盖弱区或者附近弱区
        setTimeout(function () {
            IntelligentRoadTest.showSectorPoorLine(item, type);
        }, 500);
    }
}

//计算相差distince米的经度差距
//centerPoint：中心点百度对象
//distince：需要计算的距离
//mapObject：百度地图对象
IntelligentRoadTest.LngDistince = function IntelligentRoadTest_LngDistince(centerPoint, distince, mapObject) {
    var addCenterPointLng = new BMap.Point(centerPoint.lng + 0.1, centerPoint.lat);
    var distinceLng = mapObject.getDistance(centerPoint, addCenterPointLng);//水平方向相差0.1经度的距离
    var onemeterLng = 0.1 / distinceLng;//一米的经度长度
    return parseFloat(onemeterLng * distince).toFixed(7);
}

//计算相差distince米的纬度差距
IntelligentRoadTest.LatDistince = function IntelligentRoadTest_LatDistince(centerPoint, distince, mapObject) {
    var addCenterPointLat = new BMap.Point(centerPoint.lng, centerPoint.lat + 0.1);
    var distinceLat = mapObject.getDistance(centerPoint, addCenterPointLat);//垂直方向相差0.1纬度的距离
    var onemeterLat = 0.1 / distinceLat;//一米的纬度长度
    return parseFloat(onemeterLat * distince).toFixed(7);
}

//根据数据得到连片区域类型（弱区、上行、下行等）
IntelligentRoadTest.getAreaTypeByData = function (item) {
//	类型TYPE=1（高速）、2（高铁）、3（市政路）、0（弱区）、4上行低速、5下行低速、6MOD3干扰、7重叠覆盖区、8越区覆盖
    var type = 'poorArea';
    switch (item.type) {
        case 0:
            type = 'poorArea';
            break;
        case 1:
            type = 'poorArea';
            break;
        case 2:
            type = 'poorArea';
            break;
        case 3:
            type = 'poorArea';
            break;
        case 4:
            type = 'upPoorArea';
            break;
        case 5:
            type = 'dwPoorArea';
            break;
        case 6:
            type = 'm3PoorArea';
            break;
        case 7:
            type = 'olPoorArea';
            break;
        case 8:
            type = 'cbPoorArea';
            break;
        default:
            break;
    }
    return type;
}

IntelligentRoadTest.factoryLevel = function (factory) {
    var level = 0;
    if (factory == '中兴') {
        level = 1;
    } else if (factory == '华为') {
        level = 2;
    } else if (factory == '爱立信') {
        level = 3;
    } else if(factory == '阿朗'){
        level = 4;
    }
    return level;
}

